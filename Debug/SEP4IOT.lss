
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000570  00800200  00005ce8  00005d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001279  00800770  00800770  000062ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000062ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b90  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eeed  00000000  00000000  00006f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bd6  00000000  00000000  00015e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006dd0  00000000  00000000  000199db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002844  00000000  00000000  000207ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000450d  00000000  00000000  00022ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d683  00000000  00000000  000274fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  00034b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1f 24 	jmp	0x483e	; 0x483e <__vector_25>
      68:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__vector_36>
      94:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__vector_51>
      d0:	0c 94 9d 25 	jmp	0x4b3a	; 0x4b3a <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__vector_54>
      dc:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	75 27       	eor	r23, r21
      fa:	e5 27       	eor	r30, r21
      fc:	e5 27       	eor	r30, r21
      fe:	e5 27       	eor	r30, r21
     100:	e5 27       	eor	r30, r21
     102:	e5 27       	eor	r30, r21
     104:	e5 27       	eor	r30, r21
     106:	e5 27       	eor	r30, r21
     108:	75 27       	eor	r23, r21
     10a:	e5 27       	eor	r30, r21
     10c:	e5 27       	eor	r30, r21
     10e:	e5 27       	eor	r30, r21
     110:	e5 27       	eor	r30, r21
     112:	e5 27       	eor	r30, r21
     114:	e5 27       	eor	r30, r21
     116:	e5 27       	eor	r30, r21
     118:	77 27       	eor	r23, r23
     11a:	e5 27       	eor	r30, r21
     11c:	e5 27       	eor	r30, r21
     11e:	e5 27       	eor	r30, r21
     120:	e5 27       	eor	r30, r21
     122:	e5 27       	eor	r30, r21
     124:	e5 27       	eor	r30, r21
     126:	e5 27       	eor	r30, r21
     128:	e5 27       	eor	r30, r21
     12a:	e5 27       	eor	r30, r21
     12c:	e5 27       	eor	r30, r21
     12e:	e5 27       	eor	r30, r21
     130:	e5 27       	eor	r30, r21
     132:	e5 27       	eor	r30, r21
     134:	e5 27       	eor	r30, r21
     136:	e5 27       	eor	r30, r21
     138:	77 27       	eor	r23, r23
     13a:	e5 27       	eor	r30, r21
     13c:	e5 27       	eor	r30, r21
     13e:	e5 27       	eor	r30, r21
     140:	e5 27       	eor	r30, r21
     142:	e5 27       	eor	r30, r21
     144:	e5 27       	eor	r30, r21
     146:	e5 27       	eor	r30, r21
     148:	e5 27       	eor	r30, r21
     14a:	e5 27       	eor	r30, r21
     14c:	e5 27       	eor	r30, r21
     14e:	e5 27       	eor	r30, r21
     150:	e5 27       	eor	r30, r21
     152:	e5 27       	eor	r30, r21
     154:	e5 27       	eor	r30, r21
     156:	e5 27       	eor	r30, r21
     158:	e1 27       	eor	r30, r17
     15a:	e5 27       	eor	r30, r21
     15c:	e5 27       	eor	r30, r21
     15e:	e5 27       	eor	r30, r21
     160:	e5 27       	eor	r30, r21
     162:	e5 27       	eor	r30, r21
     164:	e5 27       	eor	r30, r21
     166:	e5 27       	eor	r30, r21
     168:	ac 27       	eor	r26, r28
     16a:	e5 27       	eor	r30, r21
     16c:	e5 27       	eor	r30, r21
     16e:	e5 27       	eor	r30, r21
     170:	e5 27       	eor	r30, r21
     172:	e5 27       	eor	r30, r21
     174:	e5 27       	eor	r30, r21
     176:	e5 27       	eor	r30, r21
     178:	e5 27       	eor	r30, r21
     17a:	e5 27       	eor	r30, r21
     17c:	e5 27       	eor	r30, r21
     17e:	e5 27       	eor	r30, r21
     180:	e5 27       	eor	r30, r21
     182:	e5 27       	eor	r30, r21
     184:	e5 27       	eor	r30, r21
     186:	e5 27       	eor	r30, r21
     188:	a0 27       	eor	r26, r16
     18a:	e5 27       	eor	r30, r21
     18c:	e5 27       	eor	r30, r21
     18e:	e5 27       	eor	r30, r21
     190:	e5 27       	eor	r30, r21
     192:	e5 27       	eor	r30, r21
     194:	e5 27       	eor	r30, r21
     196:	e5 27       	eor	r30, r21
     198:	c4 27       	eor	r28, r20

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a ed       	ldi	r16, 0xDA	; 218
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e0       	ldi	r31, 0x0A	; 10
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
     1ce:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 cd 17 	sts	0x17CD, r24	; 0x8017cd <uxCurrentNumberOfTasks>
     1d8:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 5f 09 	call	0x12be	; 0x12be <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 5f 09 	call	0x12be	; 0x12be <vPortFree>
     1f4:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
     208:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <pxCurrentTimerList>
     23a:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 64 13 	call	0x26c8	; 0x26c8 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 bc 19 	call	0x3378	; 0x3378 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
     286:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <pxCurrentTimerList>
     28a:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 5e 19 	call	0x32bc	; 0x32bc <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
     326:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
     32a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <vQueueWaitForMessageRestricted>
     32e:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 bc 19 	call	0x3378	; 0x3378 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 5e 19 	call	0x32bc	; 0x32bc <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	3b d7       	rcall	.+3702   	; 0x12be <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
     45e:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
     462:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 bc 19 	call	0x3378	; 0x3378 <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 40 18 	lds	r30, 0x1840	; 0x801840 <pxOverflowTimerList>
     48a:	f0 91 41 18 	lds	r31, 0x1841	; 0x801841 <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	17 e0       	ldi	r17, 0x07	; 7
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	e8 ee       	ldi	r30, 0xE8	; 232
     4b8:	fc e5       	ldi	r31, 0x5C	; 92
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	a0 37       	cpi	r26, 0x70	; 112
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	29 e1       	ldi	r18, 0x19	; 25
     4cc:	a0 e7       	ldi	r26, 0x70	; 112
     4ce:	b7 e0       	ldi	r27, 0x07	; 7
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a9 3e       	cpi	r26, 0xE9	; 233
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 2a 1b 	call	0x3654	; 0x3654 <main>
     4de:	0c 94 72 2e 	jmp	0x5ce4	; 0x5ce4 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	88 2e       	mov	r8, r24
     50a:	96 2e       	mov	r9, r22
     50c:	1a 01       	movw	r2, r20
     50e:	28 01       	movw	r4, r16
     510:	39 01       	movw	r6, r18
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 b6 29 	call	0x536c	; 0x536c <calloc>
     51e:	ec 01       	movw	r28, r24
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	69 f1       	breq	.+90     	; 0x57e <co2Reader_create+0x9a>
     524:	fc 01       	movw	r30, r24
     526:	11 92       	st	Z+, r1
     528:	30 92 7b 07 	sts	0x077B, r3	; 0x80077b <_startMeasureEventGroup+0x1>
     52c:	20 92 7a 07 	sts	0x077A, r2	; 0x80077a <_startMeasureEventGroup>
     530:	40 92 76 07 	sts	0x0776, r4	; 0x800776 <_startMeasureBit>
     534:	50 92 77 07 	sts	0x0777, r5	; 0x800777 <_startMeasureBit+0x1>
     538:	60 92 78 07 	sts	0x0778, r6	; 0x800778 <_startMeasureBit+0x2>
     53c:	70 92 79 07 	sts	0x0779, r7	; 0x800779 <_startMeasureBit+0x3>
     540:	f0 92 75 07 	sts	0x0775, r15	; 0x800775 <_readyEventGroup+0x1>
     544:	e0 92 74 07 	sts	0x0774, r14	; 0x800774 <_readyEventGroup>
     548:	a0 92 70 07 	sts	0x0770, r10	; 0x800770 <__data_end>
     54c:	b0 92 71 07 	sts	0x0771, r11	; 0x800771 <__data_end+0x1>
     550:	c0 92 72 07 	sts	0x0772, r12	; 0x800772 <__data_end+0x2>
     554:	d0 92 73 07 	sts	0x0773, r13	; 0x800773 <__data_end+0x3>
     558:	49 2d       	mov	r20, r9
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	7f 01       	movw	r14, r30
     55e:	08 2d       	mov	r16, r8
     560:	9c 01       	movw	r18, r24
     562:	63 e4       	ldi	r22, 0x43	; 67
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 09 12 	call	0x2412	; 0x2412 <xTaskCreate>
     56e:	8d e4       	ldi	r24, 0x4D	; 77
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	ce 01       	movw	r24, r28
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	3f 90       	pop	r3
     5a2:	2f 90       	pop	r2
     5a4:	08 95       	ret

000005a6 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b8:	40 91 76 07 	lds	r20, 0x0776	; 0x800776 <_startMeasureBit>
     5bc:	50 91 77 07 	lds	r21, 0x0777	; 0x800777 <_startMeasureBit+0x1>
     5c0:	60 91 78 07 	lds	r22, 0x0778	; 0x800778 <_startMeasureBit+0x2>
     5c4:	70 91 79 07 	lds	r23, 0x0779	; 0x800779 <_startMeasureBit+0x3>
     5c8:	cc 24       	eor	r12, r12
     5ca:	ca 94       	dec	r12
     5cc:	dc 2c       	mov	r13, r12
     5ce:	76 01       	movw	r14, r12
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_startMeasureEventGroup>
     5d8:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <_startMeasureEventGroup+0x1>
     5dc:	11 d4       	rcall	.+2082   	; 0xe00 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5de:	00 91 76 07 	lds	r16, 0x0776	; 0x800776 <_startMeasureBit>
     5e2:	10 91 77 07 	lds	r17, 0x0777	; 0x800777 <_startMeasureBit+0x1>
     5e6:	20 91 78 07 	lds	r18, 0x0778	; 0x800778 <_startMeasureBit+0x2>
     5ea:	30 91 79 07 	lds	r19, 0x0779	; 0x800779 <_startMeasureBit+0x3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	a2 23       	and	r26, r18
     5f8:	b3 23       	and	r27, r19
     5fa:	08 17       	cp	r16, r24
     5fc:	19 07       	cpc	r17, r25
     5fe:	2a 07       	cpc	r18, r26
     600:	3b 07       	cpc	r19, r27
     602:	f1 f4       	brne	.+60     	; 0x640 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     604:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60a:	84 e5       	ldi	r24, 0x54	; 84
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

		vTaskDelay(2500); //pretend it takes some time
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 70 07 	lds	r20, 0x0770	; 0x800770 <__data_end>
     626:	50 91 71 07 	lds	r21, 0x0771	; 0x800771 <__data_end+0x1>
     62a:	60 91 72 07 	lds	r22, 0x0772	; 0x800772 <__data_end+0x2>
     62e:	70 91 73 07 	lds	r23, 0x0773	; 0x800773 <__data_end+0x3>
     632:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <_readyEventGroup>
     636:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <_readyEventGroup+0x1>
     63a:	a2 d4       	rcall	.+2372   	; 0xf80 <xEventGroupSetBits>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     652:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     654:	ce 01       	movw	r24, r28
     656:	a7 df       	rcall	.-178    	; 0x5a6 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	08 95       	ret

00000660 <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 b6 29 	call	0x536c	; 0x536c <calloc>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	19 f0       	breq	.+6      	; 0x67c <currentCondition_create+0x1c>
     676:	fc 01       	movw	r30, r24
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <currentCondition_setCO2>:
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	19 f0       	breq	.+6      	; 0x68c <currentCondition_setCO2+0xa>
     686:	fc 01       	movw	r30, r24
     688:	73 83       	std	Z+3, r23	; 0x03
     68a:	62 83       	std	Z+2, r22	; 0x02
     68c:	08 95       	ret

0000068e <currentCondition_setHumidity>:
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	19 f0       	breq	.+6      	; 0x698 <currentCondition_setHumidity+0xa>
     692:	fc 01       	movw	r30, r24
     694:	77 83       	std	Z+7, r23	; 0x07
     696:	66 83       	std	Z+6, r22	; 0x06
     698:	08 95       	ret

0000069a <currentCondition_setTemperature>:
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	19 f0       	breq	.+6      	; 0x6a4 <currentCondition_setTemperature+0xa>
     69e:	fc 01       	movw	r30, r24
     6a0:	75 83       	std	Z+5, r23	; 0x05
     6a2:	64 83       	std	Z+4, r22	; 0x04
     6a4:	08 95       	ret

000006a6 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     6a6:	fc 01       	movw	r30, r24
     6a8:	db 01       	movw	r26, r22
	
	payload.len=4;
	
	payload.port_no=LORA_USART;
	
	payload.bytes[0]= self->temperatureData >> 8;
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	2c 91       	ld	r18, X
     6ae:	14 97       	sbiw	r26, 0x04	; 4
     6b0:	15 96       	adiw	r26, 0x05	; 5
     6b2:	3c 91       	ld	r19, X
     6b4:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[1]=self->temperatureData & 0xFF;
	
	payload.bytes[2]=self->humidityData >> 8;
     6b6:	16 96       	adiw	r26, 0x06	; 6
     6b8:	8c 91       	ld	r24, X
     6ba:	16 97       	sbiw	r26, 0x06	; 6
     6bc:	17 96       	adiw	r26, 0x07	; 7
     6be:	9c 91       	ld	r25, X
	payload.bytes[3]=self->humidityData & 0xFF;
	
	return payload;
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	40 83       	st	Z, r20
     6c4:	44 e0       	ldi	r20, 0x04	; 4
     6c6:	41 83       	std	Z+1, r20	; 0x01
     6c8:	32 83       	std	Z+2, r19	; 0x02
     6ca:	23 83       	std	Z+3, r18	; 0x03
     6cc:	94 83       	std	Z+4, r25	; 0x04
     6ce:	85 83       	std	Z+5, r24	; 0x05
	
     6d0:	cf 01       	movw	r24, r30
     6d2:	08 95       	ret

000006d4 <device_create>:
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
	}
	else
	return -1;
}
     6d4:	2f 92       	push	r2
     6d6:	3f 92       	push	r3
     6d8:	4f 92       	push	r4
     6da:	5f 92       	push	r5
     6dc:	6f 92       	push	r6
     6de:	7f 92       	push	r7
     6e0:	8f 92       	push	r8
     6e2:	9f 92       	push	r9
     6e4:	af 92       	push	r10
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <device_create+0x26>
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	28 2e       	mov	r2, r24
     702:	36 2e       	mov	r3, r22
     704:	5c 83       	std	Y+4, r21	; 0x04
     706:	4b 83       	std	Y+3, r20	; 0x03
     708:	28 01       	movw	r4, r16
     70a:	39 01       	movw	r6, r18
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	88 e0       	ldi	r24, 0x08	; 8
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 b6 29 	call	0x536c	; 0x536c <calloc>
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	09 f4       	brne	.+2      	; 0x722 <device_create+0x4e>
     720:	46 c0       	rjmp	.+140    	; 0x7ae <device_create+0xda>
     722:	fc 01       	movw	r30, r24
     724:	91 82       	std	Z+1, r9	; 0x01
     726:	80 82       	st	Z, r8
     728:	8a 8d       	ldd	r24, Y+26	; 0x1a
     72a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     72c:	93 83       	std	Z+3, r25	; 0x03
     72e:	82 83       	std	Z+2, r24	; 0x02
     730:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deviceId>
     734:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deviceId+0x1>
     738:	93 df       	rcall	.-218    	; 0x660 <currentCondition_create>
     73a:	e9 81       	ldd	r30, Y+1	; 0x01
     73c:	fa 81       	ldd	r31, Y+2	; 0x02
     73e:	95 83       	std	Z+5, r25	; 0x05
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	9c 81       	ldd	r25, Y+4	; 0x04
     746:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <_startMeasureEventGroup+0x1>
     74a:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <_startMeasureEventGroup>
     74e:	40 92 84 07 	sts	0x0784, r4	; 0x800784 <_startMeasureBit>
     752:	50 92 85 07 	sts	0x0785, r5	; 0x800785 <_startMeasureBit+0x1>
     756:	60 92 86 07 	sts	0x0786, r6	; 0x800786 <_startMeasureBit+0x2>
     75a:	70 92 87 07 	sts	0x0787, r7	; 0x800787 <_startMeasureBit+0x3>
     75e:	f0 92 83 07 	sts	0x0783, r15	; 0x800783 <_readyEventGroup+0x1>
     762:	e0 92 82 07 	sts	0x0782, r14	; 0x800782 <_readyEventGroup>
     766:	a0 92 7e 07 	sts	0x077E, r10	; 0x80077e <_readyBit>
     76a:	b0 92 7f 07 	sts	0x077F, r11	; 0x80077f <_readyBit+0x1>
     76e:	c0 92 80 07 	sts	0x0780, r12	; 0x800780 <_readyBit+0x2>
     772:	d0 92 81 07 	sts	0x0781, r13	; 0x800781 <_readyBit+0x3>
     776:	8c 8d       	ldd	r24, Y+28	; 0x1c
     778:	9d 8d       	ldd	r25, Y+29	; 0x1d
     77a:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <_uplinkmessageBuffer+0x1>
     77e:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <_uplinkmessageBuffer>
     782:	43 2d       	mov	r20, r3
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	7f 01       	movw	r14, r30
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	e9 0e       	add	r14, r25
     78c:	f1 1c       	adc	r15, r1
     78e:	02 2d       	mov	r16, r2
     790:	9f 01       	movw	r18, r30
     792:	65 e6       	ldi	r22, 0x65	; 101
     794:	72 e0       	ldi	r23, 0x02	; 2
     796:	84 ec       	ldi	r24, 0xC4	; 196
     798:	94 e0       	ldi	r25, 0x04	; 4
     79a:	0e 94 09 12 	call	0x2412	; 0x2412 <xTaskCreate>
     79e:	8c e6       	ldi	r24, 0x6C	; 108
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
     7da:	3f 90       	pop	r3
     7dc:	2f 90       	pop	r2
     7de:	08 95       	ret

000007e0 <device_setHumidityToCurrent>:
     7e0:	fc 01       	movw	r30, r24
     7e2:	84 81       	ldd	r24, Z+4	; 0x04
     7e4:	95 81       	ldd	r25, Z+5	; 0x05
     7e6:	53 cf       	rjmp	.-346    	; 0x68e <currentCondition_setHumidity>
     7e8:	08 95       	ret

000007ea <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     7ea:	fc 01       	movw	r30, r24
     7ec:	84 81       	ldd	r24, Z+4	; 0x04
     7ee:	95 81       	ldd	r25, Z+5	; 0x05
     7f0:	48 cf       	rjmp	.-368    	; 0x682 <currentCondition_setCO2>
     7f2:	08 95       	ret

000007f4 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	19 f0       	breq	.+6      	; 0x804 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     7fe:	2d df       	rcall	.-422    	; 0x65a <co2Reader_getCO2>
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	08 95       	ret
	else return -1;
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	9f ef       	ldi	r25, 0xFF	; 255
}
     808:	08 95       	ret

0000080a <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	currentCondition_setTemperature(self->currentCondition,value);
     80a:	fc 01       	movw	r30, r24
     80c:	84 81       	ldd	r24, Z+4	; 0x04
     80e:	95 81       	ldd	r25, Z+5	; 0x05
     810:	44 cf       	rjmp	.-376    	; 0x69a <currentCondition_setTemperature>
     812:	08 95       	ret

00000814 <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	66 97       	sbiw	r28, 0x16	; 22
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     83a:	40 91 84 07 	lds	r20, 0x0784	; 0x800784 <_startMeasureBit>
     83e:	50 91 85 07 	lds	r21, 0x0785	; 0x800785 <_startMeasureBit+0x1>
     842:	60 91 86 07 	lds	r22, 0x0786	; 0x800786 <_startMeasureBit+0x2>
     846:	70 91 87 07 	lds	r23, 0x0787	; 0x800787 <_startMeasureBit+0x3>
     84a:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <_startMeasureEventGroup>
     84e:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <_startMeasureEventGroup+0x1>
     852:	96 d3       	rcall	.+1836   	; 0xf80 <xEventGroupSetBits>
	printf("device has set bits");
     854:	86 e7       	ldi	r24, 0x76	; 118
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     860:	40 91 7e 07 	lds	r20, 0x077E	; 0x80077e <_readyBit>
     864:	50 91 7f 07 	lds	r21, 0x077F	; 0x80077f <_readyBit+0x1>
     868:	60 91 80 07 	lds	r22, 0x0780	; 0x800780 <_readyBit+0x2>
     86c:	70 91 81 07 	lds	r23, 0x0781	; 0x800781 <_readyBit+0x3>
     870:	cc 24       	eor	r12, r12
     872:	ca 94       	dec	r12
     874:	dc 2c       	mov	r13, r12
     876:	76 01       	movw	r14, r12
     878:	01 e0       	ldi	r16, 0x01	; 1
     87a:	21 e0       	ldi	r18, 0x01	; 1
     87c:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <_readyEventGroup>
     880:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <_readyEventGroup+0x1>
     884:	bd d2       	rcall	.+1402   	; 0xe00 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     886:	00 91 7e 07 	lds	r16, 0x077E	; 0x80077e <_readyBit>
     88a:	10 91 7f 07 	lds	r17, 0x077F	; 0x80077f <_readyBit+0x1>
     88e:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <_readyBit+0x2>
     892:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <_readyBit+0x3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	80 23       	and	r24, r16
     89c:	91 23       	and	r25, r17
     89e:	a2 23       	and	r26, r18
     8a0:	b3 23       	and	r27, r19
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	08 17       	cp	r16, r24
     8a8:	19 07       	cpc	r17, r25
     8aa:	2a 07       	cpc	r18, r26
     8ac:	3b 07       	cpc	r19, r27
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <device_startMeasuring+0x9e>
     8b0:	5a c0       	rjmp	.+180    	; 0x966 <device_startMeasuring+0x152>
		printf("device got done bit\n");
     8b2:	8a e8       	ldi	r24, 0x8A	; 138
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	0e 94 67 2b 	call	0x56ce	; 0x56ce <puts>
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     8ba:	f5 01       	movw	r30, r10
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	cc de       	rcall	.-616    	; 0x65a <co2Reader_getCO2>
     8c2:	1f 92       	push	r1
     8c4:	8f 93       	push	r24
     8c6:	8e e9       	ldi	r24, 0x9E	; 158
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
		printf("Temperature is: %f\n", humAndTempReader_getTemperature(self->humAndTempReader));
     8d2:	f5 01       	movw	r30, r10
     8d4:	82 81       	ldd	r24, Z+2	; 0x02
     8d6:	93 81       	ldd	r25, Z+3	; 0x03
     8d8:	3e d1       	rcall	.+636    	; 0xb56 <humAndTempReader_getTemperature>
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	7f 93       	push	r23
     8e0:	6f 93       	push	r22
     8e2:	8a ea       	ldi	r24, 0xAA	; 170
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
		printf("Humidity is: %f\n", humAndTempReader_getHumidity(self->humAndTempReader));
     8ee:	f5 01       	movw	r30, r10
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	2a d1       	rcall	.+596    	; 0xb4a <humAndTempReader_getHumidity>
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	7f 93       	push	r23
     8fc:	6f 93       	push	r22
     8fe:	8e eb       	ldi	r24, 0xBE	; 190
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	9f 93       	push	r25
     904:	8f 93       	push	r24
     906:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     90a:	c5 01       	movw	r24, r10
     90c:	73 df       	rcall	.-282    	; 0x7f4 <device_getCO2Data>
     90e:	bc 01       	movw	r22, r24
     910:	c5 01       	movw	r24, r10
     912:	6b df       	rcall	.-298    	; 0x7ea <device_setCO2ToCurrent>
     914:	f5 01       	movw	r30, r10
	
		device_setTemperatureToCurrent(self, humAndTempReader_getTemperature(self->humAndTempReader));
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	93 81       	ldd	r25, Z+3	; 0x03
     91a:	1d d1       	rcall	.+570    	; 0xb56 <humAndTempReader_getTemperature>
     91c:	0e 94 33 1b 	call	0x3666	; 0x3666 <__fixsfsi>
     920:	c5 01       	movw	r24, r10
     922:	73 df       	rcall	.-282    	; 0x80a <device_setTemperatureToCurrent>
     924:	f5 01       	movw	r30, r10
		device_setHumidityToCurrent(self, humAndTempReader_getHumidity(self->humAndTempReader));
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	0f d1       	rcall	.+542    	; 0xb4a <humAndTempReader_getHumidity>
     92c:	0e 94 38 1b 	call	0x3670	; 0x3670 <__fixunssfsi>
     930:	c5 01       	movw	r24, r10
     932:	56 df       	rcall	.-340    	; 0x7e0 <device_setHumidityToCurrent>
     934:	f5 01       	movw	r30, r10
     936:	64 81       	ldd	r22, Z+4	; 0x04
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		lora_payload_t payload=getcurrentConditionPayload(self->currentCondition);
     938:	75 81       	ldd	r23, Z+5	; 0x05
     93a:	ce 01       	movw	r24, r28
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	b3 de       	rcall	.-666    	; 0x6a6 <getcurrentConditionPayload>
     940:	0f ef       	ldi	r16, 0xFF	; 255
     942:	1f ef       	ldi	r17, 0xFF	; 255
     944:	98 01       	movw	r18, r16
		
		
			xMessageBufferSend(_uplinkmessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
     946:	46 e1       	ldi	r20, 0x16	; 22
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <_uplinkmessageBuffer>
     954:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <_uplinkmessageBuffer+0x1>
     958:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xStreamBufferSend>
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	66 96       	adiw	r28, 0x16	; 22
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
		
		
	}
}
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	bf 90       	pop	r11
     984:	af 90       	pop	r10
     986:	08 95       	ret

00000988 <device_executeTask>:
     988:	ec 01       	movw	r28, r24
     98a:	ce 01       	movw	r24, r28
     98c:	43 df       	rcall	.-378    	; 0x814 <device_startMeasuring>
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     98e:	fd cf       	rjmp	.-6      	; 0x98a <device_executeTask+0x2>

00000990 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     990:	2f 92       	push	r2
     992:	3f 92       	push	r3
     994:	4f 92       	push	r4
     996:	5f 92       	push	r5
     998:	6f 92       	push	r6
     99a:	7f 92       	push	r7
     99c:	8f 92       	push	r8
     99e:	9f 92       	push	r9
     9a0:	af 92       	push	r10
     9a2:	bf 92       	push	r11
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	88 2e       	mov	r8, r24
     9b6:	96 2e       	mov	r9, r22
     9b8:	1a 01       	movw	r2, r20
     9ba:	28 01       	movw	r4, r16
     9bc:	39 01       	movw	r6, r18
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 b6 29 	call	0x536c	; 0x536c <calloc>
     9ca:	ec 01       	movw	r28, r24
     9cc:	89 2b       	or	r24, r25
     9ce:	c1 f1       	breq	.+112    	; 0xa40 <humAndTempReader_create+0xb0>
     9d0:	18 82       	st	Y, r1
     9d2:	19 82       	std	Y+1, r1	; 0x01
     9d4:	1a 82       	std	Y+2, r1	; 0x02
     9d6:	1b 82       	std	Y+3, r1	; 0x03
     9d8:	1c 82       	std	Y+4, r1	; 0x04
     9da:	1d 82       	std	Y+5, r1	; 0x05
     9dc:	1e 82       	std	Y+6, r1	; 0x06
     9de:	1f 82       	std	Y+7, r1	; 0x07
     9e0:	30 92 95 07 	sts	0x0795, r3	; 0x800795 <_startMeasureEventGroup+0x1>
     9e4:	20 92 94 07 	sts	0x0794, r2	; 0x800794 <_startMeasureEventGroup>
     9e8:	40 92 90 07 	sts	0x0790, r4	; 0x800790 <_startMeasureBit>
     9ec:	50 92 91 07 	sts	0x0791, r5	; 0x800791 <_startMeasureBit+0x1>
     9f0:	60 92 92 07 	sts	0x0792, r6	; 0x800792 <_startMeasureBit+0x2>
     9f4:	70 92 93 07 	sts	0x0793, r7	; 0x800793 <_startMeasureBit+0x3>
     9f8:	f0 92 8f 07 	sts	0x078F, r15	; 0x80078f <_readyEventGroup+0x1>
     9fc:	e0 92 8e 07 	sts	0x078E, r14	; 0x80078e <_readyEventGroup>
     a00:	a0 92 8a 07 	sts	0x078A, r10	; 0x80078a <_readyBit>
     a04:	b0 92 8b 07 	sts	0x078B, r11	; 0x80078b <_readyBit+0x1>
     a08:	c0 92 8c 07 	sts	0x078C, r12	; 0x80078c <_readyBit+0x2>
     a0c:	d0 92 8d 07 	sts	0x078D, r13	; 0x80078d <_readyBit+0x3>
     a10:	0e 94 29 1c 	call	0x3852	; 0x3852 <hih8120Create>
     a14:	49 2d       	mov	r20, r9
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	7e 01       	movw	r14, r28
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	e8 0e       	add	r14, r24
     a1e:	f1 1c       	adc	r15, r1
     a20:	08 2d       	mov	r16, r8
     a22:	9e 01       	movw	r18, r28
     a24:	6f ec       	ldi	r22, 0xCF	; 207
     a26:	72 e0       	ldi	r23, 0x02	; 2
     a28:	81 ea       	ldi	r24, 0xA1	; 161
     a2a:	95 e0       	ldi	r25, 0x05	; 5
     a2c:	0e 94 09 12 	call	0x2412	; 0x2412 <xTaskCreate>
     a30:	80 ee       	ldi	r24, 0xE0	; 224
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	ce 01       	movw	r24, r28
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	6f 90       	pop	r6
     a5e:	5f 90       	pop	r5
     a60:	4f 90       	pop	r4
     a62:	3f 90       	pop	r3
     a64:	2f 90       	pop	r2
     a66:	08 95       	ret

00000a68 <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     a7a:	40 91 90 07 	lds	r20, 0x0790	; 0x800790 <_startMeasureBit>
     a7e:	50 91 91 07 	lds	r21, 0x0791	; 0x800791 <_startMeasureBit+0x1>
     a82:	60 91 92 07 	lds	r22, 0x0792	; 0x800792 <_startMeasureBit+0x2>
     a86:	70 91 93 07 	lds	r23, 0x0793	; 0x800793 <_startMeasureBit+0x3>
     a8a:	cc 24       	eor	r12, r12
     a8c:	ca 94       	dec	r12
     a8e:	dc 2c       	mov	r13, r12
     a90:	76 01       	movw	r14, r12
     a92:	01 e0       	ldi	r16, 0x01	; 1
     a94:	21 e0       	ldi	r18, 0x01	; 1
     a96:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <_startMeasureEventGroup>
     a9a:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <_startMeasureEventGroup+0x1>
     a9e:	b0 d1       	rcall	.+864    	; 0xe00 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     aa0:	00 91 90 07 	lds	r16, 0x0790	; 0x800790 <_startMeasureBit>
     aa4:	10 91 91 07 	lds	r17, 0x0791	; 0x800791 <_startMeasureBit+0x1>
     aa8:	20 91 92 07 	lds	r18, 0x0792	; 0x800792 <_startMeasureBit+0x2>
     aac:	30 91 93 07 	lds	r19, 0x0793	; 0x800793 <_startMeasureBit+0x3>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	80 23       	and	r24, r16
     ab6:	91 23       	and	r25, r17
     ab8:	a2 23       	and	r26, r18
     aba:	b3 23       	and	r27, r19
     abc:	08 17       	cp	r16, r24
     abe:	19 07       	cpc	r17, r25
     ac0:	2a 07       	cpc	r18, r26
     ac2:	3b 07       	cpc	r19, r27
     ac4:	a9 f5       	brne	.+106    	; 0xb30 <humAndTempReader_measure+0xc8>
		hih8120Meassure();
     ac6:	0e 94 44 1c 	call	0x3888	; 0x3888 <hih8120Meassure>
		if(hih8120IsReady())
     aca:	0e 94 41 1c 	call	0x3882	; 0x3882 <hih8120IsReady>
     ace:	89 2b       	or	r24, r25
     ad0:	e1 f0       	breq	.+56     	; 0xb0a <humAndTempReader_measure+0xa2>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     ad2:	0e 94 55 1c 	call	0x38aa	; 0x38aa <hih8120GetHumidity>
     ad6:	bc 01       	movw	r22, r24
     ad8:	99 0f       	add	r25, r25
     ada:	88 0b       	sbc	r24, r24
     adc:	99 0b       	sbc	r25, r25
     ade:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__floatsisf>
     ae2:	68 83       	st	Y, r22
     ae4:	79 83       	std	Y+1, r23	; 0x01
     ae6:	8a 83       	std	Y+2, r24	; 0x02
     ae8:	9b 83       	std	Y+3, r25	; 0x03
			self->temperature = hih8120GetTemperature_x10();
     aea:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <hih8120GetTemperature>
     aee:	bc 01       	movw	r22, r24
     af0:	99 0f       	add	r25, r25
     af2:	88 0b       	sbc	r24, r24
     af4:	99 0b       	sbc	r25, r25
     af6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__floatsisf>
     afa:	6c 83       	std	Y+4, r22	; 0x04
     afc:	7d 83       	std	Y+5, r23	; 0x05
     afe:	8e 83       	std	Y+6, r24	; 0x06
     b00:	9f 83       	std	Y+7, r25	; 0x07
			printf("humidity and temperature done bit set\n");
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	0e 94 67 2b 	call	0x56ce	; 0x56ce <puts>
		}
		vTaskDelay(2500); //pretend it takes some time
     b0a:	64 ec       	ldi	r22, 0xC4	; 196
     b0c:	79 e0       	ldi	r23, 0x09	; 9
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     b16:	40 91 8a 07 	lds	r20, 0x078A	; 0x80078a <_readyBit>
     b1a:	50 91 8b 07 	lds	r21, 0x078B	; 0x80078b <_readyBit+0x1>
     b1e:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <_readyBit+0x2>
     b22:	70 91 8d 07 	lds	r23, 0x078D	; 0x80078d <_readyBit+0x3>
     b26:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <_readyEventGroup>
     b2a:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <_readyEventGroup+0x1>
     b2e:	28 d2       	rcall	.+1104   	; 0xf80 <xEventGroupSetBits>
	}
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	08 95       	ret

00000b42 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     b42:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     b44:	ce 01       	movw	r24, r28
     b46:	90 df       	rcall	.-224    	; 0xa68 <humAndTempReader_measure>
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <humAndTempReader_executeTask+0x2>

00000b4a <humAndTempReader_getHumidity>:
		xEventGroupSetBits(_readyEventGroup, _readyBit);
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
     b4a:	fc 01       	movw	r30, r24
     b4c:	60 81       	ld	r22, Z
     b4e:	71 81       	ldd	r23, Z+1	; 0x01
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	93 81       	ldd	r25, Z+3	; 0x03
}
     b54:	08 95       	ret

00000b56 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
     b56:	fc 01       	movw	r30, r24
     b58:	64 81       	ldd	r22, Z+4	; 0x04
     b5a:	75 81       	ldd	r23, Z+5	; 0x05
     b5c:	86 81       	ldd	r24, Z+6	; 0x06
     b5e:	97 81       	ldd	r25, Z+7	; 0x07
}
     b60:	08 95       	ret

00000b62 <lora_UpLinkHandler_create>:


/*Check for the parameters*/

void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	xTaskCreate(
     b6a:	e1 2c       	mov	r14, r1
     b6c:	f1 2c       	mov	r15, r1
     b6e:	08 2f       	mov	r16, r24
     b70:	48 e8       	ldi	r20, 0x88	; 136
     b72:	51 e0       	ldi	r21, 0x01	; 1
     b74:	65 e2       	ldi	r22, 0x25	; 37
     b76:	73 e0       	ldi	r23, 0x03	; 3
     b78:	8d ec       	ldi	r24, 0xCD	; 205
     b7a:	96 e0       	ldi	r25, 0x06	; 6
     b7c:	0e 94 09 12 	call	0x2412	; 0x2412 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	08 95       	ret

00000b88 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <lora_driver_reset_rn2483>
		vTaskDelay(2);
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     bb0:	66 e9       	ldi	r22, 0x96	; 150
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     bbc:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     bc6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <lora_driver_rn2483_factory_reset>
     bca:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	8e e2       	ldi	r24, 0x2E	; 46
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	9f 93       	push	r25
     bd8:	8f 93       	push	r24
     bda:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     bde:	0e 94 2a 21 	call	0x4254	; 0x4254 <lora_driver_configure_to_eu868>
     be2:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	81 e4       	ldi	r24, 0x41	; 65
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     bf6:	8c ea       	ldi	r24, 0xAC	; 172
     bf8:	97 e0       	ldi	r25, 0x07	; 7
     bfa:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     bfe:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c02:	cc ea       	ldi	r28, 0xAC	; 172
     c04:	d7 e0       	ldi	r29, 0x07	; 7
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	9f 93       	push	r25
     c0c:	8f 93       	push	r24
     c0e:	8a e5       	ldi	r24, 0x5A	; 90
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <lora_driver_set_device_identifier>
     c20:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	8e e6       	ldi	r24, 0x6E	; 110
     c2e:	93 e0       	ldi	r25, 0x03	; 3
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     c38:	ae 01       	movw	r20, r28
     c3a:	63 e8       	ldi	r22, 0x83	; 131
     c3c:	73 e0       	ldi	r23, 0x03	; 3
     c3e:	84 ea       	ldi	r24, 0xA4	; 164
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	0e 94 08 22 	call	0x4410	; 0x4410 <lora_driver_set_otaa_identity>
     c46:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	83 e8       	ldi	r24, 0x83	; 131
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	9f 93       	push	r25
     c58:	8f 93       	push	r24
     c5a:	84 ea       	ldi	r24, 0xA4	; 164
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	9f 93       	push	r25
     c60:	8f 93       	push	r24
     c62:	85 eb       	ldi	r24, 0xB5	; 181
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     c6e:	0e 94 0d 20 	call	0x401a	; 0x401a <lora_driver_save_mac>
     c72:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	8b ee       	ldi	r24, 0xEB	; 235
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     c86:	8d b7       	in	r24, 0x3d	; 61
     c88:	9e b7       	in	r25, 0x3e	; 62
     c8a:	82 96       	adiw	r24, 0x22	; 34
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	9e bf       	out	0x3e, r25	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	8d bf       	out	0x3d, r24	; 61
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 07 21 	call	0x420e	; 0x420e <lora_driver_set_adaptive_data_rate>
     c9c:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	8a ef       	ldi	r24, 0xFA	; 250
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     cb0:	84 ef       	ldi	r24, 0xF4	; 244
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 12 21 	call	0x4224	; 0x4224 <lora_driver_set_receive_delay>
     cb8:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	8f 93       	push	r24
     cc4:	84 ef       	ldi	r24, 0xF4	; 244
     cc6:	8f 93       	push	r24
     cc8:	8b e1       	ldi	r24, 0x1B	; 27
     cca:	94 e0       	ldi	r25, 0x04	; 4
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
     cd4:	8d b7       	in	r24, 0x3d	; 61
     cd6:	9e b7       	in	r25, 0x3e	; 62
     cd8:	0a 96       	adiw	r24, 0x0a	; 10
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	9e bf       	out	0x3e, r25	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	8d bf       	out	0x3d, r24	; 61
     ce4:	ca e0       	ldi	r28, 0x0A	; 10
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     ce8:	0b e3       	ldi	r16, 0x3B	; 59
     cea:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 13 20 	call	0x4026	; 0x4026 <lora_driver_join>
     cf2:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     cf4:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	1f 93       	push	r17
     d02:	0f 93       	push	r16
     d04:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>

		if ( rc != LoRa_ACCEPTED)
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	d8 16       	cp	r13, r24
     d18:	a9 f0       	breq	.+42     	; 0xd44 <lora_UpLinkHandler_task+0x1bc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     d20:	66 e3       	ldi	r22, 0x36	; 54
     d22:	71 e0       	ldi	r23, 0x01	; 1
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>
     d2c:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     d2e:	f1 f6       	brne	.-68     	; 0xcec <lora_UpLinkHandler_task+0x164>
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <lora_UpLinkHandler_task+0x1ae>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     d32:	3e d4       	rcall	.+2172   	; 0x15b0 <vPortYield>
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <lora_UpLinkHandler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <led_fast_blink>
     d42:	f7 cf       	rjmp	.-18     	; 0xd32 <lora_UpLinkHandler_task+0x1aa>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <led_led_on>
		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     d4a:	00 e0       	ldi	r16, 0x00	; 0
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	98 01       	movw	r18, r16
     d50:	42 e3       	ldi	r20, 0x32	; 50
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	66 e9       	ldi	r22, 0x96	; 150
     d56:	77 e0       	ldi	r23, 0x07	; 7
     d58:	c7 01       	movw	r24, r14
     d5a:	0e 94 c8 10 	call	0x2190	; 0x2190 <xStreamBufferReceive>
		
		//_uplink_payload = (_uplink_payload) &rxData;
		
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     d64:	66 e9       	ldi	r22, 0x96	; 150
     d66:	77 e0       	ldi	r23, 0x07	; 7
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	0e 94 3c 20 	call	0x4078	; 0x4078 <lora_driver_sent_upload_message>
     d6e:	0e 94 29 22 	call	0x4452	; 0x4452 <lora_driver_map_return_code_to_text>
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	8b e5       	ldi	r24, 0x5B	; 91
     d78:	94 e0       	ldi	r25, 0x04	; 4
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <printf>
	}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	08 95       	ret

00000d9a <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     d9a:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     d9c:	ce 01       	movw	r24, r28
     d9e:	f4 de       	rcall	.-536    	; 0xb88 <lora_UpLinkHandler_task>
			vTaskDelay(300000);
     da0:	60 ee       	ldi	r22, 0xE0	; 224
     da2:	73 e9       	ldi	r23, 0x93	; 147
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>
     dac:	f7 cf       	rjmp	.-18     	; 0xd9c <lora_UpLinkHandler_startTask+0x2>

00000dae <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     dae:	e7 e0       	ldi	r30, 0x07	; 7
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	80 81       	ld	r24, Z
     db4:	8f 60       	ori	r24, 0x0F	; 15
     db6:	80 83       	st	Z, r24
     db8:	08 95       	ret

00000dba <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     dba:	e8 e0       	ldi	r30, 0x08	; 8
     dbc:	f1 e0       	ldi	r31, 0x01	; 1
     dbe:	90 81       	ld	r25, Z
     dc0:	90 7f       	andi	r25, 0xF0	; 240
     dc2:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     dc4:	90 81       	ld	r25, Z
     dc6:	8f 70       	andi	r24, 0x0F	; 15
     dc8:	98 2b       	or	r25, r24
     dca:	90 83       	st	Z, r25
     dcc:	08 95       	ret

00000dce <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     dce:	e8 e0       	ldi	r30, 0x08	; 8
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	80 81       	ld	r24, Z
     dd4:	80 7f       	andi	r24, 0xF0	; 240
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

00000dda <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	80 e1       	ldi	r24, 0x10	; 16
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	b4 d1       	rcall	.+872    	; 0x114c <pvPortMalloc>
     de4:	ec 01       	movw	r28, r24
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	39 f0       	breq	.+14     	; 0xdf8 <xEventGroupCreate+0x1e>
     dea:	fc 01       	movw	r30, r24
     dec:	11 92       	st	Z+, r1
     dee:	11 92       	st	Z+, r1
     df0:	11 92       	st	Z+, r1
     df2:	11 92       	st	Z+, r1
     df4:	cf 01       	movw	r24, r30
     df6:	94 d2       	rcall	.+1320   	; 0x1320 <vListInitialise>
     df8:	ce 01       	movw	r24, r28
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <xEventGroupWaitBits>:
     e00:	2f 92       	push	r2
     e02:	3f 92       	push	r3
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ec 01       	movw	r28, r24
     e26:	4a 01       	movw	r8, r20
     e28:	5b 01       	movw	r10, r22
     e2a:	62 2e       	mov	r6, r18
     e2c:	70 2e       	mov	r7, r16
     e2e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <vTaskSuspendAll>
     e32:	28 80       	ld	r2, Y
     e34:	39 80       	ldd	r3, Y+1	; 0x01
     e36:	4a 80       	ldd	r4, Y+2	; 0x02
     e38:	5b 80       	ldd	r5, Y+3	; 0x03
     e3a:	01 11       	cpse	r16, r1
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <xEventGroupWaitBits+0x58>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	b2 01       	movw	r22, r4
     e42:	a1 01       	movw	r20, r2
     e44:	48 21       	and	r20, r8
     e46:	59 21       	and	r21, r9
     e48:	6a 21       	and	r22, r10
     e4a:	7b 21       	and	r23, r11
     e4c:	45 2b       	or	r20, r21
     e4e:	46 2b       	or	r20, r22
     e50:	47 2b       	or	r20, r23
     e52:	79 f4       	brne	.+30     	; 0xe72 <xEventGroupWaitBits+0x72>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0d c0       	rjmp	.+26     	; 0xe72 <xEventGroupWaitBits+0x72>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	b2 01       	movw	r22, r4
     e5c:	a1 01       	movw	r20, r2
     e5e:	48 21       	and	r20, r8
     e60:	59 21       	and	r21, r9
     e62:	6a 21       	and	r22, r10
     e64:	7b 21       	and	r23, r11
     e66:	48 15       	cp	r20, r8
     e68:	59 05       	cpc	r21, r9
     e6a:	6a 05       	cpc	r22, r10
     e6c:	7b 05       	cpc	r23, r11
     e6e:	09 f0       	breq	.+2      	; 0xe72 <xEventGroupWaitBits+0x72>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	88 23       	and	r24, r24
     e74:	81 f0       	breq	.+32     	; 0xe96 <xEventGroupWaitBits+0x96>
     e76:	66 20       	and	r6, r6
     e78:	09 f4       	brne	.+2      	; 0xe7c <xEventGroupWaitBits+0x7c>
     e7a:	6b c0       	rjmp	.+214    	; 0xf52 <xEventGroupWaitBits+0x152>
     e7c:	80 94       	com	r8
     e7e:	90 94       	com	r9
     e80:	a0 94       	com	r10
     e82:	b0 94       	com	r11
     e84:	82 20       	and	r8, r2
     e86:	93 20       	and	r9, r3
     e88:	a4 20       	and	r10, r4
     e8a:	b5 20       	and	r11, r5
     e8c:	88 82       	st	Y, r8
     e8e:	99 82       	std	Y+1, r9	; 0x01
     e90:	aa 82       	std	Y+2, r10	; 0x02
     e92:	bb 82       	std	Y+3, r11	; 0x03
     e94:	5e c0       	rjmp	.+188    	; 0xf52 <xEventGroupWaitBits+0x152>
     e96:	c1 14       	cp	r12, r1
     e98:	d1 04       	cpc	r13, r1
     e9a:	e1 04       	cpc	r14, r1
     e9c:	f1 04       	cpc	r15, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <xEventGroupWaitBits+0xa2>
     ea0:	58 c0       	rjmp	.+176    	; 0xf52 <xEventGroupWaitBits+0x152>
     ea2:	66 20       	and	r6, r6
     ea4:	29 f0       	breq	.+10     	; 0xeb0 <xEventGroupWaitBits+0xb0>
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	71 e0       	ldi	r23, 0x01	; 1
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <xEventGroupWaitBits+0xb6>
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	ba 01       	movw	r22, r20
     eb6:	71 10       	cpse	r7, r1
     eb8:	74 60       	ori	r23, 0x04	; 4
     eba:	48 29       	or	r20, r8
     ebc:	59 29       	or	r21, r9
     ebe:	6a 29       	or	r22, r10
     ec0:	7b 29       	or	r23, r11
     ec2:	97 01       	movw	r18, r14
     ec4:	86 01       	movw	r16, r12
     ec6:	ce 01       	movw	r24, r28
     ec8:	04 96       	adiw	r24, 0x04	; 4
     eca:	0e 94 78 15 	call	0x2af0	; 0x2af0 <vTaskPlaceOnUnorderedEventList>
     ece:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
     ed2:	81 11       	cpse	r24, r1
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <xEventGroupWaitBits+0xd8>
     ed6:	6c d3       	rcall	.+1752   	; 0x15b0 <vPortYield>
     ed8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <uxTaskResetEventItemValue>
     edc:	91 fd       	sbrc	r25, 1
     ede:	35 c0       	rjmp	.+106    	; 0xf4a <xEventGroupWaitBits+0x14a>
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	0f 92       	push	r0
     ee6:	68 81       	ld	r22, Y
     ee8:	79 81       	ldd	r23, Y+1	; 0x01
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	71 10       	cpse	r7, r1
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <xEventGroupWaitBits+0x10c>
     ef2:	21 e0       	ldi	r18, 0x01	; 1
     ef4:	75 01       	movw	r14, r10
     ef6:	64 01       	movw	r12, r8
     ef8:	c6 22       	and	r12, r22
     efa:	d7 22       	and	r13, r23
     efc:	e8 22       	and	r14, r24
     efe:	f9 22       	and	r15, r25
     f00:	cd 28       	or	r12, r13
     f02:	ce 28       	or	r12, r14
     f04:	cf 28       	or	r12, r15
     f06:	79 f4       	brne	.+30     	; 0xf26 <xEventGroupWaitBits+0x126>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <xEventGroupWaitBits+0x126>
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	75 01       	movw	r14, r10
     f10:	64 01       	movw	r12, r8
     f12:	c6 22       	and	r12, r22
     f14:	d7 22       	and	r13, r23
     f16:	e8 22       	and	r14, r24
     f18:	f9 22       	and	r15, r25
     f1a:	c8 14       	cp	r12, r8
     f1c:	d9 04       	cpc	r13, r9
     f1e:	ea 04       	cpc	r14, r10
     f20:	fb 04       	cpc	r15, r11
     f22:	09 f0       	breq	.+2      	; 0xf26 <xEventGroupWaitBits+0x126>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	22 23       	and	r18, r18
     f28:	71 f0       	breq	.+28     	; 0xf46 <xEventGroupWaitBits+0x146>
     f2a:	66 20       	and	r6, r6
     f2c:	61 f0       	breq	.+24     	; 0xf46 <xEventGroupWaitBits+0x146>
     f2e:	80 94       	com	r8
     f30:	90 94       	com	r9
     f32:	a0 94       	com	r10
     f34:	b0 94       	com	r11
     f36:	86 22       	and	r8, r22
     f38:	97 22       	and	r9, r23
     f3a:	a8 22       	and	r10, r24
     f3c:	b9 22       	and	r11, r25
     f3e:	88 82       	st	Y, r8
     f40:	99 82       	std	Y+1, r9	; 0x01
     f42:	aa 82       	std	Y+2, r10	; 0x02
     f44:	bb 82       	std	Y+3, r11	; 0x03
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	1b 01       	movw	r2, r22
     f4c:	2c 01       	movw	r4, r24
     f4e:	55 24       	eor	r5, r5
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <xEventGroupWaitBits+0x156>
     f52:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
     f56:	c2 01       	movw	r24, r4
     f58:	b1 01       	movw	r22, r2
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	7f 90       	pop	r7
     f74:	6f 90       	pop	r6
     f76:	5f 90       	pop	r5
     f78:	4f 90       	pop	r4
     f7a:	3f 90       	pop	r3
     f7c:	2f 90       	pop	r2
     f7e:	08 95       	ret

00000f80 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     f80:	4f 92       	push	r4
     f82:	5f 92       	push	r5
     f84:	6f 92       	push	r6
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
     fa2:	6a 01       	movw	r12, r20
     fa4:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fa6:	8c 01       	movw	r16, r24
     fa8:	09 5f       	subi	r16, 0xF9	; 249
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     fac:	0e 94 64 13 	call	0x26c8	; 0x26c8 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     fb0:	eb 85       	ldd	r30, Y+11	; 0x0b
     fb2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     fb4:	88 81       	ld	r24, Y
     fb6:	99 81       	ldd	r25, Y+1	; 0x01
     fb8:	aa 81       	ldd	r26, Y+2	; 0x02
     fba:	bb 81       	ldd	r27, Y+3	; 0x03
     fbc:	c8 2a       	or	r12, r24
     fbe:	d9 2a       	or	r13, r25
     fc0:	ea 2a       	or	r14, r26
     fc2:	fb 2a       	or	r15, r27
     fc4:	c8 82       	st	Y, r12
     fc6:	d9 82       	std	Y+1, r13	; 0x01
     fc8:	ea 82       	std	Y+2, r14	; 0x02
     fca:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     fcc:	0e 17       	cp	r16, r30
     fce:	1f 07       	cpc	r17, r31
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <xEventGroupSetBits+0x54>
     fd2:	45 c0       	rjmp	.+138    	; 0x105e <xEventGroupSetBits+0xde>
     fd4:	c1 2c       	mov	r12, r1
     fd6:	d1 2c       	mov	r13, r1
     fd8:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     fda:	99 24       	eor	r9, r9
     fdc:	93 94       	inc	r9
     fde:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     fe0:	a4 80       	ldd	r10, Z+4	; 0x04
     fe2:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	a2 81       	ldd	r26, Z+2	; 0x02
     fea:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     fec:	ac 01       	movw	r20, r24
     fee:	bd 01       	movw	r22, r26
     ff0:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     ff2:	b2 fd       	sbrc	r27, 2
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     ff6:	48 80       	ld	r4, Y
     ff8:	59 80       	ldd	r5, Y+1	; 0x01
     ffa:	6a 80       	ldd	r6, Y+2	; 0x02
     ffc:	7b 80       	ldd	r7, Y+3	; 0x03
     ffe:	44 22       	and	r4, r20
    1000:	55 22       	and	r5, r21
    1002:	66 22       	and	r6, r22
    1004:	77 22       	and	r7, r23
    1006:	29 2d       	mov	r18, r9
    1008:	45 28       	or	r4, r5
    100a:	46 28       	or	r4, r6
    100c:	47 28       	or	r4, r7
    100e:	89 f4       	brne	.+34     	; 0x1032 <xEventGroupSetBits+0xb2>
    1010:	28 2d       	mov	r18, r8
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <xEventGroupSetBits+0xb2>
    1014:	48 80       	ld	r4, Y
    1016:	59 80       	ldd	r5, Y+1	; 0x01
    1018:	6a 80       	ldd	r6, Y+2	; 0x02
    101a:	7b 80       	ldd	r7, Y+3	; 0x03
    101c:	44 22       	and	r4, r20
    101e:	55 22       	and	r5, r21
    1020:	66 22       	and	r6, r22
    1022:	77 22       	and	r7, r23
    1024:	29 2d       	mov	r18, r9
    1026:	44 16       	cp	r4, r20
    1028:	55 06       	cpc	r5, r21
    102a:	66 06       	cpc	r6, r22
    102c:	77 06       	cpc	r7, r23
    102e:	09 f0       	breq	.+2      	; 0x1032 <xEventGroupSetBits+0xb2>
    1030:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1032:	22 23       	and	r18, r18
    1034:	71 f0       	breq	.+28     	; 0x1052 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1036:	b0 ff       	sbrs	r27, 0
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    103a:	c4 2a       	or	r12, r20
    103c:	d5 2a       	or	r13, r21
    103e:	e6 2a       	or	r14, r22
    1040:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1042:	48 81       	ld	r20, Y
    1044:	59 81       	ldd	r21, Y+1	; 0x01
    1046:	6a 81       	ldd	r22, Y+2	; 0x02
    1048:	7b 81       	ldd	r23, Y+3	; 0x03
    104a:	72 60       	ori	r23, 0x02	; 2
    104c:	cf 01       	movw	r24, r30
    104e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <vTaskRemoveFromUnorderedEventList>
    1052:	ea 2d       	mov	r30, r10
    1054:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1056:	0e 17       	cp	r16, r30
    1058:	1f 07       	cpc	r17, r31
    105a:	11 f6       	brne	.-124    	; 0xfe0 <xEventGroupSetBits+0x60>
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    105e:	c1 2c       	mov	r12, r1
    1060:	d1 2c       	mov	r13, r1
    1062:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1064:	c0 94       	com	r12
    1066:	d0 94       	com	r13
    1068:	e0 94       	com	r14
    106a:	f0 94       	com	r15
    106c:	88 81       	ld	r24, Y
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	aa 81       	ldd	r26, Y+2	; 0x02
    1072:	bb 81       	ldd	r27, Y+3	; 0x03
    1074:	c8 22       	and	r12, r24
    1076:	d9 22       	and	r13, r25
    1078:	ea 22       	and	r14, r26
    107a:	fb 22       	and	r15, r27
    107c:	c8 82       	st	Y, r12
    107e:	d9 82       	std	Y+1, r13	; 0x01
    1080:	ea 82       	std	Y+2, r14	; 0x02
    1082:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1084:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1088:	68 81       	ld	r22, Y
    108a:	79 81       	ldd	r23, Y+1	; 0x01
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	5f 90       	pop	r5
    10ae:	4f 90       	pop	r4
    10b0:	08 95       	ret

000010b2 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    10b8:	e8 e1       	ldi	r30, 0x18	; 24
    10ba:	f8 e0       	ldi	r31, 0x08	; 8
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <prvInsertBlockIntoFreeList+0xe>
    10be:	f9 01       	movw	r30, r18
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	2a 17       	cp	r18, r26
    10c6:	3b 07       	cpc	r19, r27
    10c8:	d0 f3       	brcs	.-12     	; 0x10be <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	af 01       	movw	r20, r30
    10d0:	48 0f       	add	r20, r24
    10d2:	59 1f       	adc	r21, r25
    10d4:	a4 17       	cp	r26, r20
    10d6:	b5 07       	cpc	r27, r21
    10d8:	49 f4       	brne	.+18     	; 0x10ec <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    10da:	12 96       	adiw	r26, 0x02	; 2
    10dc:	4d 91       	ld	r20, X+
    10de:	5c 91       	ld	r21, X
    10e0:	13 97       	sbiw	r26, 0x03	; 3
    10e2:	84 0f       	add	r24, r20
    10e4:	95 1f       	adc	r25, r21
    10e6:	93 83       	std	Z+3, r25	; 0x03
    10e8:	82 83       	std	Z+2, r24	; 0x02
    10ea:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	ed 01       	movw	r28, r26
    10f6:	c8 0f       	add	r28, r24
    10f8:	d9 1f       	adc	r29, r25
    10fa:	2c 17       	cp	r18, r28
    10fc:	3d 07       	cpc	r19, r29
    10fe:	d9 f4       	brne	.+54     	; 0x1136 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1100:	20 91 16 08 	lds	r18, 0x0816	; 0x800816 <pxEnd>
    1104:	30 91 17 08 	lds	r19, 0x0817	; 0x800817 <pxEnd+0x1>
    1108:	c2 17       	cp	r28, r18
    110a:	d3 07       	cpc	r29, r19
    110c:	81 f0       	breq	.+32     	; 0x112e <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    110e:	2a 81       	ldd	r18, Y+2	; 0x02
    1110:	3b 81       	ldd	r19, Y+3	; 0x03
    1112:	82 0f       	add	r24, r18
    1114:	93 1f       	adc	r25, r19
    1116:	13 96       	adiw	r26, 0x03	; 3
    1118:	9c 93       	st	X, r25
    111a:	8e 93       	st	-X, r24
    111c:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    111e:	c0 81       	ld	r28, Z
    1120:	d1 81       	ldd	r29, Z+1	; 0x01
    1122:	88 81       	ld	r24, Y
    1124:	99 81       	ldd	r25, Y+1	; 0x01
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	9c 93       	st	X, r25
    112a:	8e 93       	st	-X, r24
    112c:	07 c0       	rjmp	.+14     	; 0x113c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	dc 93       	st	X, r29
    1132:	ce 93       	st	-X, r28
    1134:	03 c0       	rjmp	.+6      	; 0x113c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	3c 93       	st	X, r19
    113a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    113c:	ae 17       	cp	r26, r30
    113e:	bf 07       	cpc	r27, r31
    1140:	11 f0       	breq	.+4      	; 0x1146 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1142:	b1 83       	std	Z+1, r27	; 0x01
    1144:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    115e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1162:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <pxEnd>
    1166:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <pxEnd+0x1>
    116a:	89 2b       	or	r24, r25
    116c:	41 f5       	brne	.+80     	; 0x11be <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    116e:	e8 e1       	ldi	r30, 0x18	; 24
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	ac e1       	ldi	r26, 0x1C	; 28
    1174:	b8 e0       	ldi	r27, 0x08	; 8
    1176:	b1 83       	std	Z+1, r27	; 0x01
    1178:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    117a:	13 82       	std	Z+3, r1	; 0x03
    117c:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    117e:	e8 eb       	ldi	r30, 0xB8	; 184
    1180:	f7 e1       	ldi	r31, 0x17	; 23
    1182:	f0 93 17 08 	sts	0x0817, r31	; 0x800817 <pxEnd+0x1>
    1186:	e0 93 16 08 	sts	0x0816, r30	; 0x800816 <pxEnd>
	pxEnd->xBlockSize = 0;
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    118e:	11 82       	std	Z+1, r1	; 0x01
    1190:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1192:	8c e9       	ldi	r24, 0x9C	; 156
    1194:	9f e0       	ldi	r25, 0x0F	; 15
    1196:	13 96       	adiw	r26, 0x03	; 3
    1198:	9c 93       	st	X, r25
    119a:	8e 93       	st	-X, r24
    119c:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    119e:	ed 93       	st	X+, r30
    11a0:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11a2:	90 93 13 08 	sts	0x0813, r25	; 0x800813 <xMinimumEverFreeBytesRemaining+0x1>
    11a6:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11aa:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <xFreeBytesRemaining+0x1>
    11ae:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e8       	ldi	r25, 0x80	; 128
    11b6:	90 93 11 08 	sts	0x0811, r25	; 0x800811 <xBlockAllocatedBit+0x1>
    11ba:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    11be:	e0 90 10 08 	lds	r14, 0x0810	; 0x800810 <xBlockAllocatedBit>
    11c2:	f0 90 11 08 	lds	r15, 0x0811	; 0x800811 <xBlockAllocatedBit+0x1>
    11c6:	c7 01       	movw	r24, r14
    11c8:	8c 23       	and	r24, r28
    11ca:	9d 23       	and	r25, r29
    11cc:	89 2b       	or	r24, r25
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <pvPortMalloc+0x86>
    11d0:	66 c0       	rjmp	.+204    	; 0x129e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    11d2:	20 97       	sbiw	r28, 0x00	; 0
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <pvPortMalloc+0x8c>
    11d6:	66 c0       	rjmp	.+204    	; 0x12a4 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    11d8:	ae 01       	movw	r20, r28
    11da:	4c 5f       	subi	r20, 0xFC	; 252
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    11de:	09 f4       	brne	.+2      	; 0x11e2 <pvPortMalloc+0x96>
    11e0:	5e c0       	rjmp	.+188    	; 0x129e <pvPortMalloc+0x152>
    11e2:	00 91 14 08 	lds	r16, 0x0814	; 0x800814 <xFreeBytesRemaining>
    11e6:	10 91 15 08 	lds	r17, 0x0815	; 0x800815 <xFreeBytesRemaining+0x1>
    11ea:	04 17       	cp	r16, r20
    11ec:	15 07       	cpc	r17, r21
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <pvPortMalloc+0xa6>
    11f0:	56 c0       	rjmp	.+172    	; 0x129e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    11f2:	c0 91 18 08 	lds	r28, 0x0818	; 0x800818 <xStart>
    11f6:	d0 91 19 08 	lds	r29, 0x0819	; 0x800819 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    11fa:	e8 e1       	ldi	r30, 0x18	; 24
    11fc:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <pvPortMalloc+0xb8>
    1200:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1202:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1204:	2a 81       	ldd	r18, Y+2	; 0x02
    1206:	3b 81       	ldd	r19, Y+3	; 0x03
    1208:	24 17       	cp	r18, r20
    120a:	35 07       	cpc	r19, r21
    120c:	28 f4       	brcc	.+10     	; 0x1218 <pvPortMalloc+0xcc>
    120e:	28 81       	ld	r18, Y
    1210:	39 81       	ldd	r19, Y+1	; 0x01
    1212:	21 15       	cp	r18, r1
    1214:	31 05       	cpc	r19, r1
    1216:	a1 f7       	brne	.-24     	; 0x1200 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1218:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <pxEnd>
    121c:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <pxEnd+0x1>
    1220:	c8 17       	cp	r28, r24
    1222:	d9 07       	cpc	r29, r25
    1224:	e1 f1       	breq	.+120    	; 0x129e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1226:	c0 80       	ld	r12, Z
    1228:	d1 80       	ldd	r13, Z+1	; 0x01
    122a:	84 e0       	ldi	r24, 0x04	; 4
    122c:	c8 0e       	add	r12, r24
    122e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1230:	88 81       	ld	r24, Y
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1238:	2a 81       	ldd	r18, Y+2	; 0x02
    123a:	3b 81       	ldd	r19, Y+3	; 0x03
    123c:	24 1b       	sub	r18, r20
    123e:	35 0b       	sbc	r19, r21
    1240:	29 30       	cpi	r18, 0x09	; 9
    1242:	31 05       	cpc	r19, r1
    1244:	48 f0       	brcs	.+18     	; 0x1258 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1246:	ce 01       	movw	r24, r28
    1248:	84 0f       	add	r24, r20
    124a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    124c:	fc 01       	movw	r30, r24
    124e:	33 83       	std	Z+3, r19	; 0x03
    1250:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1252:	5b 83       	std	Y+3, r21	; 0x03
    1254:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1256:	2d df       	rcall	.-422    	; 0x10b2 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	08 1b       	sub	r16, r24
    125e:	19 0b       	sbc	r17, r25
    1260:	10 93 15 08 	sts	0x0815, r17	; 0x800815 <xFreeBytesRemaining+0x1>
    1264:	00 93 14 08 	sts	0x0814, r16	; 0x800814 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1268:	20 91 12 08 	lds	r18, 0x0812	; 0x800812 <xMinimumEverFreeBytesRemaining>
    126c:	30 91 13 08 	lds	r19, 0x0813	; 0x800813 <xMinimumEverFreeBytesRemaining+0x1>
    1270:	02 17       	cp	r16, r18
    1272:	13 07       	cpc	r17, r19
    1274:	20 f4       	brcc	.+8      	; 0x127e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1276:	10 93 13 08 	sts	0x0813, r17	; 0x800813 <xMinimumEverFreeBytesRemaining+0x1>
    127a:	00 93 12 08 	sts	0x0812, r16	; 0x800812 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    127e:	e8 2a       	or	r14, r24
    1280:	f9 2a       	or	r15, r25
    1282:	fb 82       	std	Y+3, r15	; 0x03
    1284:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    128a:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    128e:	c1 14       	cp	r12, r1
    1290:	d1 04       	cpc	r13, r1
    1292:	59 f4       	brne	.+22     	; 0x12aa <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1294:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <vApplicationMallocFailedHook>
    1298:	c1 2c       	mov	r12, r1
    129a:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    129e:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
    12a2:	f8 cf       	rjmp	.-16     	; 0x1294 <pvPortMalloc+0x148>
    12a4:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
    12a8:	f5 cf       	rjmp	.-22     	; 0x1294 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    12aa:	c6 01       	movw	r24, r12
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	08 95       	ret

000012be <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	51 f1       	breq	.+84     	; 0x131a <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    12c6:	fc 01       	movw	r30, r24
    12c8:	34 97       	sbiw	r30, 0x04	; 4
    12ca:	22 81       	ldd	r18, Z+2	; 0x02
    12cc:	33 81       	ldd	r19, Z+3	; 0x03
    12ce:	40 91 10 08 	lds	r20, 0x0810	; 0x800810 <xBlockAllocatedBit>
    12d2:	50 91 11 08 	lds	r21, 0x0811	; 0x800811 <xBlockAllocatedBit+0x1>
    12d6:	b9 01       	movw	r22, r18
    12d8:	64 23       	and	r22, r20
    12da:	75 23       	and	r23, r21
    12dc:	67 2b       	or	r22, r23
    12de:	e9 f0       	breq	.+58     	; 0x131a <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	67 2b       	or	r22, r23
    12e6:	c9 f4       	brne	.+50     	; 0x131a <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    12e8:	ef 01       	movw	r28, r30
    12ea:	40 95       	com	r20
    12ec:	50 95       	com	r21
    12ee:	24 23       	and	r18, r20
    12f0:	35 23       	and	r19, r21
    12f2:	33 83       	std	Z+3, r19	; 0x03
    12f4:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    12f6:	0e 94 64 13 	call	0x26c8	; 0x26c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    12fa:	20 91 14 08 	lds	r18, 0x0814	; 0x800814 <xFreeBytesRemaining>
    12fe:	30 91 15 08 	lds	r19, 0x0815	; 0x800815 <xFreeBytesRemaining+0x1>
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <xFreeBytesRemaining+0x1>
    130e:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1312:	ce 01       	movw	r24, r28
    1314:	ce de       	rcall	.-612    	; 0x10b2 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1316:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1320:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1322:	03 96       	adiw	r24, 0x03	; 3
    1324:	92 83       	std	Z+2, r25	; 0x02
    1326:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1328:	4f ef       	ldi	r20, 0xFF	; 255
    132a:	5f ef       	ldi	r21, 0xFF	; 255
    132c:	ba 01       	movw	r22, r20
    132e:	43 83       	std	Z+3, r20	; 0x03
    1330:	54 83       	std	Z+4, r21	; 0x04
    1332:	65 83       	std	Z+5, r22	; 0x05
    1334:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1336:	90 87       	std	Z+8, r25	; 0x08
    1338:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    133a:	92 87       	std	Z+10, r25	; 0x0a
    133c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    133e:	10 82       	st	Z, r1
    1340:	08 95       	ret

00001342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1342:	fc 01       	movw	r30, r24
    1344:	13 86       	std	Z+11, r1	; 0x0b
    1346:	12 86       	std	Z+10, r1	; 0x0a
    1348:	08 95       	ret

0000134a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	9c 01       	movw	r18, r24
    1350:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1352:	dc 01       	movw	r26, r24
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	cd 91       	ld	r28, X+
    1358:	dc 91       	ld	r29, X
    135a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    135c:	d5 83       	std	Z+5, r29	; 0x05
    135e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1360:	8e 81       	ldd	r24, Y+6	; 0x06
    1362:	9f 81       	ldd	r25, Y+7	; 0x07
    1364:	97 83       	std	Z+7, r25	; 0x07
    1366:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	dc 01       	movw	r26, r24
    136e:	15 96       	adiw	r26, 0x05	; 5
    1370:	7c 93       	st	X, r23
    1372:	6e 93       	st	-X, r22
    1374:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1376:	7f 83       	std	Y+7, r23	; 0x07
    1378:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    137a:	33 87       	std	Z+11, r19	; 0x0b
    137c:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    137e:	f9 01       	movw	r30, r18
    1380:	80 81       	ld	r24, Z
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	80 83       	st	Z, r24
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1396:	08 81       	ld	r16, Y
    1398:	19 81       	ldd	r17, Y+1	; 0x01
    139a:	2a 81       	ldd	r18, Y+2	; 0x02
    139c:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    139e:	0f 3f       	cpi	r16, 0xFF	; 255
    13a0:	4f ef       	ldi	r20, 0xFF	; 255
    13a2:	14 07       	cpc	r17, r20
    13a4:	24 07       	cpc	r18, r20
    13a6:	34 07       	cpc	r19, r20
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    13aa:	fc 01       	movw	r30, r24
    13ac:	a1 85       	ldd	r26, Z+9	; 0x09
    13ae:	b2 85       	ldd	r27, Z+10	; 0x0a
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    13b2:	dc 01       	movw	r26, r24
    13b4:	13 96       	adiw	r26, 0x03	; 3
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <vListInsert+0x2e>
    13b8:	df 01       	movw	r26, r30
    13ba:	14 96       	adiw	r26, 0x04	; 4
    13bc:	ed 91       	ld	r30, X+
    13be:	fc 91       	ld	r31, X
    13c0:	15 97       	sbiw	r26, 0x05	; 5
    13c2:	40 81       	ld	r20, Z
    13c4:	51 81       	ldd	r21, Z+1	; 0x01
    13c6:	62 81       	ldd	r22, Z+2	; 0x02
    13c8:	73 81       	ldd	r23, Z+3	; 0x03
    13ca:	04 17       	cp	r16, r20
    13cc:	15 07       	cpc	r17, r21
    13ce:	26 07       	cpc	r18, r22
    13d0:	37 07       	cpc	r19, r23
    13d2:	90 f7       	brcc	.-28     	; 0x13b8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    13d4:	14 96       	adiw	r26, 0x04	; 4
    13d6:	ed 91       	ld	r30, X+
    13d8:	fc 91       	ld	r31, X
    13da:	15 97       	sbiw	r26, 0x05	; 5
    13dc:	fd 83       	std	Y+5, r31	; 0x05
    13de:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13e0:	d7 83       	std	Z+7, r29	; 0x07
    13e2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    13e4:	bf 83       	std	Y+7, r27	; 0x07
    13e6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    13e8:	15 96       	adiw	r26, 0x05	; 5
    13ea:	dc 93       	st	X, r29
    13ec:	ce 93       	st	-X, r28
    13ee:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    13f0:	9b 87       	std	Y+11, r25	; 0x0b
    13f2:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 81       	ld	r18, Z
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	20 83       	st	Z, r18
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	08 95       	ret

00001406 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    140c:	a2 85       	ldd	r26, Z+10	; 0x0a
    140e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1410:	c4 81       	ldd	r28, Z+4	; 0x04
    1412:	d5 81       	ldd	r29, Z+5	; 0x05
    1414:	86 81       	ldd	r24, Z+6	; 0x06
    1416:	97 81       	ldd	r25, Z+7	; 0x07
    1418:	9f 83       	std	Y+7, r25	; 0x07
    141a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    141c:	c6 81       	ldd	r28, Z+6	; 0x06
    141e:	d7 81       	ldd	r29, Z+7	; 0x07
    1420:	84 81       	ldd	r24, Z+4	; 0x04
    1422:	95 81       	ldd	r25, Z+5	; 0x05
    1424:	9d 83       	std	Y+5, r25	; 0x05
    1426:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	8d 91       	ld	r24, X+
    142c:	9c 91       	ld	r25, X
    142e:	12 97       	sbiw	r26, 0x02	; 2
    1430:	e8 17       	cp	r30, r24
    1432:	f9 07       	cpc	r31, r25
    1434:	31 f4       	brne	.+12     	; 0x1442 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	97 81       	ldd	r25, Z+7	; 0x07
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	9c 93       	st	X, r25
    143e:	8e 93       	st	-X, r24
    1440:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1442:	13 86       	std	Z+11, r1	; 0x0b
    1444:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1446:	8c 91       	ld	r24, X
    1448:	81 50       	subi	r24, 0x01	; 1
    144a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    144c:	8c 91       	ld	r24, X
}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1454:	31 e1       	ldi	r19, 0x11	; 17
    1456:	fc 01       	movw	r30, r24
    1458:	30 83       	st	Z, r19
    145a:	31 97       	sbiw	r30, 0x01	; 1
    145c:	22 e2       	ldi	r18, 0x22	; 34
    145e:	20 83       	st	Z, r18
    1460:	31 97       	sbiw	r30, 0x01	; 1
    1462:	a3 e3       	ldi	r26, 0x33	; 51
    1464:	a0 83       	st	Z, r26
    1466:	31 97       	sbiw	r30, 0x01	; 1
    1468:	60 83       	st	Z, r22
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	70 83       	st	Z, r23
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	10 82       	st	Z, r1
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	10 82       	st	Z, r1
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	60 e8       	ldi	r22, 0x80	; 128
    147a:	60 83       	st	Z, r22
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	10 82       	st	Z, r1
    1480:	31 97       	sbiw	r30, 0x01	; 1
    1482:	10 82       	st	Z, r1
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	10 82       	st	Z, r1
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	62 e0       	ldi	r22, 0x02	; 2
    148c:	60 83       	st	Z, r22
    148e:	31 97       	sbiw	r30, 0x01	; 1
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	60 83       	st	Z, r22
    1494:	31 97       	sbiw	r30, 0x01	; 1
    1496:	64 e0       	ldi	r22, 0x04	; 4
    1498:	60 83       	st	Z, r22
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	65 e0       	ldi	r22, 0x05	; 5
    149e:	60 83       	st	Z, r22
    14a0:	31 97       	sbiw	r30, 0x01	; 1
    14a2:	66 e0       	ldi	r22, 0x06	; 6
    14a4:	60 83       	st	Z, r22
    14a6:	31 97       	sbiw	r30, 0x01	; 1
    14a8:	67 e0       	ldi	r22, 0x07	; 7
    14aa:	60 83       	st	Z, r22
    14ac:	31 97       	sbiw	r30, 0x01	; 1
    14ae:	68 e0       	ldi	r22, 0x08	; 8
    14b0:	60 83       	st	Z, r22
    14b2:	31 97       	sbiw	r30, 0x01	; 1
    14b4:	69 e0       	ldi	r22, 0x09	; 9
    14b6:	60 83       	st	Z, r22
    14b8:	31 97       	sbiw	r30, 0x01	; 1
    14ba:	60 e1       	ldi	r22, 0x10	; 16
    14bc:	60 83       	st	Z, r22
    14be:	31 97       	sbiw	r30, 0x01	; 1
    14c0:	30 83       	st	Z, r19
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	32 e1       	ldi	r19, 0x12	; 18
    14c6:	30 83       	st	Z, r19
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	33 e1       	ldi	r19, 0x13	; 19
    14cc:	30 83       	st	Z, r19
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	34 e1       	ldi	r19, 0x14	; 20
    14d2:	30 83       	st	Z, r19
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	35 e1       	ldi	r19, 0x15	; 21
    14d8:	30 83       	st	Z, r19
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	36 e1       	ldi	r19, 0x16	; 22
    14de:	30 83       	st	Z, r19
    14e0:	31 97       	sbiw	r30, 0x01	; 1
    14e2:	37 e1       	ldi	r19, 0x17	; 23
    14e4:	30 83       	st	Z, r19
    14e6:	31 97       	sbiw	r30, 0x01	; 1
    14e8:	38 e1       	ldi	r19, 0x18	; 24
    14ea:	30 83       	st	Z, r19
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	39 e1       	ldi	r19, 0x19	; 25
    14f0:	30 83       	st	Z, r19
    14f2:	31 97       	sbiw	r30, 0x01	; 1
    14f4:	30 e2       	ldi	r19, 0x20	; 32
    14f6:	30 83       	st	Z, r19
    14f8:	31 97       	sbiw	r30, 0x01	; 1
    14fa:	31 e2       	ldi	r19, 0x21	; 33
    14fc:	30 83       	st	Z, r19
    14fe:	31 97       	sbiw	r30, 0x01	; 1
    1500:	20 83       	st	Z, r18
    1502:	31 97       	sbiw	r30, 0x01	; 1
    1504:	23 e2       	ldi	r18, 0x23	; 35
    1506:	20 83       	st	Z, r18
    1508:	31 97       	sbiw	r30, 0x01	; 1
    150a:	40 83       	st	Z, r20
    150c:	31 97       	sbiw	r30, 0x01	; 1
    150e:	50 83       	st	Z, r21
    1510:	31 97       	sbiw	r30, 0x01	; 1
    1512:	26 e2       	ldi	r18, 0x26	; 38
    1514:	20 83       	st	Z, r18
    1516:	31 97       	sbiw	r30, 0x01	; 1
    1518:	27 e2       	ldi	r18, 0x27	; 39
    151a:	20 83       	st	Z, r18
    151c:	31 97       	sbiw	r30, 0x01	; 1
    151e:	28 e2       	ldi	r18, 0x28	; 40
    1520:	20 83       	st	Z, r18
    1522:	31 97       	sbiw	r30, 0x01	; 1
    1524:	29 e2       	ldi	r18, 0x29	; 41
    1526:	20 83       	st	Z, r18
    1528:	31 97       	sbiw	r30, 0x01	; 1
    152a:	20 e3       	ldi	r18, 0x30	; 48
    152c:	20 83       	st	Z, r18
    152e:	31 97       	sbiw	r30, 0x01	; 1
    1530:	21 e3       	ldi	r18, 0x31	; 49
    1532:	20 83       	st	Z, r18
    1534:	89 97       	sbiw	r24, 0x29	; 41
    1536:	08 95       	ret

00001538 <xPortStartScheduler>:
    1538:	a8 95       	wdr
    153a:	90 ec       	ldi	r25, 0xC0	; 192
    153c:	88 e1       	ldi	r24, 0x18	; 24
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	a8 95       	wdr
    1544:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    154e:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    1552:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    1556:	cd 91       	ld	r28, X+
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	dd 91       	ld	r29, X+
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	ff 91       	pop	r31
    1560:	ef 91       	pop	r30
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	bf 91       	pop	r27
    1568:	af 91       	pop	r26
    156a:	9f 91       	pop	r25
    156c:	8f 91       	pop	r24
    156e:	7f 91       	pop	r23
    1570:	6f 91       	pop	r22
    1572:	5f 91       	pop	r21
    1574:	4f 91       	pop	r20
    1576:	3f 91       	pop	r19
    1578:	2f 91       	pop	r18
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	5f 90       	pop	r5
    1594:	4f 90       	pop	r4
    1596:	3f 90       	pop	r3
    1598:	2f 90       	pop	r2
    159a:	1f 90       	pop	r1
    159c:	0f 90       	pop	r0
    159e:	0c be       	out	0x3c, r0	; 60
    15a0:	0f 90       	pop	r0
    15a2:	0b be       	out	0x3b, r0	; 59
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	08 95       	ret
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	08 95       	ret

000015b0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	0f 92       	push	r0
    15b8:	0b b6       	in	r0, 0x3b	; 59
    15ba:	0f 92       	push	r0
    15bc:	0c b6       	in	r0, 0x3c	; 60
    15be:	0f 92       	push	r0
    15c0:	1f 92       	push	r1
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 92       	push	r2
    15c6:	3f 92       	push	r3
    15c8:	4f 92       	push	r4
    15ca:	5f 92       	push	r5
    15cc:	6f 92       	push	r6
    15ce:	7f 92       	push	r7
    15d0:	8f 92       	push	r8
    15d2:	9f 92       	push	r9
    15d4:	af 92       	push	r10
    15d6:	bf 92       	push	r11
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
    1600:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    1604:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    1608:	0d b6       	in	r0, 0x3d	; 61
    160a:	0d 92       	st	X+, r0
    160c:	0e b6       	in	r0, 0x3e	; 62
    160e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1610:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1614:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    1618:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    161c:	cd 91       	ld	r28, X+
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	dd 91       	ld	r29, X+
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	3f 90       	pop	r3
    165e:	2f 90       	pop	r2
    1660:	1f 90       	pop	r1
    1662:	0f 90       	pop	r0
    1664:	0c be       	out	0x3c, r0	; 60
    1666:	0f 90       	pop	r0
    1668:	0b be       	out	0x3b, r0	; 59
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1670:	08 95       	ret

00001672 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	0f 92       	push	r0
    167a:	0b b6       	in	r0, 0x3b	; 59
    167c:	0f 92       	push	r0
    167e:	0c b6       	in	r0, 0x3c	; 60
    1680:	0f 92       	push	r0
    1682:	1f 92       	push	r1
    1684:	11 24       	eor	r1, r1
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    16c6:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    16ca:	0d b6       	in	r0, 0x3d	; 61
    16cc:	0d 92       	st	X+, r0
    16ce:	0e b6       	in	r0, 0x3e	; 62
    16d0:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    16d2:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    16d4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <xTaskIncrementTick>
    16d8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    16da:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    16de:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    16e2:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    16e6:	cd 91       	ld	r28, X+
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	dd 91       	ld	r29, X+
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	3f 90       	pop	r3
    1728:	2f 90       	pop	r2
    172a:	1f 90       	pop	r1
    172c:	0f 90       	pop	r0
    172e:	0c be       	out	0x3c, r0	; 60
    1730:	0f 90       	pop	r0
    1732:	0b be       	out	0x3b, r0	; 59
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    173a:	08 95       	ret

0000173c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    173c:	9a df       	rcall	.-204    	; 0x1672 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    173e:	18 95       	reti

00001740 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	0f 92       	push	r0
    1746:	fc 01       	movw	r30, r24
    1748:	96 8d       	ldd	r25, Z+30	; 0x1e
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	91 11       	cpse	r25, r1
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	08 95       	ret

00001756 <prvCopyDataToQueue>:
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
    1760:	04 2f       	mov	r16, r20
    1762:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1764:	48 a1       	ldd	r20, Y+32	; 0x20
    1766:	41 11       	cpse	r20, r1
    1768:	0c c0       	rjmp	.+24     	; 0x1782 <prvCopyDataToQueue+0x2c>
    176a:	88 81       	ld	r24, Y
    176c:	99 81       	ldd	r25, Y+1	; 0x01
    176e:	89 2b       	or	r24, r25
    1770:	09 f0       	breq	.+2      	; 0x1774 <prvCopyDataToQueue+0x1e>
    1772:	42 c0       	rjmp	.+132    	; 0x17f8 <prvCopyDataToQueue+0xa2>
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskPriorityDisinherit>
    177c:	1d 82       	std	Y+5, r1	; 0x05
    177e:	1c 82       	std	Y+4, r1	; 0x04
    1780:	42 c0       	rjmp	.+132    	; 0x1806 <prvCopyDataToQueue+0xb0>
    1782:	01 11       	cpse	r16, r1
    1784:	17 c0       	rjmp	.+46     	; 0x17b4 <prvCopyDataToQueue+0x5e>
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <memcpy>
    1790:	28 a1       	ldd	r18, Y+32	; 0x20
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	82 0f       	add	r24, r18
    1798:	91 1d       	adc	r25, r1
    179a:	9b 83       	std	Y+3, r25	; 0x03
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	82 17       	cp	r24, r18
    17a4:	93 07       	cpc	r25, r19
    17a6:	50 f1       	brcs	.+84     	; 0x17fc <prvCopyDataToQueue+0xa6>
    17a8:	88 81       	ld	r24, Y
    17aa:	99 81       	ldd	r25, Y+1	; 0x01
    17ac:	9b 83       	std	Y+3, r25	; 0x03
    17ae:	8a 83       	std	Y+2, r24	; 0x02
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	29 c0       	rjmp	.+82     	; 0x1806 <prvCopyDataToQueue+0xb0>
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	8e 81       	ldd	r24, Y+6	; 0x06
    17b8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ba:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <memcpy>
    17be:	88 a1       	ldd	r24, Y+32	; 0x20
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	91 95       	neg	r25
    17c4:	81 95       	neg	r24
    17c6:	91 09       	sbc	r25, r1
    17c8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ca:	3f 81       	ldd	r19, Y+7	; 0x07
    17cc:	28 0f       	add	r18, r24
    17ce:	39 1f       	adc	r19, r25
    17d0:	3f 83       	std	Y+7, r19	; 0x07
    17d2:	2e 83       	std	Y+6, r18	; 0x06
    17d4:	48 81       	ld	r20, Y
    17d6:	59 81       	ldd	r21, Y+1	; 0x01
    17d8:	24 17       	cp	r18, r20
    17da:	35 07       	cpc	r19, r21
    17dc:	30 f4       	brcc	.+12     	; 0x17ea <prvCopyDataToQueue+0x94>
    17de:	2c 81       	ldd	r18, Y+4	; 0x04
    17e0:	3d 81       	ldd	r19, Y+5	; 0x05
    17e2:	82 0f       	add	r24, r18
    17e4:	93 1f       	adc	r25, r19
    17e6:	9f 83       	std	Y+7, r25	; 0x07
    17e8:	8e 83       	std	Y+6, r24	; 0x06
    17ea:	02 30       	cpi	r16, 0x02	; 2
    17ec:	49 f4       	brne	.+18     	; 0x1800 <prvCopyDataToQueue+0xaa>
    17ee:	11 23       	and	r17, r17
    17f0:	49 f0       	breq	.+18     	; 0x1804 <prvCopyDataToQueue+0xae>
    17f2:	11 50       	subi	r17, 0x01	; 1
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <prvCopyDataToQueue+0xb0>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <prvCopyDataToQueue+0xb0>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <prvCopyDataToQueue+0xb0>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <prvCopyDataToQueue+0xb0>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	1f 5f       	subi	r17, 0xFF	; 255
    1808:	1e 8f       	std	Y+30, r17	; 0x1e
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <prvCopyDataFromQueue>:
    1814:	fc 01       	movw	r30, r24
    1816:	40 a1       	ldd	r20, Z+32	; 0x20
    1818:	44 23       	and	r20, r20
    181a:	a9 f0       	breq	.+42     	; 0x1846 <prvCopyDataFromQueue+0x32>
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	26 81       	ldd	r18, Z+6	; 0x06
    1820:	37 81       	ldd	r19, Z+7	; 0x07
    1822:	24 0f       	add	r18, r20
    1824:	35 1f       	adc	r19, r21
    1826:	37 83       	std	Z+7, r19	; 0x07
    1828:	26 83       	std	Z+6, r18	; 0x06
    182a:	84 81       	ldd	r24, Z+4	; 0x04
    182c:	95 81       	ldd	r25, Z+5	; 0x05
    182e:	28 17       	cp	r18, r24
    1830:	39 07       	cpc	r19, r25
    1832:	20 f0       	brcs	.+8      	; 0x183c <prvCopyDataFromQueue+0x28>
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	97 83       	std	Z+7, r25	; 0x07
    183a:	86 83       	std	Z+6, r24	; 0x06
    183c:	cb 01       	movw	r24, r22
    183e:	66 81       	ldd	r22, Z+6	; 0x06
    1840:	77 81       	ldd	r23, Z+7	; 0x07
    1842:	0c 94 f5 2a 	jmp	0x55ea	; 0x55ea <memcpy>
    1846:	08 95       	ret

00001848 <prvUnlockQueue>:
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	8c 01       	movw	r16, r24
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	0f 92       	push	r0
    185a:	fc 01       	movw	r30, r24
    185c:	c2 a1       	ldd	r28, Z+34	; 0x22
    185e:	1c 16       	cp	r1, r28
    1860:	ac f4       	brge	.+42     	; 0x188c <prvUnlockQueue+0x44>
    1862:	83 89       	ldd	r24, Z+19	; 0x13
    1864:	81 11       	cpse	r24, r1
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <prvUnlockQueue+0x2c>
    1868:	11 c0       	rjmp	.+34     	; 0x188c <prvUnlockQueue+0x44>
    186a:	f8 01       	movw	r30, r16
    186c:	83 89       	ldd	r24, Z+19	; 0x13
    186e:	81 11       	cpse	r24, r1
    1870:	05 c0       	rjmp	.+10     	; 0x187c <prvUnlockQueue+0x34>
    1872:	0c c0       	rjmp	.+24     	; 0x188c <prvUnlockQueue+0x44>
    1874:	78 01       	movw	r14, r16
    1876:	f3 e1       	ldi	r31, 0x13	; 19
    1878:	ef 0e       	add	r14, r31
    187a:	f1 1c       	adc	r15, r1
    187c:	c7 01       	movw	r24, r14
    187e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskRemoveFromEventList>
    1882:	81 11       	cpse	r24, r1
    1884:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskMissedYield>
    1888:	c1 50       	subi	r28, 0x01	; 1
    188a:	79 f7       	brne	.-34     	; 0x186a <prvUnlockQueue+0x22>
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	f8 01       	movw	r30, r16
    1890:	82 a3       	std	Z+34, r24	; 0x22
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	0f 92       	push	r0
    189c:	c1 a1       	ldd	r28, Z+33	; 0x21
    189e:	1c 16       	cp	r1, r28
    18a0:	ac f4       	brge	.+42     	; 0x18cc <prvUnlockQueue+0x84>
    18a2:	80 85       	ldd	r24, Z+8	; 0x08
    18a4:	81 11       	cpse	r24, r1
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <prvUnlockQueue+0x6c>
    18a8:	11 c0       	rjmp	.+34     	; 0x18cc <prvUnlockQueue+0x84>
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 85       	ldd	r24, Z+8	; 0x08
    18ae:	81 11       	cpse	r24, r1
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <prvUnlockQueue+0x74>
    18b2:	0c c0       	rjmp	.+24     	; 0x18cc <prvUnlockQueue+0x84>
    18b4:	78 01       	movw	r14, r16
    18b6:	f8 e0       	ldi	r31, 0x08	; 8
    18b8:	ef 0e       	add	r14, r31
    18ba:	f1 1c       	adc	r15, r1
    18bc:	c7 01       	movw	r24, r14
    18be:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskRemoveFromEventList>
    18c2:	81 11       	cpse	r24, r1
    18c4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <vTaskMissedYield>
    18c8:	c1 50       	subi	r28, 0x01	; 1
    18ca:	79 f7       	brne	.-34     	; 0x18aa <prvUnlockQueue+0x62>
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	f8 01       	movw	r30, r16
    18d0:	81 a3       	std	Z+33, r24	; 0x21
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	08 95       	ret

000018e2 <xQueueGenericReset>:
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	0f 92       	push	r0
    18ee:	e8 81       	ld	r30, Y
    18f0:	f9 81       	ldd	r31, Y+1	; 0x01
    18f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f4:	28 a1       	ldd	r18, Y+32	; 0x20
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	82 9f       	mul	r24, r18
    18fc:	a0 01       	movw	r20, r0
    18fe:	83 9f       	mul	r24, r19
    1900:	50 0d       	add	r21, r0
    1902:	92 9f       	mul	r25, r18
    1904:	50 0d       	add	r21, r0
    1906:	11 24       	eor	r1, r1
    1908:	4e 0f       	add	r20, r30
    190a:	5f 1f       	adc	r21, r31
    190c:	5d 83       	std	Y+5, r21	; 0x05
    190e:	4c 83       	std	Y+4, r20	; 0x04
    1910:	1e 8e       	std	Y+30, r1	; 0x1e
    1912:	fb 83       	std	Y+3, r31	; 0x03
    1914:	ea 83       	std	Y+2, r30	; 0x02
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	82 9f       	mul	r24, r18
    191a:	a0 01       	movw	r20, r0
    191c:	83 9f       	mul	r24, r19
    191e:	50 0d       	add	r21, r0
    1920:	92 9f       	mul	r25, r18
    1922:	50 0d       	add	r21, r0
    1924:	11 24       	eor	r1, r1
    1926:	cf 01       	movw	r24, r30
    1928:	84 0f       	add	r24, r20
    192a:	95 1f       	adc	r25, r21
    192c:	9f 83       	std	Y+7, r25	; 0x07
    192e:	8e 83       	std	Y+6, r24	; 0x06
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	89 a3       	std	Y+33, r24	; 0x21
    1934:	8a a3       	std	Y+34, r24	; 0x22
    1936:	61 11       	cpse	r22, r1
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <xQueueGenericReset+0x6e>
    193a:	88 85       	ldd	r24, Y+8	; 0x08
    193c:	88 23       	and	r24, r24
    193e:	71 f0       	breq	.+28     	; 0x195c <xQueueGenericReset+0x7a>
    1940:	ce 01       	movw	r24, r28
    1942:	08 96       	adiw	r24, 0x08	; 8
    1944:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskRemoveFromEventList>
    1948:	88 23       	and	r24, r24
    194a:	41 f0       	breq	.+16     	; 0x195c <xQueueGenericReset+0x7a>
    194c:	31 de       	rcall	.-926    	; 0x15b0 <vPortYield>
    194e:	06 c0       	rjmp	.+12     	; 0x195c <xQueueGenericReset+0x7a>
    1950:	ce 01       	movw	r24, r28
    1952:	08 96       	adiw	r24, 0x08	; 8
    1954:	e5 dc       	rcall	.-1590   	; 0x1320 <vListInitialise>
    1956:	ce 01       	movw	r24, r28
    1958:	43 96       	adiw	r24, 0x13	; 19
    195a:	e2 dc       	rcall	.-1596   	; 0x1320 <vListInitialise>
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <xQueueGenericCreate>:
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	08 2f       	mov	r16, r24
    1974:	16 2f       	mov	r17, r22
    1976:	f4 2e       	mov	r15, r20
    1978:	66 23       	and	r22, r22
    197a:	b9 f0       	breq	.+46     	; 0x19aa <xQueueGenericCreate+0x42>
    197c:	86 9f       	mul	r24, r22
    197e:	c0 01       	movw	r24, r0
    1980:	11 24       	eor	r1, r1
    1982:	85 96       	adiw	r24, 0x25	; 37
    1984:	e3 db       	rcall	.-2106   	; 0x114c <pvPortMalloc>
    1986:	ec 01       	movw	r28, r24
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	41 f4       	brne	.+16     	; 0x199c <xQueueGenericCreate+0x34>
    198c:	14 c0       	rjmp	.+40     	; 0x19b6 <xQueueGenericCreate+0x4e>
    198e:	0f 8f       	std	Y+31, r16	; 0x1f
    1990:	18 a3       	std	Y+32, r17	; 0x20
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	ce 01       	movw	r24, r28
    1996:	a5 df       	rcall	.-182    	; 0x18e2 <xQueueGenericReset>
    1998:	fc a2       	std	Y+36, r15	; 0x24
    199a:	0d c0       	rjmp	.+26     	; 0x19b6 <xQueueGenericCreate+0x4e>
    199c:	85 96       	adiw	r24, 0x25	; 37
    199e:	99 83       	std	Y+1, r25	; 0x01
    19a0:	88 83       	st	Y, r24
    19a2:	f5 cf       	rjmp	.-22     	; 0x198e <xQueueGenericCreate+0x26>
    19a4:	d9 83       	std	Y+1, r29	; 0x01
    19a6:	c8 83       	st	Y, r28
    19a8:	f2 cf       	rjmp	.-28     	; 0x198e <xQueueGenericCreate+0x26>
    19aa:	85 e2       	ldi	r24, 0x25	; 37
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	ce db       	rcall	.-2148   	; 0x114c <pvPortMalloc>
    19b0:	ec 01       	movw	r28, r24
    19b2:	89 2b       	or	r24, r25
    19b4:	b9 f7       	brne	.-18     	; 0x19a4 <xQueueGenericCreate+0x3c>
    19b6:	ce 01       	movw	r24, r28
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	08 95       	ret

000019c4 <xQueueGenericSend>:
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	29 97       	sbiw	r28, 0x09	; 9
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	7c 01       	movw	r14, r24
    19ec:	5b 01       	movw	r10, r22
    19ee:	2e 83       	std	Y+6, r18	; 0x06
    19f0:	3f 83       	std	Y+7, r19	; 0x07
    19f2:	48 87       	std	Y+8, r20	; 0x08
    19f4:	59 87       	std	Y+9, r21	; 0x09
    19f6:	10 e0       	ldi	r17, 0x00	; 0
    19f8:	99 24       	eor	r9, r9
    19fa:	93 94       	inc	r9
    19fc:	6c 01       	movw	r12, r24
    19fe:	88 e0       	ldi	r24, 0x08	; 8
    1a00:	c8 0e       	add	r12, r24
    1a02:	d1 1c       	adc	r13, r1
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	0f 92       	push	r0
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a0e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a10:	98 17       	cp	r25, r24
    1a12:	10 f0       	brcs	.+4      	; 0x1a18 <xQueueGenericSend+0x54>
    1a14:	02 30       	cpi	r16, 0x02	; 2
    1a16:	b1 f4       	brne	.+44     	; 0x1a44 <xQueueGenericSend+0x80>
    1a18:	40 2f       	mov	r20, r16
    1a1a:	b5 01       	movw	r22, r10
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	9b de       	rcall	.-714    	; 0x1756 <prvCopyDataToQueue>
    1a20:	f7 01       	movw	r30, r14
    1a22:	93 89       	ldd	r25, Z+19	; 0x13
    1a24:	99 23       	and	r25, r25
    1a26:	41 f0       	breq	.+16     	; 0x1a38 <xQueueGenericSend+0x74>
    1a28:	c7 01       	movw	r24, r14
    1a2a:	43 96       	adiw	r24, 0x13	; 19
    1a2c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskRemoveFromEventList>
    1a30:	88 23       	and	r24, r24
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <xQueueGenericSend+0x78>
    1a34:	bd dd       	rcall	.-1158   	; 0x15b0 <vPortYield>
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <xQueueGenericSend+0x78>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	ba dd       	rcall	.-1164   	; 0x15b0 <vPortYield>
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	4e c0       	rjmp	.+156    	; 0x1ae0 <xQueueGenericSend+0x11c>
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	9f 81       	ldd	r25, Y+7	; 0x07
    1a48:	a8 85       	ldd	r26, Y+8	; 0x08
    1a4a:	b9 85       	ldd	r27, Y+9	; 0x09
    1a4c:	89 2b       	or	r24, r25
    1a4e:	8a 2b       	or	r24, r26
    1a50:	8b 2b       	or	r24, r27
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <xQueueGenericSend+0x98>
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	42 c0       	rjmp	.+132    	; 0x1ae0 <xQueueGenericSend+0x11c>
    1a5c:	11 11       	cpse	r17, r1
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <xQueueGenericSend+0xa6>
    1a60:	ce 01       	movw	r24, r28
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	0e 94 48 16 	call	0x2c90	; 0x2c90 <vTaskInternalSetTimeOutState>
    1a68:	19 2d       	mov	r17, r9
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	2c d6       	rcall	.+3160   	; 0x26c8 <vTaskSuspendAll>
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	0f 92       	push	r0
    1a76:	f7 01       	movw	r30, r14
    1a78:	81 a1       	ldd	r24, Z+33	; 0x21
    1a7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <xQueueGenericSend+0xbc>
    1a7e:	11 a2       	std	Z+33, r1	; 0x21
    1a80:	f7 01       	movw	r30, r14
    1a82:	82 a1       	ldd	r24, Z+34	; 0x22
    1a84:	8f 3f       	cpi	r24, 0xFF	; 255
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <xQueueGenericSend+0xc6>
    1a88:	12 a2       	std	Z+34, r1	; 0x22
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	be 01       	movw	r22, r28
    1a90:	6a 5f       	subi	r22, 0xFA	; 250
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	ce 01       	movw	r24, r28
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <xTaskCheckForTimeOut>
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	1c c0       	rjmp	.+56     	; 0x1ad8 <xQueueGenericSend+0x114>
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	0f 92       	push	r0
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1aaa:	87 8d       	ldd	r24, Z+31	; 0x1f
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	98 13       	cpse	r25, r24
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <xQueueGenericSend+0x10c>
    1ab4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ab6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ab8:	68 85       	ldd	r22, Y+8	; 0x08
    1aba:	79 85       	ldd	r23, Y+9	; 0x09
    1abc:	c6 01       	movw	r24, r12
    1abe:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <vTaskPlaceOnEventList>
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	c1 de       	rcall	.-638    	; 0x1848 <prvUnlockQueue>
    1ac6:	e9 d6       	rcall	.+3538   	; 0x289a <xTaskResumeAll>
    1ac8:	81 11       	cpse	r24, r1
    1aca:	9c cf       	rjmp	.-200    	; 0x1a04 <xQueueGenericSend+0x40>
    1acc:	71 dd       	rcall	.-1310   	; 0x15b0 <vPortYield>
    1ace:	9a cf       	rjmp	.-204    	; 0x1a04 <xQueueGenericSend+0x40>
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	ba de       	rcall	.-652    	; 0x1848 <prvUnlockQueue>
    1ad4:	e2 d6       	rcall	.+3524   	; 0x289a <xTaskResumeAll>
    1ad6:	96 cf       	rjmp	.-212    	; 0x1a04 <xQueueGenericSend+0x40>
    1ad8:	c7 01       	movw	r24, r14
    1ada:	b6 de       	rcall	.-660    	; 0x1848 <prvUnlockQueue>
    1adc:	de d6       	rcall	.+3516   	; 0x289a <xTaskResumeAll>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	29 96       	adiw	r28, 0x09	; 9
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	08 95       	ret

00001b04 <xQueueCreateMutex>:
    1b04:	0f 93       	push	r16
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	2b df       	rcall	.-426    	; 0x1968 <xQueueGenericCreate>
    1b12:	ec 01       	movw	r28, r24
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	61 f0       	breq	.+24     	; 0x1b30 <xQueueCreateMutex+0x2c>
    1b18:	1d 82       	std	Y+5, r1	; 0x05
    1b1a:	1c 82       	std	Y+4, r1	; 0x04
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	18 82       	st	Y, r1
    1b20:	1e 82       	std	Y+6, r1	; 0x06
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	4a df       	rcall	.-364    	; 0x19c4 <xQueueGenericSend>
    1b30:	ce 01       	movw	r24, r28
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <xQueueGenericSendFromISR>:
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	8a 01       	movw	r16, r20
    1b48:	fc 01       	movw	r30, r24
    1b4a:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b4c:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b4e:	53 17       	cp	r21, r19
    1b50:	10 f0       	brcs	.+4      	; 0x1b56 <xQueueGenericSendFromISR+0x1c>
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	e9 f4       	brne	.+58     	; 0x1b90 <xQueueGenericSendFromISR+0x56>
    1b56:	42 2f       	mov	r20, r18
    1b58:	78 01       	movw	r14, r16
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	1a a1       	ldd	r17, Y+34	; 0x22
    1b5e:	fb dd       	rcall	.-1034   	; 0x1756 <prvCopyDataToQueue>
    1b60:	1f 3f       	cpi	r17, 0xFF	; 255
    1b62:	81 f4       	brne	.+32     	; 0x1b84 <xQueueGenericSendFromISR+0x4a>
    1b64:	8b 89       	ldd	r24, Y+19	; 0x13
    1b66:	88 23       	and	r24, r24
    1b68:	a9 f0       	breq	.+42     	; 0x1b94 <xQueueGenericSendFromISR+0x5a>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	43 96       	adiw	r24, 0x13	; 19
    1b6e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskRemoveFromEventList>
    1b72:	88 23       	and	r24, r24
    1b74:	89 f0       	breq	.+34     	; 0x1b98 <xQueueGenericSendFromISR+0x5e>
    1b76:	e1 14       	cp	r14, r1
    1b78:	f1 04       	cpc	r15, r1
    1b7a:	81 f0       	breq	.+32     	; 0x1b9c <xQueueGenericSendFromISR+0x62>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	f7 01       	movw	r30, r14
    1b80:	80 83       	st	Z, r24
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <xQueueGenericSendFromISR+0x64>
    1b84:	ff 24       	eor	r15, r15
    1b86:	f3 94       	inc	r15
    1b88:	f1 0e       	add	r15, r17
    1b8a:	fa a2       	std	Y+34, r15	; 0x22
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	07 c0       	rjmp	.+14     	; 0x1b9e <xQueueGenericSendFromISR+0x64>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <xQueueGenericSendFromISR+0x64>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <xQueueGenericSendFromISR+0x64>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <xQueueGenericSendFromISR+0x64>
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	08 95       	ret

00001bac <xQueueReceive>:
    1bac:	9f 92       	push	r9
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	29 97       	sbiw	r28, 0x09	; 9
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	8c 01       	movw	r16, r24
    1bd4:	5b 01       	movw	r10, r22
    1bd6:	2e 83       	std	Y+6, r18	; 0x06
    1bd8:	3f 83       	std	Y+7, r19	; 0x07
    1bda:	48 87       	std	Y+8, r20	; 0x08
    1bdc:	59 87       	std	Y+9, r21	; 0x09
    1bde:	e1 2c       	mov	r14, r1
    1be0:	99 24       	eor	r9, r9
    1be2:	93 94       	inc	r9
    1be4:	6c 01       	movw	r12, r24
    1be6:	83 e1       	ldi	r24, 0x13	; 19
    1be8:	c8 0e       	add	r12, r24
    1bea:	d1 1c       	adc	r13, r1
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	0f 92       	push	r0
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1bf6:	ff 20       	and	r15, r15
    1bf8:	91 f0       	breq	.+36     	; 0x1c1e <xQueueReceive+0x72>
    1bfa:	b5 01       	movw	r22, r10
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	0a de       	rcall	.-1004   	; 0x1814 <prvCopyDataFromQueue>
    1c00:	fa 94       	dec	r15
    1c02:	f8 01       	movw	r30, r16
    1c04:	f6 8e       	std	Z+30, r15	; 0x1e
    1c06:	80 85       	ldd	r24, Z+8	; 0x08
    1c08:	88 23       	and	r24, r24
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <xQueueReceive+0x6a>
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	08 96       	adiw	r24, 0x08	; 8
    1c10:	b3 d7       	rcall	.+3942   	; 0x2b78 <xTaskRemoveFromEventList>
    1c12:	81 11       	cpse	r24, r1
    1c14:	cd dc       	rcall	.-1638   	; 0x15b0 <vPortYield>
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	4c c0       	rjmp	.+152    	; 0x1cb6 <xQueueReceive+0x10a>
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	a8 85       	ldd	r26, Y+8	; 0x08
    1c24:	b9 85       	ldd	r27, Y+9	; 0x09
    1c26:	89 2b       	or	r24, r25
    1c28:	8a 2b       	or	r24, r26
    1c2a:	8b 2b       	or	r24, r27
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <xQueueReceive+0x8a>
    1c2e:	0f 90       	pop	r0
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	40 c0       	rjmp	.+128    	; 0x1cb6 <xQueueReceive+0x10a>
    1c36:	e1 10       	cpse	r14, r1
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <xQueueReceive+0x98>
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <vTaskInternalSetTimeOutState>
    1c42:	e9 2c       	mov	r14, r9
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	3f d5       	rcall	.+2686   	; 0x26c8 <vTaskSuspendAll>
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
    1c50:	f8 01       	movw	r30, r16
    1c52:	81 a1       	ldd	r24, Z+33	; 0x21
    1c54:	8f 3f       	cpi	r24, 0xFF	; 255
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <xQueueReceive+0xae>
    1c58:	11 a2       	std	Z+33, r1	; 0x21
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	82 a1       	ldd	r24, Z+34	; 0x22
    1c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <xQueueReceive+0xb8>
    1c62:	12 a2       	std	Z+34, r1	; 0x22
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	be 01       	movw	r22, r28
    1c6a:	6a 5f       	subi	r22, 0xFA	; 250
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <xTaskCheckForTimeOut>
    1c76:	81 11       	cpse	r24, r1
    1c78:	15 c0       	rjmp	.+42     	; 0x1ca4 <xQueueReceive+0xf8>
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	61 dd       	rcall	.-1342   	; 0x1740 <prvIsQueueEmpty>
    1c7e:	88 23       	and	r24, r24
    1c80:	69 f0       	breq	.+26     	; 0x1c9c <xQueueReceive+0xf0>
    1c82:	4e 81       	ldd	r20, Y+6	; 0x06
    1c84:	5f 81       	ldd	r21, Y+7	; 0x07
    1c86:	68 85       	ldd	r22, Y+8	; 0x08
    1c88:	79 85       	ldd	r23, Y+9	; 0x09
    1c8a:	c6 01       	movw	r24, r12
    1c8c:	1a d7       	rcall	.+3636   	; 0x2ac2 <vTaskPlaceOnEventList>
    1c8e:	c8 01       	movw	r24, r16
    1c90:	db dd       	rcall	.-1098   	; 0x1848 <prvUnlockQueue>
    1c92:	03 d6       	rcall	.+3078   	; 0x289a <xTaskResumeAll>
    1c94:	81 11       	cpse	r24, r1
    1c96:	aa cf       	rjmp	.-172    	; 0x1bec <xQueueReceive+0x40>
    1c98:	8b dc       	rcall	.-1770   	; 0x15b0 <vPortYield>
    1c9a:	a8 cf       	rjmp	.-176    	; 0x1bec <xQueueReceive+0x40>
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	d4 dd       	rcall	.-1112   	; 0x1848 <prvUnlockQueue>
    1ca0:	fc d5       	rcall	.+3064   	; 0x289a <xTaskResumeAll>
    1ca2:	a4 cf       	rjmp	.-184    	; 0x1bec <xQueueReceive+0x40>
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	d0 dd       	rcall	.-1120   	; 0x1848 <prvUnlockQueue>
    1ca8:	f8 d5       	rcall	.+3056   	; 0x289a <xTaskResumeAll>
    1caa:	c8 01       	movw	r24, r16
    1cac:	49 dd       	rcall	.-1390   	; 0x1740 <prvIsQueueEmpty>
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <xQueueReceive+0x108>
    1cb2:	9c cf       	rjmp	.-200    	; 0x1bec <xQueueReceive+0x40>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	29 96       	adiw	r28, 0x09	; 9
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	bf 90       	pop	r11
    1cd4:	af 90       	pop	r10
    1cd6:	9f 90       	pop	r9
    1cd8:	08 95       	ret

00001cda <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	0f 92       	push	r0
    1ce6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cea:	09 f4       	brne	.+2      	; 0x1cee <vQueueWaitForMessageRestricted+0x14>
    1cec:	19 a2       	std	Y+33, r1	; 0x21
    1cee:	8a a1       	ldd	r24, Y+34	; 0x22
    1cf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <vQueueWaitForMessageRestricted+0x1c>
    1cf4:	1a a2       	std	Y+34, r1	; 0x22
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1cfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cfc:	81 11       	cpse	r24, r1
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1d00:	ce 01       	movw	r24, r28
    1d02:	43 96       	adiw	r24, 0x13	; 19
    1d04:	19 d7       	rcall	.+3634   	; 0x2b38 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1d06:	ce 01       	movw	r24, r28
    1d08:	9f dd       	rcall	.-1218   	; 0x1848 <prvUnlockQueue>
    }
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1d10:	fc 01       	movw	r30, r24
    1d12:	44 81       	ldd	r20, Z+4	; 0x04
    1d14:	55 81       	ldd	r21, Z+5	; 0x05
    1d16:	22 81       	ldd	r18, Z+2	; 0x02
    1d18:	33 81       	ldd	r19, Z+3	; 0x03
    1d1a:	24 0f       	add	r18, r20
    1d1c:	35 1f       	adc	r19, r21
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	b9 01       	movw	r22, r18
    1d24:	68 1b       	sub	r22, r24
    1d26:	79 0b       	sbc	r23, r25
    1d28:	cb 01       	movw	r24, r22
    1d2a:	64 17       	cp	r22, r20
    1d2c:	75 07       	cpc	r23, r21
    1d2e:	10 f0       	brcs	.+4      	; 0x1d34 <prvBytesInBuffer+0x24>
    1d30:	84 1b       	sub	r24, r20
    1d32:	95 0b       	sbc	r25, r21
    1d34:	08 95       	ret

00001d36 <prvWriteBytesToBuffer>:
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	6c 01       	movw	r12, r24
    1d4c:	5b 01       	movw	r10, r22
    1d4e:	7a 01       	movw	r14, r20
    1d50:	fc 01       	movw	r30, r24
    1d52:	c2 81       	ldd	r28, Z+2	; 0x02
    1d54:	d3 81       	ldd	r29, Z+3	; 0x03
    1d56:	04 81       	ldd	r16, Z+4	; 0x04
    1d58:	15 81       	ldd	r17, Z+5	; 0x05
    1d5a:	0c 1b       	sub	r16, r28
    1d5c:	1d 0b       	sbc	r17, r29
    1d5e:	40 17       	cp	r20, r16
    1d60:	51 07       	cpc	r21, r17
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <prvWriteBytesToBuffer+0x30>
    1d64:	8a 01       	movw	r16, r20
    1d66:	f6 01       	movw	r30, r12
    1d68:	84 85       	ldd	r24, Z+12	; 0x0c
    1d6a:	95 85       	ldd	r25, Z+13	; 0x0d
    1d6c:	a8 01       	movw	r20, r16
    1d6e:	b5 01       	movw	r22, r10
    1d70:	8c 0f       	add	r24, r28
    1d72:	9d 1f       	adc	r25, r29
    1d74:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <memcpy>
    1d78:	0e 15       	cp	r16, r14
    1d7a:	1f 05       	cpc	r17, r15
    1d7c:	58 f4       	brcc	.+22     	; 0x1d94 <prvWriteBytesToBuffer+0x5e>
    1d7e:	a7 01       	movw	r20, r14
    1d80:	40 1b       	sub	r20, r16
    1d82:	51 0b       	sbc	r21, r17
    1d84:	b5 01       	movw	r22, r10
    1d86:	60 0f       	add	r22, r16
    1d88:	71 1f       	adc	r23, r17
    1d8a:	f6 01       	movw	r30, r12
    1d8c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d8e:	95 85       	ldd	r25, Z+13	; 0x0d
    1d90:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <memcpy>
    1d94:	ce 01       	movw	r24, r28
    1d96:	8e 0d       	add	r24, r14
    1d98:	9f 1d       	adc	r25, r15
    1d9a:	f6 01       	movw	r30, r12
    1d9c:	24 81       	ldd	r18, Z+4	; 0x04
    1d9e:	35 81       	ldd	r19, Z+5	; 0x05
    1da0:	82 17       	cp	r24, r18
    1da2:	93 07       	cpc	r25, r19
    1da4:	10 f0       	brcs	.+4      	; 0x1daa <prvWriteBytesToBuffer+0x74>
    1da6:	82 1b       	sub	r24, r18
    1da8:	93 0b       	sbc	r25, r19
    1daa:	f6 01       	movw	r30, r12
    1dac:	93 83       	std	Z+3, r25	; 0x03
    1dae:	82 83       	std	Z+2, r24	; 0x02
    1db0:	c7 01       	movw	r24, r14
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	08 95       	ret

00001dc8 <prvWriteMessageToBuffer>:
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	1f 92       	push	r1
    1dda:	1f 92       	push	r1
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	5a 83       	std	Y+2, r21	; 0x02
    1de2:	49 83       	std	Y+1, r20	; 0x01
    1de4:	21 15       	cp	r18, r1
    1de6:	31 05       	cpc	r19, r1
    1de8:	c9 f0       	breq	.+50     	; 0x1e1c <prvWriteMessageToBuffer+0x54>
    1dea:	6b 01       	movw	r12, r22
    1dec:	7c 01       	movw	r14, r24
    1dee:	fc 01       	movw	r30, r24
    1df0:	86 85       	ldd	r24, Z+14	; 0x0e
    1df2:	80 fd       	sbrc	r24, 0
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <prvWriteMessageToBuffer+0x3e>
    1df6:	ca 01       	movw	r24, r20
    1df8:	24 17       	cp	r18, r20
    1dfa:	35 07       	cpc	r19, r21
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <prvWriteMessageToBuffer+0x38>
    1dfe:	c9 01       	movw	r24, r18
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	11 c0       	rjmp	.+34     	; 0x1e28 <prvWriteMessageToBuffer+0x60>
    1e06:	20 17       	cp	r18, r16
    1e08:	31 07       	cpc	r19, r17
    1e0a:	58 f0       	brcs	.+22     	; 0x1e22 <prvWriteMessageToBuffer+0x5a>
    1e0c:	42 e0       	ldi	r20, 0x02	; 2
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	be 01       	movw	r22, r28
    1e12:	6f 5f       	subi	r22, 0xFF	; 255
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	c7 01       	movw	r24, r14
    1e18:	8e df       	rcall	.-228    	; 0x1d36 <prvWriteBytesToBuffer>
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <prvWriteMessageToBuffer+0x60>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	08 c0       	rjmp	.+16     	; 0x1e32 <prvWriteMessageToBuffer+0x6a>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <prvWriteMessageToBuffer+0x6a>
    1e28:	49 81       	ldd	r20, Y+1	; 0x01
    1e2a:	5a 81       	ldd	r21, Y+2	; 0x02
    1e2c:	b6 01       	movw	r22, r12
    1e2e:	c7 01       	movw	r24, r14
    1e30:	82 df       	rcall	.-252    	; 0x1d36 <prvWriteBytesToBuffer>
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	08 95       	ret

00001e48 <prvReadBytesFromBuffer>:
    1e48:	af 92       	push	r10
    1e4a:	bf 92       	push	r11
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	7c 01       	movw	r14, r24
    1e5e:	5b 01       	movw	r10, r22
    1e60:	e9 01       	movw	r28, r18
    1e62:	42 17       	cp	r20, r18
    1e64:	53 07       	cpc	r21, r19
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <prvReadBytesFromBuffer+0x22>
    1e68:	ea 01       	movw	r28, r20
    1e6a:	20 97       	sbiw	r28, 0x00	; 0
    1e6c:	79 f1       	breq	.+94     	; 0x1ecc <prvReadBytesFromBuffer+0x84>
    1e6e:	f7 01       	movw	r30, r14
    1e70:	00 81       	ld	r16, Z
    1e72:	11 81       	ldd	r17, Z+1	; 0x01
    1e74:	c4 80       	ldd	r12, Z+4	; 0x04
    1e76:	d5 80       	ldd	r13, Z+5	; 0x05
    1e78:	c0 1a       	sub	r12, r16
    1e7a:	d1 0a       	sbc	r13, r17
    1e7c:	cc 15       	cp	r28, r12
    1e7e:	dd 05       	cpc	r29, r13
    1e80:	08 f4       	brcc	.+2      	; 0x1e84 <prvReadBytesFromBuffer+0x3c>
    1e82:	6e 01       	movw	r12, r28
    1e84:	f7 01       	movw	r30, r14
    1e86:	64 85       	ldd	r22, Z+12	; 0x0c
    1e88:	75 85       	ldd	r23, Z+13	; 0x0d
    1e8a:	60 0f       	add	r22, r16
    1e8c:	71 1f       	adc	r23, r17
    1e8e:	a6 01       	movw	r20, r12
    1e90:	c5 01       	movw	r24, r10
    1e92:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <memcpy>
    1e96:	cc 16       	cp	r12, r28
    1e98:	dd 06       	cpc	r13, r29
    1e9a:	58 f4       	brcc	.+22     	; 0x1eb2 <prvReadBytesFromBuffer+0x6a>
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	4c 19       	sub	r20, r12
    1ea0:	5d 09       	sbc	r21, r13
    1ea2:	f7 01       	movw	r30, r14
    1ea4:	64 85       	ldd	r22, Z+12	; 0x0c
    1ea6:	75 85       	ldd	r23, Z+13	; 0x0d
    1ea8:	c5 01       	movw	r24, r10
    1eaa:	8c 0d       	add	r24, r12
    1eac:	9d 1d       	adc	r25, r13
    1eae:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <memcpy>
    1eb2:	0c 0f       	add	r16, r28
    1eb4:	1d 1f       	adc	r17, r29
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	84 81       	ldd	r24, Z+4	; 0x04
    1eba:	95 81       	ldd	r25, Z+5	; 0x05
    1ebc:	08 17       	cp	r16, r24
    1ebe:	19 07       	cpc	r17, r25
    1ec0:	10 f0       	brcs	.+4      	; 0x1ec6 <prvReadBytesFromBuffer+0x7e>
    1ec2:	08 1b       	sub	r16, r24
    1ec4:	19 0b       	sbc	r17, r25
    1ec6:	f7 01       	movw	r30, r14
    1ec8:	11 83       	std	Z+1, r17	; 0x01
    1eca:	00 83       	st	Z, r16
    1ecc:	ce 01       	movw	r24, r28
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	df 90       	pop	r13
    1edc:	cf 90       	pop	r12
    1ede:	bf 90       	pop	r11
    1ee0:	af 90       	pop	r10
    1ee2:	08 95       	ret

00001ee4 <xStreamBufferGenericCreate>:
    1ee4:	ef 92       	push	r14
    1ee6:	ff 92       	push	r15
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	eb 01       	movw	r28, r22
    1ef0:	11 e0       	ldi	r17, 0x01	; 1
    1ef2:	41 30       	cpi	r20, 0x01	; 1
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <xStreamBufferGenericCreate+0x14>
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	20 97       	sbiw	r28, 0x00	; 0
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <xStreamBufferGenericCreate+0x1c>
    1efc:	c1 e0       	ldi	r28, 0x01	; 1
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
    1f00:	7c 01       	movw	r14, r24
    1f02:	2f ef       	ldi	r18, 0xFF	; 255
    1f04:	e2 1a       	sub	r14, r18
    1f06:	f2 0a       	sbc	r15, r18
    1f08:	41 96       	adiw	r24, 0x11	; 17
    1f0a:	20 d9       	rcall	.-3520   	; 0x114c <pvPortMalloc>
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	81 f0       	breq	.+32     	; 0x1f30 <xStreamBufferGenericCreate+0x4c>
    1f10:	20 e1       	ldi	r18, 0x10	; 16
    1f12:	fc 01       	movw	r30, r24
    1f14:	11 92       	st	Z+, r1
    1f16:	2a 95       	dec	r18
    1f18:	e9 f7       	brne	.-6      	; 0x1f14 <xStreamBufferGenericCreate+0x30>
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	20 5f       	subi	r18, 0xF0	; 240
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	fc 01       	movw	r30, r24
    1f22:	35 87       	std	Z+13, r19	; 0x0d
    1f24:	24 87       	std	Z+12, r18	; 0x0c
    1f26:	f5 82       	std	Z+5, r15	; 0x05
    1f28:	e4 82       	std	Z+4, r14	; 0x04
    1f2a:	d7 83       	std	Z+7, r29	; 0x07
    1f2c:	c6 83       	std	Z+6, r28	; 0x06
    1f2e:	16 87       	std	Z+14, r17	; 0x0e
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	08 95       	ret

00001f3c <xStreamBufferReset>:
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	fc 01       	movw	r30, r24
    1f42:	27 85       	ldd	r18, Z+15	; 0x0f
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	0f 92       	push	r0
    1f4a:	80 85       	ldd	r24, Z+8	; 0x08
    1f4c:	91 85       	ldd	r25, Z+9	; 0x09
    1f4e:	89 2b       	or	r24, r25
    1f50:	d1 f4       	brne	.+52     	; 0x1f86 <xStreamBufferReset+0x4a>
    1f52:	82 85       	ldd	r24, Z+10	; 0x0a
    1f54:	93 85       	ldd	r25, Z+11	; 0x0b
    1f56:	89 2b       	or	r24, r25
    1f58:	c1 f4       	brne	.+48     	; 0x1f8a <xStreamBufferReset+0x4e>
    1f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    1f5c:	46 81       	ldd	r20, Z+6	; 0x06
    1f5e:	57 81       	ldd	r21, Z+7	; 0x07
    1f60:	64 81       	ldd	r22, Z+4	; 0x04
    1f62:	75 81       	ldd	r23, Z+5	; 0x05
    1f64:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f66:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f68:	90 e1       	ldi	r25, 0x10	; 16
    1f6a:	ef 01       	movw	r28, r30
    1f6c:	19 92       	st	Y+, r1
    1f6e:	9a 95       	dec	r25
    1f70:	e9 f7       	brne	.-6      	; 0x1f6c <xStreamBufferReset+0x30>
    1f72:	b5 87       	std	Z+13, r27	; 0x0d
    1f74:	a4 87       	std	Z+12, r26	; 0x0c
    1f76:	75 83       	std	Z+5, r23	; 0x05
    1f78:	64 83       	std	Z+4, r22	; 0x04
    1f7a:	57 83       	std	Z+7, r21	; 0x07
    1f7c:	46 83       	std	Z+6, r20	; 0x06
    1f7e:	86 87       	std	Z+14, r24	; 0x0e
    1f80:	27 87       	std	Z+15, r18	; 0x0f
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <xStreamBufferReset+0x50>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <xStreamBufferReset+0x50>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <xStreamBufferSpacesAvailable>:
    1f96:	fc 01       	movw	r30, r24
    1f98:	24 81       	ldd	r18, Z+4	; 0x04
    1f9a:	35 81       	ldd	r19, Z+5	; 0x05
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	42 81       	ldd	r20, Z+2	; 0x02
    1fa2:	53 81       	ldd	r21, Z+3	; 0x03
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	84 1b       	sub	r24, r20
    1fac:	95 0b       	sbc	r25, r21
    1fae:	82 17       	cp	r24, r18
    1fb0:	93 07       	cpc	r25, r19
    1fb2:	10 f0       	brcs	.+4      	; 0x1fb8 <xStreamBufferSpacesAvailable+0x22>
    1fb4:	82 1b       	sub	r24, r18
    1fb6:	93 0b       	sbc	r25, r19
    1fb8:	08 95       	ret

00001fba <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1fba:	2f 92       	push	r2
    1fbc:	3f 92       	push	r3
    1fbe:	4f 92       	push	r4
    1fc0:	5f 92       	push	r5
    1fc2:	6f 92       	push	r6
    1fc4:	7f 92       	push	r7
    1fc6:	8f 92       	push	r8
    1fc8:	9f 92       	push	r9
    1fca:	af 92       	push	r10
    1fcc:	bf 92       	push	r11
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	29 97       	sbiw	r28, 0x09	; 9
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	5c 01       	movw	r10, r24
    1ff0:	1b 01       	movw	r2, r22
    1ff2:	2a 01       	movw	r4, r20
    1ff4:	0e 83       	std	Y+6, r16	; 0x06
    1ff6:	1f 83       	std	Y+7, r17	; 0x07
    1ff8:	28 87       	std	Y+8, r18	; 0x08
    1ffa:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	86 85       	ldd	r24, Z+14	; 0x0e
    2000:	80 ff       	sbrs	r24, 0
    2002:	05 c0       	rjmp	.+10     	; 0x200e <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2004:	3a 01       	movw	r6, r20
    2006:	f2 e0       	ldi	r31, 0x02	; 2
    2008:	6f 0e       	add	r6, r31
    200a:	71 1c       	adc	r7, r1
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    200e:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
    2012:	9f 81       	ldd	r25, Y+7	; 0x07
    2014:	a8 85       	ldd	r26, Y+8	; 0x08
    2016:	b9 85       	ldd	r27, Y+9	; 0x09
    2018:	89 2b       	or	r24, r25
    201a:	8a 2b       	or	r24, r26
    201c:	8b 2b       	or	r24, r27
    201e:	09 f4       	brne	.+2      	; 0x2022 <xStreamBufferSend+0x68>
    2020:	34 c0       	rjmp	.+104    	; 0x208a <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	1e d6       	rcall	.+3132   	; 0x2c64 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    202e:	c5 01       	movw	r24, r10
    2030:	b2 df       	rcall	.-156    	; 0x1f96 <xStreamBufferSpacesAvailable>
    2032:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    2034:	86 15       	cp	r24, r6
    2036:	97 05       	cpc	r25, r7
    2038:	18 f5       	brcc	.+70     	; 0x2080 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 b8 18 	call	0x3170	; 0x3170 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2042:	90 d6       	rcall	.+3360   	; 0x2d64 <xTaskGetCurrentTaskHandle>
    2044:	f5 01       	movw	r30, r10
    2046:	93 87       	std	Z+11, r25	; 0x0b
    2048:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    204e:	ce 80       	ldd	r12, Y+6	; 0x06
    2050:	df 80       	ldd	r13, Y+7	; 0x07
    2052:	e8 84       	ldd	r14, Y+8	; 0x08
    2054:	f9 84       	ldd	r15, Y+9	; 0x09
    2056:	00 e0       	ldi	r16, 0x00	; 0
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	a9 01       	movw	r20, r18
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	cb 01       	movw	r24, r22
    2066:	f9 d6       	rcall	.+3570   	; 0x2e5a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2068:	f5 01       	movw	r30, r10
    206a:	13 86       	std	Z+11, r1	; 0x0b
    206c:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    206e:	be 01       	movw	r22, r28
    2070:	6a 5f       	subi	r22, 0xFA	; 250
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	ce 01       	movw	r24, r28
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	1c d6       	rcall	.+3128   	; 0x2cb2 <xTaskCheckForTimeOut>
    207a:	88 23       	and	r24, r24
    207c:	a9 f2       	breq	.-86     	; 0x2028 <xStreamBufferSend+0x6e>
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2080:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	81 14       	cp	r8, r1
    2086:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2088:	19 f4       	brne	.+6      	; 0x2090 <xStreamBufferSend+0xd6>
    208a:	c5 01       	movw	r24, r10
    208c:	84 df       	rcall	.-248    	; 0x1f96 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    208e:	4c 01       	movw	r8, r24
    2090:	83 01       	movw	r16, r6
    2092:	94 01       	movw	r18, r8
    2094:	a2 01       	movw	r20, r4
    2096:	b1 01       	movw	r22, r2
    2098:	c5 01       	movw	r24, r10
    209a:	96 de       	rcall	.-724    	; 0x1dc8 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    209c:	7c 01       	movw	r14, r24
    209e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    20a0:	d9 f0       	breq	.+54     	; 0x20d8 <xStreamBufferSend+0x11e>
    20a2:	c5 01       	movw	r24, r10
    20a4:	35 de       	rcall	.-918    	; 0x1d10 <prvBytesInBuffer>
    20a6:	f5 01       	movw	r30, r10
    20a8:	26 81       	ldd	r18, Z+6	; 0x06
    20aa:	37 81       	ldd	r19, Z+7	; 0x07
    20ac:	82 17       	cp	r24, r18
    20ae:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    20b0:	98 f0       	brcs	.+38     	; 0x20d8 <xStreamBufferSend+0x11e>
    20b2:	0a d3       	rcall	.+1556   	; 0x26c8 <vTaskSuspendAll>
    20b4:	f5 01       	movw	r30, r10
    20b6:	80 85       	ldd	r24, Z+8	; 0x08
    20b8:	91 85       	ldd	r25, Z+9	; 0x09
    20ba:	89 2b       	or	r24, r25
    20bc:	61 f0       	breq	.+24     	; 0x20d6 <xStreamBufferSend+0x11c>
    20be:	80 85       	ldd	r24, Z+8	; 0x08
    20c0:	91 85       	ldd	r25, Z+9	; 0x09
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	ba 01       	movw	r22, r20
    20ce:	4f d7       	rcall	.+3742   	; 0x2f6e <xTaskGenericNotify>
    20d0:	f5 01       	movw	r30, r10
    20d2:	11 86       	std	Z+9, r1	; 0x09
    20d4:	10 86       	std	Z+8, r1	; 0x08
    20d6:	e1 d3       	rcall	.+1986   	; 0x289a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    20d8:	c7 01       	movw	r24, r14
    20da:	29 96       	adiw	r28, 0x09	; 9
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	cf 90       	pop	r12
    20f6:	bf 90       	pop	r11
    20f8:	af 90       	pop	r10
    20fa:	9f 90       	pop	r9
    20fc:	8f 90       	pop	r8
    20fe:	7f 90       	pop	r7
    2100:	6f 90       	pop	r6
    2102:	5f 90       	pop	r5
    2104:	4f 90       	pop	r4
    2106:	3f 90       	pop	r3
    2108:	2f 90       	pop	r2
    210a:	08 95       	ret

0000210c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	ec 01       	movw	r28, r24
    2122:	5b 01       	movw	r10, r22
    2124:	6a 01       	movw	r12, r20
    2126:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2128:	8e 85       	ldd	r24, Y+14	; 0x0e
    212a:	80 ff       	sbrs	r24, 0
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    212e:	8a 01       	movw	r16, r20
    2130:	0e 5f       	subi	r16, 0xFE	; 254
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2136:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2138:	ce 01       	movw	r24, r28
    213a:	2d df       	rcall	.-422    	; 0x1f96 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    213c:	9c 01       	movw	r18, r24
    213e:	a6 01       	movw	r20, r12
    2140:	b5 01       	movw	r22, r10
    2142:	ce 01       	movw	r24, r28
    2144:	41 de       	rcall	.-894    	; 0x1dc8 <prvWriteMessageToBuffer>
    2146:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2148:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    214a:	b1 f0       	breq	.+44     	; 0x2178 <xStreamBufferSendFromISR+0x6c>
    214c:	ce 01       	movw	r24, r28
    214e:	e0 dd       	rcall	.-1088   	; 0x1d10 <prvBytesInBuffer>
    2150:	2e 81       	ldd	r18, Y+6	; 0x06
    2152:	3f 81       	ldd	r19, Y+7	; 0x07
    2154:	82 17       	cp	r24, r18
    2156:	93 07       	cpc	r25, r19
    2158:	78 f0       	brcs	.+30     	; 0x2178 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    215a:	88 85       	ldd	r24, Y+8	; 0x08
    215c:	99 85       	ldd	r25, Y+9	; 0x09
    215e:	89 2b       	or	r24, r25
    2160:	59 f0       	breq	.+22     	; 0x2178 <xStreamBufferSendFromISR+0x6c>
    2162:	88 85       	ldd	r24, Y+8	; 0x08
    2164:	99 85       	ldd	r25, Y+9	; 0x09
    2166:	00 e0       	ldi	r16, 0x00	; 0
    2168:	10 e0       	ldi	r17, 0x00	; 0
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	ba 01       	movw	r22, r20
    2172:	75 d7       	rcall	.+3818   	; 0x305e <xTaskGenericNotifyFromISR>
    2174:	19 86       	std	Y+9, r1	; 0x09
    2176:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2178:	c6 01       	movw	r24, r12
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	ff 90       	pop	r15
    2184:	ef 90       	pop	r14
    2186:	df 90       	pop	r13
    2188:	cf 90       	pop	r12
    218a:	bf 90       	pop	r11
    218c:	af 90       	pop	r10
    218e:	08 95       	ret

00002190 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2190:	4f 92       	push	r4
    2192:	5f 92       	push	r5
    2194:	6f 92       	push	r6
    2196:	7f 92       	push	r7
    2198:	8f 92       	push	r8
    219a:	9f 92       	push	r9
    219c:	af 92       	push	r10
    219e:	bf 92       	push	r11
    21a0:	cf 92       	push	r12
    21a2:	df 92       	push	r13
    21a4:	ef 92       	push	r14
    21a6:	ff 92       	push	r15
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	1f 92       	push	r1
    21b2:	1f 92       	push	r1
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	5c 01       	movw	r10, r24
    21ba:	2b 01       	movw	r4, r22
    21bc:	3a 01       	movw	r6, r20
    21be:	68 01       	movw	r12, r16
    21c0:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    21c2:	fc 01       	movw	r30, r24
    21c4:	86 85       	ldd	r24, Z+14	; 0x0e
    21c6:	80 fd       	sbrc	r24, 0
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    21ca:	81 2c       	mov	r8, r1
    21cc:	91 2c       	mov	r9, r1
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    21d0:	68 94       	set
    21d2:	88 24       	eor	r8, r8
    21d4:	81 f8       	bld	r8, 1
    21d6:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    21d8:	c1 14       	cp	r12, r1
    21da:	d1 04       	cpc	r13, r1
    21dc:	e1 04       	cpc	r14, r1
    21de:	f1 04       	cpc	r15, r1
    21e0:	29 f1       	breq	.+74     	; 0x222c <__stack+0x2d>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    21e8:	c5 01       	movw	r24, r10
    21ea:	92 dd       	rcall	.-1244   	; 0x1d10 <prvBytesInBuffer>
    21ec:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    21ee:	88 16       	cp	r8, r24
    21f0:	99 06       	cpc	r9, r25
    21f2:	38 f0       	brcs	.+14     	; 0x2202 <__stack+0x3>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    21f8:	bb d7       	rcall	.+3958   	; 0x3170 <xTaskNotifyStateClear>
    21fa:	b4 d5       	rcall	.+2920   	; 0x2d64 <xTaskGetCurrentTaskHandle>
    21fc:	f5 01       	movw	r30, r10
    21fe:	91 87       	std	Z+9, r25	; 0x09
    2200:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2206:	80 16       	cp	r8, r16
    2208:	91 06       	cpc	r9, r17
    220a:	b0 f0       	brcs	.+44     	; 0x2238 <__stack+0x39>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    220c:	00 e0       	ldi	r16, 0x00	; 0
    220e:	10 e0       	ldi	r17, 0x00	; 0
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	a9 01       	movw	r20, r18
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	cb 01       	movw	r24, r22
    221c:	1e d6       	rcall	.+3132   	; 0x2e5a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    221e:	f5 01       	movw	r30, r10
    2220:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2222:	10 86       	std	Z+8, r1	; 0x08
    2224:	c5 01       	movw	r24, r10
    2226:	74 dd       	rcall	.-1304   	; 0x1d10 <prvBytesInBuffer>
    2228:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <__stack+0x33>
    222c:	c5 01       	movw	r24, r10
    222e:	70 dd       	rcall	.-1312   	; 0x1d10 <prvBytesInBuffer>
    2230:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2232:	80 16       	cp	r8, r16
    2234:	91 06       	cpc	r9, r17
    2236:	b8 f5       	brcc	.+110    	; 0x22a6 <__stack+0xa7>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2238:	81 14       	cp	r8, r1
    223a:	91 04       	cpc	r9, r1
    223c:	c1 f0       	breq	.+48     	; 0x226e <__stack+0x6f>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    223e:	f5 01       	movw	r30, r10
    2240:	e0 80       	ld	r14, Z
    2242:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2244:	98 01       	movw	r18, r16
    2246:	a4 01       	movw	r20, r8
    2248:	be 01       	movw	r22, r28
    224a:	6f 5f       	subi	r22, 0xFF	; 255
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	c5 01       	movw	r24, r10
    2250:	fb dd       	rcall	.-1034   	; 0x1e48 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2256:	08 19       	sub	r16, r8
    2258:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    225a:	68 16       	cp	r6, r24
    225c:	79 06       	cpc	r7, r25
    225e:	30 f4       	brcc	.+12     	; 0x226c <__stack+0x6d>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2260:	f5 01       	movw	r30, r10
    2262:	f1 82       	std	Z+1, r15	; 0x01
    2264:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2266:	61 2c       	mov	r6, r1
    2268:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    226a:	01 c0       	rjmp	.+2      	; 0x226e <__stack+0x6f>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    226c:	3c 01       	movw	r6, r24
    226e:	98 01       	movw	r18, r16
    2270:	a3 01       	movw	r20, r6
    2272:	b2 01       	movw	r22, r4
    2274:	c5 01       	movw	r24, r10
    2276:	e8 dd       	rcall	.-1072   	; 0x1e48 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2278:	7c 01       	movw	r14, r24
    227a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    227c:	b1 f0       	breq	.+44     	; 0x22aa <__stack+0xab>
    227e:	24 d2       	rcall	.+1096   	; 0x26c8 <vTaskSuspendAll>
    2280:	f5 01       	movw	r30, r10
    2282:	82 85       	ldd	r24, Z+10	; 0x0a
    2284:	93 85       	ldd	r25, Z+11	; 0x0b
    2286:	89 2b       	or	r24, r25
    2288:	61 f0       	breq	.+24     	; 0x22a2 <__stack+0xa3>
    228a:	82 85       	ldd	r24, Z+10	; 0x0a
    228c:	93 85       	ldd	r25, Z+11	; 0x0b
    228e:	00 e0       	ldi	r16, 0x00	; 0
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	ba 01       	movw	r22, r20
    229a:	69 d6       	rcall	.+3282   	; 0x2f6e <xTaskGenericNotify>
    229c:	f5 01       	movw	r30, r10
    229e:	13 86       	std	Z+11, r1	; 0x0b
    22a0:	12 86       	std	Z+10, r1	; 0x0a
    22a2:	fb d2       	rcall	.+1526   	; 0x289a <xTaskResumeAll>
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <__stack+0xab>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    22a6:	e1 2c       	mov	r14, r1
    22a8:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    22aa:	c7 01       	movw	r24, r14
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	ef 90       	pop	r14
    22bc:	df 90       	pop	r13
    22be:	cf 90       	pop	r12
    22c0:	bf 90       	pop	r11
    22c2:	af 90       	pop	r10
    22c4:	9f 90       	pop	r9
    22c6:	8f 90       	pop	r8
    22c8:	7f 90       	pop	r7
    22ca:	6f 90       	pop	r6
    22cc:	5f 90       	pop	r5
    22ce:	4f 90       	pop	r4
    22d0:	08 95       	ret

000022d2 <prvResetNextTaskUnblockTime>:
    22d2:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    22d6:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    22da:	80 81       	ld	r24, Z
    22dc:	81 11       	cpse	r24, r1
    22de:	0c c0       	rjmp	.+24     	; 0x22f8 <prvResetNextTaskUnblockTime+0x26>
    22e0:	8f ef       	ldi	r24, 0xFF	; 255
    22e2:	9f ef       	ldi	r25, 0xFF	; 255
    22e4:	dc 01       	movw	r26, r24
    22e6:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    22ea:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    22ee:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    22f2:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    22f6:	08 95       	ret
    22f8:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    22fc:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    2300:	07 80       	ldd	r0, Z+7	; 0x07
    2302:	f0 85       	ldd	r31, Z+8	; 0x08
    2304:	e0 2d       	mov	r30, r0
    2306:	00 84       	ldd	r0, Z+8	; 0x08
    2308:	f1 85       	ldd	r31, Z+9	; 0x09
    230a:	e0 2d       	mov	r30, r0
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	a4 81       	ldd	r26, Z+4	; 0x04
    2312:	b5 81       	ldd	r27, Z+5	; 0x05
    2314:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    2318:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    231c:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    2320:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    2324:	08 95       	ret

00002326 <prvAddCurrentTaskToDelayedList>:
    2326:	8f 92       	push	r8
    2328:	9f 92       	push	r9
    232a:	af 92       	push	r10
    232c:	bf 92       	push	r11
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	cf 93       	push	r28
    2338:	6b 01       	movw	r12, r22
    233a:	7c 01       	movw	r14, r24
    233c:	c4 2f       	mov	r28, r20
    233e:	80 90 c9 17 	lds	r8, 0x17C9	; 0x8017c9 <xTickCount>
    2342:	90 90 ca 17 	lds	r9, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2346:	a0 90 cb 17 	lds	r10, 0x17CB	; 0x8017cb <xTickCount+0x2>
    234a:	b0 90 cc 17 	lds	r11, 0x17CC	; 0x8017cc <xTickCount+0x3>
    234e:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    2352:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2356:	02 96       	adiw	r24, 0x02	; 2
    2358:	56 d8       	rcall	.-3924   	; 0x1406 <uxListRemove>
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	c8 16       	cp	r12, r24
    235e:	d8 06       	cpc	r13, r24
    2360:	e8 06       	cpc	r14, r24
    2362:	f8 06       	cpc	r15, r24
    2364:	69 f4       	brne	.+26     	; 0x2380 <prvAddCurrentTaskToDelayedList+0x5a>
    2366:	cc 23       	and	r28, r28
    2368:	59 f0       	breq	.+22     	; 0x2380 <prvAddCurrentTaskToDelayedList+0x5a>
    236a:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    236e:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2372:	6e 5f       	subi	r22, 0xFE	; 254
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	8e ec       	ldi	r24, 0xCE	; 206
    2378:	97 e1       	ldi	r25, 0x17	; 23
    237a:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    237e:	3f c0       	rjmp	.+126    	; 0x23fe <prvAddCurrentTaskToDelayedList+0xd8>
    2380:	c8 0c       	add	r12, r8
    2382:	d9 1c       	adc	r13, r9
    2384:	ea 1c       	adc	r14, r10
    2386:	fb 1c       	adc	r15, r11
    2388:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    238c:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2390:	c2 82       	std	Z+2, r12	; 0x02
    2392:	d3 82       	std	Z+3, r13	; 0x03
    2394:	e4 82       	std	Z+4, r14	; 0x04
    2396:	f5 82       	std	Z+5, r15	; 0x05
    2398:	c8 14       	cp	r12, r8
    239a:	d9 04       	cpc	r13, r9
    239c:	ea 04       	cpc	r14, r10
    239e:	fb 04       	cpc	r15, r11
    23a0:	68 f4       	brcc	.+26     	; 0x23bc <prvAddCurrentTaskToDelayedList+0x96>
    23a2:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    23a6:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    23aa:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <pxOverflowDelayedTaskList>
    23ae:	90 91 f1 17 	lds	r25, 0x17F1	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    23b2:	6e 5f       	subi	r22, 0xFE	; 254
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	0e 94 c6 09 	call	0x138c	; 0x138c <vListInsert>
    23ba:	21 c0       	rjmp	.+66     	; 0x23fe <prvAddCurrentTaskToDelayedList+0xd8>
    23bc:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    23c0:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    23c4:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    23c8:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    23cc:	6e 5f       	subi	r22, 0xFE	; 254
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	0e 94 c6 09 	call	0x138c	; 0x138c <vListInsert>
    23d4:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xNextTaskUnblockTime>
    23d8:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    23dc:	a0 91 c1 17 	lds	r26, 0x17C1	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    23e0:	b0 91 c2 17 	lds	r27, 0x17C2	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    23e4:	c8 16       	cp	r12, r24
    23e6:	d9 06       	cpc	r13, r25
    23e8:	ea 06       	cpc	r14, r26
    23ea:	fb 06       	cpc	r15, r27
    23ec:	40 f4       	brcc	.+16     	; 0x23fe <prvAddCurrentTaskToDelayedList+0xd8>
    23ee:	c0 92 bf 17 	sts	0x17BF, r12	; 0x8017bf <xNextTaskUnblockTime>
    23f2:	d0 92 c0 17 	sts	0x17C0, r13	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    23f6:	e0 92 c1 17 	sts	0x17C1, r14	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    23fa:	f0 92 c2 17 	sts	0x17C2, r15	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    23fe:	cf 91       	pop	r28
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
    2408:	bf 90       	pop	r11
    240a:	af 90       	pop	r10
    240c:	9f 90       	pop	r9
    240e:	8f 90       	pop	r8
    2410:	08 95       	ret

00002412 <xTaskCreate>:
    2412:	4f 92       	push	r4
    2414:	5f 92       	push	r5
    2416:	6f 92       	push	r6
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	4c 01       	movw	r8, r24
    2432:	6b 01       	movw	r12, r22
    2434:	5a 01       	movw	r10, r20
    2436:	29 01       	movw	r4, r18
    2438:	ca 01       	movw	r24, r20
    243a:	0e 94 a6 08 	call	0x114c	; 0x114c <pvPortMalloc>
    243e:	3c 01       	movw	r6, r24
    2440:	89 2b       	or	r24, r25
    2442:	09 f4       	brne	.+2      	; 0x2446 <xTaskCreate+0x34>
    2444:	f4 c0       	rjmp	.+488    	; 0x262e <xTaskCreate+0x21c>
    2446:	80 e3       	ldi	r24, 0x30	; 48
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 a6 08 	call	0x114c	; 0x114c <pvPortMalloc>
    244e:	ec 01       	movw	r28, r24
    2450:	89 2b       	or	r24, r25
    2452:	99 f0       	breq	.+38     	; 0x247a <xTaskCreate+0x68>
    2454:	7c 8e       	std	Y+28, r7	; 0x1c
    2456:	6b 8e       	std	Y+27, r6	; 0x1b
    2458:	a5 01       	movw	r20, r10
    245a:	65 ea       	ldi	r22, 0xA5	; 165
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	c3 01       	movw	r24, r6
    2460:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <memset>
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	a2 1a       	sub	r10, r18
    2468:	b1 08       	sbc	r11, r1
    246a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246e:	a8 0e       	add	r10, r24
    2470:	b9 1e       	adc	r11, r25
    2472:	c1 14       	cp	r12, r1
    2474:	d1 04       	cpc	r13, r1
    2476:	29 f4       	brne	.+10     	; 0x2482 <xTaskCreate+0x70>
    2478:	20 c0       	rjmp	.+64     	; 0x24ba <xTaskCreate+0xa8>
    247a:	c3 01       	movw	r24, r6
    247c:	0e 94 5f 09 	call	0x12be	; 0x12be <vPortFree>
    2480:	d6 c0       	rjmp	.+428    	; 0x262e <xTaskCreate+0x21c>
    2482:	d6 01       	movw	r26, r12
    2484:	8c 91       	ld	r24, X
    2486:	8d 8f       	std	Y+29, r24	; 0x1d
    2488:	8c 91       	ld	r24, X
    248a:	88 23       	and	r24, r24
    248c:	a1 f0       	breq	.+40     	; 0x24b6 <xTaskCreate+0xa4>
    248e:	ae 01       	movw	r20, r28
    2490:	42 5e       	subi	r20, 0xE2	; 226
    2492:	5f 4f       	sbci	r21, 0xFF	; 255
    2494:	f6 01       	movw	r30, r12
    2496:	31 96       	adiw	r30, 0x01	; 1
    2498:	b8 e0       	ldi	r27, 0x08	; 8
    249a:	cb 0e       	add	r12, r27
    249c:	d1 1c       	adc	r13, r1
    249e:	cf 01       	movw	r24, r30
    24a0:	21 91       	ld	r18, Z+
    24a2:	da 01       	movw	r26, r20
    24a4:	2d 93       	st	X+, r18
    24a6:	ad 01       	movw	r20, r26
    24a8:	dc 01       	movw	r26, r24
    24aa:	8c 91       	ld	r24, X
    24ac:	88 23       	and	r24, r24
    24ae:	19 f0       	breq	.+6      	; 0x24b6 <xTaskCreate+0xa4>
    24b0:	ec 15       	cp	r30, r12
    24b2:	fd 05       	cpc	r31, r13
    24b4:	a1 f7       	brne	.-24     	; 0x249e <xTaskCreate+0x8c>
    24b6:	1c a2       	std	Y+36, r1	; 0x24
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <xTaskCreate+0xaa>
    24ba:	1d 8e       	std	Y+29, r1	; 0x1d
    24bc:	04 30       	cpi	r16, 0x04	; 4
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <xTaskCreate+0xb0>
    24c0:	03 e0       	ldi	r16, 0x03	; 3
    24c2:	0a 8f       	std	Y+26, r16	; 0x1a
    24c4:	0f a3       	std	Y+39, r16	; 0x27
    24c6:	18 a6       	std	Y+40, r1	; 0x28
    24c8:	6e 01       	movw	r12, r28
    24ca:	b2 e0       	ldi	r27, 0x02	; 2
    24cc:	cb 0e       	add	r12, r27
    24ce:	d1 1c       	adc	r13, r1
    24d0:	c6 01       	movw	r24, r12
    24d2:	0e 94 a1 09 	call	0x1342	; 0x1342 <vListInitialiseItem>
    24d6:	ce 01       	movw	r24, r28
    24d8:	0e 96       	adiw	r24, 0x0e	; 14
    24da:	0e 94 a1 09 	call	0x1342	; 0x1342 <vListInitialiseItem>
    24de:	db 87       	std	Y+11, r29	; 0x0b
    24e0:	ca 87       	std	Y+10, r28	; 0x0a
    24e2:	84 e0       	ldi	r24, 0x04	; 4
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e0       	ldi	r26, 0x00	; 0
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	80 1b       	sub	r24, r16
    24ec:	91 09       	sbc	r25, r1
    24ee:	a1 09       	sbc	r26, r1
    24f0:	b1 09       	sbc	r27, r1
    24f2:	8e 87       	std	Y+14, r24	; 0x0e
    24f4:	9f 87       	std	Y+15, r25	; 0x0f
    24f6:	a8 8b       	std	Y+16, r26	; 0x10
    24f8:	b9 8b       	std	Y+17, r27	; 0x11
    24fa:	df 8b       	std	Y+23, r29	; 0x17
    24fc:	ce 8b       	std	Y+22, r28	; 0x16
    24fe:	1a a6       	std	Y+42, r1	; 0x2a
    2500:	19 a6       	std	Y+41, r1	; 0x29
    2502:	1b a6       	std	Y+43, r1	; 0x2b
    2504:	1c a6       	std	Y+44, r1	; 0x2c
    2506:	1d a6       	std	Y+45, r1	; 0x2d
    2508:	1e a6       	std	Y+46, r1	; 0x2e
    250a:	1f a6       	std	Y+47, r1	; 0x2f
    250c:	a2 01       	movw	r20, r4
    250e:	b4 01       	movw	r22, r8
    2510:	c5 01       	movw	r24, r10
    2512:	0e 94 2a 0a 	call	0x1454	; 0x1454 <pxPortInitialiseStack>
    2516:	99 83       	std	Y+1, r25	; 0x01
    2518:	88 83       	st	Y, r24
    251a:	e1 14       	cp	r14, r1
    251c:	f1 04       	cpc	r15, r1
    251e:	19 f0       	breq	.+6      	; 0x2526 <xTaskCreate+0x114>
    2520:	f7 01       	movw	r30, r14
    2522:	d1 83       	std	Z+1, r29	; 0x01
    2524:	c0 83       	st	Z, r28
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	0f 92       	push	r0
    252c:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
    2530:	8f 5f       	subi	r24, 0xFF	; 255
    2532:	80 93 cd 17 	sts	0x17CD, r24	; 0x8017cd <uxCurrentNumberOfTasks>
    2536:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    253a:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    253e:	89 2b       	or	r24, r25
    2540:	d1 f5       	brne	.+116    	; 0x25b6 <xTaskCreate+0x1a4>
    2542:	d0 93 37 18 	sts	0x1837, r29	; 0x801837 <pxCurrentTCB+0x1>
    2546:	c0 93 36 18 	sts	0x1836, r28	; 0x801836 <pxCurrentTCB>
    254a:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	09 f0       	breq	.+2      	; 0x2554 <xTaskCreate+0x142>
    2552:	41 c0       	rjmp	.+130    	; 0x25d6 <xTaskCreate+0x1c4>
    2554:	8a e0       	ldi	r24, 0x0A	; 10
    2556:	98 e1       	ldi	r25, 0x18	; 24
    2558:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    255c:	85 e1       	ldi	r24, 0x15	; 21
    255e:	98 e1       	ldi	r25, 0x18	; 24
    2560:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    2564:	80 e2       	ldi	r24, 0x20	; 32
    2566:	98 e1       	ldi	r25, 0x18	; 24
    2568:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    256c:	8b e2       	ldi	r24, 0x2B	; 43
    256e:	98 e1       	ldi	r25, 0x18	; 24
    2570:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    2574:	8f ef       	ldi	r24, 0xFF	; 255
    2576:	97 e1       	ldi	r25, 0x17	; 23
    2578:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    257c:	84 ef       	ldi	r24, 0xF4	; 244
    257e:	97 e1       	ldi	r25, 0x17	; 23
    2580:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    2584:	85 ee       	ldi	r24, 0xE5	; 229
    2586:	97 e1       	ldi	r25, 0x17	; 23
    2588:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    258c:	8a ed       	ldi	r24, 0xDA	; 218
    258e:	97 e1       	ldi	r25, 0x17	; 23
    2590:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    2594:	8e ec       	ldi	r24, 0xCE	; 206
    2596:	97 e1       	ldi	r25, 0x17	; 23
    2598:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	97 e1       	ldi	r25, 0x17	; 23
    25a0:	90 93 f3 17 	sts	0x17F3, r25	; 0x8017f3 <pxDelayedTaskList+0x1>
    25a4:	80 93 f2 17 	sts	0x17F2, r24	; 0x8017f2 <pxDelayedTaskList>
    25a8:	84 ef       	ldi	r24, 0xF4	; 244
    25aa:	97 e1       	ldi	r25, 0x17	; 23
    25ac:	90 93 f1 17 	sts	0x17F1, r25	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    25b0:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <pxOverflowDelayedTaskList>
    25b4:	10 c0       	rjmp	.+32     	; 0x25d6 <xTaskCreate+0x1c4>
    25b6:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xSchedulerRunning>
    25ba:	81 11       	cpse	r24, r1
    25bc:	0c c0       	rjmp	.+24     	; 0x25d6 <xTaskCreate+0x1c4>
    25be:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    25c2:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    25c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    25c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25ca:	89 17       	cp	r24, r25
    25cc:	20 f0       	brcs	.+8      	; 0x25d6 <xTaskCreate+0x1c4>
    25ce:	d0 93 37 18 	sts	0x1837, r29	; 0x801837 <pxCurrentTCB+0x1>
    25d2:	c0 93 36 18 	sts	0x1836, r28	; 0x801836 <pxCurrentTCB>
    25d6:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <uxTaskNumber>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 c3 17 	sts	0x17C3, r24	; 0x8017c3 <uxTaskNumber>
    25e0:	8d a3       	std	Y+37, r24	; 0x25
    25e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25e4:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    25e8:	98 17       	cp	r25, r24
    25ea:	10 f4       	brcc	.+4      	; 0x25f0 <xTaskCreate+0x1de>
    25ec:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    25f0:	fb e0       	ldi	r31, 0x0B	; 11
    25f2:	8f 9f       	mul	r24, r31
    25f4:	c0 01       	movw	r24, r0
    25f6:	11 24       	eor	r1, r1
    25f8:	b6 01       	movw	r22, r12
    25fa:	86 5f       	subi	r24, 0xF6	; 246
    25fc:	97 4e       	sbci	r25, 0xE7	; 231
    25fe:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2602:	0f 90       	pop	r0
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xSchedulerRunning>
    260a:	88 23       	and	r24, r24
    260c:	61 f0       	breq	.+24     	; 0x2626 <xTaskCreate+0x214>
    260e:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2612:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2616:	92 8d       	ldd	r25, Z+26	; 0x1a
    2618:	8a 8d       	ldd	r24, Y+26	; 0x1a
    261a:	98 17       	cp	r25, r24
    261c:	30 f4       	brcc	.+12     	; 0x262a <xTaskCreate+0x218>
    261e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	05 c0       	rjmp	.+10     	; 0x2630 <xTaskCreate+0x21e>
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <xTaskCreate+0x21e>
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <xTaskCreate+0x21e>
    262e:	8f ef       	ldi	r24, 0xFF	; 255
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	bf 90       	pop	r11
    2640:	af 90       	pop	r10
    2642:	9f 90       	pop	r9
    2644:	8f 90       	pop	r8
    2646:	7f 90       	pop	r7
    2648:	6f 90       	pop	r6
    264a:	5f 90       	pop	r5
    264c:	4f 90       	pop	r4
    264e:	08 95       	ret

00002650 <vTaskStartScheduler>:
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	0f 2e       	mov	r0, r31
    2658:	fd eb       	ldi	r31, 0xBD	; 189
    265a:	ef 2e       	mov	r14, r31
    265c:	f7 e1       	ldi	r31, 0x17	; 23
    265e:	ff 2e       	mov	r15, r31
    2660:	f0 2d       	mov	r31, r0
    2662:	00 e0       	ldi	r16, 0x00	; 0
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 ec       	ldi	r20, 0xC0	; 192
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	60 e7       	ldi	r22, 0x70	; 112
    266e:	74 e0       	ldi	r23, 0x04	; 4
    2670:	8d ec       	ldi	r24, 0xCD	; 205
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	ce de       	rcall	.-612    	; 0x2412 <xTaskCreate>
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	19 f5       	brne	.+70     	; 0x26c0 <vTaskStartScheduler+0x70>
    267a:	00 d6       	rcall	.+3072   	; 0x327c <xTimerCreateTimerTask>
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	01 f5       	brne	.+64     	; 0x26c0 <vTaskStartScheduler+0x70>
    2680:	f8 94       	cli
    2682:	8f ef       	ldi	r24, 0xFF	; 255
    2684:	9f ef       	ldi	r25, 0xFF	; 255
    2686:	dc 01       	movw	r26, r24
    2688:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    268c:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    2690:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    2694:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	80 93 c7 17 	sts	0x17C7, r24	; 0x8017c7 <xSchedulerRunning>
    269e:	10 92 c9 17 	sts	0x17C9, r1	; 0x8017c9 <xTickCount>
    26a2:	10 92 ca 17 	sts	0x17CA, r1	; 0x8017ca <xTickCount+0x1>
    26a6:	10 92 cb 17 	sts	0x17CB, r1	; 0x8017cb <xTickCount+0x2>
    26aa:	10 92 cc 17 	sts	0x17CC, r1	; 0x8017cc <xTickCount+0x3>
    26ae:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    26b2:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    26b6:	81 a5       	ldd	r24, Z+41	; 0x29
    26b8:	0e 94 dd 06 	call	0xdba	; 0xdba <task_switch_in>
    26bc:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xPortStartScheduler>
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	08 95       	ret

000026c8 <vTaskSuspendAll>:
    26c8:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	80 93 bc 17 	sts	0x17BC, r24	; 0x8017bc <uxSchedulerSuspended>
    26d2:	08 95       	ret

000026d4 <xTaskGetTickCount>:
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	0f 92       	push	r0
    26da:	60 91 c9 17 	lds	r22, 0x17C9	; 0x8017c9 <xTickCount>
    26de:	70 91 ca 17 	lds	r23, 0x17CA	; 0x8017ca <xTickCount+0x1>
    26e2:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <xTickCount+0x2>
    26e6:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <xTickCount+0x3>
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	08 95       	ret

000026f0 <xTaskIncrementTick>:
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    270a:	81 11       	cpse	r24, r1
    270c:	ad c0       	rjmp	.+346    	; 0x2868 <xTaskIncrementTick+0x178>
    270e:	c0 90 c9 17 	lds	r12, 0x17C9	; 0x8017c9 <xTickCount>
    2712:	d0 90 ca 17 	lds	r13, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2716:	e0 90 cb 17 	lds	r14, 0x17CB	; 0x8017cb <xTickCount+0x2>
    271a:	f0 90 cc 17 	lds	r15, 0x17CC	; 0x8017cc <xTickCount+0x3>
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	c8 1a       	sub	r12, r24
    2722:	d8 0a       	sbc	r13, r24
    2724:	e8 0a       	sbc	r14, r24
    2726:	f8 0a       	sbc	r15, r24
    2728:	c0 92 c9 17 	sts	0x17C9, r12	; 0x8017c9 <xTickCount>
    272c:	d0 92 ca 17 	sts	0x17CA, r13	; 0x8017ca <xTickCount+0x1>
    2730:	e0 92 cb 17 	sts	0x17CB, r14	; 0x8017cb <xTickCount+0x2>
    2734:	f0 92 cc 17 	sts	0x17CC, r15	; 0x8017cc <xTickCount+0x3>
    2738:	c1 14       	cp	r12, r1
    273a:	d1 04       	cpc	r13, r1
    273c:	e1 04       	cpc	r14, r1
    273e:	f1 04       	cpc	r15, r1
    2740:	b1 f4       	brne	.+44     	; 0x276e <xTaskIncrementTick+0x7e>
    2742:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    2746:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    274a:	20 91 f0 17 	lds	r18, 0x17F0	; 0x8017f0 <pxOverflowDelayedTaskList>
    274e:	30 91 f1 17 	lds	r19, 0x17F1	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    2752:	30 93 f3 17 	sts	0x17F3, r19	; 0x8017f3 <pxDelayedTaskList+0x1>
    2756:	20 93 f2 17 	sts	0x17F2, r18	; 0x8017f2 <pxDelayedTaskList>
    275a:	90 93 f1 17 	sts	0x17F1, r25	; 0x8017f1 <pxOverflowDelayedTaskList+0x1>
    275e:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <pxOverflowDelayedTaskList>
    2762:	80 91 c4 17 	lds	r24, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <xNumOfOverflows>
    276c:	b2 dd       	rcall	.-1180   	; 0x22d2 <prvResetNextTaskUnblockTime>
    276e:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xNextTaskUnblockTime>
    2772:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    2776:	a0 91 c1 17 	lds	r26, 0x17C1	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    277a:	b0 91 c2 17 	lds	r27, 0x17C2	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    277e:	c8 16       	cp	r12, r24
    2780:	d9 06       	cpc	r13, r25
    2782:	ea 06       	cpc	r14, r26
    2784:	fb 06       	cpc	r15, r27
    2786:	10 f4       	brcc	.+4      	; 0x278c <xTaskIncrementTick+0x9c>
    2788:	b1 2c       	mov	r11, r1
    278a:	5d c0       	rjmp	.+186    	; 0x2846 <xTaskIncrementTick+0x156>
    278c:	b1 2c       	mov	r11, r1
    278e:	0f 2e       	mov	r0, r31
    2790:	fb e0       	ldi	r31, 0x0B	; 11
    2792:	af 2e       	mov	r10, r31
    2794:	f0 2d       	mov	r31, r0
    2796:	99 24       	eor	r9, r9
    2798:	93 94       	inc	r9
    279a:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    279e:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    27a2:	80 81       	ld	r24, Z
    27a4:	81 11       	cpse	r24, r1
    27a6:	0c c0       	rjmp	.+24     	; 0x27c0 <xTaskIncrementTick+0xd0>
    27a8:	8f ef       	ldi	r24, 0xFF	; 255
    27aa:	9f ef       	ldi	r25, 0xFF	; 255
    27ac:	dc 01       	movw	r26, r24
    27ae:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    27b2:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    27b6:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    27ba:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    27be:	43 c0       	rjmp	.+134    	; 0x2846 <xTaskIncrementTick+0x156>
    27c0:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <pxDelayedTaskList>
    27c4:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <pxDelayedTaskList+0x1>
    27c8:	07 80       	ldd	r0, Z+7	; 0x07
    27ca:	f0 85       	ldd	r31, Z+8	; 0x08
    27cc:	e0 2d       	mov	r30, r0
    27ce:	c0 85       	ldd	r28, Z+8	; 0x08
    27d0:	d1 85       	ldd	r29, Z+9	; 0x09
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	ac 81       	ldd	r26, Y+4	; 0x04
    27d8:	bd 81       	ldd	r27, Y+5	; 0x05
    27da:	c8 16       	cp	r12, r24
    27dc:	d9 06       	cpc	r13, r25
    27de:	ea 06       	cpc	r14, r26
    27e0:	fb 06       	cpc	r15, r27
    27e2:	48 f4       	brcc	.+18     	; 0x27f6 <xTaskIncrementTick+0x106>
    27e4:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xNextTaskUnblockTime>
    27e8:	90 93 c0 17 	sts	0x17C0, r25	; 0x8017c0 <xNextTaskUnblockTime+0x1>
    27ec:	a0 93 c1 17 	sts	0x17C1, r26	; 0x8017c1 <xNextTaskUnblockTime+0x2>
    27f0:	b0 93 c2 17 	sts	0x17C2, r27	; 0x8017c2 <xNextTaskUnblockTime+0x3>
    27f4:	28 c0       	rjmp	.+80     	; 0x2846 <xTaskIncrementTick+0x156>
    27f6:	8e 01       	movw	r16, r28
    27f8:	0e 5f       	subi	r16, 0xFE	; 254
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	c8 01       	movw	r24, r16
    27fe:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2802:	88 8d       	ldd	r24, Y+24	; 0x18
    2804:	99 8d       	ldd	r25, Y+25	; 0x19
    2806:	89 2b       	or	r24, r25
    2808:	21 f0       	breq	.+8      	; 0x2812 <xTaskIncrementTick+0x122>
    280a:	ce 01       	movw	r24, r28
    280c:	0e 96       	adiw	r24, 0x0e	; 14
    280e:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2812:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2814:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2818:	98 17       	cp	r25, r24
    281a:	10 f4       	brcc	.+4      	; 0x2820 <xTaskIncrementTick+0x130>
    281c:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2820:	a8 9e       	mul	r10, r24
    2822:	c0 01       	movw	r24, r0
    2824:	11 24       	eor	r1, r1
    2826:	b8 01       	movw	r22, r16
    2828:	86 5f       	subi	r24, 0xF6	; 246
    282a:	97 4e       	sbci	r25, 0xE7	; 231
    282c:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2830:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2834:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2838:	9a 8d       	ldd	r25, Y+26	; 0x1a
    283a:	82 8d       	ldd	r24, Z+26	; 0x1a
    283c:	98 17       	cp	r25, r24
    283e:	08 f4       	brcc	.+2      	; 0x2842 <xTaskIncrementTick+0x152>
    2840:	ac cf       	rjmp	.-168    	; 0x279a <xTaskIncrementTick+0xaa>
    2842:	b9 2c       	mov	r11, r9
    2844:	aa cf       	rjmp	.-172    	; 0x279a <xTaskIncrementTick+0xaa>
    2846:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    284a:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    284e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2850:	8b e0       	ldi	r24, 0x0B	; 11
    2852:	e8 9f       	mul	r30, r24
    2854:	f0 01       	movw	r30, r0
    2856:	11 24       	eor	r1, r1
    2858:	e6 5f       	subi	r30, 0xF6	; 246
    285a:	f7 4e       	sbci	r31, 0xE7	; 231
    285c:	80 81       	ld	r24, Z
    285e:	82 30       	cpi	r24, 0x02	; 2
    2860:	48 f0       	brcs	.+18     	; 0x2874 <xTaskIncrementTick+0x184>
    2862:	bb 24       	eor	r11, r11
    2864:	b3 94       	inc	r11
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <xTaskIncrementTick+0x184>
    2868:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <uxPendedTicks>
    286c:	8f 5f       	subi	r24, 0xFF	; 255
    286e:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <uxPendedTicks>
    2872:	b1 2c       	mov	r11, r1
    2874:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <xYieldPending>
    2878:	88 23       	and	r24, r24
    287a:	11 f0       	breq	.+4      	; 0x2880 <xTaskIncrementTick+0x190>
    287c:	bb 24       	eor	r11, r11
    287e:	b3 94       	inc	r11
    2880:	8b 2d       	mov	r24, r11
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	ff 90       	pop	r15
    288c:	ef 90       	pop	r14
    288e:	df 90       	pop	r13
    2890:	cf 90       	pop	r12
    2892:	bf 90       	pop	r11
    2894:	af 90       	pop	r10
    2896:	9f 90       	pop	r9
    2898:	08 95       	ret

0000289a <xTaskResumeAll>:
    289a:	cf 92       	push	r12
    289c:	df 92       	push	r13
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	0f 92       	push	r0
    28b0:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    28b4:	81 50       	subi	r24, 0x01	; 1
    28b6:	80 93 bc 17 	sts	0x17BC, r24	; 0x8017bc <uxSchedulerSuspended>
    28ba:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    28be:	81 11       	cpse	r24, r1
    28c0:	5a c0       	rjmp	.+180    	; 0x2976 <xTaskResumeAll+0xdc>
    28c2:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <uxCurrentNumberOfTasks>
    28c6:	81 11       	cpse	r24, r1
    28c8:	2c c0       	rjmp	.+88     	; 0x2922 <xTaskResumeAll+0x88>
    28ca:	58 c0       	rjmp	.+176    	; 0x297c <xTaskResumeAll+0xe2>
    28cc:	d7 01       	movw	r26, r14
    28ce:	17 96       	adiw	r26, 0x07	; 7
    28d0:	ed 91       	ld	r30, X+
    28d2:	fc 91       	ld	r31, X
    28d4:	18 97       	sbiw	r26, 0x08	; 8
    28d6:	c0 85       	ldd	r28, Z+8	; 0x08
    28d8:	d1 85       	ldd	r29, Z+9	; 0x09
    28da:	ce 01       	movw	r24, r28
    28dc:	0e 96       	adiw	r24, 0x0e	; 14
    28de:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    28e2:	8e 01       	movw	r16, r28
    28e4:	0e 5f       	subi	r16, 0xFE	; 254
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	c8 01       	movw	r24, r16
    28ea:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    28ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28f0:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    28f4:	98 17       	cp	r25, r24
    28f6:	10 f4       	brcc	.+4      	; 0x28fc <xTaskResumeAll+0x62>
    28f8:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    28fc:	d8 9e       	mul	r13, r24
    28fe:	c0 01       	movw	r24, r0
    2900:	11 24       	eor	r1, r1
    2902:	b8 01       	movw	r22, r16
    2904:	86 5f       	subi	r24, 0xF6	; 246
    2906:	97 4e       	sbci	r25, 0xE7	; 231
    2908:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    290c:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2910:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2914:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2916:	82 8d       	ldd	r24, Z+26	; 0x1a
    2918:	98 17       	cp	r25, r24
    291a:	88 f0       	brcs	.+34     	; 0x293e <xTaskResumeAll+0xa4>
    291c:	c0 92 c5 17 	sts	0x17C5, r12	; 0x8017c5 <xYieldPending>
    2920:	0e c0       	rjmp	.+28     	; 0x293e <xTaskResumeAll+0xa4>
    2922:	c0 e0       	ldi	r28, 0x00	; 0
    2924:	d0 e0       	ldi	r29, 0x00	; 0
    2926:	0f 2e       	mov	r0, r31
    2928:	f5 ee       	ldi	r31, 0xE5	; 229
    292a:	ef 2e       	mov	r14, r31
    292c:	f7 e1       	ldi	r31, 0x17	; 23
    292e:	ff 2e       	mov	r15, r31
    2930:	f0 2d       	mov	r31, r0
    2932:	0f 2e       	mov	r0, r31
    2934:	fb e0       	ldi	r31, 0x0B	; 11
    2936:	df 2e       	mov	r13, r31
    2938:	f0 2d       	mov	r31, r0
    293a:	cc 24       	eor	r12, r12
    293c:	c3 94       	inc	r12
    293e:	f7 01       	movw	r30, r14
    2940:	80 81       	ld	r24, Z
    2942:	81 11       	cpse	r24, r1
    2944:	c3 cf       	rjmp	.-122    	; 0x28cc <xTaskResumeAll+0x32>
    2946:	cd 2b       	or	r28, r29
    2948:	09 f0       	breq	.+2      	; 0x294c <xTaskResumeAll+0xb2>
    294a:	c3 dc       	rcall	.-1658   	; 0x22d2 <prvResetNextTaskUnblockTime>
    294c:	c0 91 c6 17 	lds	r28, 0x17C6	; 0x8017c6 <uxPendedTicks>
    2950:	cc 23       	and	r28, r28
    2952:	49 f0       	breq	.+18     	; 0x2966 <xTaskResumeAll+0xcc>
    2954:	d1 e0       	ldi	r29, 0x01	; 1
    2956:	cc de       	rcall	.-616    	; 0x26f0 <xTaskIncrementTick>
    2958:	81 11       	cpse	r24, r1
    295a:	d0 93 c5 17 	sts	0x17C5, r29	; 0x8017c5 <xYieldPending>
    295e:	c1 50       	subi	r28, 0x01	; 1
    2960:	d1 f7       	brne	.-12     	; 0x2956 <xTaskResumeAll+0xbc>
    2962:	10 92 c6 17 	sts	0x17C6, r1	; 0x8017c6 <uxPendedTicks>
    2966:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <xYieldPending>
    296a:	88 23       	and	r24, r24
    296c:	31 f0       	breq	.+12     	; 0x297a <xTaskResumeAll+0xe0>
    296e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	03 c0       	rjmp	.+6      	; 0x297c <xTaskResumeAll+0xe2>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	01 c0       	rjmp	.+2      	; 0x297c <xTaskResumeAll+0xe2>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	ff 90       	pop	r15
    298a:	ef 90       	pop	r14
    298c:	df 90       	pop	r13
    298e:	cf 90       	pop	r12
    2990:	08 95       	ret

00002992 <vTaskDelay>:
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	6b 01       	movw	r12, r22
    299c:	7c 01       	movw	r14, r24
    299e:	67 2b       	or	r22, r23
    29a0:	68 2b       	or	r22, r24
    29a2:	69 2b       	or	r22, r25
    29a4:	41 f0       	breq	.+16     	; 0x29b6 <vTaskDelay+0x24>
    29a6:	90 de       	rcall	.-736    	; 0x26c8 <vTaskSuspendAll>
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	c7 01       	movw	r24, r14
    29ac:	b6 01       	movw	r22, r12
    29ae:	bb dc       	rcall	.-1674   	; 0x2326 <prvAddCurrentTaskToDelayedList>
    29b0:	74 df       	rcall	.-280    	; 0x289a <xTaskResumeAll>
    29b2:	81 11       	cpse	r24, r1
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <vTaskDelay+0x28>
    29b6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
    29ba:	ff 90       	pop	r15
    29bc:	ef 90       	pop	r14
    29be:	df 90       	pop	r13
    29c0:	cf 90       	pop	r12
    29c2:	08 95       	ret

000029c4 <vTaskSwitchContext>:
    29c4:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    29c8:	88 23       	and	r24, r24
    29ca:	21 f0       	breq	.+8      	; 0x29d4 <vTaskSwitchContext+0x10>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    29d2:	08 95       	ret
    29d4:	10 92 c5 17 	sts	0x17C5, r1	; 0x8017c5 <xYieldPending>
    29d8:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    29dc:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29e0:	81 a5       	ldd	r24, Z+41	; 0x29
    29e2:	0e 94 e7 06 	call	0xdce	; 0xdce <task_switch_out>
    29e6:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    29ea:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29ee:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    29f2:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    29f6:	2d 91       	ld	r18, X+
    29f8:	3c 91       	ld	r19, X
    29fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    29fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    29fe:	82 17       	cp	r24, r18
    2a00:	93 07       	cpc	r25, r19
    2a02:	58 f0       	brcs	.+22     	; 0x2a1a <vTaskSwitchContext+0x56>
    2a04:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2a08:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2a0c:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    2a10:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2a14:	63 5e       	subi	r22, 0xE3	; 227
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	53 d5       	rcall	.+2726   	; 0x34c0 <vApplicationStackOverflowHook>
    2a1a:	80 91 c8 17 	lds	r24, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	9b e0       	ldi	r25, 0x0B	; 11
    2a24:	89 9f       	mul	r24, r25
    2a26:	f0 01       	movw	r30, r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	e6 5f       	subi	r30, 0xF6	; 246
    2a2c:	f7 4e       	sbci	r31, 0xE7	; 231
    2a2e:	90 81       	ld	r25, Z
    2a30:	91 11       	cpse	r25, r1
    2a32:	0e c0       	rjmp	.+28     	; 0x2a50 <vTaskSwitchContext+0x8c>
    2a34:	4b e0       	ldi	r20, 0x0B	; 11
    2a36:	81 50       	subi	r24, 0x01	; 1
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	42 9f       	mul	r20, r18
    2a3e:	f0 01       	movw	r30, r0
    2a40:	43 9f       	mul	r20, r19
    2a42:	f0 0d       	add	r31, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	e6 5f       	subi	r30, 0xF6	; 246
    2a48:	f7 4e       	sbci	r31, 0xE7	; 231
    2a4a:	90 81       	ld	r25, Z
    2a4c:	99 23       	and	r25, r25
    2a4e:	99 f3       	breq	.-26     	; 0x2a36 <vTaskSwitchContext+0x72>
    2a50:	9b e0       	ldi	r25, 0x0B	; 11
    2a52:	92 9f       	mul	r25, r18
    2a54:	a0 01       	movw	r20, r0
    2a56:	93 9f       	mul	r25, r19
    2a58:	50 0d       	add	r21, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	da 01       	movw	r26, r20
    2a5e:	a6 5f       	subi	r26, 0xF6	; 246
    2a60:	b7 4e       	sbci	r27, 0xE7	; 231
    2a62:	11 96       	adiw	r26, 0x01	; 1
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	12 97       	sbiw	r26, 0x02	; 2
    2a6a:	04 80       	ldd	r0, Z+4	; 0x04
    2a6c:	f5 81       	ldd	r31, Z+5	; 0x05
    2a6e:	e0 2d       	mov	r30, r0
    2a70:	12 96       	adiw	r26, 0x02	; 2
    2a72:	fc 93       	st	X, r31
    2a74:	ee 93       	st	-X, r30
    2a76:	11 97       	sbiw	r26, 0x01	; 1
    2a78:	43 5f       	subi	r20, 0xF3	; 243
    2a7a:	57 4e       	sbci	r21, 0xE7	; 231
    2a7c:	e4 17       	cp	r30, r20
    2a7e:	f5 07       	cpc	r31, r21
    2a80:	29 f4       	brne	.+10     	; 0x2a8c <vTaskSwitchContext+0xc8>
    2a82:	44 81       	ldd	r20, Z+4	; 0x04
    2a84:	55 81       	ldd	r21, Z+5	; 0x05
    2a86:	fd 01       	movw	r30, r26
    2a88:	52 83       	std	Z+2, r21	; 0x02
    2a8a:	41 83       	std	Z+1, r20	; 0x01
    2a8c:	9b e0       	ldi	r25, 0x0B	; 11
    2a8e:	92 9f       	mul	r25, r18
    2a90:	f0 01       	movw	r30, r0
    2a92:	93 9f       	mul	r25, r19
    2a94:	f0 0d       	add	r31, r0
    2a96:	11 24       	eor	r1, r1
    2a98:	e6 5f       	subi	r30, 0xF6	; 246
    2a9a:	f7 4e       	sbci	r31, 0xE7	; 231
    2a9c:	01 80       	ldd	r0, Z+1	; 0x01
    2a9e:	f2 81       	ldd	r31, Z+2	; 0x02
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	20 85       	ldd	r18, Z+8	; 0x08
    2aa4:	31 85       	ldd	r19, Z+9	; 0x09
    2aa6:	30 93 37 18 	sts	0x1837, r19	; 0x801837 <pxCurrentTCB+0x1>
    2aaa:	20 93 36 18 	sts	0x1836, r18	; 0x801836 <pxCurrentTCB>
    2aae:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2ab2:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ab6:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2aba:	81 a5       	ldd	r24, Z+41	; 0x29
    2abc:	0c 94 dd 06 	jmp	0xdba	; 0xdba <task_switch_in>
    2ac0:	08 95       	ret

00002ac2 <vTaskPlaceOnEventList>:
    2ac2:	cf 92       	push	r12
    2ac4:	df 92       	push	r13
    2ac6:	ef 92       	push	r14
    2ac8:	ff 92       	push	r15
    2aca:	6a 01       	movw	r12, r20
    2acc:	7b 01       	movw	r14, r22
    2ace:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2ad2:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ad6:	62 5f       	subi	r22, 0xF2	; 242
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	0e 94 c6 09 	call	0x138c	; 0x138c <vListInsert>
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	c7 01       	movw	r24, r14
    2ae2:	b6 01       	movw	r22, r12
    2ae4:	20 dc       	rcall	.-1984   	; 0x2326 <prvAddCurrentTaskToDelayedList>
    2ae6:	ff 90       	pop	r15
    2ae8:	ef 90       	pop	r14
    2aea:	df 90       	pop	r13
    2aec:	cf 90       	pop	r12
    2aee:	08 95       	ret

00002af0 <vTaskPlaceOnUnorderedEventList>:
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	68 01       	movw	r12, r16
    2afe:	79 01       	movw	r14, r18
    2b00:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2b04:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2b08:	70 68       	ori	r23, 0x80	; 128
    2b0a:	46 87       	std	Z+14, r20	; 0x0e
    2b0c:	57 87       	std	Z+15, r21	; 0x0f
    2b0e:	60 8b       	std	Z+16, r22	; 0x10
    2b10:	71 8b       	std	Z+17, r23	; 0x11
    2b12:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2b16:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2b1a:	62 5f       	subi	r22, 0xF2	; 242
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2b22:	41 e0       	ldi	r20, 0x01	; 1
    2b24:	c7 01       	movw	r24, r14
    2b26:	b6 01       	movw	r22, r12
    2b28:	fe db       	rcall	.-2052   	; 0x2326 <prvAddCurrentTaskToDelayedList>
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
    2b36:	08 95       	ret

00002b38 <vTaskPlaceOnEventListRestricted>:
    2b38:	cf 92       	push	r12
    2b3a:	df 92       	push	r13
    2b3c:	ef 92       	push	r14
    2b3e:	ff 92       	push	r15
    2b40:	cf 93       	push	r28
    2b42:	6a 01       	movw	r12, r20
    2b44:	7b 01       	movw	r14, r22
    2b46:	c2 2f       	mov	r28, r18
    2b48:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <pxCurrentTCB>
    2b4c:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2b50:	62 5f       	subi	r22, 0xF2	; 242
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2b58:	cc 23       	and	r28, r28
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <vTaskPlaceOnEventListRestricted+0x2c>
    2b5c:	cc 24       	eor	r12, r12
    2b5e:	ca 94       	dec	r12
    2b60:	dc 2c       	mov	r13, r12
    2b62:	76 01       	movw	r14, r12
    2b64:	4c 2f       	mov	r20, r28
    2b66:	c7 01       	movw	r24, r14
    2b68:	b6 01       	movw	r22, r12
    2b6a:	dd db       	rcall	.-2118   	; 0x2326 <prvAddCurrentTaskToDelayedList>
    2b6c:	cf 91       	pop	r28
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    2b76:	08 95       	ret

00002b78 <xTaskRemoveFromEventList>:
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	dc 01       	movw	r26, r24
    2b82:	17 96       	adiw	r26, 0x07	; 7
    2b84:	ed 91       	ld	r30, X+
    2b86:	fc 91       	ld	r31, X
    2b88:	18 97       	sbiw	r26, 0x08	; 8
    2b8a:	c0 85       	ldd	r28, Z+8	; 0x08
    2b8c:	d1 85       	ldd	r29, Z+9	; 0x09
    2b8e:	8e 01       	movw	r16, r28
    2b90:	02 5f       	subi	r16, 0xF2	; 242
    2b92:	1f 4f       	sbci	r17, 0xFF	; 255
    2b94:	c8 01       	movw	r24, r16
    2b96:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2b9a:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	16 c0       	rjmp	.+44     	; 0x2bce <xTaskRemoveFromEventList+0x56>
    2ba2:	0c 50       	subi	r16, 0x0C	; 12
    2ba4:	11 09       	sbc	r17, r1
    2ba6:	c8 01       	movw	r24, r16
    2ba8:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <xTaskRemoveFromEventList+0x42>
    2bb6:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2bba:	bb e0       	ldi	r27, 0x0B	; 11
    2bbc:	8b 9f       	mul	r24, r27
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	b8 01       	movw	r22, r16
    2bc4:	86 5f       	subi	r24, 0xF6	; 246
    2bc6:	97 4e       	sbci	r25, 0xE7	; 231
    2bc8:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2bcc:	05 c0       	rjmp	.+10     	; 0x2bd8 <xTaskRemoveFromEventList+0x60>
    2bce:	b8 01       	movw	r22, r16
    2bd0:	85 ee       	ldi	r24, 0xE5	; 229
    2bd2:	97 e1       	ldi	r25, 0x17	; 23
    2bd4:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2bd8:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2bdc:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2be0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2be2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2be4:	89 17       	cp	r24, r25
    2be6:	20 f4       	brcc	.+8      	; 0x2bf0 <xTaskRemoveFromEventList+0x78>
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <xTaskRemoveFromEventList+0x7a>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	08 95       	ret

00002bfc <vTaskRemoveFromUnorderedEventList>:
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	70 68       	ori	r23, 0x80	; 128
    2c06:	fc 01       	movw	r30, r24
    2c08:	40 83       	st	Z, r20
    2c0a:	51 83       	std	Z+1, r21	; 0x01
    2c0c:	62 83       	std	Z+2, r22	; 0x02
    2c0e:	73 83       	std	Z+3, r23	; 0x03
    2c10:	c0 85       	ldd	r28, Z+8	; 0x08
    2c12:	d1 85       	ldd	r29, Z+9	; 0x09
    2c14:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2c18:	8e 01       	movw	r16, r28
    2c1a:	0e 5f       	subi	r16, 0xFE	; 254
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	c8 01       	movw	r24, r16
    2c20:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2c24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c26:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2c2a:	98 17       	cp	r25, r24
    2c2c:	10 f4       	brcc	.+4      	; 0x2c32 <vTaskRemoveFromUnorderedEventList+0x36>
    2c2e:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2c32:	fb e0       	ldi	r31, 0x0B	; 11
    2c34:	8f 9f       	mul	r24, r31
    2c36:	c0 01       	movw	r24, r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	b8 01       	movw	r22, r16
    2c3c:	86 5f       	subi	r24, 0xF6	; 246
    2c3e:	97 4e       	sbci	r25, 0xE7	; 231
    2c40:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2c44:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2c48:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2c4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c50:	89 17       	cp	r24, r25
    2c52:	18 f4       	brcc	.+6      	; 0x2c5a <vTaskRemoveFromUnorderedEventList+0x5e>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	08 95       	ret

00002c64 <vTaskSetTimeOutState>:
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	0f 92       	push	r0
    2c6a:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2c6e:	fc 01       	movw	r30, r24
    2c70:	20 83       	st	Z, r18
    2c72:	40 91 c9 17 	lds	r20, 0x17C9	; 0x8017c9 <xTickCount>
    2c76:	50 91 ca 17 	lds	r21, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2c7a:	60 91 cb 17 	lds	r22, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2c7e:	70 91 cc 17 	lds	r23, 0x17CC	; 0x8017cc <xTickCount+0x3>
    2c82:	41 83       	std	Z+1, r20	; 0x01
    2c84:	52 83       	std	Z+2, r21	; 0x02
    2c86:	63 83       	std	Z+3, r22	; 0x03
    2c88:	74 83       	std	Z+4, r23	; 0x04
    2c8a:	0f 90       	pop	r0
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	08 95       	ret

00002c90 <vTaskInternalSetTimeOutState>:
    2c90:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2c94:	fc 01       	movw	r30, r24
    2c96:	20 83       	st	Z, r18
    2c98:	40 91 c9 17 	lds	r20, 0x17C9	; 0x8017c9 <xTickCount>
    2c9c:	50 91 ca 17 	lds	r21, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2ca0:	60 91 cb 17 	lds	r22, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2ca4:	70 91 cc 17 	lds	r23, 0x17CC	; 0x8017cc <xTickCount+0x3>
    2ca8:	41 83       	std	Z+1, r20	; 0x01
    2caa:	52 83       	std	Z+2, r21	; 0x02
    2cac:	63 83       	std	Z+3, r22	; 0x03
    2cae:	74 83       	std	Z+4, r23	; 0x04
    2cb0:	08 95       	ret

00002cb2 <xTaskCheckForTimeOut>:
    2cb2:	cf 92       	push	r12
    2cb4:	df 92       	push	r13
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	fb 01       	movw	r30, r22
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	0f 92       	push	r0
    2cca:	40 91 c9 17 	lds	r20, 0x17C9	; 0x8017c9 <xTickCount>
    2cce:	50 91 ca 17 	lds	r21, 0x17CA	; 0x8017ca <xTickCount+0x1>
    2cd2:	60 91 cb 17 	lds	r22, 0x17CB	; 0x8017cb <xTickCount+0x2>
    2cd6:	70 91 cc 17 	lds	r23, 0x17CC	; 0x8017cc <xTickCount+0x3>
    2cda:	00 81       	ld	r16, Z
    2cdc:	11 81       	ldd	r17, Z+1	; 0x01
    2cde:	22 81       	ldd	r18, Z+2	; 0x02
    2ce0:	33 81       	ldd	r19, Z+3	; 0x03
    2ce2:	0f 3f       	cpi	r16, 0xFF	; 255
    2ce4:	af ef       	ldi	r26, 0xFF	; 255
    2ce6:	1a 07       	cpc	r17, r26
    2ce8:	2a 07       	cpc	r18, r26
    2cea:	3a 07       	cpc	r19, r26
    2cec:	49 f1       	breq	.+82     	; 0x2d40 <xTaskCheckForTimeOut+0x8e>
    2cee:	ec 01       	movw	r28, r24
    2cf0:	c9 80       	ldd	r12, Y+1	; 0x01
    2cf2:	da 80       	ldd	r13, Y+2	; 0x02
    2cf4:	eb 80       	ldd	r14, Y+3	; 0x03
    2cf6:	fc 80       	ldd	r15, Y+4	; 0x04
    2cf8:	a0 91 c4 17 	lds	r26, 0x17C4	; 0x8017c4 <xNumOfOverflows>
    2cfc:	b8 81       	ld	r27, Y
    2cfe:	ba 17       	cp	r27, r26
    2d00:	29 f0       	breq	.+10     	; 0x2d0c <xTaskCheckForTimeOut+0x5a>
    2d02:	4c 15       	cp	r20, r12
    2d04:	5d 05       	cpc	r21, r13
    2d06:	6e 05       	cpc	r22, r14
    2d08:	7f 05       	cpc	r23, r15
    2d0a:	e0 f4       	brcc	.+56     	; 0x2d44 <xTaskCheckForTimeOut+0x92>
    2d0c:	4c 19       	sub	r20, r12
    2d0e:	5d 09       	sbc	r21, r13
    2d10:	6e 09       	sbc	r22, r14
    2d12:	7f 09       	sbc	r23, r15
    2d14:	40 17       	cp	r20, r16
    2d16:	51 07       	cpc	r21, r17
    2d18:	62 07       	cpc	r22, r18
    2d1a:	73 07       	cpc	r23, r19
    2d1c:	58 f4       	brcc	.+22     	; 0x2d34 <xTaskCheckForTimeOut+0x82>
    2d1e:	04 1b       	sub	r16, r20
    2d20:	15 0b       	sbc	r17, r21
    2d22:	26 0b       	sbc	r18, r22
    2d24:	37 0b       	sbc	r19, r23
    2d26:	00 83       	st	Z, r16
    2d28:	11 83       	std	Z+1, r17	; 0x01
    2d2a:	22 83       	std	Z+2, r18	; 0x02
    2d2c:	33 83       	std	Z+3, r19	; 0x03
    2d2e:	b0 df       	rcall	.-160    	; 0x2c90 <vTaskInternalSetTimeOutState>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	09 c0       	rjmp	.+18     	; 0x2d46 <xTaskCheckForTimeOut+0x94>
    2d34:	10 82       	st	Z, r1
    2d36:	11 82       	std	Z+1, r1	; 0x01
    2d38:	12 82       	std	Z+2, r1	; 0x02
    2d3a:	13 82       	std	Z+3, r1	; 0x03
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <xTaskCheckForTimeOut+0x94>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	01 c0       	rjmp	.+2      	; 0x2d46 <xTaskCheckForTimeOut+0x94>
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	0f 90       	pop	r0
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	ff 90       	pop	r15
    2d54:	ef 90       	pop	r14
    2d56:	df 90       	pop	r13
    2d58:	cf 90       	pop	r12
    2d5a:	08 95       	ret

00002d5c <vTaskMissedYield>:
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    2d62:	08 95       	ret

00002d64 <xTaskGetCurrentTaskHandle>:
    2d64:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    2d68:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2d6c:	08 95       	ret

00002d6e <xTaskGetSchedulerState>:
    2d6e:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xSchedulerRunning>
    2d72:	88 23       	and	r24, r24
    2d74:	31 f0       	breq	.+12     	; 0x2d82 <xTaskGetSchedulerState+0x14>
    2d76:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    2d7a:	88 23       	and	r24, r24
    2d7c:	21 f0       	breq	.+8      	; 0x2d86 <xTaskGetSchedulerState+0x18>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	08 95       	ret
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	08 95       	ret
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	08 95       	ret

00002d8a <xTaskPriorityDisinherit>:
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	fc 01       	movw	r30, r24
    2d94:	89 2b       	or	r24, r25
    2d96:	79 f1       	breq	.+94     	; 0x2df6 <xTaskPriorityDisinherit+0x6c>
    2d98:	80 a5       	ldd	r24, Z+40	; 0x28
    2d9a:	81 50       	subi	r24, 0x01	; 1
    2d9c:	80 a7       	std	Z+40, r24	; 0x28
    2d9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2da0:	97 a1       	ldd	r25, Z+39	; 0x27
    2da2:	29 17       	cp	r18, r25
    2da4:	51 f1       	breq	.+84     	; 0x2dfa <xTaskPriorityDisinherit+0x70>
    2da6:	81 11       	cpse	r24, r1
    2da8:	2a c0       	rjmp	.+84     	; 0x2dfe <xTaskPriorityDisinherit+0x74>
    2daa:	ef 01       	movw	r28, r30
    2dac:	8f 01       	movw	r16, r30
    2dae:	0e 5f       	subi	r16, 0xFE	; 254
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	c8 01       	movw	r24, r16
    2db4:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    2db8:	8f a1       	ldd	r24, Y+39	; 0x27
    2dba:	8a 8f       	std	Y+26, r24	; 0x1a
    2dbc:	44 e0       	ldi	r20, 0x04	; 4
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	48 1b       	sub	r20, r24
    2dc6:	51 09       	sbc	r21, r1
    2dc8:	61 09       	sbc	r22, r1
    2dca:	71 09       	sbc	r23, r1
    2dcc:	4e 87       	std	Y+14, r20	; 0x0e
    2dce:	5f 87       	std	Y+15, r21	; 0x0f
    2dd0:	68 8b       	std	Y+16, r22	; 0x10
    2dd2:	79 8b       	std	Y+17, r23	; 0x11
    2dd4:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    2dd8:	98 17       	cp	r25, r24
    2dda:	10 f4       	brcc	.+4      	; 0x2de0 <xTaskPriorityDisinherit+0x56>
    2ddc:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    2de0:	2b e0       	ldi	r18, 0x0B	; 11
    2de2:	82 9f       	mul	r24, r18
    2de4:	c0 01       	movw	r24, r0
    2de6:	11 24       	eor	r1, r1
    2de8:	b8 01       	movw	r22, r16
    2dea:	86 5f       	subi	r24, 0xF6	; 246
    2dec:	97 4e       	sbci	r25, 0xE7	; 231
    2dee:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	05 c0       	rjmp	.+10     	; 0x2e00 <xTaskPriorityDisinherit+0x76>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	03 c0       	rjmp	.+6      	; 0x2e00 <xTaskPriorityDisinherit+0x76>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	01 c0       	rjmp	.+2      	; 0x2e00 <xTaskPriorityDisinherit+0x76>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	08 95       	ret

00002e0a <uxTaskResetEventItemValue>:
    2e0a:	cf 92       	push	r12
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e16:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e1a:	66 85       	ldd	r22, Z+14	; 0x0e
    2e1c:	77 85       	ldd	r23, Z+15	; 0x0f
    2e1e:	80 89       	ldd	r24, Z+16	; 0x10
    2e20:	91 89       	ldd	r25, Z+17	; 0x11
    2e22:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e26:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e2a:	a0 91 36 18 	lds	r26, 0x1836	; 0x801836 <pxCurrentTCB>
    2e2e:	b0 91 37 18 	lds	r27, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e32:	5a 96       	adiw	r26, 0x1a	; 26
    2e34:	2c 91       	ld	r18, X
    2e36:	c1 2c       	mov	r12, r1
    2e38:	d1 2c       	mov	r13, r1
    2e3a:	76 01       	movw	r14, r12
    2e3c:	68 94       	set
    2e3e:	c2 f8       	bld	r12, 2
    2e40:	c2 1a       	sub	r12, r18
    2e42:	d1 08       	sbc	r13, r1
    2e44:	e1 08       	sbc	r14, r1
    2e46:	f1 08       	sbc	r15, r1
    2e48:	c6 86       	std	Z+14, r12	; 0x0e
    2e4a:	d7 86       	std	Z+15, r13	; 0x0f
    2e4c:	e0 8a       	std	Z+16, r14	; 0x10
    2e4e:	f1 8a       	std	Z+17, r15	; 0x11
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	cf 90       	pop	r12
    2e58:	08 95       	ret

00002e5a <xTaskNotifyWait>:
    2e5a:	4f 92       	push	r4
    2e5c:	5f 92       	push	r5
    2e5e:	6f 92       	push	r6
    2e60:	7f 92       	push	r7
    2e62:	8f 92       	push	r8
    2e64:	9f 92       	push	r9
    2e66:	af 92       	push	r10
    2e68:	bf 92       	push	r11
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	49 01       	movw	r8, r18
    2e78:	5a 01       	movw	r10, r20
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	0f 92       	push	r0
    2e80:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e84:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e88:	27 a5       	ldd	r18, Z+47	; 0x2f
    2e8a:	22 30       	cpi	r18, 0x02	; 2
    2e8c:	39 f1       	breq	.+78     	; 0x2edc <xTaskNotifyWait+0x82>
    2e8e:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2e92:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2e96:	43 a4       	ldd	r4, Z+43	; 0x2b
    2e98:	54 a4       	ldd	r5, Z+44	; 0x2c
    2e9a:	65 a4       	ldd	r6, Z+45	; 0x2d
    2e9c:	76 a4       	ldd	r7, Z+46	; 0x2e
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	80 95       	com	r24
    2ea4:	90 95       	com	r25
    2ea6:	a0 95       	com	r26
    2ea8:	b0 95       	com	r27
    2eaa:	84 21       	and	r24, r4
    2eac:	95 21       	and	r25, r5
    2eae:	a6 21       	and	r26, r6
    2eb0:	b7 21       	and	r27, r7
    2eb2:	83 a7       	std	Z+43, r24	; 0x2b
    2eb4:	94 a7       	std	Z+44, r25	; 0x2c
    2eb6:	a5 a7       	std	Z+45, r26	; 0x2d
    2eb8:	b6 a7       	std	Z+46, r27	; 0x2e
    2eba:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ebe:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	87 a7       	std	Z+47, r24	; 0x2f
    2ec6:	c1 14       	cp	r12, r1
    2ec8:	d1 04       	cpc	r13, r1
    2eca:	e1 04       	cpc	r14, r1
    2ecc:	f1 04       	cpc	r15, r1
    2ece:	31 f0       	breq	.+12     	; 0x2edc <xTaskNotifyWait+0x82>
    2ed0:	41 e0       	ldi	r20, 0x01	; 1
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	b6 01       	movw	r22, r12
    2ed6:	27 da       	rcall	.-2994   	; 0x2326 <prvAddCurrentTaskToDelayedList>
    2ed8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	0f 92       	push	r0
    2ee6:	01 15       	cp	r16, r1
    2ee8:	11 05       	cpc	r17, r1
    2eea:	69 f0       	breq	.+26     	; 0x2f06 <xTaskNotifyWait+0xac>
    2eec:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2ef0:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2ef4:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ef6:	94 a5       	ldd	r25, Z+44	; 0x2c
    2ef8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2efa:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2efc:	f8 01       	movw	r30, r16
    2efe:	80 83       	st	Z, r24
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	a2 83       	std	Z+2, r26	; 0x02
    2f04:	b3 83       	std	Z+3, r27	; 0x03
    2f06:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2f0a:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2f0e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	b1 f4       	brne	.+44     	; 0x2f40 <xTaskNotifyWait+0xe6>
    2f14:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2f18:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2f1c:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f1e:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f20:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f22:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f24:	80 94       	com	r8
    2f26:	90 94       	com	r9
    2f28:	a0 94       	com	r10
    2f2a:	b0 94       	com	r11
    2f2c:	88 22       	and	r8, r24
    2f2e:	99 22       	and	r9, r25
    2f30:	aa 22       	and	r10, r26
    2f32:	bb 22       	and	r11, r27
    2f34:	83 a6       	std	Z+43, r8	; 0x2b
    2f36:	94 a6       	std	Z+44, r9	; 0x2c
    2f38:	a5 a6       	std	Z+45, r10	; 0x2d
    2f3a:	b6 a6       	std	Z+46, r11	; 0x2e
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	01 c0       	rjmp	.+2      	; 0x2f42 <xTaskNotifyWait+0xe8>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    2f46:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    2f4a:	17 a6       	std	Z+47, r1	; 0x2f
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	1f 91       	pop	r17
    2f52:	0f 91       	pop	r16
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	df 90       	pop	r13
    2f5a:	cf 90       	pop	r12
    2f5c:	bf 90       	pop	r11
    2f5e:	af 90       	pop	r10
    2f60:	9f 90       	pop	r9
    2f62:	8f 90       	pop	r8
    2f64:	7f 90       	pop	r7
    2f66:	6f 90       	pop	r6
    2f68:	5f 90       	pop	r5
    2f6a:	4f 90       	pop	r4
    2f6c:	08 95       	ret

00002f6e <xTaskGenericNotify>:
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	fc 01       	movw	r30, r24
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	0f 92       	push	r0
    2f7e:	01 15       	cp	r16, r1
    2f80:	11 05       	cpc	r17, r1
    2f82:	49 f0       	breq	.+18     	; 0x2f96 <xTaskGenericNotify+0x28>
    2f84:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f86:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f88:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f8a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f8c:	e8 01       	movw	r28, r16
    2f8e:	88 83       	st	Y, r24
    2f90:	99 83       	std	Y+1, r25	; 0x01
    2f92:	aa 83       	std	Y+2, r26	; 0x02
    2f94:	bb 83       	std	Y+3, r27	; 0x03
    2f96:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f98:	92 e0       	ldi	r25, 0x02	; 2
    2f9a:	97 a7       	std	Z+47, r25	; 0x2f
    2f9c:	22 30       	cpi	r18, 0x02	; 2
    2f9e:	b1 f0       	breq	.+44     	; 0x2fcc <xTaskGenericNotify+0x5e>
    2fa0:	18 f4       	brcc	.+6      	; 0x2fa8 <xTaskGenericNotify+0x3a>
    2fa2:	21 30       	cpi	r18, 0x01	; 1
    2fa4:	31 f0       	breq	.+12     	; 0x2fb2 <xTaskGenericNotify+0x44>
    2fa6:	2a c0       	rjmp	.+84     	; 0x2ffc <xTaskGenericNotify+0x8e>
    2fa8:	23 30       	cpi	r18, 0x03	; 3
    2faa:	e9 f0       	breq	.+58     	; 0x2fe6 <xTaskGenericNotify+0x78>
    2fac:	24 30       	cpi	r18, 0x04	; 4
    2fae:	01 f1       	breq	.+64     	; 0x2ff0 <xTaskGenericNotify+0x82>
    2fb0:	25 c0       	rjmp	.+74     	; 0x2ffc <xTaskGenericNotify+0x8e>
    2fb2:	03 a5       	ldd	r16, Z+43	; 0x2b
    2fb4:	14 a5       	ldd	r17, Z+44	; 0x2c
    2fb6:	25 a5       	ldd	r18, Z+45	; 0x2d
    2fb8:	36 a5       	ldd	r19, Z+46	; 0x2e
    2fba:	40 2b       	or	r20, r16
    2fbc:	51 2b       	or	r21, r17
    2fbe:	62 2b       	or	r22, r18
    2fc0:	73 2b       	or	r23, r19
    2fc2:	43 a7       	std	Z+43, r20	; 0x2b
    2fc4:	54 a7       	std	Z+44, r21	; 0x2c
    2fc6:	65 a7       	std	Z+45, r22	; 0x2d
    2fc8:	76 a7       	std	Z+46, r23	; 0x2e
    2fca:	18 c0       	rjmp	.+48     	; 0x2ffc <xTaskGenericNotify+0x8e>
    2fcc:	43 a5       	ldd	r20, Z+43	; 0x2b
    2fce:	54 a5       	ldd	r21, Z+44	; 0x2c
    2fd0:	65 a5       	ldd	r22, Z+45	; 0x2d
    2fd2:	76 a5       	ldd	r23, Z+46	; 0x2e
    2fd4:	4f 5f       	subi	r20, 0xFF	; 255
    2fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd8:	6f 4f       	sbci	r22, 0xFF	; 255
    2fda:	7f 4f       	sbci	r23, 0xFF	; 255
    2fdc:	43 a7       	std	Z+43, r20	; 0x2b
    2fde:	54 a7       	std	Z+44, r21	; 0x2c
    2fe0:	65 a7       	std	Z+45, r22	; 0x2d
    2fe2:	76 a7       	std	Z+46, r23	; 0x2e
    2fe4:	0b c0       	rjmp	.+22     	; 0x2ffc <xTaskGenericNotify+0x8e>
    2fe6:	43 a7       	std	Z+43, r20	; 0x2b
    2fe8:	54 a7       	std	Z+44, r21	; 0x2c
    2fea:	65 a7       	std	Z+45, r22	; 0x2d
    2fec:	76 a7       	std	Z+46, r23	; 0x2e
    2fee:	06 c0       	rjmp	.+12     	; 0x2ffc <xTaskGenericNotify+0x8e>
    2ff0:	82 30       	cpi	r24, 0x02	; 2
    2ff2:	49 f1       	breq	.+82     	; 0x3046 <xTaskGenericNotify+0xd8>
    2ff4:	43 a7       	std	Z+43, r20	; 0x2b
    2ff6:	54 a7       	std	Z+44, r21	; 0x2c
    2ff8:	65 a7       	std	Z+45, r22	; 0x2d
    2ffa:	76 a7       	std	Z+46, r23	; 0x2e
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	29 f5       	brne	.+74     	; 0x304a <xTaskGenericNotify+0xdc>
    3000:	ef 01       	movw	r28, r30
    3002:	8f 01       	movw	r16, r30
    3004:	0e 5f       	subi	r16, 0xFE	; 254
    3006:	1f 4f       	sbci	r17, 0xFF	; 255
    3008:	c8 01       	movw	r24, r16
    300a:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    300e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3010:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    3014:	98 17       	cp	r25, r24
    3016:	10 f4       	brcc	.+4      	; 0x301c <xTaskGenericNotify+0xae>
    3018:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    301c:	2b e0       	ldi	r18, 0x0B	; 11
    301e:	82 9f       	mul	r24, r18
    3020:	c0 01       	movw	r24, r0
    3022:	11 24       	eor	r1, r1
    3024:	b8 01       	movw	r22, r16
    3026:	86 5f       	subi	r24, 0xF6	; 246
    3028:	97 4e       	sbci	r25, 0xE7	; 231
    302a:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    302e:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    3032:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    3036:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3038:	82 8d       	ldd	r24, Z+26	; 0x1a
    303a:	89 17       	cp	r24, r25
    303c:	40 f4       	brcc	.+16     	; 0x304e <xTaskGenericNotify+0xe0>
    303e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	05 c0       	rjmp	.+10     	; 0x3050 <xTaskGenericNotify+0xe2>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <xTaskGenericNotify+0xe2>
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	01 c0       	rjmp	.+2      	; 0x3050 <xTaskGenericNotify+0xe2>
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0f 90       	pop	r0
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	08 95       	ret

0000305e <xTaskGenericNotifyFromISR>:
    305e:	ef 92       	push	r14
    3060:	ff 92       	push	r15
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	fc 01       	movw	r30, r24
    306c:	01 15       	cp	r16, r1
    306e:	11 05       	cpc	r17, r1
    3070:	49 f0       	breq	.+18     	; 0x3084 <xTaskGenericNotifyFromISR+0x26>
    3072:	83 a5       	ldd	r24, Z+43	; 0x2b
    3074:	94 a5       	ldd	r25, Z+44	; 0x2c
    3076:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3078:	b6 a5       	ldd	r27, Z+46	; 0x2e
    307a:	e8 01       	movw	r28, r16
    307c:	88 83       	st	Y, r24
    307e:	99 83       	std	Y+1, r25	; 0x01
    3080:	aa 83       	std	Y+2, r26	; 0x02
    3082:	bb 83       	std	Y+3, r27	; 0x03
    3084:	87 a5       	ldd	r24, Z+47	; 0x2f
    3086:	92 e0       	ldi	r25, 0x02	; 2
    3088:	97 a7       	std	Z+47, r25	; 0x2f
    308a:	22 30       	cpi	r18, 0x02	; 2
    308c:	b1 f0       	breq	.+44     	; 0x30ba <xTaskGenericNotifyFromISR+0x5c>
    308e:	18 f4       	brcc	.+6      	; 0x3096 <xTaskGenericNotifyFromISR+0x38>
    3090:	21 30       	cpi	r18, 0x01	; 1
    3092:	31 f0       	breq	.+12     	; 0x30a0 <xTaskGenericNotifyFromISR+0x42>
    3094:	2a c0       	rjmp	.+84     	; 0x30ea <xTaskGenericNotifyFromISR+0x8c>
    3096:	23 30       	cpi	r18, 0x03	; 3
    3098:	e9 f0       	breq	.+58     	; 0x30d4 <xTaskGenericNotifyFromISR+0x76>
    309a:	24 30       	cpi	r18, 0x04	; 4
    309c:	01 f1       	breq	.+64     	; 0x30de <xTaskGenericNotifyFromISR+0x80>
    309e:	25 c0       	rjmp	.+74     	; 0x30ea <xTaskGenericNotifyFromISR+0x8c>
    30a0:	03 a5       	ldd	r16, Z+43	; 0x2b
    30a2:	14 a5       	ldd	r17, Z+44	; 0x2c
    30a4:	25 a5       	ldd	r18, Z+45	; 0x2d
    30a6:	36 a5       	ldd	r19, Z+46	; 0x2e
    30a8:	40 2b       	or	r20, r16
    30aa:	51 2b       	or	r21, r17
    30ac:	62 2b       	or	r22, r18
    30ae:	73 2b       	or	r23, r19
    30b0:	43 a7       	std	Z+43, r20	; 0x2b
    30b2:	54 a7       	std	Z+44, r21	; 0x2c
    30b4:	65 a7       	std	Z+45, r22	; 0x2d
    30b6:	76 a7       	std	Z+46, r23	; 0x2e
    30b8:	18 c0       	rjmp	.+48     	; 0x30ea <xTaskGenericNotifyFromISR+0x8c>
    30ba:	43 a5       	ldd	r20, Z+43	; 0x2b
    30bc:	54 a5       	ldd	r21, Z+44	; 0x2c
    30be:	65 a5       	ldd	r22, Z+45	; 0x2d
    30c0:	76 a5       	ldd	r23, Z+46	; 0x2e
    30c2:	4f 5f       	subi	r20, 0xFF	; 255
    30c4:	5f 4f       	sbci	r21, 0xFF	; 255
    30c6:	6f 4f       	sbci	r22, 0xFF	; 255
    30c8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ca:	43 a7       	std	Z+43, r20	; 0x2b
    30cc:	54 a7       	std	Z+44, r21	; 0x2c
    30ce:	65 a7       	std	Z+45, r22	; 0x2d
    30d0:	76 a7       	std	Z+46, r23	; 0x2e
    30d2:	0b c0       	rjmp	.+22     	; 0x30ea <xTaskGenericNotifyFromISR+0x8c>
    30d4:	43 a7       	std	Z+43, r20	; 0x2b
    30d6:	54 a7       	std	Z+44, r21	; 0x2c
    30d8:	65 a7       	std	Z+45, r22	; 0x2d
    30da:	76 a7       	std	Z+46, r23	; 0x2e
    30dc:	06 c0       	rjmp	.+12     	; 0x30ea <xTaskGenericNotifyFromISR+0x8c>
    30de:	82 30       	cpi	r24, 0x02	; 2
    30e0:	d9 f1       	breq	.+118    	; 0x3158 <xTaskGenericNotifyFromISR+0xfa>
    30e2:	43 a7       	std	Z+43, r20	; 0x2b
    30e4:	54 a7       	std	Z+44, r21	; 0x2c
    30e6:	65 a7       	std	Z+45, r22	; 0x2d
    30e8:	76 a7       	std	Z+46, r23	; 0x2e
    30ea:	81 30       	cpi	r24, 0x01	; 1
    30ec:	b9 f5       	brne	.+110    	; 0x315c <xTaskGenericNotifyFromISR+0xfe>
    30ee:	ef 01       	movw	r28, r30
    30f0:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <uxSchedulerSuspended>
    30f4:	81 11       	cpse	r24, r1
    30f6:	17 c0       	rjmp	.+46     	; 0x3126 <xTaskGenericNotifyFromISR+0xc8>
    30f8:	8f 01       	movw	r16, r30
    30fa:	0e 5f       	subi	r16, 0xFE	; 254
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	c8 01       	movw	r24, r16
    3100:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
    3104:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3106:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <uxTopReadyPriority>
    310a:	98 17       	cp	r25, r24
    310c:	10 f4       	brcc	.+4      	; 0x3112 <xTaskGenericNotifyFromISR+0xb4>
    310e:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <uxTopReadyPriority>
    3112:	eb e0       	ldi	r30, 0x0B	; 11
    3114:	8e 9f       	mul	r24, r30
    3116:	c0 01       	movw	r24, r0
    3118:	11 24       	eor	r1, r1
    311a:	b8 01       	movw	r22, r16
    311c:	86 5f       	subi	r24, 0xF6	; 246
    311e:	97 4e       	sbci	r25, 0xE7	; 231
    3120:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    3124:	07 c0       	rjmp	.+14     	; 0x3134 <xTaskGenericNotifyFromISR+0xd6>
    3126:	bf 01       	movw	r22, r30
    3128:	62 5f       	subi	r22, 0xF2	; 242
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	85 ee       	ldi	r24, 0xE5	; 229
    312e:	97 e1       	ldi	r25, 0x17	; 23
    3130:	0e 94 a5 09 	call	0x134a	; 0x134a <vListInsertEnd>
    3134:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <pxCurrentTCB>
    3138:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <pxCurrentTCB+0x1>
    313c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    313e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3140:	89 17       	cp	r24, r25
    3142:	70 f4       	brcc	.+28     	; 0x3160 <xTaskGenericNotifyFromISR+0x102>
    3144:	e1 14       	cp	r14, r1
    3146:	f1 04       	cpc	r15, r1
    3148:	19 f0       	breq	.+6      	; 0x3150 <xTaskGenericNotifyFromISR+0xf2>
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	e7 01       	movw	r28, r14
    314e:	88 83       	st	Y, r24
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <xYieldPending>
    3156:	05 c0       	rjmp	.+10     	; 0x3162 <xTaskGenericNotifyFromISR+0x104>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <xTaskGenericNotifyFromISR+0x104>
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	01 c0       	rjmp	.+2      	; 0x3162 <xTaskGenericNotifyFromISR+0x104>
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	08 95       	ret

00003170 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	21 f4       	brne	.+8      	; 0x317c <xTaskNotifyStateClear+0xc>
    3174:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <pxCurrentTCB>
    3178:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3182:	fc 01       	movw	r30, r24
    3184:	27 a5       	ldd	r18, Z+47	; 0x2f
    3186:	22 30       	cpi	r18, 0x02	; 2
    3188:	19 f4       	brne	.+6      	; 0x3190 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    318a:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	01 c0       	rjmp	.+2      	; 0x3192 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3190:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3192:	0f 90       	pop	r0
    3194:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3196:	08 95       	ret

00003198 <prvInsertTimerInActiveList>:
    3198:	cf 92       	push	r12
    319a:	df 92       	push	r13
    319c:	ef 92       	push	r14
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	fc 01       	movw	r30, r24
    31a6:	42 83       	std	Z+2, r20	; 0x02
    31a8:	53 83       	std	Z+3, r21	; 0x03
    31aa:	64 83       	std	Z+4, r22	; 0x04
    31ac:	75 83       	std	Z+5, r23	; 0x05
    31ae:	93 87       	std	Z+11, r25	; 0x0b
    31b0:	82 87       	std	Z+10, r24	; 0x0a
    31b2:	04 17       	cp	r16, r20
    31b4:	15 07       	cpc	r17, r21
    31b6:	26 07       	cpc	r18, r22
    31b8:	37 07       	cpc	r19, r23
    31ba:	c0 f0       	brcs	.+48     	; 0x31ec <prvInsertTimerInActiveList+0x54>
    31bc:	0c 19       	sub	r16, r12
    31be:	1d 09       	sbc	r17, r13
    31c0:	2e 09       	sbc	r18, r14
    31c2:	3f 09       	sbc	r19, r15
    31c4:	86 85       	ldd	r24, Z+14	; 0x0e
    31c6:	97 85       	ldd	r25, Z+15	; 0x0f
    31c8:	a0 89       	ldd	r26, Z+16	; 0x10
    31ca:	b1 89       	ldd	r27, Z+17	; 0x11
    31cc:	08 17       	cp	r16, r24
    31ce:	19 07       	cpc	r17, r25
    31d0:	2a 07       	cpc	r18, r26
    31d2:	3b 07       	cpc	r19, r27
    31d4:	00 f5       	brcc	.+64     	; 0x3216 <prvInsertTimerInActiveList+0x7e>
    31d6:	bf 01       	movw	r22, r30
    31d8:	6e 5f       	subi	r22, 0xFE	; 254
    31da:	7f 4f       	sbci	r23, 0xFF	; 255
    31dc:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <pxOverflowTimerList>
    31e0:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <pxOverflowTimerList+0x1>
    31e4:	0e 94 c6 09 	call	0x138c	; 0x138c <vListInsert>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	18 c0       	rjmp	.+48     	; 0x321c <prvInsertTimerInActiveList+0x84>
    31ec:	0c 15       	cp	r16, r12
    31ee:	1d 05       	cpc	r17, r13
    31f0:	2e 05       	cpc	r18, r14
    31f2:	3f 05       	cpc	r19, r15
    31f4:	28 f4       	brcc	.+10     	; 0x3200 <prvInsertTimerInActiveList+0x68>
    31f6:	4c 15       	cp	r20, r12
    31f8:	5d 05       	cpc	r21, r13
    31fa:	6e 05       	cpc	r22, r14
    31fc:	7f 05       	cpc	r23, r15
    31fe:	68 f4       	brcc	.+26     	; 0x321a <prvInsertTimerInActiveList+0x82>
    3200:	bf 01       	movw	r22, r30
    3202:	6e 5f       	subi	r22, 0xFE	; 254
    3204:	7f 4f       	sbci	r23, 0xFF	; 255
    3206:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <pxCurrentTimerList>
    320a:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
    320e:	0e 94 c6 09 	call	0x138c	; 0x138c <vListInsert>
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	03 c0       	rjmp	.+6      	; 0x321c <prvInsertTimerInActiveList+0x84>
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	01 c0       	rjmp	.+2      	; 0x321c <prvInsertTimerInActiveList+0x84>
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	08 95       	ret

0000322a <prvCheckForValidListAndQueue>:
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	0f 92       	push	r0
    3230:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3234:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    3238:	89 2b       	or	r24, r25
    323a:	e9 f4       	brne	.+58     	; 0x3276 <prvCheckForValidListAndQueue+0x4c>
    323c:	8f e4       	ldi	r24, 0x4F	; 79
    323e:	98 e1       	ldi	r25, 0x18	; 24
    3240:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    3244:	84 e4       	ldi	r24, 0x44	; 68
    3246:	98 e1       	ldi	r25, 0x18	; 24
    3248:	0e 94 90 09 	call	0x1320	; 0x1320 <vListInitialise>
    324c:	8f e4       	ldi	r24, 0x4F	; 79
    324e:	98 e1       	ldi	r25, 0x18	; 24
    3250:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <pxCurrentTimerList+0x1>
    3254:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <pxCurrentTimerList>
    3258:	84 e4       	ldi	r24, 0x44	; 68
    325a:	98 e1       	ldi	r25, 0x18	; 24
    325c:	90 93 41 18 	sts	0x1841, r25	; 0x801841 <pxOverflowTimerList+0x1>
    3260:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <pxOverflowTimerList>
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	67 e0       	ldi	r22, 0x07	; 7
    3268:	8a e0       	ldi	r24, 0x0A	; 10
    326a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericCreate>
    326e:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xTimerQueue+0x1>
    3272:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xTimerQueue>
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	08 95       	ret

0000327c <xTimerCreateTimerTask>:
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	d3 df       	rcall	.-90     	; 0x322a <prvCheckForValidListAndQueue>
    3284:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3288:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    328c:	89 2b       	or	r24, r25
    328e:	89 f0       	breq	.+34     	; 0x32b2 <xTimerCreateTimerTask+0x36>
    3290:	0f 2e       	mov	r0, r31
    3292:	fc e3       	ldi	r31, 0x3C	; 60
    3294:	ef 2e       	mov	r14, r31
    3296:	f8 e1       	ldi	r31, 0x18	; 24
    3298:	ff 2e       	mov	r15, r31
    329a:	f0 2d       	mov	r31, r0
    329c:	03 e0       	ldi	r16, 0x03	; 3
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	45 e5       	ldi	r20, 0x55	; 85
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	65 e7       	ldi	r22, 0x75	; 117
    32a8:	74 e0       	ldi	r23, 0x04	; 4
    32aa:	87 e0       	ldi	r24, 0x07	; 7
    32ac:	91 e0       	ldi	r25, 0x01	; 1
    32ae:	b1 d8       	rcall	.-3742   	; 0x2412 <xTaskCreate>
    32b0:	01 c0       	rjmp	.+2      	; 0x32b4 <xTimerCreateTimerTask+0x38>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	0f 91       	pop	r16
    32b6:	ff 90       	pop	r15
    32b8:	ef 90       	pop	r14
    32ba:	08 95       	ret

000032bc <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    32bc:	8f 92       	push	r8
    32be:	9f 92       	push	r9
    32c0:	af 92       	push	r10
    32c2:	bf 92       	push	r11
    32c4:	cf 92       	push	r12
    32c6:	df 92       	push	r13
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	27 97       	sbiw	r28, 0x07	; 7
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    32e4:	e0 91 3e 18 	lds	r30, 0x183E	; 0x80183e <xTimerQueue>
    32e8:	f0 91 3f 18 	lds	r31, 0x183F	; 0x80183f <xTimerQueue+0x1>
    32ec:	30 97       	sbiw	r30, 0x00	; 0
    32ee:	81 f1       	breq	.+96     	; 0x3350 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    32f0:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    32f2:	2a 83       	std	Y+2, r18	; 0x02
    32f4:	3b 83       	std	Y+3, r19	; 0x03
    32f6:	4c 83       	std	Y+4, r20	; 0x04
    32f8:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    32fa:	9f 83       	std	Y+7, r25	; 0x07
    32fc:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    32fe:	66 30       	cpi	r22, 0x06	; 6
    3300:	f4 f4       	brge	.+60     	; 0x333e <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3302:	35 dd       	rcall	.-1430   	; 0x2d6e <xTaskGetSchedulerState>
    3304:	82 30       	cpi	r24, 0x02	; 2
    3306:	69 f4       	brne	.+26     	; 0x3322 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3308:	00 e0       	ldi	r16, 0x00	; 0
    330a:	a7 01       	movw	r20, r14
    330c:	96 01       	movw	r18, r12
    330e:	be 01       	movw	r22, r28
    3310:	6f 5f       	subi	r22, 0xFF	; 255
    3312:	7f 4f       	sbci	r23, 0xFF	; 255
    3314:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3318:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    331c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xQueueGenericSend>
    3320:	18 c0       	rjmp	.+48     	; 0x3352 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3322:	00 e0       	ldi	r16, 0x00	; 0
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	a9 01       	movw	r20, r18
    332a:	be 01       	movw	r22, r28
    332c:	6f 5f       	subi	r22, 0xFF	; 255
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xTimerQueue>
    3334:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xTimerQueue+0x1>
    3338:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xQueueGenericSend>
    333c:	0a c0       	rjmp	.+20     	; 0x3352 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	a8 01       	movw	r20, r16
    3342:	be 01       	movw	r22, r28
    3344:	6f 5f       	subi	r22, 0xFF	; 255
    3346:	7f 4f       	sbci	r23, 0xFF	; 255
    3348:	cf 01       	movw	r24, r30
    334a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <xQueueGenericSendFromISR>
    334e:	01 c0       	rjmp	.+2      	; 0x3352 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3350:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3352:	27 96       	adiw	r28, 0x07	; 7
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	ff 90       	pop	r15
    3368:	ef 90       	pop	r14
    336a:	df 90       	pop	r13
    336c:	cf 90       	pop	r12
    336e:	bf 90       	pop	r11
    3370:	af 90       	pop	r10
    3372:	9f 90       	pop	r9
    3374:	8f 90       	pop	r8
    3376:	08 95       	ret

00003378 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3378:	2f 92       	push	r2
    337a:	3f 92       	push	r3
    337c:	4f 92       	push	r4
    337e:	5f 92       	push	r5
    3380:	6f 92       	push	r6
    3382:	7f 92       	push	r7
    3384:	8f 92       	push	r8
    3386:	9f 92       	push	r9
    3388:	af 92       	push	r10
    338a:	bf 92       	push	r11
    338c:	cf 92       	push	r12
    338e:	df 92       	push	r13
    3390:	ef 92       	push	r14
    3392:	ff 92       	push	r15
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    339e:	9a d9       	rcall	.-3276   	; 0x26d4 <xTaskGetTickCount>
    33a0:	2b 01       	movw	r4, r22
    33a2:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    33a4:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <xLastTime.2432>
    33a8:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <xLastTime.2432+0x1>
    33ac:	a0 91 3a 18 	lds	r26, 0x183A	; 0x80183a <xLastTime.2432+0x2>
    33b0:	b0 91 3b 18 	lds	r27, 0x183B	; 0x80183b <xLastTime.2432+0x3>
    33b4:	48 16       	cp	r4, r24
    33b6:	59 06       	cpc	r5, r25
    33b8:	6a 06       	cpc	r6, r26
    33ba:	7b 06       	cpc	r7, r27
    33bc:	08 f0       	brcs	.+2      	; 0x33c0 <prvSampleTimeNow+0x48>
    33be:	53 c0       	rjmp	.+166    	; 0x3466 <prvSampleTimeNow+0xee>
    33c0:	3b c0       	rjmp	.+118    	; 0x3438 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    33c2:	07 80       	ldd	r0, Z+7	; 0x07
    33c4:	f0 85       	ldd	r31, Z+8	; 0x08
    33c6:	e0 2d       	mov	r30, r0
    33c8:	80 80       	ld	r8, Z
    33ca:	91 80       	ldd	r9, Z+1	; 0x01
    33cc:	a2 80       	ldd	r10, Z+2	; 0x02
    33ce:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33d0:	c0 85       	ldd	r28, Z+8	; 0x08
    33d2:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33d4:	8e 01       	movw	r16, r28
    33d6:	0e 5f       	subi	r16, 0xFE	; 254
    33d8:	1f 4f       	sbci	r17, 0xFF	; 255
    33da:	c8 01       	movw	r24, r16
    33dc:	0e 94 03 0a 	call	0x1406	; 0x1406 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33e0:	ec 89       	ldd	r30, Y+20	; 0x14
    33e2:	fd 89       	ldd	r31, Y+21	; 0x15
    33e4:	ce 01       	movw	r24, r28
    33e6:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    33e8:	8f 89       	ldd	r24, Y+23	; 0x17
    33ea:	82 ff       	sbrs	r24, 2
    33ec:	25 c0       	rjmp	.+74     	; 0x3438 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    33ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    33f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33f2:	a8 89       	ldd	r26, Y+16	; 0x10
    33f4:	b9 89       	ldd	r27, Y+17	; 0x11
    33f6:	88 0d       	add	r24, r8
    33f8:	99 1d       	adc	r25, r9
    33fa:	aa 1d       	adc	r26, r10
    33fc:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    33fe:	88 16       	cp	r8, r24
    3400:	99 06       	cpc	r9, r25
    3402:	aa 06       	cpc	r10, r26
    3404:	bb 06       	cpc	r11, r27
    3406:	70 f4       	brcc	.+28     	; 0x3424 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3408:	8a 83       	std	Y+2, r24	; 0x02
    340a:	9b 83       	std	Y+3, r25	; 0x03
    340c:	ac 83       	std	Y+4, r26	; 0x04
    340e:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3410:	db 87       	std	Y+11, r29	; 0x0b
    3412:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3414:	b8 01       	movw	r22, r16
    3416:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <pxCurrentTimerList>
    341a:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
    341e:	0e 94 c6 09 	call	0x138c	; 0x138c <vListInsert>
    3422:	0a c0       	rjmp	.+20     	; 0x3438 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3424:	c1 2c       	mov	r12, r1
    3426:	d1 2c       	mov	r13, r1
    3428:	76 01       	movw	r14, r12
    342a:	00 e0       	ldi	r16, 0x00	; 0
    342c:	10 e0       	ldi	r17, 0x00	; 0
    342e:	a5 01       	movw	r20, r10
    3430:	94 01       	movw	r18, r8
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	ce 01       	movw	r24, r28
    3436:	42 df       	rcall	.-380    	; 0x32bc <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3438:	e0 91 42 18 	lds	r30, 0x1842	; 0x801842 <pxCurrentTimerList>
    343c:	f0 91 43 18 	lds	r31, 0x1843	; 0x801843 <pxCurrentTimerList+0x1>
    3440:	80 81       	ld	r24, Z
    3442:	81 11       	cpse	r24, r1
    3444:	be cf       	rjmp	.-132    	; 0x33c2 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3446:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <pxOverflowTimerList>
    344a:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <pxOverflowTimerList+0x1>
    344e:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <pxCurrentTimerList+0x1>
    3452:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3456:	f0 93 41 18 	sts	0x1841, r31	; 0x801841 <pxOverflowTimerList+0x1>
    345a:	e0 93 40 18 	sts	0x1840, r30	; 0x801840 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	f1 01       	movw	r30, r2
    3462:	80 83       	st	Z, r24
    3464:	02 c0       	rjmp	.+4      	; 0x346a <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3466:	f1 01       	movw	r30, r2
    3468:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    346a:	40 92 38 18 	sts	0x1838, r4	; 0x801838 <xLastTime.2432>
    346e:	50 92 39 18 	sts	0x1839, r5	; 0x801839 <xLastTime.2432+0x1>
    3472:	60 92 3a 18 	sts	0x183A, r6	; 0x80183a <xLastTime.2432+0x2>
    3476:	70 92 3b 18 	sts	0x183B, r7	; 0x80183b <xLastTime.2432+0x3>

    return xTimeNow;
}
    347a:	c3 01       	movw	r24, r6
    347c:	b2 01       	movw	r22, r4
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	af 90       	pop	r10
    3492:	9f 90       	pop	r9
    3494:	8f 90       	pop	r8
    3496:	7f 90       	pop	r7
    3498:	6f 90       	pop	r6
    349a:	5f 90       	pop	r5
    349c:	4f 90       	pop	r4
    349e:	3f 90       	pop	r3
    34a0:	2f 90       	pop	r2
    34a2:	08 95       	ret

000034a4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    34a4:	08 95       	ret

000034a6 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    34a6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    34a8:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34aa:	2f ef       	ldi	r18, 0xFF	; 255
    34ac:	80 e7       	ldi	r24, 0x70	; 112
    34ae:	92 e0       	ldi	r25, 0x02	; 2
    34b0:	21 50       	subi	r18, 0x01	; 1
    34b2:	80 40       	sbci	r24, 0x00	; 0
    34b4:	90 40       	sbci	r25, 0x00	; 0
    34b6:	e1 f7       	brne	.-8      	; 0x34b0 <vApplicationMallocFailedHook+0xa>
    34b8:	00 c0       	rjmp	.+0      	; 0x34ba <vApplicationMallocFailedHook+0x14>
    34ba:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    34bc:	1f 9a       	sbi	0x03, 7	; 3
    34be:	f5 cf       	rjmp	.-22     	; 0x34aa <vApplicationMallocFailedHook+0x4>

000034c0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    34c0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    34c2:	2f 9a       	sbi	0x05, 7	; 5
    34c4:	2f ef       	ldi	r18, 0xFF	; 255
    34c6:	87 ea       	ldi	r24, 0xA7	; 167
    34c8:	91 e6       	ldi	r25, 0x61	; 97
    34ca:	21 50       	subi	r18, 0x01	; 1
    34cc:	80 40       	sbci	r24, 0x00	; 0
    34ce:	90 40       	sbci	r25, 0x00	; 0
    34d0:	e1 f7       	brne	.-8      	; 0x34ca <vApplicationStackOverflowHook+0xa>
    34d2:	00 c0       	rjmp	.+0      	; 0x34d4 <vApplicationStackOverflowHook+0x14>
    34d4:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    34d6:	1f 9a       	sbi	0x03, 7	; 3
    34d8:	f5 cf       	rjmp	.-22     	; 0x34c4 <vApplicationStackOverflowHook+0x4>

000034da <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    34da:	81 b1       	in	r24, 0x01	; 1
    34dc:	81 68       	ori	r24, 0x81	; 129
    34de:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    34e0:	0e 94 d7 06 	call	0xdae	; 0xdae <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <stdioCreate>
	// Let's create some tasks
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    34ea:	85 e0       	ldi	r24, 0x05	; 5
    34ec:	53 d1       	rcall	.+678    	; 0x3794 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	da c4       	rjmp	.+2484   	; 0x3eaa <lora_driver_create>
    34f6:	08 95       	ret

000034f8 <doStuff>:
	// Create LoRaWAN task and start it up with priority 3 
}

void doStuff()
{
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
	
	size_t bytesToSend;
	bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
    34fc:	0f ef       	ldi	r16, 0xFF	; 255
    34fe:	1f ef       	ldi	r17, 0xFF	; 255
    3500:	98 01       	movw	r18, r16
    3502:	46 e1       	ldi	r20, 0x16	; 22
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	61 eb       	ldi	r22, 0xB1	; 177
    3508:	79 e1       	ldi	r23, 0x19	; 25
    350a:	80 91 ab 19 	lds	r24, 0x19AB	; 0x8019ab <xMessageBuffer>
    350e:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <xMessageBuffer+0x1>
    3512:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xStreamBufferSend>
}
    3516:	1f 91       	pop	r17
    3518:	0f 91       	pop	r16
    351a:	08 95       	ret

0000351c <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    351c:	8f 92       	push	r8
    351e:	9f 92       	push	r9
    3520:	af 92       	push	r10
    3522:	bf 92       	push	r11
    3524:	cf 92       	push	r12
    3526:	df 92       	push	r13
    3528:	ef 92       	push	r14
    352a:	ff 92       	push	r15
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3534:	80 91 af 19 	lds	r24, 0x19AF	; 0x8019af <xTestSemaphore>
    3538:	90 91 b0 19 	lds	r25, 0x19B0	; 0x8019b0 <xTestSemaphore+0x1>
    353c:	89 2b       	or	r24, r25
    353e:	89 f4       	brne	.+34     	; 0x3562 <create_tasks_and_semaphores+0x46>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <xQueueCreateMutex>
    3546:	90 93 b0 19 	sts	0x19B0, r25	; 0x8019b0 <xTestSemaphore+0x1>
    354a:	80 93 af 19 	sts	0x19AF, r24	; 0x8019af <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	41 f0       	breq	.+16     	; 0x3562 <create_tasks_and_semaphores+0x46>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3552:	00 e0       	ldi	r16, 0x00	; 0
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	a9 01       	movw	r20, r18
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xQueueGenericSend>
		}
	}
	
	startMeasureEventGroup = xEventGroupCreate();
    3562:	0e 94 ed 06 	call	0xdda	; 0xdda <xEventGroupCreate>
    3566:	90 93 c8 19 	sts	0x19C8, r25	; 0x8019c8 <startMeasureEventGroup+0x1>
    356a:	80 93 c7 19 	sts	0x19C7, r24	; 0x8019c7 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    356e:	0e 94 ed 06 	call	0xdda	; 0xdda <xEventGroupCreate>
    3572:	90 93 ae 19 	sts	0x19AE, r25	; 0x8019ae <readyEventGroup+0x1>
    3576:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    357a:	41 e0       	ldi	r20, 0x01	; 1
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	84 e6       	ldi	r24, 0x64	; 100
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xStreamBufferGenericCreate>
    3588:	90 93 ac 19 	sts	0x19AC, r25	; 0x8019ac <xMessageBuffer+0x1>
    358c:	80 93 ab 19 	sts	0x19AB, r24	; 0x8019ab <xMessageBuffer>
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    3590:	bc 01       	movw	r22, r24
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	0e 94 b1 05 	call	0xb62	; 0xb62 <lora_UpLinkHandler_create>

	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3598:	e0 90 ad 19 	lds	r14, 0x19AD	; 0x8019ad <readyEventGroup>
    359c:	f0 90 ae 19 	lds	r15, 0x19AE	; 0x8019ae <readyEventGroup+0x1>
    35a0:	40 91 c7 19 	lds	r20, 0x19C7	; 0x8019c7 <startMeasureEventGroup>
    35a4:	50 91 c8 19 	lds	r21, 0x19C8	; 0x8019c8 <startMeasureEventGroup+0x1>
    35a8:	a1 2c       	mov	r10, r1
    35aa:	b1 2c       	mov	r11, r1
    35ac:	65 01       	movw	r12, r10
    35ae:	68 94       	set
    35b0:	a4 f8       	bld	r10, 4
    35b2:	01 e0       	ldi	r16, 0x01	; 1
    35b4:	10 e0       	ldi	r17, 0x00	; 0
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	60 ec       	ldi	r22, 0xC0	; 192
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	0e 94 c8 04 	call	0x990	; 0x990 <humAndTempReader_create>
    35c2:	c8 2f       	mov	r28, r24
    35c4:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    35c6:	e0 90 ad 19 	lds	r14, 0x19AD	; 0x8019ad <readyEventGroup>
    35ca:	f0 90 ae 19 	lds	r15, 0x19AE	; 0x8019ae <readyEventGroup+0x1>
    35ce:	40 91 c7 19 	lds	r20, 0x19C7	; 0x8019c7 <startMeasureEventGroup>
    35d2:	50 91 c8 19 	lds	r21, 0x19C8	; 0x8019c8 <startMeasureEventGroup+0x1>
    35d6:	a1 2c       	mov	r10, r1
    35d8:	b1 2c       	mov	r11, r1
    35da:	65 01       	movw	r12, r10
    35dc:	68 94       	set
    35de:	a5 f8       	bld	r10, 5
    35e0:	02 e0       	ldi	r16, 0x02	; 2
    35e2:	10 e0       	ldi	r17, 0x00	; 0
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	60 ec       	ldi	r22, 0xC0	; 192
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2Reader_create>
	readyEventGroup, BIT_DONE_MEASURE_CO2);

	device_t device = device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    35f0:	e0 90 ad 19 	lds	r14, 0x19AD	; 0x8019ad <readyEventGroup>
    35f4:	f0 90 ae 19 	lds	r15, 0x19AE	; 0x8019ae <readyEventGroup+0x1>
    35f8:	40 91 c7 19 	lds	r20, 0x19C7	; 0x8019c7 <startMeasureEventGroup>
    35fc:	50 91 c8 19 	lds	r21, 0x19C8	; 0x8019c8 <startMeasureEventGroup+0x1>
    3600:	20 91 ac 19 	lds	r18, 0x19AC	; 0x8019ac <xMessageBuffer+0x1>
    3604:	2f 93       	push	r18
    3606:	20 91 ab 19 	lds	r18, 0x19AB	; 0x8019ab <xMessageBuffer>
    360a:	2f 93       	push	r18
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	4c 01       	movw	r8, r24
    3612:	0f 2e       	mov	r0, r31
    3614:	f0 e3       	ldi	r31, 0x30	; 48
    3616:	af 2e       	mov	r10, r31
    3618:	b1 2c       	mov	r11, r1
    361a:	c1 2c       	mov	r12, r1
    361c:	d1 2c       	mov	r13, r1
    361e:	f0 2d       	mov	r31, r0
    3620:	03 e0       	ldi	r16, 0x03	; 3
    3622:	10 e0       	ldi	r17, 0x00	; 0
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	60 ec       	ldi	r22, 0xC0	; 192
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,xMessageBuffer);
	
	doStuff();
    3630:	63 df       	rcall	.-314    	; 0x34f8 <doStuff>
	//,  (const portCHAR *)"Task2"  // A name just for humans
	//,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	//,  NULL
	//,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	//,  NULL );
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	ff 90       	pop	r15
    3644:	ef 90       	pop	r14
    3646:	df 90       	pop	r13
    3648:	cf 90       	pop	r12
    364a:	bf 90       	pop	r11
    364c:	af 90       	pop	r10
    364e:	9f 90       	pop	r9
    3650:	8f 90       	pop	r8
    3652:	08 95       	ret

00003654 <main>:
	bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3654:	42 df       	rcall	.-380    	; 0x34da <initialiseSystem>
	printf("Program Started!!\n");
    3656:	89 e8       	ldi	r24, 0x89	; 137
    3658:	94 e0       	ldi	r25, 0x04	; 4
    365a:	0e 94 67 2b 	call	0x56ce	; 0x56ce <puts>
	create_tasks_and_semaphores();
    365e:	5e df       	rcall	.-324    	; 0x351c <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3660:	0e 94 28 13 	call	0x2650	; 0x2650 <vTaskStartScheduler>
    3664:	ff cf       	rjmp	.-2      	; 0x3664 <main+0x10>

00003666 <__fixsfsi>:
    3666:	04 d0       	rcall	.+8      	; 0x3670 <__fixunssfsi>
    3668:	68 94       	set
    366a:	b1 11       	cpse	r27, r1
    366c:	8d c0       	rjmp	.+282    	; 0x3788 <__fp_szero>
    366e:	08 95       	ret

00003670 <__fixunssfsi>:
    3670:	70 d0       	rcall	.+224    	; 0x3752 <__fp_splitA>
    3672:	88 f0       	brcs	.+34     	; 0x3696 <__fixunssfsi+0x26>
    3674:	9f 57       	subi	r25, 0x7F	; 127
    3676:	90 f0       	brcs	.+36     	; 0x369c <__fixunssfsi+0x2c>
    3678:	b9 2f       	mov	r27, r25
    367a:	99 27       	eor	r25, r25
    367c:	b7 51       	subi	r27, 0x17	; 23
    367e:	a0 f0       	brcs	.+40     	; 0x36a8 <__fixunssfsi+0x38>
    3680:	d1 f0       	breq	.+52     	; 0x36b6 <__fixunssfsi+0x46>
    3682:	66 0f       	add	r22, r22
    3684:	77 1f       	adc	r23, r23
    3686:	88 1f       	adc	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	1a f0       	brmi	.+6      	; 0x3692 <__fixunssfsi+0x22>
    368c:	ba 95       	dec	r27
    368e:	c9 f7       	brne	.-14     	; 0x3682 <__fixunssfsi+0x12>
    3690:	12 c0       	rjmp	.+36     	; 0x36b6 <__fixunssfsi+0x46>
    3692:	b1 30       	cpi	r27, 0x01	; 1
    3694:	81 f0       	breq	.+32     	; 0x36b6 <__fixunssfsi+0x46>
    3696:	77 d0       	rcall	.+238    	; 0x3786 <__fp_zero>
    3698:	b1 e0       	ldi	r27, 0x01	; 1
    369a:	08 95       	ret
    369c:	74 c0       	rjmp	.+232    	; 0x3786 <__fp_zero>
    369e:	67 2f       	mov	r22, r23
    36a0:	78 2f       	mov	r23, r24
    36a2:	88 27       	eor	r24, r24
    36a4:	b8 5f       	subi	r27, 0xF8	; 248
    36a6:	39 f0       	breq	.+14     	; 0x36b6 <__fixunssfsi+0x46>
    36a8:	b9 3f       	cpi	r27, 0xF9	; 249
    36aa:	cc f3       	brlt	.-14     	; 0x369e <__fixunssfsi+0x2e>
    36ac:	86 95       	lsr	r24
    36ae:	77 95       	ror	r23
    36b0:	67 95       	ror	r22
    36b2:	b3 95       	inc	r27
    36b4:	d9 f7       	brne	.-10     	; 0x36ac <__fixunssfsi+0x3c>
    36b6:	3e f4       	brtc	.+14     	; 0x36c6 <__fixunssfsi+0x56>
    36b8:	90 95       	com	r25
    36ba:	80 95       	com	r24
    36bc:	70 95       	com	r23
    36be:	61 95       	neg	r22
    36c0:	7f 4f       	sbci	r23, 0xFF	; 255
    36c2:	8f 4f       	sbci	r24, 0xFF	; 255
    36c4:	9f 4f       	sbci	r25, 0xFF	; 255
    36c6:	08 95       	ret

000036c8 <__floatunsisf>:
    36c8:	e8 94       	clt
    36ca:	09 c0       	rjmp	.+18     	; 0x36de <__floatsisf+0x12>

000036cc <__floatsisf>:
    36cc:	97 fb       	bst	r25, 7
    36ce:	3e f4       	brtc	.+14     	; 0x36de <__floatsisf+0x12>
    36d0:	90 95       	com	r25
    36d2:	80 95       	com	r24
    36d4:	70 95       	com	r23
    36d6:	61 95       	neg	r22
    36d8:	7f 4f       	sbci	r23, 0xFF	; 255
    36da:	8f 4f       	sbci	r24, 0xFF	; 255
    36dc:	9f 4f       	sbci	r25, 0xFF	; 255
    36de:	99 23       	and	r25, r25
    36e0:	a9 f0       	breq	.+42     	; 0x370c <__floatsisf+0x40>
    36e2:	f9 2f       	mov	r31, r25
    36e4:	96 e9       	ldi	r25, 0x96	; 150
    36e6:	bb 27       	eor	r27, r27
    36e8:	93 95       	inc	r25
    36ea:	f6 95       	lsr	r31
    36ec:	87 95       	ror	r24
    36ee:	77 95       	ror	r23
    36f0:	67 95       	ror	r22
    36f2:	b7 95       	ror	r27
    36f4:	f1 11       	cpse	r31, r1
    36f6:	f8 cf       	rjmp	.-16     	; 0x36e8 <__floatsisf+0x1c>
    36f8:	fa f4       	brpl	.+62     	; 0x3738 <__floatsisf+0x6c>
    36fa:	bb 0f       	add	r27, r27
    36fc:	11 f4       	brne	.+4      	; 0x3702 <__floatsisf+0x36>
    36fe:	60 ff       	sbrs	r22, 0
    3700:	1b c0       	rjmp	.+54     	; 0x3738 <__floatsisf+0x6c>
    3702:	6f 5f       	subi	r22, 0xFF	; 255
    3704:	7f 4f       	sbci	r23, 0xFF	; 255
    3706:	8f 4f       	sbci	r24, 0xFF	; 255
    3708:	9f 4f       	sbci	r25, 0xFF	; 255
    370a:	16 c0       	rjmp	.+44     	; 0x3738 <__floatsisf+0x6c>
    370c:	88 23       	and	r24, r24
    370e:	11 f0       	breq	.+4      	; 0x3714 <__floatsisf+0x48>
    3710:	96 e9       	ldi	r25, 0x96	; 150
    3712:	11 c0       	rjmp	.+34     	; 0x3736 <__floatsisf+0x6a>
    3714:	77 23       	and	r23, r23
    3716:	21 f0       	breq	.+8      	; 0x3720 <__floatsisf+0x54>
    3718:	9e e8       	ldi	r25, 0x8E	; 142
    371a:	87 2f       	mov	r24, r23
    371c:	76 2f       	mov	r23, r22
    371e:	05 c0       	rjmp	.+10     	; 0x372a <__floatsisf+0x5e>
    3720:	66 23       	and	r22, r22
    3722:	71 f0       	breq	.+28     	; 0x3740 <__floatsisf+0x74>
    3724:	96 e8       	ldi	r25, 0x86	; 134
    3726:	86 2f       	mov	r24, r22
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	2a f0       	brmi	.+10     	; 0x3738 <__floatsisf+0x6c>
    372e:	9a 95       	dec	r25
    3730:	66 0f       	add	r22, r22
    3732:	77 1f       	adc	r23, r23
    3734:	88 1f       	adc	r24, r24
    3736:	da f7       	brpl	.-10     	; 0x372e <__floatsisf+0x62>
    3738:	88 0f       	add	r24, r24
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
    373e:	97 f9       	bld	r25, 7
    3740:	08 95       	ret

00003742 <__fp_split3>:
    3742:	57 fd       	sbrc	r21, 7
    3744:	90 58       	subi	r25, 0x80	; 128
    3746:	44 0f       	add	r20, r20
    3748:	55 1f       	adc	r21, r21
    374a:	59 f0       	breq	.+22     	; 0x3762 <__fp_splitA+0x10>
    374c:	5f 3f       	cpi	r21, 0xFF	; 255
    374e:	71 f0       	breq	.+28     	; 0x376c <__fp_splitA+0x1a>
    3750:	47 95       	ror	r20

00003752 <__fp_splitA>:
    3752:	88 0f       	add	r24, r24
    3754:	97 fb       	bst	r25, 7
    3756:	99 1f       	adc	r25, r25
    3758:	61 f0       	breq	.+24     	; 0x3772 <__fp_splitA+0x20>
    375a:	9f 3f       	cpi	r25, 0xFF	; 255
    375c:	79 f0       	breq	.+30     	; 0x377c <__fp_splitA+0x2a>
    375e:	87 95       	ror	r24
    3760:	08 95       	ret
    3762:	12 16       	cp	r1, r18
    3764:	13 06       	cpc	r1, r19
    3766:	14 06       	cpc	r1, r20
    3768:	55 1f       	adc	r21, r21
    376a:	f2 cf       	rjmp	.-28     	; 0x3750 <__fp_split3+0xe>
    376c:	46 95       	lsr	r20
    376e:	f1 df       	rcall	.-30     	; 0x3752 <__fp_splitA>
    3770:	08 c0       	rjmp	.+16     	; 0x3782 <__fp_splitA+0x30>
    3772:	16 16       	cp	r1, r22
    3774:	17 06       	cpc	r1, r23
    3776:	18 06       	cpc	r1, r24
    3778:	99 1f       	adc	r25, r25
    377a:	f1 cf       	rjmp	.-30     	; 0x375e <__fp_splitA+0xc>
    377c:	86 95       	lsr	r24
    377e:	71 05       	cpc	r23, r1
    3780:	61 05       	cpc	r22, r1
    3782:	08 94       	sec
    3784:	08 95       	ret

00003786 <__fp_zero>:
    3786:	e8 94       	clt

00003788 <__fp_szero>:
    3788:	bb 27       	eor	r27, r27
    378a:	66 27       	eor	r22, r22
    378c:	77 27       	eor	r23, r23
    378e:	cb 01       	movw	r24, r22
    3790:	97 f9       	bld	r25, 7
    3792:	08 95       	ret

00003794 <hal_create>:
    3794:	e9 ec       	ldi	r30, 0xC9	; 201
    3796:	f9 e1       	ldi	r31, 0x19	; 25
    3798:	2a ea       	ldi	r18, 0xAA	; 170
    379a:	32 e2       	ldi	r19, 0x22	; 34
    379c:	31 83       	std	Z+1, r19	; 0x01
    379e:	20 83       	st	Z, r18
    37a0:	2d ea       	ldi	r18, 0xAD	; 173
    37a2:	32 e2       	ldi	r19, 0x22	; 34
    37a4:	33 83       	std	Z+3, r19	; 0x03
    37a6:	22 83       	std	Z+2, r18	; 0x02
    37a8:	28 eb       	ldi	r18, 0xB8	; 184
    37aa:	32 e2       	ldi	r19, 0x22	; 34
    37ac:	35 83       	std	Z+5, r19	; 0x05
    37ae:	24 83       	std	Z+4, r18	; 0x04
    37b0:	2c eb       	ldi	r18, 0xBC	; 188
    37b2:	32 e2       	ldi	r19, 0x22	; 34
    37b4:	37 83       	std	Z+7, r19	; 0x07
    37b6:	26 83       	std	Z+6, r18	; 0x06
    37b8:	22 ec       	ldi	r18, 0xC2	; 194
    37ba:	32 e2       	ldi	r19, 0x22	; 34
    37bc:	31 87       	std	Z+9, r19	; 0x09
    37be:	20 87       	std	Z+8, r18	; 0x08
    37c0:	2e ec       	ldi	r18, 0xCE	; 206
    37c2:	32 e2       	ldi	r19, 0x22	; 34
    37c4:	33 87       	std	Z+11, r19	; 0x0b
    37c6:	22 87       	std	Z+10, r18	; 0x0a
    37c8:	23 ed       	ldi	r18, 0xD3	; 211
    37ca:	32 e2       	ldi	r19, 0x22	; 34
    37cc:	35 87       	std	Z+13, r19	; 0x0d
    37ce:	24 87       	std	Z+12, r18	; 0x0c
    37d0:	2f ed       	ldi	r18, 0xDF	; 223
    37d2:	32 e2       	ldi	r19, 0x22	; 34
    37d4:	37 87       	std	Z+15, r19	; 0x0f
    37d6:	26 87       	std	Z+14, r18	; 0x0e
    37d8:	2f eb       	ldi	r18, 0xBF	; 191
    37da:	32 e2       	ldi	r19, 0x22	; 34
    37dc:	31 8b       	std	Z+17, r19	; 0x11
    37de:	20 8b       	std	Z+16, r18	; 0x10
    37e0:	24 ee       	ldi	r18, 0xE4	; 228
    37e2:	32 e2       	ldi	r19, 0x22	; 34
    37e4:	33 8b       	std	Z+19, r19	; 0x13
    37e6:	22 8b       	std	Z+18, r18	; 0x12
    37e8:	21 ef       	ldi	r18, 0xF1	; 241
    37ea:	32 e2       	ldi	r19, 0x22	; 34
    37ec:	35 8b       	std	Z+21, r19	; 0x15
    37ee:	24 8b       	std	Z+20, r18	; 0x14
    37f0:	68 2f       	mov	r22, r24
    37f2:	cf 01       	movw	r24, r30
    37f4:	26 c1       	rjmp	.+588    	; 0x3a42 <led_create>
    37f6:	08 95       	ret

000037f8 <_hihTwiCallback>:
    37f8:	65 30       	cpi	r22, 0x05	; 5
    37fa:	f1 f4       	brne	.+60     	; 0x3838 <_hihTwiCallback+0x40>
    37fc:	fa 01       	movw	r30, r20
    37fe:	80 81       	ld	r24, Z
    3800:	8f 73       	andi	r24, 0x3F	; 63
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	98 2f       	mov	r25, r24
    3806:	88 27       	eor	r24, r24
    3808:	21 81       	ldd	r18, Z+1	; 0x01
    380a:	82 2b       	or	r24, r18
    380c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    3810:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	f0 e4       	ldi	r31, 0x40	; 64
    3818:	8f 9f       	mul	r24, r31
    381a:	c0 01       	movw	r24, r0
    381c:	11 24       	eor	r1, r1
    381e:	fa 01       	movw	r30, r20
    3820:	23 81       	ldd	r18, Z+3	; 0x03
    3822:	26 95       	lsr	r18
    3824:	26 95       	lsr	r18
    3826:	82 2b       	or	r24, r18
    3828:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    382c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <_measuringIsReady>
    3836:	08 95       	ret
    3838:	64 30       	cpi	r22, 0x04	; 4
    383a:	51 f0       	breq	.+20     	; 0x3850 <_hihTwiCallback+0x58>
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	90 e4       	ldi	r25, 0x40	; 64
    3840:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    3844:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    3848:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    384c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    3850:	08 95       	ret

00003852 <hih8120Create>:
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    3856:	0c ef       	ldi	r16, 0xFC	; 252
    3858:	1b e1       	ldi	r17, 0x1B	; 27
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	34 e2       	ldi	r19, 0x24	; 36
    385e:	44 ef       	ldi	r20, 0xF4	; 244
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	87 e2       	ldi	r24, 0x27	; 39
    3866:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <twiCreate>
    386a:	90 93 5c 18 	sts	0x185C, r25	; 0x80185c <_hih8120Handler+0x1>
    386e:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_hih8120Handler>
    3872:	21 e0       	ldi	r18, 0x01	; 1
    3874:	89 2b       	or	r24, r25
    3876:	09 f0       	breq	.+2      	; 0x387a <hih8120Create+0x28>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	82 2f       	mov	r24, r18
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	08 95       	ret

00003882 <hih8120IsReady>:
    3882:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_measuringIsReady>
    3886:	08 95       	ret

00003888 <hih8120Meassure>:
    3888:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_hih8120Handler>
    388c:	90 91 5c 18 	lds	r25, 0x185C	; 0x80185c <_hih8120Handler+0x1>
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	39 f0       	breq	.+14     	; 0x38a2 <hih8120Meassure+0x1a>
    3894:	64 e0       	ldi	r22, 0x04	; 4
    3896:	0e 94 20 27 	call	0x4e40	; 0x4e40 <twiReceive>
    389a:	85 30       	cpi	r24, 0x05	; 5
    389c:	21 f0       	breq	.+8      	; 0x38a6 <hih8120Meassure+0x1e>
    389e:	83 e0       	ldi	r24, 0x03	; 3
    38a0:	08 95       	ret
    38a2:	82 e0       	ldi	r24, 0x02	; 2
    38a4:	08 95       	ret
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	08 95       	ret

000038aa <hih8120GetHumidity>:
    38aa:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    38ae:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	08 df       	rcall	.-496    	; 0x36c8 <__floatunsisf>
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	48 ec       	ldi	r20, 0xC8	; 200
    38be:	52 e4       	ldi	r21, 0x42	; 66
    38c0:	0e 94 26 29 	call	0x524c	; 0x524c <__mulsf3>
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	38 ef       	ldi	r19, 0xF8	; 248
    38c8:	4f e7       	ldi	r20, 0x7F	; 127
    38ca:	56 e4       	ldi	r21, 0x46	; 70
    38cc:	0c 94 93 28 	jmp	0x5126	; 0x5126 <__divsf3>
    38d0:	08 95       	ret

000038d2 <hih8120GetTemperature>:
    38d2:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    38d6:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	f4 de       	rcall	.-536    	; 0x36c8 <__floatunsisf>
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	45 e2       	ldi	r20, 0x25	; 37
    38e6:	53 e4       	ldi	r21, 0x43	; 67
    38e8:	0e 94 26 29 	call	0x524c	; 0x524c <__mulsf3>
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	38 ef       	ldi	r19, 0xF8	; 248
    38f0:	4f e7       	ldi	r20, 0x7F	; 127
    38f2:	56 e4       	ldi	r21, 0x46	; 70
    38f4:	0e 94 93 28 	call	0x5126	; 0x5126 <__divsf3>
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e2       	ldi	r20, 0x20	; 32
    38fe:	52 e4       	ldi	r21, 0x42	; 66
    3900:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__subsf3>
    3904:	08 95       	ret

00003906 <_turn_off>:
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	fc 01       	movw	r30, r24
    390e:	ee 0f       	add	r30, r30
    3910:	ff 1f       	adc	r31, r31
    3912:	e8 0f       	add	r30, r24
    3914:	f9 1f       	adc	r31, r25
    3916:	ee 0f       	add	r30, r30
    3918:	ff 1f       	adc	r31, r31
    391a:	e3 5a       	subi	r30, 0xA3	; 163
    391c:	f7 4e       	sbci	r31, 0xE7	; 231
    391e:	23 81       	ldd	r18, Z+3	; 0x03
    3920:	21 11       	cpse	r18, r1
    3922:	0a c0       	rjmp	.+20     	; 0x3938 <_turn_off+0x32>
    3924:	ef 01       	movw	r28, r30
    3926:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    392a:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    392e:	6a 81       	ldd	r22, Y+2	; 0x02
    3930:	88 81       	ld	r24, Y
    3932:	99 81       	ldd	r25, Y+1	; 0x01
    3934:	19 95       	eicall
    3936:	12 c0       	rjmp	.+36     	; 0x395c <_turn_off+0x56>
    3938:	dc 01       	movw	r26, r24
    393a:	aa 0f       	add	r26, r26
    393c:	bb 1f       	adc	r27, r27
    393e:	ed 01       	movw	r28, r26
    3940:	c8 0f       	add	r28, r24
    3942:	d9 1f       	adc	r29, r25
    3944:	cc 0f       	add	r28, r28
    3946:	dd 1f       	adc	r29, r29
    3948:	c3 5a       	subi	r28, 0xA3	; 163
    394a:	d7 4e       	sbci	r29, 0xE7	; 231
    394c:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <register_access+0x12>
    3950:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <register_access+0x13>
    3954:	6a 81       	ldd	r22, Y+2	; 0x02
    3956:	88 81       	ld	r24, Y
    3958:	99 81       	ldd	r25, Y+1	; 0x01
    395a:	19 95       	eicall
    395c:	df 91       	pop	r29
    395e:	cf 91       	pop	r28
    3960:	08 95       	ret

00003962 <_turn_on>:
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	fc 01       	movw	r30, r24
    396a:	ee 0f       	add	r30, r30
    396c:	ff 1f       	adc	r31, r31
    396e:	e8 0f       	add	r30, r24
    3970:	f9 1f       	adc	r31, r25
    3972:	ee 0f       	add	r30, r30
    3974:	ff 1f       	adc	r31, r31
    3976:	e3 5a       	subi	r30, 0xA3	; 163
    3978:	f7 4e       	sbci	r31, 0xE7	; 231
    397a:	23 81       	ldd	r18, Z+3	; 0x03
    397c:	21 11       	cpse	r18, r1
    397e:	0a c0       	rjmp	.+20     	; 0x3994 <_turn_on+0x32>
    3980:	ef 01       	movw	r28, r30
    3982:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <register_access+0x12>
    3986:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <register_access+0x13>
    398a:	6a 81       	ldd	r22, Y+2	; 0x02
    398c:	88 81       	ld	r24, Y
    398e:	99 81       	ldd	r25, Y+1	; 0x01
    3990:	19 95       	eicall
    3992:	12 c0       	rjmp	.+36     	; 0x39b8 <_turn_on+0x56>
    3994:	dc 01       	movw	r26, r24
    3996:	aa 0f       	add	r26, r26
    3998:	bb 1f       	adc	r27, r27
    399a:	ed 01       	movw	r28, r26
    399c:	c8 0f       	add	r28, r24
    399e:	d9 1f       	adc	r29, r25
    39a0:	cc 0f       	add	r28, r28
    39a2:	dd 1f       	adc	r29, r29
    39a4:	c3 5a       	subi	r28, 0xA3	; 163
    39a6:	d7 4e       	sbci	r29, 0xE7	; 231
    39a8:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    39ac:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    39b0:	6a 81       	ldd	r22, Y+2	; 0x02
    39b2:	88 81       	ld	r24, Y
    39b4:	99 81       	ldd	r25, Y+1	; 0x01
    39b6:	19 95       	eicall
    39b8:	df 91       	pop	r29
    39ba:	cf 91       	pop	r28
    39bc:	08 95       	ret

000039be <_hal_led_task>:
    39be:	0f 2e       	mov	r0, r31
    39c0:	f9 ec       	ldi	r31, 0xC9	; 201
    39c2:	cf 2e       	mov	r12, r31
    39c4:	f9 e1       	ldi	r31, 0x19	; 25
    39c6:	df 2e       	mov	r13, r31
    39c8:	f0 2d       	mov	r31, r0
    39ca:	04 e0       	ldi	r16, 0x04	; 4
    39cc:	cd e5       	ldi	r28, 0x5D	; 93
    39ce:	d8 e1       	ldi	r29, 0x18	; 24
    39d0:	10 e0       	ldi	r17, 0x00	; 0
    39d2:	8c 81       	ldd	r24, Y+4	; 0x04
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	69 f0       	breq	.+26     	; 0x39f2 <_hal_led_task+0x34>
    39d8:	e8 f0       	brcs	.+58     	; 0x3a14 <_hal_led_task+0x56>
    39da:	82 30       	cpi	r24, 0x02	; 2
    39dc:	39 f5       	brne	.+78     	; 0x3a2c <_hal_led_task+0x6e>
    39de:	d6 01       	movw	r26, r12
    39e0:	1c 96       	adiw	r26, 0x0c	; 12
    39e2:	ed 91       	ld	r30, X+
    39e4:	fc 91       	ld	r31, X
    39e6:	1d 97       	sbiw	r26, 0x0d	; 13
    39e8:	6a 81       	ldd	r22, Y+2	; 0x02
    39ea:	88 81       	ld	r24, Y
    39ec:	99 81       	ldd	r25, Y+1	; 0x01
    39ee:	19 95       	eicall
    39f0:	1d c0       	rjmp	.+58     	; 0x3a2c <_hal_led_task+0x6e>
    39f2:	8d 81       	ldd	r24, Y+5	; 0x05
    39f4:	8f 5f       	subi	r24, 0xFF	; 255
    39f6:	8a 30       	cpi	r24, 0x0A	; 10
    39f8:	10 f4       	brcc	.+4      	; 0x39fe <_hal_led_task+0x40>
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	17 c0       	rjmp	.+46     	; 0x3a2c <_hal_led_task+0x6e>
    39fe:	1d 82       	std	Y+5, r1	; 0x05
    3a00:	d6 01       	movw	r26, r12
    3a02:	1c 96       	adiw	r26, 0x0c	; 12
    3a04:	ed 91       	ld	r30, X+
    3a06:	fc 91       	ld	r31, X
    3a08:	1d 97       	sbiw	r26, 0x0d	; 13
    3a0a:	6a 81       	ldd	r22, Y+2	; 0x02
    3a0c:	88 81       	ld	r24, Y
    3a0e:	99 81       	ldd	r25, Y+1	; 0x01
    3a10:	19 95       	eicall
    3a12:	0c c0       	rjmp	.+24     	; 0x3a2c <_hal_led_task+0x6e>
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
    3a16:	88 23       	and	r24, r24
    3a18:	31 f0       	breq	.+12     	; 0x3a26 <_hal_led_task+0x68>
    3a1a:	81 2f       	mov	r24, r17
    3a1c:	a2 df       	rcall	.-188    	; 0x3962 <_turn_on>
    3a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a20:	81 50       	subi	r24, 0x01	; 1
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <_hal_led_task+0x6e>
    3a26:	0c 83       	std	Y+4, r16	; 0x04
    3a28:	81 2f       	mov	r24, r17
    3a2a:	6d df       	rcall	.-294    	; 0x3906 <_turn_off>
    3a2c:	1f 5f       	subi	r17, 0xFF	; 255
    3a2e:	26 96       	adiw	r28, 0x06	; 6
    3a30:	14 30       	cpi	r17, 0x04	; 4
    3a32:	79 f6       	brne	.-98     	; 0x39d2 <_hal_led_task+0x14>
    3a34:	65 e0       	ldi	r22, 0x05	; 5
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 c9 14 	call	0x2992	; 0x2992 <vTaskDelay>
    3a40:	c5 cf       	rjmp	.-118    	; 0x39cc <_hal_led_task+0xe>

00003a42 <led_create>:
    3a42:	cf 92       	push	r12
    3a44:	df 92       	push	r13
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	06 2f       	mov	r16, r22
    3a54:	0f 2e       	mov	r0, r31
    3a56:	f9 ec       	ldi	r31, 0xC9	; 201
    3a58:	ef 2e       	mov	r14, r31
    3a5a:	f9 e1       	ldi	r31, 0x19	; 25
    3a5c:	ff 2e       	mov	r15, r31
    3a5e:	f0 2d       	mov	r31, r0
    3a60:	d7 01       	movw	r26, r14
    3a62:	18 96       	adiw	r26, 0x08	; 8
    3a64:	ed 91       	ld	r30, X+
    3a66:	fc 91       	ld	r31, X
    3a68:	19 97       	sbiw	r26, 0x09	; 9
    3a6a:	66 e0       	ldi	r22, 0x06	; 6
    3a6c:	87 e2       	ldi	r24, 0x27	; 39
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	19 95       	eicall
    3a72:	cd e5       	ldi	r28, 0x5D	; 93
    3a74:	d8 e1       	ldi	r29, 0x18	; 24
    3a76:	0f 2e       	mov	r0, r31
    3a78:	f8 e2       	ldi	r31, 0x28	; 40
    3a7a:	cf 2e       	mov	r12, r31
    3a7c:	d1 2c       	mov	r13, r1
    3a7e:	f0 2d       	mov	r31, r0
    3a80:	d9 82       	std	Y+1, r13	; 0x01
    3a82:	c8 82       	st	Y, r12
    3a84:	86 e0       	ldi	r24, 0x06	; 6
    3a86:	8a 83       	std	Y+2, r24	; 0x02
    3a88:	1b 82       	std	Y+3, r1	; 0x03
    3a8a:	14 e0       	ldi	r17, 0x04	; 4
    3a8c:	1c 83       	std	Y+4, r17	; 0x04
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	3a df       	rcall	.-396    	; 0x3906 <_turn_off>
    3a92:	d7 01       	movw	r26, r14
    3a94:	18 96       	adiw	r26, 0x08	; 8
    3a96:	ed 91       	ld	r30, X+
    3a98:	fc 91       	ld	r31, X
    3a9a:	19 97       	sbiw	r26, 0x09	; 9
    3a9c:	67 e0       	ldi	r22, 0x07	; 7
    3a9e:	87 e2       	ldi	r24, 0x27	; 39
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	19 95       	eicall
    3aa4:	df 82       	std	Y+7, r13	; 0x07
    3aa6:	ce 82       	std	Y+6, r12	; 0x06
    3aa8:	87 e0       	ldi	r24, 0x07	; 7
    3aaa:	88 87       	std	Y+8, r24	; 0x08
    3aac:	19 86       	std	Y+9, r1	; 0x09
    3aae:	1a 87       	std	Y+10, r17	; 0x0a
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	29 df       	rcall	.-430    	; 0x3906 <_turn_off>
    3ab4:	d7 01       	movw	r26, r14
    3ab6:	18 96       	adiw	r26, 0x08	; 8
    3ab8:	ed 91       	ld	r30, X+
    3aba:	fc 91       	ld	r31, X
    3abc:	19 97       	sbiw	r26, 0x09	; 9
    3abe:	65 e0       	ldi	r22, 0x05	; 5
    3ac0:	83 e3       	ldi	r24, 0x33	; 51
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	19 95       	eicall
    3ac6:	d7 01       	movw	r26, r14
    3ac8:	18 96       	adiw	r26, 0x08	; 8
    3aca:	ed 91       	ld	r30, X+
    3acc:	fc 91       	ld	r31, X
    3ace:	19 97       	sbiw	r26, 0x09	; 9
    3ad0:	61 e0       	ldi	r22, 0x01	; 1
    3ad2:	84 e3       	ldi	r24, 0x34	; 52
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	19 95       	eicall
    3ad8:	84 e3       	ldi	r24, 0x34	; 52
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	9d 87       	std	Y+13, r25	; 0x0d
    3ade:	8c 87       	std	Y+12, r24	; 0x0c
    3ae0:	85 e0       	ldi	r24, 0x05	; 5
    3ae2:	8e 87       	std	Y+14, r24	; 0x0e
    3ae4:	1f 86       	std	Y+15, r1	; 0x0f
    3ae6:	18 8b       	std	Y+16, r17	; 0x10
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	0d df       	rcall	.-486    	; 0x3906 <_turn_off>
    3aec:	d7 01       	movw	r26, r14
    3aee:	18 96       	adiw	r26, 0x08	; 8
    3af0:	ed 91       	ld	r30, X+
    3af2:	fc 91       	ld	r31, X
    3af4:	19 97       	sbiw	r26, 0x09	; 9
    3af6:	64 e0       	ldi	r22, 0x04	; 4
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	91 e0       	ldi	r25, 0x01	; 1
    3afc:	19 95       	eicall
    3afe:	d7 01       	movw	r26, r14
    3b00:	18 96       	adiw	r26, 0x08	; 8
    3b02:	ed 91       	ld	r30, X+
    3b04:	fc 91       	ld	r31, X
    3b06:	19 97       	sbiw	r26, 0x09	; 9
    3b08:	61 e0       	ldi	r22, 0x01	; 1
    3b0a:	82 e0       	ldi	r24, 0x02	; 2
    3b0c:	91 e0       	ldi	r25, 0x01	; 1
    3b0e:	19 95       	eicall
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	9b 8b       	std	Y+19, r25	; 0x13
    3b16:	8a 8b       	std	Y+18, r24	; 0x12
    3b18:	1c 8b       	std	Y+20, r17	; 0x14
    3b1a:	1d 8a       	std	Y+21, r1	; 0x15
    3b1c:	1e 8b       	std	Y+22, r17	; 0x16
    3b1e:	83 e0       	ldi	r24, 0x03	; 3
    3b20:	f2 de       	rcall	.-540    	; 0x3906 <_turn_off>
    3b22:	e1 2c       	mov	r14, r1
    3b24:	f1 2c       	mov	r15, r1
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 ec       	ldi	r20, 0xC0	; 192
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	6b e9       	ldi	r22, 0x9B	; 155
    3b30:	74 e0       	ldi	r23, 0x04	; 4
    3b32:	8f ed       	ldi	r24, 0xDF	; 223
    3b34:	9c e1       	ldi	r25, 0x1C	; 28
    3b36:	0e 94 09 12 	call	0x2412	; 0x2412 <xTaskCreate>
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	cf 90       	pop	r12
    3b4a:	08 95       	ret

00003b4c <led_slow_blink>:
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	c8 2f       	mov	r28, r24
    3b56:	d0 e0       	ldi	r29, 0x00	; 0
    3b58:	8e 01       	movw	r16, r28
    3b5a:	00 0f       	add	r16, r16
    3b5c:	11 1f       	adc	r17, r17
    3b5e:	d8 01       	movw	r26, r16
    3b60:	ac 0f       	add	r26, r28
    3b62:	bd 1f       	adc	r27, r29
    3b64:	aa 0f       	add	r26, r26
    3b66:	bb 1f       	adc	r27, r27
    3b68:	a3 5a       	subi	r26, 0xA3	; 163
    3b6a:	b7 4e       	sbci	r27, 0xE7	; 231
    3b6c:	e0 91 d5 19 	lds	r30, 0x19D5	; 0x8019d5 <register_access+0xc>
    3b70:	f0 91 d6 19 	lds	r31, 0x19D6	; 0x8019d6 <register_access+0xd>
    3b74:	12 96       	adiw	r26, 0x02	; 2
    3b76:	6c 91       	ld	r22, X
    3b78:	12 97       	sbiw	r26, 0x02	; 2
    3b7a:	8d 91       	ld	r24, X+
    3b7c:	9c 91       	ld	r25, X
    3b7e:	19 95       	eicall
    3b80:	c0 0f       	add	r28, r16
    3b82:	d1 1f       	adc	r29, r17
    3b84:	cc 0f       	add	r28, r28
    3b86:	dd 1f       	adc	r29, r29
    3b88:	c3 5a       	subi	r28, 0xA3	; 163
    3b8a:	d7 4e       	sbci	r29, 0xE7	; 231
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	8c 83       	std	Y+4, r24	; 0x04
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	08 95       	ret

00003b9a <led_fast_blink>:
    3b9a:	0f 93       	push	r16
    3b9c:	1f 93       	push	r17
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	c8 2f       	mov	r28, r24
    3ba4:	d0 e0       	ldi	r29, 0x00	; 0
    3ba6:	8e 01       	movw	r16, r28
    3ba8:	00 0f       	add	r16, r16
    3baa:	11 1f       	adc	r17, r17
    3bac:	d8 01       	movw	r26, r16
    3bae:	ac 0f       	add	r26, r28
    3bb0:	bd 1f       	adc	r27, r29
    3bb2:	aa 0f       	add	r26, r26
    3bb4:	bb 1f       	adc	r27, r27
    3bb6:	a3 5a       	subi	r26, 0xA3	; 163
    3bb8:	b7 4e       	sbci	r27, 0xE7	; 231
    3bba:	e0 91 d5 19 	lds	r30, 0x19D5	; 0x8019d5 <register_access+0xc>
    3bbe:	f0 91 d6 19 	lds	r31, 0x19D6	; 0x8019d6 <register_access+0xd>
    3bc2:	12 96       	adiw	r26, 0x02	; 2
    3bc4:	6c 91       	ld	r22, X
    3bc6:	12 97       	sbiw	r26, 0x02	; 2
    3bc8:	8d 91       	ld	r24, X+
    3bca:	9c 91       	ld	r25, X
    3bcc:	19 95       	eicall
    3bce:	c0 0f       	add	r28, r16
    3bd0:	d1 1f       	adc	r29, r17
    3bd2:	cc 0f       	add	r28, r28
    3bd4:	dd 1f       	adc	r29, r29
    3bd6:	c3 5a       	subi	r28, 0xA3	; 163
    3bd8:	d7 4e       	sbci	r29, 0xE7	; 231
    3bda:	82 e0       	ldi	r24, 0x02	; 2
    3bdc:	8c 83       	std	Y+4, r24	; 0x04
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	08 95       	ret

00003be8 <led_led_on>:
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	f9 01       	movw	r30, r18
    3bee:	ee 0f       	add	r30, r30
    3bf0:	ff 1f       	adc	r31, r31
    3bf2:	e2 0f       	add	r30, r18
    3bf4:	f3 1f       	adc	r31, r19
    3bf6:	ee 0f       	add	r30, r30
    3bf8:	ff 1f       	adc	r31, r31
    3bfa:	e3 5a       	subi	r30, 0xA3	; 163
    3bfc:	f7 4e       	sbci	r31, 0xE7	; 231
    3bfe:	93 e0       	ldi	r25, 0x03	; 3
    3c00:	94 83       	std	Z+4, r25	; 0x04
    3c02:	af ce       	rjmp	.-674    	; 0x3962 <_turn_on>
    3c04:	08 95       	ret

00003c06 <led_led_off>:
    3c06:	28 2f       	mov	r18, r24
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	f9 01       	movw	r30, r18
    3c0c:	ee 0f       	add	r30, r30
    3c0e:	ff 1f       	adc	r31, r31
    3c10:	e2 0f       	add	r30, r18
    3c12:	f3 1f       	adc	r31, r19
    3c14:	ee 0f       	add	r30, r30
    3c16:	ff 1f       	adc	r31, r31
    3c18:	e3 5a       	subi	r30, 0xA3	; 163
    3c1a:	f7 4e       	sbci	r31, 0xE7	; 231
    3c1c:	94 e0       	ldi	r25, 0x04	; 4
    3c1e:	94 83       	std	Z+4, r25	; 0x04
    3c20:	72 ce       	rjmp	.-796    	; 0x3906 <_turn_off>
    3c22:	08 95       	ret

00003c24 <led_long_puls>:
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	fc 01       	movw	r30, r24
    3c28:	ee 0f       	add	r30, r30
    3c2a:	ff 1f       	adc	r31, r31
    3c2c:	df 01       	movw	r26, r30
    3c2e:	a8 0f       	add	r26, r24
    3c30:	b9 1f       	adc	r27, r25
    3c32:	aa 0f       	add	r26, r26
    3c34:	bb 1f       	adc	r27, r27
    3c36:	a3 5a       	subi	r26, 0xA3	; 163
    3c38:	b7 4e       	sbci	r27, 0xE7	; 231
    3c3a:	24 e0       	ldi	r18, 0x04	; 4
    3c3c:	15 96       	adiw	r26, 0x05	; 5
    3c3e:	2c 93       	st	X, r18
    3c40:	15 97       	sbiw	r26, 0x05	; 5
    3c42:	fd 01       	movw	r30, r26
    3c44:	14 82       	std	Z+4, r1	; 0x04
    3c46:	08 95       	ret

00003c48 <led_short_puls>:
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	ee 0f       	add	r30, r30
    3c4e:	ff 1f       	adc	r31, r31
    3c50:	df 01       	movw	r26, r30
    3c52:	a8 0f       	add	r26, r24
    3c54:	b9 1f       	adc	r27, r25
    3c56:	aa 0f       	add	r26, r26
    3c58:	bb 1f       	adc	r27, r27
    3c5a:	a3 5a       	subi	r26, 0xA3	; 163
    3c5c:	b7 4e       	sbci	r27, 0xE7	; 231
    3c5e:	21 e0       	ldi	r18, 0x01	; 1
    3c60:	15 96       	adiw	r26, 0x05	; 5
    3c62:	2c 93       	st	X, r18
    3c64:	15 97       	sbiw	r26, 0x05	; 5
    3c66:	fd 01       	movw	r30, r26
    3c68:	14 82       	std	Z+4, r1	; 0x04
    3c6a:	08 95       	ret

00003c6c <_serial_call_back>:
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	1f 92       	push	r1
    3c76:	1f 92       	push	r1
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	8c 01       	movw	r16, r24
    3c7e:	19 82       	std	Y+1, r1	; 0x01
    3c80:	2d c0       	rjmp	.+90     	; 0x3cdc <_serial_call_back+0x70>
    3c82:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <rec_buf_inp.2947>
    3c86:	ec 32       	cpi	r30, 0x2C	; 44
    3c88:	50 f4       	brcc	.+20     	; 0x3c9e <_serial_call_back+0x32>
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	8e 0f       	add	r24, r30
    3c8e:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <rec_buf_inp.2947>
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	e5 5f       	subi	r30, 0xF5	; 245
    3c96:	f6 4e       	sbci	r31, 0xE6	; 230
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	80 83       	st	Z, r24
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <_serial_call_back+0x36>
    3c9e:	10 92 d9 18 	sts	0x18D9, r1	; 0x8018d9 <rec_buf_inp.2947>
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	8a 30       	cpi	r24, 0x0A	; 10
    3ca6:	d1 f4       	brne	.+52     	; 0x3cdc <_serial_call_back+0x70>
    3ca8:	40 91 d9 18 	lds	r20, 0x18D9	; 0x8018d9 <rec_buf_inp.2947>
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	fa 01       	movw	r30, r20
    3cb0:	e7 5f       	subi	r30, 0xF7	; 247
    3cb2:	f6 4e       	sbci	r31, 0xE6	; 230
    3cb4:	10 82       	st	Z, r1
    3cb6:	41 50       	subi	r20, 0x01	; 1
    3cb8:	51 09       	sbc	r21, r1
    3cba:	9e 01       	movw	r18, r28
    3cbc:	2f 5f       	subi	r18, 0xFF	; 255
    3cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc0:	6b e0       	ldi	r22, 0x0B	; 11
    3cc2:	79 e1       	ldi	r23, 0x19	; 25
    3cc4:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3cc8:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3ccc:	0e 94 86 10 	call	0x210c	; 0x210c <xStreamBufferSendFromISR>
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	81 11       	cpse	r24, r1
    3cd4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <vPortYield>
    3cd8:	10 92 d9 18 	sts	0x18D9, r1	; 0x8018d9 <rec_buf_inp.2947>
    3cdc:	be 01       	movw	r22, r28
    3cde:	6e 5f       	subi	r22, 0xFE	; 254
    3ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce2:	c8 01       	movw	r24, r16
    3ce4:	90 d5       	rcall	.+2848   	; 0x4806 <serial_get_byte>
    3ce6:	88 23       	and	r24, r24
    3ce8:	61 f2       	breq	.-104    	; 0x3c82 <_serial_call_back+0x16>
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	1f 91       	pop	r17
    3cf4:	0f 91       	pop	r16
    3cf6:	08 95       	ret

00003cf8 <_upload_message>:
    3cf8:	0f 93       	push	r16
    3cfa:	1f 93       	push	r17
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	8c 01       	movw	r16, r24
    3d02:	eb 01       	movw	r28, r22
    3d04:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3d08:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3d0c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <xStreamBufferReset>
    3d10:	b8 01       	movw	r22, r16
    3d12:	85 e7       	ldi	r24, 0x75	; 117
    3d14:	98 e1       	ldi	r25, 0x18	; 24
    3d16:	0e 94 35 2b 	call	0x566a	; 0x566a <strcpy>
    3d1a:	20 97       	sbiw	r28, 0x00	; 0
    3d1c:	79 f0       	breq	.+30     	; 0x3d3c <_upload_message+0x44>
    3d1e:	e5 e7       	ldi	r30, 0x75	; 117
    3d20:	f8 e1       	ldi	r31, 0x18	; 24
    3d22:	01 90       	ld	r0, Z+
    3d24:	00 20       	and	r0, r0
    3d26:	e9 f7       	brne	.-6      	; 0x3d22 <_upload_message+0x2a>
    3d28:	31 97       	sbiw	r30, 0x01	; 1
    3d2a:	80 e2       	ldi	r24, 0x20	; 32
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	be 01       	movw	r22, r28
    3d34:	85 e7       	ldi	r24, 0x75	; 117
    3d36:	98 e1       	ldi	r25, 0x18	; 24
    3d38:	0e 94 2a 2b 	call	0x5654	; 0x5654 <strcat>
    3d3c:	e5 e7       	ldi	r30, 0x75	; 117
    3d3e:	f8 e1       	ldi	r31, 0x18	; 24
    3d40:	df 01       	movw	r26, r30
    3d42:	0d 90       	ld	r0, X+
    3d44:	00 20       	and	r0, r0
    3d46:	e9 f7       	brne	.-6      	; 0x3d42 <_upload_message+0x4a>
    3d48:	11 97       	sbiw	r26, 0x01	; 1
    3d4a:	8d e0       	ldi	r24, 0x0D	; 13
    3d4c:	9a e0       	ldi	r25, 0x0A	; 10
    3d4e:	11 96       	adiw	r26, 0x01	; 1
    3d50:	9c 93       	st	X, r25
    3d52:	8e 93       	st	-X, r24
    3d54:	12 96       	adiw	r26, 0x02	; 2
    3d56:	1c 92       	st	X, r1
    3d58:	01 90       	ld	r0, Z+
    3d5a:	00 20       	and	r0, r0
    3d5c:	e9 f7       	brne	.-6      	; 0x3d58 <_upload_message+0x60>
    3d5e:	31 97       	sbiw	r30, 0x01	; 1
    3d60:	e5 57       	subi	r30, 0x75	; 117
    3d62:	f8 41       	sbci	r31, 0x18	; 24
    3d64:	ae 2f       	mov	r26, r30
    3d66:	85 e7       	ldi	r24, 0x75	; 117
    3d68:	98 e1       	ldi	r25, 0x18	; 24
    3d6a:	ac 01       	movw	r20, r24
    3d6c:	6a 2f       	mov	r22, r26
    3d6e:	80 91 de 18 	lds	r24, 0x18DE	; 0x8018de <_rn2483_serial>
    3d72:	90 91 df 18 	lds	r25, 0x18DF	; 0x8018df <_rn2483_serial+0x1>
    3d76:	f7 d4       	rcall	.+2542   	; 0x4766 <serial_send_bytes>
    3d78:	81 11       	cpse	r24, r1
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <_upload_message+0xa6>
    3d7c:	08 e2       	ldi	r16, 0x28	; 40
    3d7e:	15 e0       	ldi	r17, 0x05	; 5
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	4d e2       	ldi	r20, 0x2D	; 45
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	65 e6       	ldi	r22, 0x65	; 101
    3d8a:	79 e1       	ldi	r23, 0x19	; 25
    3d8c:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3d90:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3d94:	0e 94 c8 10 	call	0x2190	; 0x2190 <xStreamBufferReceive>
    3d98:	85 e6       	ldi	r24, 0x65	; 101
    3d9a:	99 e1       	ldi	r25, 0x19	; 25
    3d9c:	02 c0       	rjmp	.+4      	; 0x3da2 <_upload_message+0xaa>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <_reply2return_code>:
    3dac:	2f 92       	push	r2
    3dae:	3f 92       	push	r3
    3db0:	4f 92       	push	r4
    3db2:	5f 92       	push	r5
    3db4:	6f 92       	push	r6
    3db6:	7f 92       	push	r7
    3db8:	8f 92       	push	r8
    3dba:	9f 92       	push	r9
    3dbc:	af 92       	push	r10
    3dbe:	bf 92       	push	r11
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	5c 01       	movw	r10, r24
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	01 90       	ld	r0, Z+
    3dd6:	00 20       	and	r0, r0
    3dd8:	e9 f7       	brne	.-6      	; 0x3dd4 <_reply2return_code+0x28>
    3dda:	31 97       	sbiw	r30, 0x01	; 1
    3ddc:	6f 01       	movw	r12, r30
    3dde:	c8 1a       	sub	r12, r24
    3de0:	d9 0a       	sbc	r13, r25
    3de2:	5c 2c       	mov	r5, r12
    3de4:	0f 2e       	mov	r0, r31
    3de6:	fc e3       	ldi	r31, 0x3C	; 60
    3de8:	8f 2e       	mov	r8, r31
    3dea:	f7 e0       	ldi	r31, 0x07	; 7
    3dec:	9f 2e       	mov	r9, r31
    3dee:	f0 2d       	mov	r31, r0
    3df0:	e1 2c       	mov	r14, r1
    3df2:	f1 2c       	mov	r15, r1
    3df4:	4c 2c       	mov	r4, r12
    3df6:	37 01       	movw	r6, r14
    3df8:	f4 01       	movw	r30, r8
    3dfa:	01 81       	ldd	r16, Z+1	; 0x01
    3dfc:	12 81       	ldd	r17, Z+2	; 0x02
    3dfe:	e8 01       	movw	r28, r16
    3e00:	09 90       	ld	r0, Y+
    3e02:	00 20       	and	r0, r0
    3e04:	e9 f7       	brne	.-6      	; 0x3e00 <_reply2return_code+0x54>
    3e06:	21 97       	sbiw	r28, 0x01	; 1
    3e08:	c0 1b       	sub	r28, r16
    3e0a:	d1 0b       	sbc	r29, r17
    3e0c:	3c 2e       	mov	r3, r28
    3e0e:	f9 e0       	ldi	r31, 0x09	; 9
    3e10:	cf 16       	cp	r12, r31
    3e12:	d1 04       	cpc	r13, r1
    3e14:	58 f0       	brcs	.+22     	; 0x3e2c <_reply2return_code+0x80>
    3e16:	f4 01       	movw	r30, r8
    3e18:	20 80       	ld	r2, Z
    3e1a:	fe e0       	ldi	r31, 0x0E	; 14
    3e1c:	2f 12       	cpse	r2, r31
    3e1e:	06 c0       	rjmp	.+12     	; 0x3e2c <_reply2return_code+0x80>
    3e20:	b8 01       	movw	r22, r16
    3e22:	c5 01       	movw	r24, r10
    3e24:	0e 94 05 2b 	call	0x560a	; 0x560a <strcasestr>
    3e28:	89 2b       	or	r24, r25
    3e2a:	09 f5       	brne	.+66     	; 0x3e6e <_reply2return_code+0xc2>
    3e2c:	44 2d       	mov	r20, r4
    3e2e:	35 14       	cp	r3, r5
    3e30:	08 f4       	brcc	.+2      	; 0x3e34 <_reply2return_code+0x88>
    3e32:	4c 2f       	mov	r20, r28
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	b8 01       	movw	r22, r16
    3e38:	c5 01       	movw	r24, r10
    3e3a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <strncasecmp>
    3e3e:	89 2b       	or	r24, r25
    3e40:	49 f4       	brne	.+18     	; 0x3e54 <_reply2return_code+0xa8>
    3e42:	f3 01       	movw	r30, r6
    3e44:	ee 0f       	add	r30, r30
    3e46:	ff 1f       	adc	r31, r31
    3e48:	e6 0d       	add	r30, r6
    3e4a:	f7 1d       	adc	r31, r7
    3e4c:	e4 5c       	subi	r30, 0xC4	; 196
    3e4e:	f8 4f       	sbci	r31, 0xF8	; 248
    3e50:	20 80       	ld	r2, Z
    3e52:	0d c0       	rjmp	.+26     	; 0x3e6e <_reply2return_code+0xc2>
    3e54:	8f ef       	ldi	r24, 0xFF	; 255
    3e56:	e8 1a       	sub	r14, r24
    3e58:	f8 0a       	sbc	r15, r24
    3e5a:	e3 e0       	ldi	r30, 0x03	; 3
    3e5c:	8e 0e       	add	r8, r30
    3e5e:	91 1c       	adc	r9, r1
    3e60:	f1 e1       	ldi	r31, 0x11	; 17
    3e62:	ef 16       	cp	r14, r31
    3e64:	f1 04       	cpc	r15, r1
    3e66:	39 f6       	brne	.-114    	; 0x3df6 <_reply2return_code+0x4a>
    3e68:	68 94       	set
    3e6a:	22 24       	eor	r2, r2
    3e6c:	24 f8       	bld	r2, 4
    3e6e:	82 2d       	mov	r24, r2
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	bf 90       	pop	r11
    3e82:	af 90       	pop	r10
    3e84:	9f 90       	pop	r9
    3e86:	8f 90       	pop	r8
    3e88:	7f 90       	pop	r7
    3e8a:	6f 90       	pop	r6
    3e8c:	5f 90       	pop	r5
    3e8e:	4f 90       	pop	r4
    3e90:	3f 90       	pop	r3
    3e92:	2f 90       	pop	r2
    3e94:	08 95       	ret

00003e96 <_upload_message_rc>:
    3e96:	30 df       	rcall	.-416    	; 0x3cf8 <_upload_message>
    3e98:	89 cf       	rjmp	.-238    	; 0x3dac <_reply2return_code>
    3e9a:	08 95       	ret

00003e9c <lora_driver_flush_buffers>:
    3e9c:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    3ea0:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3ea4:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <xStreamBufferReset>
    3ea8:	08 95       	ret

00003eaa <lora_driver_create>:
    3eaa:	8f 92       	push	r8
    3eac:	9f 92       	push	r9
    3eae:	af 92       	push	r10
    3eb0:	cf 92       	push	r12
    3eb2:	ef 92       	push	r14
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	cf 93       	push	r28
    3eba:	c8 2f       	mov	r28, r24
    3ebc:	8b 01       	movw	r16, r22
    3ebe:	41 e0       	ldi	r20, 0x01	; 1
    3ec0:	60 e0       	ldi	r22, 0x00	; 0
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	88 ec       	ldi	r24, 0xC8	; 200
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xStreamBufferGenericCreate>
    3ecc:	90 93 dd 18 	sts	0x18DD, r25	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    3ed0:	80 93 dc 18 	sts	0x18DC, r24	; 0x8018dc <_serial_reply_buffer_handle>
    3ed4:	10 93 db 18 	sts	0x18DB, r17	; 0x8018db <_downlinkMessageBuffer+0x1>
    3ed8:	00 93 da 18 	sts	0x18DA, r16	; 0x8018da <_downlinkMessageBuffer>
    3edc:	0f 2e       	mov	r0, r31
    3ede:	f6 e3       	ldi	r31, 0x36	; 54
    3ee0:	8f 2e       	mov	r8, r31
    3ee2:	fe e1       	ldi	r31, 0x1E	; 30
    3ee4:	9f 2e       	mov	r9, r31
    3ee6:	f0 2d       	mov	r31, r0
    3ee8:	68 94       	set
    3eea:	aa 24       	eor	r10, r10
    3eec:	a6 f8       	bld	r10, 6
    3eee:	68 94       	set
    3ef0:	cc 24       	eor	r12, r12
    3ef2:	c6 f8       	bld	r12, 6
    3ef4:	e1 2c       	mov	r14, r1
    3ef6:	00 e0       	ldi	r16, 0x00	; 0
    3ef8:	23 e0       	ldi	r18, 0x03	; 3
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	51 ee       	ldi	r21, 0xE1	; 225
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	8c 2f       	mov	r24, r28
    3f04:	74 d3       	rcall	.+1768   	; 0x45ee <serial_new_instance>
    3f06:	90 93 df 18 	sts	0x18DF, r25	; 0x8018df <_rn2483_serial+0x1>
    3f0a:	80 93 de 18 	sts	0x18DE, r24	; 0x8018de <_rn2483_serial>
    3f0e:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    3f12:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    3f16:	64 e0       	ldi	r22, 0x04	; 4
    3f18:	87 e0       	ldi	r24, 0x07	; 7
    3f1a:	91 e0       	ldi	r25, 0x01	; 1
    3f1c:	19 95       	eicall
    3f1e:	cf 91       	pop	r28
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	ef 90       	pop	r14
    3f26:	cf 90       	pop	r12
    3f28:	af 90       	pop	r10
    3f2a:	9f 90       	pop	r9
    3f2c:	8f 90       	pop	r8
    3f2e:	08 95       	ret

00003f30 <lora_driver_reset_rn2483>:
    3f30:	88 23       	and	r24, r24
    3f32:	49 f0       	breq	.+18     	; 0x3f46 <lora_driver_reset_rn2483+0x16>
    3f34:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <register_access+0x12>
    3f38:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <register_access+0x13>
    3f3c:	64 e0       	ldi	r22, 0x04	; 4
    3f3e:	88 e0       	ldi	r24, 0x08	; 8
    3f40:	91 e0       	ldi	r25, 0x01	; 1
    3f42:	19 95       	eicall
    3f44:	08 95       	ret
    3f46:	e0 91 d1 19 	lds	r30, 0x19D1	; 0x8019d1 <register_access+0x8>
    3f4a:	f0 91 d2 19 	lds	r31, 0x19D2	; 0x8019d2 <register_access+0x9>
    3f4e:	64 e0       	ldi	r22, 0x04	; 4
    3f50:	88 e0       	ldi	r24, 0x08	; 8
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	19 95       	eicall
    3f56:	08 95       	ret

00003f58 <lora_driver_rn2483_factory_reset>:
    3f58:	60 e0       	ldi	r22, 0x00	; 0
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	82 ec       	ldi	r24, 0xC2	; 194
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	cb de       	rcall	.-618    	; 0x3cf8 <_upload_message>
    3f62:	e5 e6       	ldi	r30, 0x65	; 101
    3f64:	f9 e1       	ldi	r31, 0x19	; 25
    3f66:	01 90       	ld	r0, Z+
    3f68:	00 20       	and	r0, r0
    3f6a:	e9 f7       	brne	.-6      	; 0x3f66 <lora_driver_rn2483_factory_reset+0xe>
    3f6c:	31 97       	sbiw	r30, 0x01	; 1
    3f6e:	e5 56       	subi	r30, 0x65	; 101
    3f70:	f9 41       	sbci	r31, 0x19	; 25
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	75 97       	sbiw	r30, 0x15	; 21
    3f76:	08 f0       	brcs	.+2      	; 0x3f7a <lora_driver_rn2483_factory_reset+0x22>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	08 95       	ret

00003f7c <lora_driver_get_rn2483_hweui>:
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	ec 01       	movw	r28, r24
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	83 ed       	ldi	r24, 0xD3	; 211
    3f88:	94 e0       	ldi	r25, 0x04	; 4
    3f8a:	b6 de       	rcall	.-660    	; 0x3cf8 <_upload_message>
    3f8c:	e5 e6       	ldi	r30, 0x65	; 101
    3f8e:	f9 e1       	ldi	r31, 0x19	; 25
    3f90:	01 90       	ld	r0, Z+
    3f92:	00 20       	and	r0, r0
    3f94:	e9 f7       	brne	.-6      	; 0x3f90 <lora_driver_get_rn2483_hweui+0x14>
    3f96:	e6 57       	subi	r30, 0x76	; 118
    3f98:	f9 41       	sbci	r31, 0x19	; 25
    3f9a:	39 f4       	brne	.+14     	; 0x3faa <lora_driver_get_rn2483_hweui+0x2e>
    3f9c:	65 e6       	ldi	r22, 0x65	; 101
    3f9e:	79 e1       	ldi	r23, 0x19	; 25
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	0e 94 35 2b 	call	0x566a	; 0x566a <strcpy>
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <lora_driver_get_rn2483_hweui+0x32>
    3faa:	18 82       	st	Y, r1
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <lora_driver_set_device_identifier>:
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	01 90       	ld	r0, Z+
    3fb8:	00 20       	and	r0, r0
    3fba:	e9 f7       	brne	.-6      	; 0x3fb6 <lora_driver_set_device_identifier+0x2>
    3fbc:	9f 01       	movw	r18, r30
    3fbe:	21 51       	subi	r18, 0x11	; 17
    3fc0:	31 09       	sbc	r19, r1
    3fc2:	28 17       	cp	r18, r24
    3fc4:	39 07       	cpc	r19, r25
    3fc6:	29 f4       	brne	.+10     	; 0x3fd2 <lora_driver_set_device_identifier+0x1e>
    3fc8:	bc 01       	movw	r22, r24
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	95 e0       	ldi	r25, 0x05	; 5
    3fce:	63 cf       	rjmp	.-314    	; 0x3e96 <_upload_message_rc>
    3fd0:	08 95       	ret
    3fd2:	89 e0       	ldi	r24, 0x09	; 9
    3fd4:	08 95       	ret

00003fd6 <lora_driver_set_application_identifier>:
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	01 90       	ld	r0, Z+
    3fda:	00 20       	and	r0, r0
    3fdc:	e9 f7       	brne	.-6      	; 0x3fd8 <lora_driver_set_application_identifier+0x2>
    3fde:	9f 01       	movw	r18, r30
    3fe0:	21 51       	subi	r18, 0x11	; 17
    3fe2:	31 09       	sbc	r19, r1
    3fe4:	28 17       	cp	r18, r24
    3fe6:	39 07       	cpc	r19, r25
    3fe8:	29 f4       	brne	.+10     	; 0x3ff4 <lora_driver_set_application_identifier+0x1e>
    3fea:	bc 01       	movw	r22, r24
    3fec:	80 e1       	ldi	r24, 0x10	; 16
    3fee:	95 e0       	ldi	r25, 0x05	; 5
    3ff0:	52 cf       	rjmp	.-348    	; 0x3e96 <_upload_message_rc>
    3ff2:	08 95       	ret
    3ff4:	89 e0       	ldi	r24, 0x09	; 9
    3ff6:	08 95       	ret

00003ff8 <lora_driver_set_application_key>:
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	01 90       	ld	r0, Z+
    3ffc:	00 20       	and	r0, r0
    3ffe:	e9 f7       	brne	.-6      	; 0x3ffa <lora_driver_set_application_key+0x2>
    4000:	9f 01       	movw	r18, r30
    4002:	21 52       	subi	r18, 0x21	; 33
    4004:	31 09       	sbc	r19, r1
    4006:	28 17       	cp	r18, r24
    4008:	39 07       	cpc	r19, r25
    400a:	29 f4       	brne	.+10     	; 0x4016 <lora_driver_set_application_key+0x1e>
    400c:	bc 01       	movw	r22, r24
    400e:	8f e1       	ldi	r24, 0x1F	; 31
    4010:	95 e0       	ldi	r25, 0x05	; 5
    4012:	41 cf       	rjmp	.-382    	; 0x3e96 <_upload_message_rc>
    4014:	08 95       	ret
    4016:	89 e0       	ldi	r24, 0x09	; 9
    4018:	08 95       	ret

0000401a <lora_driver_save_mac>:
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	8e e5       	ldi	r24, 0x5E	; 94
    4020:	95 e0       	ldi	r25, 0x05	; 5
    4022:	39 cf       	rjmp	.-398    	; 0x3e96 <_upload_message_rc>
    4024:	08 95       	ret

00004026 <lora_driver_join>:
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	e8 2f       	mov	r30, r24
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	ee 0f       	add	r30, r30
    4030:	ff 1f       	adc	r31, r31
    4032:	e8 5c       	subi	r30, 0xC8	; 200
    4034:	f8 4f       	sbci	r31, 0xF8	; 248
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	87 e6       	ldi	r24, 0x67	; 103
    403c:	95 e0       	ldi	r25, 0x05	; 5
    403e:	2b df       	rcall	.-426    	; 0x3e96 <_upload_message_rc>
    4040:	81 11       	cpse	r24, r1
    4042:	14 c0       	rjmp	.+40     	; 0x406c <lora_driver_join+0x46>
    4044:	08 e2       	ldi	r16, 0x28	; 40
    4046:	15 e0       	ldi	r17, 0x05	; 5
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	4d e2       	ldi	r20, 0x2D	; 45
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	65 e6       	ldi	r22, 0x65	; 101
    4052:	79 e1       	ldi	r23, 0x19	; 25
    4054:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    4058:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    405c:	0e 94 c8 10 	call	0x2190	; 0x2190 <xStreamBufferReceive>
    4060:	88 23       	and	r24, r24
    4062:	21 f0       	breq	.+8      	; 0x406c <lora_driver_join+0x46>
    4064:	85 e6       	ldi	r24, 0x65	; 101
    4066:	99 e1       	ldi	r25, 0x19	; 25
    4068:	a1 de       	rcall	.-702    	; 0x3dac <_reply2return_code>
    406a:	03 c0       	rjmp	.+6      	; 0x4072 <lora_driver_join+0x4c>
    406c:	85 e6       	ldi	r24, 0x65	; 101
    406e:	99 e1       	ldi	r25, 0x19	; 25
    4070:	9d de       	rcall	.-710    	; 0x3dac <_reply2return_code>
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	08 95       	ret

00004078 <lora_driver_sent_upload_message>:
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	1f 92       	push	r1
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
    4086:	db 01       	movw	r26, r22
    4088:	11 96       	adiw	r26, 0x01	; 1
    408a:	9c 91       	ld	r25, X
    408c:	11 97       	sbiw	r26, 0x01	; 1
    408e:	95 31       	cpi	r25, 0x15	; 21
    4090:	08 f0       	brcs	.+2      	; 0x4094 <lora_driver_sent_upload_message+0x1c>
    4092:	b4 c0       	rjmp	.+360    	; 0x41fc <lora_driver_sent_upload_message+0x184>
    4094:	99 23       	and	r25, r25
    4096:	81 f1       	breq	.+96     	; 0x40f8 <lora_driver_sent_upload_message+0x80>
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	27 2f       	mov	r18, r23
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	46 2f       	mov	r20, r22
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	fd 01       	movw	r30, r26
    40a6:	e4 0f       	add	r30, r20
    40a8:	f5 1f       	adc	r31, r21
    40aa:	92 81       	ldd	r25, Z+2	; 0x02
    40ac:	92 95       	swap	r25
    40ae:	9f 70       	andi	r25, 0x0F	; 15
    40b0:	9a 30       	cpi	r25, 0x0A	; 10
    40b2:	10 f0       	brcs	.+4      	; 0x40b8 <lora_driver_sent_upload_message+0x40>
    40b4:	99 5c       	subi	r25, 0xC9	; 201
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <lora_driver_sent_upload_message+0x42>
    40b8:	90 5d       	subi	r25, 0xD0	; 208
    40ba:	f9 01       	movw	r30, r18
    40bc:	ea 50       	subi	r30, 0x0A	; 10
    40be:	f7 4e       	sbci	r31, 0xE7	; 231
    40c0:	90 83       	st	Z, r25
    40c2:	2f 5f       	subi	r18, 0xFF	; 255
    40c4:	3f 4f       	sbci	r19, 0xFF	; 255
    40c6:	fd 01       	movw	r30, r26
    40c8:	e4 0f       	add	r30, r20
    40ca:	f5 1f       	adc	r31, r21
    40cc:	92 81       	ldd	r25, Z+2	; 0x02
    40ce:	9f 70       	andi	r25, 0x0F	; 15
    40d0:	49 2f       	mov	r20, r25
    40d2:	50 e0       	ldi	r21, 0x00	; 0
    40d4:	4a 30       	cpi	r20, 0x0A	; 10
    40d6:	51 05       	cpc	r21, r1
    40d8:	14 f0       	brlt	.+4      	; 0x40de <lora_driver_sent_upload_message+0x66>
    40da:	99 5c       	subi	r25, 0xC9	; 201
    40dc:	01 c0       	rjmp	.+2      	; 0x40e0 <lora_driver_sent_upload_message+0x68>
    40de:	90 5d       	subi	r25, 0xD0	; 208
    40e0:	f9 01       	movw	r30, r18
    40e2:	ea 50       	subi	r30, 0x0A	; 10
    40e4:	f7 4e       	sbci	r31, 0xE7	; 231
    40e6:	90 83       	st	Z, r25
    40e8:	7e 5f       	subi	r23, 0xFE	; 254
    40ea:	6f 5f       	subi	r22, 0xFF	; 255
    40ec:	11 96       	adiw	r26, 0x01	; 1
    40ee:	9c 91       	ld	r25, X
    40f0:	11 97       	sbiw	r26, 0x01	; 1
    40f2:	69 17       	cp	r22, r25
    40f4:	98 f2       	brcs	.-90     	; 0x409c <lora_driver_sent_upload_message+0x24>
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <lora_driver_sent_upload_message+0x82>
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	e7 2f       	mov	r30, r23
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	ea 50       	subi	r30, 0x0A	; 10
    4100:	f7 4e       	sbci	r31, 0xE7	; 231
    4102:	10 82       	st	Z, r1
    4104:	4c 91       	ld	r20, X
    4106:	81 11       	cpse	r24, r1
    4108:	03 c0       	rjmp	.+6      	; 0x4110 <lora_driver_sent_upload_message+0x98>
    410a:	80 e7       	ldi	r24, 0x70	; 112
    410c:	95 e0       	ldi	r25, 0x05	; 5
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <lora_driver_sent_upload_message+0x9c>
    4110:	82 e7       	ldi	r24, 0x72	; 114
    4112:	95 e0       	ldi	r25, 0x05	; 5
    4114:	26 ef       	ldi	r18, 0xF6	; 246
    4116:	38 e1       	ldi	r19, 0x18	; 24
    4118:	3f 93       	push	r19
    411a:	2f 93       	push	r18
    411c:	1f 92       	push	r1
    411e:	4f 93       	push	r20
    4120:	9f 93       	push	r25
    4122:	8f 93       	push	r24
    4124:	86 e7       	ldi	r24, 0x76	; 118
    4126:	95 e0       	ldi	r25, 0x05	; 5
    4128:	9f 93       	push	r25
    412a:	8f 93       	push	r24
    412c:	88 e3       	ldi	r24, 0x38	; 56
    412e:	99 e1       	ldi	r25, 0x19	; 25
    4130:	9f 93       	push	r25
    4132:	8f 93       	push	r24
    4134:	0e 94 97 2b 	call	0x572e	; 0x572e <sprintf>
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	88 e3       	ldi	r24, 0x38	; 56
    413e:	99 e1       	ldi	r25, 0x19	; 25
    4140:	aa de       	rcall	.-684    	; 0x3e96 <_upload_message_rc>
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	81 11       	cpse	r24, r1
    414e:	59 c0       	rjmp	.+178    	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    4150:	08 e2       	ldi	r16, 0x28	; 40
    4152:	15 e0       	ldi	r17, 0x05	; 5
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4d e2       	ldi	r20, 0x2D	; 45
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	65 e6       	ldi	r22, 0x65	; 101
    415e:	79 e1       	ldi	r23, 0x19	; 25
    4160:	80 91 dc 18 	lds	r24, 0x18DC	; 0x8018dc <_serial_reply_buffer_handle>
    4164:	90 91 dd 18 	lds	r25, 0x18DD	; 0x8018dd <_serial_reply_buffer_handle+0x1>
    4168:	0e 94 c8 10 	call	0x2190	; 0x2190 <xStreamBufferReceive>
    416c:	88 23       	and	r24, r24
    416e:	09 f4       	brne	.+2      	; 0x4172 <lora_driver_sent_upload_message+0xfa>
    4170:	47 c0       	rjmp	.+142    	; 0x4200 <lora_driver_sent_upload_message+0x188>
    4172:	85 e6       	ldi	r24, 0x65	; 101
    4174:	99 e1       	ldi	r25, 0x19	; 25
    4176:	1a de       	rcall	.-972    	; 0x3dac <_reply2return_code>
    4178:	8e 30       	cpi	r24, 0x0E	; 14
    417a:	09 f0       	breq	.+2      	; 0x417e <lora_driver_sent_upload_message+0x106>
    417c:	42 c0       	rjmp	.+132    	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    417e:	87 e0       	ldi	r24, 0x07	; 7
    4180:	89 83       	std	Y+1, r24	; 0x01
    4182:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <_downlinkMessageBuffer>
    4186:	90 91 db 18 	lds	r25, 0x18DB	; 0x8018db <_downlinkMessageBuffer+0x1>
    418a:	89 2b       	or	r24, r25
    418c:	a9 f1       	breq	.+106    	; 0x41f8 <lora_driver_sent_upload_message+0x180>
    418e:	be 01       	movw	r22, r28
    4190:	6f 5f       	subi	r22, 0xFF	; 255
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	85 e6       	ldi	r24, 0x65	; 101
    4196:	99 e1       	ldi	r25, 0x19	; 25
    4198:	68 d1       	rcall	.+720    	; 0x446a <decode_port_no>
    419a:	80 93 e0 18 	sts	0x18E0, r24	; 0x8018e0 <_downlink_payload>
    419e:	e9 81       	ldd	r30, Y+1	; 0x01
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	eb 59       	subi	r30, 0x9B	; 155
    41a4:	f6 4e       	sbci	r31, 0xE6	; 230
    41a6:	df 01       	movw	r26, r30
    41a8:	0d 90       	ld	r0, X+
    41aa:	00 20       	and	r0, r0
    41ac:	e9 f7       	brne	.-6      	; 0x41a8 <lora_driver_sent_upload_message+0x130>
    41ae:	11 97       	sbiw	r26, 0x01	; 1
    41b0:	ae 1b       	sub	r26, r30
    41b2:	bf 0b       	sbc	r27, r31
    41b4:	aa 23       	and	r26, r26
    41b6:	91 f0       	breq	.+36     	; 0x41dc <lora_driver_sent_upload_message+0x164>
    41b8:	bb 27       	eor	r27, r27
    41ba:	cd 01       	movw	r24, r26
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	9c 01       	movw	r18, r24
    41c0:	12 f4       	brpl	.+4      	; 0x41c6 <lora_driver_sent_upload_message+0x14e>
    41c2:	2f 5f       	subi	r18, 0xFF	; 255
    41c4:	3f 4f       	sbci	r19, 0xFF	; 255
    41c6:	35 95       	asr	r19
    41c8:	27 95       	ror	r18
    41ca:	20 93 e1 18 	sts	0x18E1, r18	; 0x8018e1 <_downlink_payload+0x1>
    41ce:	af 01       	movw	r20, r30
    41d0:	4f 5f       	subi	r20, 0xFF	; 255
    41d2:	5f 4f       	sbci	r21, 0xFF	; 255
    41d4:	64 e1       	ldi	r22, 0x14	; 20
    41d6:	82 ee       	ldi	r24, 0xE2	; 226
    41d8:	98 e1       	ldi	r25, 0x18	; 24
    41da:	73 d1       	rcall	.+742    	; 0x44c2 <decode_hexadecimal_string_bytes>
    41dc:	01 e0       	ldi	r16, 0x01	; 1
    41de:	10 e0       	ldi	r17, 0x00	; 0
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	46 e1       	ldi	r20, 0x16	; 22
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	60 ee       	ldi	r22, 0xE0	; 224
    41ea:	78 e1       	ldi	r23, 0x18	; 24
    41ec:	80 91 da 18 	lds	r24, 0x18DA	; 0x8018da <_downlinkMessageBuffer>
    41f0:	90 91 db 18 	lds	r25, 0x18DB	; 0x8018db <_downlinkMessageBuffer+0x1>
    41f4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xStreamBufferSend>
    41f8:	8e e0       	ldi	r24, 0x0E	; 14
    41fa:	03 c0       	rjmp	.+6      	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    41fc:	84 e1       	ldi	r24, 0x14	; 20
    41fe:	01 c0       	rjmp	.+2      	; 0x4202 <lora_driver_sent_upload_message+0x18a>
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	0f 90       	pop	r0
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	08 95       	ret

0000420e <lora_driver_set_adaptive_data_rate>:
    420e:	81 30       	cpi	r24, 0x01	; 1
    4210:	19 f0       	breq	.+6      	; 0x4218 <lora_driver_set_adaptive_data_rate+0xa>
    4212:	66 e8       	ldi	r22, 0x86	; 134
    4214:	75 e0       	ldi	r23, 0x05	; 5
    4216:	02 c0       	rjmp	.+4      	; 0x421c <lora_driver_set_adaptive_data_rate+0xe>
    4218:	6f e5       	ldi	r22, 0x5F	; 95
    421a:	76 e0       	ldi	r23, 0x06	; 6
    421c:	8a e8       	ldi	r24, 0x8A	; 138
    421e:	95 e0       	ldi	r25, 0x05	; 5
    4220:	3a ce       	rjmp	.-908    	; 0x3e96 <_upload_message_rc>
    4222:	08 95       	ret

00004224 <lora_driver_set_receive_delay>:
    4224:	9f 93       	push	r25
    4226:	8f 93       	push	r24
    4228:	8b eb       	ldi	r24, 0xBB	; 187
    422a:	95 e0       	ldi	r25, 0x05	; 5
    422c:	9f 93       	push	r25
    422e:	8f 93       	push	r24
    4230:	88 e3       	ldi	r24, 0x38	; 56
    4232:	99 e1       	ldi	r25, 0x19	; 25
    4234:	9f 93       	push	r25
    4236:	8f 93       	push	r24
    4238:	0e 94 97 2b 	call	0x572e	; 0x572e <sprintf>
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	88 e3       	ldi	r24, 0x38	; 56
    4242:	99 e1       	ldi	r25, 0x19	; 25
    4244:	28 de       	rcall	.-944    	; 0x3e96 <_upload_message_rc>
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	08 95       	ret

00004254 <lora_driver_configure_to_eu868>:
    4254:	2f 92       	push	r2
    4256:	3f 92       	push	r3
    4258:	4f 92       	push	r4
    425a:	5f 92       	push	r5
    425c:	6f 92       	push	r6
    425e:	7f 92       	push	r7
    4260:	8f 92       	push	r8
    4262:	9f 92       	push	r9
    4264:	af 92       	push	r10
    4266:	bf 92       	push	r11
    4268:	cf 92       	push	r12
    426a:	df 92       	push	r13
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	a0 97       	sbiw	r28, 0x20	; 32
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	68 ee       	ldi	r22, 0xE8	; 232
    428a:	75 e0       	ldi	r23, 0x05	; 5
    428c:	84 ef       	ldi	r24, 0xF4	; 244
    428e:	95 e0       	ldi	r25, 0x05	; 5
    4290:	33 dd       	rcall	.-1434   	; 0x3cf8 <_upload_message>
    4292:	8c dd       	rcall	.-1256   	; 0x3dac <_reply2return_code>
    4294:	81 11       	cpse	r24, r1
    4296:	a3 c0       	rjmp	.+326    	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4298:	80 e2       	ldi	r24, 0x20	; 32
    429a:	e3 e2       	ldi	r30, 0x23	; 35
    429c:	f2 e0       	ldi	r31, 0x02	; 2
    429e:	de 01       	movw	r26, r28
    42a0:	11 96       	adiw	r26, 0x01	; 1
    42a2:	01 90       	ld	r0, Z+
    42a4:	0d 92       	st	X+, r0
    42a6:	8a 95       	dec	r24
    42a8:	e1 f7       	brne	.-8      	; 0x42a2 <lora_driver_configure_to_eu868+0x4e>
    42aa:	9e 01       	movw	r18, r28
    42ac:	2f 5f       	subi	r18, 0xFF	; 255
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	69 01       	movw	r12, r18
    42b2:	e1 2c       	mov	r14, r1
    42b4:	f1 2c       	mov	r15, r1
    42b6:	0f 2e       	mov	r0, r31
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	af 2e       	mov	r10, r31
    42bc:	f6 e0       	ldi	r31, 0x06	; 6
    42be:	bf 2e       	mov	r11, r31
    42c0:	f0 2d       	mov	r31, r0
    42c2:	08 e3       	ldi	r16, 0x38	; 56
    42c4:	19 e1       	ldi	r17, 0x19	; 25
    42c6:	0f 2e       	mov	r0, r31
    42c8:	f9 e1       	ldi	r31, 0x19	; 25
    42ca:	4f 2e       	mov	r4, r31
    42cc:	f6 e0       	ldi	r31, 0x06	; 6
    42ce:	5f 2e       	mov	r5, r31
    42d0:	f0 2d       	mov	r31, r0
    42d2:	0f 2e       	mov	r0, r31
    42d4:	f0 e3       	ldi	r31, 0x30	; 48
    42d6:	8f 2e       	mov	r8, r31
    42d8:	f6 e0       	ldi	r31, 0x06	; 6
    42da:	9f 2e       	mov	r9, r31
    42dc:	f0 2d       	mov	r31, r0
    42de:	0f 2e       	mov	r0, r31
    42e0:	fa e4       	ldi	r31, 0x4A	; 74
    42e2:	6f 2e       	mov	r6, r31
    42e4:	f6 e0       	ldi	r31, 0x06	; 6
    42e6:	7f 2e       	mov	r7, r31
    42e8:	f0 2d       	mov	r31, r0
    42ea:	3e 2c       	mov	r3, r14
    42ec:	2f 2c       	mov	r2, r15
    42ee:	ff 92       	push	r15
    42f0:	ef 92       	push	r14
    42f2:	bf 92       	push	r11
    42f4:	af 92       	push	r10
    42f6:	1f 93       	push	r17
    42f8:	0f 93       	push	r16
    42fa:	0e 94 97 2b 	call	0x572e	; 0x572e <sprintf>
    42fe:	60 e0       	ldi	r22, 0x00	; 0
    4300:	70 e0       	ldi	r23, 0x00	; 0
    4302:	c8 01       	movw	r24, r16
    4304:	f9 dc       	rcall	.-1550   	; 0x3cf8 <_upload_message>
    4306:	52 dd       	rcall	.-1372   	; 0x3dac <_reply2return_code>
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	81 11       	cpse	r24, r1
    4316:	63 c0       	rjmp	.+198    	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4318:	32 e0       	ldi	r19, 0x02	; 2
    431a:	3e 15       	cp	r19, r14
    431c:	e8 f4       	brcc	.+58     	; 0x4358 <lora_driver_configure_to_eu868+0x104>
    431e:	f6 01       	movw	r30, r12
    4320:	83 81       	ldd	r24, Z+3	; 0x03
    4322:	8f 93       	push	r24
    4324:	82 81       	ldd	r24, Z+2	; 0x02
    4326:	8f 93       	push	r24
    4328:	81 81       	ldd	r24, Z+1	; 0x01
    432a:	8f 93       	push	r24
    432c:	80 81       	ld	r24, Z
    432e:	8f 93       	push	r24
    4330:	ff 92       	push	r15
    4332:	ef 92       	push	r14
    4334:	5f 92       	push	r5
    4336:	4f 92       	push	r4
    4338:	1f 93       	push	r17
    433a:	0f 93       	push	r16
    433c:	0e 94 97 2b 	call	0x572e	; 0x572e <sprintf>
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	c8 01       	movw	r24, r16
    4346:	d8 dc       	rcall	.-1616   	; 0x3cf8 <_upload_message>
    4348:	31 dd       	rcall	.-1438   	; 0x3dac <_reply2return_code>
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	81 11       	cpse	r24, r1
    4356:	43 c0       	rjmp	.+134    	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4358:	2f 92       	push	r2
    435a:	3f 92       	push	r3
    435c:	9f 92       	push	r9
    435e:	8f 92       	push	r8
    4360:	1f 93       	push	r17
    4362:	0f 93       	push	r16
    4364:	0e 94 97 2b 	call	0x572e	; 0x572e <sprintf>
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	70 e0       	ldi	r23, 0x00	; 0
    436c:	c8 01       	movw	r24, r16
    436e:	c4 dc       	rcall	.-1656   	; 0x3cf8 <_upload_message>
    4370:	1d dd       	rcall	.-1478   	; 0x3dac <_reply2return_code>
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	81 11       	cpse	r24, r1
    4380:	2e c0       	rjmp	.+92     	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    4382:	2f 92       	push	r2
    4384:	3f 92       	push	r3
    4386:	7f 92       	push	r7
    4388:	6f 92       	push	r6
    438a:	1f 93       	push	r17
    438c:	0f 93       	push	r16
    438e:	0e 94 97 2b 	call	0x572e	; 0x572e <sprintf>
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	70 e0       	ldi	r23, 0x00	; 0
    4396:	c8 01       	movw	r24, r16
    4398:	af dc       	rcall	.-1698   	; 0x3cf8 <_upload_message>
    439a:	08 dd       	rcall	.-1520   	; 0x3dac <_reply2return_code>
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	81 11       	cpse	r24, r1
    43aa:	19 c0       	rjmp	.+50     	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    43ac:	3f ef       	ldi	r19, 0xFF	; 255
    43ae:	e3 1a       	sub	r14, r19
    43b0:	f3 0a       	sbc	r15, r19
    43b2:	84 e0       	ldi	r24, 0x04	; 4
    43b4:	c8 0e       	add	r12, r24
    43b6:	d1 1c       	adc	r13, r1
    43b8:	98 e0       	ldi	r25, 0x08	; 8
    43ba:	e9 16       	cp	r14, r25
    43bc:	f1 04       	cpc	r15, r1
    43be:	09 f0       	breq	.+2      	; 0x43c2 <lora_driver_configure_to_eu868+0x16e>
    43c0:	94 cf       	rjmp	.-216    	; 0x42ea <lora_driver_configure_to_eu868+0x96>
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	82 e6       	ldi	r24, 0x62	; 98
    43c8:	96 e0       	ldi	r25, 0x06	; 6
    43ca:	96 dc       	rcall	.-1748   	; 0x3cf8 <_upload_message>
    43cc:	ef dc       	rcall	.-1570   	; 0x3dac <_reply2return_code>
    43ce:	81 11       	cpse	r24, r1
    43d0:	06 c0       	rjmp	.+12     	; 0x43de <lora_driver_configure_to_eu868+0x18a>
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	83 e7       	ldi	r24, 0x73	; 115
    43d8:	96 e0       	ldi	r25, 0x06	; 6
    43da:	8e dc       	rcall	.-1764   	; 0x3cf8 <_upload_message>
    43dc:	e7 dc       	rcall	.-1586   	; 0x3dac <_reply2return_code>
    43de:	a0 96       	adiw	r28, 0x20	; 32
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	ff 90       	pop	r15
    43f4:	ef 90       	pop	r14
    43f6:	df 90       	pop	r13
    43f8:	cf 90       	pop	r12
    43fa:	bf 90       	pop	r11
    43fc:	af 90       	pop	r10
    43fe:	9f 90       	pop	r9
    4400:	8f 90       	pop	r8
    4402:	7f 90       	pop	r7
    4404:	6f 90       	pop	r6
    4406:	5f 90       	pop	r5
    4408:	4f 90       	pop	r4
    440a:	3f 90       	pop	r3
    440c:	2f 90       	pop	r2
    440e:	08 95       	ret

00004410 <lora_driver_set_otaa_identity>:
    4410:	ef 92       	push	r14
    4412:	ff 92       	push	r15
    4414:	0f 93       	push	r16
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	ec 01       	movw	r28, r24
    441e:	8b 01       	movw	r16, r22
    4420:	7a 01       	movw	r14, r20
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	f4 de       	rcall	.-536    	; 0x420e <lora_driver_set_adaptive_data_rate>
    4426:	81 11       	cpse	r24, r1
    4428:	0d c0       	rjmp	.+26     	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    442a:	ce 01       	movw	r24, r28
    442c:	d4 dd       	rcall	.-1112   	; 0x3fd6 <lora_driver_set_application_identifier>
    442e:	81 11       	cpse	r24, r1
    4430:	09 c0       	rjmp	.+18     	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    4432:	c8 01       	movw	r24, r16
    4434:	e1 dd       	rcall	.-1086   	; 0x3ff8 <lora_driver_set_application_key>
    4436:	81 11       	cpse	r24, r1
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    443a:	c7 01       	movw	r24, r14
    443c:	bb dd       	rcall	.-1162   	; 0x3fb4 <lora_driver_set_device_identifier>
    443e:	81 11       	cpse	r24, r1
    4440:	01 c0       	rjmp	.+2      	; 0x4444 <lora_driver_set_otaa_identity+0x34>
    4442:	eb dd       	rcall	.-1066   	; 0x401a <lora_driver_save_mac>
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	1f 91       	pop	r17
    444a:	0f 91       	pop	r16
    444c:	ff 90       	pop	r15
    444e:	ef 90       	pop	r14
    4450:	08 95       	ret

00004452 <lora_driver_map_return_code_to_text>:
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	fc 01       	movw	r30, r24
    4456:	ee 0f       	add	r30, r30
    4458:	ff 1f       	adc	r31, r31
    445a:	8e 0f       	add	r24, r30
    445c:	9f 1f       	adc	r25, r31
    445e:	fc 01       	movw	r30, r24
    4460:	e4 5c       	subi	r30, 0xC4	; 196
    4462:	f8 4f       	sbci	r31, 0xF8	; 248
    4464:	81 81       	ldd	r24, Z+1	; 0x01
    4466:	92 81       	ldd	r25, Z+2	; 0x02
    4468:	08 95       	ret

0000446a <decode_port_no>:
    446a:	dc 01       	movw	r26, r24
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	29 f1       	breq	.+74     	; 0x44ba <decode_port_no+0x50>
    4470:	fb 01       	movw	r30, r22
    4472:	20 81       	ld	r18, Z
    4474:	fc 01       	movw	r30, r24
    4476:	01 90       	ld	r0, Z+
    4478:	00 20       	and	r0, r0
    447a:	e9 f7       	brne	.-6      	; 0x4476 <decode_port_no+0xc>
    447c:	31 97       	sbiw	r30, 0x01	; 1
    447e:	e8 1b       	sub	r30, r24
    4480:	f9 0b       	sbc	r31, r25
    4482:	82 2f       	mov	r24, r18
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	e8 17       	cp	r30, r24
    4488:	f9 07       	cpc	r31, r25
    448a:	c8 f0       	brcs	.+50     	; 0x44be <decode_port_no+0x54>
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	08 c0       	rjmp	.+16     	; 0x44a0 <decode_port_no+0x36>
    4490:	88 0f       	add	r24, r24
    4492:	38 2f       	mov	r19, r24
    4494:	33 0f       	add	r19, r19
    4496:	33 0f       	add	r19, r19
    4498:	83 0f       	add	r24, r19
    449a:	80 53       	subi	r24, 0x30	; 48
    449c:	89 0f       	add	r24, r25
    449e:	2f 5f       	subi	r18, 0xFF	; 255
    44a0:	fd 01       	movw	r30, r26
    44a2:	e2 0f       	add	r30, r18
    44a4:	f1 1d       	adc	r31, r1
    44a6:	90 81       	ld	r25, Z
    44a8:	30 ed       	ldi	r19, 0xD0	; 208
    44aa:	39 0f       	add	r19, r25
    44ac:	3a 30       	cpi	r19, 0x0A	; 10
    44ae:	10 f4       	brcc	.+4      	; 0x44b4 <decode_port_no+0x4a>
    44b0:	91 11       	cpse	r25, r1
    44b2:	ee cf       	rjmp	.-36     	; 0x4490 <decode_port_no+0x26>
    44b4:	fb 01       	movw	r30, r22
    44b6:	20 83       	st	Z, r18
    44b8:	08 95       	ret
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	08 95       	ret
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	08 95       	ret

000044c2 <decode_hexadecimal_string_bytes>:
    44c2:	0f 93       	push	r16
    44c4:	1f 93       	push	r17
    44c6:	cf 93       	push	r28
    44c8:	df 93       	push	r29
    44ca:	dc 01       	movw	r26, r24
    44cc:	ea 01       	movw	r28, r20
    44ce:	20 97       	sbiw	r28, 0x00	; 0
    44d0:	e1 f1       	breq	.+120    	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    44d2:	fa 01       	movw	r30, r20
    44d4:	01 90       	ld	r0, Z+
    44d6:	00 20       	and	r0, r0
    44d8:	e9 f7       	brne	.-6      	; 0x44d4 <decode_hexadecimal_string_bytes+0x12>
    44da:	31 97       	sbiw	r30, 0x01	; 1
    44dc:	e4 1b       	sub	r30, r20
    44de:	f5 0b       	sbc	r31, r21
    44e0:	32 97       	sbiw	r30, 0x02	; 2
    44e2:	10 f5       	brcc	.+68     	; 0x4528 <decode_hexadecimal_string_bytes+0x66>
    44e4:	32 c0       	rjmp	.+100    	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    44e6:	8d 01       	movw	r16, r26
    44e8:	04 0f       	add	r16, r20
    44ea:	15 1f       	adc	r17, r21
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	ae 01       	movw	r20, r28
    44f0:	42 0f       	add	r20, r18
    44f2:	53 1f       	adc	r21, r19
    44f4:	fa 01       	movw	r30, r20
    44f6:	90 81       	ld	r25, Z
    44f8:	91 34       	cpi	r25, 0x41	; 65
    44fa:	28 f0       	brcs	.+10     	; 0x4506 <decode_hexadecimal_string_bytes+0x44>
    44fc:	97 53       	subi	r25, 0x37	; 55
    44fe:	59 2f       	mov	r21, r25
    4500:	52 95       	swap	r21
    4502:	50 7f       	andi	r21, 0xF0	; 240
    4504:	03 c0       	rjmp	.+6      	; 0x450c <decode_hexadecimal_string_bytes+0x4a>
    4506:	59 2f       	mov	r21, r25
    4508:	52 95       	swap	r21
    450a:	50 7f       	andi	r21, 0xF0	; 240
    450c:	2c 0f       	add	r18, r28
    450e:	3d 1f       	adc	r19, r29
    4510:	f9 01       	movw	r30, r18
    4512:	91 81       	ldd	r25, Z+1	; 0x01
    4514:	91 34       	cpi	r25, 0x41	; 65
    4516:	10 f0       	brcs	.+4      	; 0x451c <decode_hexadecimal_string_bytes+0x5a>
    4518:	97 53       	subi	r25, 0x37	; 55
    451a:	01 c0       	rjmp	.+2      	; 0x451e <decode_hexadecimal_string_bytes+0x5c>
    451c:	90 53       	subi	r25, 0x30	; 48
    451e:	95 0f       	add	r25, r21
    4520:	f8 01       	movw	r30, r16
    4522:	90 83       	st	Z, r25
    4524:	8f 5f       	subi	r24, 0xFF	; 255
    4526:	01 c0       	rjmp	.+2      	; 0x452a <decode_hexadecimal_string_bytes+0x68>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	28 2f       	mov	r18, r24
    452c:	22 0f       	add	r18, r18
    452e:	48 2f       	mov	r20, r24
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	fe 01       	movw	r30, r28
    4534:	01 90       	ld	r0, Z+
    4536:	00 20       	and	r0, r0
    4538:	e9 f7       	brne	.-6      	; 0x4534 <decode_hexadecimal_string_bytes+0x72>
    453a:	31 97       	sbiw	r30, 0x01	; 1
    453c:	ec 1b       	sub	r30, r28
    453e:	fd 0b       	sbc	r31, r29
    4540:	4e 17       	cp	r20, r30
    4542:	5f 07       	cpc	r21, r31
    4544:	10 f4       	brcc	.+4      	; 0x454a <decode_hexadecimal_string_bytes+0x88>
    4546:	86 13       	cpse	r24, r22
    4548:	ce cf       	rjmp	.-100    	; 0x44e6 <decode_hexadecimal_string_bytes+0x24>
    454a:	df 91       	pop	r29
    454c:	cf 91       	pop	r28
    454e:	1f 91       	pop	r17
    4550:	0f 91       	pop	r16
    4552:	08 95       	ret

00004554 <reg_read_register>:
    4554:	fc 01       	movw	r30, r24
    4556:	80 81       	ld	r24, Z
    4558:	08 95       	ret

0000455a <reg_read_bit>:
    455a:	fc 01       	movw	r30, r24
    455c:	20 81       	ld	r18, Z
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <reg_read_bit+0xe>
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	6a 95       	dec	r22
    456a:	e2 f7       	brpl	.-8      	; 0x4564 <reg_read_bit+0xa>
    456c:	82 23       	and	r24, r18
    456e:	08 95       	ret

00004570 <reg_read_bits>:
    4570:	fc 01       	movw	r30, r24
    4572:	80 81       	ld	r24, Z
    4574:	86 23       	and	r24, r22
    4576:	08 95       	ret

00004578 <reg_set_register>:
    4578:	fc 01       	movw	r30, r24
    457a:	60 83       	st	Z, r22
    457c:	08 95       	ret

0000457e <reg_clear_register>:
    457e:	fc 01       	movw	r30, r24
    4580:	10 82       	st	Z, r1
    4582:	08 95       	ret

00004584 <reg_set_bit>:
    4584:	fc 01       	movw	r30, r24
    4586:	40 81       	ld	r20, Z
    4588:	21 e0       	ldi	r18, 0x01	; 1
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <reg_set_bit+0xe>
    458e:	22 0f       	add	r18, r18
    4590:	33 1f       	adc	r19, r19
    4592:	6a 95       	dec	r22
    4594:	e2 f7       	brpl	.-8      	; 0x458e <reg_set_bit+0xa>
    4596:	24 2b       	or	r18, r20
    4598:	20 83       	st	Z, r18
    459a:	08 95       	ret

0000459c <reg_set_bits>:
    459c:	fc 01       	movw	r30, r24
    459e:	20 81       	ld	r18, Z
    45a0:	62 2b       	or	r22, r18
    45a2:	60 83       	st	Z, r22
    45a4:	08 95       	ret

000045a6 <reg_toggle_bit>:
    45a6:	fc 01       	movw	r30, r24
    45a8:	40 81       	ld	r20, Z
    45aa:	21 e0       	ldi	r18, 0x01	; 1
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <reg_toggle_bit+0xe>
    45b0:	22 0f       	add	r18, r18
    45b2:	33 1f       	adc	r19, r19
    45b4:	6a 95       	dec	r22
    45b6:	e2 f7       	brpl	.-8      	; 0x45b0 <reg_toggle_bit+0xa>
    45b8:	24 27       	eor	r18, r20
    45ba:	20 83       	st	Z, r18
    45bc:	08 95       	ret

000045be <reg_toggle_bits>:
    45be:	fc 01       	movw	r30, r24
    45c0:	20 81       	ld	r18, Z
    45c2:	62 27       	eor	r22, r18
    45c4:	60 83       	st	Z, r22
    45c6:	08 95       	ret

000045c8 <reg_clear_bit>:
    45c8:	fc 01       	movw	r30, r24
    45ca:	90 81       	ld	r25, Z
    45cc:	21 e0       	ldi	r18, 0x01	; 1
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <reg_clear_bit+0xe>
    45d2:	22 0f       	add	r18, r18
    45d4:	33 1f       	adc	r19, r19
    45d6:	6a 95       	dec	r22
    45d8:	e2 f7       	brpl	.-8      	; 0x45d2 <reg_clear_bit+0xa>
    45da:	20 95       	com	r18
    45dc:	29 23       	and	r18, r25
    45de:	20 83       	st	Z, r18
    45e0:	08 95       	ret

000045e2 <reg_clear_bits>:
    45e2:	fc 01       	movw	r30, r24
    45e4:	90 81       	ld	r25, Z
    45e6:	60 95       	com	r22
    45e8:	69 23       	and	r22, r25
    45ea:	60 83       	st	Z, r22
    45ec:	08 95       	ret

000045ee <serial_new_instance>:
    45ee:	2f 92       	push	r2
    45f0:	3f 92       	push	r3
    45f2:	4f 92       	push	r4
    45f4:	5f 92       	push	r5
    45f6:	6f 92       	push	r6
    45f8:	7f 92       	push	r7
    45fa:	8f 92       	push	r8
    45fc:	9f 92       	push	r9
    45fe:	af 92       	push	r10
    4600:	cf 92       	push	r12
    4602:	ef 92       	push	r14
    4604:	ff 92       	push	r15
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
    4612:	f8 2e       	mov	r15, r24
    4614:	2a 01       	movw	r4, r20
    4616:	3b 01       	movw	r6, r22
    4618:	88 e0       	ldi	r24, 0x08	; 8
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	c1 d6       	rcall	.+3458   	; 0x53a0 <malloc>
    461e:	8c 01       	movw	r16, r24
    4620:	8f 2d       	mov	r24, r15
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	88 0f       	add	r24, r24
    4626:	99 1f       	adc	r25, r25
    4628:	fc 01       	movw	r30, r24
    462a:	ee 56       	subi	r30, 0x6E	; 110
    462c:	f6 4e       	sbci	r31, 0xE6	; 230
    462e:	11 83       	std	Z+1, r17	; 0x01
    4630:	00 83       	st	Z, r16
    4632:	fc 01       	movw	r30, r24
    4634:	e4 5f       	subi	r30, 0xF4	; 244
    4636:	fd 4f       	sbci	r31, 0xFD	; 253
    4638:	80 81       	ld	r24, Z
    463a:	91 81       	ldd	r25, Z+1	; 0x01
    463c:	d8 01       	movw	r26, r16
    463e:	8d 93       	st	X+, r24
    4640:	9c 93       	st	X, r25
    4642:	6c 2d       	mov	r22, r12
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	84 e0       	ldi	r24, 0x04	; 4
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	90 d6       	rcall	.+3360   	; 0x536c <calloc>
    464c:	1c 01       	movw	r2, r24
    464e:	61 e0       	ldi	r22, 0x01	; 1
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	86 e0       	ldi	r24, 0x06	; 6
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	8a d6       	rcall	.+3348   	; 0x536c <calloc>
    4658:	7c 01       	movw	r14, r24
    465a:	4c 2d       	mov	r20, r12
    465c:	b1 01       	movw	r22, r2
    465e:	e0 d4       	rcall	.+2496   	; 0x5020 <fifo_init>
    4660:	f8 01       	movw	r30, r16
    4662:	f5 82       	std	Z+5, r15	; 0x05
    4664:	e4 82       	std	Z+4, r14	; 0x04
    4666:	6a 2d       	mov	r22, r10
    4668:	70 e0       	ldi	r23, 0x00	; 0
    466a:	84 e0       	ldi	r24, 0x04	; 4
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	7e d6       	rcall	.+3324   	; 0x536c <calloc>
    4670:	1c 01       	movw	r2, r24
    4672:	61 e0       	ldi	r22, 0x01	; 1
    4674:	70 e0       	ldi	r23, 0x00	; 0
    4676:	86 e0       	ldi	r24, 0x06	; 6
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	78 d6       	rcall	.+3312   	; 0x536c <calloc>
    467c:	7c 01       	movw	r14, r24
    467e:	4a 2d       	mov	r20, r10
    4680:	b1 01       	movw	r22, r2
    4682:	ce d4       	rcall	.+2460   	; 0x5020 <fifo_init>
    4684:	d8 01       	movw	r26, r16
    4686:	13 96       	adiw	r26, 0x03	; 3
    4688:	fc 92       	st	X, r15
    468a:	ee 92       	st	-X, r14
    468c:	12 97       	sbiw	r26, 0x02	; 2
    468e:	17 96       	adiw	r26, 0x07	; 7
    4690:	9c 92       	st	X, r9
    4692:	8e 92       	st	-X, r8
    4694:	16 97       	sbiw	r26, 0x06	; 6
    4696:	ff b6       	in	r15, 0x3f	; 63
    4698:	f8 94       	cli
    469a:	ed 91       	ld	r30, X+
    469c:	fc 91       	ld	r31, X
    469e:	11 97       	sbiw	r26, 0x01	; 1
    46a0:	36 97       	sbiw	r30, 0x06	; 6
    46a2:	80 81       	ld	r24, Z
    46a4:	82 60       	ori	r24, 0x02	; 2
    46a6:	80 83       	st	Z, r24
    46a8:	8d 90       	ld	r8, X+
    46aa:	9c 90       	ld	r9, X
    46ac:	c3 01       	movw	r24, r6
    46ae:	b2 01       	movw	r22, r4
    46b0:	0b d8       	rcall	.-4074   	; 0x36c8 <__floatunsisf>
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	40 e0       	ldi	r20, 0x00	; 0
    46b8:	51 e4       	ldi	r21, 0x41	; 65
    46ba:	c8 d5       	rcall	.+2960   	; 0x524c <__mulsf3>
    46bc:	9b 01       	movw	r18, r22
    46be:	ac 01       	movw	r20, r24
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	74 e2       	ldi	r23, 0x24	; 36
    46c4:	84 e7       	ldi	r24, 0x74	; 116
    46c6:	9b e4       	ldi	r25, 0x4B	; 75
    46c8:	2e d5       	rcall	.+2652   	; 0x5126 <__divsf3>
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	40 e8       	ldi	r20, 0x80	; 128
    46d0:	5f e3       	ldi	r21, 0x3F	; 63
    46d2:	c2 d4       	rcall	.+2436   	; 0x5058 <__subsf3>
    46d4:	0e 94 38 1b 	call	0x3670	; 0x3670 <__fixunssfsi>
    46d8:	f4 01       	movw	r30, r8
    46da:	32 97       	sbiw	r30, 0x02	; 2
    46dc:	60 83       	st	Z, r22
    46de:	d8 01       	movw	r26, r16
    46e0:	ed 91       	ld	r30, X+
    46e2:	fc 91       	ld	r31, X
    46e4:	11 97       	sbiw	r26, 0x01	; 1
    46e6:	35 97       	sbiw	r30, 0x05	; 5
    46e8:	88 e9       	ldi	r24, 0x98	; 152
    46ea:	80 83       	st	Z, r24
    46ec:	ed 91       	ld	r30, X+
    46ee:	fc 91       	ld	r31, X
    46f0:	34 97       	sbiw	r30, 0x04	; 4
    46f2:	86 e0       	ldi	r24, 0x06	; 6
    46f4:	80 83       	st	Z, r24
    46f6:	ff be       	out	0x3f, r15	; 63
    46f8:	c8 01       	movw	r24, r16
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
    46fe:	1f 91       	pop	r17
    4700:	0f 91       	pop	r16
    4702:	ff 90       	pop	r15
    4704:	ef 90       	pop	r14
    4706:	cf 90       	pop	r12
    4708:	af 90       	pop	r10
    470a:	9f 90       	pop	r9
    470c:	8f 90       	pop	r8
    470e:	7f 90       	pop	r7
    4710:	6f 90       	pop	r6
    4712:	5f 90       	pop	r5
    4714:	4f 90       	pop	r4
    4716:	3f 90       	pop	r3
    4718:	2f 90       	pop	r2
    471a:	08 95       	ret

0000471c <serial_send_byte>:
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	ec 01       	movw	r28, r24
    4722:	ea 81       	ldd	r30, Y+2	; 0x02
    4724:	fb 81       	ldd	r31, Y+3	; 0x03
    4726:	93 81       	ldd	r25, Z+3	; 0x03
    4728:	82 81       	ldd	r24, Z+2	; 0x02
    472a:	25 81       	ldd	r18, Z+5	; 0x05
    472c:	98 1b       	sub	r25, r24
    472e:	92 23       	and	r25, r18
    4730:	84 81       	ldd	r24, Z+4	; 0x04
    4732:	98 17       	cp	r25, r24
    4734:	a1 f0       	breq	.+40     	; 0x475e <serial_send_byte+0x42>
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	26 95       	lsr	r18
    473a:	29 23       	and	r18, r25
    473c:	a0 81       	ld	r26, Z
    473e:	b1 81       	ldd	r27, Z+1	; 0x01
    4740:	a2 0f       	add	r26, r18
    4742:	b1 1d       	adc	r27, r1
    4744:	6c 93       	st	X, r22
    4746:	9f 5f       	subi	r25, 0xFF	; 255
    4748:	25 81       	ldd	r18, Z+5	; 0x05
    474a:	92 23       	and	r25, r18
    474c:	93 83       	std	Z+3, r25	; 0x03
    474e:	e8 81       	ld	r30, Y
    4750:	f9 81       	ldd	r31, Y+1	; 0x01
    4752:	35 97       	sbiw	r30, 0x05	; 5
    4754:	80 81       	ld	r24, Z
    4756:	80 62       	ori	r24, 0x20	; 32
    4758:	80 83       	st	Z, r24
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	01 c0       	rjmp	.+2      	; 0x4760 <serial_send_byte+0x44>
    475e:	82 e0       	ldi	r24, 0x02	; 2
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	08 95       	ret

00004766 <serial_send_bytes>:
    4766:	ef 92       	push	r14
    4768:	ff 92       	push	r15
    476a:	0f 93       	push	r16
    476c:	1f 93       	push	r17
    476e:	cf 93       	push	r28
    4770:	df 93       	push	r29
    4772:	7c 01       	movw	r14, r24
    4774:	dc 01       	movw	r26, r24
    4776:	12 96       	adiw	r26, 0x02	; 2
    4778:	ed 91       	ld	r30, X+
    477a:	fc 91       	ld	r31, X
    477c:	13 97       	sbiw	r26, 0x03	; 3
    477e:	93 81       	ldd	r25, Z+3	; 0x03
    4780:	82 81       	ldd	r24, Z+2	; 0x02
    4782:	98 1b       	sub	r25, r24
    4784:	85 81       	ldd	r24, Z+5	; 0x05
    4786:	98 23       	and	r25, r24
    4788:	84 81       	ldd	r24, Z+4	; 0x04
    478a:	89 1b       	sub	r24, r25
    478c:	86 17       	cp	r24, r22
    478e:	98 f1       	brcs	.+102    	; 0x47f6 <serial_send_bytes+0x90>
    4790:	66 23       	and	r22, r22
    4792:	41 f1       	breq	.+80     	; 0x47e4 <serial_send_bytes+0x7e>
    4794:	84 2f       	mov	r24, r20
    4796:	95 2f       	mov	r25, r21
    4798:	dc 01       	movw	r26, r24
    479a:	61 50       	subi	r22, 0x01	; 1
    479c:	46 2f       	mov	r20, r22
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	4f 5f       	subi	r20, 0xFF	; 255
    47a2:	5f 4f       	sbci	r21, 0xFF	; 255
    47a4:	48 0f       	add	r20, r24
    47a6:	59 1f       	adc	r21, r25
    47a8:	e7 01       	movw	r28, r14
    47aa:	ea 81       	ldd	r30, Y+2	; 0x02
    47ac:	fb 81       	ldd	r31, Y+3	; 0x03
    47ae:	93 81       	ldd	r25, Z+3	; 0x03
    47b0:	82 81       	ldd	r24, Z+2	; 0x02
    47b2:	25 81       	ldd	r18, Z+5	; 0x05
    47b4:	98 1b       	sub	r25, r24
    47b6:	92 23       	and	r25, r18
    47b8:	84 81       	ldd	r24, Z+4	; 0x04
    47ba:	98 17       	cp	r25, r24
    47bc:	79 f0       	breq	.+30     	; 0x47dc <serial_send_bytes+0x76>
    47be:	8c 91       	ld	r24, X
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	26 95       	lsr	r18
    47c4:	29 23       	and	r18, r25
    47c6:	60 81       	ld	r22, Z
    47c8:	71 81       	ldd	r23, Z+1	; 0x01
    47ca:	8b 01       	movw	r16, r22
    47cc:	02 0f       	add	r16, r18
    47ce:	11 1d       	adc	r17, r1
    47d0:	e8 01       	movw	r28, r16
    47d2:	88 83       	st	Y, r24
    47d4:	9f 5f       	subi	r25, 0xFF	; 255
    47d6:	85 81       	ldd	r24, Z+5	; 0x05
    47d8:	98 23       	and	r25, r24
    47da:	93 83       	std	Z+3, r25	; 0x03
    47dc:	11 96       	adiw	r26, 0x01	; 1
    47de:	a4 17       	cp	r26, r20
    47e0:	b5 07       	cpc	r27, r21
    47e2:	11 f7       	brne	.-60     	; 0x47a8 <serial_send_bytes+0x42>
    47e4:	d7 01       	movw	r26, r14
    47e6:	ed 91       	ld	r30, X+
    47e8:	fc 91       	ld	r31, X
    47ea:	35 97       	sbiw	r30, 0x05	; 5
    47ec:	80 81       	ld	r24, Z
    47ee:	80 62       	ori	r24, 0x20	; 32
    47f0:	80 83       	st	Z, r24
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	01 c0       	rjmp	.+2      	; 0x47f8 <serial_send_bytes+0x92>
    47f6:	82 e0       	ldi	r24, 0x02	; 2
    47f8:	df 91       	pop	r29
    47fa:	cf 91       	pop	r28
    47fc:	1f 91       	pop	r17
    47fe:	0f 91       	pop	r16
    4800:	ff 90       	pop	r15
    4802:	ef 90       	pop	r14
    4804:	08 95       	ret

00004806 <serial_get_byte>:
    4806:	dc 01       	movw	r26, r24
    4808:	14 96       	adiw	r26, 0x04	; 4
    480a:	ed 91       	ld	r30, X+
    480c:	fc 91       	ld	r31, X
    480e:	15 97       	sbiw	r26, 0x05	; 5
    4810:	93 81       	ldd	r25, Z+3	; 0x03
    4812:	82 81       	ldd	r24, Z+2	; 0x02
    4814:	98 17       	cp	r25, r24
    4816:	89 f0       	breq	.+34     	; 0x483a <serial_get_byte+0x34>
    4818:	92 81       	ldd	r25, Z+2	; 0x02
    481a:	85 81       	ldd	r24, Z+5	; 0x05
    481c:	86 95       	lsr	r24
    481e:	89 23       	and	r24, r25
    4820:	a0 81       	ld	r26, Z
    4822:	b1 81       	ldd	r27, Z+1	; 0x01
    4824:	a8 0f       	add	r26, r24
    4826:	b1 1d       	adc	r27, r1
    4828:	8c 91       	ld	r24, X
    482a:	db 01       	movw	r26, r22
    482c:	8c 93       	st	X, r24
    482e:	9f 5f       	subi	r25, 0xFF	; 255
    4830:	85 81       	ldd	r24, Z+5	; 0x05
    4832:	98 23       	and	r25, r24
    4834:	92 83       	std	Z+2, r25	; 0x02
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	08 95       	ret
    483a:	83 e0       	ldi	r24, 0x03	; 3
    483c:	08 95       	ret

0000483e <__vector_25>:
    483e:	1f 92       	push	r1
    4840:	0f 92       	push	r0
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	0f 92       	push	r0
    4846:	11 24       	eor	r1, r1
    4848:	0b b6       	in	r0, 0x3b	; 59
    484a:	0f 92       	push	r0
    484c:	2f 93       	push	r18
    484e:	3f 93       	push	r19
    4850:	4f 93       	push	r20
    4852:	5f 93       	push	r21
    4854:	6f 93       	push	r22
    4856:	7f 93       	push	r23
    4858:	8f 93       	push	r24
    485a:	9f 93       	push	r25
    485c:	af 93       	push	r26
    485e:	bf 93       	push	r27
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	ef 93       	push	r30
    4866:	ff 93       	push	r31
    4868:	a0 91 92 19 	lds	r26, 0x1992	; 0x801992 <_ser_handle>
    486c:	b0 91 93 19 	lds	r27, 0x1993	; 0x801993 <_ser_handle+0x1>
    4870:	10 97       	sbiw	r26, 0x00	; 0
    4872:	11 f1       	breq	.+68     	; 0x48b8 <__vector_25+0x7a>
    4874:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4878:	14 96       	adiw	r26, 0x04	; 4
    487a:	ed 91       	ld	r30, X+
    487c:	fc 91       	ld	r31, X
    487e:	15 97       	sbiw	r26, 0x05	; 5
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	82 81       	ldd	r24, Z+2	; 0x02
    4884:	25 81       	ldd	r18, Z+5	; 0x05
    4886:	98 1b       	sub	r25, r24
    4888:	92 23       	and	r25, r18
    488a:	84 81       	ldd	r24, Z+4	; 0x04
    488c:	98 17       	cp	r25, r24
    488e:	61 f0       	breq	.+24     	; 0x48a8 <__vector_25+0x6a>
    4890:	83 81       	ldd	r24, Z+3	; 0x03
    4892:	26 95       	lsr	r18
    4894:	28 23       	and	r18, r24
    4896:	c0 81       	ld	r28, Z
    4898:	d1 81       	ldd	r29, Z+1	; 0x01
    489a:	c2 0f       	add	r28, r18
    489c:	d1 1d       	adc	r29, r1
    489e:	68 83       	st	Y, r22
    48a0:	8f 5f       	subi	r24, 0xFF	; 255
    48a2:	95 81       	ldd	r25, Z+5	; 0x05
    48a4:	89 23       	and	r24, r25
    48a6:	83 83       	std	Z+3, r24	; 0x03
    48a8:	16 96       	adiw	r26, 0x06	; 6
    48aa:	ed 91       	ld	r30, X+
    48ac:	fc 91       	ld	r31, X
    48ae:	17 97       	sbiw	r26, 0x07	; 7
    48b0:	30 97       	sbiw	r30, 0x00	; 0
    48b2:	11 f0       	breq	.+4      	; 0x48b8 <__vector_25+0x7a>
    48b4:	cd 01       	movw	r24, r26
    48b6:	19 95       	eicall
    48b8:	ff 91       	pop	r31
    48ba:	ef 91       	pop	r30
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	bf 91       	pop	r27
    48c2:	af 91       	pop	r26
    48c4:	9f 91       	pop	r25
    48c6:	8f 91       	pop	r24
    48c8:	7f 91       	pop	r23
    48ca:	6f 91       	pop	r22
    48cc:	5f 91       	pop	r21
    48ce:	4f 91       	pop	r20
    48d0:	3f 91       	pop	r19
    48d2:	2f 91       	pop	r18
    48d4:	0f 90       	pop	r0
    48d6:	0b be       	out	0x3b, r0	; 59
    48d8:	0f 90       	pop	r0
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	0f 90       	pop	r0
    48de:	1f 90       	pop	r1
    48e0:	18 95       	reti

000048e2 <__vector_26>:
    48e2:	1f 92       	push	r1
    48e4:	0f 92       	push	r0
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	0f 92       	push	r0
    48ea:	11 24       	eor	r1, r1
    48ec:	0b b6       	in	r0, 0x3b	; 59
    48ee:	0f 92       	push	r0
    48f0:	2f 93       	push	r18
    48f2:	8f 93       	push	r24
    48f4:	9f 93       	push	r25
    48f6:	af 93       	push	r26
    48f8:	bf 93       	push	r27
    48fa:	ef 93       	push	r30
    48fc:	ff 93       	push	r31
    48fe:	e0 91 92 19 	lds	r30, 0x1992	; 0x801992 <_ser_handle>
    4902:	f0 91 93 19 	lds	r31, 0x1993	; 0x801993 <_ser_handle+0x1>
    4906:	30 97       	sbiw	r30, 0x00	; 0
    4908:	b9 f0       	breq	.+46     	; 0x4938 <__vector_26+0x56>
    490a:	02 80       	ldd	r0, Z+2	; 0x02
    490c:	f3 81       	ldd	r31, Z+3	; 0x03
    490e:	e0 2d       	mov	r30, r0
    4910:	93 81       	ldd	r25, Z+3	; 0x03
    4912:	82 81       	ldd	r24, Z+2	; 0x02
    4914:	98 17       	cp	r25, r24
    4916:	b1 f0       	breq	.+44     	; 0x4944 <__vector_26+0x62>
    4918:	92 81       	ldd	r25, Z+2	; 0x02
    491a:	85 81       	ldd	r24, Z+5	; 0x05
    491c:	28 2f       	mov	r18, r24
    491e:	26 95       	lsr	r18
    4920:	29 23       	and	r18, r25
    4922:	a0 81       	ld	r26, Z
    4924:	b1 81       	ldd	r27, Z+1	; 0x01
    4926:	a2 0f       	add	r26, r18
    4928:	b1 1d       	adc	r27, r1
    492a:	2c 91       	ld	r18, X
    492c:	9f 5f       	subi	r25, 0xFF	; 255
    492e:	89 23       	and	r24, r25
    4930:	82 83       	std	Z+2, r24	; 0x02
    4932:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4936:	0b c0       	rjmp	.+22     	; 0x494e <__vector_26+0x6c>
    4938:	e1 ec       	ldi	r30, 0xC1	; 193
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	80 81       	ld	r24, Z
    493e:	8f 7d       	andi	r24, 0xDF	; 223
    4940:	80 83       	st	Z, r24
    4942:	05 c0       	rjmp	.+10     	; 0x494e <__vector_26+0x6c>
    4944:	e1 ec       	ldi	r30, 0xC1	; 193
    4946:	f0 e0       	ldi	r31, 0x00	; 0
    4948:	80 81       	ld	r24, Z
    494a:	8f 7d       	andi	r24, 0xDF	; 223
    494c:	80 83       	st	Z, r24
    494e:	ff 91       	pop	r31
    4950:	ef 91       	pop	r30
    4952:	bf 91       	pop	r27
    4954:	af 91       	pop	r26
    4956:	9f 91       	pop	r25
    4958:	8f 91       	pop	r24
    495a:	2f 91       	pop	r18
    495c:	0f 90       	pop	r0
    495e:	0b be       	out	0x3b, r0	; 59
    4960:	0f 90       	pop	r0
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	0f 90       	pop	r0
    4966:	1f 90       	pop	r1
    4968:	18 95       	reti

0000496a <__vector_36>:
    496a:	1f 92       	push	r1
    496c:	0f 92       	push	r0
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	0f 92       	push	r0
    4972:	11 24       	eor	r1, r1
    4974:	0b b6       	in	r0, 0x3b	; 59
    4976:	0f 92       	push	r0
    4978:	2f 93       	push	r18
    497a:	3f 93       	push	r19
    497c:	4f 93       	push	r20
    497e:	5f 93       	push	r21
    4980:	6f 93       	push	r22
    4982:	7f 93       	push	r23
    4984:	8f 93       	push	r24
    4986:	9f 93       	push	r25
    4988:	af 93       	push	r26
    498a:	bf 93       	push	r27
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	ef 93       	push	r30
    4992:	ff 93       	push	r31
    4994:	a0 91 94 19 	lds	r26, 0x1994	; 0x801994 <_ser_handle+0x2>
    4998:	b0 91 95 19 	lds	r27, 0x1995	; 0x801995 <_ser_handle+0x3>
    499c:	10 97       	sbiw	r26, 0x00	; 0
    499e:	11 f1       	breq	.+68     	; 0x49e4 <__vector_36+0x7a>
    49a0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    49a4:	14 96       	adiw	r26, 0x04	; 4
    49a6:	ed 91       	ld	r30, X+
    49a8:	fc 91       	ld	r31, X
    49aa:	15 97       	sbiw	r26, 0x05	; 5
    49ac:	93 81       	ldd	r25, Z+3	; 0x03
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	25 81       	ldd	r18, Z+5	; 0x05
    49b2:	98 1b       	sub	r25, r24
    49b4:	92 23       	and	r25, r18
    49b6:	84 81       	ldd	r24, Z+4	; 0x04
    49b8:	98 17       	cp	r25, r24
    49ba:	61 f0       	breq	.+24     	; 0x49d4 <__vector_36+0x6a>
    49bc:	83 81       	ldd	r24, Z+3	; 0x03
    49be:	26 95       	lsr	r18
    49c0:	28 23       	and	r18, r24
    49c2:	c0 81       	ld	r28, Z
    49c4:	d1 81       	ldd	r29, Z+1	; 0x01
    49c6:	c2 0f       	add	r28, r18
    49c8:	d1 1d       	adc	r29, r1
    49ca:	68 83       	st	Y, r22
    49cc:	8f 5f       	subi	r24, 0xFF	; 255
    49ce:	95 81       	ldd	r25, Z+5	; 0x05
    49d0:	89 23       	and	r24, r25
    49d2:	83 83       	std	Z+3, r24	; 0x03
    49d4:	16 96       	adiw	r26, 0x06	; 6
    49d6:	ed 91       	ld	r30, X+
    49d8:	fc 91       	ld	r31, X
    49da:	17 97       	sbiw	r26, 0x07	; 7
    49dc:	30 97       	sbiw	r30, 0x00	; 0
    49de:	11 f0       	breq	.+4      	; 0x49e4 <__vector_36+0x7a>
    49e0:	cd 01       	movw	r24, r26
    49e2:	19 95       	eicall
    49e4:	ff 91       	pop	r31
    49e6:	ef 91       	pop	r30
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	bf 91       	pop	r27
    49ee:	af 91       	pop	r26
    49f0:	9f 91       	pop	r25
    49f2:	8f 91       	pop	r24
    49f4:	7f 91       	pop	r23
    49f6:	6f 91       	pop	r22
    49f8:	5f 91       	pop	r21
    49fa:	4f 91       	pop	r20
    49fc:	3f 91       	pop	r19
    49fe:	2f 91       	pop	r18
    4a00:	0f 90       	pop	r0
    4a02:	0b be       	out	0x3b, r0	; 59
    4a04:	0f 90       	pop	r0
    4a06:	0f be       	out	0x3f, r0	; 63
    4a08:	0f 90       	pop	r0
    4a0a:	1f 90       	pop	r1
    4a0c:	18 95       	reti

00004a0e <__vector_37>:
    4a0e:	1f 92       	push	r1
    4a10:	0f 92       	push	r0
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	0f 92       	push	r0
    4a16:	11 24       	eor	r1, r1
    4a18:	0b b6       	in	r0, 0x3b	; 59
    4a1a:	0f 92       	push	r0
    4a1c:	2f 93       	push	r18
    4a1e:	8f 93       	push	r24
    4a20:	9f 93       	push	r25
    4a22:	af 93       	push	r26
    4a24:	bf 93       	push	r27
    4a26:	ef 93       	push	r30
    4a28:	ff 93       	push	r31
    4a2a:	e0 91 94 19 	lds	r30, 0x1994	; 0x801994 <_ser_handle+0x2>
    4a2e:	f0 91 95 19 	lds	r31, 0x1995	; 0x801995 <_ser_handle+0x3>
    4a32:	30 97       	sbiw	r30, 0x00	; 0
    4a34:	b9 f0       	breq	.+46     	; 0x4a64 <__vector_37+0x56>
    4a36:	02 80       	ldd	r0, Z+2	; 0x02
    4a38:	f3 81       	ldd	r31, Z+3	; 0x03
    4a3a:	e0 2d       	mov	r30, r0
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	98 17       	cp	r25, r24
    4a42:	b1 f0       	breq	.+44     	; 0x4a70 <__vector_37+0x62>
    4a44:	92 81       	ldd	r25, Z+2	; 0x02
    4a46:	85 81       	ldd	r24, Z+5	; 0x05
    4a48:	28 2f       	mov	r18, r24
    4a4a:	26 95       	lsr	r18
    4a4c:	29 23       	and	r18, r25
    4a4e:	a0 81       	ld	r26, Z
    4a50:	b1 81       	ldd	r27, Z+1	; 0x01
    4a52:	a2 0f       	add	r26, r18
    4a54:	b1 1d       	adc	r27, r1
    4a56:	2c 91       	ld	r18, X
    4a58:	9f 5f       	subi	r25, 0xFF	; 255
    4a5a:	89 23       	and	r24, r25
    4a5c:	82 83       	std	Z+2, r24	; 0x02
    4a5e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4a62:	0b c0       	rjmp	.+22     	; 0x4a7a <__vector_37+0x6c>
    4a64:	e9 ec       	ldi	r30, 0xC9	; 201
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	80 81       	ld	r24, Z
    4a6a:	8f 7d       	andi	r24, 0xDF	; 223
    4a6c:	80 83       	st	Z, r24
    4a6e:	05 c0       	rjmp	.+10     	; 0x4a7a <__vector_37+0x6c>
    4a70:	e9 ec       	ldi	r30, 0xC9	; 201
    4a72:	f0 e0       	ldi	r31, 0x00	; 0
    4a74:	80 81       	ld	r24, Z
    4a76:	8f 7d       	andi	r24, 0xDF	; 223
    4a78:	80 83       	st	Z, r24
    4a7a:	ff 91       	pop	r31
    4a7c:	ef 91       	pop	r30
    4a7e:	bf 91       	pop	r27
    4a80:	af 91       	pop	r26
    4a82:	9f 91       	pop	r25
    4a84:	8f 91       	pop	r24
    4a86:	2f 91       	pop	r18
    4a88:	0f 90       	pop	r0
    4a8a:	0b be       	out	0x3b, r0	; 59
    4a8c:	0f 90       	pop	r0
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	0f 90       	pop	r0
    4a92:	1f 90       	pop	r1
    4a94:	18 95       	reti

00004a96 <__vector_51>:
    4a96:	1f 92       	push	r1
    4a98:	0f 92       	push	r0
    4a9a:	0f b6       	in	r0, 0x3f	; 63
    4a9c:	0f 92       	push	r0
    4a9e:	11 24       	eor	r1, r1
    4aa0:	0b b6       	in	r0, 0x3b	; 59
    4aa2:	0f 92       	push	r0
    4aa4:	2f 93       	push	r18
    4aa6:	3f 93       	push	r19
    4aa8:	4f 93       	push	r20
    4aaa:	5f 93       	push	r21
    4aac:	6f 93       	push	r22
    4aae:	7f 93       	push	r23
    4ab0:	8f 93       	push	r24
    4ab2:	9f 93       	push	r25
    4ab4:	af 93       	push	r26
    4ab6:	bf 93       	push	r27
    4ab8:	cf 93       	push	r28
    4aba:	df 93       	push	r29
    4abc:	ef 93       	push	r30
    4abe:	ff 93       	push	r31
    4ac0:	a0 91 96 19 	lds	r26, 0x1996	; 0x801996 <_ser_handle+0x4>
    4ac4:	b0 91 97 19 	lds	r27, 0x1997	; 0x801997 <_ser_handle+0x5>
    4ac8:	10 97       	sbiw	r26, 0x00	; 0
    4aca:	11 f1       	breq	.+68     	; 0x4b10 <__vector_51+0x7a>
    4acc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4ad0:	14 96       	adiw	r26, 0x04	; 4
    4ad2:	ed 91       	ld	r30, X+
    4ad4:	fc 91       	ld	r31, X
    4ad6:	15 97       	sbiw	r26, 0x05	; 5
    4ad8:	93 81       	ldd	r25, Z+3	; 0x03
    4ada:	82 81       	ldd	r24, Z+2	; 0x02
    4adc:	25 81       	ldd	r18, Z+5	; 0x05
    4ade:	98 1b       	sub	r25, r24
    4ae0:	92 23       	and	r25, r18
    4ae2:	84 81       	ldd	r24, Z+4	; 0x04
    4ae4:	98 17       	cp	r25, r24
    4ae6:	61 f0       	breq	.+24     	; 0x4b00 <__vector_51+0x6a>
    4ae8:	83 81       	ldd	r24, Z+3	; 0x03
    4aea:	26 95       	lsr	r18
    4aec:	28 23       	and	r18, r24
    4aee:	c0 81       	ld	r28, Z
    4af0:	d1 81       	ldd	r29, Z+1	; 0x01
    4af2:	c2 0f       	add	r28, r18
    4af4:	d1 1d       	adc	r29, r1
    4af6:	68 83       	st	Y, r22
    4af8:	8f 5f       	subi	r24, 0xFF	; 255
    4afa:	95 81       	ldd	r25, Z+5	; 0x05
    4afc:	89 23       	and	r24, r25
    4afe:	83 83       	std	Z+3, r24	; 0x03
    4b00:	16 96       	adiw	r26, 0x06	; 6
    4b02:	ed 91       	ld	r30, X+
    4b04:	fc 91       	ld	r31, X
    4b06:	17 97       	sbiw	r26, 0x07	; 7
    4b08:	30 97       	sbiw	r30, 0x00	; 0
    4b0a:	11 f0       	breq	.+4      	; 0x4b10 <__vector_51+0x7a>
    4b0c:	cd 01       	movw	r24, r26
    4b0e:	19 95       	eicall
    4b10:	ff 91       	pop	r31
    4b12:	ef 91       	pop	r30
    4b14:	df 91       	pop	r29
    4b16:	cf 91       	pop	r28
    4b18:	bf 91       	pop	r27
    4b1a:	af 91       	pop	r26
    4b1c:	9f 91       	pop	r25
    4b1e:	8f 91       	pop	r24
    4b20:	7f 91       	pop	r23
    4b22:	6f 91       	pop	r22
    4b24:	5f 91       	pop	r21
    4b26:	4f 91       	pop	r20
    4b28:	3f 91       	pop	r19
    4b2a:	2f 91       	pop	r18
    4b2c:	0f 90       	pop	r0
    4b2e:	0b be       	out	0x3b, r0	; 59
    4b30:	0f 90       	pop	r0
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	0f 90       	pop	r0
    4b36:	1f 90       	pop	r1
    4b38:	18 95       	reti

00004b3a <__vector_52>:
    4b3a:	1f 92       	push	r1
    4b3c:	0f 92       	push	r0
    4b3e:	0f b6       	in	r0, 0x3f	; 63
    4b40:	0f 92       	push	r0
    4b42:	11 24       	eor	r1, r1
    4b44:	0b b6       	in	r0, 0x3b	; 59
    4b46:	0f 92       	push	r0
    4b48:	2f 93       	push	r18
    4b4a:	8f 93       	push	r24
    4b4c:	9f 93       	push	r25
    4b4e:	af 93       	push	r26
    4b50:	bf 93       	push	r27
    4b52:	ef 93       	push	r30
    4b54:	ff 93       	push	r31
    4b56:	e0 91 96 19 	lds	r30, 0x1996	; 0x801996 <_ser_handle+0x4>
    4b5a:	f0 91 97 19 	lds	r31, 0x1997	; 0x801997 <_ser_handle+0x5>
    4b5e:	30 97       	sbiw	r30, 0x00	; 0
    4b60:	b9 f0       	breq	.+46     	; 0x4b90 <__vector_52+0x56>
    4b62:	02 80       	ldd	r0, Z+2	; 0x02
    4b64:	f3 81       	ldd	r31, Z+3	; 0x03
    4b66:	e0 2d       	mov	r30, r0
    4b68:	93 81       	ldd	r25, Z+3	; 0x03
    4b6a:	82 81       	ldd	r24, Z+2	; 0x02
    4b6c:	98 17       	cp	r25, r24
    4b6e:	b1 f0       	breq	.+44     	; 0x4b9c <__vector_52+0x62>
    4b70:	92 81       	ldd	r25, Z+2	; 0x02
    4b72:	85 81       	ldd	r24, Z+5	; 0x05
    4b74:	28 2f       	mov	r18, r24
    4b76:	26 95       	lsr	r18
    4b78:	29 23       	and	r18, r25
    4b7a:	a0 81       	ld	r26, Z
    4b7c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b7e:	a2 0f       	add	r26, r18
    4b80:	b1 1d       	adc	r27, r1
    4b82:	2c 91       	ld	r18, X
    4b84:	9f 5f       	subi	r25, 0xFF	; 255
    4b86:	89 23       	and	r24, r25
    4b88:	82 83       	std	Z+2, r24	; 0x02
    4b8a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4b8e:	0b c0       	rjmp	.+22     	; 0x4ba6 <__vector_52+0x6c>
    4b90:	e1 ed       	ldi	r30, 0xD1	; 209
    4b92:	f0 e0       	ldi	r31, 0x00	; 0
    4b94:	80 81       	ld	r24, Z
    4b96:	8f 7d       	andi	r24, 0xDF	; 223
    4b98:	80 83       	st	Z, r24
    4b9a:	05 c0       	rjmp	.+10     	; 0x4ba6 <__vector_52+0x6c>
    4b9c:	e1 ed       	ldi	r30, 0xD1	; 209
    4b9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ba0:	80 81       	ld	r24, Z
    4ba2:	8f 7d       	andi	r24, 0xDF	; 223
    4ba4:	80 83       	st	Z, r24
    4ba6:	ff 91       	pop	r31
    4ba8:	ef 91       	pop	r30
    4baa:	bf 91       	pop	r27
    4bac:	af 91       	pop	r26
    4bae:	9f 91       	pop	r25
    4bb0:	8f 91       	pop	r24
    4bb2:	2f 91       	pop	r18
    4bb4:	0f 90       	pop	r0
    4bb6:	0b be       	out	0x3b, r0	; 59
    4bb8:	0f 90       	pop	r0
    4bba:	0f be       	out	0x3f, r0	; 63
    4bbc:	0f 90       	pop	r0
    4bbe:	1f 90       	pop	r1
    4bc0:	18 95       	reti

00004bc2 <__vector_54>:
    4bc2:	1f 92       	push	r1
    4bc4:	0f 92       	push	r0
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	0f 92       	push	r0
    4bca:	11 24       	eor	r1, r1
    4bcc:	0b b6       	in	r0, 0x3b	; 59
    4bce:	0f 92       	push	r0
    4bd0:	2f 93       	push	r18
    4bd2:	3f 93       	push	r19
    4bd4:	4f 93       	push	r20
    4bd6:	5f 93       	push	r21
    4bd8:	6f 93       	push	r22
    4bda:	7f 93       	push	r23
    4bdc:	8f 93       	push	r24
    4bde:	9f 93       	push	r25
    4be0:	af 93       	push	r26
    4be2:	bf 93       	push	r27
    4be4:	cf 93       	push	r28
    4be6:	df 93       	push	r29
    4be8:	ef 93       	push	r30
    4bea:	ff 93       	push	r31
    4bec:	a0 91 98 19 	lds	r26, 0x1998	; 0x801998 <_ser_handle+0x6>
    4bf0:	b0 91 99 19 	lds	r27, 0x1999	; 0x801999 <_ser_handle+0x7>
    4bf4:	10 97       	sbiw	r26, 0x00	; 0
    4bf6:	11 f1       	breq	.+68     	; 0x4c3c <__vector_54+0x7a>
    4bf8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4bfc:	14 96       	adiw	r26, 0x04	; 4
    4bfe:	ed 91       	ld	r30, X+
    4c00:	fc 91       	ld	r31, X
    4c02:	15 97       	sbiw	r26, 0x05	; 5
    4c04:	93 81       	ldd	r25, Z+3	; 0x03
    4c06:	82 81       	ldd	r24, Z+2	; 0x02
    4c08:	25 81       	ldd	r18, Z+5	; 0x05
    4c0a:	98 1b       	sub	r25, r24
    4c0c:	92 23       	and	r25, r18
    4c0e:	84 81       	ldd	r24, Z+4	; 0x04
    4c10:	98 17       	cp	r25, r24
    4c12:	61 f0       	breq	.+24     	; 0x4c2c <__vector_54+0x6a>
    4c14:	83 81       	ldd	r24, Z+3	; 0x03
    4c16:	26 95       	lsr	r18
    4c18:	28 23       	and	r18, r24
    4c1a:	c0 81       	ld	r28, Z
    4c1c:	d1 81       	ldd	r29, Z+1	; 0x01
    4c1e:	c2 0f       	add	r28, r18
    4c20:	d1 1d       	adc	r29, r1
    4c22:	68 83       	st	Y, r22
    4c24:	8f 5f       	subi	r24, 0xFF	; 255
    4c26:	95 81       	ldd	r25, Z+5	; 0x05
    4c28:	89 23       	and	r24, r25
    4c2a:	83 83       	std	Z+3, r24	; 0x03
    4c2c:	16 96       	adiw	r26, 0x06	; 6
    4c2e:	ed 91       	ld	r30, X+
    4c30:	fc 91       	ld	r31, X
    4c32:	17 97       	sbiw	r26, 0x07	; 7
    4c34:	30 97       	sbiw	r30, 0x00	; 0
    4c36:	11 f0       	breq	.+4      	; 0x4c3c <__vector_54+0x7a>
    4c38:	cd 01       	movw	r24, r26
    4c3a:	19 95       	eicall
    4c3c:	ff 91       	pop	r31
    4c3e:	ef 91       	pop	r30
    4c40:	df 91       	pop	r29
    4c42:	cf 91       	pop	r28
    4c44:	bf 91       	pop	r27
    4c46:	af 91       	pop	r26
    4c48:	9f 91       	pop	r25
    4c4a:	8f 91       	pop	r24
    4c4c:	7f 91       	pop	r23
    4c4e:	6f 91       	pop	r22
    4c50:	5f 91       	pop	r21
    4c52:	4f 91       	pop	r20
    4c54:	3f 91       	pop	r19
    4c56:	2f 91       	pop	r18
    4c58:	0f 90       	pop	r0
    4c5a:	0b be       	out	0x3b, r0	; 59
    4c5c:	0f 90       	pop	r0
    4c5e:	0f be       	out	0x3f, r0	; 63
    4c60:	0f 90       	pop	r0
    4c62:	1f 90       	pop	r1
    4c64:	18 95       	reti

00004c66 <__vector_55>:
    4c66:	1f 92       	push	r1
    4c68:	0f 92       	push	r0
    4c6a:	0f b6       	in	r0, 0x3f	; 63
    4c6c:	0f 92       	push	r0
    4c6e:	11 24       	eor	r1, r1
    4c70:	0b b6       	in	r0, 0x3b	; 59
    4c72:	0f 92       	push	r0
    4c74:	2f 93       	push	r18
    4c76:	8f 93       	push	r24
    4c78:	9f 93       	push	r25
    4c7a:	af 93       	push	r26
    4c7c:	bf 93       	push	r27
    4c7e:	ef 93       	push	r30
    4c80:	ff 93       	push	r31
    4c82:	e0 91 98 19 	lds	r30, 0x1998	; 0x801998 <_ser_handle+0x6>
    4c86:	f0 91 99 19 	lds	r31, 0x1999	; 0x801999 <_ser_handle+0x7>
    4c8a:	30 97       	sbiw	r30, 0x00	; 0
    4c8c:	b9 f0       	breq	.+46     	; 0x4cbc <__vector_55+0x56>
    4c8e:	02 80       	ldd	r0, Z+2	; 0x02
    4c90:	f3 81       	ldd	r31, Z+3	; 0x03
    4c92:	e0 2d       	mov	r30, r0
    4c94:	93 81       	ldd	r25, Z+3	; 0x03
    4c96:	82 81       	ldd	r24, Z+2	; 0x02
    4c98:	98 17       	cp	r25, r24
    4c9a:	b1 f0       	breq	.+44     	; 0x4cc8 <__vector_55+0x62>
    4c9c:	92 81       	ldd	r25, Z+2	; 0x02
    4c9e:	85 81       	ldd	r24, Z+5	; 0x05
    4ca0:	28 2f       	mov	r18, r24
    4ca2:	26 95       	lsr	r18
    4ca4:	29 23       	and	r18, r25
    4ca6:	a0 81       	ld	r26, Z
    4ca8:	b1 81       	ldd	r27, Z+1	; 0x01
    4caa:	a2 0f       	add	r26, r18
    4cac:	b1 1d       	adc	r27, r1
    4cae:	2c 91       	ld	r18, X
    4cb0:	9f 5f       	subi	r25, 0xFF	; 255
    4cb2:	89 23       	and	r24, r25
    4cb4:	82 83       	std	Z+2, r24	; 0x02
    4cb6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4cba:	0b c0       	rjmp	.+22     	; 0x4cd2 <__vector_55+0x6c>
    4cbc:	e1 e3       	ldi	r30, 0x31	; 49
    4cbe:	f1 e0       	ldi	r31, 0x01	; 1
    4cc0:	80 81       	ld	r24, Z
    4cc2:	8f 7d       	andi	r24, 0xDF	; 223
    4cc4:	80 83       	st	Z, r24
    4cc6:	05 c0       	rjmp	.+10     	; 0x4cd2 <__vector_55+0x6c>
    4cc8:	e1 e3       	ldi	r30, 0x31	; 49
    4cca:	f1 e0       	ldi	r31, 0x01	; 1
    4ccc:	80 81       	ld	r24, Z
    4cce:	8f 7d       	andi	r24, 0xDF	; 223
    4cd0:	80 83       	st	Z, r24
    4cd2:	ff 91       	pop	r31
    4cd4:	ef 91       	pop	r30
    4cd6:	bf 91       	pop	r27
    4cd8:	af 91       	pop	r26
    4cda:	9f 91       	pop	r25
    4cdc:	8f 91       	pop	r24
    4cde:	2f 91       	pop	r18
    4ce0:	0f 90       	pop	r0
    4ce2:	0b be       	out	0x3b, r0	; 59
    4ce4:	0f 90       	pop	r0
    4ce6:	0f be       	out	0x3f, r0	; 63
    4ce8:	0f 90       	pop	r0
    4cea:	1f 90       	pop	r1
    4cec:	18 95       	reti

00004cee <usart_getchar>:
    4cee:	cf 93       	push	r28
    4cf0:	df 93       	push	r29
    4cf2:	1f 92       	push	r1
    4cf4:	cd b7       	in	r28, 0x3d	; 61
    4cf6:	de b7       	in	r29, 0x3e	; 62
    4cf8:	be 01       	movw	r22, r28
    4cfa:	6f 5f       	subi	r22, 0xFF	; 255
    4cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfe:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <_com_serial_instance>
    4d02:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <_com_serial_instance+0x1>
    4d06:	7f dd       	rcall	.-1282   	; 0x4806 <serial_get_byte>
    4d08:	81 11       	cpse	r24, r1
    4d0a:	f6 cf       	rjmp	.-20     	; 0x4cf8 <usart_getchar+0xa>
    4d0c:	89 81       	ldd	r24, Y+1	; 0x01
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	0f 90       	pop	r0
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	08 95       	ret

00004d18 <usart_putchar>:
    4d18:	68 2f       	mov	r22, r24
    4d1a:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <_com_serial_instance>
    4d1e:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <_com_serial_instance+0x1>
    4d22:	fc dc       	rcall	.-1544   	; 0x471c <serial_send_byte>
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	08 95       	ret

00004d2a <stdioCreate>:
    4d2a:	8f 92       	push	r8
    4d2c:	9f 92       	push	r9
    4d2e:	af 92       	push	r10
    4d30:	cf 92       	push	r12
    4d32:	ef 92       	push	r14
    4d34:	0f 93       	push	r16
    4d36:	81 2c       	mov	r8, r1
    4d38:	91 2c       	mov	r9, r1
    4d3a:	68 94       	set
    4d3c:	aa 24       	eor	r10, r10
    4d3e:	a7 f8       	bld	r10, 7
    4d40:	68 94       	set
    4d42:	cc 24       	eor	r12, r12
    4d44:	c7 f8       	bld	r12, 7
    4d46:	e1 2c       	mov	r14, r1
    4d48:	00 e0       	ldi	r16, 0x00	; 0
    4d4a:	23 e0       	ldi	r18, 0x03	; 3
    4d4c:	40 e0       	ldi	r20, 0x00	; 0
    4d4e:	51 ee       	ldi	r21, 0xE1	; 225
    4d50:	60 e0       	ldi	r22, 0x00	; 0
    4d52:	70 e0       	ldi	r23, 0x00	; 0
    4d54:	4c dc       	rcall	.-1896   	; 0x45ee <serial_new_instance>
    4d56:	90 93 9b 19 	sts	0x199B, r25	; 0x80199b <_com_serial_instance+0x1>
    4d5a:	80 93 9a 19 	sts	0x199A, r24	; 0x80199a <_com_serial_instance>
    4d5e:	e3 ee       	ldi	r30, 0xE3	; 227
    4d60:	f9 e1       	ldi	r31, 0x19	; 25
    4d62:	84 e1       	ldi	r24, 0x14	; 20
    4d64:	92 e0       	ldi	r25, 0x02	; 2
    4d66:	91 83       	std	Z+1, r25	; 0x01
    4d68:	80 83       	st	Z, r24
    4d6a:	93 83       	std	Z+3, r25	; 0x03
    4d6c:	82 83       	std	Z+2, r24	; 0x02
    4d6e:	0f 91       	pop	r16
    4d70:	ef 90       	pop	r14
    4d72:	cf 90       	pop	r12
    4d74:	af 90       	pop	r10
    4d76:	9f 90       	pop	r9
    4d78:	8f 90       	pop	r8
    4d7a:	08 95       	ret

00004d7c <_initTwiInterface>:
    4d7c:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <_twiIsInitiated>
    4d80:	81 11       	cpse	r24, r1
    4d82:	0c c0       	rjmp	.+24     	; 0x4d9c <_initTwiInterface+0x20>
    4d84:	8c e0       	ldi	r24, 0x0C	; 12
    4d86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d8a:	8f ef       	ldi	r24, 0xFF	; 255
    4d8c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d90:	84 e0       	ldi	r24, 0x04	; 4
    4d92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	80 93 aa 19 	sts	0x19AA, r24	; 0x8019aa <_twiIsInitiated>
    4d9c:	08 95       	ret

00004d9e <twiCreate>:
    4d9e:	af 92       	push	r10
    4da0:	bf 92       	push	r11
    4da2:	cf 92       	push	r12
    4da4:	df 92       	push	r13
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	a8 2e       	mov	r10, r24
    4db4:	b6 2e       	mov	r11, r22
    4db6:	69 01       	movw	r12, r18
    4db8:	7a 01       	movw	r14, r20
    4dba:	84 e0       	ldi	r24, 0x04	; 4
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	f0 d2       	rcall	.+1504   	; 0x53a0 <malloc>
    4dc0:	ec 01       	movw	r28, r24
    4dc2:	89 2b       	or	r24, r25
    4dc4:	61 f1       	breq	.+88     	; 0x4e1e <twiCreate+0x80>
    4dc6:	a8 82       	st	Y, r10
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	b8 12       	cpse	r11, r24
    4dcc:	12 c0       	rjmp	.+36     	; 0x4df2 <twiCreate+0x54>
    4dce:	c7 01       	movw	r24, r14
    4dd0:	b6 01       	movw	r22, r12
    4dd2:	20 ea       	ldi	r18, 0xA0	; 160
    4dd4:	36 e8       	ldi	r19, 0x86	; 134
    4dd6:	41 e0       	ldi	r20, 0x01	; 1
    4dd8:	50 e0       	ldi	r21, 0x00	; 0
    4dda:	9e d2       	rcall	.+1340   	; 0x5318 <__udivmodsi4>
    4ddc:	da 01       	movw	r26, r20
    4dde:	c9 01       	movw	r24, r18
    4de0:	40 97       	sbiw	r24, 0x10	; 16
    4de2:	a1 09       	sbc	r26, r1
    4de4:	b1 09       	sbc	r27, r1
    4de6:	b6 95       	lsr	r27
    4de8:	a7 95       	ror	r26
    4dea:	97 95       	ror	r25
    4dec:	87 95       	ror	r24
    4dee:	89 83       	std	Y+1, r24	; 0x01
    4df0:	11 c0       	rjmp	.+34     	; 0x4e14 <twiCreate+0x76>
    4df2:	c7 01       	movw	r24, r14
    4df4:	b6 01       	movw	r22, r12
    4df6:	20 e8       	ldi	r18, 0x80	; 128
    4df8:	3a e1       	ldi	r19, 0x1A	; 26
    4dfa:	46 e0       	ldi	r20, 0x06	; 6
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	8c d2       	rcall	.+1304   	; 0x5318 <__udivmodsi4>
    4e00:	da 01       	movw	r26, r20
    4e02:	c9 01       	movw	r24, r18
    4e04:	40 97       	sbiw	r24, 0x10	; 16
    4e06:	a1 09       	sbc	r26, r1
    4e08:	b1 09       	sbc	r27, r1
    4e0a:	b6 95       	lsr	r27
    4e0c:	a7 95       	ror	r26
    4e0e:	97 95       	ror	r25
    4e10:	87 95       	ror	r24
    4e12:	89 83       	std	Y+1, r24	; 0x01
    4e14:	1b 83       	std	Y+3, r17	; 0x03
    4e16:	0a 83       	std	Y+2, r16	; 0x02
    4e18:	8c 2f       	mov	r24, r28
    4e1a:	9d 2f       	mov	r25, r29
    4e1c:	02 c0       	rjmp	.+4      	; 0x4e22 <twiCreate+0x84>
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	ff 90       	pop	r15
    4e2c:	ef 90       	pop	r14
    4e2e:	df 90       	pop	r13
    4e30:	cf 90       	pop	r12
    4e32:	bf 90       	pop	r11
    4e34:	af 90       	pop	r10
    4e36:	08 95       	ret

00004e38 <twiIsBusy>:
    4e38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e3c:	81 70       	andi	r24, 0x01	; 1
    4e3e:	08 95       	ret

00004e40 <twiReceive>:
    4e40:	1f 93       	push	r17
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	29 f1       	breq	.+74     	; 0x4e94 <twiReceive+0x54>
    4e4a:	6b 30       	cpi	r22, 0x0B	; 11
    4e4c:	28 f5       	brcc	.+74     	; 0x4e98 <twiReceive+0x58>
    4e4e:	16 2f       	mov	r17, r22
    4e50:	ec 01       	movw	r28, r24
    4e52:	f2 df       	rcall	.-28     	; 0x4e38 <twiIsBusy>
    4e54:	81 11       	cpse	r24, r1
    4e56:	22 c0       	rjmp	.+68     	; 0x4e9c <twiReceive+0x5c>
    4e58:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4e5c:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4e60:	c8 17       	cp	r28, r24
    4e62:	d9 07       	cpc	r29, r25
    4e64:	41 f0       	breq	.+16     	; 0x4e76 <twiReceive+0x36>
    4e66:	8a df       	rcall	.-236    	; 0x4d7c <_initTwiInterface>
    4e68:	89 81       	ldd	r24, Y+1	; 0x01
    4e6a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4e6e:	d0 93 9e 19 	sts	0x199E, r29	; 0x80199e <_twiCurrentHandler+0x1>
    4e72:	c0 93 9d 19 	sts	0x199D, r28	; 0x80199d <_twiCurrentHandler>
    4e76:	10 93 9f 19 	sts	0x199F, r17	; 0x80199f <_twiMessageLen>
    4e7a:	88 81       	ld	r24, Y
    4e7c:	88 0f       	add	r24, r24
    4e7e:	81 60       	ori	r24, 0x01	; 1
    4e80:	80 93 a0 19 	sts	0x19A0, r24	; 0x8019a0 <_twiMessageBuffer>
    4e84:	88 ef       	ldi	r24, 0xF8	; 248
    4e86:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4e8a:	85 ea       	ldi	r24, 0xA5	; 165
    4e8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e90:	85 e0       	ldi	r24, 0x05	; 5
    4e92:	05 c0       	rjmp	.+10     	; 0x4e9e <twiReceive+0x5e>
    4e94:	86 e0       	ldi	r24, 0x06	; 6
    4e96:	03 c0       	rjmp	.+6      	; 0x4e9e <twiReceive+0x5e>
    4e98:	87 e0       	ldi	r24, 0x07	; 7
    4e9a:	01 c0       	rjmp	.+2      	; 0x4e9e <twiReceive+0x5e>
    4e9c:	82 e0       	ldi	r24, 0x02	; 2
    4e9e:	df 91       	pop	r29
    4ea0:	cf 91       	pop	r28
    4ea2:	1f 91       	pop	r17
    4ea4:	08 95       	ret

00004ea6 <__vector_39>:
    4ea6:	1f 92       	push	r1
    4ea8:	0f 92       	push	r0
    4eaa:	0f b6       	in	r0, 0x3f	; 63
    4eac:	0f 92       	push	r0
    4eae:	11 24       	eor	r1, r1
    4eb0:	0b b6       	in	r0, 0x3b	; 59
    4eb2:	0f 92       	push	r0
    4eb4:	2f 93       	push	r18
    4eb6:	3f 93       	push	r19
    4eb8:	4f 93       	push	r20
    4eba:	5f 93       	push	r21
    4ebc:	6f 93       	push	r22
    4ebe:	7f 93       	push	r23
    4ec0:	8f 93       	push	r24
    4ec2:	9f 93       	push	r25
    4ec4:	af 93       	push	r26
    4ec6:	bf 93       	push	r27
    4ec8:	ef 93       	push	r30
    4eca:	ff 93       	push	r31
    4ecc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4ed0:	8e 2f       	mov	r24, r30
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	fc 01       	movw	r30, r24
    4ed6:	38 97       	sbiw	r30, 0x08	; 8
    4ed8:	e1 35       	cpi	r30, 0x51	; 81
    4eda:	f1 05       	cpc	r31, r1
    4edc:	08 f0       	brcs	.+2      	; 0x4ee0 <__vector_39+0x3a>
    4ede:	75 c0       	rjmp	.+234    	; 0x4fca <__vector_39+0x124>
    4ee0:	88 27       	eor	r24, r24
    4ee2:	e4 58       	subi	r30, 0x84	; 132
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ee8:	39 c2       	rjmp	.+1138   	; 0x535c <__tablejump2__>
    4eea:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <_index.1885>
    4eee:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <_index.1885>
    4ef2:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_twiMessageLen>
    4ef6:	e8 17       	cp	r30, r24
    4ef8:	70 f4       	brcc	.+28     	; 0x4f16 <__vector_39+0x70>
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	8e 0f       	add	r24, r30
    4efe:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <_index.1885>
    4f02:	f0 e0       	ldi	r31, 0x00	; 0
    4f04:	e0 56       	subi	r30, 0x60	; 96
    4f06:	f6 4e       	sbci	r31, 0xE6	; 230
    4f08:	80 81       	ld	r24, Z
    4f0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f0e:	85 e8       	ldi	r24, 0x85	; 133
    4f10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f14:	72 c0       	rjmp	.+228    	; 0x4ffa <__vector_39+0x154>
    4f16:	84 e9       	ldi	r24, 0x94	; 148
    4f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f1c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4f20:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4f24:	dc 01       	movw	r26, r24
    4f26:	12 96       	adiw	r26, 0x02	; 2
    4f28:	ed 91       	ld	r30, X+
    4f2a:	fc 91       	ld	r31, X
    4f2c:	13 97       	sbiw	r26, 0x03	; 3
    4f2e:	30 97       	sbiw	r30, 0x00	; 0
    4f30:	09 f4       	brne	.+2      	; 0x4f34 <__vector_39+0x8e>
    4f32:	63 c0       	rjmp	.+198    	; 0x4ffa <__vector_39+0x154>
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	40 e0       	ldi	r20, 0x00	; 0
    4f38:	50 e0       	ldi	r21, 0x00	; 0
    4f3a:	64 e0       	ldi	r22, 0x04	; 4
    4f3c:	19 95       	eicall
    4f3e:	5d c0       	rjmp	.+186    	; 0x4ffa <__vector_39+0x154>
    4f40:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <_index.1885>
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	8e 0f       	add	r24, r30
    4f48:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <_index.1885>
    4f4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f50:	f0 e0       	ldi	r31, 0x00	; 0
    4f52:	e0 56       	subi	r30, 0x60	; 96
    4f54:	f6 4e       	sbci	r31, 0xE6	; 230
    4f56:	80 83       	st	Z, r24
    4f58:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4f5c:	80 34       	cpi	r24, 0x40	; 64
    4f5e:	11 f4       	brne	.+4      	; 0x4f64 <__vector_39+0xbe>
    4f60:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <_index.1885>
    4f64:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <_index.1885>
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_twiMessageLen>
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	01 97       	sbiw	r24, 0x01	; 1
    4f72:	28 17       	cp	r18, r24
    4f74:	39 07       	cpc	r19, r25
    4f76:	24 f4       	brge	.+8      	; 0x4f80 <__vector_39+0xda>
    4f78:	85 ec       	ldi	r24, 0xC5	; 197
    4f7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f7e:	3d c0       	rjmp	.+122    	; 0x4ffa <__vector_39+0x154>
    4f80:	85 e8       	ldi	r24, 0x85	; 133
    4f82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f86:	39 c0       	rjmp	.+114    	; 0x4ffa <__vector_39+0x154>
    4f88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f8c:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <_index.1885>
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	e0 56       	subi	r30, 0x60	; 96
    4f94:	f6 4e       	sbci	r31, 0xE6	; 230
    4f96:	80 83       	st	Z, r24
    4f98:	84 e9       	ldi	r24, 0x94	; 148
    4f9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f9e:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4fa2:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	12 96       	adiw	r26, 0x02	; 2
    4faa:	ed 91       	ld	r30, X+
    4fac:	fc 91       	ld	r31, X
    4fae:	13 97       	sbiw	r26, 0x03	; 3
    4fb0:	30 97       	sbiw	r30, 0x00	; 0
    4fb2:	19 f1       	breq	.+70     	; 0x4ffa <__vector_39+0x154>
    4fb4:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <_twiMessageLen>
    4fb8:	40 ea       	ldi	r20, 0xA0	; 160
    4fba:	59 e1       	ldi	r21, 0x19	; 25
    4fbc:	65 e0       	ldi	r22, 0x05	; 5
    4fbe:	19 95       	eicall
    4fc0:	1c c0       	rjmp	.+56     	; 0x4ffa <__vector_39+0x154>
    4fc2:	85 ea       	ldi	r24, 0xA5	; 165
    4fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fc8:	18 c0       	rjmp	.+48     	; 0x4ffa <__vector_39+0x154>
    4fca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4fce:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4fd2:	84 e0       	ldi	r24, 0x04	; 4
    4fd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fd8:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_twiCurrentHandler>
    4fdc:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_twiCurrentHandler+0x1>
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	12 96       	adiw	r26, 0x02	; 2
    4fe4:	ed 91       	ld	r30, X+
    4fe6:	fc 91       	ld	r31, X
    4fe8:	13 97       	sbiw	r26, 0x03	; 3
    4fea:	30 97       	sbiw	r30, 0x00	; 0
    4fec:	31 f0       	breq	.+12     	; 0x4ffa <__vector_39+0x154>
    4fee:	20 e0       	ldi	r18, 0x00	; 0
    4ff0:	40 e0       	ldi	r20, 0x00	; 0
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    4ff8:	19 95       	eicall
    4ffa:	ff 91       	pop	r31
    4ffc:	ef 91       	pop	r30
    4ffe:	bf 91       	pop	r27
    5000:	af 91       	pop	r26
    5002:	9f 91       	pop	r25
    5004:	8f 91       	pop	r24
    5006:	7f 91       	pop	r23
    5008:	6f 91       	pop	r22
    500a:	5f 91       	pop	r21
    500c:	4f 91       	pop	r20
    500e:	3f 91       	pop	r19
    5010:	2f 91       	pop	r18
    5012:	0f 90       	pop	r0
    5014:	0b be       	out	0x3b, r0	; 59
    5016:	0f 90       	pop	r0
    5018:	0f be       	out	0x3f, r0	; 63
    501a:	0f 90       	pop	r0
    501c:	1f 90       	pop	r1
    501e:	18 95       	reti

00005020 <fifo_init>:
    5020:	fc 01       	movw	r30, r24
    5022:	41 11       	cpse	r20, r1
    5024:	01 c0       	rjmp	.+2      	; 0x5028 <fifo_init+0x8>
    5026:	dd d2       	rcall	.+1466   	; 0x55e2 <abort>
    5028:	84 2f       	mov	r24, r20
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	9c 01       	movw	r18, r24
    502e:	21 50       	subi	r18, 0x01	; 1
    5030:	31 09       	sbc	r19, r1
    5032:	82 23       	and	r24, r18
    5034:	93 23       	and	r25, r19
    5036:	89 2b       	or	r24, r25
    5038:	09 f0       	breq	.+2      	; 0x503c <fifo_init+0x1c>
    503a:	d3 d2       	rcall	.+1446   	; 0x55e2 <abort>
    503c:	41 38       	cpi	r20, 0x81	; 129
    503e:	08 f0       	brcs	.+2      	; 0x5042 <fifo_init+0x22>
    5040:	d0 d2       	rcall	.+1440   	; 0x55e2 <abort>
    5042:	12 82       	std	Z+2, r1	; 0x02
    5044:	13 82       	std	Z+3, r1	; 0x03
    5046:	44 83       	std	Z+4, r20	; 0x04
    5048:	44 0f       	add	r20, r20
    504a:	41 50       	subi	r20, 0x01	; 1
    504c:	45 83       	std	Z+5, r20	; 0x05
    504e:	71 83       	std	Z+1, r23	; 0x01
    5050:	60 83       	st	Z, r22
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	08 95       	ret

00005058 <__subsf3>:
    5058:	50 58       	subi	r21, 0x80	; 128

0000505a <__addsf3>:
    505a:	bb 27       	eor	r27, r27
    505c:	aa 27       	eor	r26, r26
    505e:	0e d0       	rcall	.+28     	; 0x507c <__addsf3x>
    5060:	e4 c0       	rjmp	.+456    	; 0x522a <__fp_round>
    5062:	d5 d0       	rcall	.+426    	; 0x520e <__fp_pscA>
    5064:	30 f0       	brcs	.+12     	; 0x5072 <__addsf3+0x18>
    5066:	da d0       	rcall	.+436    	; 0x521c <__fp_pscB>
    5068:	20 f0       	brcs	.+8      	; 0x5072 <__addsf3+0x18>
    506a:	31 f4       	brne	.+12     	; 0x5078 <__addsf3+0x1e>
    506c:	9f 3f       	cpi	r25, 0xFF	; 255
    506e:	11 f4       	brne	.+4      	; 0x5074 <__addsf3+0x1a>
    5070:	1e f4       	brtc	.+6      	; 0x5078 <__addsf3+0x1e>
    5072:	ca c0       	rjmp	.+404    	; 0x5208 <__fp_nan>
    5074:	0e f4       	brtc	.+2      	; 0x5078 <__addsf3+0x1e>
    5076:	e0 95       	com	r30
    5078:	e7 fb       	bst	r30, 7
    507a:	c0 c0       	rjmp	.+384    	; 0x51fc <__fp_inf>

0000507c <__addsf3x>:
    507c:	e9 2f       	mov	r30, r25
    507e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_split3>
    5082:	78 f3       	brcs	.-34     	; 0x5062 <__addsf3+0x8>
    5084:	ba 17       	cp	r27, r26
    5086:	62 07       	cpc	r22, r18
    5088:	73 07       	cpc	r23, r19
    508a:	84 07       	cpc	r24, r20
    508c:	95 07       	cpc	r25, r21
    508e:	20 f0       	brcs	.+8      	; 0x5098 <__addsf3x+0x1c>
    5090:	79 f4       	brne	.+30     	; 0x50b0 <__addsf3x+0x34>
    5092:	a6 f5       	brtc	.+104    	; 0x50fc <__addsf3x+0x80>
    5094:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <__fp_zero>
    5098:	0e f4       	brtc	.+2      	; 0x509c <__addsf3x+0x20>
    509a:	e0 95       	com	r30
    509c:	0b 2e       	mov	r0, r27
    509e:	ba 2f       	mov	r27, r26
    50a0:	a0 2d       	mov	r26, r0
    50a2:	0b 01       	movw	r0, r22
    50a4:	b9 01       	movw	r22, r18
    50a6:	90 01       	movw	r18, r0
    50a8:	0c 01       	movw	r0, r24
    50aa:	ca 01       	movw	r24, r20
    50ac:	a0 01       	movw	r20, r0
    50ae:	11 24       	eor	r1, r1
    50b0:	ff 27       	eor	r31, r31
    50b2:	59 1b       	sub	r21, r25
    50b4:	99 f0       	breq	.+38     	; 0x50dc <__addsf3x+0x60>
    50b6:	59 3f       	cpi	r21, 0xF9	; 249
    50b8:	50 f4       	brcc	.+20     	; 0x50ce <__addsf3x+0x52>
    50ba:	50 3e       	cpi	r21, 0xE0	; 224
    50bc:	68 f1       	brcs	.+90     	; 0x5118 <__addsf3x+0x9c>
    50be:	1a 16       	cp	r1, r26
    50c0:	f0 40       	sbci	r31, 0x00	; 0
    50c2:	a2 2f       	mov	r26, r18
    50c4:	23 2f       	mov	r18, r19
    50c6:	34 2f       	mov	r19, r20
    50c8:	44 27       	eor	r20, r20
    50ca:	58 5f       	subi	r21, 0xF8	; 248
    50cc:	f3 cf       	rjmp	.-26     	; 0x50b4 <__addsf3x+0x38>
    50ce:	46 95       	lsr	r20
    50d0:	37 95       	ror	r19
    50d2:	27 95       	ror	r18
    50d4:	a7 95       	ror	r26
    50d6:	f0 40       	sbci	r31, 0x00	; 0
    50d8:	53 95       	inc	r21
    50da:	c9 f7       	brne	.-14     	; 0x50ce <__addsf3x+0x52>
    50dc:	7e f4       	brtc	.+30     	; 0x50fc <__addsf3x+0x80>
    50de:	1f 16       	cp	r1, r31
    50e0:	ba 0b       	sbc	r27, r26
    50e2:	62 0b       	sbc	r22, r18
    50e4:	73 0b       	sbc	r23, r19
    50e6:	84 0b       	sbc	r24, r20
    50e8:	ba f0       	brmi	.+46     	; 0x5118 <__addsf3x+0x9c>
    50ea:	91 50       	subi	r25, 0x01	; 1
    50ec:	a1 f0       	breq	.+40     	; 0x5116 <__addsf3x+0x9a>
    50ee:	ff 0f       	add	r31, r31
    50f0:	bb 1f       	adc	r27, r27
    50f2:	66 1f       	adc	r22, r22
    50f4:	77 1f       	adc	r23, r23
    50f6:	88 1f       	adc	r24, r24
    50f8:	c2 f7       	brpl	.-16     	; 0x50ea <__addsf3x+0x6e>
    50fa:	0e c0       	rjmp	.+28     	; 0x5118 <__addsf3x+0x9c>
    50fc:	ba 0f       	add	r27, r26
    50fe:	62 1f       	adc	r22, r18
    5100:	73 1f       	adc	r23, r19
    5102:	84 1f       	adc	r24, r20
    5104:	48 f4       	brcc	.+18     	; 0x5118 <__addsf3x+0x9c>
    5106:	87 95       	ror	r24
    5108:	77 95       	ror	r23
    510a:	67 95       	ror	r22
    510c:	b7 95       	ror	r27
    510e:	f7 95       	ror	r31
    5110:	9e 3f       	cpi	r25, 0xFE	; 254
    5112:	08 f0       	brcs	.+2      	; 0x5116 <__addsf3x+0x9a>
    5114:	b1 cf       	rjmp	.-158    	; 0x5078 <__addsf3+0x1e>
    5116:	93 95       	inc	r25
    5118:	88 0f       	add	r24, r24
    511a:	08 f0       	brcs	.+2      	; 0x511e <__addsf3x+0xa2>
    511c:	99 27       	eor	r25, r25
    511e:	ee 0f       	add	r30, r30
    5120:	97 95       	ror	r25
    5122:	87 95       	ror	r24
    5124:	08 95       	ret

00005126 <__divsf3>:
    5126:	0d d0       	rcall	.+26     	; 0x5142 <__divsf3x>
    5128:	80 c0       	rjmp	.+256    	; 0x522a <__fp_round>
    512a:	78 d0       	rcall	.+240    	; 0x521c <__fp_pscB>
    512c:	48 f0       	brcs	.+18     	; 0x5140 <__divsf3+0x1a>
    512e:	6f d0       	rcall	.+222    	; 0x520e <__fp_pscA>
    5130:	38 f0       	brcs	.+14     	; 0x5140 <__divsf3+0x1a>
    5132:	21 f4       	brne	.+8      	; 0x513c <__divsf3+0x16>
    5134:	5f 3f       	cpi	r21, 0xFF	; 255
    5136:	21 f0       	breq	.+8      	; 0x5140 <__divsf3+0x1a>
    5138:	61 c0       	rjmp	.+194    	; 0x51fc <__fp_inf>
    513a:	51 11       	cpse	r21, r1
    513c:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_szero>
    5140:	63 c0       	rjmp	.+198    	; 0x5208 <__fp_nan>

00005142 <__divsf3x>:
    5142:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_split3>
    5146:	88 f3       	brcs	.-30     	; 0x512a <__divsf3+0x4>

00005148 <__divsf3_pse>:
    5148:	99 23       	and	r25, r25
    514a:	b9 f3       	breq	.-18     	; 0x513a <__divsf3+0x14>
    514c:	55 23       	and	r21, r21
    514e:	a1 f3       	breq	.-24     	; 0x5138 <__divsf3+0x12>
    5150:	95 1b       	sub	r25, r21
    5152:	55 0b       	sbc	r21, r21
    5154:	bb 27       	eor	r27, r27
    5156:	aa 27       	eor	r26, r26
    5158:	62 17       	cp	r22, r18
    515a:	73 07       	cpc	r23, r19
    515c:	84 07       	cpc	r24, r20
    515e:	38 f0       	brcs	.+14     	; 0x516e <__divsf3_pse+0x26>
    5160:	9f 5f       	subi	r25, 0xFF	; 255
    5162:	5f 4f       	sbci	r21, 0xFF	; 255
    5164:	22 0f       	add	r18, r18
    5166:	33 1f       	adc	r19, r19
    5168:	44 1f       	adc	r20, r20
    516a:	aa 1f       	adc	r26, r26
    516c:	a9 f3       	breq	.-22     	; 0x5158 <__divsf3_pse+0x10>
    516e:	34 d0       	rcall	.+104    	; 0x51d8 <__divsf3_pse+0x90>
    5170:	0e 2e       	mov	r0, r30
    5172:	3a f0       	brmi	.+14     	; 0x5182 <__divsf3_pse+0x3a>
    5174:	e0 e8       	ldi	r30, 0x80	; 128
    5176:	31 d0       	rcall	.+98     	; 0x51da <__divsf3_pse+0x92>
    5178:	91 50       	subi	r25, 0x01	; 1
    517a:	50 40       	sbci	r21, 0x00	; 0
    517c:	e6 95       	lsr	r30
    517e:	00 1c       	adc	r0, r0
    5180:	ca f7       	brpl	.-14     	; 0x5174 <__divsf3_pse+0x2c>
    5182:	2a d0       	rcall	.+84     	; 0x51d8 <__divsf3_pse+0x90>
    5184:	fe 2f       	mov	r31, r30
    5186:	28 d0       	rcall	.+80     	; 0x51d8 <__divsf3_pse+0x90>
    5188:	66 0f       	add	r22, r22
    518a:	77 1f       	adc	r23, r23
    518c:	88 1f       	adc	r24, r24
    518e:	bb 1f       	adc	r27, r27
    5190:	26 17       	cp	r18, r22
    5192:	37 07       	cpc	r19, r23
    5194:	48 07       	cpc	r20, r24
    5196:	ab 07       	cpc	r26, r27
    5198:	b0 e8       	ldi	r27, 0x80	; 128
    519a:	09 f0       	breq	.+2      	; 0x519e <__divsf3_pse+0x56>
    519c:	bb 0b       	sbc	r27, r27
    519e:	80 2d       	mov	r24, r0
    51a0:	bf 01       	movw	r22, r30
    51a2:	ff 27       	eor	r31, r31
    51a4:	93 58       	subi	r25, 0x83	; 131
    51a6:	5f 4f       	sbci	r21, 0xFF	; 255
    51a8:	32 f0       	brmi	.+12     	; 0x51b6 <__divsf3_pse+0x6e>
    51aa:	9e 3f       	cpi	r25, 0xFE	; 254
    51ac:	51 05       	cpc	r21, r1
    51ae:	70 f0       	brcs	.+28     	; 0x51cc <__divsf3_pse+0x84>
    51b0:	25 c0       	rjmp	.+74     	; 0x51fc <__fp_inf>
    51b2:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_szero>
    51b6:	5f 3f       	cpi	r21, 0xFF	; 255
    51b8:	e4 f3       	brlt	.-8      	; 0x51b2 <__divsf3_pse+0x6a>
    51ba:	98 3e       	cpi	r25, 0xE8	; 232
    51bc:	d4 f3       	brlt	.-12     	; 0x51b2 <__divsf3_pse+0x6a>
    51be:	86 95       	lsr	r24
    51c0:	77 95       	ror	r23
    51c2:	67 95       	ror	r22
    51c4:	b7 95       	ror	r27
    51c6:	f7 95       	ror	r31
    51c8:	9f 5f       	subi	r25, 0xFF	; 255
    51ca:	c9 f7       	brne	.-14     	; 0x51be <__divsf3_pse+0x76>
    51cc:	88 0f       	add	r24, r24
    51ce:	91 1d       	adc	r25, r1
    51d0:	96 95       	lsr	r25
    51d2:	87 95       	ror	r24
    51d4:	97 f9       	bld	r25, 7
    51d6:	08 95       	ret
    51d8:	e1 e0       	ldi	r30, 0x01	; 1
    51da:	66 0f       	add	r22, r22
    51dc:	77 1f       	adc	r23, r23
    51de:	88 1f       	adc	r24, r24
    51e0:	bb 1f       	adc	r27, r27
    51e2:	62 17       	cp	r22, r18
    51e4:	73 07       	cpc	r23, r19
    51e6:	84 07       	cpc	r24, r20
    51e8:	ba 07       	cpc	r27, r26
    51ea:	20 f0       	brcs	.+8      	; 0x51f4 <__divsf3_pse+0xac>
    51ec:	62 1b       	sub	r22, r18
    51ee:	73 0b       	sbc	r23, r19
    51f0:	84 0b       	sbc	r24, r20
    51f2:	ba 0b       	sbc	r27, r26
    51f4:	ee 1f       	adc	r30, r30
    51f6:	88 f7       	brcc	.-30     	; 0x51da <__divsf3_pse+0x92>
    51f8:	e0 95       	com	r30
    51fa:	08 95       	ret

000051fc <__fp_inf>:
    51fc:	97 f9       	bld	r25, 7
    51fe:	9f 67       	ori	r25, 0x7F	; 127
    5200:	80 e8       	ldi	r24, 0x80	; 128
    5202:	70 e0       	ldi	r23, 0x00	; 0
    5204:	60 e0       	ldi	r22, 0x00	; 0
    5206:	08 95       	ret

00005208 <__fp_nan>:
    5208:	9f ef       	ldi	r25, 0xFF	; 255
    520a:	80 ec       	ldi	r24, 0xC0	; 192
    520c:	08 95       	ret

0000520e <__fp_pscA>:
    520e:	00 24       	eor	r0, r0
    5210:	0a 94       	dec	r0
    5212:	16 16       	cp	r1, r22
    5214:	17 06       	cpc	r1, r23
    5216:	18 06       	cpc	r1, r24
    5218:	09 06       	cpc	r0, r25
    521a:	08 95       	ret

0000521c <__fp_pscB>:
    521c:	00 24       	eor	r0, r0
    521e:	0a 94       	dec	r0
    5220:	12 16       	cp	r1, r18
    5222:	13 06       	cpc	r1, r19
    5224:	14 06       	cpc	r1, r20
    5226:	05 06       	cpc	r0, r21
    5228:	08 95       	ret

0000522a <__fp_round>:
    522a:	09 2e       	mov	r0, r25
    522c:	03 94       	inc	r0
    522e:	00 0c       	add	r0, r0
    5230:	11 f4       	brne	.+4      	; 0x5236 <__fp_round+0xc>
    5232:	88 23       	and	r24, r24
    5234:	52 f0       	brmi	.+20     	; 0x524a <__fp_round+0x20>
    5236:	bb 0f       	add	r27, r27
    5238:	40 f4       	brcc	.+16     	; 0x524a <__fp_round+0x20>
    523a:	bf 2b       	or	r27, r31
    523c:	11 f4       	brne	.+4      	; 0x5242 <__fp_round+0x18>
    523e:	60 ff       	sbrs	r22, 0
    5240:	04 c0       	rjmp	.+8      	; 0x524a <__fp_round+0x20>
    5242:	6f 5f       	subi	r22, 0xFF	; 255
    5244:	7f 4f       	sbci	r23, 0xFF	; 255
    5246:	8f 4f       	sbci	r24, 0xFF	; 255
    5248:	9f 4f       	sbci	r25, 0xFF	; 255
    524a:	08 95       	ret

0000524c <__mulsf3>:
    524c:	0c d0       	rcall	.+24     	; 0x5266 <__mulsf3x>
    524e:	ed cf       	rjmp	.-38     	; 0x522a <__fp_round>
    5250:	de df       	rcall	.-68     	; 0x520e <__fp_pscA>
    5252:	28 f0       	brcs	.+10     	; 0x525e <__mulsf3+0x12>
    5254:	e3 df       	rcall	.-58     	; 0x521c <__fp_pscB>
    5256:	18 f0       	brcs	.+6      	; 0x525e <__mulsf3+0x12>
    5258:	95 23       	and	r25, r21
    525a:	09 f0       	breq	.+2      	; 0x525e <__mulsf3+0x12>
    525c:	cf cf       	rjmp	.-98     	; 0x51fc <__fp_inf>
    525e:	d4 cf       	rjmp	.-88     	; 0x5208 <__fp_nan>
    5260:	11 24       	eor	r1, r1
    5262:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_szero>

00005266 <__mulsf3x>:
    5266:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_split3>
    526a:	90 f3       	brcs	.-28     	; 0x5250 <__mulsf3+0x4>

0000526c <__mulsf3_pse>:
    526c:	95 9f       	mul	r25, r21
    526e:	c1 f3       	breq	.-16     	; 0x5260 <__mulsf3+0x14>
    5270:	95 0f       	add	r25, r21
    5272:	50 e0       	ldi	r21, 0x00	; 0
    5274:	55 1f       	adc	r21, r21
    5276:	62 9f       	mul	r22, r18
    5278:	f0 01       	movw	r30, r0
    527a:	72 9f       	mul	r23, r18
    527c:	bb 27       	eor	r27, r27
    527e:	f0 0d       	add	r31, r0
    5280:	b1 1d       	adc	r27, r1
    5282:	63 9f       	mul	r22, r19
    5284:	aa 27       	eor	r26, r26
    5286:	f0 0d       	add	r31, r0
    5288:	b1 1d       	adc	r27, r1
    528a:	aa 1f       	adc	r26, r26
    528c:	64 9f       	mul	r22, r20
    528e:	66 27       	eor	r22, r22
    5290:	b0 0d       	add	r27, r0
    5292:	a1 1d       	adc	r26, r1
    5294:	66 1f       	adc	r22, r22
    5296:	82 9f       	mul	r24, r18
    5298:	22 27       	eor	r18, r18
    529a:	b0 0d       	add	r27, r0
    529c:	a1 1d       	adc	r26, r1
    529e:	62 1f       	adc	r22, r18
    52a0:	73 9f       	mul	r23, r19
    52a2:	b0 0d       	add	r27, r0
    52a4:	a1 1d       	adc	r26, r1
    52a6:	62 1f       	adc	r22, r18
    52a8:	83 9f       	mul	r24, r19
    52aa:	a0 0d       	add	r26, r0
    52ac:	61 1d       	adc	r22, r1
    52ae:	22 1f       	adc	r18, r18
    52b0:	74 9f       	mul	r23, r20
    52b2:	33 27       	eor	r19, r19
    52b4:	a0 0d       	add	r26, r0
    52b6:	61 1d       	adc	r22, r1
    52b8:	23 1f       	adc	r18, r19
    52ba:	84 9f       	mul	r24, r20
    52bc:	60 0d       	add	r22, r0
    52be:	21 1d       	adc	r18, r1
    52c0:	82 2f       	mov	r24, r18
    52c2:	76 2f       	mov	r23, r22
    52c4:	6a 2f       	mov	r22, r26
    52c6:	11 24       	eor	r1, r1
    52c8:	9f 57       	subi	r25, 0x7F	; 127
    52ca:	50 40       	sbci	r21, 0x00	; 0
    52cc:	92 f0       	brmi	.+36     	; 0x52f2 <__mulsf3_pse+0x86>
    52ce:	e9 f0       	breq	.+58     	; 0x530a <__mulsf3_pse+0x9e>
    52d0:	88 23       	and	r24, r24
    52d2:	4a f0       	brmi	.+18     	; 0x52e6 <__mulsf3_pse+0x7a>
    52d4:	ee 0f       	add	r30, r30
    52d6:	ff 1f       	adc	r31, r31
    52d8:	bb 1f       	adc	r27, r27
    52da:	66 1f       	adc	r22, r22
    52dc:	77 1f       	adc	r23, r23
    52de:	88 1f       	adc	r24, r24
    52e0:	91 50       	subi	r25, 0x01	; 1
    52e2:	50 40       	sbci	r21, 0x00	; 0
    52e4:	a9 f7       	brne	.-22     	; 0x52d0 <__mulsf3_pse+0x64>
    52e6:	9e 3f       	cpi	r25, 0xFE	; 254
    52e8:	51 05       	cpc	r21, r1
    52ea:	78 f0       	brcs	.+30     	; 0x530a <__mulsf3_pse+0x9e>
    52ec:	87 cf       	rjmp	.-242    	; 0x51fc <__fp_inf>
    52ee:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_szero>
    52f2:	5f 3f       	cpi	r21, 0xFF	; 255
    52f4:	e4 f3       	brlt	.-8      	; 0x52ee <__mulsf3_pse+0x82>
    52f6:	98 3e       	cpi	r25, 0xE8	; 232
    52f8:	d4 f3       	brlt	.-12     	; 0x52ee <__mulsf3_pse+0x82>
    52fa:	86 95       	lsr	r24
    52fc:	77 95       	ror	r23
    52fe:	67 95       	ror	r22
    5300:	b7 95       	ror	r27
    5302:	f7 95       	ror	r31
    5304:	e7 95       	ror	r30
    5306:	9f 5f       	subi	r25, 0xFF	; 255
    5308:	c1 f7       	brne	.-16     	; 0x52fa <__mulsf3_pse+0x8e>
    530a:	fe 2b       	or	r31, r30
    530c:	88 0f       	add	r24, r24
    530e:	91 1d       	adc	r25, r1
    5310:	96 95       	lsr	r25
    5312:	87 95       	ror	r24
    5314:	97 f9       	bld	r25, 7
    5316:	08 95       	ret

00005318 <__udivmodsi4>:
    5318:	a1 e2       	ldi	r26, 0x21	; 33
    531a:	1a 2e       	mov	r1, r26
    531c:	aa 1b       	sub	r26, r26
    531e:	bb 1b       	sub	r27, r27
    5320:	fd 01       	movw	r30, r26
    5322:	0d c0       	rjmp	.+26     	; 0x533e <__udivmodsi4_ep>

00005324 <__udivmodsi4_loop>:
    5324:	aa 1f       	adc	r26, r26
    5326:	bb 1f       	adc	r27, r27
    5328:	ee 1f       	adc	r30, r30
    532a:	ff 1f       	adc	r31, r31
    532c:	a2 17       	cp	r26, r18
    532e:	b3 07       	cpc	r27, r19
    5330:	e4 07       	cpc	r30, r20
    5332:	f5 07       	cpc	r31, r21
    5334:	20 f0       	brcs	.+8      	; 0x533e <__udivmodsi4_ep>
    5336:	a2 1b       	sub	r26, r18
    5338:	b3 0b       	sbc	r27, r19
    533a:	e4 0b       	sbc	r30, r20
    533c:	f5 0b       	sbc	r31, r21

0000533e <__udivmodsi4_ep>:
    533e:	66 1f       	adc	r22, r22
    5340:	77 1f       	adc	r23, r23
    5342:	88 1f       	adc	r24, r24
    5344:	99 1f       	adc	r25, r25
    5346:	1a 94       	dec	r1
    5348:	69 f7       	brne	.-38     	; 0x5324 <__udivmodsi4_loop>
    534a:	60 95       	com	r22
    534c:	70 95       	com	r23
    534e:	80 95       	com	r24
    5350:	90 95       	com	r25
    5352:	9b 01       	movw	r18, r22
    5354:	ac 01       	movw	r20, r24
    5356:	bd 01       	movw	r22, r26
    5358:	cf 01       	movw	r24, r30
    535a:	08 95       	ret

0000535c <__tablejump2__>:
    535c:	ee 0f       	add	r30, r30
    535e:	ff 1f       	adc	r31, r31
    5360:	88 1f       	adc	r24, r24
    5362:	8b bf       	out	0x3b, r24	; 59
    5364:	07 90       	elpm	r0, Z+
    5366:	f6 91       	elpm	r31, Z
    5368:	e0 2d       	mov	r30, r0
    536a:	19 94       	eijmp

0000536c <calloc>:
    536c:	0f 93       	push	r16
    536e:	1f 93       	push	r17
    5370:	cf 93       	push	r28
    5372:	df 93       	push	r29
    5374:	86 9f       	mul	r24, r22
    5376:	80 01       	movw	r16, r0
    5378:	87 9f       	mul	r24, r23
    537a:	10 0d       	add	r17, r0
    537c:	96 9f       	mul	r25, r22
    537e:	10 0d       	add	r17, r0
    5380:	11 24       	eor	r1, r1
    5382:	c8 01       	movw	r24, r16
    5384:	0d d0       	rcall	.+26     	; 0x53a0 <malloc>
    5386:	ec 01       	movw	r28, r24
    5388:	00 97       	sbiw	r24, 0x00	; 0
    538a:	21 f0       	breq	.+8      	; 0x5394 <calloc+0x28>
    538c:	a8 01       	movw	r20, r16
    538e:	60 e0       	ldi	r22, 0x00	; 0
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	34 d1       	rcall	.+616    	; 0x55fc <memset>
    5394:	ce 01       	movw	r24, r28
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	1f 91       	pop	r17
    539c:	0f 91       	pop	r16
    539e:	08 95       	ret

000053a0 <malloc>:
    53a0:	0f 93       	push	r16
    53a2:	1f 93       	push	r17
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	82 30       	cpi	r24, 0x02	; 2
    53aa:	91 05       	cpc	r25, r1
    53ac:	10 f4       	brcc	.+4      	; 0x53b2 <malloc+0x12>
    53ae:	82 e0       	ldi	r24, 0x02	; 2
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	e0 91 e1 19 	lds	r30, 0x19E1	; 0x8019e1 <__flp>
    53b6:	f0 91 e2 19 	lds	r31, 0x19E2	; 0x8019e2 <__flp+0x1>
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	a0 e0       	ldi	r26, 0x00	; 0
    53c0:	b0 e0       	ldi	r27, 0x00	; 0
    53c2:	30 97       	sbiw	r30, 0x00	; 0
    53c4:	19 f1       	breq	.+70     	; 0x540c <malloc+0x6c>
    53c6:	40 81       	ld	r20, Z
    53c8:	51 81       	ldd	r21, Z+1	; 0x01
    53ca:	02 81       	ldd	r16, Z+2	; 0x02
    53cc:	13 81       	ldd	r17, Z+3	; 0x03
    53ce:	48 17       	cp	r20, r24
    53d0:	59 07       	cpc	r21, r25
    53d2:	c8 f0       	brcs	.+50     	; 0x5406 <malloc+0x66>
    53d4:	84 17       	cp	r24, r20
    53d6:	95 07       	cpc	r25, r21
    53d8:	69 f4       	brne	.+26     	; 0x53f4 <malloc+0x54>
    53da:	10 97       	sbiw	r26, 0x00	; 0
    53dc:	31 f0       	breq	.+12     	; 0x53ea <malloc+0x4a>
    53de:	12 96       	adiw	r26, 0x02	; 2
    53e0:	0c 93       	st	X, r16
    53e2:	12 97       	sbiw	r26, 0x02	; 2
    53e4:	13 96       	adiw	r26, 0x03	; 3
    53e6:	1c 93       	st	X, r17
    53e8:	27 c0       	rjmp	.+78     	; 0x5438 <malloc+0x98>
    53ea:	00 93 e1 19 	sts	0x19E1, r16	; 0x8019e1 <__flp>
    53ee:	10 93 e2 19 	sts	0x19E2, r17	; 0x8019e2 <__flp+0x1>
    53f2:	22 c0       	rjmp	.+68     	; 0x5438 <malloc+0x98>
    53f4:	21 15       	cp	r18, r1
    53f6:	31 05       	cpc	r19, r1
    53f8:	19 f0       	breq	.+6      	; 0x5400 <malloc+0x60>
    53fa:	42 17       	cp	r20, r18
    53fc:	53 07       	cpc	r21, r19
    53fe:	18 f4       	brcc	.+6      	; 0x5406 <malloc+0x66>
    5400:	9a 01       	movw	r18, r20
    5402:	bd 01       	movw	r22, r26
    5404:	ef 01       	movw	r28, r30
    5406:	df 01       	movw	r26, r30
    5408:	f8 01       	movw	r30, r16
    540a:	db cf       	rjmp	.-74     	; 0x53c2 <malloc+0x22>
    540c:	21 15       	cp	r18, r1
    540e:	31 05       	cpc	r19, r1
    5410:	f9 f0       	breq	.+62     	; 0x5450 <malloc+0xb0>
    5412:	28 1b       	sub	r18, r24
    5414:	39 0b       	sbc	r19, r25
    5416:	24 30       	cpi	r18, 0x04	; 4
    5418:	31 05       	cpc	r19, r1
    541a:	80 f4       	brcc	.+32     	; 0x543c <malloc+0x9c>
    541c:	8a 81       	ldd	r24, Y+2	; 0x02
    541e:	9b 81       	ldd	r25, Y+3	; 0x03
    5420:	61 15       	cp	r22, r1
    5422:	71 05       	cpc	r23, r1
    5424:	21 f0       	breq	.+8      	; 0x542e <malloc+0x8e>
    5426:	fb 01       	movw	r30, r22
    5428:	93 83       	std	Z+3, r25	; 0x03
    542a:	82 83       	std	Z+2, r24	; 0x02
    542c:	04 c0       	rjmp	.+8      	; 0x5436 <malloc+0x96>
    542e:	90 93 e2 19 	sts	0x19E2, r25	; 0x8019e2 <__flp+0x1>
    5432:	80 93 e1 19 	sts	0x19E1, r24	; 0x8019e1 <__flp>
    5436:	fe 01       	movw	r30, r28
    5438:	32 96       	adiw	r30, 0x02	; 2
    543a:	44 c0       	rjmp	.+136    	; 0x54c4 <malloc+0x124>
    543c:	fe 01       	movw	r30, r28
    543e:	e2 0f       	add	r30, r18
    5440:	f3 1f       	adc	r31, r19
    5442:	81 93       	st	Z+, r24
    5444:	91 93       	st	Z+, r25
    5446:	22 50       	subi	r18, 0x02	; 2
    5448:	31 09       	sbc	r19, r1
    544a:	39 83       	std	Y+1, r19	; 0x01
    544c:	28 83       	st	Y, r18
    544e:	3a c0       	rjmp	.+116    	; 0x54c4 <malloc+0x124>
    5450:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <__brkval>
    5454:	30 91 e0 19 	lds	r19, 0x19E0	; 0x8019e0 <__brkval+0x1>
    5458:	23 2b       	or	r18, r19
    545a:	41 f4       	brne	.+16     	; 0x546c <malloc+0xcc>
    545c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5460:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5464:	30 93 e0 19 	sts	0x19E0, r19	; 0x8019e0 <__brkval+0x1>
    5468:	20 93 df 19 	sts	0x19DF, r18	; 0x8019df <__brkval>
    546c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5470:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5474:	21 15       	cp	r18, r1
    5476:	31 05       	cpc	r19, r1
    5478:	41 f4       	brne	.+16     	; 0x548a <malloc+0xea>
    547a:	2d b7       	in	r18, 0x3d	; 61
    547c:	3e b7       	in	r19, 0x3e	; 62
    547e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5482:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5486:	24 1b       	sub	r18, r20
    5488:	35 0b       	sbc	r19, r21
    548a:	e0 91 df 19 	lds	r30, 0x19DF	; 0x8019df <__brkval>
    548e:	f0 91 e0 19 	lds	r31, 0x19E0	; 0x8019e0 <__brkval+0x1>
    5492:	e2 17       	cp	r30, r18
    5494:	f3 07       	cpc	r31, r19
    5496:	a0 f4       	brcc	.+40     	; 0x54c0 <malloc+0x120>
    5498:	2e 1b       	sub	r18, r30
    549a:	3f 0b       	sbc	r19, r31
    549c:	28 17       	cp	r18, r24
    549e:	39 07       	cpc	r19, r25
    54a0:	78 f0       	brcs	.+30     	; 0x54c0 <malloc+0x120>
    54a2:	ac 01       	movw	r20, r24
    54a4:	4e 5f       	subi	r20, 0xFE	; 254
    54a6:	5f 4f       	sbci	r21, 0xFF	; 255
    54a8:	24 17       	cp	r18, r20
    54aa:	35 07       	cpc	r19, r21
    54ac:	48 f0       	brcs	.+18     	; 0x54c0 <malloc+0x120>
    54ae:	4e 0f       	add	r20, r30
    54b0:	5f 1f       	adc	r21, r31
    54b2:	50 93 e0 19 	sts	0x19E0, r21	; 0x8019e0 <__brkval+0x1>
    54b6:	40 93 df 19 	sts	0x19DF, r20	; 0x8019df <__brkval>
    54ba:	81 93       	st	Z+, r24
    54bc:	91 93       	st	Z+, r25
    54be:	02 c0       	rjmp	.+4      	; 0x54c4 <malloc+0x124>
    54c0:	e0 e0       	ldi	r30, 0x00	; 0
    54c2:	f0 e0       	ldi	r31, 0x00	; 0
    54c4:	cf 01       	movw	r24, r30
    54c6:	df 91       	pop	r29
    54c8:	cf 91       	pop	r28
    54ca:	1f 91       	pop	r17
    54cc:	0f 91       	pop	r16
    54ce:	08 95       	ret

000054d0 <free>:
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
    54d4:	00 97       	sbiw	r24, 0x00	; 0
    54d6:	09 f4       	brne	.+2      	; 0x54da <free+0xa>
    54d8:	81 c0       	rjmp	.+258    	; 0x55dc <free+0x10c>
    54da:	fc 01       	movw	r30, r24
    54dc:	32 97       	sbiw	r30, 0x02	; 2
    54de:	13 82       	std	Z+3, r1	; 0x03
    54e0:	12 82       	std	Z+2, r1	; 0x02
    54e2:	a0 91 e1 19 	lds	r26, 0x19E1	; 0x8019e1 <__flp>
    54e6:	b0 91 e2 19 	lds	r27, 0x19E2	; 0x8019e2 <__flp+0x1>
    54ea:	10 97       	sbiw	r26, 0x00	; 0
    54ec:	81 f4       	brne	.+32     	; 0x550e <free+0x3e>
    54ee:	20 81       	ld	r18, Z
    54f0:	31 81       	ldd	r19, Z+1	; 0x01
    54f2:	82 0f       	add	r24, r18
    54f4:	93 1f       	adc	r25, r19
    54f6:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <__brkval>
    54fa:	30 91 e0 19 	lds	r19, 0x19E0	; 0x8019e0 <__brkval+0x1>
    54fe:	28 17       	cp	r18, r24
    5500:	39 07       	cpc	r19, r25
    5502:	51 f5       	brne	.+84     	; 0x5558 <free+0x88>
    5504:	f0 93 e0 19 	sts	0x19E0, r31	; 0x8019e0 <__brkval+0x1>
    5508:	e0 93 df 19 	sts	0x19DF, r30	; 0x8019df <__brkval>
    550c:	67 c0       	rjmp	.+206    	; 0x55dc <free+0x10c>
    550e:	ed 01       	movw	r28, r26
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	ce 17       	cp	r28, r30
    5516:	df 07       	cpc	r29, r31
    5518:	40 f4       	brcc	.+16     	; 0x552a <free+0x5a>
    551a:	4a 81       	ldd	r20, Y+2	; 0x02
    551c:	5b 81       	ldd	r21, Y+3	; 0x03
    551e:	9e 01       	movw	r18, r28
    5520:	41 15       	cp	r20, r1
    5522:	51 05       	cpc	r21, r1
    5524:	f1 f0       	breq	.+60     	; 0x5562 <free+0x92>
    5526:	ea 01       	movw	r28, r20
    5528:	f5 cf       	rjmp	.-22     	; 0x5514 <free+0x44>
    552a:	d3 83       	std	Z+3, r29	; 0x03
    552c:	c2 83       	std	Z+2, r28	; 0x02
    552e:	40 81       	ld	r20, Z
    5530:	51 81       	ldd	r21, Z+1	; 0x01
    5532:	84 0f       	add	r24, r20
    5534:	95 1f       	adc	r25, r21
    5536:	c8 17       	cp	r28, r24
    5538:	d9 07       	cpc	r29, r25
    553a:	59 f4       	brne	.+22     	; 0x5552 <free+0x82>
    553c:	88 81       	ld	r24, Y
    553e:	99 81       	ldd	r25, Y+1	; 0x01
    5540:	84 0f       	add	r24, r20
    5542:	95 1f       	adc	r25, r21
    5544:	02 96       	adiw	r24, 0x02	; 2
    5546:	91 83       	std	Z+1, r25	; 0x01
    5548:	80 83       	st	Z, r24
    554a:	8a 81       	ldd	r24, Y+2	; 0x02
    554c:	9b 81       	ldd	r25, Y+3	; 0x03
    554e:	93 83       	std	Z+3, r25	; 0x03
    5550:	82 83       	std	Z+2, r24	; 0x02
    5552:	21 15       	cp	r18, r1
    5554:	31 05       	cpc	r19, r1
    5556:	29 f4       	brne	.+10     	; 0x5562 <free+0x92>
    5558:	f0 93 e2 19 	sts	0x19E2, r31	; 0x8019e2 <__flp+0x1>
    555c:	e0 93 e1 19 	sts	0x19E1, r30	; 0x8019e1 <__flp>
    5560:	3d c0       	rjmp	.+122    	; 0x55dc <free+0x10c>
    5562:	e9 01       	movw	r28, r18
    5564:	fb 83       	std	Y+3, r31	; 0x03
    5566:	ea 83       	std	Y+2, r30	; 0x02
    5568:	49 91       	ld	r20, Y+
    556a:	59 91       	ld	r21, Y+
    556c:	c4 0f       	add	r28, r20
    556e:	d5 1f       	adc	r29, r21
    5570:	ec 17       	cp	r30, r28
    5572:	fd 07       	cpc	r31, r29
    5574:	61 f4       	brne	.+24     	; 0x558e <free+0xbe>
    5576:	80 81       	ld	r24, Z
    5578:	91 81       	ldd	r25, Z+1	; 0x01
    557a:	84 0f       	add	r24, r20
    557c:	95 1f       	adc	r25, r21
    557e:	02 96       	adiw	r24, 0x02	; 2
    5580:	e9 01       	movw	r28, r18
    5582:	99 83       	std	Y+1, r25	; 0x01
    5584:	88 83       	st	Y, r24
    5586:	82 81       	ldd	r24, Z+2	; 0x02
    5588:	93 81       	ldd	r25, Z+3	; 0x03
    558a:	9b 83       	std	Y+3, r25	; 0x03
    558c:	8a 83       	std	Y+2, r24	; 0x02
    558e:	e0 e0       	ldi	r30, 0x00	; 0
    5590:	f0 e0       	ldi	r31, 0x00	; 0
    5592:	12 96       	adiw	r26, 0x02	; 2
    5594:	8d 91       	ld	r24, X+
    5596:	9c 91       	ld	r25, X
    5598:	13 97       	sbiw	r26, 0x03	; 3
    559a:	00 97       	sbiw	r24, 0x00	; 0
    559c:	19 f0       	breq	.+6      	; 0x55a4 <free+0xd4>
    559e:	fd 01       	movw	r30, r26
    55a0:	dc 01       	movw	r26, r24
    55a2:	f7 cf       	rjmp	.-18     	; 0x5592 <free+0xc2>
    55a4:	8d 91       	ld	r24, X+
    55a6:	9c 91       	ld	r25, X
    55a8:	11 97       	sbiw	r26, 0x01	; 1
    55aa:	9d 01       	movw	r18, r26
    55ac:	2e 5f       	subi	r18, 0xFE	; 254
    55ae:	3f 4f       	sbci	r19, 0xFF	; 255
    55b0:	82 0f       	add	r24, r18
    55b2:	93 1f       	adc	r25, r19
    55b4:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <__brkval>
    55b8:	30 91 e0 19 	lds	r19, 0x19E0	; 0x8019e0 <__brkval+0x1>
    55bc:	28 17       	cp	r18, r24
    55be:	39 07       	cpc	r19, r25
    55c0:	69 f4       	brne	.+26     	; 0x55dc <free+0x10c>
    55c2:	30 97       	sbiw	r30, 0x00	; 0
    55c4:	29 f4       	brne	.+10     	; 0x55d0 <free+0x100>
    55c6:	10 92 e2 19 	sts	0x19E2, r1	; 0x8019e2 <__flp+0x1>
    55ca:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <__flp>
    55ce:	02 c0       	rjmp	.+4      	; 0x55d4 <free+0x104>
    55d0:	13 82       	std	Z+3, r1	; 0x03
    55d2:	12 82       	std	Z+2, r1	; 0x02
    55d4:	b0 93 e0 19 	sts	0x19E0, r27	; 0x8019e0 <__brkval+0x1>
    55d8:	a0 93 df 19 	sts	0x19DF, r26	; 0x8019df <__brkval>
    55dc:	df 91       	pop	r29
    55de:	cf 91       	pop	r28
    55e0:	08 95       	ret

000055e2 <abort>:
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	f8 94       	cli
    55e8:	7d c3       	rjmp	.+1786   	; 0x5ce4 <_exit>

000055ea <memcpy>:
    55ea:	fb 01       	movw	r30, r22
    55ec:	dc 01       	movw	r26, r24
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <memcpy+0xa>
    55f0:	01 90       	ld	r0, Z+
    55f2:	0d 92       	st	X+, r0
    55f4:	41 50       	subi	r20, 0x01	; 1
    55f6:	50 40       	sbci	r21, 0x00	; 0
    55f8:	d8 f7       	brcc	.-10     	; 0x55f0 <memcpy+0x6>
    55fa:	08 95       	ret

000055fc <memset>:
    55fc:	dc 01       	movw	r26, r24
    55fe:	01 c0       	rjmp	.+2      	; 0x5602 <memset+0x6>
    5600:	6d 93       	st	X+, r22
    5602:	41 50       	subi	r20, 0x01	; 1
    5604:	50 40       	sbci	r21, 0x00	; 0
    5606:	e0 f7       	brcc	.-8      	; 0x5600 <memset+0x4>
    5608:	08 95       	ret

0000560a <strcasestr>:
    560a:	fb 01       	movw	r30, r22
    560c:	51 91       	ld	r21, Z+
    560e:	55 23       	and	r21, r21
    5610:	b1 f0       	breq	.+44     	; 0x563e <strcasestr+0x34>
    5612:	bf 01       	movw	r22, r30
    5614:	dc 01       	movw	r26, r24
    5616:	05 2e       	mov	r0, r21
    5618:	4d 91       	ld	r20, X+
    561a:	44 23       	and	r20, r20
    561c:	69 f0       	breq	.+26     	; 0x5638 <strcasestr+0x2e>
    561e:	10 d0       	rcall	.+32     	; 0x5640 <strcasestr+0x36>
    5620:	d9 f7       	brne	.-10     	; 0x5618 <strcasestr+0xe>
    5622:	cd 01       	movw	r24, r26
    5624:	01 90       	ld	r0, Z+
    5626:	00 20       	and	r0, r0
    5628:	49 f0       	breq	.+18     	; 0x563c <strcasestr+0x32>
    562a:	4d 91       	ld	r20, X+
    562c:	41 11       	cpse	r20, r1
    562e:	08 d0       	rcall	.+16     	; 0x5640 <strcasestr+0x36>
    5630:	c9 f3       	breq	.-14     	; 0x5624 <strcasestr+0x1a>
    5632:	fb 01       	movw	r30, r22
    5634:	41 11       	cpse	r20, r1
    5636:	ee cf       	rjmp	.-36     	; 0x5614 <strcasestr+0xa>
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	01 97       	sbiw	r24, 0x01	; 1
    563e:	08 95       	ret
    5640:	40 25       	eor	r20, r0
    5642:	39 f0       	breq	.+14     	; 0x5652 <strcasestr+0x48>
    5644:	40 32       	cpi	r20, 0x20	; 32
    5646:	29 f4       	brne	.+10     	; 0x5652 <strcasestr+0x48>
    5648:	40 29       	or	r20, r0
    564a:	4b 57       	subi	r20, 0x7B	; 123
    564c:	46 5e       	subi	r20, 0xE6	; 230
    564e:	08 f0       	brcs	.+2      	; 0x5652 <strcasestr+0x48>
    5650:	18 94       	sez
    5652:	08 95       	ret

00005654 <strcat>:
    5654:	fb 01       	movw	r30, r22
    5656:	dc 01       	movw	r26, r24
    5658:	0d 90       	ld	r0, X+
    565a:	00 20       	and	r0, r0
    565c:	e9 f7       	brne	.-6      	; 0x5658 <strcat+0x4>
    565e:	11 97       	sbiw	r26, 0x01	; 1
    5660:	01 90       	ld	r0, Z+
    5662:	0d 92       	st	X+, r0
    5664:	00 20       	and	r0, r0
    5666:	e1 f7       	brne	.-8      	; 0x5660 <strcat+0xc>
    5668:	08 95       	ret

0000566a <strcpy>:
    566a:	fb 01       	movw	r30, r22
    566c:	dc 01       	movw	r26, r24
    566e:	01 90       	ld	r0, Z+
    5670:	0d 92       	st	X+, r0
    5672:	00 20       	and	r0, r0
    5674:	e1 f7       	brne	.-8      	; 0x566e <strcpy+0x4>
    5676:	08 95       	ret

00005678 <strncasecmp>:
    5678:	fb 01       	movw	r30, r22
    567a:	dc 01       	movw	r26, r24
    567c:	41 50       	subi	r20, 0x01	; 1
    567e:	50 40       	sbci	r21, 0x00	; 0
    5680:	88 f0       	brcs	.+34     	; 0x56a4 <strncasecmp+0x2c>
    5682:	8d 91       	ld	r24, X+
    5684:	81 34       	cpi	r24, 0x41	; 65
    5686:	1c f0       	brlt	.+6      	; 0x568e <strncasecmp+0x16>
    5688:	8b 35       	cpi	r24, 0x5B	; 91
    568a:	0c f4       	brge	.+2      	; 0x568e <strncasecmp+0x16>
    568c:	80 5e       	subi	r24, 0xE0	; 224
    568e:	61 91       	ld	r22, Z+
    5690:	61 34       	cpi	r22, 0x41	; 65
    5692:	1c f0       	brlt	.+6      	; 0x569a <strncasecmp+0x22>
    5694:	6b 35       	cpi	r22, 0x5B	; 91
    5696:	0c f4       	brge	.+2      	; 0x569a <strncasecmp+0x22>
    5698:	60 5e       	subi	r22, 0xE0	; 224
    569a:	86 1b       	sub	r24, r22
    569c:	61 11       	cpse	r22, r1
    569e:	71 f3       	breq	.-36     	; 0x567c <strncasecmp+0x4>
    56a0:	99 0b       	sbc	r25, r25
    56a2:	08 95       	ret
    56a4:	88 1b       	sub	r24, r24
    56a6:	fc cf       	rjmp	.-8      	; 0x56a0 <strncasecmp+0x28>

000056a8 <printf>:
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
    56ac:	cd b7       	in	r28, 0x3d	; 61
    56ae:	de b7       	in	r29, 0x3e	; 62
    56b0:	ae 01       	movw	r20, r28
    56b2:	4a 5f       	subi	r20, 0xFA	; 250
    56b4:	5f 4f       	sbci	r21, 0xFF	; 255
    56b6:	fa 01       	movw	r30, r20
    56b8:	61 91       	ld	r22, Z+
    56ba:	71 91       	ld	r23, Z+
    56bc:	af 01       	movw	r20, r30
    56be:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <__iob+0x2>
    56c2:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <__iob+0x3>
    56c6:	61 d0       	rcall	.+194    	; 0x578a <vfprintf>
    56c8:	df 91       	pop	r29
    56ca:	cf 91       	pop	r28
    56cc:	08 95       	ret

000056ce <puts>:
    56ce:	0f 93       	push	r16
    56d0:	1f 93       	push	r17
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
    56d6:	e0 91 e5 19 	lds	r30, 0x19E5	; 0x8019e5 <__iob+0x2>
    56da:	f0 91 e6 19 	lds	r31, 0x19E6	; 0x8019e6 <__iob+0x3>
    56de:	23 81       	ldd	r18, Z+3	; 0x03
    56e0:	21 ff       	sbrs	r18, 1
    56e2:	1b c0       	rjmp	.+54     	; 0x571a <puts+0x4c>
    56e4:	8c 01       	movw	r16, r24
    56e6:	d0 e0       	ldi	r29, 0x00	; 0
    56e8:	c0 e0       	ldi	r28, 0x00	; 0
    56ea:	f8 01       	movw	r30, r16
    56ec:	81 91       	ld	r24, Z+
    56ee:	8f 01       	movw	r16, r30
    56f0:	60 91 e5 19 	lds	r22, 0x19E5	; 0x8019e5 <__iob+0x2>
    56f4:	70 91 e6 19 	lds	r23, 0x19E6	; 0x8019e6 <__iob+0x3>
    56f8:	db 01       	movw	r26, r22
    56fa:	18 96       	adiw	r26, 0x08	; 8
    56fc:	ed 91       	ld	r30, X+
    56fe:	fc 91       	ld	r31, X
    5700:	19 97       	sbiw	r26, 0x09	; 9
    5702:	88 23       	and	r24, r24
    5704:	31 f0       	breq	.+12     	; 0x5712 <puts+0x44>
    5706:	19 95       	eicall
    5708:	89 2b       	or	r24, r25
    570a:	79 f3       	breq	.-34     	; 0x56ea <puts+0x1c>
    570c:	df ef       	ldi	r29, 0xFF	; 255
    570e:	cf ef       	ldi	r28, 0xFF	; 255
    5710:	ec cf       	rjmp	.-40     	; 0x56ea <puts+0x1c>
    5712:	8a e0       	ldi	r24, 0x0A	; 10
    5714:	19 95       	eicall
    5716:	89 2b       	or	r24, r25
    5718:	19 f0       	breq	.+6      	; 0x5720 <puts+0x52>
    571a:	8f ef       	ldi	r24, 0xFF	; 255
    571c:	9f ef       	ldi	r25, 0xFF	; 255
    571e:	02 c0       	rjmp	.+4      	; 0x5724 <puts+0x56>
    5720:	8d 2f       	mov	r24, r29
    5722:	9c 2f       	mov	r25, r28
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	08 95       	ret

0000572e <sprintf>:
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	cd b7       	in	r28, 0x3d	; 61
    5738:	de b7       	in	r29, 0x3e	; 62
    573a:	2e 97       	sbiw	r28, 0x0e	; 14
    573c:	0f b6       	in	r0, 0x3f	; 63
    573e:	f8 94       	cli
    5740:	de bf       	out	0x3e, r29	; 62
    5742:	0f be       	out	0x3f, r0	; 63
    5744:	cd bf       	out	0x3d, r28	; 61
    5746:	0e 89       	ldd	r16, Y+22	; 0x16
    5748:	1f 89       	ldd	r17, Y+23	; 0x17
    574a:	86 e0       	ldi	r24, 0x06	; 6
    574c:	8c 83       	std	Y+4, r24	; 0x04
    574e:	1a 83       	std	Y+2, r17	; 0x02
    5750:	09 83       	std	Y+1, r16	; 0x01
    5752:	8f ef       	ldi	r24, 0xFF	; 255
    5754:	9f e7       	ldi	r25, 0x7F	; 127
    5756:	9e 83       	std	Y+6, r25	; 0x06
    5758:	8d 83       	std	Y+5, r24	; 0x05
    575a:	ae 01       	movw	r20, r28
    575c:	46 5e       	subi	r20, 0xE6	; 230
    575e:	5f 4f       	sbci	r21, 0xFF	; 255
    5760:	68 8d       	ldd	r22, Y+24	; 0x18
    5762:	79 8d       	ldd	r23, Y+25	; 0x19
    5764:	ce 01       	movw	r24, r28
    5766:	01 96       	adiw	r24, 0x01	; 1
    5768:	10 d0       	rcall	.+32     	; 0x578a <vfprintf>
    576a:	ef 81       	ldd	r30, Y+7	; 0x07
    576c:	f8 85       	ldd	r31, Y+8	; 0x08
    576e:	e0 0f       	add	r30, r16
    5770:	f1 1f       	adc	r31, r17
    5772:	10 82       	st	Z, r1
    5774:	2e 96       	adiw	r28, 0x0e	; 14
    5776:	0f b6       	in	r0, 0x3f	; 63
    5778:	f8 94       	cli
    577a:	de bf       	out	0x3e, r29	; 62
    577c:	0f be       	out	0x3f, r0	; 63
    577e:	cd bf       	out	0x3d, r28	; 61
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	1f 91       	pop	r17
    5786:	0f 91       	pop	r16
    5788:	08 95       	ret

0000578a <vfprintf>:
    578a:	2f 92       	push	r2
    578c:	3f 92       	push	r3
    578e:	4f 92       	push	r4
    5790:	5f 92       	push	r5
    5792:	6f 92       	push	r6
    5794:	7f 92       	push	r7
    5796:	8f 92       	push	r8
    5798:	9f 92       	push	r9
    579a:	af 92       	push	r10
    579c:	bf 92       	push	r11
    579e:	cf 92       	push	r12
    57a0:	df 92       	push	r13
    57a2:	ef 92       	push	r14
    57a4:	ff 92       	push	r15
    57a6:	0f 93       	push	r16
    57a8:	1f 93       	push	r17
    57aa:	cf 93       	push	r28
    57ac:	df 93       	push	r29
    57ae:	cd b7       	in	r28, 0x3d	; 61
    57b0:	de b7       	in	r29, 0x3e	; 62
    57b2:	2b 97       	sbiw	r28, 0x0b	; 11
    57b4:	0f b6       	in	r0, 0x3f	; 63
    57b6:	f8 94       	cli
    57b8:	de bf       	out	0x3e, r29	; 62
    57ba:	0f be       	out	0x3f, r0	; 63
    57bc:	cd bf       	out	0x3d, r28	; 61
    57be:	6c 01       	movw	r12, r24
    57c0:	7b 01       	movw	r14, r22
    57c2:	8a 01       	movw	r16, r20
    57c4:	fc 01       	movw	r30, r24
    57c6:	17 82       	std	Z+7, r1	; 0x07
    57c8:	16 82       	std	Z+6, r1	; 0x06
    57ca:	83 81       	ldd	r24, Z+3	; 0x03
    57cc:	81 ff       	sbrs	r24, 1
    57ce:	bf c1       	rjmp	.+894    	; 0x5b4e <vfprintf+0x3c4>
    57d0:	ce 01       	movw	r24, r28
    57d2:	01 96       	adiw	r24, 0x01	; 1
    57d4:	3c 01       	movw	r6, r24
    57d6:	f6 01       	movw	r30, r12
    57d8:	93 81       	ldd	r25, Z+3	; 0x03
    57da:	f7 01       	movw	r30, r14
    57dc:	93 fd       	sbrc	r25, 3
    57de:	85 91       	lpm	r24, Z+
    57e0:	93 ff       	sbrs	r25, 3
    57e2:	81 91       	ld	r24, Z+
    57e4:	7f 01       	movw	r14, r30
    57e6:	88 23       	and	r24, r24
    57e8:	09 f4       	brne	.+2      	; 0x57ec <vfprintf+0x62>
    57ea:	ad c1       	rjmp	.+858    	; 0x5b46 <vfprintf+0x3bc>
    57ec:	85 32       	cpi	r24, 0x25	; 37
    57ee:	39 f4       	brne	.+14     	; 0x57fe <vfprintf+0x74>
    57f0:	93 fd       	sbrc	r25, 3
    57f2:	85 91       	lpm	r24, Z+
    57f4:	93 ff       	sbrs	r25, 3
    57f6:	81 91       	ld	r24, Z+
    57f8:	7f 01       	movw	r14, r30
    57fa:	85 32       	cpi	r24, 0x25	; 37
    57fc:	21 f4       	brne	.+8      	; 0x5806 <vfprintf+0x7c>
    57fe:	b6 01       	movw	r22, r12
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	d6 d1       	rcall	.+940    	; 0x5bb0 <fputc>
    5804:	e8 cf       	rjmp	.-48     	; 0x57d6 <vfprintf+0x4c>
    5806:	91 2c       	mov	r9, r1
    5808:	21 2c       	mov	r2, r1
    580a:	31 2c       	mov	r3, r1
    580c:	ff e1       	ldi	r31, 0x1F	; 31
    580e:	f3 15       	cp	r31, r3
    5810:	d8 f0       	brcs	.+54     	; 0x5848 <vfprintf+0xbe>
    5812:	8b 32       	cpi	r24, 0x2B	; 43
    5814:	79 f0       	breq	.+30     	; 0x5834 <vfprintf+0xaa>
    5816:	38 f4       	brcc	.+14     	; 0x5826 <vfprintf+0x9c>
    5818:	80 32       	cpi	r24, 0x20	; 32
    581a:	79 f0       	breq	.+30     	; 0x583a <vfprintf+0xb0>
    581c:	83 32       	cpi	r24, 0x23	; 35
    581e:	a1 f4       	brne	.+40     	; 0x5848 <vfprintf+0xbe>
    5820:	23 2d       	mov	r18, r3
    5822:	20 61       	ori	r18, 0x10	; 16
    5824:	1d c0       	rjmp	.+58     	; 0x5860 <vfprintf+0xd6>
    5826:	8d 32       	cpi	r24, 0x2D	; 45
    5828:	61 f0       	breq	.+24     	; 0x5842 <vfprintf+0xb8>
    582a:	80 33       	cpi	r24, 0x30	; 48
    582c:	69 f4       	brne	.+26     	; 0x5848 <vfprintf+0xbe>
    582e:	23 2d       	mov	r18, r3
    5830:	21 60       	ori	r18, 0x01	; 1
    5832:	16 c0       	rjmp	.+44     	; 0x5860 <vfprintf+0xd6>
    5834:	83 2d       	mov	r24, r3
    5836:	82 60       	ori	r24, 0x02	; 2
    5838:	38 2e       	mov	r3, r24
    583a:	e3 2d       	mov	r30, r3
    583c:	e4 60       	ori	r30, 0x04	; 4
    583e:	3e 2e       	mov	r3, r30
    5840:	2a c0       	rjmp	.+84     	; 0x5896 <vfprintf+0x10c>
    5842:	f3 2d       	mov	r31, r3
    5844:	f8 60       	ori	r31, 0x08	; 8
    5846:	1d c0       	rjmp	.+58     	; 0x5882 <vfprintf+0xf8>
    5848:	37 fc       	sbrc	r3, 7
    584a:	2d c0       	rjmp	.+90     	; 0x58a6 <vfprintf+0x11c>
    584c:	20 ed       	ldi	r18, 0xD0	; 208
    584e:	28 0f       	add	r18, r24
    5850:	2a 30       	cpi	r18, 0x0A	; 10
    5852:	40 f0       	brcs	.+16     	; 0x5864 <vfprintf+0xda>
    5854:	8e 32       	cpi	r24, 0x2E	; 46
    5856:	b9 f4       	brne	.+46     	; 0x5886 <vfprintf+0xfc>
    5858:	36 fc       	sbrc	r3, 6
    585a:	75 c1       	rjmp	.+746    	; 0x5b46 <vfprintf+0x3bc>
    585c:	23 2d       	mov	r18, r3
    585e:	20 64       	ori	r18, 0x40	; 64
    5860:	32 2e       	mov	r3, r18
    5862:	19 c0       	rjmp	.+50     	; 0x5896 <vfprintf+0x10c>
    5864:	36 fe       	sbrs	r3, 6
    5866:	06 c0       	rjmp	.+12     	; 0x5874 <vfprintf+0xea>
    5868:	8a e0       	ldi	r24, 0x0A	; 10
    586a:	98 9e       	mul	r9, r24
    586c:	20 0d       	add	r18, r0
    586e:	11 24       	eor	r1, r1
    5870:	92 2e       	mov	r9, r18
    5872:	11 c0       	rjmp	.+34     	; 0x5896 <vfprintf+0x10c>
    5874:	ea e0       	ldi	r30, 0x0A	; 10
    5876:	2e 9e       	mul	r2, r30
    5878:	20 0d       	add	r18, r0
    587a:	11 24       	eor	r1, r1
    587c:	22 2e       	mov	r2, r18
    587e:	f3 2d       	mov	r31, r3
    5880:	f0 62       	ori	r31, 0x20	; 32
    5882:	3f 2e       	mov	r3, r31
    5884:	08 c0       	rjmp	.+16     	; 0x5896 <vfprintf+0x10c>
    5886:	8c 36       	cpi	r24, 0x6C	; 108
    5888:	21 f4       	brne	.+8      	; 0x5892 <vfprintf+0x108>
    588a:	83 2d       	mov	r24, r3
    588c:	80 68       	ori	r24, 0x80	; 128
    588e:	38 2e       	mov	r3, r24
    5890:	02 c0       	rjmp	.+4      	; 0x5896 <vfprintf+0x10c>
    5892:	88 36       	cpi	r24, 0x68	; 104
    5894:	41 f4       	brne	.+16     	; 0x58a6 <vfprintf+0x11c>
    5896:	f7 01       	movw	r30, r14
    5898:	93 fd       	sbrc	r25, 3
    589a:	85 91       	lpm	r24, Z+
    589c:	93 ff       	sbrs	r25, 3
    589e:	81 91       	ld	r24, Z+
    58a0:	7f 01       	movw	r14, r30
    58a2:	81 11       	cpse	r24, r1
    58a4:	b3 cf       	rjmp	.-154    	; 0x580c <vfprintf+0x82>
    58a6:	98 2f       	mov	r25, r24
    58a8:	9f 7d       	andi	r25, 0xDF	; 223
    58aa:	95 54       	subi	r25, 0x45	; 69
    58ac:	93 30       	cpi	r25, 0x03	; 3
    58ae:	28 f4       	brcc	.+10     	; 0x58ba <vfprintf+0x130>
    58b0:	0c 5f       	subi	r16, 0xFC	; 252
    58b2:	1f 4f       	sbci	r17, 0xFF	; 255
    58b4:	9f e3       	ldi	r25, 0x3F	; 63
    58b6:	99 83       	std	Y+1, r25	; 0x01
    58b8:	0d c0       	rjmp	.+26     	; 0x58d4 <vfprintf+0x14a>
    58ba:	83 36       	cpi	r24, 0x63	; 99
    58bc:	31 f0       	breq	.+12     	; 0x58ca <vfprintf+0x140>
    58be:	83 37       	cpi	r24, 0x73	; 115
    58c0:	71 f0       	breq	.+28     	; 0x58de <vfprintf+0x154>
    58c2:	83 35       	cpi	r24, 0x53	; 83
    58c4:	09 f0       	breq	.+2      	; 0x58c8 <vfprintf+0x13e>
    58c6:	55 c0       	rjmp	.+170    	; 0x5972 <vfprintf+0x1e8>
    58c8:	20 c0       	rjmp	.+64     	; 0x590a <vfprintf+0x180>
    58ca:	f8 01       	movw	r30, r16
    58cc:	80 81       	ld	r24, Z
    58ce:	89 83       	std	Y+1, r24	; 0x01
    58d0:	0e 5f       	subi	r16, 0xFE	; 254
    58d2:	1f 4f       	sbci	r17, 0xFF	; 255
    58d4:	88 24       	eor	r8, r8
    58d6:	83 94       	inc	r8
    58d8:	91 2c       	mov	r9, r1
    58da:	53 01       	movw	r10, r6
    58dc:	12 c0       	rjmp	.+36     	; 0x5902 <vfprintf+0x178>
    58de:	28 01       	movw	r4, r16
    58e0:	f2 e0       	ldi	r31, 0x02	; 2
    58e2:	4f 0e       	add	r4, r31
    58e4:	51 1c       	adc	r5, r1
    58e6:	f8 01       	movw	r30, r16
    58e8:	a0 80       	ld	r10, Z
    58ea:	b1 80       	ldd	r11, Z+1	; 0x01
    58ec:	36 fe       	sbrs	r3, 6
    58ee:	03 c0       	rjmp	.+6      	; 0x58f6 <vfprintf+0x16c>
    58f0:	69 2d       	mov	r22, r9
    58f2:	70 e0       	ldi	r23, 0x00	; 0
    58f4:	02 c0       	rjmp	.+4      	; 0x58fa <vfprintf+0x170>
    58f6:	6f ef       	ldi	r22, 0xFF	; 255
    58f8:	7f ef       	ldi	r23, 0xFF	; 255
    58fa:	c5 01       	movw	r24, r10
    58fc:	4e d1       	rcall	.+668    	; 0x5b9a <strnlen>
    58fe:	4c 01       	movw	r8, r24
    5900:	82 01       	movw	r16, r4
    5902:	f3 2d       	mov	r31, r3
    5904:	ff 77       	andi	r31, 0x7F	; 127
    5906:	3f 2e       	mov	r3, r31
    5908:	15 c0       	rjmp	.+42     	; 0x5934 <vfprintf+0x1aa>
    590a:	28 01       	movw	r4, r16
    590c:	22 e0       	ldi	r18, 0x02	; 2
    590e:	42 0e       	add	r4, r18
    5910:	51 1c       	adc	r5, r1
    5912:	f8 01       	movw	r30, r16
    5914:	a0 80       	ld	r10, Z
    5916:	b1 80       	ldd	r11, Z+1	; 0x01
    5918:	36 fe       	sbrs	r3, 6
    591a:	03 c0       	rjmp	.+6      	; 0x5922 <vfprintf+0x198>
    591c:	69 2d       	mov	r22, r9
    591e:	70 e0       	ldi	r23, 0x00	; 0
    5920:	02 c0       	rjmp	.+4      	; 0x5926 <vfprintf+0x19c>
    5922:	6f ef       	ldi	r22, 0xFF	; 255
    5924:	7f ef       	ldi	r23, 0xFF	; 255
    5926:	c5 01       	movw	r24, r10
    5928:	2d d1       	rcall	.+602    	; 0x5b84 <strnlen_P>
    592a:	4c 01       	movw	r8, r24
    592c:	f3 2d       	mov	r31, r3
    592e:	f0 68       	ori	r31, 0x80	; 128
    5930:	3f 2e       	mov	r3, r31
    5932:	82 01       	movw	r16, r4
    5934:	33 fc       	sbrc	r3, 3
    5936:	19 c0       	rjmp	.+50     	; 0x596a <vfprintf+0x1e0>
    5938:	82 2d       	mov	r24, r2
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	88 16       	cp	r8, r24
    593e:	99 06       	cpc	r9, r25
    5940:	a0 f4       	brcc	.+40     	; 0x596a <vfprintf+0x1e0>
    5942:	b6 01       	movw	r22, r12
    5944:	80 e2       	ldi	r24, 0x20	; 32
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	33 d1       	rcall	.+614    	; 0x5bb0 <fputc>
    594a:	2a 94       	dec	r2
    594c:	f5 cf       	rjmp	.-22     	; 0x5938 <vfprintf+0x1ae>
    594e:	f5 01       	movw	r30, r10
    5950:	37 fc       	sbrc	r3, 7
    5952:	85 91       	lpm	r24, Z+
    5954:	37 fe       	sbrs	r3, 7
    5956:	81 91       	ld	r24, Z+
    5958:	5f 01       	movw	r10, r30
    595a:	b6 01       	movw	r22, r12
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	28 d1       	rcall	.+592    	; 0x5bb0 <fputc>
    5960:	21 10       	cpse	r2, r1
    5962:	2a 94       	dec	r2
    5964:	21 e0       	ldi	r18, 0x01	; 1
    5966:	82 1a       	sub	r8, r18
    5968:	91 08       	sbc	r9, r1
    596a:	81 14       	cp	r8, r1
    596c:	91 04       	cpc	r9, r1
    596e:	79 f7       	brne	.-34     	; 0x594e <vfprintf+0x1c4>
    5970:	e1 c0       	rjmp	.+450    	; 0x5b34 <vfprintf+0x3aa>
    5972:	84 36       	cpi	r24, 0x64	; 100
    5974:	11 f0       	breq	.+4      	; 0x597a <vfprintf+0x1f0>
    5976:	89 36       	cpi	r24, 0x69	; 105
    5978:	39 f5       	brne	.+78     	; 0x59c8 <vfprintf+0x23e>
    597a:	f8 01       	movw	r30, r16
    597c:	37 fe       	sbrs	r3, 7
    597e:	07 c0       	rjmp	.+14     	; 0x598e <vfprintf+0x204>
    5980:	60 81       	ld	r22, Z
    5982:	71 81       	ldd	r23, Z+1	; 0x01
    5984:	82 81       	ldd	r24, Z+2	; 0x02
    5986:	93 81       	ldd	r25, Z+3	; 0x03
    5988:	0c 5f       	subi	r16, 0xFC	; 252
    598a:	1f 4f       	sbci	r17, 0xFF	; 255
    598c:	08 c0       	rjmp	.+16     	; 0x599e <vfprintf+0x214>
    598e:	60 81       	ld	r22, Z
    5990:	71 81       	ldd	r23, Z+1	; 0x01
    5992:	07 2e       	mov	r0, r23
    5994:	00 0c       	add	r0, r0
    5996:	88 0b       	sbc	r24, r24
    5998:	99 0b       	sbc	r25, r25
    599a:	0e 5f       	subi	r16, 0xFE	; 254
    599c:	1f 4f       	sbci	r17, 0xFF	; 255
    599e:	f3 2d       	mov	r31, r3
    59a0:	ff 76       	andi	r31, 0x6F	; 111
    59a2:	3f 2e       	mov	r3, r31
    59a4:	97 ff       	sbrs	r25, 7
    59a6:	09 c0       	rjmp	.+18     	; 0x59ba <vfprintf+0x230>
    59a8:	90 95       	com	r25
    59aa:	80 95       	com	r24
    59ac:	70 95       	com	r23
    59ae:	61 95       	neg	r22
    59b0:	7f 4f       	sbci	r23, 0xFF	; 255
    59b2:	8f 4f       	sbci	r24, 0xFF	; 255
    59b4:	9f 4f       	sbci	r25, 0xFF	; 255
    59b6:	f0 68       	ori	r31, 0x80	; 128
    59b8:	3f 2e       	mov	r3, r31
    59ba:	2a e0       	ldi	r18, 0x0A	; 10
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	a3 01       	movw	r20, r6
    59c0:	33 d1       	rcall	.+614    	; 0x5c28 <__ultoa_invert>
    59c2:	88 2e       	mov	r8, r24
    59c4:	86 18       	sub	r8, r6
    59c6:	44 c0       	rjmp	.+136    	; 0x5a50 <vfprintf+0x2c6>
    59c8:	85 37       	cpi	r24, 0x75	; 117
    59ca:	31 f4       	brne	.+12     	; 0x59d8 <vfprintf+0x24e>
    59cc:	23 2d       	mov	r18, r3
    59ce:	2f 7e       	andi	r18, 0xEF	; 239
    59d0:	b2 2e       	mov	r11, r18
    59d2:	2a e0       	ldi	r18, 0x0A	; 10
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	25 c0       	rjmp	.+74     	; 0x5a22 <vfprintf+0x298>
    59d8:	93 2d       	mov	r25, r3
    59da:	99 7f       	andi	r25, 0xF9	; 249
    59dc:	b9 2e       	mov	r11, r25
    59de:	8f 36       	cpi	r24, 0x6F	; 111
    59e0:	c1 f0       	breq	.+48     	; 0x5a12 <vfprintf+0x288>
    59e2:	18 f4       	brcc	.+6      	; 0x59ea <vfprintf+0x260>
    59e4:	88 35       	cpi	r24, 0x58	; 88
    59e6:	79 f0       	breq	.+30     	; 0x5a06 <vfprintf+0x27c>
    59e8:	ae c0       	rjmp	.+348    	; 0x5b46 <vfprintf+0x3bc>
    59ea:	80 37       	cpi	r24, 0x70	; 112
    59ec:	19 f0       	breq	.+6      	; 0x59f4 <vfprintf+0x26a>
    59ee:	88 37       	cpi	r24, 0x78	; 120
    59f0:	21 f0       	breq	.+8      	; 0x59fa <vfprintf+0x270>
    59f2:	a9 c0       	rjmp	.+338    	; 0x5b46 <vfprintf+0x3bc>
    59f4:	e9 2f       	mov	r30, r25
    59f6:	e0 61       	ori	r30, 0x10	; 16
    59f8:	be 2e       	mov	r11, r30
    59fa:	b4 fe       	sbrs	r11, 4
    59fc:	0d c0       	rjmp	.+26     	; 0x5a18 <vfprintf+0x28e>
    59fe:	fb 2d       	mov	r31, r11
    5a00:	f4 60       	ori	r31, 0x04	; 4
    5a02:	bf 2e       	mov	r11, r31
    5a04:	09 c0       	rjmp	.+18     	; 0x5a18 <vfprintf+0x28e>
    5a06:	34 fe       	sbrs	r3, 4
    5a08:	0a c0       	rjmp	.+20     	; 0x5a1e <vfprintf+0x294>
    5a0a:	29 2f       	mov	r18, r25
    5a0c:	26 60       	ori	r18, 0x06	; 6
    5a0e:	b2 2e       	mov	r11, r18
    5a10:	06 c0       	rjmp	.+12     	; 0x5a1e <vfprintf+0x294>
    5a12:	28 e0       	ldi	r18, 0x08	; 8
    5a14:	30 e0       	ldi	r19, 0x00	; 0
    5a16:	05 c0       	rjmp	.+10     	; 0x5a22 <vfprintf+0x298>
    5a18:	20 e1       	ldi	r18, 0x10	; 16
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	02 c0       	rjmp	.+4      	; 0x5a22 <vfprintf+0x298>
    5a1e:	20 e1       	ldi	r18, 0x10	; 16
    5a20:	32 e0       	ldi	r19, 0x02	; 2
    5a22:	f8 01       	movw	r30, r16
    5a24:	b7 fe       	sbrs	r11, 7
    5a26:	07 c0       	rjmp	.+14     	; 0x5a36 <vfprintf+0x2ac>
    5a28:	60 81       	ld	r22, Z
    5a2a:	71 81       	ldd	r23, Z+1	; 0x01
    5a2c:	82 81       	ldd	r24, Z+2	; 0x02
    5a2e:	93 81       	ldd	r25, Z+3	; 0x03
    5a30:	0c 5f       	subi	r16, 0xFC	; 252
    5a32:	1f 4f       	sbci	r17, 0xFF	; 255
    5a34:	06 c0       	rjmp	.+12     	; 0x5a42 <vfprintf+0x2b8>
    5a36:	60 81       	ld	r22, Z
    5a38:	71 81       	ldd	r23, Z+1	; 0x01
    5a3a:	80 e0       	ldi	r24, 0x00	; 0
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    5a3e:	0e 5f       	subi	r16, 0xFE	; 254
    5a40:	1f 4f       	sbci	r17, 0xFF	; 255
    5a42:	a3 01       	movw	r20, r6
    5a44:	f1 d0       	rcall	.+482    	; 0x5c28 <__ultoa_invert>
    5a46:	88 2e       	mov	r8, r24
    5a48:	86 18       	sub	r8, r6
    5a4a:	fb 2d       	mov	r31, r11
    5a4c:	ff 77       	andi	r31, 0x7F	; 127
    5a4e:	3f 2e       	mov	r3, r31
    5a50:	36 fe       	sbrs	r3, 6
    5a52:	0d c0       	rjmp	.+26     	; 0x5a6e <vfprintf+0x2e4>
    5a54:	23 2d       	mov	r18, r3
    5a56:	2e 7f       	andi	r18, 0xFE	; 254
    5a58:	a2 2e       	mov	r10, r18
    5a5a:	89 14       	cp	r8, r9
    5a5c:	58 f4       	brcc	.+22     	; 0x5a74 <vfprintf+0x2ea>
    5a5e:	34 fe       	sbrs	r3, 4
    5a60:	0b c0       	rjmp	.+22     	; 0x5a78 <vfprintf+0x2ee>
    5a62:	32 fc       	sbrc	r3, 2
    5a64:	09 c0       	rjmp	.+18     	; 0x5a78 <vfprintf+0x2ee>
    5a66:	83 2d       	mov	r24, r3
    5a68:	8e 7e       	andi	r24, 0xEE	; 238
    5a6a:	a8 2e       	mov	r10, r24
    5a6c:	05 c0       	rjmp	.+10     	; 0x5a78 <vfprintf+0x2ee>
    5a6e:	b8 2c       	mov	r11, r8
    5a70:	a3 2c       	mov	r10, r3
    5a72:	03 c0       	rjmp	.+6      	; 0x5a7a <vfprintf+0x2f0>
    5a74:	b8 2c       	mov	r11, r8
    5a76:	01 c0       	rjmp	.+2      	; 0x5a7a <vfprintf+0x2f0>
    5a78:	b9 2c       	mov	r11, r9
    5a7a:	a4 fe       	sbrs	r10, 4
    5a7c:	0f c0       	rjmp	.+30     	; 0x5a9c <vfprintf+0x312>
    5a7e:	fe 01       	movw	r30, r28
    5a80:	e8 0d       	add	r30, r8
    5a82:	f1 1d       	adc	r31, r1
    5a84:	80 81       	ld	r24, Z
    5a86:	80 33       	cpi	r24, 0x30	; 48
    5a88:	21 f4       	brne	.+8      	; 0x5a92 <vfprintf+0x308>
    5a8a:	9a 2d       	mov	r25, r10
    5a8c:	99 7e       	andi	r25, 0xE9	; 233
    5a8e:	a9 2e       	mov	r10, r25
    5a90:	09 c0       	rjmp	.+18     	; 0x5aa4 <vfprintf+0x31a>
    5a92:	a2 fe       	sbrs	r10, 2
    5a94:	06 c0       	rjmp	.+12     	; 0x5aa2 <vfprintf+0x318>
    5a96:	b3 94       	inc	r11
    5a98:	b3 94       	inc	r11
    5a9a:	04 c0       	rjmp	.+8      	; 0x5aa4 <vfprintf+0x31a>
    5a9c:	8a 2d       	mov	r24, r10
    5a9e:	86 78       	andi	r24, 0x86	; 134
    5aa0:	09 f0       	breq	.+2      	; 0x5aa4 <vfprintf+0x31a>
    5aa2:	b3 94       	inc	r11
    5aa4:	a3 fc       	sbrc	r10, 3
    5aa6:	10 c0       	rjmp	.+32     	; 0x5ac8 <vfprintf+0x33e>
    5aa8:	a0 fe       	sbrs	r10, 0
    5aaa:	06 c0       	rjmp	.+12     	; 0x5ab8 <vfprintf+0x32e>
    5aac:	b2 14       	cp	r11, r2
    5aae:	80 f4       	brcc	.+32     	; 0x5ad0 <vfprintf+0x346>
    5ab0:	28 0c       	add	r2, r8
    5ab2:	92 2c       	mov	r9, r2
    5ab4:	9b 18       	sub	r9, r11
    5ab6:	0d c0       	rjmp	.+26     	; 0x5ad2 <vfprintf+0x348>
    5ab8:	b2 14       	cp	r11, r2
    5aba:	58 f4       	brcc	.+22     	; 0x5ad2 <vfprintf+0x348>
    5abc:	b6 01       	movw	r22, r12
    5abe:	80 e2       	ldi	r24, 0x20	; 32
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	76 d0       	rcall	.+236    	; 0x5bb0 <fputc>
    5ac4:	b3 94       	inc	r11
    5ac6:	f8 cf       	rjmp	.-16     	; 0x5ab8 <vfprintf+0x32e>
    5ac8:	b2 14       	cp	r11, r2
    5aca:	18 f4       	brcc	.+6      	; 0x5ad2 <vfprintf+0x348>
    5acc:	2b 18       	sub	r2, r11
    5ace:	02 c0       	rjmp	.+4      	; 0x5ad4 <vfprintf+0x34a>
    5ad0:	98 2c       	mov	r9, r8
    5ad2:	21 2c       	mov	r2, r1
    5ad4:	a4 fe       	sbrs	r10, 4
    5ad6:	0f c0       	rjmp	.+30     	; 0x5af6 <vfprintf+0x36c>
    5ad8:	b6 01       	movw	r22, r12
    5ada:	80 e3       	ldi	r24, 0x30	; 48
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	68 d0       	rcall	.+208    	; 0x5bb0 <fputc>
    5ae0:	a2 fe       	sbrs	r10, 2
    5ae2:	16 c0       	rjmp	.+44     	; 0x5b10 <vfprintf+0x386>
    5ae4:	a1 fc       	sbrc	r10, 1
    5ae6:	03 c0       	rjmp	.+6      	; 0x5aee <vfprintf+0x364>
    5ae8:	88 e7       	ldi	r24, 0x78	; 120
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	02 c0       	rjmp	.+4      	; 0x5af2 <vfprintf+0x368>
    5aee:	88 e5       	ldi	r24, 0x58	; 88
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	b6 01       	movw	r22, r12
    5af4:	0c c0       	rjmp	.+24     	; 0x5b0e <vfprintf+0x384>
    5af6:	8a 2d       	mov	r24, r10
    5af8:	86 78       	andi	r24, 0x86	; 134
    5afa:	51 f0       	breq	.+20     	; 0x5b10 <vfprintf+0x386>
    5afc:	a1 fe       	sbrs	r10, 1
    5afe:	02 c0       	rjmp	.+4      	; 0x5b04 <vfprintf+0x37a>
    5b00:	8b e2       	ldi	r24, 0x2B	; 43
    5b02:	01 c0       	rjmp	.+2      	; 0x5b06 <vfprintf+0x37c>
    5b04:	80 e2       	ldi	r24, 0x20	; 32
    5b06:	a7 fc       	sbrc	r10, 7
    5b08:	8d e2       	ldi	r24, 0x2D	; 45
    5b0a:	b6 01       	movw	r22, r12
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	50 d0       	rcall	.+160    	; 0x5bb0 <fputc>
    5b10:	89 14       	cp	r8, r9
    5b12:	30 f4       	brcc	.+12     	; 0x5b20 <vfprintf+0x396>
    5b14:	b6 01       	movw	r22, r12
    5b16:	80 e3       	ldi	r24, 0x30	; 48
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	4a d0       	rcall	.+148    	; 0x5bb0 <fputc>
    5b1c:	9a 94       	dec	r9
    5b1e:	f8 cf       	rjmp	.-16     	; 0x5b10 <vfprintf+0x386>
    5b20:	8a 94       	dec	r8
    5b22:	f3 01       	movw	r30, r6
    5b24:	e8 0d       	add	r30, r8
    5b26:	f1 1d       	adc	r31, r1
    5b28:	80 81       	ld	r24, Z
    5b2a:	b6 01       	movw	r22, r12
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	40 d0       	rcall	.+128    	; 0x5bb0 <fputc>
    5b30:	81 10       	cpse	r8, r1
    5b32:	f6 cf       	rjmp	.-20     	; 0x5b20 <vfprintf+0x396>
    5b34:	22 20       	and	r2, r2
    5b36:	09 f4       	brne	.+2      	; 0x5b3a <vfprintf+0x3b0>
    5b38:	4e ce       	rjmp	.-868    	; 0x57d6 <vfprintf+0x4c>
    5b3a:	b6 01       	movw	r22, r12
    5b3c:	80 e2       	ldi	r24, 0x20	; 32
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	37 d0       	rcall	.+110    	; 0x5bb0 <fputc>
    5b42:	2a 94       	dec	r2
    5b44:	f7 cf       	rjmp	.-18     	; 0x5b34 <vfprintf+0x3aa>
    5b46:	f6 01       	movw	r30, r12
    5b48:	86 81       	ldd	r24, Z+6	; 0x06
    5b4a:	97 81       	ldd	r25, Z+7	; 0x07
    5b4c:	02 c0       	rjmp	.+4      	; 0x5b52 <vfprintf+0x3c8>
    5b4e:	8f ef       	ldi	r24, 0xFF	; 255
    5b50:	9f ef       	ldi	r25, 0xFF	; 255
    5b52:	2b 96       	adiw	r28, 0x0b	; 11
    5b54:	0f b6       	in	r0, 0x3f	; 63
    5b56:	f8 94       	cli
    5b58:	de bf       	out	0x3e, r29	; 62
    5b5a:	0f be       	out	0x3f, r0	; 63
    5b5c:	cd bf       	out	0x3d, r28	; 61
    5b5e:	df 91       	pop	r29
    5b60:	cf 91       	pop	r28
    5b62:	1f 91       	pop	r17
    5b64:	0f 91       	pop	r16
    5b66:	ff 90       	pop	r15
    5b68:	ef 90       	pop	r14
    5b6a:	df 90       	pop	r13
    5b6c:	cf 90       	pop	r12
    5b6e:	bf 90       	pop	r11
    5b70:	af 90       	pop	r10
    5b72:	9f 90       	pop	r9
    5b74:	8f 90       	pop	r8
    5b76:	7f 90       	pop	r7
    5b78:	6f 90       	pop	r6
    5b7a:	5f 90       	pop	r5
    5b7c:	4f 90       	pop	r4
    5b7e:	3f 90       	pop	r3
    5b80:	2f 90       	pop	r2
    5b82:	08 95       	ret

00005b84 <strnlen_P>:
    5b84:	fc 01       	movw	r30, r24
    5b86:	05 90       	lpm	r0, Z+
    5b88:	61 50       	subi	r22, 0x01	; 1
    5b8a:	70 40       	sbci	r23, 0x00	; 0
    5b8c:	01 10       	cpse	r0, r1
    5b8e:	d8 f7       	brcc	.-10     	; 0x5b86 <strnlen_P+0x2>
    5b90:	80 95       	com	r24
    5b92:	90 95       	com	r25
    5b94:	8e 0f       	add	r24, r30
    5b96:	9f 1f       	adc	r25, r31
    5b98:	08 95       	ret

00005b9a <strnlen>:
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	61 50       	subi	r22, 0x01	; 1
    5b9e:	70 40       	sbci	r23, 0x00	; 0
    5ba0:	01 90       	ld	r0, Z+
    5ba2:	01 10       	cpse	r0, r1
    5ba4:	d8 f7       	brcc	.-10     	; 0x5b9c <strnlen+0x2>
    5ba6:	80 95       	com	r24
    5ba8:	90 95       	com	r25
    5baa:	8e 0f       	add	r24, r30
    5bac:	9f 1f       	adc	r25, r31
    5bae:	08 95       	ret

00005bb0 <fputc>:
    5bb0:	0f 93       	push	r16
    5bb2:	1f 93       	push	r17
    5bb4:	cf 93       	push	r28
    5bb6:	df 93       	push	r29
    5bb8:	fb 01       	movw	r30, r22
    5bba:	23 81       	ldd	r18, Z+3	; 0x03
    5bbc:	21 fd       	sbrc	r18, 1
    5bbe:	03 c0       	rjmp	.+6      	; 0x5bc6 <fputc+0x16>
    5bc0:	8f ef       	ldi	r24, 0xFF	; 255
    5bc2:	9f ef       	ldi	r25, 0xFF	; 255
    5bc4:	2c c0       	rjmp	.+88     	; 0x5c1e <fputc+0x6e>
    5bc6:	22 ff       	sbrs	r18, 2
    5bc8:	16 c0       	rjmp	.+44     	; 0x5bf6 <fputc+0x46>
    5bca:	46 81       	ldd	r20, Z+6	; 0x06
    5bcc:	57 81       	ldd	r21, Z+7	; 0x07
    5bce:	24 81       	ldd	r18, Z+4	; 0x04
    5bd0:	35 81       	ldd	r19, Z+5	; 0x05
    5bd2:	42 17       	cp	r20, r18
    5bd4:	53 07       	cpc	r21, r19
    5bd6:	44 f4       	brge	.+16     	; 0x5be8 <fputc+0x38>
    5bd8:	a0 81       	ld	r26, Z
    5bda:	b1 81       	ldd	r27, Z+1	; 0x01
    5bdc:	9d 01       	movw	r18, r26
    5bde:	2f 5f       	subi	r18, 0xFF	; 255
    5be0:	3f 4f       	sbci	r19, 0xFF	; 255
    5be2:	31 83       	std	Z+1, r19	; 0x01
    5be4:	20 83       	st	Z, r18
    5be6:	8c 93       	st	X, r24
    5be8:	26 81       	ldd	r18, Z+6	; 0x06
    5bea:	37 81       	ldd	r19, Z+7	; 0x07
    5bec:	2f 5f       	subi	r18, 0xFF	; 255
    5bee:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf0:	37 83       	std	Z+7, r19	; 0x07
    5bf2:	26 83       	std	Z+6, r18	; 0x06
    5bf4:	14 c0       	rjmp	.+40     	; 0x5c1e <fputc+0x6e>
    5bf6:	8b 01       	movw	r16, r22
    5bf8:	ec 01       	movw	r28, r24
    5bfa:	fb 01       	movw	r30, r22
    5bfc:	00 84       	ldd	r0, Z+8	; 0x08
    5bfe:	f1 85       	ldd	r31, Z+9	; 0x09
    5c00:	e0 2d       	mov	r30, r0
    5c02:	19 95       	eicall
    5c04:	89 2b       	or	r24, r25
    5c06:	e1 f6       	brne	.-72     	; 0x5bc0 <fputc+0x10>
    5c08:	d8 01       	movw	r26, r16
    5c0a:	16 96       	adiw	r26, 0x06	; 6
    5c0c:	8d 91       	ld	r24, X+
    5c0e:	9c 91       	ld	r25, X
    5c10:	17 97       	sbiw	r26, 0x07	; 7
    5c12:	01 96       	adiw	r24, 0x01	; 1
    5c14:	17 96       	adiw	r26, 0x07	; 7
    5c16:	9c 93       	st	X, r25
    5c18:	8e 93       	st	-X, r24
    5c1a:	16 97       	sbiw	r26, 0x06	; 6
    5c1c:	ce 01       	movw	r24, r28
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	1f 91       	pop	r17
    5c24:	0f 91       	pop	r16
    5c26:	08 95       	ret

00005c28 <__ultoa_invert>:
    5c28:	fa 01       	movw	r30, r20
    5c2a:	aa 27       	eor	r26, r26
    5c2c:	28 30       	cpi	r18, 0x08	; 8
    5c2e:	51 f1       	breq	.+84     	; 0x5c84 <__ultoa_invert+0x5c>
    5c30:	20 31       	cpi	r18, 0x10	; 16
    5c32:	81 f1       	breq	.+96     	; 0x5c94 <__ultoa_invert+0x6c>
    5c34:	e8 94       	clt
    5c36:	6f 93       	push	r22
    5c38:	6e 7f       	andi	r22, 0xFE	; 254
    5c3a:	6e 5f       	subi	r22, 0xFE	; 254
    5c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c40:	9f 4f       	sbci	r25, 0xFF	; 255
    5c42:	af 4f       	sbci	r26, 0xFF	; 255
    5c44:	b1 e0       	ldi	r27, 0x01	; 1
    5c46:	3e d0       	rcall	.+124    	; 0x5cc4 <__ultoa_invert+0x9c>
    5c48:	b4 e0       	ldi	r27, 0x04	; 4
    5c4a:	3c d0       	rcall	.+120    	; 0x5cc4 <__ultoa_invert+0x9c>
    5c4c:	67 0f       	add	r22, r23
    5c4e:	78 1f       	adc	r23, r24
    5c50:	89 1f       	adc	r24, r25
    5c52:	9a 1f       	adc	r25, r26
    5c54:	a1 1d       	adc	r26, r1
    5c56:	68 0f       	add	r22, r24
    5c58:	79 1f       	adc	r23, r25
    5c5a:	8a 1f       	adc	r24, r26
    5c5c:	91 1d       	adc	r25, r1
    5c5e:	a1 1d       	adc	r26, r1
    5c60:	6a 0f       	add	r22, r26
    5c62:	71 1d       	adc	r23, r1
    5c64:	81 1d       	adc	r24, r1
    5c66:	91 1d       	adc	r25, r1
    5c68:	a1 1d       	adc	r26, r1
    5c6a:	20 d0       	rcall	.+64     	; 0x5cac <__ultoa_invert+0x84>
    5c6c:	09 f4       	brne	.+2      	; 0x5c70 <__ultoa_invert+0x48>
    5c6e:	68 94       	set
    5c70:	3f 91       	pop	r19
    5c72:	2a e0       	ldi	r18, 0x0A	; 10
    5c74:	26 9f       	mul	r18, r22
    5c76:	11 24       	eor	r1, r1
    5c78:	30 19       	sub	r19, r0
    5c7a:	30 5d       	subi	r19, 0xD0	; 208
    5c7c:	31 93       	st	Z+, r19
    5c7e:	de f6       	brtc	.-74     	; 0x5c36 <__ultoa_invert+0xe>
    5c80:	cf 01       	movw	r24, r30
    5c82:	08 95       	ret
    5c84:	46 2f       	mov	r20, r22
    5c86:	47 70       	andi	r20, 0x07	; 7
    5c88:	40 5d       	subi	r20, 0xD0	; 208
    5c8a:	41 93       	st	Z+, r20
    5c8c:	b3 e0       	ldi	r27, 0x03	; 3
    5c8e:	0f d0       	rcall	.+30     	; 0x5cae <__ultoa_invert+0x86>
    5c90:	c9 f7       	brne	.-14     	; 0x5c84 <__ultoa_invert+0x5c>
    5c92:	f6 cf       	rjmp	.-20     	; 0x5c80 <__ultoa_invert+0x58>
    5c94:	46 2f       	mov	r20, r22
    5c96:	4f 70       	andi	r20, 0x0F	; 15
    5c98:	40 5d       	subi	r20, 0xD0	; 208
    5c9a:	4a 33       	cpi	r20, 0x3A	; 58
    5c9c:	18 f0       	brcs	.+6      	; 0x5ca4 <__ultoa_invert+0x7c>
    5c9e:	49 5d       	subi	r20, 0xD9	; 217
    5ca0:	31 fd       	sbrc	r19, 1
    5ca2:	40 52       	subi	r20, 0x20	; 32
    5ca4:	41 93       	st	Z+, r20
    5ca6:	02 d0       	rcall	.+4      	; 0x5cac <__ultoa_invert+0x84>
    5ca8:	a9 f7       	brne	.-22     	; 0x5c94 <__ultoa_invert+0x6c>
    5caa:	ea cf       	rjmp	.-44     	; 0x5c80 <__ultoa_invert+0x58>
    5cac:	b4 e0       	ldi	r27, 0x04	; 4
    5cae:	a6 95       	lsr	r26
    5cb0:	97 95       	ror	r25
    5cb2:	87 95       	ror	r24
    5cb4:	77 95       	ror	r23
    5cb6:	67 95       	ror	r22
    5cb8:	ba 95       	dec	r27
    5cba:	c9 f7       	brne	.-14     	; 0x5cae <__ultoa_invert+0x86>
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	61 05       	cpc	r22, r1
    5cc0:	71 05       	cpc	r23, r1
    5cc2:	08 95       	ret
    5cc4:	9b 01       	movw	r18, r22
    5cc6:	ac 01       	movw	r20, r24
    5cc8:	0a 2e       	mov	r0, r26
    5cca:	06 94       	lsr	r0
    5ccc:	57 95       	ror	r21
    5cce:	47 95       	ror	r20
    5cd0:	37 95       	ror	r19
    5cd2:	27 95       	ror	r18
    5cd4:	ba 95       	dec	r27
    5cd6:	c9 f7       	brne	.-14     	; 0x5cca <__ultoa_invert+0xa2>
    5cd8:	62 0f       	add	r22, r18
    5cda:	73 1f       	adc	r23, r19
    5cdc:	84 1f       	adc	r24, r20
    5cde:	95 1f       	adc	r25, r21
    5ce0:	a0 1d       	adc	r26, r0
    5ce2:	08 95       	ret

00005ce4 <_exit>:
    5ce4:	f8 94       	cli

00005ce6 <__stop_program>:
    5ce6:	ff cf       	rjmp	.-2      	; 0x5ce6 <__stop_program>
