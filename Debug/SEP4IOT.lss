
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b8  00800200  0000655e  000065f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000655e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012b9  008008b8  008008b8  00006caa  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00006caa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f46f  00000000  00000000  000079b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ee3  00000000  00000000  00016e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000074c9  00000000  00000000  0001ad02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a18  00000000  00000000  000221cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047ae  00000000  00000000  00024be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dc10  00000000  00000000  00029392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  00036fa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__vector_25>
      68:	0c 94 d1 27 	jmp	0x4fa2	; 0x4fa2 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 15 28 	jmp	0x502a	; 0x502a <__vector_36>
      94:	0c 94 67 28 	jmp	0x50ce	; 0x50ce <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ff 2a 	jmp	0x55fe	; 0x55fe <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ab 28 	jmp	0x5156	; 0x5156 <__vector_51>
      d0:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__vector_54>
      dc:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	21 2b       	or	r18, r17
      fa:	91 2b       	or	r25, r17
      fc:	91 2b       	or	r25, r17
      fe:	91 2b       	or	r25, r17
     100:	91 2b       	or	r25, r17
     102:	91 2b       	or	r25, r17
     104:	91 2b       	or	r25, r17
     106:	91 2b       	or	r25, r17
     108:	21 2b       	or	r18, r17
     10a:	91 2b       	or	r25, r17
     10c:	91 2b       	or	r25, r17
     10e:	91 2b       	or	r25, r17
     110:	91 2b       	or	r25, r17
     112:	91 2b       	or	r25, r17
     114:	91 2b       	or	r25, r17
     116:	91 2b       	or	r25, r17
     118:	23 2b       	or	r18, r19
     11a:	91 2b       	or	r25, r17
     11c:	91 2b       	or	r25, r17
     11e:	91 2b       	or	r25, r17
     120:	91 2b       	or	r25, r17
     122:	91 2b       	or	r25, r17
     124:	91 2b       	or	r25, r17
     126:	91 2b       	or	r25, r17
     128:	91 2b       	or	r25, r17
     12a:	91 2b       	or	r25, r17
     12c:	91 2b       	or	r25, r17
     12e:	91 2b       	or	r25, r17
     130:	91 2b       	or	r25, r17
     132:	91 2b       	or	r25, r17
     134:	91 2b       	or	r25, r17
     136:	91 2b       	or	r25, r17
     138:	23 2b       	or	r18, r19
     13a:	91 2b       	or	r25, r17
     13c:	91 2b       	or	r25, r17
     13e:	91 2b       	or	r25, r17
     140:	91 2b       	or	r25, r17
     142:	91 2b       	or	r25, r17
     144:	91 2b       	or	r25, r17
     146:	91 2b       	or	r25, r17
     148:	91 2b       	or	r25, r17
     14a:	91 2b       	or	r25, r17
     14c:	91 2b       	or	r25, r17
     14e:	91 2b       	or	r25, r17
     150:	91 2b       	or	r25, r17
     152:	91 2b       	or	r25, r17
     154:	91 2b       	or	r25, r17
     156:	91 2b       	or	r25, r17
     158:	8d 2b       	or	r24, r29
     15a:	91 2b       	or	r25, r17
     15c:	91 2b       	or	r25, r17
     15e:	91 2b       	or	r25, r17
     160:	91 2b       	or	r25, r17
     162:	91 2b       	or	r25, r17
     164:	91 2b       	or	r25, r17
     166:	91 2b       	or	r25, r17
     168:	58 2b       	or	r21, r24
     16a:	91 2b       	or	r25, r17
     16c:	91 2b       	or	r25, r17
     16e:	91 2b       	or	r25, r17
     170:	91 2b       	or	r25, r17
     172:	91 2b       	or	r25, r17
     174:	91 2b       	or	r25, r17
     176:	91 2b       	or	r25, r17
     178:	91 2b       	or	r25, r17
     17a:	91 2b       	or	r25, r17
     17c:	91 2b       	or	r25, r17
     17e:	91 2b       	or	r25, r17
     180:	91 2b       	or	r25, r17
     182:	91 2b       	or	r25, r17
     184:	91 2b       	or	r25, r17
     186:	91 2b       	or	r25, r17
     188:	4c 2b       	or	r20, r28
     18a:	91 2b       	or	r25, r17
     18c:	91 2b       	or	r25, r17
     18e:	91 2b       	or	r25, r17
     190:	91 2b       	or	r25, r17
     192:	91 2b       	or	r25, r17
     194:	91 2b       	or	r25, r17
     196:	91 2b       	or	r25, r17
     198:	70 2b       	or	r23, r16

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	05 e5       	ldi	r16, 0x55	; 85
     19c:	19 e1       	ldi	r17, 0x19	; 25
     19e:	0f 2e       	mov	r0, r31
     1a0:	f5 e8       	ldi	r31, 0x85	; 133
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
     1ce:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <uxCurrentNumberOfTasks>
     1d8:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 b2 0a 	call	0x1564	; 0x1564 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <vPortFree>
     1f4:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
     208:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 bd 19 	lds	r30, 0x19BD	; 0x8019bd <pxCurrentTimerList>
     23a:	f0 91 be 19 	lds	r31, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 ad 1c 	call	0x395a	; 0x395a <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
     286:	e0 91 bd 19 	lds	r30, 0x19BD	; 0x8019bd <pxCurrentTimerList>
     28a:	f0 91 be 19 	lds	r31, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 bc 1b 	call	0x3778	; 0x3778 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 4f 1c 	call	0x389e	; 0x389e <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
     326:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
     32a:	0e 94 8d 10 	call	0x211a	; 0x211a <vQueueWaitForMessageRestricted>
     32e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 ad 1c 	call	0x395a	; 0x395a <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 bc 1b 	call	0x3778	; 0x3778 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 4f 1c 	call	0x389e	; 0x389e <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 bc 1b 	call	0x3778	; 0x3778 <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 b2 0a 	call	0x1564	; 0x1564 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
     460:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
     464:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 ad 1c 	call	0x395a	; 0x395a <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 bb 19 	lds	r30, 0x19BB	; 0x8019bb <pxOverflowTimerList>
     48c:	f0 91 bc 19 	lds	r31, 0x19BC	; 0x8019bc <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	ee e5       	ldi	r30, 0x5E	; 94
     4ba:	f5 e6       	ldi	r31, 0x65	; 101
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a8 3b       	cpi	r26, 0xB8	; 184
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2b e1       	ldi	r18, 0x1B	; 27
     4ce:	a8 eb       	ldi	r26, 0xB8	; 184
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a1 37       	cpi	r26, 0x71	; 113
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <main>
     4e0:	0c 94 ad 32 	jmp	0x655a	; 0x655a <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <my_co2_call_back>:
}



//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e6:	80 93 b8 08 	sts	0x08B8, r24	; 0x8008b8 <__data_end>
     4ea:	90 93 b9 08 	sts	0x08B9, r25	; 0x8008b9 <__data_end+0x1>
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	8e e6       	ldi	r24, 0x6E	; 110
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	08 95       	ret

00000508 <co2Reader_create>:
     508:	4f 92       	push	r4
     50a:	5f 92       	push	r5
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	5c 01       	movw	r10, r24
     52a:	4b 01       	movw	r8, r22
     52c:	29 01       	movw	r4, r18
     52e:	3a 01       	movw	r6, r20
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <calloc>
     53c:	ec 01       	movw	r28, r24
     53e:	89 2b       	or	r24, r25
     540:	29 f1       	breq	.+74     	; 0x58c <co2Reader_create+0x84>
     542:	19 82       	std	Y+1, r1	; 0x01
     544:	18 82       	st	Y, r1
     546:	bb 82       	std	Y+3, r11	; 0x03
     548:	aa 82       	std	Y+2, r10	; 0x02
     54a:	90 92 c5 08 	sts	0x08C5, r9	; 0x8008c5 <_startMeasureEventGroup+0x1>
     54e:	80 92 c4 08 	sts	0x08C4, r8	; 0x8008c4 <_startMeasureEventGroup>
     552:	40 92 c0 08 	sts	0x08C0, r4	; 0x8008c0 <_startMeasureBit>
     556:	50 92 c1 08 	sts	0x08C1, r5	; 0x8008c1 <_startMeasureBit+0x1>
     55a:	60 92 c2 08 	sts	0x08C2, r6	; 0x8008c2 <_startMeasureBit+0x2>
     55e:	70 92 c3 08 	sts	0x08C3, r7	; 0x8008c3 <_startMeasureBit+0x3>
     562:	10 93 bf 08 	sts	0x08BF, r17	; 0x8008bf <_readyEventGroup+0x1>
     566:	00 93 be 08 	sts	0x08BE, r16	; 0x8008be <_readyEventGroup>
     56a:	c0 92 ba 08 	sts	0x08BA, r12	; 0x8008ba <_readyBit>
     56e:	d0 92 bb 08 	sts	0x08BB, r13	; 0x8008bb <_readyBit+0x1>
     572:	e0 92 bc 08 	sts	0x08BC, r14	; 0x8008bc <_readyBit+0x2>
     576:	f0 92 bd 08 	sts	0x08BD, r15	; 0x8008bd <_readyBit+0x3>
     57a:	63 e7       	ldi	r22, 0x73	; 115
     57c:	72 e0       	ldi	r23, 0x02	; 2
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <mh_z19_create>
     584:	82 e8       	ldi	r24, 0x82	; 130
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
     58c:	ce 01       	movw	r24, r28
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	bf 90       	pop	r11
     5a0:	af 90       	pop	r10
     5a2:	9f 90       	pop	r9
     5a4:	8f 90       	pop	r8
     5a6:	7f 90       	pop	r7
     5a8:	6f 90       	pop	r6
     5aa:	5f 90       	pop	r5
     5ac:	4f 90       	pop	r4
     5ae:	08 95       	ret

000005b0 <co2Reader_measure>:
}

//actual task, methods devided so that it is possible to test


void co2Reader_measure(co2reader_t self) {
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5c2:	40 91 c0 08 	lds	r20, 0x08C0	; 0x8008c0 <_startMeasureBit>
     5c6:	50 91 c1 08 	lds	r21, 0x08C1	; 0x8008c1 <_startMeasureBit+0x1>
     5ca:	60 91 c2 08 	lds	r22, 0x08C2	; 0x8008c2 <_startMeasureBit+0x2>
     5ce:	70 91 c3 08 	lds	r23, 0x08C3	; 0x8008c3 <_startMeasureBit+0x3>
     5d2:	cc 24       	eor	r12, r12
     5d4:	ca 94       	dec	r12
     5d6:	dc 2c       	mov	r13, r12
     5d8:	76 01       	movw	r14, r12
     5da:	01 e0       	ldi	r16, 0x01	; 1
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <_startMeasureEventGroup>
     5e2:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <_startMeasureEventGroup+0x1>
     5e6:	5f d5       	rcall	.+2750   	; 0x10a6 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5e8:	00 91 c0 08 	lds	r16, 0x08C0	; 0x8008c0 <_startMeasureBit>
     5ec:	10 91 c1 08 	lds	r17, 0x08C1	; 0x8008c1 <_startMeasureBit+0x1>
     5f0:	20 91 c2 08 	lds	r18, 0x08C2	; 0x8008c2 <_startMeasureBit+0x2>
     5f4:	30 91 c3 08 	lds	r19, 0x08C3	; 0x8008c3 <_startMeasureBit+0x3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	80 23       	and	r24, r16
     5fe:	91 23       	and	r25, r17
     600:	a2 23       	and	r26, r18
     602:	b3 23       	and	r27, r19
     604:	08 17       	cp	r16, r24
     606:	19 07       	cpc	r17, r25
     608:	2a 07       	cpc	r18, r26
     60a:	3b 07       	cpc	r19, r27
     60c:	c9 f4       	brne	.+50     	; 0x640 <co2Reader_measure+0x90>

		mh_z19_take_meassuring();
     60e:	0e 94 29 26 	call	0x4c52	; 0x4c52 <mh_z19_take_meassuring>
		//{
			//printf("There was no co2 measured\n");
		//}
		//my_co2_call_back(a);
		
		self->value = ppmValue;
     612:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <__data_end>
     616:	90 91 b9 08 	lds	r25, 0x08B9	; 0x8008b9 <__data_end+0x1>
     61a:	99 83       	std	Y+1, r25	; 0x01
     61c:	88 83       	st	Y, r24
		//vPortFree(a);

		printf("co2 done bit set\n");
     61e:	89 e8       	ldi	r24, 0x89	; 137
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     626:	40 91 ba 08 	lds	r20, 0x08BA	; 0x8008ba <_readyBit>
     62a:	50 91 bb 08 	lds	r21, 0x08BB	; 0x8008bb <_readyBit+0x1>
     62e:	60 91 bc 08 	lds	r22, 0x08BC	; 0x8008bc <_readyBit+0x2>
     632:	70 91 bd 08 	lds	r23, 0x08BD	; 0x8008bd <_readyBit+0x3>
     636:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <_readyEventGroup>
     63a:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <_readyEventGroup+0x1>
     63e:	f3 d5       	rcall	.+3046   	; 0x1226 <xEventGroupSetBits>
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
{	
	ppmValue = ppm;
	printf("CO2 in callback: %d", ppm);
}

void co2Reader_executeTask(void* self) {
     652:	ec 01       	movw	r28, r24
	
	//mh_z19_create(ser_USART3, my_co2_call_back);
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     654:	ce 01       	movw	r24, r28
     656:	ac df       	rcall	.-168    	; 0x5b0 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	08 95       	ret

00000662 <configuration_create>:
//it is created only once, before starting the scheduler + will never be destroyed
	_working = calloc(sizeof(bool), 1);
	_ventilation = calloc(sizeof(bool), 1);

	//by default, device should work, not to ventilate
	_working = true;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <_working>
	_ventilation = false;
     668:	10 92 c8 08 	sts	0x08C8, r1	; 0x8008c8 <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     66c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xQueueCreateMutex>
     670:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <_semaphore+0x1>
     674:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <_semaphore>
     678:	08 95       	ret

0000067a <configuration_setWorking>:
}

//if the semaphore is initialized, take it and give it back, if not, just do the work 
void configuration_setWorking(bool value) {
     67a:	0f 93       	push	r16
     67c:	cf 93       	push	r28
	if (_semaphore != NULL) {
     67e:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     682:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     686:	21 15       	cp	r18, r1
     688:	31 05       	cpc	r19, r1
     68a:	b1 f0       	breq	.+44     	; 0x6b8 <configuration_setWorking+0x3e>
     68c:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     68e:	4f ef       	ldi	r20, 0xFF	; 255
     690:	5f ef       	ldi	r21, 0xFF	; 255
     692:	ba 01       	movw	r22, r20
     694:	c9 01       	movw	r24, r18
     696:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <xQueueSemaphoreTake>
		_working = value;
     69a:	c0 93 c9 08 	sts	0x08C9, r28	; 0x8008c9 <_working>
		xSemaphoreGive(_semaphore);
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	a9 01       	movw	r20, r18
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     6ae:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     6b2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xQueueGenericSend>
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <configuration_setWorking+0x42>
	}
	else _working = value;
     6b8:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <_working>
}
     6bc:	cf 91       	pop	r28
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6c2:	0f 93       	push	r16
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
	if (_semaphore != NULL) {
     6c8:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     6cc:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     6d0:	21 15       	cp	r18, r1
     6d2:	31 05       	cpc	r19, r1
     6d4:	b9 f0       	breq	.+46     	; 0x704 <configuration_getWorking+0x42>
     6d6:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6d8:	4f ef       	ldi	r20, 0xFF	; 255
     6da:	5f ef       	ldi	r21, 0xFF	; 255
     6dc:	ba 01       	movw	r22, r20
     6de:	c9 01       	movw	r24, r18
     6e0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <xQueueSemaphoreTake>
		*working = _working;
     6e4:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <_working>
     6e8:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     6ea:	00 e0       	ldi	r16, 0x00	; 0
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     6fa:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     6fe:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xQueueGenericSend>
     702:	04 c0       	rjmp	.+8      	; 0x70c <configuration_getWorking+0x4a>
	}
	else *working = _working;
     704:	20 91 c9 08 	lds	r18, 0x08C9	; 0x8008c9 <_working>
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     714:	0f 93       	push	r16
     716:	cf 93       	push	r28
	if (_semaphore != NULL) {
     718:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     71c:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     720:	21 15       	cp	r18, r1
     722:	31 05       	cpc	r19, r1
     724:	b1 f0       	breq	.+44     	; 0x752 <configuration_setVentilation+0x3e>
     726:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     728:	4f ef       	ldi	r20, 0xFF	; 255
     72a:	5f ef       	ldi	r21, 0xFF	; 255
     72c:	ba 01       	movw	r22, r20
     72e:	c9 01       	movw	r24, r18
     730:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <xQueueSemaphoreTake>
		_ventilation = value;
     734:	c0 93 c8 08 	sts	0x08C8, r28	; 0x8008c8 <_ventilation>
		xSemaphoreGive(_semaphore);
     738:	00 e0       	ldi	r16, 0x00	; 0
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	a9 01       	movw	r20, r18
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     748:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     74c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xQueueGenericSend>
     750:	02 c0       	rjmp	.+4      	; 0x756 <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     752:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <_ventilation>
}
     756:	cf 91       	pop	r28
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     75c:	0f 93       	push	r16
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
	if (_semaphore != NULL) {
     762:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <_semaphore>
     766:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     76a:	21 15       	cp	r18, r1
     76c:	31 05       	cpc	r19, r1
     76e:	b9 f0       	breq	.+46     	; 0x79e <configuration_getVentilation+0x42>
     770:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     772:	4f ef       	ldi	r20, 0xFF	; 255
     774:	5f ef       	ldi	r21, 0xFF	; 255
     776:	ba 01       	movw	r22, r20
     778:	c9 01       	movw	r24, r18
     77a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     77e:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <_ventilation>
     782:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	a9 01       	movw	r20, r18
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <_semaphore>
     794:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <_semaphore+0x1>
     798:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xQueueGenericSend>
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     79e:	20 91 c8 08 	lds	r18, 0x08C8	; 0x8008c8 <_ventilation>
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self);//maybe use this
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	88 e0       	ldi	r24, 0x08	; 8
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <calloc>
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	39 f0       	breq	.+14     	; 0x7cc <currentCondition_create+0x1e>
     7be:	fc 01       	movw	r30, r24
     7c0:	13 82       	std	Z+3, r1	; 0x03
     7c2:	12 82       	std	Z+2, r1	; 0x02
     7c4:	15 82       	std	Z+5, r1	; 0x05
     7c6:	14 82       	std	Z+4, r1	; 0x04
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	10 82       	st	Z, r1
     7cc:	08 95       	ret

000007ce <currentCondition_setCO2>:
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <currentCondition_setCO2+0xa>
     7d2:	fc 01       	movw	r30, r24
     7d4:	71 83       	std	Z+1, r23	; 0x01
     7d6:	60 83       	st	Z, r22
     7d8:	08 95       	ret

000007da <currentCondition_setHumidity>:
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	19 f0       	breq	.+6      	; 0x7e4 <currentCondition_setHumidity+0xa>
     7de:	fc 01       	movw	r30, r24
     7e0:	75 83       	std	Z+5, r23	; 0x05
     7e2:	64 83       	std	Z+4, r22	; 0x04
     7e4:	08 95       	ret

000007e6 <currentCondition_setTemperature>:
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <currentCondition_setTemperature+0xa>
     7ea:	fc 01       	movw	r30, r24
     7ec:	73 83       	std	Z+3, r23	; 0x03
     7ee:	62 83       	std	Z+2, r22	; 0x02
     7f0:	08 95       	ret

000007f2 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     7f2:	fc 01       	movw	r30, r24
     7f4:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     7f6:	12 96       	adiw	r26, 0x02	; 2
     7f8:	2c 91       	ld	r18, X
     7fa:	12 97       	sbiw	r26, 0x02	; 2
     7fc:	13 96       	adiw	r26, 0x03	; 3
     7fe:	3c 91       	ld	r19, X
     800:	13 97       	sbiw	r26, 0x03	; 3
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     802:	14 96       	adiw	r26, 0x04	; 4
     804:	8c 91       	ld	r24, X
     806:	14 97       	sbiw	r26, 0x04	; 4
     808:	15 96       	adiw	r26, 0x05	; 5
     80a:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	40 83       	st	Z, r20
     810:	44 e0       	ldi	r20, 0x04	; 4
     812:	41 83       	std	Z+1, r20	; 0x01
     814:	32 83       	std	Z+2, r19	; 0x02
     816:	23 83       	std	Z+3, r18	; 0x03
     818:	94 83       	std	Z+4, r25	; 0x04
     81a:	85 83       	std	Z+5, r24	; 0x05
	
     81c:	cf 01       	movw	r24, r30
     81e:	08 95       	ret

00000820 <device_create>:
	//free(self);*/
//}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	00 d0       	rcall	.+0      	; 0x846 <device_create+0x26>
     846:	1f 92       	push	r1
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	1c 01       	movw	r2, r24
     84e:	7a 83       	std	Y+2, r23	; 0x02
     850:	69 83       	std	Y+1, r22	; 0x01
     852:	29 01       	movw	r4, r18
     854:	3a 01       	movw	r6, r20
     856:	1c 83       	std	Y+4, r17	; 0x04
     858:	0b 83       	std	Y+3, r16	; 0x03
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	88 e0       	ldi	r24, 0x08	; 8
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <calloc>
     866:	8c 01       	movw	r16, r24
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	89 f1       	breq	.+98     	; 0x8ce <device_create+0xae>
     86c:	fc 01       	movw	r30, r24
     86e:	b1 82       	std	Z+1, r11	; 0x01
     870:	a0 82       	st	Z, r10
     872:	93 82       	std	Z+3, r9	; 0x03
     874:	82 82       	std	Z+2, r8	; 0x02
     876:	9b df       	rcall	.-202    	; 0x7ae <currentCondition_create>
     878:	f8 01       	movw	r30, r16
     87a:	95 83       	std	Z+5, r25	; 0x05
     87c:	84 83       	std	Z+4, r24	; 0x04
     87e:	37 82       	std	Z+7, r3	; 0x07
     880:	26 82       	std	Z+6, r2	; 0x06
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <_startMeasureEventGroup+0x1>
     88a:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <_startMeasureEventGroup>
     88e:	40 92 e8 08 	sts	0x08E8, r4	; 0x8008e8 <_startMeasureBit>
     892:	50 92 e9 08 	sts	0x08E9, r5	; 0x8008e9 <_startMeasureBit+0x1>
     896:	60 92 ea 08 	sts	0x08EA, r6	; 0x8008ea <_startMeasureBit+0x2>
     89a:	70 92 eb 08 	sts	0x08EB, r7	; 0x8008eb <_startMeasureBit+0x3>
     89e:	eb 81       	ldd	r30, Y+3	; 0x03
     8a0:	fc 81       	ldd	r31, Y+4	; 0x04
     8a2:	f0 93 e7 08 	sts	0x08E7, r31	; 0x8008e7 <_readyEventGroup+0x1>
     8a6:	e0 93 e6 08 	sts	0x08E6, r30	; 0x8008e6 <_readyEventGroup>
     8aa:	c0 92 e2 08 	sts	0x08E2, r12	; 0x8008e2 <_readyBit>
     8ae:	d0 92 e3 08 	sts	0x08E3, r13	; 0x8008e3 <_readyBit+0x1>
     8b2:	e0 92 e4 08 	sts	0x08E4, r14	; 0x8008e4 <_readyBit+0x2>
     8b6:	f0 92 e5 08 	sts	0x08E5, r15	; 0x8008e5 <_readyBit+0x3>
     8ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8be:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <_uplinkmessageBuffer+0x1>
     8c2:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <_uplinkmessageBuffer>
     8c6:	8a e9       	ldi	r24, 0x9A	; 154
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
     8ce:	c8 01       	movw	r24, r16
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     8fe:	fc 01       	movw	r30, r24
     900:	84 81       	ldd	r24, Z+4	; 0x04
     902:	95 81       	ldd	r25, Z+5	; 0x05
     904:	6a cf       	rjmp	.-300    	; 0x7da <currentCondition_setHumidity>
     906:	08 95       	ret

00000908 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     908:	fc 01       	movw	r30, r24
     90a:	82 81       	ldd	r24, Z+2	; 0x02
     90c:	93 81       	ldd	r25, Z+3	; 0x03
     90e:	00 97       	sbiw	r24, 0x00	; 0
     910:	11 f0       	breq	.+4      	; 0x916 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     912:	47 c2       	rjmp	.+1166   	; 0xda2 <humAndTempReader_getHumidity>
     914:	08 95       	ret
	}
	else
	return -1;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	9f ef       	ldi	r25, 0xFF	; 255
}
     91a:	08 95       	ret

0000091c <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     91c:	fc 01       	movw	r30, r24
     91e:	84 81       	ldd	r24, Z+4	; 0x04
     920:	95 81       	ldd	r25, Z+5	; 0x05
     922:	55 cf       	rjmp	.-342    	; 0x7ce <currentCondition_setCO2>
     924:	08 95       	ret

00000926 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	11 f0       	breq	.+4      	; 0x934 <device_getCO2Data+0xe>
		return co2Reader_getCO2(self->co2reader);
     930:	94 ce       	rjmp	.-728    	; 0x65a <co2Reader_getCO2>
     932:	08 95       	ret
	else return -1;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	9f ef       	ldi	r25, 0xFF	; 255
}
     938:	08 95       	ret

0000093a <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     93a:	fc 01       	movw	r30, r24
     93c:	84 81       	ldd	r24, Z+4	; 0x04
     93e:	95 81       	ldd	r25, Z+5	; 0x05
     940:	52 cf       	rjmp	.-348    	; 0x7e6 <currentCondition_setTemperature>
     942:	08 95       	ret

00000944 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     944:	fc 01       	movw	r30, r24
     946:	82 81       	ldd	r24, Z+2	; 0x02
     948:	93 81       	ldd	r25, Z+3	; 0x03
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	11 f0       	breq	.+4      	; 0x952 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     94e:	2d c2       	rjmp	.+1114   	; 0xdaa <humAndTempReader_getTemperature>
     950:	08 95       	ret
	}
	else
	return -1;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	9f ef       	ldi	r25, 0xFF	; 255
	
     956:	08 95       	ret

00000958 <device_startMeasuring>:
}

//devided so we can test


void device_startMeasuring(device_t self) {
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	66 97       	sbiw	r28, 0x16	; 22
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	37 d5       	rcall	.+2670   	; 0x13f2 <pvPortMalloc>
     984:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     986:	9d de       	rcall	.-710    	; 0x6c2 <configuration_getWorking>
     988:	f8 01       	movw	r30, r16
	if (*works == true)
     98a:	80 81       	ld	r24, Z
     98c:	88 23       	and	r24, r24
     98e:	09 f4       	brne	.+2      	; 0x992 <device_startMeasuring+0x3a>
     990:	91 c0       	rjmp	.+290    	; 0xab4 <device_startMeasuring+0x15c>
     992:	40 91 e8 08 	lds	r20, 0x08E8	; 0x8008e8 <_startMeasureBit>
	{

	//if ventilation needed -> ventilate 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     996:	50 91 e9 08 	lds	r21, 0x08E9	; 0x8008e9 <_startMeasureBit+0x1>
     99a:	60 91 ea 08 	lds	r22, 0x08EA	; 0x8008ea <_startMeasureBit+0x2>
     99e:	70 91 eb 08 	lds	r23, 0x08EB	; 0x8008eb <_startMeasureBit+0x3>
     9a2:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <_startMeasureEventGroup>
     9a6:	90 91 ed 08 	lds	r25, 0x08ED	; 0x8008ed <_startMeasureEventGroup+0x1>
     9aa:	3d d4       	rcall	.+2170   	; 0x1226 <xEventGroupSetBits>
     9ac:	84 ea       	ldi	r24, 0xA4	; 164
	printf("device has set bits\n");
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
     9b4:	40 91 e2 08 	lds	r20, 0x08E2	; 0x8008e2 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     9b8:	50 91 e3 08 	lds	r21, 0x08E3	; 0x8008e3 <_readyBit+0x1>
     9bc:	60 91 e4 08 	lds	r22, 0x08E4	; 0x8008e4 <_readyBit+0x2>
     9c0:	70 91 e5 08 	lds	r23, 0x08E5	; 0x8008e5 <_readyBit+0x3>
     9c4:	cc 24       	eor	r12, r12
     9c6:	ca 94       	dec	r12
     9c8:	dc 2c       	mov	r13, r12
     9ca:	76 01       	movw	r14, r12
     9cc:	01 e0       	ldi	r16, 0x01	; 1
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_readyEventGroup>
     9d4:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_readyEventGroup+0x1>
     9d8:	66 d3       	rcall	.+1740   	; 0x10a6 <xEventGroupWaitBits>
     9da:	00 91 e2 08 	lds	r16, 0x08E2	; 0x8008e2 <_readyBit>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     9de:	10 91 e3 08 	lds	r17, 0x08E3	; 0x8008e3 <_readyBit+0x1>
     9e2:	20 91 e4 08 	lds	r18, 0x08E4	; 0x8008e4 <_readyBit+0x2>
     9e6:	30 91 e5 08 	lds	r19, 0x08E5	; 0x8008e5 <_readyBit+0x3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	80 23       	and	r24, r16
     9f0:	91 23       	and	r25, r17
     9f2:	a2 23       	and	r26, r18
     9f4:	b3 23       	and	r27, r19
     9f6:	08 17       	cp	r16, r24
     9f8:	19 07       	cpc	r17, r25
     9fa:	2a 07       	cpc	r18, r26
     9fc:	3b 07       	cpc	r19, r27
     9fe:	09 f0       	breq	.+2      	; 0xa02 <device_startMeasuring+0xaa>
     a00:	5f c0       	rjmp	.+190    	; 0xac0 <device_startMeasuring+0x168>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     a02:	c5 01       	movw	r24, r10
     a04:	90 df       	rcall	.-224    	; 0x926 <device_getCO2Data>
     a06:	bc 01       	movw	r22, r24
     a08:	c5 01       	movw	r24, r10
     a0a:	88 df       	rcall	.-240    	; 0x91c <device_setCO2ToCurrent>
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     a0c:	c5 01       	movw	r24, r10
     a0e:	9a df       	rcall	.-204    	; 0x944 <device_getTemperatureData>
     a10:	bc 01       	movw	r22, r24
     a12:	c5 01       	movw	r24, r10
     a14:	92 df       	rcall	.-220    	; 0x93a <device_setTemperatureToCurrent>
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     a16:	c5 01       	movw	r24, r10
     a18:	77 df       	rcall	.-274    	; 0x908 <device_getHumidityData>
     a1a:	bc 01       	movw	r22, r24
     a1c:	c5 01       	movw	r24, r10
     a1e:	6f df       	rcall	.-290    	; 0x8fe <device_setHumidityToCurrent>
     a20:	88 eb       	ldi	r24, 0xB8	; 184
		
		printf("device got done bit\n");
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
     a28:	c5 01       	movw	r24, r10
		
		printf("CO2 is: %u\n", device_getCO2Data(self));
     a2a:	7d df       	rcall	.-262    	; 0x926 <device_getCO2Data>
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	8c ec       	ldi	r24, 0xCC	; 204
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     a3c:	c5 01       	movw	r24, r10
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     a3e:	82 df       	rcall	.-252    	; 0x944 <device_getTemperatureData>
     a40:	9f 93       	push	r25
     a42:	8f 93       	push	r24
     a44:	88 ed       	ldi	r24, 0xD8	; 216
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     a50:	c5 01       	movw	r24, r10
		printf("Humidity is: %u\n", device_getHumidityData(self));
     a52:	5a df       	rcall	.-332    	; 0x908 <device_getHumidityData>
     a54:	9f 93       	push	r25
     a56:	8f 93       	push	r24
     a58:	8c ee       	ldi	r24, 0xEC	; 236
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     a64:	f5 01       	movw	r30, r10
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     a66:	64 81       	ldd	r22, Z+4	; 0x04
     a68:	75 81       	ldd	r23, Z+5	; 0x05
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	c1 de       	rcall	.-638    	; 0x7f2 <getcurrentConditionPayload>
     a70:	86 e1       	ldi	r24, 0x16	; 22
     a72:	fe 01       	movw	r30, r28
     a74:	31 96       	adiw	r30, 0x01	; 1
     a76:	aa ec       	ldi	r26, 0xCA	; 202
     a78:	b8 e0       	ldi	r27, 0x08	; 8
     a7a:	01 90       	ld	r0, Z+
     a7c:	0d 92       	st	X+, r0
     a7e:	8a 95       	dec	r24
     a80:	e1 f7       	brne	.-8      	; 0xa7a <device_startMeasuring+0x122>
     a82:	68 ee       	ldi	r22, 0xE8	; 232
     a84:	73 e0       	ldi	r23, 0x03	; 3
		//if(_uplink_payload!=NULL)
		//{
		vTaskDelay(1000);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
     a8e:	0f ef       	ldi	r16, 0xFF	; 255
     a90:	1f ef       	ldi	r17, 0xFF	; 255

		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     a92:	98 01       	movw	r18, r16
     a94:	46 e1       	ldi	r20, 0x16	; 22
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	6a ec       	ldi	r22, 0xCA	; 202
     a9a:	78 e0       	ldi	r23, 0x08	; 8
     a9c:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <_uplinkmessageBuffer>
     aa0:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <_uplinkmessageBuffer+0x1>
     aa4:	0e 94 fd 11 	call	0x23fa	; 0x23fa <xStreamBufferSend>
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <device_startMeasuring+0x168>
     ab4:	68 e8       	ldi	r22, 0x88	; 136
     ab6:	73 e1       	ldi	r23, 0x13	; 19
		//}
		//else printf("Error when making loraPayload");
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else vTaskDelay(5000);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
     ac0:	66 96       	adiw	r28, 0x16	; 22
     ac2:	0f b6       	in	r0, 0x3f	; 63
}
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	08 95       	ret

00000ae2 <device_executeTask>:
     ae2:	ec 01       	movw	r28, r24
     ae4:	ce 01       	movw	r24, r28
	TaskHandle_t handleTask;
}device;

void device_executeTask(void* self) {
	for (;;)
	device_startMeasuring((device_t)self);
     ae6:	38 df       	rcall	.-400    	; 0x958 <device_startMeasuring>
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <device_executeTask+0x2>

00000aea <lora_DownLinkHandler_create>:
		vTaskDelay(3000);
	}
}

void lora_DownLinkHandler_create(MessageBufferHandle_t xMessageBuffer)
{
     aea:	08 95       	ret

00000aec <lora_DownLinkHandler_task>:
		//}
	//}
//}

	void lora_DownLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
//
				//_lora_setup();
				
		//size_t xBytesReceived;
		//xBytesReceived = 
		xMessageBufferReceive(xMessageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     af4:	0f ef       	ldi	r16, 0xFF	; 255
     af6:	1f ef       	ldi	r17, 0xFF	; 255
     af8:	98 01       	movw	r18, r16
     afa:	46 e1       	ldi	r20, 0x16	; 22
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	6e ee       	ldi	r22, 0xEE	; 238
     b00:	78 e0       	ldi	r23, 0x08	; 8
     b02:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     b06:	ce ee       	ldi	r28, 0xEE	; 238
     b08:	d8 e0       	ldi	r29, 0x08	; 8
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	1f 92       	push	r1
     b0e:	8f 93       	push	r24
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	1f 92       	push	r1
     b14:	8f 93       	push	r24
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	1f 92       	push	r1
     b1a:	8f 93       	push	r24
     b1c:	8d ef       	ldi	r24, 0xFD	; 253
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
		
		//Two bytes eg. 44/33
		if(_downlink_payload.len==2)
     b28:	8d b7       	in	r24, 0x3d	; 61
     b2a:	9e b7       	in	r25, 0x3e	; 62
     b2c:	08 96       	adiw	r24, 0x08	; 8
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	9e bf       	out	0x3e, r25	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	8d bf       	out	0x3d, r24	; 61
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	82 30       	cpi	r24, 0x02	; 2
     b3c:	09 f0       	breq	.+2      	; 0xb40 <lora_DownLinkHandler_task+0x54>
     b3e:	68 c0       	rjmp	.+208    	; 0xc10 <lora_DownLinkHandler_task+0x124>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     b40:	fe 01       	movw	r30, r28
     b42:	ca 81       	ldd	r28, Y+2	; 0x02
     b44:	83 81       	ldd	r24, Z+3	; 0x03
     b46:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	52 d4       	rcall	.+2212   	; 0x13f2 <pvPortMalloc>
     b4e:	8c 01       	movw	r16, r24
			
		
			switch(command)
     b50:	cb 34       	cpi	r28, 0x4B	; 75
     b52:	e9 f0       	breq	.+58     	; 0xb8e <lora_DownLinkHandler_task+0xa2>
     b54:	18 f4       	brcc	.+6      	; 0xb5c <lora_DownLinkHandler_task+0x70>
     b56:	ca 34       	cpi	r28, 0x4A	; 74
     b58:	39 f0       	breq	.+14     	; 0xb68 <lora_DownLinkHandler_task+0x7c>
     b5a:	52 c0       	rjmp	.+164    	; 0xc00 <lora_DownLinkHandler_task+0x114>
     b5c:	c6 35       	cpi	r28, 0x56	; 86
     b5e:	51 f1       	breq	.+84     	; 0xbb4 <lora_DownLinkHandler_task+0xc8>
     b60:	c7 35       	cpi	r28, 0x57	; 87
     b62:	09 f4       	brne	.+2      	; 0xb66 <lora_DownLinkHandler_task+0x7a>
     b64:	3a c0       	rjmp	.+116    	; 0xbda <lora_DownLinkHandler_task+0xee>
     b66:	4c c0       	rjmp	.+152    	; 0xc00 <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 74:
				configuration_setWorking(false);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	87 dd       	rcall	.-1266   	; 0x67a <configuration_setWorking>
				configuration_getWorking(value);
     b6c:	c8 01       	movw	r24, r16
     b6e:	a9 dd       	rcall	.-1198   	; 0x6c2 <configuration_getWorking>
     b70:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     b72:	80 81       	ld	r24, Z
     b74:	1f 92       	push	r1
     b76:	8f 93       	push	r24
     b78:	8e e2       	ldi	r24, 0x2E	; 46
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     b84:	0f 90       	pop	r0
				break;
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	41 c0       	rjmp	.+130    	; 0xc10 <lora_DownLinkHandler_task+0x124>
			//D1
			case 75 :
				configuration_setWorking(true);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	74 dd       	rcall	.-1304   	; 0x67a <configuration_setWorking>
				configuration_getWorking(value);
     b92:	c8 01       	movw	r24, r16
     b94:	96 dd       	rcall	.-1236   	; 0x6c2 <configuration_getWorking>
     b96:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d",*value);
     b98:	80 81       	ld	r24, Z
     b9a:	1f 92       	push	r1
     b9c:	8f 93       	push	r24
     b9e:	8e e2       	ldi	r24, 0x2E	; 46
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     baa:	0f 90       	pop	r0
				break;
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
			//V0
			case 86:
				configuration_setVentilation(false);
     bb2:	2e c0       	rjmp	.+92     	; 0xc10 <lora_DownLinkHandler_task+0x124>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	ae dd       	rcall	.-1188   	; 0x714 <configuration_setVentilation>
				configuration_getVentilation(value);
     bb8:	c8 01       	movw	r24, r16
     bba:	d0 dd       	rcall	.-1120   	; 0x75c <configuration_getVentilation>
     bbc:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     bbe:	80 81       	ld	r24, Z
     bc0:	1f 92       	push	r1
     bc2:	8f 93       	push	r24
     bc4:	8f e4       	ldi	r24, 0x4F	; 79
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
			break;
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
			//V1
			case 87:
				configuration_setVentilation(true);
     bd8:	1b c0       	rjmp	.+54     	; 0xc10 <lora_DownLinkHandler_task+0x124>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	9b dd       	rcall	.-1226   	; 0x714 <configuration_setVentilation>
				configuration_getVentilation(value);
     bde:	c8 01       	movw	r24, r16
     be0:	bd dd       	rcall	.-1158   	; 0x75c <configuration_getVentilation>
     be2:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d",*value);
     be4:	80 81       	ld	r24, Z
     be6:	1f 92       	push	r1
     be8:	8f 93       	push	r24
     bea:	8f e4       	ldi	r24, 0x4F	; 79
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     bf6:	0f 90       	pop	r0
				break;
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	08 c0       	rjmp	.+16     	; 0xc10 <lora_DownLinkHandler_task+0x124>
     c00:	85 e7       	ldi	r24, 0x75	; 117
			default:
				printf("Invalid command");
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     c0c:	0f 90       	pop	r0
				break;
     c0e:	0f 90       	pop	r0
     c10:	df 91       	pop	r29
		}
	}
						
}
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <lora_DownLinkHandler_startTask>:
     c1a:	ec 01       	movw	r28, r24
//int16_t temperature_setting; // Temperature

void lora_DownLinkHandler_startTask(void* xMessageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
     c1c:	ce 01       	movw	r24, r28
     c1e:	66 df       	rcall	.-308    	; 0xaec <lora_DownLinkHandler_task>
		vTaskDelay(3000);
     c20:	68 eb       	ldi	r22, 0xB8	; 184
     c22:	7b e0       	ldi	r23, 0x0B	; 11
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
     c2c:	f7 cf       	rjmp	.-18     	; 0xc1c <lora_DownLinkHandler_startTask+0x2>

00000c2e <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     c2e:	4f 92       	push	r4
     c30:	5f 92       	push	r5
     c32:	6f 92       	push	r6
     c34:	7f 92       	push	r7
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	5c 01       	movw	r10, r24
     c50:	4b 01       	movw	r8, r22
     c52:	29 01       	movw	r4, r18
     c54:	3a 01       	movw	r6, r20
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	86 e0       	ldi	r24, 0x06	; 6
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <calloc>
     c62:	ec 01       	movw	r28, r24
     c64:	89 2b       	or	r24, r25
     c66:	11 f1       	breq	.+68     	; 0xcac <humAndTempReader_create+0x7e>
     c68:	19 82       	std	Y+1, r1	; 0x01
     c6a:	18 82       	st	Y, r1
     c6c:	1b 82       	std	Y+3, r1	; 0x03
     c6e:	1a 82       	std	Y+2, r1	; 0x02
     c70:	bd 82       	std	Y+5, r11	; 0x05
     c72:	ac 82       	std	Y+4, r10	; 0x04
     c74:	90 92 0f 09 	sts	0x090F, r9	; 0x80090f <_startMeasureEventGroup+0x1>
     c78:	80 92 0e 09 	sts	0x090E, r8	; 0x80090e <_startMeasureEventGroup>
     c7c:	40 92 0a 09 	sts	0x090A, r4	; 0x80090a <_startMeasureBit>
     c80:	50 92 0b 09 	sts	0x090B, r5	; 0x80090b <_startMeasureBit+0x1>
     c84:	60 92 0c 09 	sts	0x090C, r6	; 0x80090c <_startMeasureBit+0x2>
     c88:	70 92 0d 09 	sts	0x090D, r7	; 0x80090d <_startMeasureBit+0x3>
     c8c:	10 93 09 09 	sts	0x0909, r17	; 0x800909 <_readyEventGroup+0x1>
     c90:	00 93 08 09 	sts	0x0908, r16	; 0x800908 <_readyEventGroup>
     c94:	c0 92 04 09 	sts	0x0904, r12	; 0x800904 <_readyBit>
     c98:	d0 92 05 09 	sts	0x0905, r13	; 0x800905 <_readyBit+0x1>
     c9c:	e0 92 06 09 	sts	0x0906, r14	; 0x800906 <_readyBit+0x2>
     ca0:	f0 92 07 09 	sts	0x0907, r15	; 0x800907 <_readyBit+0x3>
     ca4:	85 e8       	ldi	r24, 0x85	; 133
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
     cac:	ce 01       	movw	r24, r28
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	08 95       	ret

00000cd0 <humAndTempReader_measure>:
	//free(self);
}



void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     ce2:	40 91 0a 09 	lds	r20, 0x090A	; 0x80090a <_startMeasureBit>
     ce6:	50 91 0b 09 	lds	r21, 0x090B	; 0x80090b <_startMeasureBit+0x1>
     cea:	60 91 0c 09 	lds	r22, 0x090C	; 0x80090c <_startMeasureBit+0x2>
     cee:	70 91 0d 09 	lds	r23, 0x090D	; 0x80090d <_startMeasureBit+0x3>
     cf2:	cc 24       	eor	r12, r12
     cf4:	ca 94       	dec	r12
     cf6:	dc 2c       	mov	r13, r12
     cf8:	76 01       	movw	r14, r12
     cfa:	01 e0       	ldi	r16, 0x01	; 1
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <_startMeasureEventGroup>
     d02:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <_startMeasureEventGroup+0x1>
     d06:	cf d1       	rcall	.+926    	; 0x10a6 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     d08:	00 91 0a 09 	lds	r16, 0x090A	; 0x80090a <_startMeasureBit>
     d0c:	10 91 0b 09 	lds	r17, 0x090B	; 0x80090b <_startMeasureBit+0x1>
     d10:	20 91 0c 09 	lds	r18, 0x090C	; 0x80090c <_startMeasureBit+0x2>
     d14:	30 91 0d 09 	lds	r19, 0x090D	; 0x80090d <_startMeasureBit+0x3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	80 23       	and	r24, r16
     d1e:	91 23       	and	r25, r17
     d20:	a2 23       	and	r26, r18
     d22:	b3 23       	and	r27, r19
     d24:	08 17       	cp	r16, r24
     d26:	19 07       	cpc	r17, r25
     d28:	2a 07       	cpc	r18, r26
     d2a:	3b 07       	cpc	r19, r27
     d2c:	69 f5       	brne	.+90     	; 0xd88 <humAndTempReader_measure+0xb8>
		hih8120Wakeup();
     d2e:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <hih8120Wakeup>
		vTaskDelay(50);
     d32:	62 e3       	ldi	r22, 0x32	; 50
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
		hih8120Meassure();
     d3e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <hih8120Meassure>
		vTaskDelay(5);
     d42:	65 e0       	ldi	r22, 0x05	; 5
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
		if(hih8120IsReady())
     d4e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <hih8120IsReady>
     d52:	88 23       	and	r24, r24
     d54:	61 f0       	breq	.+24     	; 0xd6e <humAndTempReader_measure+0x9e>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     d56:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <hih8120GetHumidityPercent_x10>
     d5a:	99 83       	std	Y+1, r25	; 0x01
     d5c:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     d5e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <hih8120GetTemperature_x10>
     d62:	9b 83       	std	Y+3, r25	; 0x03
     d64:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     d66:	84 ea       	ldi	r24, 0xA4	; 164
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     d6e:	40 91 04 09 	lds	r20, 0x0904	; 0x800904 <_readyBit>
     d72:	50 91 05 09 	lds	r21, 0x0905	; 0x800905 <_readyBit+0x1>
     d76:	60 91 06 09 	lds	r22, 0x0906	; 0x800906 <_readyBit+0x2>
     d7a:	70 91 07 09 	lds	r23, 0x0907	; 0x800907 <_readyBit+0x3>
     d7e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <_readyEventGroup>
     d82:	90 91 09 09 	lds	r25, 0x0909	; 0x800909 <_readyEventGroup+0x1>
     d86:	4f d2       	rcall	.+1182   	; 0x1226 <xEventGroupSetBits>
	}
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <humAndTempReader_executeTask>:
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(void* self) {
     d9a:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     d9c:	ce 01       	movw	r24, r28
     d9e:	98 df       	rcall	.-208    	; 0xcd0 <humAndTempReader_measure>
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <humAndTempReader_executeTask+0x2>

00000da2 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	08 95       	ret

00000daa <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     daa:	fc 01       	movw	r30, r24
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	08 95       	ret

00000db2 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(MessageBufferHandle_t xMessageBuffer)
{
     db2:	08 95       	ret

00000db4 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
     dc4:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <isSet>
     dc8:	81 11       	cpse	r24, r1
     dca:	d0 c0       	rjmp	.+416    	; 0xf6c <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 41 22 	call	0x4482	; 0x4482 <lora_driver_reset_rn2483>
			vTaskDelay(2);
     dd2:	62 e0       	ldi	r22, 0x02	; 2
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
			lora_driver_reset_rn2483(0);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 41 22 	call	0x4482	; 0x4482 <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
     de4:	66 e9       	ldi	r22, 0x96	; 150
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     df0:	0e 94 f7 21 	call	0x43ee	; 0x43ee <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 4f 20 	call	0x409e	; 0x409e <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     dfa:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_rn2483_factory_reset>
     dfe:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     e02:	9f 93       	push	r25
     e04:	8f 93       	push	r24
     e06:	8a ec       	ldi	r24, 0xCA	; 202
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     e12:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <lora_driver_configure_to_eu868>
     e16:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     e1a:	9f 93       	push	r25
     e1c:	8f 93       	push	r24
     e1e:	8d ed       	ldi	r24, 0xDD	; 221
     e20:	93 e0       	ldi	r25, 0x03	; 3
     e22:	9f 93       	push	r25
     e24:	8f 93       	push	r24
     e26:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     e2a:	87 e2       	ldi	r24, 0x27	; 39
     e2c:	99 e0       	ldi	r25, 0x09	; 9
     e2e:	0e 94 67 22 	call	0x44ce	; 0x44ce <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     e32:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     e36:	c7 e2       	ldi	r28, 0x27	; 39
     e38:	d9 e0       	ldi	r29, 0x09	; 9
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	9f 93       	push	r25
     e40:	8f 93       	push	r24
     e42:	86 ef       	ldi	r24, 0xF6	; 246
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     e4e:	ce 01       	movw	r24, r28
     e50:	0e 94 83 22 	call	0x4506	; 0x4506 <lora_driver_set_device_identifier>
     e54:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	8a e0       	ldi	r24, 0x0A	; 10
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	9f 93       	push	r25
     e66:	8f 93       	push	r24
     e68:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     e6c:	ae 01       	movw	r20, r28
     e6e:	6f e1       	ldi	r22, 0x1F	; 31
     e70:	74 e0       	ldi	r23, 0x04	; 4
     e72:	80 e4       	ldi	r24, 0x40	; 64
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	0e 94 b1 24 	call	0x4962	; 0x4962 <lora_driver_set_otaa_identity>
     e7a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     e7e:	9f 93       	push	r25
     e80:	8f 93       	push	r24
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	8f e1       	ldi	r24, 0x1F	; 31
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	9f 93       	push	r25
     e8c:	8f 93       	push	r24
     e8e:	80 e4       	ldi	r24, 0x40	; 64
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	9f 93       	push	r25
     e94:	8f 93       	push	r24
     e96:	81 e5       	ldi	r24, 0x51	; 81
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     ea2:	0e 94 b6 22 	call	0x456c	; 0x456c <lora_driver_save_mac>
     ea6:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     eaa:	9f 93       	push	r25
     eac:	8f 93       	push	r24
     eae:	87 e8       	ldi	r24, 0x87	; 135
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     eba:	8d b7       	in	r24, 0x3d	; 61
     ebc:	9e b7       	in	r25, 0x3e	; 62
     ebe:	82 96       	adiw	r24, 0x22	; 34
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	9e bf       	out	0x3e, r25	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	8d bf       	out	0x3d, r24	; 61
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 b0 23 	call	0x4760	; 0x4760 <lora_driver_set_adaptive_data_rate>
     ed0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	86 e9       	ldi	r24, 0x96	; 150
     eda:	94 e0       	ldi	r25, 0x04	; 4
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     ee4:	84 ef       	ldi	r24, 0xF4	; 244
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 bb 23 	call	0x4776	; 0x4776 <lora_driver_set_receive_delay>
     eec:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     ef0:	9f 93       	push	r25
     ef2:	8f 93       	push	r24
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8f 93       	push	r24
     ef8:	84 ef       	ldi	r24, 0xF4	; 244
     efa:	8f 93       	push	r24
     efc:	87 eb       	ldi	r24, 0xB7	; 183
     efe:	94 e0       	ldi	r25, 0x04	; 4
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     f08:	8d b7       	in	r24, 0x3d	; 61
     f0a:	9e b7       	in	r25, 0x3e	; 62
     f0c:	0a 96       	adiw	r24, 0x0a	; 10
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	9e bf       	out	0x3e, r25	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	8d bf       	out	0x3d, r24	; 61
     f18:	ca e0       	ldi	r28, 0x0A	; 10
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     f1c:	07 ed       	ldi	r16, 0xD7	; 215
     f1e:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 bc 22 	call	0x4578	; 0x4578 <lora_driver_join>
     f26:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     f28:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     f2c:	9f 93       	push	r25
     f2e:	8f 93       	push	r24
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	1f 93       	push	r17
     f36:	0f 93       	push	r16
     f38:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>

		if ( rc != LoRa_ACCEPTED)
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	88 e0       	ldi	r24, 0x08	; 8
     f4a:	d8 16       	cp	r13, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <lora_UpLinkHandler_task+0x19c>
     f4e:	62 c0       	rjmp	.+196    	; 0x1014 <lora_UpLinkHandler_task+0x260>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 bb 20 	call	0x4176	; 0x4176 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     f56:	66 e3       	ldi	r22, 0x36	; 54
     f58:	71 e0       	ldi	r23, 0x01	; 1
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
     f62:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     f64:	e9 f6       	brne	.-70     	; 0xf20 <lora_UpLinkHandler_task+0x16c>
     f66:	5d c0       	rjmp	.+186    	; 0x1022 <lora_UpLinkHandler_task+0x26e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     f68:	76 d4       	rcall	.+2284   	; 0x1856 <vPortYield>
     f6a:	fe cf       	rjmp	.-4      	; 0xf68 <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	98 01       	movw	r18, r16
     f72:	42 e3       	ldi	r20, 0x32	; 50
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	61 e1       	ldi	r22, 0x11	; 17
     f78:	79 e0       	ldi	r23, 0x09	; 9
     f7a:	c7 01       	movw	r24, r14
     f7c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend >= sizeof(uint8_t)*2)
     f80:	02 97       	sbiw	r24, 0x02	; 2
     f82:	08 f4       	brcc	.+2      	; 0xf86 <lora_UpLinkHandler_task+0x1d2>
     f84:	40 c0       	rjmp	.+128    	; 0x1006 <lora_UpLinkHandler_task+0x252>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	0e 94 cd 20 	call	0x419a	; 0x419a <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
     f8c:	c1 e1       	ldi	r28, 0x11	; 17
     f8e:	d9 e0       	ldi	r29, 0x09	; 9
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	1f 92       	push	r1
     f94:	8f 93       	push	r24
     f96:	87 ef       	ldi	r24, 0xF7	; 247
     f98:	94 e0       	ldi	r25, 0x04	; 4
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	1f 92       	push	r1
     fa6:	8f 93       	push	r24
     fa8:	89 e1       	ldi	r24, 0x19	; 25
     faa:	95 e0       	ldi	r25, 0x05	; 5
     fac:	9f 93       	push	r25
     fae:	8f 93       	push	r24
     fb0:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	1f 92       	push	r1
     fb8:	8f 93       	push	r24
     fba:	8c e3       	ldi	r24, 0x3C	; 60
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	1f 92       	push	r1
     fca:	8f 93       	push	r24
     fcc:	8b e5       	ldi	r24, 0x5B	; 91
     fce:	95 e0       	ldi	r25, 0x05	; 5
     fd0:	9f 93       	push	r25
     fd2:	8f 93       	push	r24
     fd4:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     fd8:	be 01       	movw	r22, r28
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <lora_driver_sent_upload_message>
     fe0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <lora_driver_map_return_code_to_text>
     fe4:	9f 93       	push	r25
     fe6:	8f 93       	push	r24
     fe8:	8b e7       	ldi	r24, 0x7B	; 123
     fea:	95 e0       	ldi	r25, 0x05	; 5
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <printf>
     ff4:	8d b7       	in	r24, 0x3d	; 61
     ff6:	9e b7       	in	r25, 0x3e	; 62
     ff8:	44 96       	adiw	r24, 0x14	; 20
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	9e bf       	out	0x3e, r25	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	8d bf       	out	0x3d, r24	; 61
    1004:	15 c0       	rjmp	.+42     	; 0x1030 <lora_UpLinkHandler_task+0x27c>
		}
		else
		{
			vTaskDelay(2000);
    1006:	60 ed       	ldi	r22, 0xD0	; 208
    1008:	77 e0       	ldi	r23, 0x07	; 7
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
		}
	}
    1012:	0e c0       	rjmp	.+28     	; 0x1030 <lora_UpLinkHandler_task+0x27c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	0e 94 9d 20 	call	0x413a	; 0x413a <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <isSet>
    1020:	a5 cf       	rjmp	.-182    	; 0xf6c <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 ac 20 	call	0x4158	; 0x4158 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 76 20 	call	0x40ec	; 0x40ec <led_fast_blink>
    102e:	9c cf       	rjmp	.-200    	; 0xf68 <lora_UpLinkHandler_task+0x1b4>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	08 95       	ret

00001040 <lora_UpLinkHandler_startTask>:
static bool isSet=false;

/*Check for the parameters*/


void lora_UpLinkHandler_startTask(void* xMessageBuffer){
    1040:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)xMessageBuffer);
    1042:	ce 01       	movw	r24, r28
    1044:	b7 de       	rcall	.-658    	; 0xdb4 <lora_UpLinkHandler_task>
		vTaskDelay(3000);
    1046:	68 eb       	ldi	r22, 0xB8	; 184
    1048:	7b e0       	ldi	r23, 0x0B	; 11
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
    1052:	f7 cf       	rjmp	.-18     	; 0x1042 <lora_UpLinkHandler_startTask+0x2>

00001054 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
    1054:	e7 e0       	ldi	r30, 0x07	; 7
    1056:	f1 e0       	ldi	r31, 0x01	; 1
    1058:	80 81       	ld	r24, Z
    105a:	8f 60       	ori	r24, 0x0F	; 15
    105c:	80 83       	st	Z, r24
    105e:	08 95       	ret

00001060 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    1060:	e8 e0       	ldi	r30, 0x08	; 8
    1062:	f1 e0       	ldi	r31, 0x01	; 1
    1064:	90 81       	ld	r25, Z
    1066:	90 7f       	andi	r25, 0xF0	; 240
    1068:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    106a:	90 81       	ld	r25, Z
    106c:	8f 70       	andi	r24, 0x0F	; 15
    106e:	98 2b       	or	r25, r24
    1070:	90 83       	st	Z, r25
    1072:	08 95       	ret

00001074 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    1074:	e8 e0       	ldi	r30, 0x08	; 8
    1076:	f1 e0       	ldi	r31, 0x01	; 1
    1078:	80 81       	ld	r24, Z
    107a:	80 7f       	andi	r24, 0xF0	; 240
    107c:	80 83       	st	Z, r24
    107e:	08 95       	ret

00001080 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	80 e1       	ldi	r24, 0x10	; 16
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	b4 d1       	rcall	.+872    	; 0x13f2 <pvPortMalloc>
    108a:	ec 01       	movw	r28, r24
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	39 f0       	breq	.+14     	; 0x109e <xEventGroupCreate+0x1e>
    1090:	fc 01       	movw	r30, r24
    1092:	11 92       	st	Z+, r1
    1094:	11 92       	st	Z+, r1
    1096:	11 92       	st	Z+, r1
    1098:	11 92       	st	Z+, r1
    109a:	cf 01       	movw	r24, r30
    109c:	94 d2       	rcall	.+1320   	; 0x15c6 <vListInitialise>
    109e:	ce 01       	movw	r24, r28
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <xEventGroupWaitBits>:
    10a6:	2f 92       	push	r2
    10a8:	3f 92       	push	r3
    10aa:	4f 92       	push	r4
    10ac:	5f 92       	push	r5
    10ae:	6f 92       	push	r6
    10b0:	7f 92       	push	r7
    10b2:	8f 92       	push	r8
    10b4:	9f 92       	push	r9
    10b6:	af 92       	push	r10
    10b8:	bf 92       	push	r11
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
    10cc:	4a 01       	movw	r8, r20
    10ce:	5b 01       	movw	r10, r22
    10d0:	62 2e       	mov	r6, r18
    10d2:	70 2e       	mov	r7, r16
    10d4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskSuspendAll>
    10d8:	28 80       	ld	r2, Y
    10da:	39 80       	ldd	r3, Y+1	; 0x01
    10dc:	4a 80       	ldd	r4, Y+2	; 0x02
    10de:	5b 80       	ldd	r5, Y+3	; 0x03
    10e0:	01 11       	cpse	r16, r1
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <xEventGroupWaitBits+0x58>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	b2 01       	movw	r22, r4
    10e8:	a1 01       	movw	r20, r2
    10ea:	48 21       	and	r20, r8
    10ec:	59 21       	and	r21, r9
    10ee:	6a 21       	and	r22, r10
    10f0:	7b 21       	and	r23, r11
    10f2:	45 2b       	or	r20, r21
    10f4:	46 2b       	or	r20, r22
    10f6:	47 2b       	or	r20, r23
    10f8:	79 f4       	brne	.+30     	; 0x1118 <xEventGroupWaitBits+0x72>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0d c0       	rjmp	.+26     	; 0x1118 <xEventGroupWaitBits+0x72>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	b2 01       	movw	r22, r4
    1102:	a1 01       	movw	r20, r2
    1104:	48 21       	and	r20, r8
    1106:	59 21       	and	r21, r9
    1108:	6a 21       	and	r22, r10
    110a:	7b 21       	and	r23, r11
    110c:	48 15       	cp	r20, r8
    110e:	59 05       	cpc	r21, r9
    1110:	6a 05       	cpc	r22, r10
    1112:	7b 05       	cpc	r23, r11
    1114:	09 f0       	breq	.+2      	; 0x1118 <xEventGroupWaitBits+0x72>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	88 23       	and	r24, r24
    111a:	81 f0       	breq	.+32     	; 0x113c <xEventGroupWaitBits+0x96>
    111c:	66 20       	and	r6, r6
    111e:	09 f4       	brne	.+2      	; 0x1122 <xEventGroupWaitBits+0x7c>
    1120:	6b c0       	rjmp	.+214    	; 0x11f8 <xEventGroupWaitBits+0x152>
    1122:	80 94       	com	r8
    1124:	90 94       	com	r9
    1126:	a0 94       	com	r10
    1128:	b0 94       	com	r11
    112a:	82 20       	and	r8, r2
    112c:	93 20       	and	r9, r3
    112e:	a4 20       	and	r10, r4
    1130:	b5 20       	and	r11, r5
    1132:	88 82       	st	Y, r8
    1134:	99 82       	std	Y+1, r9	; 0x01
    1136:	aa 82       	std	Y+2, r10	; 0x02
    1138:	bb 82       	std	Y+3, r11	; 0x03
    113a:	5e c0       	rjmp	.+188    	; 0x11f8 <xEventGroupWaitBits+0x152>
    113c:	c1 14       	cp	r12, r1
    113e:	d1 04       	cpc	r13, r1
    1140:	e1 04       	cpc	r14, r1
    1142:	f1 04       	cpc	r15, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <xEventGroupWaitBits+0xa2>
    1146:	58 c0       	rjmp	.+176    	; 0x11f8 <xEventGroupWaitBits+0x152>
    1148:	66 20       	and	r6, r6
    114a:	29 f0       	breq	.+10     	; 0x1156 <xEventGroupWaitBits+0xb0>
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	03 c0       	rjmp	.+6      	; 0x115c <xEventGroupWaitBits+0xb6>
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	ba 01       	movw	r22, r20
    115c:	71 10       	cpse	r7, r1
    115e:	74 60       	ori	r23, 0x04	; 4
    1160:	48 29       	or	r20, r8
    1162:	59 29       	or	r21, r9
    1164:	6a 29       	or	r22, r10
    1166:	7b 29       	or	r23, r11
    1168:	97 01       	movw	r18, r14
    116a:	86 01       	movw	r16, r12
    116c:	ce 01       	movw	r24, r28
    116e:	04 96       	adiw	r24, 0x04	; 4
    1170:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <vTaskPlaceOnUnorderedEventList>
    1174:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
    1178:	81 11       	cpse	r24, r1
    117a:	01 c0       	rjmp	.+2      	; 0x117e <xEventGroupWaitBits+0xd8>
    117c:	6c d3       	rcall	.+1752   	; 0x1856 <vPortYield>
    117e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <uxTaskResetEventItemValue>
    1182:	91 fd       	sbrc	r25, 1
    1184:	35 c0       	rjmp	.+106    	; 0x11f0 <xEventGroupWaitBits+0x14a>
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	0f 92       	push	r0
    118c:	68 81       	ld	r22, Y
    118e:	79 81       	ldd	r23, Y+1	; 0x01
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	71 10       	cpse	r7, r1
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <xEventGroupWaitBits+0x10c>
    1198:	21 e0       	ldi	r18, 0x01	; 1
    119a:	75 01       	movw	r14, r10
    119c:	64 01       	movw	r12, r8
    119e:	c6 22       	and	r12, r22
    11a0:	d7 22       	and	r13, r23
    11a2:	e8 22       	and	r14, r24
    11a4:	f9 22       	and	r15, r25
    11a6:	cd 28       	or	r12, r13
    11a8:	ce 28       	or	r12, r14
    11aa:	cf 28       	or	r12, r15
    11ac:	79 f4       	brne	.+30     	; 0x11cc <xEventGroupWaitBits+0x126>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <xEventGroupWaitBits+0x126>
    11b2:	21 e0       	ldi	r18, 0x01	; 1
    11b4:	75 01       	movw	r14, r10
    11b6:	64 01       	movw	r12, r8
    11b8:	c6 22       	and	r12, r22
    11ba:	d7 22       	and	r13, r23
    11bc:	e8 22       	and	r14, r24
    11be:	f9 22       	and	r15, r25
    11c0:	c8 14       	cp	r12, r8
    11c2:	d9 04       	cpc	r13, r9
    11c4:	ea 04       	cpc	r14, r10
    11c6:	fb 04       	cpc	r15, r11
    11c8:	09 f0       	breq	.+2      	; 0x11cc <xEventGroupWaitBits+0x126>
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	22 23       	and	r18, r18
    11ce:	71 f0       	breq	.+28     	; 0x11ec <xEventGroupWaitBits+0x146>
    11d0:	66 20       	and	r6, r6
    11d2:	61 f0       	breq	.+24     	; 0x11ec <xEventGroupWaitBits+0x146>
    11d4:	80 94       	com	r8
    11d6:	90 94       	com	r9
    11d8:	a0 94       	com	r10
    11da:	b0 94       	com	r11
    11dc:	86 22       	and	r8, r22
    11de:	97 22       	and	r9, r23
    11e0:	a8 22       	and	r10, r24
    11e2:	b9 22       	and	r11, r25
    11e4:	88 82       	st	Y, r8
    11e6:	99 82       	std	Y+1, r9	; 0x01
    11e8:	aa 82       	std	Y+2, r10	; 0x02
    11ea:	bb 82       	std	Y+3, r11	; 0x03
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	1b 01       	movw	r2, r22
    11f2:	2c 01       	movw	r4, r24
    11f4:	55 24       	eor	r5, r5
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <xEventGroupWaitBits+0x156>
    11f8:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
    11fc:	c2 01       	movw	r24, r4
    11fe:	b1 01       	movw	r22, r2
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	bf 90       	pop	r11
    1212:	af 90       	pop	r10
    1214:	9f 90       	pop	r9
    1216:	8f 90       	pop	r8
    1218:	7f 90       	pop	r7
    121a:	6f 90       	pop	r6
    121c:	5f 90       	pop	r5
    121e:	4f 90       	pop	r4
    1220:	3f 90       	pop	r3
    1222:	2f 90       	pop	r2
    1224:	08 95       	ret

00001226 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	6a 01       	movw	r12, r20
    124a:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    124c:	8c 01       	movw	r16, r24
    124e:	09 5f       	subi	r16, 0xF9	; 249
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1252:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1256:	eb 85       	ldd	r30, Y+11	; 0x0b
    1258:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    125a:	88 81       	ld	r24, Y
    125c:	99 81       	ldd	r25, Y+1	; 0x01
    125e:	aa 81       	ldd	r26, Y+2	; 0x02
    1260:	bb 81       	ldd	r27, Y+3	; 0x03
    1262:	c8 2a       	or	r12, r24
    1264:	d9 2a       	or	r13, r25
    1266:	ea 2a       	or	r14, r26
    1268:	fb 2a       	or	r15, r27
    126a:	c8 82       	st	Y, r12
    126c:	d9 82       	std	Y+1, r13	; 0x01
    126e:	ea 82       	std	Y+2, r14	; 0x02
    1270:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1272:	0e 17       	cp	r16, r30
    1274:	1f 07       	cpc	r17, r31
    1276:	09 f4       	brne	.+2      	; 0x127a <xEventGroupSetBits+0x54>
    1278:	45 c0       	rjmp	.+138    	; 0x1304 <xEventGroupSetBits+0xde>
    127a:	c1 2c       	mov	r12, r1
    127c:	d1 2c       	mov	r13, r1
    127e:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1280:	99 24       	eor	r9, r9
    1282:	93 94       	inc	r9
    1284:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    1286:	a4 80       	ldd	r10, Z+4	; 0x04
    1288:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    128a:	80 81       	ld	r24, Z
    128c:	91 81       	ldd	r25, Z+1	; 0x01
    128e:	a2 81       	ldd	r26, Z+2	; 0x02
    1290:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1292:	ac 01       	movw	r20, r24
    1294:	bd 01       	movw	r22, r26
    1296:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1298:	b2 fd       	sbrc	r27, 2
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    129c:	48 80       	ld	r4, Y
    129e:	59 80       	ldd	r5, Y+1	; 0x01
    12a0:	6a 80       	ldd	r6, Y+2	; 0x02
    12a2:	7b 80       	ldd	r7, Y+3	; 0x03
    12a4:	44 22       	and	r4, r20
    12a6:	55 22       	and	r5, r21
    12a8:	66 22       	and	r6, r22
    12aa:	77 22       	and	r7, r23
    12ac:	29 2d       	mov	r18, r9
    12ae:	45 28       	or	r4, r5
    12b0:	46 28       	or	r4, r6
    12b2:	47 28       	or	r4, r7
    12b4:	89 f4       	brne	.+34     	; 0x12d8 <xEventGroupSetBits+0xb2>
    12b6:	28 2d       	mov	r18, r8
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <xEventGroupSetBits+0xb2>
    12ba:	48 80       	ld	r4, Y
    12bc:	59 80       	ldd	r5, Y+1	; 0x01
    12be:	6a 80       	ldd	r6, Y+2	; 0x02
    12c0:	7b 80       	ldd	r7, Y+3	; 0x03
    12c2:	44 22       	and	r4, r20
    12c4:	55 22       	and	r5, r21
    12c6:	66 22       	and	r6, r22
    12c8:	77 22       	and	r7, r23
    12ca:	29 2d       	mov	r18, r9
    12cc:	44 16       	cp	r4, r20
    12ce:	55 06       	cpc	r5, r21
    12d0:	66 06       	cpc	r6, r22
    12d2:	77 06       	cpc	r7, r23
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <xEventGroupSetBits+0xb2>
    12d6:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    12d8:	22 23       	and	r18, r18
    12da:	71 f0       	breq	.+28     	; 0x12f8 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    12dc:	b0 ff       	sbrs	r27, 0
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    12e0:	c4 2a       	or	r12, r20
    12e2:	d5 2a       	or	r13, r21
    12e4:	e6 2a       	or	r14, r22
    12e6:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    12e8:	48 81       	ld	r20, Y
    12ea:	59 81       	ldd	r21, Y+1	; 0x01
    12ec:	6a 81       	ldd	r22, Y+2	; 0x02
    12ee:	7b 81       	ldd	r23, Y+3	; 0x03
    12f0:	72 60       	ori	r23, 0x02	; 2
    12f2:	cf 01       	movw	r24, r30
    12f4:	0e 94 22 18 	call	0x3044	; 0x3044 <vTaskRemoveFromUnorderedEventList>
    12f8:	ea 2d       	mov	r30, r10
    12fa:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    12fc:	0e 17       	cp	r16, r30
    12fe:	1f 07       	cpc	r17, r31
    1300:	11 f6       	brne	.-124    	; 0x1286 <xEventGroupSetBits+0x60>
    1302:	03 c0       	rjmp	.+6      	; 0x130a <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1304:	c1 2c       	mov	r12, r1
    1306:	d1 2c       	mov	r13, r1
    1308:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    130a:	c0 94       	com	r12
    130c:	d0 94       	com	r13
    130e:	e0 94       	com	r14
    1310:	f0 94       	com	r15
    1312:	88 81       	ld	r24, Y
    1314:	99 81       	ldd	r25, Y+1	; 0x01
    1316:	aa 81       	ldd	r26, Y+2	; 0x02
    1318:	bb 81       	ldd	r27, Y+3	; 0x03
    131a:	c8 22       	and	r12, r24
    131c:	d9 22       	and	r13, r25
    131e:	ea 22       	and	r14, r26
    1320:	fb 22       	and	r15, r27
    1322:	c8 82       	st	Y, r12
    1324:	d9 82       	std	Y+1, r13	; 0x01
    1326:	ea 82       	std	Y+2, r14	; 0x02
    1328:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    132a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    132e:	68 81       	ld	r22, Y
    1330:	79 81       	ldd	r23, Y+1	; 0x01
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	bf 90       	pop	r11
    1348:	af 90       	pop	r10
    134a:	9f 90       	pop	r9
    134c:	8f 90       	pop	r8
    134e:	7f 90       	pop	r7
    1350:	6f 90       	pop	r6
    1352:	5f 90       	pop	r5
    1354:	4f 90       	pop	r4
    1356:	08 95       	ret

00001358 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    135e:	e3 e9       	ldi	r30, 0x93	; 147
    1360:	f9 e0       	ldi	r31, 0x09	; 9
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <prvInsertBlockIntoFreeList+0xe>
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	31 81       	ldd	r19, Z+1	; 0x01
    136a:	2a 17       	cp	r18, r26
    136c:	3b 07       	cpc	r19, r27
    136e:	d0 f3       	brcs	.-12     	; 0x1364 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	af 01       	movw	r20, r30
    1376:	48 0f       	add	r20, r24
    1378:	59 1f       	adc	r21, r25
    137a:	a4 17       	cp	r26, r20
    137c:	b5 07       	cpc	r27, r21
    137e:	49 f4       	brne	.+18     	; 0x1392 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1380:	12 96       	adiw	r26, 0x02	; 2
    1382:	4d 91       	ld	r20, X+
    1384:	5c 91       	ld	r21, X
    1386:	13 97       	sbiw	r26, 0x03	; 3
    1388:	84 0f       	add	r24, r20
    138a:	95 1f       	adc	r25, r21
    138c:	93 83       	std	Z+3, r25	; 0x03
    138e:	82 83       	std	Z+2, r24	; 0x02
    1390:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	8d 91       	ld	r24, X+
    1396:	9c 91       	ld	r25, X
    1398:	13 97       	sbiw	r26, 0x03	; 3
    139a:	ed 01       	movw	r28, r26
    139c:	c8 0f       	add	r28, r24
    139e:	d9 1f       	adc	r29, r25
    13a0:	2c 17       	cp	r18, r28
    13a2:	3d 07       	cpc	r19, r29
    13a4:	d9 f4       	brne	.+54     	; 0x13dc <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    13a6:	20 91 91 09 	lds	r18, 0x0991	; 0x800991 <pxEnd>
    13aa:	30 91 92 09 	lds	r19, 0x0992	; 0x800992 <pxEnd+0x1>
    13ae:	c2 17       	cp	r28, r18
    13b0:	d3 07       	cpc	r29, r19
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    13b4:	2a 81       	ldd	r18, Y+2	; 0x02
    13b6:	3b 81       	ldd	r19, Y+3	; 0x03
    13b8:	82 0f       	add	r24, r18
    13ba:	93 1f       	adc	r25, r19
    13bc:	13 96       	adiw	r26, 0x03	; 3
    13be:	9c 93       	st	X, r25
    13c0:	8e 93       	st	-X, r24
    13c2:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13c4:	c0 81       	ld	r28, Z
    13c6:	d1 81       	ldd	r29, Z+1	; 0x01
    13c8:	88 81       	ld	r24, Y
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	9c 93       	st	X, r25
    13d0:	8e 93       	st	-X, r24
    13d2:	07 c0       	rjmp	.+14     	; 0x13e2 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	dc 93       	st	X, r29
    13d8:	ce 93       	st	-X, r28
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	3c 93       	st	X, r19
    13e0:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    13e2:	ae 17       	cp	r26, r30
    13e4:	bf 07       	cpc	r27, r31
    13e6:	11 f0       	breq	.+4      	; 0x13ec <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e8:	b1 83       	std	Z+1, r27	; 0x01
    13ea:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1404:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1408:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <pxEnd>
    140c:	90 91 92 09 	lds	r25, 0x0992	; 0x800992 <pxEnd+0x1>
    1410:	89 2b       	or	r24, r25
    1412:	41 f5       	brne	.+80     	; 0x1464 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1414:	e3 e9       	ldi	r30, 0x93	; 147
    1416:	f9 e0       	ldi	r31, 0x09	; 9
    1418:	a7 e9       	ldi	r26, 0x97	; 151
    141a:	b9 e0       	ldi	r27, 0x09	; 9
    141c:	b1 83       	std	Z+1, r27	; 0x01
    141e:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1420:	13 82       	std	Z+3, r1	; 0x03
    1422:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1424:	e3 e3       	ldi	r30, 0x33	; 51
    1426:	f9 e1       	ldi	r31, 0x19	; 25
    1428:	f0 93 92 09 	sts	0x0992, r31	; 0x800992 <pxEnd+0x1>
    142c:	e0 93 91 09 	sts	0x0991, r30	; 0x800991 <pxEnd>
	pxEnd->xBlockSize = 0;
    1430:	13 82       	std	Z+3, r1	; 0x03
    1432:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1434:	11 82       	std	Z+1, r1	; 0x01
    1436:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1438:	8c e9       	ldi	r24, 0x9C	; 156
    143a:	9f e0       	ldi	r25, 0x0F	; 15
    143c:	13 96       	adiw	r26, 0x03	; 3
    143e:	9c 93       	st	X, r25
    1440:	8e 93       	st	-X, r24
    1442:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1444:	ed 93       	st	X+, r30
    1446:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1448:	90 93 8e 09 	sts	0x098E, r25	; 0x80098e <xMinimumEverFreeBytesRemaining+0x1>
    144c:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1450:	90 93 90 09 	sts	0x0990, r25	; 0x800990 <xFreeBytesRemaining+0x1>
    1454:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e8       	ldi	r25, 0x80	; 128
    145c:	90 93 8c 09 	sts	0x098C, r25	; 0x80098c <xBlockAllocatedBit+0x1>
    1460:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1464:	e0 90 8b 09 	lds	r14, 0x098B	; 0x80098b <xBlockAllocatedBit>
    1468:	f0 90 8c 09 	lds	r15, 0x098C	; 0x80098c <xBlockAllocatedBit+0x1>
    146c:	c7 01       	movw	r24, r14
    146e:	8c 23       	and	r24, r28
    1470:	9d 23       	and	r25, r29
    1472:	89 2b       	or	r24, r25
    1474:	09 f0       	breq	.+2      	; 0x1478 <pvPortMalloc+0x86>
    1476:	66 c0       	rjmp	.+204    	; 0x1544 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1478:	20 97       	sbiw	r28, 0x00	; 0
    147a:	09 f4       	brne	.+2      	; 0x147e <pvPortMalloc+0x8c>
    147c:	66 c0       	rjmp	.+204    	; 0x154a <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    147e:	ae 01       	movw	r20, r28
    1480:	4c 5f       	subi	r20, 0xFC	; 252
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1484:	09 f4       	brne	.+2      	; 0x1488 <pvPortMalloc+0x96>
    1486:	5e c0       	rjmp	.+188    	; 0x1544 <pvPortMalloc+0x152>
    1488:	00 91 8f 09 	lds	r16, 0x098F	; 0x80098f <xFreeBytesRemaining>
    148c:	10 91 90 09 	lds	r17, 0x0990	; 0x800990 <xFreeBytesRemaining+0x1>
    1490:	04 17       	cp	r16, r20
    1492:	15 07       	cpc	r17, r21
    1494:	08 f4       	brcc	.+2      	; 0x1498 <pvPortMalloc+0xa6>
    1496:	56 c0       	rjmp	.+172    	; 0x1544 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1498:	c0 91 93 09 	lds	r28, 0x0993	; 0x800993 <xStart>
    149c:	d0 91 94 09 	lds	r29, 0x0994	; 0x800994 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    14a0:	e3 e9       	ldi	r30, 0x93	; 147
    14a2:	f9 e0       	ldi	r31, 0x09	; 9
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <pvPortMalloc+0xb8>
    14a6:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    14a8:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    14aa:	2a 81       	ldd	r18, Y+2	; 0x02
    14ac:	3b 81       	ldd	r19, Y+3	; 0x03
    14ae:	24 17       	cp	r18, r20
    14b0:	35 07       	cpc	r19, r21
    14b2:	28 f4       	brcc	.+10     	; 0x14be <pvPortMalloc+0xcc>
    14b4:	28 81       	ld	r18, Y
    14b6:	39 81       	ldd	r19, Y+1	; 0x01
    14b8:	21 15       	cp	r18, r1
    14ba:	31 05       	cpc	r19, r1
    14bc:	a1 f7       	brne	.-24     	; 0x14a6 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    14be:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <pxEnd>
    14c2:	90 91 92 09 	lds	r25, 0x0992	; 0x800992 <pxEnd+0x1>
    14c6:	c8 17       	cp	r28, r24
    14c8:	d9 07       	cpc	r29, r25
    14ca:	e1 f1       	breq	.+120    	; 0x1544 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    14cc:	c0 80       	ld	r12, Z
    14ce:	d1 80       	ldd	r13, Z+1	; 0x01
    14d0:	84 e0       	ldi	r24, 0x04	; 4
    14d2:	c8 0e       	add	r12, r24
    14d4:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    14d6:	88 81       	ld	r24, Y
    14d8:	99 81       	ldd	r25, Y+1	; 0x01
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    14de:	2a 81       	ldd	r18, Y+2	; 0x02
    14e0:	3b 81       	ldd	r19, Y+3	; 0x03
    14e2:	24 1b       	sub	r18, r20
    14e4:	35 0b       	sbc	r19, r21
    14e6:	29 30       	cpi	r18, 0x09	; 9
    14e8:	31 05       	cpc	r19, r1
    14ea:	48 f0       	brcs	.+18     	; 0x14fe <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    14ec:	ce 01       	movw	r24, r28
    14ee:	84 0f       	add	r24, r20
    14f0:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    14f2:	fc 01       	movw	r30, r24
    14f4:	33 83       	std	Z+3, r19	; 0x03
    14f6:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    14f8:	5b 83       	std	Y+3, r21	; 0x03
    14fa:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    14fc:	2d df       	rcall	.-422    	; 0x1358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	9b 81       	ldd	r25, Y+3	; 0x03
    1502:	08 1b       	sub	r16, r24
    1504:	19 0b       	sbc	r17, r25
    1506:	10 93 90 09 	sts	0x0990, r17	; 0x800990 <xFreeBytesRemaining+0x1>
    150a:	00 93 8f 09 	sts	0x098F, r16	; 0x80098f <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    150e:	20 91 8d 09 	lds	r18, 0x098D	; 0x80098d <xMinimumEverFreeBytesRemaining>
    1512:	30 91 8e 09 	lds	r19, 0x098E	; 0x80098e <xMinimumEverFreeBytesRemaining+0x1>
    1516:	02 17       	cp	r16, r18
    1518:	13 07       	cpc	r17, r19
    151a:	20 f4       	brcc	.+8      	; 0x1524 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    151c:	10 93 8e 09 	sts	0x098E, r17	; 0x80098e <xMinimumEverFreeBytesRemaining+0x1>
    1520:	00 93 8d 09 	sts	0x098D, r16	; 0x80098d <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1524:	e8 2a       	or	r14, r24
    1526:	f9 2a       	or	r15, r25
    1528:	fb 82       	std	Y+3, r15	; 0x03
    152a:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    152c:	19 82       	std	Y+1, r1	; 0x01
    152e:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1530:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1534:	c1 14       	cp	r12, r1
    1536:	d1 04       	cpc	r13, r1
    1538:	59 f4       	brne	.+22     	; 0x1550 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    153a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <vApplicationMallocFailedHook>
    153e:	c1 2c       	mov	r12, r1
    1540:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1544:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
    1548:	f8 cf       	rjmp	.-16     	; 0x153a <pvPortMalloc+0x148>
    154a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
    154e:	f5 cf       	rjmp	.-22     	; 0x153a <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1550:	c6 01       	movw	r24, r12
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	08 95       	ret

00001564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	51 f1       	breq	.+84     	; 0x15c0 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    156c:	fc 01       	movw	r30, r24
    156e:	34 97       	sbiw	r30, 0x04	; 4
    1570:	22 81       	ldd	r18, Z+2	; 0x02
    1572:	33 81       	ldd	r19, Z+3	; 0x03
    1574:	40 91 8b 09 	lds	r20, 0x098B	; 0x80098b <xBlockAllocatedBit>
    1578:	50 91 8c 09 	lds	r21, 0x098C	; 0x80098c <xBlockAllocatedBit+0x1>
    157c:	b9 01       	movw	r22, r18
    157e:	64 23       	and	r22, r20
    1580:	75 23       	and	r23, r21
    1582:	67 2b       	or	r22, r23
    1584:	e9 f0       	breq	.+58     	; 0x15c0 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	67 2b       	or	r22, r23
    158c:	c9 f4       	brne	.+50     	; 0x15c0 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    158e:	ef 01       	movw	r28, r30
    1590:	40 95       	com	r20
    1592:	50 95       	com	r21
    1594:	24 23       	and	r18, r20
    1596:	35 23       	and	r19, r21
    1598:	33 83       	std	Z+3, r19	; 0x03
    159a:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    159c:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    15a0:	20 91 8f 09 	lds	r18, 0x098F	; 0x80098f <xFreeBytesRemaining>
    15a4:	30 91 90 09 	lds	r19, 0x0990	; 0x800990 <xFreeBytesRemaining+0x1>
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	9b 81       	ldd	r25, Y+3	; 0x03
    15ac:	82 0f       	add	r24, r18
    15ae:	93 1f       	adc	r25, r19
    15b0:	90 93 90 09 	sts	0x0990, r25	; 0x800990 <xFreeBytesRemaining+0x1>
    15b4:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    15b8:	ce 01       	movw	r24, r28
    15ba:	ce de       	rcall	.-612    	; 0x1358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    15bc:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    15c6:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15c8:	03 96       	adiw	r24, 0x03	; 3
    15ca:	92 83       	std	Z+2, r25	; 0x02
    15cc:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    15ce:	4f ef       	ldi	r20, 0xFF	; 255
    15d0:	5f ef       	ldi	r21, 0xFF	; 255
    15d2:	ba 01       	movw	r22, r20
    15d4:	43 83       	std	Z+3, r20	; 0x03
    15d6:	54 83       	std	Z+4, r21	; 0x04
    15d8:	65 83       	std	Z+5, r22	; 0x05
    15da:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15dc:	90 87       	std	Z+8, r25	; 0x08
    15de:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15e0:	92 87       	std	Z+10, r25	; 0x0a
    15e2:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    15e4:	10 82       	st	Z, r1
    15e6:	08 95       	ret

000015e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    15e8:	fc 01       	movw	r30, r24
    15ea:	13 86       	std	Z+11, r1	; 0x0b
    15ec:	12 86       	std	Z+10, r1	; 0x0a
    15ee:	08 95       	ret

000015f0 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	9c 01       	movw	r18, r24
    15f6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    15f8:	dc 01       	movw	r26, r24
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	cd 91       	ld	r28, X+
    15fe:	dc 91       	ld	r29, X
    1600:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1602:	d5 83       	std	Z+5, r29	; 0x05
    1604:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1606:	8e 81       	ldd	r24, Y+6	; 0x06
    1608:	9f 81       	ldd	r25, Y+7	; 0x07
    160a:	97 83       	std	Z+7, r25	; 0x07
    160c:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    160e:	8e 81       	ldd	r24, Y+6	; 0x06
    1610:	9f 81       	ldd	r25, Y+7	; 0x07
    1612:	dc 01       	movw	r26, r24
    1614:	15 96       	adiw	r26, 0x05	; 5
    1616:	7c 93       	st	X, r23
    1618:	6e 93       	st	-X, r22
    161a:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    161c:	7f 83       	std	Y+7, r23	; 0x07
    161e:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1620:	33 87       	std	Z+11, r19	; 0x0b
    1622:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1624:	f9 01       	movw	r30, r18
    1626:	80 81       	ld	r24, Z
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	80 83       	st	Z, r24
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    163c:	08 81       	ld	r16, Y
    163e:	19 81       	ldd	r17, Y+1	; 0x01
    1640:	2a 81       	ldd	r18, Y+2	; 0x02
    1642:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1644:	0f 3f       	cpi	r16, 0xFF	; 255
    1646:	4f ef       	ldi	r20, 0xFF	; 255
    1648:	14 07       	cpc	r17, r20
    164a:	24 07       	cpc	r18, r20
    164c:	34 07       	cpc	r19, r20
    164e:	21 f4       	brne	.+8      	; 0x1658 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1650:	fc 01       	movw	r30, r24
    1652:	a1 85       	ldd	r26, Z+9	; 0x09
    1654:	b2 85       	ldd	r27, Z+10	; 0x0a
    1656:	11 c0       	rjmp	.+34     	; 0x167a <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1658:	dc 01       	movw	r26, r24
    165a:	13 96       	adiw	r26, 0x03	; 3
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <vListInsert+0x2e>
    165e:	df 01       	movw	r26, r30
    1660:	14 96       	adiw	r26, 0x04	; 4
    1662:	ed 91       	ld	r30, X+
    1664:	fc 91       	ld	r31, X
    1666:	15 97       	sbiw	r26, 0x05	; 5
    1668:	40 81       	ld	r20, Z
    166a:	51 81       	ldd	r21, Z+1	; 0x01
    166c:	62 81       	ldd	r22, Z+2	; 0x02
    166e:	73 81       	ldd	r23, Z+3	; 0x03
    1670:	04 17       	cp	r16, r20
    1672:	15 07       	cpc	r17, r21
    1674:	26 07       	cpc	r18, r22
    1676:	37 07       	cpc	r19, r23
    1678:	90 f7       	brcc	.-28     	; 0x165e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    167a:	14 96       	adiw	r26, 0x04	; 4
    167c:	ed 91       	ld	r30, X+
    167e:	fc 91       	ld	r31, X
    1680:	15 97       	sbiw	r26, 0x05	; 5
    1682:	fd 83       	std	Y+5, r31	; 0x05
    1684:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1686:	d7 83       	std	Z+7, r29	; 0x07
    1688:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    168a:	bf 83       	std	Y+7, r27	; 0x07
    168c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    168e:	15 96       	adiw	r26, 0x05	; 5
    1690:	dc 93       	st	X, r29
    1692:	ce 93       	st	-X, r28
    1694:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1696:	9b 87       	std	Y+11, r25	; 0x0b
    1698:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    169a:	fc 01       	movw	r30, r24
    169c:	20 81       	ld	r18, Z
    169e:	2f 5f       	subi	r18, 0xFF	; 255
    16a0:	20 83       	st	Z, r18
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	08 95       	ret

000016ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    16b2:	a2 85       	ldd	r26, Z+10	; 0x0a
    16b4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    16b6:	c4 81       	ldd	r28, Z+4	; 0x04
    16b8:	d5 81       	ldd	r29, Z+5	; 0x05
    16ba:	86 81       	ldd	r24, Z+6	; 0x06
    16bc:	97 81       	ldd	r25, Z+7	; 0x07
    16be:	9f 83       	std	Y+7, r25	; 0x07
    16c0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    16c2:	c6 81       	ldd	r28, Z+6	; 0x06
    16c4:	d7 81       	ldd	r29, Z+7	; 0x07
    16c6:	84 81       	ldd	r24, Z+4	; 0x04
    16c8:	95 81       	ldd	r25, Z+5	; 0x05
    16ca:	9d 83       	std	Y+5, r25	; 0x05
    16cc:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    16ce:	11 96       	adiw	r26, 0x01	; 1
    16d0:	8d 91       	ld	r24, X+
    16d2:	9c 91       	ld	r25, X
    16d4:	12 97       	sbiw	r26, 0x02	; 2
    16d6:	e8 17       	cp	r30, r24
    16d8:	f9 07       	cpc	r31, r25
    16da:	31 f4       	brne	.+12     	; 0x16e8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    16dc:	86 81       	ldd	r24, Z+6	; 0x06
    16de:	97 81       	ldd	r25, Z+7	; 0x07
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	9c 93       	st	X, r25
    16e4:	8e 93       	st	-X, r24
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    16e8:	13 86       	std	Z+11, r1	; 0x0b
    16ea:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    16ec:	8c 91       	ld	r24, X
    16ee:	81 50       	subi	r24, 0x01	; 1
    16f0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    16f2:	8c 91       	ld	r24, X
}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    16fa:	31 e1       	ldi	r19, 0x11	; 17
    16fc:	fc 01       	movw	r30, r24
    16fe:	30 83       	st	Z, r19
    1700:	31 97       	sbiw	r30, 0x01	; 1
    1702:	22 e2       	ldi	r18, 0x22	; 34
    1704:	20 83       	st	Z, r18
    1706:	31 97       	sbiw	r30, 0x01	; 1
    1708:	a3 e3       	ldi	r26, 0x33	; 51
    170a:	a0 83       	st	Z, r26
    170c:	31 97       	sbiw	r30, 0x01	; 1
    170e:	60 83       	st	Z, r22
    1710:	31 97       	sbiw	r30, 0x01	; 1
    1712:	70 83       	st	Z, r23
    1714:	31 97       	sbiw	r30, 0x01	; 1
    1716:	10 82       	st	Z, r1
    1718:	31 97       	sbiw	r30, 0x01	; 1
    171a:	10 82       	st	Z, r1
    171c:	31 97       	sbiw	r30, 0x01	; 1
    171e:	60 e8       	ldi	r22, 0x80	; 128
    1720:	60 83       	st	Z, r22
    1722:	31 97       	sbiw	r30, 0x01	; 1
    1724:	10 82       	st	Z, r1
    1726:	31 97       	sbiw	r30, 0x01	; 1
    1728:	10 82       	st	Z, r1
    172a:	31 97       	sbiw	r30, 0x01	; 1
    172c:	10 82       	st	Z, r1
    172e:	31 97       	sbiw	r30, 0x01	; 1
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	60 83       	st	Z, r22
    1734:	31 97       	sbiw	r30, 0x01	; 1
    1736:	63 e0       	ldi	r22, 0x03	; 3
    1738:	60 83       	st	Z, r22
    173a:	31 97       	sbiw	r30, 0x01	; 1
    173c:	64 e0       	ldi	r22, 0x04	; 4
    173e:	60 83       	st	Z, r22
    1740:	31 97       	sbiw	r30, 0x01	; 1
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	60 83       	st	Z, r22
    1746:	31 97       	sbiw	r30, 0x01	; 1
    1748:	66 e0       	ldi	r22, 0x06	; 6
    174a:	60 83       	st	Z, r22
    174c:	31 97       	sbiw	r30, 0x01	; 1
    174e:	67 e0       	ldi	r22, 0x07	; 7
    1750:	60 83       	st	Z, r22
    1752:	31 97       	sbiw	r30, 0x01	; 1
    1754:	68 e0       	ldi	r22, 0x08	; 8
    1756:	60 83       	st	Z, r22
    1758:	31 97       	sbiw	r30, 0x01	; 1
    175a:	69 e0       	ldi	r22, 0x09	; 9
    175c:	60 83       	st	Z, r22
    175e:	31 97       	sbiw	r30, 0x01	; 1
    1760:	60 e1       	ldi	r22, 0x10	; 16
    1762:	60 83       	st	Z, r22
    1764:	31 97       	sbiw	r30, 0x01	; 1
    1766:	30 83       	st	Z, r19
    1768:	31 97       	sbiw	r30, 0x01	; 1
    176a:	32 e1       	ldi	r19, 0x12	; 18
    176c:	30 83       	st	Z, r19
    176e:	31 97       	sbiw	r30, 0x01	; 1
    1770:	33 e1       	ldi	r19, 0x13	; 19
    1772:	30 83       	st	Z, r19
    1774:	31 97       	sbiw	r30, 0x01	; 1
    1776:	34 e1       	ldi	r19, 0x14	; 20
    1778:	30 83       	st	Z, r19
    177a:	31 97       	sbiw	r30, 0x01	; 1
    177c:	35 e1       	ldi	r19, 0x15	; 21
    177e:	30 83       	st	Z, r19
    1780:	31 97       	sbiw	r30, 0x01	; 1
    1782:	36 e1       	ldi	r19, 0x16	; 22
    1784:	30 83       	st	Z, r19
    1786:	31 97       	sbiw	r30, 0x01	; 1
    1788:	37 e1       	ldi	r19, 0x17	; 23
    178a:	30 83       	st	Z, r19
    178c:	31 97       	sbiw	r30, 0x01	; 1
    178e:	38 e1       	ldi	r19, 0x18	; 24
    1790:	30 83       	st	Z, r19
    1792:	31 97       	sbiw	r30, 0x01	; 1
    1794:	39 e1       	ldi	r19, 0x19	; 25
    1796:	30 83       	st	Z, r19
    1798:	31 97       	sbiw	r30, 0x01	; 1
    179a:	30 e2       	ldi	r19, 0x20	; 32
    179c:	30 83       	st	Z, r19
    179e:	31 97       	sbiw	r30, 0x01	; 1
    17a0:	31 e2       	ldi	r19, 0x21	; 33
    17a2:	30 83       	st	Z, r19
    17a4:	31 97       	sbiw	r30, 0x01	; 1
    17a6:	20 83       	st	Z, r18
    17a8:	31 97       	sbiw	r30, 0x01	; 1
    17aa:	23 e2       	ldi	r18, 0x23	; 35
    17ac:	20 83       	st	Z, r18
    17ae:	31 97       	sbiw	r30, 0x01	; 1
    17b0:	40 83       	st	Z, r20
    17b2:	31 97       	sbiw	r30, 0x01	; 1
    17b4:	50 83       	st	Z, r21
    17b6:	31 97       	sbiw	r30, 0x01	; 1
    17b8:	26 e2       	ldi	r18, 0x26	; 38
    17ba:	20 83       	st	Z, r18
    17bc:	31 97       	sbiw	r30, 0x01	; 1
    17be:	27 e2       	ldi	r18, 0x27	; 39
    17c0:	20 83       	st	Z, r18
    17c2:	31 97       	sbiw	r30, 0x01	; 1
    17c4:	28 e2       	ldi	r18, 0x28	; 40
    17c6:	20 83       	st	Z, r18
    17c8:	31 97       	sbiw	r30, 0x01	; 1
    17ca:	29 e2       	ldi	r18, 0x29	; 41
    17cc:	20 83       	st	Z, r18
    17ce:	31 97       	sbiw	r30, 0x01	; 1
    17d0:	20 e3       	ldi	r18, 0x30	; 48
    17d2:	20 83       	st	Z, r18
    17d4:	31 97       	sbiw	r30, 0x01	; 1
    17d6:	21 e3       	ldi	r18, 0x31	; 49
    17d8:	20 83       	st	Z, r18
    17da:	89 97       	sbiw	r24, 0x29	; 41
    17dc:	08 95       	ret

000017de <xPortStartScheduler>:
    17de:	a8 95       	wdr
    17e0:	90 ec       	ldi	r25, 0xC0	; 192
    17e2:	88 e1       	ldi	r24, 0x18	; 24
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	a8 95       	wdr
    17ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    17f4:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    17f8:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    17fc:	cd 91       	ld	r28, X+
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	dd 91       	ld	r29, X+
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	7f 90       	pop	r7
    1836:	6f 90       	pop	r6
    1838:	5f 90       	pop	r5
    183a:	4f 90       	pop	r4
    183c:	3f 90       	pop	r3
    183e:	2f 90       	pop	r2
    1840:	1f 90       	pop	r1
    1842:	0f 90       	pop	r0
    1844:	0c be       	out	0x3c, r0	; 60
    1846:	0f 90       	pop	r0
    1848:	0b be       	out	0x3b, r0	; 59
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	08 95       	ret
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	08 95       	ret

00001856 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	0f 92       	push	r0
    185e:	0b b6       	in	r0, 0x3b	; 59
    1860:	0f 92       	push	r0
    1862:	0c b6       	in	r0, 0x3c	; 60
    1864:	0f 92       	push	r0
    1866:	1f 92       	push	r1
    1868:	11 24       	eor	r1, r1
    186a:	2f 92       	push	r2
    186c:	3f 92       	push	r3
    186e:	4f 92       	push	r4
    1870:	5f 92       	push	r5
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
    18a6:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    18aa:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    18ae:	0d b6       	in	r0, 0x3d	; 61
    18b0:	0d 92       	st	X+, r0
    18b2:	0e b6       	in	r0, 0x3e	; 62
    18b4:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    18b6:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    18ba:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    18be:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    18c2:	cd 91       	ld	r28, X+
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	dd 91       	ld	r29, X+
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	ff 91       	pop	r31
    18cc:	ef 91       	pop	r30
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	bf 91       	pop	r27
    18d4:	af 91       	pop	r26
    18d6:	9f 91       	pop	r25
    18d8:	8f 91       	pop	r24
    18da:	7f 91       	pop	r23
    18dc:	6f 91       	pop	r22
    18de:	5f 91       	pop	r21
    18e0:	4f 91       	pop	r20
    18e2:	3f 91       	pop	r19
    18e4:	2f 91       	pop	r18
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	5f 90       	pop	r5
    1900:	4f 90       	pop	r4
    1902:	3f 90       	pop	r3
    1904:	2f 90       	pop	r2
    1906:	1f 90       	pop	r1
    1908:	0f 90       	pop	r0
    190a:	0c be       	out	0x3c, r0	; 60
    190c:	0f 90       	pop	r0
    190e:	0b be       	out	0x3b, r0	; 59
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1916:	08 95       	ret

00001918 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	0f 92       	push	r0
    1920:	0b b6       	in	r0, 0x3b	; 59
    1922:	0f 92       	push	r0
    1924:	0c b6       	in	r0, 0x3c	; 60
    1926:	0f 92       	push	r0
    1928:	1f 92       	push	r1
    192a:	11 24       	eor	r1, r1
    192c:	2f 92       	push	r2
    192e:	3f 92       	push	r3
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    196c:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    1970:	0d b6       	in	r0, 0x3d	; 61
    1972:	0d 92       	st	X+, r0
    1974:	0e b6       	in	r0, 0x3e	; 62
    1976:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1978:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    197a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <xTaskIncrementTick>
    197e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1980:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1984:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    1988:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    198c:	cd 91       	ld	r28, X+
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	dd 91       	ld	r29, X+
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	ff 91       	pop	r31
    1996:	ef 91       	pop	r30
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	bf 91       	pop	r27
    199e:	af 91       	pop	r26
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	7f 91       	pop	r23
    19a6:	6f 91       	pop	r22
    19a8:	5f 91       	pop	r21
    19aa:	4f 91       	pop	r20
    19ac:	3f 91       	pop	r19
    19ae:	2f 91       	pop	r18
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	bf 90       	pop	r11
    19be:	af 90       	pop	r10
    19c0:	9f 90       	pop	r9
    19c2:	8f 90       	pop	r8
    19c4:	7f 90       	pop	r7
    19c6:	6f 90       	pop	r6
    19c8:	5f 90       	pop	r5
    19ca:	4f 90       	pop	r4
    19cc:	3f 90       	pop	r3
    19ce:	2f 90       	pop	r2
    19d0:	1f 90       	pop	r1
    19d2:	0f 90       	pop	r0
    19d4:	0c be       	out	0x3c, r0	; 60
    19d6:	0f 90       	pop	r0
    19d8:	0b be       	out	0x3b, r0	; 59
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    19e0:	08 95       	ret

000019e2 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    19e2:	9a df       	rcall	.-204    	; 0x1918 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    19e4:	18 95       	reti

000019e6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	0f 92       	push	r0
    19ec:	fc 01       	movw	r30, r24
    19ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	91 11       	cpse	r25, r1
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	08 95       	ret

000019fc <prvCopyDataToQueue>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	ec 01       	movw	r28, r24
    1a06:	04 2f       	mov	r16, r20
    1a08:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a0a:	48 a1       	ldd	r20, Y+32	; 0x20
    1a0c:	41 11       	cpse	r20, r1
    1a0e:	0c c0       	rjmp	.+24     	; 0x1a28 <prvCopyDataToQueue+0x2c>
    1a10:	88 81       	ld	r24, Y
    1a12:	99 81       	ldd	r25, Y+1	; 0x01
    1a14:	89 2b       	or	r24, r25
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <prvCopyDataToQueue+0x1e>
    1a18:	42 c0       	rjmp	.+132    	; 0x1a9e <prvCopyDataToQueue+0xa2>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	0e 94 57 19 	call	0x32ae	; 0x32ae <xTaskPriorityDisinherit>
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	1c 82       	std	Y+4, r1	; 0x04
    1a26:	42 c0       	rjmp	.+132    	; 0x1aac <prvCopyDataToQueue+0xb0>
    1a28:	01 11       	cpse	r16, r1
    1a2a:	17 c0       	rjmp	.+46     	; 0x1a5a <prvCopyDataToQueue+0x5e>
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <memcpy>
    1a36:	28 a1       	ldd	r18, Y+32	; 0x20
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3c:	82 0f       	add	r24, r18
    1a3e:	91 1d       	adc	r25, r1
    1a40:	9b 83       	std	Y+3, r25	; 0x03
    1a42:	8a 83       	std	Y+2, r24	; 0x02
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	82 17       	cp	r24, r18
    1a4a:	93 07       	cpc	r25, r19
    1a4c:	50 f1       	brcs	.+84     	; 0x1aa2 <prvCopyDataToQueue+0xa6>
    1a4e:	88 81       	ld	r24, Y
    1a50:	99 81       	ldd	r25, Y+1	; 0x01
    1a52:	9b 83       	std	Y+3, r25	; 0x03
    1a54:	8a 83       	std	Y+2, r24	; 0x02
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	29 c0       	rjmp	.+82     	; 0x1aac <prvCopyDataToQueue+0xb0>
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <memcpy>
    1a64:	88 a1       	ldd	r24, Y+32	; 0x20
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 95       	neg	r25
    1a6a:	81 95       	neg	r24
    1a6c:	91 09       	sbc	r25, r1
    1a6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a70:	3f 81       	ldd	r19, Y+7	; 0x07
    1a72:	28 0f       	add	r18, r24
    1a74:	39 1f       	adc	r19, r25
    1a76:	3f 83       	std	Y+7, r19	; 0x07
    1a78:	2e 83       	std	Y+6, r18	; 0x06
    1a7a:	48 81       	ld	r20, Y
    1a7c:	59 81       	ldd	r21, Y+1	; 0x01
    1a7e:	24 17       	cp	r18, r20
    1a80:	35 07       	cpc	r19, r21
    1a82:	30 f4       	brcc	.+12     	; 0x1a90 <prvCopyDataToQueue+0x94>
    1a84:	2c 81       	ldd	r18, Y+4	; 0x04
    1a86:	3d 81       	ldd	r19, Y+5	; 0x05
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	9f 83       	std	Y+7, r25	; 0x07
    1a8e:	8e 83       	std	Y+6, r24	; 0x06
    1a90:	02 30       	cpi	r16, 0x02	; 2
    1a92:	49 f4       	brne	.+18     	; 0x1aa6 <prvCopyDataToQueue+0xaa>
    1a94:	11 23       	and	r17, r17
    1a96:	49 f0       	breq	.+18     	; 0x1aaa <prvCopyDataToQueue+0xae>
    1a98:	11 50       	subi	r17, 0x01	; 1
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	07 c0       	rjmp	.+14     	; 0x1aac <prvCopyDataToQueue+0xb0>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <prvCopyDataToQueue+0xb0>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <prvCopyDataToQueue+0xb0>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <prvCopyDataToQueue+0xb0>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	1f 5f       	subi	r17, 0xFF	; 255
    1aae:	1e 8f       	std	Y+30, r17	; 0x1e
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <prvCopyDataFromQueue>:
    1aba:	fc 01       	movw	r30, r24
    1abc:	40 a1       	ldd	r20, Z+32	; 0x20
    1abe:	44 23       	and	r20, r20
    1ac0:	a9 f0       	breq	.+42     	; 0x1aec <prvCopyDataFromQueue+0x32>
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	26 81       	ldd	r18, Z+6	; 0x06
    1ac6:	37 81       	ldd	r19, Z+7	; 0x07
    1ac8:	24 0f       	add	r18, r20
    1aca:	35 1f       	adc	r19, r21
    1acc:	37 83       	std	Z+7, r19	; 0x07
    1ace:	26 83       	std	Z+6, r18	; 0x06
    1ad0:	84 81       	ldd	r24, Z+4	; 0x04
    1ad2:	95 81       	ldd	r25, Z+5	; 0x05
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <prvCopyDataFromQueue+0x28>
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	97 83       	std	Z+7, r25	; 0x07
    1ae0:	86 83       	std	Z+6, r24	; 0x06
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	66 81       	ldd	r22, Z+6	; 0x06
    1ae6:	77 81       	ldd	r23, Z+7	; 0x07
    1ae8:	0c 94 30 2f 	jmp	0x5e60	; 0x5e60 <memcpy>
    1aec:	08 95       	ret

00001aee <prvUnlockQueue>:
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	8c 01       	movw	r16, r24
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	0f 92       	push	r0
    1b00:	fc 01       	movw	r30, r24
    1b02:	c2 a1       	ldd	r28, Z+34	; 0x22
    1b04:	1c 16       	cp	r1, r28
    1b06:	ac f4       	brge	.+42     	; 0x1b32 <prvUnlockQueue+0x44>
    1b08:	83 89       	ldd	r24, Z+19	; 0x13
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <prvUnlockQueue+0x2c>
    1b0e:	11 c0       	rjmp	.+34     	; 0x1b32 <prvUnlockQueue+0x44>
    1b10:	f8 01       	movw	r30, r16
    1b12:	83 89       	ldd	r24, Z+19	; 0x13
    1b14:	81 11       	cpse	r24, r1
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <prvUnlockQueue+0x34>
    1b18:	0c c0       	rjmp	.+24     	; 0x1b32 <prvUnlockQueue+0x44>
    1b1a:	78 01       	movw	r14, r16
    1b1c:	f3 e1       	ldi	r31, 0x13	; 19
    1b1e:	ef 0e       	add	r14, r31
    1b20:	f1 1c       	adc	r15, r1
    1b22:	c7 01       	movw	r24, r14
    1b24:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xTaskRemoveFromEventList>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <vTaskMissedYield>
    1b2e:	c1 50       	subi	r28, 0x01	; 1
    1b30:	79 f7       	brne	.-34     	; 0x1b10 <prvUnlockQueue+0x22>
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	f8 01       	movw	r30, r16
    1b36:	82 a3       	std	Z+34, r24	; 0x22
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	0f 92       	push	r0
    1b42:	c1 a1       	ldd	r28, Z+33	; 0x21
    1b44:	1c 16       	cp	r1, r28
    1b46:	ac f4       	brge	.+42     	; 0x1b72 <prvUnlockQueue+0x84>
    1b48:	80 85       	ldd	r24, Z+8	; 0x08
    1b4a:	81 11       	cpse	r24, r1
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <prvUnlockQueue+0x6c>
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <prvUnlockQueue+0x84>
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 85       	ldd	r24, Z+8	; 0x08
    1b54:	81 11       	cpse	r24, r1
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <prvUnlockQueue+0x74>
    1b58:	0c c0       	rjmp	.+24     	; 0x1b72 <prvUnlockQueue+0x84>
    1b5a:	78 01       	movw	r14, r16
    1b5c:	f8 e0       	ldi	r31, 0x08	; 8
    1b5e:	ef 0e       	add	r14, r31
    1b60:	f1 1c       	adc	r15, r1
    1b62:	c7 01       	movw	r24, r14
    1b64:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xTaskRemoveFromEventList>
    1b68:	81 11       	cpse	r24, r1
    1b6a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <vTaskMissedYield>
    1b6e:	c1 50       	subi	r28, 0x01	; 1
    1b70:	79 f7       	brne	.-34     	; 0x1b50 <prvUnlockQueue+0x62>
    1b72:	8f ef       	ldi	r24, 0xFF	; 255
    1b74:	f8 01       	movw	r30, r16
    1b76:	81 a3       	std	Z+33, r24	; 0x21
    1b78:	0f 90       	pop	r0
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <xQueueGenericReset>:
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	ec 01       	movw	r28, r24
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	0f 92       	push	r0
    1b94:	e8 81       	ld	r30, Y
    1b96:	f9 81       	ldd	r31, Y+1	; 0x01
    1b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b9a:	28 a1       	ldd	r18, Y+32	; 0x20
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	82 9f       	mul	r24, r18
    1ba2:	a0 01       	movw	r20, r0
    1ba4:	83 9f       	mul	r24, r19
    1ba6:	50 0d       	add	r21, r0
    1ba8:	92 9f       	mul	r25, r18
    1baa:	50 0d       	add	r21, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	4e 0f       	add	r20, r30
    1bb0:	5f 1f       	adc	r21, r31
    1bb2:	5d 83       	std	Y+5, r21	; 0x05
    1bb4:	4c 83       	std	Y+4, r20	; 0x04
    1bb6:	1e 8e       	std	Y+30, r1	; 0x1e
    1bb8:	fb 83       	std	Y+3, r31	; 0x03
    1bba:	ea 83       	std	Y+2, r30	; 0x02
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	82 9f       	mul	r24, r18
    1bc0:	a0 01       	movw	r20, r0
    1bc2:	83 9f       	mul	r24, r19
    1bc4:	50 0d       	add	r21, r0
    1bc6:	92 9f       	mul	r25, r18
    1bc8:	50 0d       	add	r21, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	cf 01       	movw	r24, r30
    1bce:	84 0f       	add	r24, r20
    1bd0:	95 1f       	adc	r25, r21
    1bd2:	9f 83       	std	Y+7, r25	; 0x07
    1bd4:	8e 83       	std	Y+6, r24	; 0x06
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	89 a3       	std	Y+33, r24	; 0x21
    1bda:	8a a3       	std	Y+34, r24	; 0x22
    1bdc:	61 11       	cpse	r22, r1
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <xQueueGenericReset+0x6e>
    1be0:	88 85       	ldd	r24, Y+8	; 0x08
    1be2:	88 23       	and	r24, r24
    1be4:	71 f0       	breq	.+28     	; 0x1c02 <xQueueGenericReset+0x7a>
    1be6:	ce 01       	movw	r24, r28
    1be8:	08 96       	adiw	r24, 0x08	; 8
    1bea:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xTaskRemoveFromEventList>
    1bee:	88 23       	and	r24, r24
    1bf0:	41 f0       	breq	.+16     	; 0x1c02 <xQueueGenericReset+0x7a>
    1bf2:	31 de       	rcall	.-926    	; 0x1856 <vPortYield>
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <xQueueGenericReset+0x7a>
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	08 96       	adiw	r24, 0x08	; 8
    1bfa:	e5 dc       	rcall	.-1590   	; 0x15c6 <vListInitialise>
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	43 96       	adiw	r24, 0x13	; 19
    1c00:	e2 dc       	rcall	.-1596   	; 0x15c6 <vListInitialise>
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <xQueueGenericCreate>:
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	08 2f       	mov	r16, r24
    1c1a:	16 2f       	mov	r17, r22
    1c1c:	f4 2e       	mov	r15, r20
    1c1e:	66 23       	and	r22, r22
    1c20:	b9 f0       	breq	.+46     	; 0x1c50 <xQueueGenericCreate+0x42>
    1c22:	86 9f       	mul	r24, r22
    1c24:	c0 01       	movw	r24, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	85 96       	adiw	r24, 0x25	; 37
    1c2a:	e3 db       	rcall	.-2106   	; 0x13f2 <pvPortMalloc>
    1c2c:	ec 01       	movw	r28, r24
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	41 f4       	brne	.+16     	; 0x1c42 <xQueueGenericCreate+0x34>
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <xQueueGenericCreate+0x4e>
    1c34:	0f 8f       	std	Y+31, r16	; 0x1f
    1c36:	18 a3       	std	Y+32, r17	; 0x20
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	a5 df       	rcall	.-182    	; 0x1b88 <xQueueGenericReset>
    1c3e:	fc a2       	std	Y+36, r15	; 0x24
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <xQueueGenericCreate+0x4e>
    1c42:	85 96       	adiw	r24, 0x25	; 37
    1c44:	99 83       	std	Y+1, r25	; 0x01
    1c46:	88 83       	st	Y, r24
    1c48:	f5 cf       	rjmp	.-22     	; 0x1c34 <xQueueGenericCreate+0x26>
    1c4a:	d9 83       	std	Y+1, r29	; 0x01
    1c4c:	c8 83       	st	Y, r28
    1c4e:	f2 cf       	rjmp	.-28     	; 0x1c34 <xQueueGenericCreate+0x26>
    1c50:	85 e2       	ldi	r24, 0x25	; 37
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	ce db       	rcall	.-2148   	; 0x13f2 <pvPortMalloc>
    1c56:	ec 01       	movw	r28, r24
    1c58:	89 2b       	or	r24, r25
    1c5a:	b9 f7       	brne	.-18     	; 0x1c4a <xQueueGenericCreate+0x3c>
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	08 95       	ret

00001c6a <xQueueGenericSend>:
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	29 97       	sbiw	r28, 0x09	; 9
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	7c 01       	movw	r14, r24
    1c92:	5b 01       	movw	r10, r22
    1c94:	2e 83       	std	Y+6, r18	; 0x06
    1c96:	3f 83       	std	Y+7, r19	; 0x07
    1c98:	48 87       	std	Y+8, r20	; 0x08
    1c9a:	59 87       	std	Y+9, r21	; 0x09
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	99 24       	eor	r9, r9
    1ca0:	93 94       	inc	r9
    1ca2:	6c 01       	movw	r12, r24
    1ca4:	88 e0       	ldi	r24, 0x08	; 8
    1ca6:	c8 0e       	add	r12, r24
    1ca8:	d1 1c       	adc	r13, r1
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	0f 92       	push	r0
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	96 8d       	ldd	r25, Z+30	; 0x1e
    1cb4:	87 8d       	ldd	r24, Z+31	; 0x1f
    1cb6:	98 17       	cp	r25, r24
    1cb8:	10 f0       	brcs	.+4      	; 0x1cbe <xQueueGenericSend+0x54>
    1cba:	02 30       	cpi	r16, 0x02	; 2
    1cbc:	b1 f4       	brne	.+44     	; 0x1cea <xQueueGenericSend+0x80>
    1cbe:	40 2f       	mov	r20, r16
    1cc0:	b5 01       	movw	r22, r10
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	9b de       	rcall	.-714    	; 0x19fc <prvCopyDataToQueue>
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	93 89       	ldd	r25, Z+19	; 0x13
    1cca:	99 23       	and	r25, r25
    1ccc:	41 f0       	breq	.+16     	; 0x1cde <xQueueGenericSend+0x74>
    1cce:	c7 01       	movw	r24, r14
    1cd0:	43 96       	adiw	r24, 0x13	; 19
    1cd2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xTaskRemoveFromEventList>
    1cd6:	88 23       	and	r24, r24
    1cd8:	21 f0       	breq	.+8      	; 0x1ce2 <xQueueGenericSend+0x78>
    1cda:	bd dd       	rcall	.-1158   	; 0x1856 <vPortYield>
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <xQueueGenericSend+0x78>
    1cde:	81 11       	cpse	r24, r1
    1ce0:	ba dd       	rcall	.-1164   	; 0x1856 <vPortYield>
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	4e c0       	rjmp	.+156    	; 0x1d86 <xQueueGenericSend+0x11c>
    1cea:	8e 81       	ldd	r24, Y+6	; 0x06
    1cec:	9f 81       	ldd	r25, Y+7	; 0x07
    1cee:	a8 85       	ldd	r26, Y+8	; 0x08
    1cf0:	b9 85       	ldd	r27, Y+9	; 0x09
    1cf2:	89 2b       	or	r24, r25
    1cf4:	8a 2b       	or	r24, r26
    1cf6:	8b 2b       	or	r24, r27
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <xQueueGenericSend+0x98>
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	42 c0       	rjmp	.+132    	; 0x1d86 <xQueueGenericSend+0x11c>
    1d02:	11 11       	cpse	r17, r1
    1d04:	05 c0       	rjmp	.+10     	; 0x1d10 <xQueueGenericSend+0xa6>
    1d06:	ce 01       	movw	r24, r28
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskInternalSetTimeOutState>
    1d0e:	19 2d       	mov	r17, r9
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	fd d6       	rcall	.+3578   	; 0x2b10 <vTaskSuspendAll>
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	0f 92       	push	r0
    1d1c:	f7 01       	movw	r30, r14
    1d1e:	81 a1       	ldd	r24, Z+33	; 0x21
    1d20:	8f 3f       	cpi	r24, 0xFF	; 255
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <xQueueGenericSend+0xbc>
    1d24:	11 a2       	std	Z+33, r1	; 0x21
    1d26:	f7 01       	movw	r30, r14
    1d28:	82 a1       	ldd	r24, Z+34	; 0x22
    1d2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <xQueueGenericSend+0xc6>
    1d2e:	12 a2       	std	Z+34, r1	; 0x22
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	be 01       	movw	r22, r28
    1d36:	6a 5f       	subi	r22, 0xFA	; 250
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <xTaskCheckForTimeOut>
    1d42:	81 11       	cpse	r24, r1
    1d44:	1c c0       	rjmp	.+56     	; 0x1d7e <xQueueGenericSend+0x114>
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1d50:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	98 13       	cpse	r25, r24
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <xQueueGenericSend+0x10c>
    1d5a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d5c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d5e:	68 85       	ldd	r22, Y+8	; 0x08
    1d60:	79 85       	ldd	r23, Y+9	; 0x09
    1d62:	c6 01       	movw	r24, r12
    1d64:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <vTaskPlaceOnEventList>
    1d68:	c7 01       	movw	r24, r14
    1d6a:	c1 de       	rcall	.-638    	; 0x1aee <prvUnlockQueue>
    1d6c:	ba d7       	rcall	.+3956   	; 0x2ce2 <xTaskResumeAll>
    1d6e:	81 11       	cpse	r24, r1
    1d70:	9c cf       	rjmp	.-200    	; 0x1caa <xQueueGenericSend+0x40>
    1d72:	71 dd       	rcall	.-1310   	; 0x1856 <vPortYield>
    1d74:	9a cf       	rjmp	.-204    	; 0x1caa <xQueueGenericSend+0x40>
    1d76:	c7 01       	movw	r24, r14
    1d78:	ba de       	rcall	.-652    	; 0x1aee <prvUnlockQueue>
    1d7a:	b3 d7       	rcall	.+3942   	; 0x2ce2 <xTaskResumeAll>
    1d7c:	96 cf       	rjmp	.-212    	; 0x1caa <xQueueGenericSend+0x40>
    1d7e:	c7 01       	movw	r24, r14
    1d80:	b6 de       	rcall	.-660    	; 0x1aee <prvUnlockQueue>
    1d82:	af d7       	rcall	.+3934   	; 0x2ce2 <xTaskResumeAll>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	29 96       	adiw	r28, 0x09	; 9
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	08 95       	ret

00001daa <xQueueCreateMutex>:
    1daa:	0f 93       	push	r16
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	48 2f       	mov	r20, r24
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	2b df       	rcall	.-426    	; 0x1c0e <xQueueGenericCreate>
    1db8:	ec 01       	movw	r28, r24
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <xQueueCreateMutex+0x2c>
    1dbe:	1d 82       	std	Y+5, r1	; 0x05
    1dc0:	1c 82       	std	Y+4, r1	; 0x04
    1dc2:	19 82       	std	Y+1, r1	; 0x01
    1dc4:	18 82       	st	Y, r1
    1dc6:	1e 82       	std	Y+6, r1	; 0x06
    1dc8:	00 e0       	ldi	r16, 0x00	; 0
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	a9 01       	movw	r20, r18
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	4a df       	rcall	.-364    	; 0x1c6a <xQueueGenericSend>
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <xQueueGenericSendFromISR>:
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	8a 01       	movw	r16, r20
    1dee:	fc 01       	movw	r30, r24
    1df0:	56 8d       	ldd	r21, Z+30	; 0x1e
    1df2:	37 8d       	ldd	r19, Z+31	; 0x1f
    1df4:	53 17       	cp	r21, r19
    1df6:	10 f0       	brcs	.+4      	; 0x1dfc <xQueueGenericSendFromISR+0x1c>
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	e9 f4       	brne	.+58     	; 0x1e36 <xQueueGenericSendFromISR+0x56>
    1dfc:	42 2f       	mov	r20, r18
    1dfe:	78 01       	movw	r14, r16
    1e00:	ec 01       	movw	r28, r24
    1e02:	1a a1       	ldd	r17, Y+34	; 0x22
    1e04:	fb dd       	rcall	.-1034   	; 0x19fc <prvCopyDataToQueue>
    1e06:	1f 3f       	cpi	r17, 0xFF	; 255
    1e08:	81 f4       	brne	.+32     	; 0x1e2a <xQueueGenericSendFromISR+0x4a>
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	88 23       	and	r24, r24
    1e0e:	a9 f0       	breq	.+42     	; 0x1e3a <xQueueGenericSendFromISR+0x5a>
    1e10:	ce 01       	movw	r24, r28
    1e12:	43 96       	adiw	r24, 0x13	; 19
    1e14:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xTaskRemoveFromEventList>
    1e18:	88 23       	and	r24, r24
    1e1a:	89 f0       	breq	.+34     	; 0x1e3e <xQueueGenericSendFromISR+0x5e>
    1e1c:	e1 14       	cp	r14, r1
    1e1e:	f1 04       	cpc	r15, r1
    1e20:	81 f0       	breq	.+32     	; 0x1e42 <xQueueGenericSendFromISR+0x62>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	f7 01       	movw	r30, r14
    1e26:	80 83       	st	Z, r24
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <xQueueGenericSendFromISR+0x64>
    1e2a:	ff 24       	eor	r15, r15
    1e2c:	f3 94       	inc	r15
    1e2e:	f1 0e       	add	r15, r17
    1e30:	fa a2       	std	Y+34, r15	; 0x22
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	07 c0       	rjmp	.+14     	; 0x1e44 <xQueueGenericSendFromISR+0x64>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <xQueueGenericSendFromISR+0x64>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <xQueueGenericSendFromISR+0x64>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <xQueueGenericSendFromISR+0x64>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	08 95       	ret

00001e52 <xQueueReceive>:
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	29 97       	sbiw	r28, 0x09	; 9
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	8c 01       	movw	r16, r24
    1e7a:	5b 01       	movw	r10, r22
    1e7c:	2e 83       	std	Y+6, r18	; 0x06
    1e7e:	3f 83       	std	Y+7, r19	; 0x07
    1e80:	48 87       	std	Y+8, r20	; 0x08
    1e82:	59 87       	std	Y+9, r21	; 0x09
    1e84:	e1 2c       	mov	r14, r1
    1e86:	99 24       	eor	r9, r9
    1e88:	93 94       	inc	r9
    1e8a:	6c 01       	movw	r12, r24
    1e8c:	83 e1       	ldi	r24, 0x13	; 19
    1e8e:	c8 0e       	add	r12, r24
    1e90:	d1 1c       	adc	r13, r1
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	0f 92       	push	r0
    1e98:	f8 01       	movw	r30, r16
    1e9a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1e9c:	ff 20       	and	r15, r15
    1e9e:	99 f0       	breq	.+38     	; 0x1ec6 <xQueueReceive+0x74>
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	0a de       	rcall	.-1004   	; 0x1aba <prvCopyDataFromQueue>
    1ea6:	fa 94       	dec	r15
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	f6 8e       	std	Z+30, r15	; 0x1e
    1eac:	80 85       	ldd	r24, Z+8	; 0x08
    1eae:	88 23       	and	r24, r24
    1eb0:	31 f0       	breq	.+12     	; 0x1ebe <xQueueReceive+0x6c>
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	08 96       	adiw	r24, 0x08	; 8
    1eb6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xTaskRemoveFromEventList>
    1eba:	81 11       	cpse	r24, r1
    1ebc:	cc dc       	rcall	.-1640   	; 0x1856 <vPortYield>
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	4c c0       	rjmp	.+152    	; 0x1f5e <xQueueReceive+0x10c>
    1ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eca:	a8 85       	ldd	r26, Y+8	; 0x08
    1ecc:	b9 85       	ldd	r27, Y+9	; 0x09
    1ece:	89 2b       	or	r24, r25
    1ed0:	8a 2b       	or	r24, r26
    1ed2:	8b 2b       	or	r24, r27
    1ed4:	21 f4       	brne	.+8      	; 0x1ede <xQueueReceive+0x8c>
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	40 c0       	rjmp	.+128    	; 0x1f5e <xQueueReceive+0x10c>
    1ede:	e1 10       	cpse	r14, r1
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <xQueueReceive+0x9a>
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskInternalSetTimeOutState>
    1eea:	e9 2c       	mov	r14, r9
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	0f d6       	rcall	.+3102   	; 0x2b10 <vTaskSuspendAll>
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	0f 92       	push	r0
    1ef8:	f8 01       	movw	r30, r16
    1efa:	81 a1       	ldd	r24, Z+33	; 0x21
    1efc:	8f 3f       	cpi	r24, 0xFF	; 255
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <xQueueReceive+0xb0>
    1f00:	11 a2       	std	Z+33, r1	; 0x21
    1f02:	f8 01       	movw	r30, r16
    1f04:	82 a1       	ldd	r24, Z+34	; 0x22
    1f06:	8f 3f       	cpi	r24, 0xFF	; 255
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <xQueueReceive+0xba>
    1f0a:	12 a2       	std	Z+34, r1	; 0x22
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	be 01       	movw	r22, r28
    1f12:	6a 5f       	subi	r22, 0xFA	; 250
    1f14:	7f 4f       	sbci	r23, 0xFF	; 255
    1f16:	ce 01       	movw	r24, r28
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <xTaskCheckForTimeOut>
    1f1e:	81 11       	cpse	r24, r1
    1f20:	15 c0       	rjmp	.+42     	; 0x1f4c <xQueueReceive+0xfa>
    1f22:	c8 01       	movw	r24, r16
    1f24:	60 dd       	rcall	.-1344   	; 0x19e6 <prvIsQueueEmpty>
    1f26:	88 23       	and	r24, r24
    1f28:	69 f0       	breq	.+26     	; 0x1f44 <xQueueReceive+0xf2>
    1f2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f2e:	68 85       	ldd	r22, Y+8	; 0x08
    1f30:	79 85       	ldd	r23, Y+9	; 0x09
    1f32:	c6 01       	movw	r24, r12
    1f34:	ea d7       	rcall	.+4052   	; 0x2f0a <vTaskPlaceOnEventList>
    1f36:	c8 01       	movw	r24, r16
    1f38:	da dd       	rcall	.-1100   	; 0x1aee <prvUnlockQueue>
    1f3a:	d3 d6       	rcall	.+3494   	; 0x2ce2 <xTaskResumeAll>
    1f3c:	81 11       	cpse	r24, r1
    1f3e:	a9 cf       	rjmp	.-174    	; 0x1e92 <xQueueReceive+0x40>
    1f40:	8a dc       	rcall	.-1772   	; 0x1856 <vPortYield>
    1f42:	a7 cf       	rjmp	.-178    	; 0x1e92 <xQueueReceive+0x40>
    1f44:	c8 01       	movw	r24, r16
    1f46:	d3 dd       	rcall	.-1114   	; 0x1aee <prvUnlockQueue>
    1f48:	cc d6       	rcall	.+3480   	; 0x2ce2 <xTaskResumeAll>
    1f4a:	a3 cf       	rjmp	.-186    	; 0x1e92 <xQueueReceive+0x40>
    1f4c:	c8 01       	movw	r24, r16
    1f4e:	cf dd       	rcall	.-1122   	; 0x1aee <prvUnlockQueue>
    1f50:	c8 d6       	rcall	.+3472   	; 0x2ce2 <xTaskResumeAll>
    1f52:	c8 01       	movw	r24, r16
    1f54:	48 dd       	rcall	.-1392   	; 0x19e6 <prvIsQueueEmpty>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <xQueueReceive+0x10a>
    1f5a:	9b cf       	rjmp	.-202    	; 0x1e92 <xQueueReceive+0x40>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	29 96       	adiw	r28, 0x09	; 9
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	08 95       	ret

00001f82 <xQueueSemaphoreTake>:
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	29 97       	sbiw	r28, 0x09	; 9
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	8c 01       	movw	r16, r24
    1fa6:	4e 83       	std	Y+6, r20	; 0x06
    1fa8:	5f 83       	std	Y+7, r21	; 0x07
    1faa:	68 87       	std	Y+8, r22	; 0x08
    1fac:	79 87       	std	Y+9, r23	; 0x09
    1fae:	b1 2c       	mov	r11, r1
    1fb0:	d1 2c       	mov	r13, r1
    1fb2:	cc 24       	eor	r12, r12
    1fb4:	c3 94       	inc	r12
    1fb6:	7c 01       	movw	r14, r24
    1fb8:	83 e1       	ldi	r24, 0x13	; 19
    1fba:	e8 0e       	add	r14, r24
    1fbc:	f1 1c       	adc	r15, r1
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	0f 92       	push	r0
    1fc4:	d8 01       	movw	r26, r16
    1fc6:	5e 96       	adiw	r26, 0x1e	; 30
    1fc8:	8c 91       	ld	r24, X
    1fca:	5e 97       	sbiw	r26, 0x1e	; 30
    1fcc:	88 23       	and	r24, r24
    1fce:	d9 f0       	breq	.+54     	; 0x2006 <xQueueSemaphoreTake+0x84>
    1fd0:	81 50       	subi	r24, 0x01	; 1
    1fd2:	5e 96       	adiw	r26, 0x1e	; 30
    1fd4:	8c 93       	st	X, r24
    1fd6:	5e 97       	sbiw	r26, 0x1e	; 30
    1fd8:	8d 91       	ld	r24, X+
    1fda:	9c 91       	ld	r25, X
    1fdc:	89 2b       	or	r24, r25
    1fde:	29 f4       	brne	.+10     	; 0x1fea <xQueueSemaphoreTake+0x68>
    1fe0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <pvTaskIncrementMutexHeldCount>
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	95 83       	std	Z+5, r25	; 0x05
    1fe8:	84 83       	std	Z+4, r24	; 0x04
    1fea:	d8 01       	movw	r26, r16
    1fec:	18 96       	adiw	r26, 0x08	; 8
    1fee:	8c 91       	ld	r24, X
    1ff0:	88 23       	and	r24, r24
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <xQueueSemaphoreTake+0x7c>
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	08 96       	adiw	r24, 0x08	; 8
    1ff8:	e3 d7       	rcall	.+4038   	; 0x2fc0 <xTaskRemoveFromEventList>
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	2c dc       	rcall	.-1960   	; 0x1856 <vPortYield>
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	7a c0       	rjmp	.+244    	; 0x20fa <xQueueSemaphoreTake+0x178>
    2006:	8e 81       	ldd	r24, Y+6	; 0x06
    2008:	9f 81       	ldd	r25, Y+7	; 0x07
    200a:	a8 85       	ldd	r26, Y+8	; 0x08
    200c:	b9 85       	ldd	r27, Y+9	; 0x09
    200e:	89 2b       	or	r24, r25
    2010:	8a 2b       	or	r24, r26
    2012:	8b 2b       	or	r24, r27
    2014:	21 f4       	brne	.+8      	; 0x201e <xQueueSemaphoreTake+0x9c>
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	6e c0       	rjmp	.+220    	; 0x20fa <xQueueSemaphoreTake+0x178>
    201e:	d1 10       	cpse	r13, r1
    2020:	05 c0       	rjmp	.+10     	; 0x202c <xQueueSemaphoreTake+0xaa>
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskInternalSetTimeOutState>
    202a:	dc 2c       	mov	r13, r12
    202c:	0f 90       	pop	r0
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	6f d5       	rcall	.+2782   	; 0x2b10 <vTaskSuspendAll>
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	0f 92       	push	r0
    2038:	f8 01       	movw	r30, r16
    203a:	81 a1       	ldd	r24, Z+33	; 0x21
    203c:	8f 3f       	cpi	r24, 0xFF	; 255
    203e:	09 f4       	brne	.+2      	; 0x2042 <xQueueSemaphoreTake+0xc0>
    2040:	11 a2       	std	Z+33, r1	; 0x21
    2042:	d8 01       	movw	r26, r16
    2044:	92 96       	adiw	r26, 0x22	; 34
    2046:	8c 91       	ld	r24, X
    2048:	92 97       	sbiw	r26, 0x22	; 34
    204a:	8f 3f       	cpi	r24, 0xFF	; 255
    204c:	11 f4       	brne	.+4      	; 0x2052 <xQueueSemaphoreTake+0xd0>
    204e:	92 96       	adiw	r26, 0x22	; 34
    2050:	1c 92       	st	X, r1
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	be 01       	movw	r22, r28
    2058:	6a 5f       	subi	r22, 0xFA	; 250
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	0e 94 7d 18 	call	0x30fa	; 0x30fa <xTaskCheckForTimeOut>
    2064:	81 11       	cpse	r24, r1
    2066:	24 c0       	rjmp	.+72     	; 0x20b0 <xQueueSemaphoreTake+0x12e>
    2068:	c8 01       	movw	r24, r16
    206a:	bd dc       	rcall	.-1670   	; 0x19e6 <prvIsQueueEmpty>
    206c:	88 23       	and	r24, r24
    206e:	e1 f0       	breq	.+56     	; 0x20a8 <xQueueSemaphoreTake+0x126>
    2070:	f8 01       	movw	r30, r16
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	89 2b       	or	r24, r25
    2078:	51 f4       	brne	.+20     	; 0x208e <xQueueSemaphoreTake+0x10c>
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	0f 92       	push	r0
    2080:	84 81       	ldd	r24, Z+4	; 0x04
    2082:	95 81       	ldd	r25, Z+5	; 0x05
    2084:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <xTaskPriorityInherit>
    2088:	b8 2e       	mov	r11, r24
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	4e 81       	ldd	r20, Y+6	; 0x06
    2090:	5f 81       	ldd	r21, Y+7	; 0x07
    2092:	68 85       	ldd	r22, Y+8	; 0x08
    2094:	79 85       	ldd	r23, Y+9	; 0x09
    2096:	c7 01       	movw	r24, r14
    2098:	38 d7       	rcall	.+3696   	; 0x2f0a <vTaskPlaceOnEventList>
    209a:	c8 01       	movw	r24, r16
    209c:	28 dd       	rcall	.-1456   	; 0x1aee <prvUnlockQueue>
    209e:	21 d6       	rcall	.+3138   	; 0x2ce2 <xTaskResumeAll>
    20a0:	81 11       	cpse	r24, r1
    20a2:	8d cf       	rjmp	.-230    	; 0x1fbe <xQueueSemaphoreTake+0x3c>
    20a4:	d8 db       	rcall	.-2128   	; 0x1856 <vPortYield>
    20a6:	8b cf       	rjmp	.-234    	; 0x1fbe <xQueueSemaphoreTake+0x3c>
    20a8:	c8 01       	movw	r24, r16
    20aa:	21 dd       	rcall	.-1470   	; 0x1aee <prvUnlockQueue>
    20ac:	1a d6       	rcall	.+3124   	; 0x2ce2 <xTaskResumeAll>
    20ae:	87 cf       	rjmp	.-242    	; 0x1fbe <xQueueSemaphoreTake+0x3c>
    20b0:	c8 01       	movw	r24, r16
    20b2:	1d dd       	rcall	.-1478   	; 0x1aee <prvUnlockQueue>
    20b4:	16 d6       	rcall	.+3116   	; 0x2ce2 <xTaskResumeAll>
    20b6:	c8 01       	movw	r24, r16
    20b8:	96 dc       	rcall	.-1748   	; 0x19e6 <prvIsQueueEmpty>
    20ba:	88 23       	and	r24, r24
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <xQueueSemaphoreTake+0x13e>
    20be:	7f cf       	rjmp	.-258    	; 0x1fbe <xQueueSemaphoreTake+0x3c>
    20c0:	bb 20       	and	r11, r11
    20c2:	d1 f0       	breq	.+52     	; 0x20f8 <xQueueSemaphoreTake+0x176>
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	0f 92       	push	r0
    20ca:	f8 01       	movw	r30, r16
    20cc:	83 89       	ldd	r24, Z+19	; 0x13
    20ce:	88 23       	and	r24, r24
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <xQueueSemaphoreTake+0x15e>
    20d2:	02 8c       	ldd	r0, Z+26	; 0x1a
    20d4:	f3 8d       	ldd	r31, Z+27	; 0x1b
    20d6:	e0 2d       	mov	r30, r0
    20d8:	80 81       	ld	r24, Z
    20da:	64 e0       	ldi	r22, 0x04	; 4
    20dc:	68 1b       	sub	r22, r24
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <xQueueSemaphoreTake+0x160>
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	d8 01       	movw	r26, r16
    20e4:	14 96       	adiw	r26, 0x04	; 4
    20e6:	8d 91       	ld	r24, X+
    20e8:	9c 91       	ld	r25, X
    20ea:	15 97       	sbiw	r26, 0x05	; 5
    20ec:	0e 94 97 19 	call	0x332e	; 0x332e <vTaskPriorityDisinheritAfterTimeout>
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <xQueueSemaphoreTake+0x178>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	29 96       	adiw	r28, 0x09	; 9
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	08 95       	ret

0000211a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	0f 92       	push	r0
    2126:	89 a1       	ldd	r24, Y+33	; 0x21
    2128:	8f 3f       	cpi	r24, 0xFF	; 255
    212a:	09 f4       	brne	.+2      	; 0x212e <vQueueWaitForMessageRestricted+0x14>
    212c:	19 a2       	std	Y+33, r1	; 0x21
    212e:	8a a1       	ldd	r24, Y+34	; 0x22
    2130:	8f 3f       	cpi	r24, 0xFF	; 255
    2132:	09 f4       	brne	.+2      	; 0x2136 <vQueueWaitForMessageRestricted+0x1c>
    2134:	1a a2       	std	Y+34, r1	; 0x22
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    213a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    213c:	81 11       	cpse	r24, r1
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2140:	ce 01       	movw	r24, r28
    2142:	43 96       	adiw	r24, 0x13	; 19
    2144:	1d d7       	rcall	.+3642   	; 0x2f80 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2146:	ce 01       	movw	r24, r28
    2148:	d2 dc       	rcall	.-1628   	; 0x1aee <prvUnlockQueue>
    }
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	08 95       	ret

00002150 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    2150:	fc 01       	movw	r30, r24
    2152:	44 81       	ldd	r20, Z+4	; 0x04
    2154:	55 81       	ldd	r21, Z+5	; 0x05
    2156:	22 81       	ldd	r18, Z+2	; 0x02
    2158:	33 81       	ldd	r19, Z+3	; 0x03
    215a:	24 0f       	add	r18, r20
    215c:	35 1f       	adc	r19, r21
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	b9 01       	movw	r22, r18
    2164:	68 1b       	sub	r22, r24
    2166:	79 0b       	sbc	r23, r25
    2168:	cb 01       	movw	r24, r22
    216a:	64 17       	cp	r22, r20
    216c:	75 07       	cpc	r23, r21
    216e:	10 f0       	brcs	.+4      	; 0x2174 <prvBytesInBuffer+0x24>
    2170:	84 1b       	sub	r24, r20
    2172:	95 0b       	sbc	r25, r21
    2174:	08 95       	ret

00002176 <prvWriteBytesToBuffer>:
    2176:	af 92       	push	r10
    2178:	bf 92       	push	r11
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	6c 01       	movw	r12, r24
    218c:	5b 01       	movw	r10, r22
    218e:	7a 01       	movw	r14, r20
    2190:	fc 01       	movw	r30, r24
    2192:	c2 81       	ldd	r28, Z+2	; 0x02
    2194:	d3 81       	ldd	r29, Z+3	; 0x03
    2196:	04 81       	ldd	r16, Z+4	; 0x04
    2198:	15 81       	ldd	r17, Z+5	; 0x05
    219a:	0c 1b       	sub	r16, r28
    219c:	1d 0b       	sbc	r17, r29
    219e:	40 17       	cp	r20, r16
    21a0:	51 07       	cpc	r21, r17
    21a2:	08 f4       	brcc	.+2      	; 0x21a6 <prvWriteBytesToBuffer+0x30>
    21a4:	8a 01       	movw	r16, r20
    21a6:	f6 01       	movw	r30, r12
    21a8:	84 85       	ldd	r24, Z+12	; 0x0c
    21aa:	95 85       	ldd	r25, Z+13	; 0x0d
    21ac:	a8 01       	movw	r20, r16
    21ae:	b5 01       	movw	r22, r10
    21b0:	8c 0f       	add	r24, r28
    21b2:	9d 1f       	adc	r25, r29
    21b4:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <memcpy>
    21b8:	0e 15       	cp	r16, r14
    21ba:	1f 05       	cpc	r17, r15
    21bc:	58 f4       	brcc	.+22     	; 0x21d4 <prvWriteBytesToBuffer+0x5e>
    21be:	a7 01       	movw	r20, r14
    21c0:	40 1b       	sub	r20, r16
    21c2:	51 0b       	sbc	r21, r17
    21c4:	b5 01       	movw	r22, r10
    21c6:	60 0f       	add	r22, r16
    21c8:	71 1f       	adc	r23, r17
    21ca:	f6 01       	movw	r30, r12
    21cc:	84 85       	ldd	r24, Z+12	; 0x0c
    21ce:	95 85       	ldd	r25, Z+13	; 0x0d
    21d0:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <memcpy>
    21d4:	ce 01       	movw	r24, r28
    21d6:	8e 0d       	add	r24, r14
    21d8:	9f 1d       	adc	r25, r15
    21da:	f6 01       	movw	r30, r12
    21dc:	24 81       	ldd	r18, Z+4	; 0x04
    21de:	35 81       	ldd	r19, Z+5	; 0x05
    21e0:	82 17       	cp	r24, r18
    21e2:	93 07       	cpc	r25, r19
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <prvWriteBytesToBuffer+0x74>
    21e6:	82 1b       	sub	r24, r18
    21e8:	93 0b       	sbc	r25, r19
    21ea:	f6 01       	movw	r30, r12
    21ec:	93 83       	std	Z+3, r25	; 0x03
    21ee:	82 83       	std	Z+2, r24	; 0x02
    21f0:	c7 01       	movw	r24, r14
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	bf 90       	pop	r11
    2204:	af 90       	pop	r10
    2206:	08 95       	ret

00002208 <prvWriteMessageToBuffer>:
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	1f 92       	push	r1
    221a:	1f 92       	push	r1
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	5a 83       	std	Y+2, r21	; 0x02
    2222:	49 83       	std	Y+1, r20	; 0x01
    2224:	21 15       	cp	r18, r1
    2226:	31 05       	cpc	r19, r1
    2228:	c9 f0       	breq	.+50     	; 0x225c <prvWriteMessageToBuffer+0x54>
    222a:	6b 01       	movw	r12, r22
    222c:	7c 01       	movw	r14, r24
    222e:	fc 01       	movw	r30, r24
    2230:	86 85       	ldd	r24, Z+14	; 0x0e
    2232:	80 fd       	sbrc	r24, 0
    2234:	08 c0       	rjmp	.+16     	; 0x2246 <prvWriteMessageToBuffer+0x3e>
    2236:	ca 01       	movw	r24, r20
    2238:	24 17       	cp	r18, r20
    223a:	35 07       	cpc	r19, r21
    223c:	08 f4       	brcc	.+2      	; 0x2240 <prvWriteMessageToBuffer+0x38>
    223e:	c9 01       	movw	r24, r18
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	11 c0       	rjmp	.+34     	; 0x2268 <prvWriteMessageToBuffer+0x60>
    2246:	20 17       	cp	r18, r16
    2248:	31 07       	cpc	r19, r17
    224a:	58 f0       	brcs	.+22     	; 0x2262 <prvWriteMessageToBuffer+0x5a>
    224c:	42 e0       	ldi	r20, 0x02	; 2
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	be 01       	movw	r22, r28
    2252:	6f 5f       	subi	r22, 0xFF	; 255
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	c7 01       	movw	r24, r14
    2258:	8e df       	rcall	.-228    	; 0x2176 <prvWriteBytesToBuffer>
    225a:	06 c0       	rjmp	.+12     	; 0x2268 <prvWriteMessageToBuffer+0x60>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	08 c0       	rjmp	.+16     	; 0x2272 <prvWriteMessageToBuffer+0x6a>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <prvWriteMessageToBuffer+0x6a>
    2268:	49 81       	ldd	r20, Y+1	; 0x01
    226a:	5a 81       	ldd	r21, Y+2	; 0x02
    226c:	b6 01       	movw	r22, r12
    226e:	c7 01       	movw	r24, r14
    2270:	82 df       	rcall	.-252    	; 0x2176 <prvWriteBytesToBuffer>
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	08 95       	ret

00002288 <prvReadBytesFromBuffer>:
    2288:	af 92       	push	r10
    228a:	bf 92       	push	r11
    228c:	cf 92       	push	r12
    228e:	df 92       	push	r13
    2290:	ef 92       	push	r14
    2292:	ff 92       	push	r15
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	7c 01       	movw	r14, r24
    229e:	5b 01       	movw	r10, r22
    22a0:	e9 01       	movw	r28, r18
    22a2:	42 17       	cp	r20, r18
    22a4:	53 07       	cpc	r21, r19
    22a6:	08 f4       	brcc	.+2      	; 0x22aa <prvReadBytesFromBuffer+0x22>
    22a8:	ea 01       	movw	r28, r20
    22aa:	20 97       	sbiw	r28, 0x00	; 0
    22ac:	79 f1       	breq	.+94     	; 0x230c <prvReadBytesFromBuffer+0x84>
    22ae:	f7 01       	movw	r30, r14
    22b0:	00 81       	ld	r16, Z
    22b2:	11 81       	ldd	r17, Z+1	; 0x01
    22b4:	c4 80       	ldd	r12, Z+4	; 0x04
    22b6:	d5 80       	ldd	r13, Z+5	; 0x05
    22b8:	c0 1a       	sub	r12, r16
    22ba:	d1 0a       	sbc	r13, r17
    22bc:	cc 15       	cp	r28, r12
    22be:	dd 05       	cpc	r29, r13
    22c0:	08 f4       	brcc	.+2      	; 0x22c4 <prvReadBytesFromBuffer+0x3c>
    22c2:	6e 01       	movw	r12, r28
    22c4:	f7 01       	movw	r30, r14
    22c6:	64 85       	ldd	r22, Z+12	; 0x0c
    22c8:	75 85       	ldd	r23, Z+13	; 0x0d
    22ca:	60 0f       	add	r22, r16
    22cc:	71 1f       	adc	r23, r17
    22ce:	a6 01       	movw	r20, r12
    22d0:	c5 01       	movw	r24, r10
    22d2:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <memcpy>
    22d6:	cc 16       	cp	r12, r28
    22d8:	dd 06       	cpc	r13, r29
    22da:	58 f4       	brcc	.+22     	; 0x22f2 <prvReadBytesFromBuffer+0x6a>
    22dc:	ae 01       	movw	r20, r28
    22de:	4c 19       	sub	r20, r12
    22e0:	5d 09       	sbc	r21, r13
    22e2:	f7 01       	movw	r30, r14
    22e4:	64 85       	ldd	r22, Z+12	; 0x0c
    22e6:	75 85       	ldd	r23, Z+13	; 0x0d
    22e8:	c5 01       	movw	r24, r10
    22ea:	8c 0d       	add	r24, r12
    22ec:	9d 1d       	adc	r25, r13
    22ee:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <memcpy>
    22f2:	0c 0f       	add	r16, r28
    22f4:	1d 1f       	adc	r17, r29
    22f6:	f7 01       	movw	r30, r14
    22f8:	84 81       	ldd	r24, Z+4	; 0x04
    22fa:	95 81       	ldd	r25, Z+5	; 0x05
    22fc:	08 17       	cp	r16, r24
    22fe:	19 07       	cpc	r17, r25
    2300:	10 f0       	brcs	.+4      	; 0x2306 <prvReadBytesFromBuffer+0x7e>
    2302:	08 1b       	sub	r16, r24
    2304:	19 0b       	sbc	r17, r25
    2306:	f7 01       	movw	r30, r14
    2308:	11 83       	std	Z+1, r17	; 0x01
    230a:	00 83       	st	Z, r16
    230c:	ce 01       	movw	r24, r28
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ff 90       	pop	r15
    2318:	ef 90       	pop	r14
    231a:	df 90       	pop	r13
    231c:	cf 90       	pop	r12
    231e:	bf 90       	pop	r11
    2320:	af 90       	pop	r10
    2322:	08 95       	ret

00002324 <xStreamBufferGenericCreate>:
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	eb 01       	movw	r28, r22
    2330:	11 e0       	ldi	r17, 0x01	; 1
    2332:	41 30       	cpi	r20, 0x01	; 1
    2334:	09 f0       	breq	.+2      	; 0x2338 <xStreamBufferGenericCreate+0x14>
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	20 97       	sbiw	r28, 0x00	; 0
    233a:	11 f4       	brne	.+4      	; 0x2340 <xStreamBufferGenericCreate+0x1c>
    233c:	c1 e0       	ldi	r28, 0x01	; 1
    233e:	d0 e0       	ldi	r29, 0x00	; 0
    2340:	7c 01       	movw	r14, r24
    2342:	2f ef       	ldi	r18, 0xFF	; 255
    2344:	e2 1a       	sub	r14, r18
    2346:	f2 0a       	sbc	r15, r18
    2348:	41 96       	adiw	r24, 0x11	; 17
    234a:	53 d8       	rcall	.-3930   	; 0x13f2 <pvPortMalloc>
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	81 f0       	breq	.+32     	; 0x2370 <xStreamBufferGenericCreate+0x4c>
    2350:	20 e1       	ldi	r18, 0x10	; 16
    2352:	fc 01       	movw	r30, r24
    2354:	11 92       	st	Z+, r1
    2356:	2a 95       	dec	r18
    2358:	e9 f7       	brne	.-6      	; 0x2354 <xStreamBufferGenericCreate+0x30>
    235a:	9c 01       	movw	r18, r24
    235c:	20 5f       	subi	r18, 0xF0	; 240
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	fc 01       	movw	r30, r24
    2362:	35 87       	std	Z+13, r19	; 0x0d
    2364:	24 87       	std	Z+12, r18	; 0x0c
    2366:	f5 82       	std	Z+5, r15	; 0x05
    2368:	e4 82       	std	Z+4, r14	; 0x04
    236a:	d7 83       	std	Z+7, r29	; 0x07
    236c:	c6 83       	std	Z+6, r28	; 0x06
    236e:	16 87       	std	Z+14, r17	; 0x0e
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	08 95       	ret

0000237c <xStreamBufferReset>:
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	fc 01       	movw	r30, r24
    2382:	27 85       	ldd	r18, Z+15	; 0x0f
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	0f 92       	push	r0
    238a:	80 85       	ldd	r24, Z+8	; 0x08
    238c:	91 85       	ldd	r25, Z+9	; 0x09
    238e:	89 2b       	or	r24, r25
    2390:	d1 f4       	brne	.+52     	; 0x23c6 <xStreamBufferReset+0x4a>
    2392:	82 85       	ldd	r24, Z+10	; 0x0a
    2394:	93 85       	ldd	r25, Z+11	; 0x0b
    2396:	89 2b       	or	r24, r25
    2398:	c1 f4       	brne	.+48     	; 0x23ca <xStreamBufferReset+0x4e>
    239a:	86 85       	ldd	r24, Z+14	; 0x0e
    239c:	46 81       	ldd	r20, Z+6	; 0x06
    239e:	57 81       	ldd	r21, Z+7	; 0x07
    23a0:	64 81       	ldd	r22, Z+4	; 0x04
    23a2:	75 81       	ldd	r23, Z+5	; 0x05
    23a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23a8:	90 e1       	ldi	r25, 0x10	; 16
    23aa:	ef 01       	movw	r28, r30
    23ac:	19 92       	st	Y+, r1
    23ae:	9a 95       	dec	r25
    23b0:	e9 f7       	brne	.-6      	; 0x23ac <xStreamBufferReset+0x30>
    23b2:	b5 87       	std	Z+13, r27	; 0x0d
    23b4:	a4 87       	std	Z+12, r26	; 0x0c
    23b6:	75 83       	std	Z+5, r23	; 0x05
    23b8:	64 83       	std	Z+4, r22	; 0x04
    23ba:	57 83       	std	Z+7, r21	; 0x07
    23bc:	46 83       	std	Z+6, r20	; 0x06
    23be:	86 87       	std	Z+14, r24	; 0x0e
    23c0:	27 87       	std	Z+15, r18	; 0x0f
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <xStreamBufferReset+0x50>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <xStreamBufferReset+0x50>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <xStreamBufferSpacesAvailable>:
    23d6:	fc 01       	movw	r30, r24
    23d8:	24 81       	ldd	r18, Z+4	; 0x04
    23da:	35 81       	ldd	r19, Z+5	; 0x05
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	42 81       	ldd	r20, Z+2	; 0x02
    23e2:	53 81       	ldd	r21, Z+3	; 0x03
    23e4:	82 0f       	add	r24, r18
    23e6:	93 1f       	adc	r25, r19
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	84 1b       	sub	r24, r20
    23ec:	95 0b       	sbc	r25, r21
    23ee:	82 17       	cp	r24, r18
    23f0:	93 07       	cpc	r25, r19
    23f2:	10 f0       	brcs	.+4      	; 0x23f8 <xStreamBufferSpacesAvailable+0x22>
    23f4:	82 1b       	sub	r24, r18
    23f6:	93 0b       	sbc	r25, r19
    23f8:	08 95       	ret

000023fa <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    23fa:	2f 92       	push	r2
    23fc:	3f 92       	push	r3
    23fe:	4f 92       	push	r4
    2400:	5f 92       	push	r5
    2402:	6f 92       	push	r6
    2404:	7f 92       	push	r7
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	29 97       	sbiw	r28, 0x09	; 9
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	5c 01       	movw	r10, r24
    2430:	1b 01       	movw	r2, r22
    2432:	2a 01       	movw	r4, r20
    2434:	0e 83       	std	Y+6, r16	; 0x06
    2436:	1f 83       	std	Y+7, r17	; 0x07
    2438:	28 87       	std	Y+8, r18	; 0x08
    243a:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    243c:	fc 01       	movw	r30, r24
    243e:	86 85       	ldd	r24, Z+14	; 0x0e
    2440:	80 ff       	sbrs	r24, 0
    2442:	05 c0       	rjmp	.+10     	; 0x244e <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2444:	3a 01       	movw	r6, r20
    2446:	f2 e0       	ldi	r31, 0x02	; 2
    2448:	6f 0e       	add	r6, r31
    244a:	71 1c       	adc	r7, r1
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    244e:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	9f 81       	ldd	r25, Y+7	; 0x07
    2454:	a8 85       	ldd	r26, Y+8	; 0x08
    2456:	b9 85       	ldd	r27, Y+9	; 0x09
    2458:	89 2b       	or	r24, r25
    245a:	8a 2b       	or	r24, r26
    245c:	8b 2b       	or	r24, r27
    245e:	09 f4       	brne	.+2      	; 0x2462 <xStreamBufferSend+0x68>
    2460:	34 c0       	rjmp	.+104    	; 0x24ca <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2462:	ce 01       	movw	r24, r28
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	22 d6       	rcall	.+3140   	; 0x30ac <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    246e:	c5 01       	movw	r24, r10
    2470:	b2 df       	rcall	.-156    	; 0x23d6 <xStreamBufferSpacesAvailable>
    2472:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    2474:	86 15       	cp	r24, r6
    2476:	97 05       	cpc	r25, r7
    2478:	18 f5       	brcc	.+70     	; 0x24c0 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 a8 1b 	call	0x3750	; 0x3750 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2482:	94 d6       	rcall	.+3368   	; 0x31ac <xTaskGetCurrentTaskHandle>
    2484:	f5 01       	movw	r30, r10
    2486:	93 87       	std	Z+11, r25	; 0x0b
    2488:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    248a:	0f 90       	pop	r0
    248c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    248e:	ce 80       	ldd	r12, Y+6	; 0x06
    2490:	df 80       	ldd	r13, Y+7	; 0x07
    2492:	e8 84       	ldd	r14, Y+8	; 0x08
    2494:	f9 84       	ldd	r15, Y+9	; 0x09
    2496:	00 e0       	ldi	r16, 0x00	; 0
    2498:	10 e0       	ldi	r17, 0x00	; 0
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	a9 01       	movw	r20, r18
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	cb 01       	movw	r24, r22
    24a6:	c9 d7       	rcall	.+3986   	; 0x343a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    24a8:	f5 01       	movw	r30, r10
    24aa:	13 86       	std	Z+11, r1	; 0x0b
    24ac:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    24ae:	be 01       	movw	r22, r28
    24b0:	6a 5f       	subi	r22, 0xFA	; 250
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	ce 01       	movw	r24, r28
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	20 d6       	rcall	.+3136   	; 0x30fa <xTaskCheckForTimeOut>
    24ba:	88 23       	and	r24, r24
    24bc:	a9 f2       	breq	.-86     	; 0x2468 <xStreamBufferSend+0x6e>
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    24c0:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	81 14       	cp	r8, r1
    24c6:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    24c8:	19 f4       	brne	.+6      	; 0x24d0 <xStreamBufferSend+0xd6>
    24ca:	c5 01       	movw	r24, r10
    24cc:	84 df       	rcall	.-248    	; 0x23d6 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    24ce:	4c 01       	movw	r8, r24
    24d0:	83 01       	movw	r16, r6
    24d2:	94 01       	movw	r18, r8
    24d4:	a2 01       	movw	r20, r4
    24d6:	b1 01       	movw	r22, r2
    24d8:	c5 01       	movw	r24, r10
    24da:	96 de       	rcall	.-724    	; 0x2208 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    24dc:	7c 01       	movw	r14, r24
    24de:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    24e0:	e1 f0       	breq	.+56     	; 0x251a <xStreamBufferSend+0x120>
    24e2:	c5 01       	movw	r24, r10
    24e4:	35 de       	rcall	.-918    	; 0x2150 <prvBytesInBuffer>
    24e6:	f5 01       	movw	r30, r10
    24e8:	26 81       	ldd	r18, Z+6	; 0x06
    24ea:	37 81       	ldd	r19, Z+7	; 0x07
    24ec:	82 17       	cp	r24, r18
    24ee:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    24f0:	a0 f0       	brcs	.+40     	; 0x251a <xStreamBufferSend+0x120>
    24f2:	0e d3       	rcall	.+1564   	; 0x2b10 <vTaskSuspendAll>
    24f4:	f5 01       	movw	r30, r10
    24f6:	80 85       	ldd	r24, Z+8	; 0x08
    24f8:	91 85       	ldd	r25, Z+9	; 0x09
    24fa:	89 2b       	or	r24, r25
    24fc:	69 f0       	breq	.+26     	; 0x2518 <xStreamBufferSend+0x11e>
    24fe:	80 85       	ldd	r24, Z+8	; 0x08
    2500:	91 85       	ldd	r25, Z+9	; 0x09
    2502:	00 e0       	ldi	r16, 0x00	; 0
    2504:	10 e0       	ldi	r17, 0x00	; 0
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	ba 01       	movw	r22, r20
    250e:	0e 94 a7 1a 	call	0x354e	; 0x354e <xTaskGenericNotify>
    2512:	f5 01       	movw	r30, r10
    2514:	11 86       	std	Z+9, r1	; 0x09
    2516:	10 86       	std	Z+8, r1	; 0x08
    2518:	e4 d3       	rcall	.+1992   	; 0x2ce2 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    251a:	c7 01       	movw	r24, r14
    251c:	29 96       	adiw	r28, 0x09	; 9
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	bf 90       	pop	r11
    253a:	af 90       	pop	r10
    253c:	9f 90       	pop	r9
    253e:	8f 90       	pop	r8
    2540:	7f 90       	pop	r7
    2542:	6f 90       	pop	r6
    2544:	5f 90       	pop	r5
    2546:	4f 90       	pop	r4
    2548:	3f 90       	pop	r3
    254a:	2f 90       	pop	r2
    254c:	08 95       	ret

0000254e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    254e:	af 92       	push	r10
    2550:	bf 92       	push	r11
    2552:	cf 92       	push	r12
    2554:	df 92       	push	r13
    2556:	ef 92       	push	r14
    2558:	ff 92       	push	r15
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	ec 01       	movw	r28, r24
    2564:	5b 01       	movw	r10, r22
    2566:	6a 01       	movw	r12, r20
    2568:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    256a:	8e 85       	ldd	r24, Y+14	; 0x0e
    256c:	80 ff       	sbrs	r24, 0
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2570:	8a 01       	movw	r16, r20
    2572:	0e 5f       	subi	r16, 0xFE	; 254
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
    2576:	01 c0       	rjmp	.+2      	; 0x257a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2578:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    257a:	ce 01       	movw	r24, r28
    257c:	2c df       	rcall	.-424    	; 0x23d6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    257e:	9c 01       	movw	r18, r24
    2580:	a6 01       	movw	r20, r12
    2582:	b5 01       	movw	r22, r10
    2584:	ce 01       	movw	r24, r28
    2586:	40 de       	rcall	.-896    	; 0x2208 <prvWriteMessageToBuffer>
    2588:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    258a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    258c:	b9 f0       	breq	.+46     	; 0x25bc <xStreamBufferSendFromISR+0x6e>
    258e:	ce 01       	movw	r24, r28
    2590:	df dd       	rcall	.-1090   	; 0x2150 <prvBytesInBuffer>
    2592:	2e 81       	ldd	r18, Y+6	; 0x06
    2594:	3f 81       	ldd	r19, Y+7	; 0x07
    2596:	82 17       	cp	r24, r18
    2598:	93 07       	cpc	r25, r19
    259a:	80 f0       	brcs	.+32     	; 0x25bc <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    259c:	88 85       	ldd	r24, Y+8	; 0x08
    259e:	99 85       	ldd	r25, Y+9	; 0x09
    25a0:	89 2b       	or	r24, r25
    25a2:	61 f0       	breq	.+24     	; 0x25bc <xStreamBufferSendFromISR+0x6e>
    25a4:	88 85       	ldd	r24, Y+8	; 0x08
    25a6:	99 85       	ldd	r25, Y+9	; 0x09
    25a8:	00 e0       	ldi	r16, 0x00	; 0
    25aa:	10 e0       	ldi	r17, 0x00	; 0
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	ba 01       	movw	r22, r20
    25b4:	0e 94 1f 1b 	call	0x363e	; 0x363e <xTaskGenericNotifyFromISR>
    25b8:	19 86       	std	Y+9, r1	; 0x09
    25ba:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    25bc:	c6 01       	movw	r24, r12
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	df 90       	pop	r13
    25cc:	cf 90       	pop	r12
    25ce:	bf 90       	pop	r11
    25d0:	af 90       	pop	r10
    25d2:	08 95       	ret

000025d4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	1f 92       	push	r1
    25f6:	1f 92       	push	r1
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	5c 01       	movw	r10, r24
    25fe:	2b 01       	movw	r4, r22
    2600:	3a 01       	movw	r6, r20
    2602:	68 01       	movw	r12, r16
    2604:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2606:	fc 01       	movw	r30, r24
    2608:	86 85       	ldd	r24, Z+14	; 0x0e
    260a:	80 fd       	sbrc	r24, 0
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    260e:	81 2c       	mov	r8, r1
    2610:	91 2c       	mov	r9, r1
    2612:	04 c0       	rjmp	.+8      	; 0x261c <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2614:	68 94       	set
    2616:	88 24       	eor	r8, r8
    2618:	81 f8       	bld	r8, 1
    261a:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    261c:	c1 14       	cp	r12, r1
    261e:	d1 04       	cpc	r13, r1
    2620:	e1 04       	cpc	r14, r1
    2622:	f1 04       	cpc	r15, r1
    2624:	31 f1       	breq	.+76     	; 0x2672 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    262c:	c5 01       	movw	r24, r10
    262e:	90 dd       	rcall	.-1248   	; 0x2150 <prvBytesInBuffer>
    2630:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2632:	88 16       	cp	r8, r24
    2634:	99 06       	cpc	r9, r25
    2636:	40 f0       	brcs	.+16     	; 0x2648 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 a8 1b 	call	0x3750	; 0x3750 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2640:	b5 d5       	rcall	.+2922   	; 0x31ac <xTaskGetCurrentTaskHandle>
    2642:	f5 01       	movw	r30, r10
    2644:	91 87       	std	Z+9, r25	; 0x09
    2646:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    264c:	80 16       	cp	r8, r16
    264e:	91 06       	cpc	r9, r17
    2650:	b0 f0       	brcs	.+44     	; 0x267e <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2652:	00 e0       	ldi	r16, 0x00	; 0
    2654:	10 e0       	ldi	r17, 0x00	; 0
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	a9 01       	movw	r20, r18
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	cb 01       	movw	r24, r22
    2662:	eb d6       	rcall	.+3542   	; 0x343a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2664:	f5 01       	movw	r30, r10
    2666:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2668:	10 86       	std	Z+8, r1	; 0x08
    266a:	c5 01       	movw	r24, r10
    266c:	71 dd       	rcall	.-1310   	; 0x2150 <prvBytesInBuffer>
    266e:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <xStreamBufferReceive+0xa4>
    2672:	c5 01       	movw	r24, r10
    2674:	6d dd       	rcall	.-1318   	; 0x2150 <prvBytesInBuffer>
    2676:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2678:	80 16       	cp	r8, r16
    267a:	91 06       	cpc	r9, r17
    267c:	b8 f5       	brcc	.+110    	; 0x26ec <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    267e:	81 14       	cp	r8, r1
    2680:	91 04       	cpc	r9, r1
    2682:	c1 f0       	breq	.+48     	; 0x26b4 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2684:	f5 01       	movw	r30, r10
    2686:	e0 80       	ld	r14, Z
    2688:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    268a:	98 01       	movw	r18, r16
    268c:	a4 01       	movw	r20, r8
    268e:	be 01       	movw	r22, r28
    2690:	6f 5f       	subi	r22, 0xFF	; 255
    2692:	7f 4f       	sbci	r23, 0xFF	; 255
    2694:	c5 01       	movw	r24, r10
    2696:	f8 dd       	rcall	.-1040   	; 0x2288 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    269c:	08 19       	sub	r16, r8
    269e:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    26a0:	68 16       	cp	r6, r24
    26a2:	79 06       	cpc	r7, r25
    26a4:	30 f4       	brcc	.+12     	; 0x26b2 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    26a6:	f5 01       	movw	r30, r10
    26a8:	f1 82       	std	Z+1, r15	; 0x01
    26aa:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    26ac:	61 2c       	mov	r6, r1
    26ae:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    26b2:	3c 01       	movw	r6, r24
    26b4:	98 01       	movw	r18, r16
    26b6:	a3 01       	movw	r20, r6
    26b8:	b2 01       	movw	r22, r4
    26ba:	c5 01       	movw	r24, r10
    26bc:	e5 dd       	rcall	.-1078   	; 0x2288 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    26be:	7c 01       	movw	r14, r24
    26c0:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    26c2:	b1 f0       	breq	.+44     	; 0x26f0 <xStreamBufferReceive+0x11c>
    26c4:	25 d2       	rcall	.+1098   	; 0x2b10 <vTaskSuspendAll>
    26c6:	f5 01       	movw	r30, r10
    26c8:	82 85       	ldd	r24, Z+10	; 0x0a
    26ca:	93 85       	ldd	r25, Z+11	; 0x0b
    26cc:	89 2b       	or	r24, r25
    26ce:	61 f0       	breq	.+24     	; 0x26e8 <xStreamBufferReceive+0x114>
    26d0:	82 85       	ldd	r24, Z+10	; 0x0a
    26d2:	93 85       	ldd	r25, Z+11	; 0x0b
    26d4:	00 e0       	ldi	r16, 0x00	; 0
    26d6:	10 e0       	ldi	r17, 0x00	; 0
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	ba 01       	movw	r22, r20
    26e0:	36 d7       	rcall	.+3692   	; 0x354e <xTaskGenericNotify>
    26e2:	f5 01       	movw	r30, r10
    26e4:	13 86       	std	Z+11, r1	; 0x0b
    26e6:	12 86       	std	Z+10, r1	; 0x0a
    26e8:	fc d2       	rcall	.+1528   	; 0x2ce2 <xTaskResumeAll>
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    26ec:	e1 2c       	mov	r14, r1
    26ee:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    26f0:	c7 01       	movw	r24, r14
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	df 90       	pop	r13
    2704:	cf 90       	pop	r12
    2706:	bf 90       	pop	r11
    2708:	af 90       	pop	r10
    270a:	9f 90       	pop	r9
    270c:	8f 90       	pop	r8
    270e:	7f 90       	pop	r7
    2710:	6f 90       	pop	r6
    2712:	5f 90       	pop	r5
    2714:	4f 90       	pop	r4
    2716:	08 95       	ret

00002718 <prvResetNextTaskUnblockTime>:
    2718:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    271c:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2720:	80 81       	ld	r24, Z
    2722:	81 11       	cpse	r24, r1
    2724:	0c c0       	rjmp	.+24     	; 0x273e <prvResetNextTaskUnblockTime+0x26>
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	9f ef       	ldi	r25, 0xFF	; 255
    272a:	dc 01       	movw	r26, r24
    272c:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2730:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2734:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2738:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    273c:	08 95       	ret
    273e:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    2742:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2746:	07 80       	ldd	r0, Z+7	; 0x07
    2748:	f0 85       	ldd	r31, Z+8	; 0x08
    274a:	e0 2d       	mov	r30, r0
    274c:	00 84       	ldd	r0, Z+8	; 0x08
    274e:	f1 85       	ldd	r31, Z+9	; 0x09
    2750:	e0 2d       	mov	r30, r0
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	a4 81       	ldd	r26, Z+4	; 0x04
    2758:	b5 81       	ldd	r27, Z+5	; 0x05
    275a:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    275e:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2762:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2766:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    276a:	08 95       	ret

0000276c <prvAddCurrentTaskToDelayedList>:
    276c:	8f 92       	push	r8
    276e:	9f 92       	push	r9
    2770:	af 92       	push	r10
    2772:	bf 92       	push	r11
    2774:	cf 92       	push	r12
    2776:	df 92       	push	r13
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	cf 93       	push	r28
    277e:	6b 01       	movw	r12, r22
    2780:	7c 01       	movw	r14, r24
    2782:	c4 2f       	mov	r28, r20
    2784:	80 90 44 19 	lds	r8, 0x1944	; 0x801944 <xTickCount>
    2788:	90 90 45 19 	lds	r9, 0x1945	; 0x801945 <xTickCount+0x1>
    278c:	a0 90 46 19 	lds	r10, 0x1946	; 0x801946 <xTickCount+0x2>
    2790:	b0 90 47 19 	lds	r11, 0x1947	; 0x801947 <xTickCount+0x3>
    2794:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2798:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    279c:	02 96       	adiw	r24, 0x02	; 2
    279e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	c8 16       	cp	r12, r24
    27a6:	d8 06       	cpc	r13, r24
    27a8:	e8 06       	cpc	r14, r24
    27aa:	f8 06       	cpc	r15, r24
    27ac:	69 f4       	brne	.+26     	; 0x27c8 <prvAddCurrentTaskToDelayedList+0x5c>
    27ae:	cc 23       	and	r28, r28
    27b0:	59 f0       	breq	.+22     	; 0x27c8 <prvAddCurrentTaskToDelayedList+0x5c>
    27b2:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    27b6:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    27ba:	6e 5f       	subi	r22, 0xFE	; 254
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	89 e4       	ldi	r24, 0x49	; 73
    27c0:	99 e1       	ldi	r25, 0x19	; 25
    27c2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    27c6:	3f c0       	rjmp	.+126    	; 0x2846 <prvAddCurrentTaskToDelayedList+0xda>
    27c8:	c8 0c       	add	r12, r8
    27ca:	d9 1c       	adc	r13, r9
    27cc:	ea 1c       	adc	r14, r10
    27ce:	fb 1c       	adc	r15, r11
    27d0:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    27d4:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    27d8:	c2 82       	std	Z+2, r12	; 0x02
    27da:	d3 82       	std	Z+3, r13	; 0x03
    27dc:	e4 82       	std	Z+4, r14	; 0x04
    27de:	f5 82       	std	Z+5, r15	; 0x05
    27e0:	c8 14       	cp	r12, r8
    27e2:	d9 04       	cpc	r13, r9
    27e4:	ea 04       	cpc	r14, r10
    27e6:	fb 04       	cpc	r15, r11
    27e8:	68 f4       	brcc	.+26     	; 0x2804 <prvAddCurrentTaskToDelayedList+0x98>
    27ea:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    27ee:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    27f2:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <pxOverflowDelayedTaskList>
    27f6:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    27fa:	6e 5f       	subi	r22, 0xFE	; 254
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	0e 94 19 0b 	call	0x1632	; 0x1632 <vListInsert>
    2802:	21 c0       	rjmp	.+66     	; 0x2846 <prvAddCurrentTaskToDelayedList+0xda>
    2804:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2808:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    280c:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <pxDelayedTaskList>
    2810:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2814:	6e 5f       	subi	r22, 0xFE	; 254
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	0e 94 19 0b 	call	0x1632	; 0x1632 <vListInsert>
    281c:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <xNextTaskUnblockTime>
    2820:	90 91 3b 19 	lds	r25, 0x193B	; 0x80193b <xNextTaskUnblockTime+0x1>
    2824:	a0 91 3c 19 	lds	r26, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x2>
    2828:	b0 91 3d 19 	lds	r27, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x3>
    282c:	c8 16       	cp	r12, r24
    282e:	d9 06       	cpc	r13, r25
    2830:	ea 06       	cpc	r14, r26
    2832:	fb 06       	cpc	r15, r27
    2834:	40 f4       	brcc	.+16     	; 0x2846 <prvAddCurrentTaskToDelayedList+0xda>
    2836:	c0 92 3a 19 	sts	0x193A, r12	; 0x80193a <xNextTaskUnblockTime>
    283a:	d0 92 3b 19 	sts	0x193B, r13	; 0x80193b <xNextTaskUnblockTime+0x1>
    283e:	e0 92 3c 19 	sts	0x193C, r14	; 0x80193c <xNextTaskUnblockTime+0x2>
    2842:	f0 92 3d 19 	sts	0x193D, r15	; 0x80193d <xNextTaskUnblockTime+0x3>
    2846:	cf 91       	pop	r28
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	08 95       	ret

0000285a <xTaskCreate>:
    285a:	4f 92       	push	r4
    285c:	5f 92       	push	r5
    285e:	6f 92       	push	r6
    2860:	7f 92       	push	r7
    2862:	8f 92       	push	r8
    2864:	9f 92       	push	r9
    2866:	af 92       	push	r10
    2868:	bf 92       	push	r11
    286a:	cf 92       	push	r12
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	4c 01       	movw	r8, r24
    287a:	6b 01       	movw	r12, r22
    287c:	5a 01       	movw	r10, r20
    287e:	29 01       	movw	r4, r18
    2880:	ca 01       	movw	r24, r20
    2882:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <pvPortMalloc>
    2886:	3c 01       	movw	r6, r24
    2888:	89 2b       	or	r24, r25
    288a:	09 f4       	brne	.+2      	; 0x288e <xTaskCreate+0x34>
    288c:	f4 c0       	rjmp	.+488    	; 0x2a76 <xTaskCreate+0x21c>
    288e:	80 e3       	ldi	r24, 0x30	; 48
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <pvPortMalloc>
    2896:	ec 01       	movw	r28, r24
    2898:	89 2b       	or	r24, r25
    289a:	99 f0       	breq	.+38     	; 0x28c2 <xTaskCreate+0x68>
    289c:	7c 8e       	std	Y+28, r7	; 0x1c
    289e:	6b 8e       	std	Y+27, r6	; 0x1b
    28a0:	a5 01       	movw	r20, r10
    28a2:	65 ea       	ldi	r22, 0xA5	; 165
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	c3 01       	movw	r24, r6
    28a8:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <memset>
    28ac:	21 e0       	ldi	r18, 0x01	; 1
    28ae:	a2 1a       	sub	r10, r18
    28b0:	b1 08       	sbc	r11, r1
    28b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b6:	a8 0e       	add	r10, r24
    28b8:	b9 1e       	adc	r11, r25
    28ba:	c1 14       	cp	r12, r1
    28bc:	d1 04       	cpc	r13, r1
    28be:	29 f4       	brne	.+10     	; 0x28ca <xTaskCreate+0x70>
    28c0:	20 c0       	rjmp	.+64     	; 0x2902 <xTaskCreate+0xa8>
    28c2:	c3 01       	movw	r24, r6
    28c4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <vPortFree>
    28c8:	d6 c0       	rjmp	.+428    	; 0x2a76 <xTaskCreate+0x21c>
    28ca:	d6 01       	movw	r26, r12
    28cc:	8c 91       	ld	r24, X
    28ce:	8d 8f       	std	Y+29, r24	; 0x1d
    28d0:	8c 91       	ld	r24, X
    28d2:	88 23       	and	r24, r24
    28d4:	a1 f0       	breq	.+40     	; 0x28fe <xTaskCreate+0xa4>
    28d6:	ae 01       	movw	r20, r28
    28d8:	42 5e       	subi	r20, 0xE2	; 226
    28da:	5f 4f       	sbci	r21, 0xFF	; 255
    28dc:	f6 01       	movw	r30, r12
    28de:	31 96       	adiw	r30, 0x01	; 1
    28e0:	b8 e0       	ldi	r27, 0x08	; 8
    28e2:	cb 0e       	add	r12, r27
    28e4:	d1 1c       	adc	r13, r1
    28e6:	cf 01       	movw	r24, r30
    28e8:	21 91       	ld	r18, Z+
    28ea:	da 01       	movw	r26, r20
    28ec:	2d 93       	st	X+, r18
    28ee:	ad 01       	movw	r20, r26
    28f0:	dc 01       	movw	r26, r24
    28f2:	8c 91       	ld	r24, X
    28f4:	88 23       	and	r24, r24
    28f6:	19 f0       	breq	.+6      	; 0x28fe <xTaskCreate+0xa4>
    28f8:	ec 15       	cp	r30, r12
    28fa:	fd 05       	cpc	r31, r13
    28fc:	a1 f7       	brne	.-24     	; 0x28e6 <xTaskCreate+0x8c>
    28fe:	1c a2       	std	Y+36, r1	; 0x24
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <xTaskCreate+0xaa>
    2902:	1d 8e       	std	Y+29, r1	; 0x1d
    2904:	04 30       	cpi	r16, 0x04	; 4
    2906:	08 f0       	brcs	.+2      	; 0x290a <xTaskCreate+0xb0>
    2908:	03 e0       	ldi	r16, 0x03	; 3
    290a:	0a 8f       	std	Y+26, r16	; 0x1a
    290c:	0f a3       	std	Y+39, r16	; 0x27
    290e:	18 a6       	std	Y+40, r1	; 0x28
    2910:	6e 01       	movw	r12, r28
    2912:	b2 e0       	ldi	r27, 0x02	; 2
    2914:	cb 0e       	add	r12, r27
    2916:	d1 1c       	adc	r13, r1
    2918:	c6 01       	movw	r24, r12
    291a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <vListInitialiseItem>
    291e:	ce 01       	movw	r24, r28
    2920:	0e 96       	adiw	r24, 0x0e	; 14
    2922:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <vListInitialiseItem>
    2926:	db 87       	std	Y+11, r29	; 0x0b
    2928:	ca 87       	std	Y+10, r28	; 0x0a
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a0 e0       	ldi	r26, 0x00	; 0
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	80 1b       	sub	r24, r16
    2934:	91 09       	sbc	r25, r1
    2936:	a1 09       	sbc	r26, r1
    2938:	b1 09       	sbc	r27, r1
    293a:	8e 87       	std	Y+14, r24	; 0x0e
    293c:	9f 87       	std	Y+15, r25	; 0x0f
    293e:	a8 8b       	std	Y+16, r26	; 0x10
    2940:	b9 8b       	std	Y+17, r27	; 0x11
    2942:	df 8b       	std	Y+23, r29	; 0x17
    2944:	ce 8b       	std	Y+22, r28	; 0x16
    2946:	1a a6       	std	Y+42, r1	; 0x2a
    2948:	19 a6       	std	Y+41, r1	; 0x29
    294a:	1b a6       	std	Y+43, r1	; 0x2b
    294c:	1c a6       	std	Y+44, r1	; 0x2c
    294e:	1d a6       	std	Y+45, r1	; 0x2d
    2950:	1e a6       	std	Y+46, r1	; 0x2e
    2952:	1f a6       	std	Y+47, r1	; 0x2f
    2954:	a2 01       	movw	r20, r4
    2956:	b4 01       	movw	r22, r8
    2958:	c5 01       	movw	r24, r10
    295a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <pxPortInitialiseStack>
    295e:	99 83       	std	Y+1, r25	; 0x01
    2960:	88 83       	st	Y, r24
    2962:	e1 14       	cp	r14, r1
    2964:	f1 04       	cpc	r15, r1
    2966:	19 f0       	breq	.+6      	; 0x296e <xTaskCreate+0x114>
    2968:	f7 01       	movw	r30, r14
    296a:	d1 83       	std	Z+1, r29	; 0x01
    296c:	c0 83       	st	Z, r28
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	0f 92       	push	r0
    2974:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
    2978:	8f 5f       	subi	r24, 0xFF	; 255
    297a:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <uxCurrentNumberOfTasks>
    297e:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2982:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2986:	89 2b       	or	r24, r25
    2988:	d1 f5       	brne	.+116    	; 0x29fe <xTaskCreate+0x1a4>
    298a:	d0 93 b2 19 	sts	0x19B2, r29	; 0x8019b2 <pxCurrentTCB+0x1>
    298e:	c0 93 b1 19 	sts	0x19B1, r28	; 0x8019b1 <pxCurrentTCB>
    2992:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	09 f0       	breq	.+2      	; 0x299c <xTaskCreate+0x142>
    299a:	41 c0       	rjmp	.+130    	; 0x2a1e <xTaskCreate+0x1c4>
    299c:	85 e8       	ldi	r24, 0x85	; 133
    299e:	99 e1       	ldi	r25, 0x19	; 25
    29a0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29a4:	80 e9       	ldi	r24, 0x90	; 144
    29a6:	99 e1       	ldi	r25, 0x19	; 25
    29a8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29ac:	8b e9       	ldi	r24, 0x9B	; 155
    29ae:	99 e1       	ldi	r25, 0x19	; 25
    29b0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29b4:	86 ea       	ldi	r24, 0xA6	; 166
    29b6:	99 e1       	ldi	r25, 0x19	; 25
    29b8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29bc:	8a e7       	ldi	r24, 0x7A	; 122
    29be:	99 e1       	ldi	r25, 0x19	; 25
    29c0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29c4:	8f e6       	ldi	r24, 0x6F	; 111
    29c6:	99 e1       	ldi	r25, 0x19	; 25
    29c8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29cc:	80 e6       	ldi	r24, 0x60	; 96
    29ce:	99 e1       	ldi	r25, 0x19	; 25
    29d0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29d4:	85 e5       	ldi	r24, 0x55	; 85
    29d6:	99 e1       	ldi	r25, 0x19	; 25
    29d8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29dc:	89 e4       	ldi	r24, 0x49	; 73
    29de:	99 e1       	ldi	r25, 0x19	; 25
    29e0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    29e4:	8a e7       	ldi	r24, 0x7A	; 122
    29e6:	99 e1       	ldi	r25, 0x19	; 25
    29e8:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <pxDelayedTaskList+0x1>
    29ec:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <pxDelayedTaskList>
    29f0:	8f e6       	ldi	r24, 0x6F	; 111
    29f2:	99 e1       	ldi	r25, 0x19	; 25
    29f4:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    29f8:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <pxOverflowDelayedTaskList>
    29fc:	10 c0       	rjmp	.+32     	; 0x2a1e <xTaskCreate+0x1c4>
    29fe:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <xSchedulerRunning>
    2a02:	81 11       	cpse	r24, r1
    2a04:	0c c0       	rjmp	.+24     	; 0x2a1e <xTaskCreate+0x1c4>
    2a06:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2a0a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2a0e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a10:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a12:	89 17       	cp	r24, r25
    2a14:	20 f0       	brcs	.+8      	; 0x2a1e <xTaskCreate+0x1c4>
    2a16:	d0 93 b2 19 	sts	0x19B2, r29	; 0x8019b2 <pxCurrentTCB+0x1>
    2a1a:	c0 93 b1 19 	sts	0x19B1, r28	; 0x8019b1 <pxCurrentTCB>
    2a1e:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <uxTaskNumber>
    2a22:	8f 5f       	subi	r24, 0xFF	; 255
    2a24:	80 93 3e 19 	sts	0x193E, r24	; 0x80193e <uxTaskNumber>
    2a28:	8d a3       	std	Y+37, r24	; 0x25
    2a2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a2c:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2a30:	98 17       	cp	r25, r24
    2a32:	10 f4       	brcc	.+4      	; 0x2a38 <xTaskCreate+0x1de>
    2a34:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2a38:	fb e0       	ldi	r31, 0x0B	; 11
    2a3a:	8f 9f       	mul	r24, r31
    2a3c:	c0 01       	movw	r24, r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	b6 01       	movw	r22, r12
    2a42:	8b 57       	subi	r24, 0x7B	; 123
    2a44:	96 4e       	sbci	r25, 0xE6	; 230
    2a46:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    2a4a:	0f 90       	pop	r0
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <xSchedulerRunning>
    2a52:	88 23       	and	r24, r24
    2a54:	61 f0       	breq	.+24     	; 0x2a6e <xTaskCreate+0x214>
    2a56:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2a5a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2a5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a62:	98 17       	cp	r25, r24
    2a64:	30 f4       	brcc	.+12     	; 0x2a72 <xTaskCreate+0x218>
    2a66:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <xTaskCreate+0x21e>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <xTaskCreate+0x21e>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <xTaskCreate+0x21e>
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	0f 91       	pop	r16
    2a7e:	ff 90       	pop	r15
    2a80:	ef 90       	pop	r14
    2a82:	df 90       	pop	r13
    2a84:	cf 90       	pop	r12
    2a86:	bf 90       	pop	r11
    2a88:	af 90       	pop	r10
    2a8a:	9f 90       	pop	r9
    2a8c:	8f 90       	pop	r8
    2a8e:	7f 90       	pop	r7
    2a90:	6f 90       	pop	r6
    2a92:	5f 90       	pop	r5
    2a94:	4f 90       	pop	r4
    2a96:	08 95       	ret

00002a98 <vTaskStartScheduler>:
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	0f 2e       	mov	r0, r31
    2aa0:	f8 e3       	ldi	r31, 0x38	; 56
    2aa2:	ef 2e       	mov	r14, r31
    2aa4:	f9 e1       	ldi	r31, 0x19	; 25
    2aa6:	ff 2e       	mov	r15, r31
    2aa8:	f0 2d       	mov	r31, r0
    2aaa:	00 e0       	ldi	r16, 0x00	; 0
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 ec       	ldi	r20, 0xC0	; 192
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	60 e9       	ldi	r22, 0x90	; 144
    2ab6:	75 e0       	ldi	r23, 0x05	; 5
    2ab8:	8d ec       	ldi	r24, 0xCD	; 205
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	ce de       	rcall	.-612    	; 0x285a <xTaskCreate>
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	19 f5       	brne	.+70     	; 0x2b08 <vTaskStartScheduler+0x70>
    2ac2:	cc d6       	rcall	.+3480   	; 0x385c <xTimerCreateTimerTask>
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	01 f5       	brne	.+64     	; 0x2b08 <vTaskStartScheduler+0x70>
    2ac8:	f8 94       	cli
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	9f ef       	ldi	r25, 0xFF	; 255
    2ace:	dc 01       	movw	r26, r24
    2ad0:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2ad4:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2ad8:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2adc:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <xSchedulerRunning>
    2ae6:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <xTickCount>
    2aea:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <xTickCount+0x1>
    2aee:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <xTickCount+0x2>
    2af2:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <xTickCount+0x3>
    2af6:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2afa:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2afe:	81 a5       	ldd	r24, Z+41	; 0x29
    2b00:	0e 94 30 08 	call	0x1060	; 0x1060 <task_switch_in>
    2b04:	0e 94 ef 0b 	call	0x17de	; 0x17de <xPortStartScheduler>
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	08 95       	ret

00002b10 <vTaskSuspendAll>:
    2b10:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	80 93 37 19 	sts	0x1937, r24	; 0x801937 <uxSchedulerSuspended>
    2b1a:	08 95       	ret

00002b1c <xTaskGetTickCount>:
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	0f 92       	push	r0
    2b22:	60 91 44 19 	lds	r22, 0x1944	; 0x801944 <xTickCount>
    2b26:	70 91 45 19 	lds	r23, 0x1945	; 0x801945 <xTickCount+0x1>
    2b2a:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <xTickCount+0x2>
    2b2e:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <xTickCount+0x3>
    2b32:	0f 90       	pop	r0
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	08 95       	ret

00002b38 <xTaskIncrementTick>:
    2b38:	9f 92       	push	r9
    2b3a:	af 92       	push	r10
    2b3c:	bf 92       	push	r11
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2b52:	81 11       	cpse	r24, r1
    2b54:	ad c0       	rjmp	.+346    	; 0x2cb0 <xTaskIncrementTick+0x178>
    2b56:	c0 90 44 19 	lds	r12, 0x1944	; 0x801944 <xTickCount>
    2b5a:	d0 90 45 19 	lds	r13, 0x1945	; 0x801945 <xTickCount+0x1>
    2b5e:	e0 90 46 19 	lds	r14, 0x1946	; 0x801946 <xTickCount+0x2>
    2b62:	f0 90 47 19 	lds	r15, 0x1947	; 0x801947 <xTickCount+0x3>
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	c8 1a       	sub	r12, r24
    2b6a:	d8 0a       	sbc	r13, r24
    2b6c:	e8 0a       	sbc	r14, r24
    2b6e:	f8 0a       	sbc	r15, r24
    2b70:	c0 92 44 19 	sts	0x1944, r12	; 0x801944 <xTickCount>
    2b74:	d0 92 45 19 	sts	0x1945, r13	; 0x801945 <xTickCount+0x1>
    2b78:	e0 92 46 19 	sts	0x1946, r14	; 0x801946 <xTickCount+0x2>
    2b7c:	f0 92 47 19 	sts	0x1947, r15	; 0x801947 <xTickCount+0x3>
    2b80:	c1 14       	cp	r12, r1
    2b82:	d1 04       	cpc	r13, r1
    2b84:	e1 04       	cpc	r14, r1
    2b86:	f1 04       	cpc	r15, r1
    2b88:	b1 f4       	brne	.+44     	; 0x2bb6 <xTaskIncrementTick+0x7e>
    2b8a:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <pxDelayedTaskList>
    2b8e:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2b92:	20 91 6b 19 	lds	r18, 0x196B	; 0x80196b <pxOverflowDelayedTaskList>
    2b96:	30 91 6c 19 	lds	r19, 0x196C	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    2b9a:	30 93 6e 19 	sts	0x196E, r19	; 0x80196e <pxDelayedTaskList+0x1>
    2b9e:	20 93 6d 19 	sts	0x196D, r18	; 0x80196d <pxDelayedTaskList>
    2ba2:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <pxOverflowDelayedTaskList+0x1>
    2ba6:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <pxOverflowDelayedTaskList>
    2baa:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <xNumOfOverflows>
    2bae:	8f 5f       	subi	r24, 0xFF	; 255
    2bb0:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <xNumOfOverflows>
    2bb4:	b1 dd       	rcall	.-1182   	; 0x2718 <prvResetNextTaskUnblockTime>
    2bb6:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <xNextTaskUnblockTime>
    2bba:	90 91 3b 19 	lds	r25, 0x193B	; 0x80193b <xNextTaskUnblockTime+0x1>
    2bbe:	a0 91 3c 19 	lds	r26, 0x193C	; 0x80193c <xNextTaskUnblockTime+0x2>
    2bc2:	b0 91 3d 19 	lds	r27, 0x193D	; 0x80193d <xNextTaskUnblockTime+0x3>
    2bc6:	c8 16       	cp	r12, r24
    2bc8:	d9 06       	cpc	r13, r25
    2bca:	ea 06       	cpc	r14, r26
    2bcc:	fb 06       	cpc	r15, r27
    2bce:	10 f4       	brcc	.+4      	; 0x2bd4 <xTaskIncrementTick+0x9c>
    2bd0:	b1 2c       	mov	r11, r1
    2bd2:	5d c0       	rjmp	.+186    	; 0x2c8e <xTaskIncrementTick+0x156>
    2bd4:	b1 2c       	mov	r11, r1
    2bd6:	0f 2e       	mov	r0, r31
    2bd8:	fb e0       	ldi	r31, 0x0B	; 11
    2bda:	af 2e       	mov	r10, r31
    2bdc:	f0 2d       	mov	r31, r0
    2bde:	99 24       	eor	r9, r9
    2be0:	93 94       	inc	r9
    2be2:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    2be6:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2bea:	80 81       	ld	r24, Z
    2bec:	81 11       	cpse	r24, r1
    2bee:	0c c0       	rjmp	.+24     	; 0x2c08 <xTaskIncrementTick+0xd0>
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	9f ef       	ldi	r25, 0xFF	; 255
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2bfa:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2bfe:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2c02:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2c06:	43 c0       	rjmp	.+134    	; 0x2c8e <xTaskIncrementTick+0x156>
    2c08:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <pxDelayedTaskList>
    2c0c:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <pxDelayedTaskList+0x1>
    2c10:	07 80       	ldd	r0, Z+7	; 0x07
    2c12:	f0 85       	ldd	r31, Z+8	; 0x08
    2c14:	e0 2d       	mov	r30, r0
    2c16:	c0 85       	ldd	r28, Z+8	; 0x08
    2c18:	d1 85       	ldd	r29, Z+9	; 0x09
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	ac 81       	ldd	r26, Y+4	; 0x04
    2c20:	bd 81       	ldd	r27, Y+5	; 0x05
    2c22:	c8 16       	cp	r12, r24
    2c24:	d9 06       	cpc	r13, r25
    2c26:	ea 06       	cpc	r14, r26
    2c28:	fb 06       	cpc	r15, r27
    2c2a:	48 f4       	brcc	.+18     	; 0x2c3e <xTaskIncrementTick+0x106>
    2c2c:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <xNextTaskUnblockTime>
    2c30:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <xNextTaskUnblockTime+0x1>
    2c34:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <xNextTaskUnblockTime+0x2>
    2c38:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <xNextTaskUnblockTime+0x3>
    2c3c:	28 c0       	rjmp	.+80     	; 0x2c8e <xTaskIncrementTick+0x156>
    2c3e:	8e 01       	movw	r16, r28
    2c40:	0e 5f       	subi	r16, 0xFE	; 254
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	c8 01       	movw	r24, r16
    2c46:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    2c4a:	88 8d       	ldd	r24, Y+24	; 0x18
    2c4c:	99 8d       	ldd	r25, Y+25	; 0x19
    2c4e:	89 2b       	or	r24, r25
    2c50:	21 f0       	breq	.+8      	; 0x2c5a <xTaskIncrementTick+0x122>
    2c52:	ce 01       	movw	r24, r28
    2c54:	0e 96       	adiw	r24, 0x0e	; 14
    2c56:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    2c5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c5c:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2c60:	98 17       	cp	r25, r24
    2c62:	10 f4       	brcc	.+4      	; 0x2c68 <xTaskIncrementTick+0x130>
    2c64:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2c68:	a8 9e       	mul	r10, r24
    2c6a:	c0 01       	movw	r24, r0
    2c6c:	11 24       	eor	r1, r1
    2c6e:	b8 01       	movw	r22, r16
    2c70:	8b 57       	subi	r24, 0x7B	; 123
    2c72:	96 4e       	sbci	r25, 0xE6	; 230
    2c74:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    2c78:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2c7c:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2c80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c84:	98 17       	cp	r25, r24
    2c86:	08 f4       	brcc	.+2      	; 0x2c8a <xTaskIncrementTick+0x152>
    2c88:	ac cf       	rjmp	.-168    	; 0x2be2 <xTaskIncrementTick+0xaa>
    2c8a:	b9 2c       	mov	r11, r9
    2c8c:	aa cf       	rjmp	.-172    	; 0x2be2 <xTaskIncrementTick+0xaa>
    2c8e:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2c92:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2c96:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c98:	8b e0       	ldi	r24, 0x0B	; 11
    2c9a:	e8 9f       	mul	r30, r24
    2c9c:	f0 01       	movw	r30, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	eb 57       	subi	r30, 0x7B	; 123
    2ca2:	f6 4e       	sbci	r31, 0xE6	; 230
    2ca4:	80 81       	ld	r24, Z
    2ca6:	82 30       	cpi	r24, 0x02	; 2
    2ca8:	48 f0       	brcs	.+18     	; 0x2cbc <xTaskIncrementTick+0x184>
    2caa:	bb 24       	eor	r11, r11
    2cac:	b3 94       	inc	r11
    2cae:	06 c0       	rjmp	.+12     	; 0x2cbc <xTaskIncrementTick+0x184>
    2cb0:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <uxPendedTicks>
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <uxPendedTicks>
    2cba:	b1 2c       	mov	r11, r1
    2cbc:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <xYieldPending>
    2cc0:	88 23       	and	r24, r24
    2cc2:	11 f0       	breq	.+4      	; 0x2cc8 <xTaskIncrementTick+0x190>
    2cc4:	bb 24       	eor	r11, r11
    2cc6:	b3 94       	inc	r11
    2cc8:	8b 2d       	mov	r24, r11
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	9f 90       	pop	r9
    2ce0:	08 95       	ret

00002ce2 <xTaskResumeAll>:
    2ce2:	cf 92       	push	r12
    2ce4:	df 92       	push	r13
    2ce6:	ef 92       	push	r14
    2ce8:	ff 92       	push	r15
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	0f 92       	push	r0
    2cf8:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2cfc:	81 50       	subi	r24, 0x01	; 1
    2cfe:	80 93 37 19 	sts	0x1937, r24	; 0x801937 <uxSchedulerSuspended>
    2d02:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2d06:	81 11       	cpse	r24, r1
    2d08:	5a c0       	rjmp	.+180    	; 0x2dbe <xTaskResumeAll+0xdc>
    2d0a:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <uxCurrentNumberOfTasks>
    2d0e:	81 11       	cpse	r24, r1
    2d10:	2c c0       	rjmp	.+88     	; 0x2d6a <xTaskResumeAll+0x88>
    2d12:	58 c0       	rjmp	.+176    	; 0x2dc4 <xTaskResumeAll+0xe2>
    2d14:	d7 01       	movw	r26, r14
    2d16:	17 96       	adiw	r26, 0x07	; 7
    2d18:	ed 91       	ld	r30, X+
    2d1a:	fc 91       	ld	r31, X
    2d1c:	18 97       	sbiw	r26, 0x08	; 8
    2d1e:	c0 85       	ldd	r28, Z+8	; 0x08
    2d20:	d1 85       	ldd	r29, Z+9	; 0x09
    2d22:	ce 01       	movw	r24, r28
    2d24:	0e 96       	adiw	r24, 0x0e	; 14
    2d26:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    2d2a:	8e 01       	movw	r16, r28
    2d2c:	0e 5f       	subi	r16, 0xFE	; 254
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	c8 01       	movw	r24, r16
    2d32:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    2d36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d38:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2d3c:	98 17       	cp	r25, r24
    2d3e:	10 f4       	brcc	.+4      	; 0x2d44 <xTaskResumeAll+0x62>
    2d40:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2d44:	d8 9e       	mul	r13, r24
    2d46:	c0 01       	movw	r24, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	b8 01       	movw	r22, r16
    2d4c:	8b 57       	subi	r24, 0x7B	; 123
    2d4e:	96 4e       	sbci	r25, 0xE6	; 230
    2d50:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    2d54:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2d58:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2d5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d60:	98 17       	cp	r25, r24
    2d62:	88 f0       	brcs	.+34     	; 0x2d86 <xTaskResumeAll+0xa4>
    2d64:	c0 92 40 19 	sts	0x1940, r12	; 0x801940 <xYieldPending>
    2d68:	0e c0       	rjmp	.+28     	; 0x2d86 <xTaskResumeAll+0xa4>
    2d6a:	c0 e0       	ldi	r28, 0x00	; 0
    2d6c:	d0 e0       	ldi	r29, 0x00	; 0
    2d6e:	0f 2e       	mov	r0, r31
    2d70:	f0 e6       	ldi	r31, 0x60	; 96
    2d72:	ef 2e       	mov	r14, r31
    2d74:	f9 e1       	ldi	r31, 0x19	; 25
    2d76:	ff 2e       	mov	r15, r31
    2d78:	f0 2d       	mov	r31, r0
    2d7a:	0f 2e       	mov	r0, r31
    2d7c:	fb e0       	ldi	r31, 0x0B	; 11
    2d7e:	df 2e       	mov	r13, r31
    2d80:	f0 2d       	mov	r31, r0
    2d82:	cc 24       	eor	r12, r12
    2d84:	c3 94       	inc	r12
    2d86:	f7 01       	movw	r30, r14
    2d88:	80 81       	ld	r24, Z
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	c3 cf       	rjmp	.-122    	; 0x2d14 <xTaskResumeAll+0x32>
    2d8e:	cd 2b       	or	r28, r29
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <xTaskResumeAll+0xb2>
    2d92:	c2 dc       	rcall	.-1660   	; 0x2718 <prvResetNextTaskUnblockTime>
    2d94:	c0 91 41 19 	lds	r28, 0x1941	; 0x801941 <uxPendedTicks>
    2d98:	cc 23       	and	r28, r28
    2d9a:	49 f0       	breq	.+18     	; 0x2dae <xTaskResumeAll+0xcc>
    2d9c:	d1 e0       	ldi	r29, 0x01	; 1
    2d9e:	cc de       	rcall	.-616    	; 0x2b38 <xTaskIncrementTick>
    2da0:	81 11       	cpse	r24, r1
    2da2:	d0 93 40 19 	sts	0x1940, r29	; 0x801940 <xYieldPending>
    2da6:	c1 50       	subi	r28, 0x01	; 1
    2da8:	d1 f7       	brne	.-12     	; 0x2d9e <xTaskResumeAll+0xbc>
    2daa:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <uxPendedTicks>
    2dae:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <xYieldPending>
    2db2:	88 23       	and	r24, r24
    2db4:	31 f0       	breq	.+12     	; 0x2dc2 <xTaskResumeAll+0xe0>
    2db6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <xTaskResumeAll+0xe2>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	01 c0       	rjmp	.+2      	; 0x2dc4 <xTaskResumeAll+0xe2>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
    2dd8:	08 95       	ret

00002dda <vTaskDelay>:
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	6b 01       	movw	r12, r22
    2de4:	7c 01       	movw	r14, r24
    2de6:	67 2b       	or	r22, r23
    2de8:	68 2b       	or	r22, r24
    2dea:	69 2b       	or	r22, r25
    2dec:	41 f0       	breq	.+16     	; 0x2dfe <vTaskDelay+0x24>
    2dee:	90 de       	rcall	.-736    	; 0x2b10 <vTaskSuspendAll>
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	c7 01       	movw	r24, r14
    2df4:	b6 01       	movw	r22, r12
    2df6:	ba dc       	rcall	.-1676   	; 0x276c <prvAddCurrentTaskToDelayedList>
    2df8:	74 df       	rcall	.-280    	; 0x2ce2 <xTaskResumeAll>
    2dfa:	81 11       	cpse	r24, r1
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <vTaskDelay+0x28>
    2dfe:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
    2e02:	ff 90       	pop	r15
    2e04:	ef 90       	pop	r14
    2e06:	df 90       	pop	r13
    2e08:	cf 90       	pop	r12
    2e0a:	08 95       	ret

00002e0c <vTaskSwitchContext>:
    2e0c:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2e10:	88 23       	and	r24, r24
    2e12:	21 f0       	breq	.+8      	; 0x2e1c <vTaskSwitchContext+0x10>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    2e1a:	08 95       	ret
    2e1c:	10 92 40 19 	sts	0x1940, r1	; 0x801940 <xYieldPending>
    2e20:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2e24:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2e28:	81 a5       	ldd	r24, Z+41	; 0x29
    2e2a:	0e 94 3a 08 	call	0x1074	; 0x1074 <task_switch_out>
    2e2e:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2e32:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2e36:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2e3a:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2e3e:	2d 91       	ld	r18, X+
    2e40:	3c 91       	ld	r19, X
    2e42:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e44:	94 8d       	ldd	r25, Z+28	; 0x1c
    2e46:	82 17       	cp	r24, r18
    2e48:	93 07       	cpc	r25, r19
    2e4a:	58 f0       	brcs	.+22     	; 0x2e62 <vTaskSwitchContext+0x56>
    2e4c:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2e50:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2e54:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2e58:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2e5c:	63 5e       	subi	r22, 0xE3	; 227
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	20 d6       	rcall	.+3136   	; 0x3aa2 <vApplicationStackOverflowHook>
    2e62:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <uxTopReadyPriority>
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	9b e0       	ldi	r25, 0x0B	; 11
    2e6c:	89 9f       	mul	r24, r25
    2e6e:	f0 01       	movw	r30, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	eb 57       	subi	r30, 0x7B	; 123
    2e74:	f6 4e       	sbci	r31, 0xE6	; 230
    2e76:	90 81       	ld	r25, Z
    2e78:	91 11       	cpse	r25, r1
    2e7a:	0e c0       	rjmp	.+28     	; 0x2e98 <vTaskSwitchContext+0x8c>
    2e7c:	4b e0       	ldi	r20, 0x0B	; 11
    2e7e:	81 50       	subi	r24, 0x01	; 1
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	42 9f       	mul	r20, r18
    2e86:	f0 01       	movw	r30, r0
    2e88:	43 9f       	mul	r20, r19
    2e8a:	f0 0d       	add	r31, r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	eb 57       	subi	r30, 0x7B	; 123
    2e90:	f6 4e       	sbci	r31, 0xE6	; 230
    2e92:	90 81       	ld	r25, Z
    2e94:	99 23       	and	r25, r25
    2e96:	99 f3       	breq	.-26     	; 0x2e7e <vTaskSwitchContext+0x72>
    2e98:	9b e0       	ldi	r25, 0x0B	; 11
    2e9a:	92 9f       	mul	r25, r18
    2e9c:	a0 01       	movw	r20, r0
    2e9e:	93 9f       	mul	r25, r19
    2ea0:	50 0d       	add	r21, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	da 01       	movw	r26, r20
    2ea6:	ab 57       	subi	r26, 0x7B	; 123
    2ea8:	b6 4e       	sbci	r27, 0xE6	; 230
    2eaa:	11 96       	adiw	r26, 0x01	; 1
    2eac:	ed 91       	ld	r30, X+
    2eae:	fc 91       	ld	r31, X
    2eb0:	12 97       	sbiw	r26, 0x02	; 2
    2eb2:	04 80       	ldd	r0, Z+4	; 0x04
    2eb4:	f5 81       	ldd	r31, Z+5	; 0x05
    2eb6:	e0 2d       	mov	r30, r0
    2eb8:	12 96       	adiw	r26, 0x02	; 2
    2eba:	fc 93       	st	X, r31
    2ebc:	ee 93       	st	-X, r30
    2ebe:	11 97       	sbiw	r26, 0x01	; 1
    2ec0:	48 57       	subi	r20, 0x78	; 120
    2ec2:	56 4e       	sbci	r21, 0xE6	; 230
    2ec4:	e4 17       	cp	r30, r20
    2ec6:	f5 07       	cpc	r31, r21
    2ec8:	29 f4       	brne	.+10     	; 0x2ed4 <vTaskSwitchContext+0xc8>
    2eca:	44 81       	ldd	r20, Z+4	; 0x04
    2ecc:	55 81       	ldd	r21, Z+5	; 0x05
    2ece:	fd 01       	movw	r30, r26
    2ed0:	52 83       	std	Z+2, r21	; 0x02
    2ed2:	41 83       	std	Z+1, r20	; 0x01
    2ed4:	9b e0       	ldi	r25, 0x0B	; 11
    2ed6:	92 9f       	mul	r25, r18
    2ed8:	f0 01       	movw	r30, r0
    2eda:	93 9f       	mul	r25, r19
    2edc:	f0 0d       	add	r31, r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	eb 57       	subi	r30, 0x7B	; 123
    2ee2:	f6 4e       	sbci	r31, 0xE6	; 230
    2ee4:	01 80       	ldd	r0, Z+1	; 0x01
    2ee6:	f2 81       	ldd	r31, Z+2	; 0x02
    2ee8:	e0 2d       	mov	r30, r0
    2eea:	20 85       	ldd	r18, Z+8	; 0x08
    2eec:	31 85       	ldd	r19, Z+9	; 0x09
    2eee:	30 93 b2 19 	sts	0x19B2, r19	; 0x8019b2 <pxCurrentTCB+0x1>
    2ef2:	20 93 b1 19 	sts	0x19B1, r18	; 0x8019b1 <pxCurrentTCB>
    2ef6:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    2efa:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2efe:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2f02:	81 a5       	ldd	r24, Z+41	; 0x29
    2f04:	0c 94 30 08 	jmp	0x1060	; 0x1060 <task_switch_in>
    2f08:	08 95       	ret

00002f0a <vTaskPlaceOnEventList>:
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
    2f10:	ff 92       	push	r15
    2f12:	6a 01       	movw	r12, r20
    2f14:	7b 01       	movw	r14, r22
    2f16:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2f1a:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2f1e:	62 5f       	subi	r22, 0xF2	; 242
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255
    2f22:	0e 94 19 0b 	call	0x1632	; 0x1632 <vListInsert>
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	c7 01       	movw	r24, r14
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	1f dc       	rcall	.-1986   	; 0x276c <prvAddCurrentTaskToDelayedList>
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	08 95       	ret

00002f38 <vTaskPlaceOnUnorderedEventList>:
    2f38:	cf 92       	push	r12
    2f3a:	df 92       	push	r13
    2f3c:	ef 92       	push	r14
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	68 01       	movw	r12, r16
    2f46:	79 01       	movw	r14, r18
    2f48:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2f4c:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2f50:	70 68       	ori	r23, 0x80	; 128
    2f52:	46 87       	std	Z+14, r20	; 0x0e
    2f54:	57 87       	std	Z+15, r21	; 0x0f
    2f56:	60 8b       	std	Z+16, r22	; 0x10
    2f58:	71 8b       	std	Z+17, r23	; 0x11
    2f5a:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2f5e:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2f62:	62 5f       	subi	r22, 0xF2	; 242
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255
    2f66:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	c7 01       	movw	r24, r14
    2f6e:	b6 01       	movw	r22, r12
    2f70:	fd db       	rcall	.-2054   	; 0x276c <prvAddCurrentTaskToDelayedList>
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	df 90       	pop	r13
    2f7c:	cf 90       	pop	r12
    2f7e:	08 95       	ret

00002f80 <vTaskPlaceOnEventListRestricted>:
    2f80:	cf 92       	push	r12
    2f82:	df 92       	push	r13
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	cf 93       	push	r28
    2f8a:	6a 01       	movw	r12, r20
    2f8c:	7b 01       	movw	r14, r22
    2f8e:	c2 2f       	mov	r28, r18
    2f90:	60 91 b1 19 	lds	r22, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    2f94:	70 91 b2 19 	lds	r23, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    2f98:	62 5f       	subi	r22, 0xF2	; 242
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    2fa0:	cc 23       	and	r28, r28
    2fa2:	21 f0       	breq	.+8      	; 0x2fac <vTaskPlaceOnEventListRestricted+0x2c>
    2fa4:	cc 24       	eor	r12, r12
    2fa6:	ca 94       	dec	r12
    2fa8:	dc 2c       	mov	r13, r12
    2faa:	76 01       	movw	r14, r12
    2fac:	4c 2f       	mov	r20, r28
    2fae:	c7 01       	movw	r24, r14
    2fb0:	b6 01       	movw	r22, r12
    2fb2:	dc db       	rcall	.-2120   	; 0x276c <prvAddCurrentTaskToDelayedList>
    2fb4:	cf 91       	pop	r28
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	df 90       	pop	r13
    2fbc:	cf 90       	pop	r12
    2fbe:	08 95       	ret

00002fc0 <xTaskRemoveFromEventList>:
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	dc 01       	movw	r26, r24
    2fca:	17 96       	adiw	r26, 0x07	; 7
    2fcc:	ed 91       	ld	r30, X+
    2fce:	fc 91       	ld	r31, X
    2fd0:	18 97       	sbiw	r26, 0x08	; 8
    2fd2:	c0 85       	ldd	r28, Z+8	; 0x08
    2fd4:	d1 85       	ldd	r29, Z+9	; 0x09
    2fd6:	8e 01       	movw	r16, r28
    2fd8:	02 5f       	subi	r16, 0xF2	; 242
    2fda:	1f 4f       	sbci	r17, 0xFF	; 255
    2fdc:	c8 01       	movw	r24, r16
    2fde:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    2fe2:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	16 c0       	rjmp	.+44     	; 0x3016 <xTaskRemoveFromEventList+0x56>
    2fea:	0c 50       	subi	r16, 0x0C	; 12
    2fec:	11 09       	sbc	r17, r1
    2fee:	c8 01       	movw	r24, r16
    2ff0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    2ff4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ff6:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    2ffa:	98 17       	cp	r25, r24
    2ffc:	10 f4       	brcc	.+4      	; 0x3002 <xTaskRemoveFromEventList+0x42>
    2ffe:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    3002:	bb e0       	ldi	r27, 0x0B	; 11
    3004:	8b 9f       	mul	r24, r27
    3006:	c0 01       	movw	r24, r0
    3008:	11 24       	eor	r1, r1
    300a:	b8 01       	movw	r22, r16
    300c:	8b 57       	subi	r24, 0x7B	; 123
    300e:	96 4e       	sbci	r25, 0xE6	; 230
    3010:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    3014:	05 c0       	rjmp	.+10     	; 0x3020 <xTaskRemoveFromEventList+0x60>
    3016:	b8 01       	movw	r22, r16
    3018:	80 e6       	ldi	r24, 0x60	; 96
    301a:	99 e1       	ldi	r25, 0x19	; 25
    301c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    3020:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3024:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3028:	9a 8d       	ldd	r25, Y+26	; 0x1a
    302a:	82 8d       	ldd	r24, Z+26	; 0x1a
    302c:	89 17       	cp	r24, r25
    302e:	20 f4       	brcc	.+8      	; 0x3038 <xTaskRemoveFromEventList+0x78>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    3036:	01 c0       	rjmp	.+2      	; 0x303a <xTaskRemoveFromEventList+0x7a>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	08 95       	ret

00003044 <vTaskRemoveFromUnorderedEventList>:
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	70 68       	ori	r23, 0x80	; 128
    304e:	fc 01       	movw	r30, r24
    3050:	40 83       	st	Z, r20
    3052:	51 83       	std	Z+1, r21	; 0x01
    3054:	62 83       	std	Z+2, r22	; 0x02
    3056:	73 83       	std	Z+3, r23	; 0x03
    3058:	c0 85       	ldd	r28, Z+8	; 0x08
    305a:	d1 85       	ldd	r29, Z+9	; 0x09
    305c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    3060:	8e 01       	movw	r16, r28
    3062:	0e 5f       	subi	r16, 0xFE	; 254
    3064:	1f 4f       	sbci	r17, 0xFF	; 255
    3066:	c8 01       	movw	r24, r16
    3068:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    306c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    306e:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    3072:	98 17       	cp	r25, r24
    3074:	10 f4       	brcc	.+4      	; 0x307a <vTaskRemoveFromUnorderedEventList+0x36>
    3076:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    307a:	fb e0       	ldi	r31, 0x0B	; 11
    307c:	8f 9f       	mul	r24, r31
    307e:	c0 01       	movw	r24, r0
    3080:	11 24       	eor	r1, r1
    3082:	b8 01       	movw	r22, r16
    3084:	8b 57       	subi	r24, 0x7B	; 123
    3086:	96 4e       	sbci	r25, 0xE6	; 230
    3088:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    308c:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3090:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3094:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3096:	82 8d       	ldd	r24, Z+26	; 0x1a
    3098:	89 17       	cp	r24, r25
    309a:	18 f4       	brcc	.+6      	; 0x30a2 <vTaskRemoveFromUnorderedEventList+0x5e>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

000030ac <vTaskSetTimeOutState>:
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	0f 92       	push	r0
    30b2:	20 91 3f 19 	lds	r18, 0x193F	; 0x80193f <xNumOfOverflows>
    30b6:	fc 01       	movw	r30, r24
    30b8:	20 83       	st	Z, r18
    30ba:	40 91 44 19 	lds	r20, 0x1944	; 0x801944 <xTickCount>
    30be:	50 91 45 19 	lds	r21, 0x1945	; 0x801945 <xTickCount+0x1>
    30c2:	60 91 46 19 	lds	r22, 0x1946	; 0x801946 <xTickCount+0x2>
    30c6:	70 91 47 19 	lds	r23, 0x1947	; 0x801947 <xTickCount+0x3>
    30ca:	41 83       	std	Z+1, r20	; 0x01
    30cc:	52 83       	std	Z+2, r21	; 0x02
    30ce:	63 83       	std	Z+3, r22	; 0x03
    30d0:	74 83       	std	Z+4, r23	; 0x04
    30d2:	0f 90       	pop	r0
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	08 95       	ret

000030d8 <vTaskInternalSetTimeOutState>:
    30d8:	20 91 3f 19 	lds	r18, 0x193F	; 0x80193f <xNumOfOverflows>
    30dc:	fc 01       	movw	r30, r24
    30de:	20 83       	st	Z, r18
    30e0:	40 91 44 19 	lds	r20, 0x1944	; 0x801944 <xTickCount>
    30e4:	50 91 45 19 	lds	r21, 0x1945	; 0x801945 <xTickCount+0x1>
    30e8:	60 91 46 19 	lds	r22, 0x1946	; 0x801946 <xTickCount+0x2>
    30ec:	70 91 47 19 	lds	r23, 0x1947	; 0x801947 <xTickCount+0x3>
    30f0:	41 83       	std	Z+1, r20	; 0x01
    30f2:	52 83       	std	Z+2, r21	; 0x02
    30f4:	63 83       	std	Z+3, r22	; 0x03
    30f6:	74 83       	std	Z+4, r23	; 0x04
    30f8:	08 95       	ret

000030fa <xTaskCheckForTimeOut>:
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	fb 01       	movw	r30, r22
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	0f 92       	push	r0
    3112:	40 91 44 19 	lds	r20, 0x1944	; 0x801944 <xTickCount>
    3116:	50 91 45 19 	lds	r21, 0x1945	; 0x801945 <xTickCount+0x1>
    311a:	60 91 46 19 	lds	r22, 0x1946	; 0x801946 <xTickCount+0x2>
    311e:	70 91 47 19 	lds	r23, 0x1947	; 0x801947 <xTickCount+0x3>
    3122:	00 81       	ld	r16, Z
    3124:	11 81       	ldd	r17, Z+1	; 0x01
    3126:	22 81       	ldd	r18, Z+2	; 0x02
    3128:	33 81       	ldd	r19, Z+3	; 0x03
    312a:	0f 3f       	cpi	r16, 0xFF	; 255
    312c:	af ef       	ldi	r26, 0xFF	; 255
    312e:	1a 07       	cpc	r17, r26
    3130:	2a 07       	cpc	r18, r26
    3132:	3a 07       	cpc	r19, r26
    3134:	49 f1       	breq	.+82     	; 0x3188 <xTaskCheckForTimeOut+0x8e>
    3136:	ec 01       	movw	r28, r24
    3138:	c9 80       	ldd	r12, Y+1	; 0x01
    313a:	da 80       	ldd	r13, Y+2	; 0x02
    313c:	eb 80       	ldd	r14, Y+3	; 0x03
    313e:	fc 80       	ldd	r15, Y+4	; 0x04
    3140:	a0 91 3f 19 	lds	r26, 0x193F	; 0x80193f <xNumOfOverflows>
    3144:	b8 81       	ld	r27, Y
    3146:	ba 17       	cp	r27, r26
    3148:	29 f0       	breq	.+10     	; 0x3154 <xTaskCheckForTimeOut+0x5a>
    314a:	4c 15       	cp	r20, r12
    314c:	5d 05       	cpc	r21, r13
    314e:	6e 05       	cpc	r22, r14
    3150:	7f 05       	cpc	r23, r15
    3152:	e0 f4       	brcc	.+56     	; 0x318c <xTaskCheckForTimeOut+0x92>
    3154:	4c 19       	sub	r20, r12
    3156:	5d 09       	sbc	r21, r13
    3158:	6e 09       	sbc	r22, r14
    315a:	7f 09       	sbc	r23, r15
    315c:	40 17       	cp	r20, r16
    315e:	51 07       	cpc	r21, r17
    3160:	62 07       	cpc	r22, r18
    3162:	73 07       	cpc	r23, r19
    3164:	58 f4       	brcc	.+22     	; 0x317c <xTaskCheckForTimeOut+0x82>
    3166:	04 1b       	sub	r16, r20
    3168:	15 0b       	sbc	r17, r21
    316a:	26 0b       	sbc	r18, r22
    316c:	37 0b       	sbc	r19, r23
    316e:	00 83       	st	Z, r16
    3170:	11 83       	std	Z+1, r17	; 0x01
    3172:	22 83       	std	Z+2, r18	; 0x02
    3174:	33 83       	std	Z+3, r19	; 0x03
    3176:	b0 df       	rcall	.-160    	; 0x30d8 <vTaskInternalSetTimeOutState>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	09 c0       	rjmp	.+18     	; 0x318e <xTaskCheckForTimeOut+0x94>
    317c:	10 82       	st	Z, r1
    317e:	11 82       	std	Z+1, r1	; 0x01
    3180:	12 82       	std	Z+2, r1	; 0x02
    3182:	13 82       	std	Z+3, r1	; 0x03
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	03 c0       	rjmp	.+6      	; 0x318e <xTaskCheckForTimeOut+0x94>
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	01 c0       	rjmp	.+2      	; 0x318e <xTaskCheckForTimeOut+0x94>
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	0f 90       	pop	r0
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	df 90       	pop	r13
    31a0:	cf 90       	pop	r12
    31a2:	08 95       	ret

000031a4 <vTaskMissedYield>:
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    31aa:	08 95       	ret

000031ac <xTaskGetCurrentTaskHandle>:
    31ac:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    31b0:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    31b4:	08 95       	ret

000031b6 <xTaskGetSchedulerState>:
    31b6:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <xSchedulerRunning>
    31ba:	88 23       	and	r24, r24
    31bc:	31 f0       	breq	.+12     	; 0x31ca <xTaskGetSchedulerState+0x14>
    31be:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    31c2:	88 23       	and	r24, r24
    31c4:	21 f0       	breq	.+8      	; 0x31ce <xTaskGetSchedulerState+0x18>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	08 95       	ret
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	08 95       	ret
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	08 95       	ret

000031d2 <xTaskPriorityInherit>:
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	fc 01       	movw	r30, r24
    31dc:	89 2b       	or	r24, r25
    31de:	09 f4       	brne	.+2      	; 0x31e2 <xTaskPriorityInherit+0x10>
    31e0:	60 c0       	rjmp	.+192    	; 0x32a2 <xTaskPriorityInherit+0xd0>
    31e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    31e4:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    31e8:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    31ec:	5a 96       	adiw	r26, 0x1a	; 26
    31ee:	9c 91       	ld	r25, X
    31f0:	89 17       	cp	r24, r25
    31f2:	08 f0       	brcs	.+2      	; 0x31f6 <xTaskPriorityInherit+0x24>
    31f4:	4a c0       	rjmp	.+148    	; 0x328a <xTaskPriorityInherit+0xb8>
    31f6:	46 85       	ldd	r20, Z+14	; 0x0e
    31f8:	57 85       	ldd	r21, Z+15	; 0x0f
    31fa:	60 89       	ldd	r22, Z+16	; 0x10
    31fc:	71 89       	ldd	r23, Z+17	; 0x11
    31fe:	77 23       	and	r23, r23
    3200:	94 f0       	brlt	.+36     	; 0x3226 <xTaskPriorityInherit+0x54>
    3202:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3206:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    320a:	5a 96       	adiw	r26, 0x1a	; 26
    320c:	9c 91       	ld	r25, X
    320e:	44 e0       	ldi	r20, 0x04	; 4
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	49 1b       	sub	r20, r25
    3218:	51 09       	sbc	r21, r1
    321a:	61 09       	sbc	r22, r1
    321c:	71 09       	sbc	r23, r1
    321e:	46 87       	std	Z+14, r20	; 0x0e
    3220:	57 87       	std	Z+15, r21	; 0x0f
    3222:	60 8b       	std	Z+16, r22	; 0x10
    3224:	71 8b       	std	Z+17, r23	; 0x11
    3226:	2b e0       	ldi	r18, 0x0B	; 11
    3228:	82 9f       	mul	r24, r18
    322a:	c0 01       	movw	r24, r0
    322c:	11 24       	eor	r1, r1
    322e:	8b 57       	subi	r24, 0x7B	; 123
    3230:	96 4e       	sbci	r25, 0xE6	; 230
    3232:	24 85       	ldd	r18, Z+12	; 0x0c
    3234:	35 85       	ldd	r19, Z+13	; 0x0d
    3236:	28 17       	cp	r18, r24
    3238:	39 07       	cpc	r19, r25
    323a:	f1 f4       	brne	.+60     	; 0x3278 <xTaskPriorityInherit+0xa6>
    323c:	8f 01       	movw	r16, r30
    323e:	ef 01       	movw	r28, r30
    3240:	22 96       	adiw	r28, 0x02	; 2
    3242:	ce 01       	movw	r24, r28
    3244:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    3248:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    324c:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3250:	82 8d       	ldd	r24, Z+26	; 0x1a
    3252:	f8 01       	movw	r30, r16
    3254:	82 8f       	std	Z+26, r24	; 0x1a
    3256:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    325a:	98 17       	cp	r25, r24
    325c:	10 f4       	brcc	.+4      	; 0x3262 <xTaskPriorityInherit+0x90>
    325e:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    3262:	fb e0       	ldi	r31, 0x0B	; 11
    3264:	8f 9f       	mul	r24, r31
    3266:	c0 01       	movw	r24, r0
    3268:	11 24       	eor	r1, r1
    326a:	be 01       	movw	r22, r28
    326c:	8b 57       	subi	r24, 0x7B	; 123
    326e:	96 4e       	sbci	r25, 0xE6	; 230
    3270:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	16 c0       	rjmp	.+44     	; 0x32a4 <xTaskPriorityInherit+0xd2>
    3278:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    327c:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3280:	5a 96       	adiw	r26, 0x1a	; 26
    3282:	8c 91       	ld	r24, X
    3284:	82 8f       	std	Z+26, r24	; 0x1a
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	0d c0       	rjmp	.+26     	; 0x32a4 <xTaskPriorityInherit+0xd2>
    328a:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    328e:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	27 a1       	ldd	r18, Z+39	; 0x27
    3296:	5a 96       	adiw	r26, 0x1a	; 26
    3298:	9c 91       	ld	r25, X
    329a:	29 17       	cp	r18, r25
    329c:	18 f0       	brcs	.+6      	; 0x32a4 <xTaskPriorityInherit+0xd2>
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <xTaskPriorityInherit+0xd2>
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	08 95       	ret

000032ae <xTaskPriorityDisinherit>:
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	fc 01       	movw	r30, r24
    32b8:	89 2b       	or	r24, r25
    32ba:	79 f1       	breq	.+94     	; 0x331a <xTaskPriorityDisinherit+0x6c>
    32bc:	80 a5       	ldd	r24, Z+40	; 0x28
    32be:	81 50       	subi	r24, 0x01	; 1
    32c0:	80 a7       	std	Z+40, r24	; 0x28
    32c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    32c4:	97 a1       	ldd	r25, Z+39	; 0x27
    32c6:	29 17       	cp	r18, r25
    32c8:	51 f1       	breq	.+84     	; 0x331e <xTaskPriorityDisinherit+0x70>
    32ca:	81 11       	cpse	r24, r1
    32cc:	2a c0       	rjmp	.+84     	; 0x3322 <xTaskPriorityDisinherit+0x74>
    32ce:	ef 01       	movw	r28, r30
    32d0:	8f 01       	movw	r16, r30
    32d2:	0e 5f       	subi	r16, 0xFE	; 254
    32d4:	1f 4f       	sbci	r17, 0xFF	; 255
    32d6:	c8 01       	movw	r24, r16
    32d8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    32dc:	8f a1       	ldd	r24, Y+39	; 0x27
    32de:	8a 8f       	std	Y+26, r24	; 0x1a
    32e0:	44 e0       	ldi	r20, 0x04	; 4
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	48 1b       	sub	r20, r24
    32ea:	51 09       	sbc	r21, r1
    32ec:	61 09       	sbc	r22, r1
    32ee:	71 09       	sbc	r23, r1
    32f0:	4e 87       	std	Y+14, r20	; 0x0e
    32f2:	5f 87       	std	Y+15, r21	; 0x0f
    32f4:	68 8b       	std	Y+16, r22	; 0x10
    32f6:	79 8b       	std	Y+17, r23	; 0x11
    32f8:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    32fc:	98 17       	cp	r25, r24
    32fe:	10 f4       	brcc	.+4      	; 0x3304 <xTaskPriorityDisinherit+0x56>
    3300:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    3304:	2b e0       	ldi	r18, 0x0B	; 11
    3306:	82 9f       	mul	r24, r18
    3308:	c0 01       	movw	r24, r0
    330a:	11 24       	eor	r1, r1
    330c:	b8 01       	movw	r22, r16
    330e:	8b 57       	subi	r24, 0x7B	; 123
    3310:	96 4e       	sbci	r25, 0xE6	; 230
    3312:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	05 c0       	rjmp	.+10     	; 0x3324 <xTaskPriorityDisinherit+0x76>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	03 c0       	rjmp	.+6      	; 0x3324 <xTaskPriorityDisinherit+0x76>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <xTaskPriorityDisinherit+0x76>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	08 95       	ret

0000332e <vTaskPriorityDisinheritAfterTimeout>:
    332e:	0f 93       	push	r16
    3330:	1f 93       	push	r17
    3332:	cf 93       	push	r28
    3334:	df 93       	push	r29
    3336:	fc 01       	movw	r30, r24
    3338:	89 2b       	or	r24, r25
    333a:	09 f4       	brne	.+2      	; 0x333e <vTaskPriorityDisinheritAfterTimeout+0x10>
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    333e:	87 a1       	ldd	r24, Z+39	; 0x27
    3340:	86 17       	cp	r24, r22
    3342:	08 f4       	brcc	.+2      	; 0x3346 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3344:	86 2f       	mov	r24, r22
    3346:	92 8d       	ldd	r25, Z+26	; 0x1a
    3348:	98 17       	cp	r25, r24
    334a:	c1 f1       	breq	.+112    	; 0x33bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    334c:	20 a5       	ldd	r18, Z+40	; 0x28
    334e:	21 30       	cpi	r18, 0x01	; 1
    3350:	a9 f5       	brne	.+106    	; 0x33bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    3352:	82 8f       	std	Z+26, r24	; 0x1a
    3354:	46 85       	ldd	r20, Z+14	; 0x0e
    3356:	57 85       	ldd	r21, Z+15	; 0x0f
    3358:	60 89       	ldd	r22, Z+16	; 0x10
    335a:	71 89       	ldd	r23, Z+17	; 0x11
    335c:	77 23       	and	r23, r23
    335e:	64 f0       	brlt	.+24     	; 0x3378 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    3360:	44 e0       	ldi	r20, 0x04	; 4
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	48 1b       	sub	r20, r24
    336a:	51 09       	sbc	r21, r1
    336c:	61 09       	sbc	r22, r1
    336e:	71 09       	sbc	r23, r1
    3370:	46 87       	std	Z+14, r20	; 0x0e
    3372:	57 87       	std	Z+15, r21	; 0x0f
    3374:	60 8b       	std	Z+16, r22	; 0x10
    3376:	71 8b       	std	Z+17, r23	; 0x11
    3378:	2b e0       	ldi	r18, 0x0B	; 11
    337a:	92 9f       	mul	r25, r18
    337c:	c0 01       	movw	r24, r0
    337e:	11 24       	eor	r1, r1
    3380:	8b 57       	subi	r24, 0x7B	; 123
    3382:	96 4e       	sbci	r25, 0xE6	; 230
    3384:	24 85       	ldd	r18, Z+12	; 0x0c
    3386:	35 85       	ldd	r19, Z+13	; 0x0d
    3388:	28 17       	cp	r18, r24
    338a:	39 07       	cpc	r19, r25
    338c:	b9 f4       	brne	.+46     	; 0x33bc <vTaskPriorityDisinheritAfterTimeout+0x8e>
    338e:	ef 01       	movw	r28, r30
    3390:	8f 01       	movw	r16, r30
    3392:	0e 5f       	subi	r16, 0xFE	; 254
    3394:	1f 4f       	sbci	r17, 0xFF	; 255
    3396:	c8 01       	movw	r24, r16
    3398:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    339c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    339e:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    33a2:	98 17       	cp	r25, r24
    33a4:	10 f4       	brcc	.+4      	; 0x33aa <vTaskPriorityDisinheritAfterTimeout+0x7c>
    33a6:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    33aa:	2b e0       	ldi	r18, 0x0B	; 11
    33ac:	82 9f       	mul	r24, r18
    33ae:	c0 01       	movw	r24, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	b8 01       	movw	r22, r16
    33b4:	8b 57       	subi	r24, 0x7B	; 123
    33b6:	96 4e       	sbci	r25, 0xE6	; 230
    33b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	08 95       	ret

000033c6 <uxTaskResetEventItemValue>:
    33c6:	cf 92       	push	r12
    33c8:	df 92       	push	r13
    33ca:	ef 92       	push	r14
    33cc:	ff 92       	push	r15
    33ce:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    33d2:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    33d6:	66 85       	ldd	r22, Z+14	; 0x0e
    33d8:	77 85       	ldd	r23, Z+15	; 0x0f
    33da:	80 89       	ldd	r24, Z+16	; 0x10
    33dc:	91 89       	ldd	r25, Z+17	; 0x11
    33de:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    33e2:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    33e6:	a0 91 b1 19 	lds	r26, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    33ea:	b0 91 b2 19 	lds	r27, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    33ee:	5a 96       	adiw	r26, 0x1a	; 26
    33f0:	2c 91       	ld	r18, X
    33f2:	c1 2c       	mov	r12, r1
    33f4:	d1 2c       	mov	r13, r1
    33f6:	76 01       	movw	r14, r12
    33f8:	68 94       	set
    33fa:	c2 f8       	bld	r12, 2
    33fc:	c2 1a       	sub	r12, r18
    33fe:	d1 08       	sbc	r13, r1
    3400:	e1 08       	sbc	r14, r1
    3402:	f1 08       	sbc	r15, r1
    3404:	c6 86       	std	Z+14, r12	; 0x0e
    3406:	d7 86       	std	Z+15, r13	; 0x0f
    3408:	e0 8a       	std	Z+16, r14	; 0x10
    340a:	f1 8a       	std	Z+17, r15	; 0x11
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	08 95       	ret

00003416 <pvTaskIncrementMutexHeldCount>:
    3416:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    341a:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    341e:	89 2b       	or	r24, r25
    3420:	39 f0       	breq	.+14     	; 0x3430 <pvTaskIncrementMutexHeldCount+0x1a>
    3422:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3426:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    342a:	80 a5       	ldd	r24, Z+40	; 0x28
    342c:	8f 5f       	subi	r24, 0xFF	; 255
    342e:	80 a7       	std	Z+40, r24	; 0x28
    3430:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3434:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3438:	08 95       	ret

0000343a <xTaskNotifyWait>:
    343a:	4f 92       	push	r4
    343c:	5f 92       	push	r5
    343e:	6f 92       	push	r6
    3440:	7f 92       	push	r7
    3442:	8f 92       	push	r8
    3444:	9f 92       	push	r9
    3446:	af 92       	push	r10
    3448:	bf 92       	push	r11
    344a:	cf 92       	push	r12
    344c:	df 92       	push	r13
    344e:	ef 92       	push	r14
    3450:	ff 92       	push	r15
    3452:	0f 93       	push	r16
    3454:	1f 93       	push	r17
    3456:	49 01       	movw	r8, r18
    3458:	5a 01       	movw	r10, r20
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	0f 92       	push	r0
    3460:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3464:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3468:	27 a5       	ldd	r18, Z+47	; 0x2f
    346a:	22 30       	cpi	r18, 0x02	; 2
    346c:	39 f1       	breq	.+78     	; 0x34bc <xTaskNotifyWait+0x82>
    346e:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3472:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3476:	43 a4       	ldd	r4, Z+43	; 0x2b
    3478:	54 a4       	ldd	r5, Z+44	; 0x2c
    347a:	65 a4       	ldd	r6, Z+45	; 0x2d
    347c:	76 a4       	ldd	r7, Z+46	; 0x2e
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	80 95       	com	r24
    3484:	90 95       	com	r25
    3486:	a0 95       	com	r26
    3488:	b0 95       	com	r27
    348a:	84 21       	and	r24, r4
    348c:	95 21       	and	r25, r5
    348e:	a6 21       	and	r26, r6
    3490:	b7 21       	and	r27, r7
    3492:	83 a7       	std	Z+43, r24	; 0x2b
    3494:	94 a7       	std	Z+44, r25	; 0x2c
    3496:	a5 a7       	std	Z+45, r26	; 0x2d
    3498:	b6 a7       	std	Z+46, r27	; 0x2e
    349a:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    349e:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	87 a7       	std	Z+47, r24	; 0x2f
    34a6:	c1 14       	cp	r12, r1
    34a8:	d1 04       	cpc	r13, r1
    34aa:	e1 04       	cpc	r14, r1
    34ac:	f1 04       	cpc	r15, r1
    34ae:	31 f0       	breq	.+12     	; 0x34bc <xTaskNotifyWait+0x82>
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	c7 01       	movw	r24, r14
    34b4:	b6 01       	movw	r22, r12
    34b6:	5a d9       	rcall	.-3404   	; 0x276c <prvAddCurrentTaskToDelayedList>
    34b8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
    34bc:	0f 90       	pop	r0
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	0f 92       	push	r0
    34c6:	01 15       	cp	r16, r1
    34c8:	11 05       	cpc	r17, r1
    34ca:	69 f0       	breq	.+26     	; 0x34e6 <xTaskNotifyWait+0xac>
    34cc:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    34d0:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34d4:	83 a5       	ldd	r24, Z+43	; 0x2b
    34d6:	94 a5       	ldd	r25, Z+44	; 0x2c
    34d8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    34da:	b6 a5       	ldd	r27, Z+46	; 0x2e
    34dc:	f8 01       	movw	r30, r16
    34de:	80 83       	st	Z, r24
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	a2 83       	std	Z+2, r26	; 0x02
    34e4:	b3 83       	std	Z+3, r27	; 0x03
    34e6:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    34ea:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    34f0:	82 30       	cpi	r24, 0x02	; 2
    34f2:	b1 f4       	brne	.+44     	; 0x3520 <xTaskNotifyWait+0xe6>
    34f4:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    34f8:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    34fc:	83 a5       	ldd	r24, Z+43	; 0x2b
    34fe:	94 a5       	ldd	r25, Z+44	; 0x2c
    3500:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3502:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3504:	80 94       	com	r8
    3506:	90 94       	com	r9
    3508:	a0 94       	com	r10
    350a:	b0 94       	com	r11
    350c:	88 22       	and	r8, r24
    350e:	99 22       	and	r9, r25
    3510:	aa 22       	and	r10, r26
    3512:	bb 22       	and	r11, r27
    3514:	83 a6       	std	Z+43, r8	; 0x2b
    3516:	94 a6       	std	Z+44, r9	; 0x2c
    3518:	a5 a6       	std	Z+45, r10	; 0x2d
    351a:	b6 a6       	std	Z+46, r11	; 0x2e
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	01 c0       	rjmp	.+2      	; 0x3522 <xTaskNotifyWait+0xe8>
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3526:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    352a:	17 a6       	std	Z+47, r1	; 0x2f
    352c:	0f 90       	pop	r0
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	ef 90       	pop	r14
    3538:	df 90       	pop	r13
    353a:	cf 90       	pop	r12
    353c:	bf 90       	pop	r11
    353e:	af 90       	pop	r10
    3540:	9f 90       	pop	r9
    3542:	8f 90       	pop	r8
    3544:	7f 90       	pop	r7
    3546:	6f 90       	pop	r6
    3548:	5f 90       	pop	r5
    354a:	4f 90       	pop	r4
    354c:	08 95       	ret

0000354e <xTaskGenericNotify>:
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	fc 01       	movw	r30, r24
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	0f 92       	push	r0
    355e:	01 15       	cp	r16, r1
    3560:	11 05       	cpc	r17, r1
    3562:	49 f0       	breq	.+18     	; 0x3576 <xTaskGenericNotify+0x28>
    3564:	83 a5       	ldd	r24, Z+43	; 0x2b
    3566:	94 a5       	ldd	r25, Z+44	; 0x2c
    3568:	a5 a5       	ldd	r26, Z+45	; 0x2d
    356a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    356c:	e8 01       	movw	r28, r16
    356e:	88 83       	st	Y, r24
    3570:	99 83       	std	Y+1, r25	; 0x01
    3572:	aa 83       	std	Y+2, r26	; 0x02
    3574:	bb 83       	std	Y+3, r27	; 0x03
    3576:	87 a5       	ldd	r24, Z+47	; 0x2f
    3578:	92 e0       	ldi	r25, 0x02	; 2
    357a:	97 a7       	std	Z+47, r25	; 0x2f
    357c:	22 30       	cpi	r18, 0x02	; 2
    357e:	b1 f0       	breq	.+44     	; 0x35ac <xTaskGenericNotify+0x5e>
    3580:	18 f4       	brcc	.+6      	; 0x3588 <xTaskGenericNotify+0x3a>
    3582:	21 30       	cpi	r18, 0x01	; 1
    3584:	31 f0       	breq	.+12     	; 0x3592 <xTaskGenericNotify+0x44>
    3586:	2a c0       	rjmp	.+84     	; 0x35dc <xTaskGenericNotify+0x8e>
    3588:	23 30       	cpi	r18, 0x03	; 3
    358a:	e9 f0       	breq	.+58     	; 0x35c6 <xTaskGenericNotify+0x78>
    358c:	24 30       	cpi	r18, 0x04	; 4
    358e:	01 f1       	breq	.+64     	; 0x35d0 <xTaskGenericNotify+0x82>
    3590:	25 c0       	rjmp	.+74     	; 0x35dc <xTaskGenericNotify+0x8e>
    3592:	03 a5       	ldd	r16, Z+43	; 0x2b
    3594:	14 a5       	ldd	r17, Z+44	; 0x2c
    3596:	25 a5       	ldd	r18, Z+45	; 0x2d
    3598:	36 a5       	ldd	r19, Z+46	; 0x2e
    359a:	40 2b       	or	r20, r16
    359c:	51 2b       	or	r21, r17
    359e:	62 2b       	or	r22, r18
    35a0:	73 2b       	or	r23, r19
    35a2:	43 a7       	std	Z+43, r20	; 0x2b
    35a4:	54 a7       	std	Z+44, r21	; 0x2c
    35a6:	65 a7       	std	Z+45, r22	; 0x2d
    35a8:	76 a7       	std	Z+46, r23	; 0x2e
    35aa:	18 c0       	rjmp	.+48     	; 0x35dc <xTaskGenericNotify+0x8e>
    35ac:	43 a5       	ldd	r20, Z+43	; 0x2b
    35ae:	54 a5       	ldd	r21, Z+44	; 0x2c
    35b0:	65 a5       	ldd	r22, Z+45	; 0x2d
    35b2:	76 a5       	ldd	r23, Z+46	; 0x2e
    35b4:	4f 5f       	subi	r20, 0xFF	; 255
    35b6:	5f 4f       	sbci	r21, 0xFF	; 255
    35b8:	6f 4f       	sbci	r22, 0xFF	; 255
    35ba:	7f 4f       	sbci	r23, 0xFF	; 255
    35bc:	43 a7       	std	Z+43, r20	; 0x2b
    35be:	54 a7       	std	Z+44, r21	; 0x2c
    35c0:	65 a7       	std	Z+45, r22	; 0x2d
    35c2:	76 a7       	std	Z+46, r23	; 0x2e
    35c4:	0b c0       	rjmp	.+22     	; 0x35dc <xTaskGenericNotify+0x8e>
    35c6:	43 a7       	std	Z+43, r20	; 0x2b
    35c8:	54 a7       	std	Z+44, r21	; 0x2c
    35ca:	65 a7       	std	Z+45, r22	; 0x2d
    35cc:	76 a7       	std	Z+46, r23	; 0x2e
    35ce:	06 c0       	rjmp	.+12     	; 0x35dc <xTaskGenericNotify+0x8e>
    35d0:	82 30       	cpi	r24, 0x02	; 2
    35d2:	49 f1       	breq	.+82     	; 0x3626 <xTaskGenericNotify+0xd8>
    35d4:	43 a7       	std	Z+43, r20	; 0x2b
    35d6:	54 a7       	std	Z+44, r21	; 0x2c
    35d8:	65 a7       	std	Z+45, r22	; 0x2d
    35da:	76 a7       	std	Z+46, r23	; 0x2e
    35dc:	81 30       	cpi	r24, 0x01	; 1
    35de:	29 f5       	brne	.+74     	; 0x362a <xTaskGenericNotify+0xdc>
    35e0:	ef 01       	movw	r28, r30
    35e2:	8f 01       	movw	r16, r30
    35e4:	0e 5f       	subi	r16, 0xFE	; 254
    35e6:	1f 4f       	sbci	r17, 0xFF	; 255
    35e8:	c8 01       	movw	r24, r16
    35ea:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    35ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35f0:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    35f4:	98 17       	cp	r25, r24
    35f6:	10 f4       	brcc	.+4      	; 0x35fc <xTaskGenericNotify+0xae>
    35f8:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    35fc:	2b e0       	ldi	r18, 0x0B	; 11
    35fe:	82 9f       	mul	r24, r18
    3600:	c0 01       	movw	r24, r0
    3602:	11 24       	eor	r1, r1
    3604:	b8 01       	movw	r22, r16
    3606:	8b 57       	subi	r24, 0x7B	; 123
    3608:	96 4e       	sbci	r25, 0xE6	; 230
    360a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    360e:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3612:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    3616:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3618:	82 8d       	ldd	r24, Z+26	; 0x1a
    361a:	89 17       	cp	r24, r25
    361c:	40 f4       	brcc	.+16     	; 0x362e <xTaskGenericNotify+0xe0>
    361e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	05 c0       	rjmp	.+10     	; 0x3630 <xTaskGenericNotify+0xe2>
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	03 c0       	rjmp	.+6      	; 0x3630 <xTaskGenericNotify+0xe2>
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	01 c0       	rjmp	.+2      	; 0x3630 <xTaskGenericNotify+0xe2>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	0f 90       	pop	r0
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	df 91       	pop	r29
    3636:	cf 91       	pop	r28
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
    363c:	08 95       	ret

0000363e <xTaskGenericNotifyFromISR>:
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	fc 01       	movw	r30, r24
    364c:	01 15       	cp	r16, r1
    364e:	11 05       	cpc	r17, r1
    3650:	49 f0       	breq	.+18     	; 0x3664 <xTaskGenericNotifyFromISR+0x26>
    3652:	83 a5       	ldd	r24, Z+43	; 0x2b
    3654:	94 a5       	ldd	r25, Z+44	; 0x2c
    3656:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3658:	b6 a5       	ldd	r27, Z+46	; 0x2e
    365a:	e8 01       	movw	r28, r16
    365c:	88 83       	st	Y, r24
    365e:	99 83       	std	Y+1, r25	; 0x01
    3660:	aa 83       	std	Y+2, r26	; 0x02
    3662:	bb 83       	std	Y+3, r27	; 0x03
    3664:	87 a5       	ldd	r24, Z+47	; 0x2f
    3666:	92 e0       	ldi	r25, 0x02	; 2
    3668:	97 a7       	std	Z+47, r25	; 0x2f
    366a:	22 30       	cpi	r18, 0x02	; 2
    366c:	b1 f0       	breq	.+44     	; 0x369a <xTaskGenericNotifyFromISR+0x5c>
    366e:	18 f4       	brcc	.+6      	; 0x3676 <xTaskGenericNotifyFromISR+0x38>
    3670:	21 30       	cpi	r18, 0x01	; 1
    3672:	31 f0       	breq	.+12     	; 0x3680 <xTaskGenericNotifyFromISR+0x42>
    3674:	2a c0       	rjmp	.+84     	; 0x36ca <xTaskGenericNotifyFromISR+0x8c>
    3676:	23 30       	cpi	r18, 0x03	; 3
    3678:	e9 f0       	breq	.+58     	; 0x36b4 <xTaskGenericNotifyFromISR+0x76>
    367a:	24 30       	cpi	r18, 0x04	; 4
    367c:	01 f1       	breq	.+64     	; 0x36be <xTaskGenericNotifyFromISR+0x80>
    367e:	25 c0       	rjmp	.+74     	; 0x36ca <xTaskGenericNotifyFromISR+0x8c>
    3680:	03 a5       	ldd	r16, Z+43	; 0x2b
    3682:	14 a5       	ldd	r17, Z+44	; 0x2c
    3684:	25 a5       	ldd	r18, Z+45	; 0x2d
    3686:	36 a5       	ldd	r19, Z+46	; 0x2e
    3688:	40 2b       	or	r20, r16
    368a:	51 2b       	or	r21, r17
    368c:	62 2b       	or	r22, r18
    368e:	73 2b       	or	r23, r19
    3690:	43 a7       	std	Z+43, r20	; 0x2b
    3692:	54 a7       	std	Z+44, r21	; 0x2c
    3694:	65 a7       	std	Z+45, r22	; 0x2d
    3696:	76 a7       	std	Z+46, r23	; 0x2e
    3698:	18 c0       	rjmp	.+48     	; 0x36ca <xTaskGenericNotifyFromISR+0x8c>
    369a:	43 a5       	ldd	r20, Z+43	; 0x2b
    369c:	54 a5       	ldd	r21, Z+44	; 0x2c
    369e:	65 a5       	ldd	r22, Z+45	; 0x2d
    36a0:	76 a5       	ldd	r23, Z+46	; 0x2e
    36a2:	4f 5f       	subi	r20, 0xFF	; 255
    36a4:	5f 4f       	sbci	r21, 0xFF	; 255
    36a6:	6f 4f       	sbci	r22, 0xFF	; 255
    36a8:	7f 4f       	sbci	r23, 0xFF	; 255
    36aa:	43 a7       	std	Z+43, r20	; 0x2b
    36ac:	54 a7       	std	Z+44, r21	; 0x2c
    36ae:	65 a7       	std	Z+45, r22	; 0x2d
    36b0:	76 a7       	std	Z+46, r23	; 0x2e
    36b2:	0b c0       	rjmp	.+22     	; 0x36ca <xTaskGenericNotifyFromISR+0x8c>
    36b4:	43 a7       	std	Z+43, r20	; 0x2b
    36b6:	54 a7       	std	Z+44, r21	; 0x2c
    36b8:	65 a7       	std	Z+45, r22	; 0x2d
    36ba:	76 a7       	std	Z+46, r23	; 0x2e
    36bc:	06 c0       	rjmp	.+12     	; 0x36ca <xTaskGenericNotifyFromISR+0x8c>
    36be:	82 30       	cpi	r24, 0x02	; 2
    36c0:	d9 f1       	breq	.+118    	; 0x3738 <xTaskGenericNotifyFromISR+0xfa>
    36c2:	43 a7       	std	Z+43, r20	; 0x2b
    36c4:	54 a7       	std	Z+44, r21	; 0x2c
    36c6:	65 a7       	std	Z+45, r22	; 0x2d
    36c8:	76 a7       	std	Z+46, r23	; 0x2e
    36ca:	81 30       	cpi	r24, 0x01	; 1
    36cc:	b9 f5       	brne	.+110    	; 0x373c <xTaskGenericNotifyFromISR+0xfe>
    36ce:	ef 01       	movw	r28, r30
    36d0:	80 91 37 19 	lds	r24, 0x1937	; 0x801937 <uxSchedulerSuspended>
    36d4:	81 11       	cpse	r24, r1
    36d6:	17 c0       	rjmp	.+46     	; 0x3706 <xTaskGenericNotifyFromISR+0xc8>
    36d8:	8f 01       	movw	r16, r30
    36da:	0e 5f       	subi	r16, 0xFE	; 254
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	c8 01       	movw	r24, r16
    36e0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
    36e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    36e6:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <uxTopReadyPriority>
    36ea:	98 17       	cp	r25, r24
    36ec:	10 f4       	brcc	.+4      	; 0x36f2 <xTaskGenericNotifyFromISR+0xb4>
    36ee:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTopReadyPriority>
    36f2:	eb e0       	ldi	r30, 0x0B	; 11
    36f4:	8e 9f       	mul	r24, r30
    36f6:	c0 01       	movw	r24, r0
    36f8:	11 24       	eor	r1, r1
    36fa:	b8 01       	movw	r22, r16
    36fc:	8b 57       	subi	r24, 0x7B	; 123
    36fe:	96 4e       	sbci	r25, 0xE6	; 230
    3700:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    3704:	07 c0       	rjmp	.+14     	; 0x3714 <xTaskGenericNotifyFromISR+0xd6>
    3706:	bf 01       	movw	r22, r30
    3708:	62 5f       	subi	r22, 0xF2	; 242
    370a:	7f 4f       	sbci	r23, 0xFF	; 255
    370c:	80 e6       	ldi	r24, 0x60	; 96
    370e:	99 e1       	ldi	r25, 0x19	; 25
    3710:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vListInsertEnd>
    3714:	e0 91 b1 19 	lds	r30, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3718:	f0 91 b2 19 	lds	r31, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>
    371c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    371e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3720:	89 17       	cp	r24, r25
    3722:	70 f4       	brcc	.+28     	; 0x3740 <xTaskGenericNotifyFromISR+0x102>
    3724:	e1 14       	cp	r14, r1
    3726:	f1 04       	cpc	r15, r1
    3728:	19 f0       	breq	.+6      	; 0x3730 <xTaskGenericNotifyFromISR+0xf2>
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	e7 01       	movw	r28, r14
    372e:	88 83       	st	Y, r24
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <xYieldPending>
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <xTaskGenericNotifyFromISR+0x104>
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	03 c0       	rjmp	.+6      	; 0x3742 <xTaskGenericNotifyFromISR+0x104>
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	01 c0       	rjmp	.+2      	; 0x3742 <xTaskGenericNotifyFromISR+0x104>
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	1f 91       	pop	r17
    3748:	0f 91       	pop	r16
    374a:	ff 90       	pop	r15
    374c:	ef 90       	pop	r14
    374e:	08 95       	ret

00003750 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3750:	00 97       	sbiw	r24, 0x00	; 0
    3752:	21 f4       	brne	.+8      	; 0x375c <xTaskNotifyStateClear+0xc>
    3754:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <pxCurrentTCB>
    3758:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3762:	fc 01       	movw	r30, r24
    3764:	27 a5       	ldd	r18, Z+47	; 0x2f
    3766:	22 30       	cpi	r18, 0x02	; 2
    3768:	19 f4       	brne	.+6      	; 0x3770 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    376a:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	01 c0       	rjmp	.+2      	; 0x3772 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3770:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3772:	0f 90       	pop	r0
    3774:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3776:	08 95       	ret

00003778 <prvInsertTimerInActiveList>:
    3778:	cf 92       	push	r12
    377a:	df 92       	push	r13
    377c:	ef 92       	push	r14
    377e:	ff 92       	push	r15
    3780:	0f 93       	push	r16
    3782:	1f 93       	push	r17
    3784:	fc 01       	movw	r30, r24
    3786:	42 83       	std	Z+2, r20	; 0x02
    3788:	53 83       	std	Z+3, r21	; 0x03
    378a:	64 83       	std	Z+4, r22	; 0x04
    378c:	75 83       	std	Z+5, r23	; 0x05
    378e:	93 87       	std	Z+11, r25	; 0x0b
    3790:	82 87       	std	Z+10, r24	; 0x0a
    3792:	04 17       	cp	r16, r20
    3794:	15 07       	cpc	r17, r21
    3796:	26 07       	cpc	r18, r22
    3798:	37 07       	cpc	r19, r23
    379a:	c0 f0       	brcs	.+48     	; 0x37cc <prvInsertTimerInActiveList+0x54>
    379c:	0c 19       	sub	r16, r12
    379e:	1d 09       	sbc	r17, r13
    37a0:	2e 09       	sbc	r18, r14
    37a2:	3f 09       	sbc	r19, r15
    37a4:	86 85       	ldd	r24, Z+14	; 0x0e
    37a6:	97 85       	ldd	r25, Z+15	; 0x0f
    37a8:	a0 89       	ldd	r26, Z+16	; 0x10
    37aa:	b1 89       	ldd	r27, Z+17	; 0x11
    37ac:	08 17       	cp	r16, r24
    37ae:	19 07       	cpc	r17, r25
    37b0:	2a 07       	cpc	r18, r26
    37b2:	3b 07       	cpc	r19, r27
    37b4:	00 f5       	brcc	.+64     	; 0x37f6 <prvInsertTimerInActiveList+0x7e>
    37b6:	bf 01       	movw	r22, r30
    37b8:	6e 5f       	subi	r22, 0xFE	; 254
    37ba:	7f 4f       	sbci	r23, 0xFF	; 255
    37bc:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <pxOverflowTimerList>
    37c0:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <pxOverflowTimerList+0x1>
    37c4:	0e 94 19 0b 	call	0x1632	; 0x1632 <vListInsert>
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	18 c0       	rjmp	.+48     	; 0x37fc <prvInsertTimerInActiveList+0x84>
    37cc:	0c 15       	cp	r16, r12
    37ce:	1d 05       	cpc	r17, r13
    37d0:	2e 05       	cpc	r18, r14
    37d2:	3f 05       	cpc	r19, r15
    37d4:	28 f4       	brcc	.+10     	; 0x37e0 <prvInsertTimerInActiveList+0x68>
    37d6:	4c 15       	cp	r20, r12
    37d8:	5d 05       	cpc	r21, r13
    37da:	6e 05       	cpc	r22, r14
    37dc:	7f 05       	cpc	r23, r15
    37de:	68 f4       	brcc	.+26     	; 0x37fa <prvInsertTimerInActiveList+0x82>
    37e0:	bf 01       	movw	r22, r30
    37e2:	6e 5f       	subi	r22, 0xFE	; 254
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <pxCurrentTimerList>
    37ea:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
    37ee:	0e 94 19 0b 	call	0x1632	; 0x1632 <vListInsert>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	03 c0       	rjmp	.+6      	; 0x37fc <prvInsertTimerInActiveList+0x84>
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	01 c0       	rjmp	.+2      	; 0x37fc <prvInsertTimerInActiveList+0x84>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	1f 91       	pop	r17
    37fe:	0f 91       	pop	r16
    3800:	ff 90       	pop	r15
    3802:	ef 90       	pop	r14
    3804:	df 90       	pop	r13
    3806:	cf 90       	pop	r12
    3808:	08 95       	ret

0000380a <prvCheckForValidListAndQueue>:
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	0f 92       	push	r0
    3810:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    3814:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    3818:	89 2b       	or	r24, r25
    381a:	e9 f4       	brne	.+58     	; 0x3856 <prvCheckForValidListAndQueue+0x4c>
    381c:	8a ec       	ldi	r24, 0xCA	; 202
    381e:	99 e1       	ldi	r25, 0x19	; 25
    3820:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    3824:	8f eb       	ldi	r24, 0xBF	; 191
    3826:	99 e1       	ldi	r25, 0x19	; 25
    3828:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vListInitialise>
    382c:	8a ec       	ldi	r24, 0xCA	; 202
    382e:	99 e1       	ldi	r25, 0x19	; 25
    3830:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <pxCurrentTimerList+0x1>
    3834:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <pxCurrentTimerList>
    3838:	8f eb       	ldi	r24, 0xBF	; 191
    383a:	99 e1       	ldi	r25, 0x19	; 25
    383c:	90 93 bc 19 	sts	0x19BC, r25	; 0x8019bc <pxOverflowTimerList+0x1>
    3840:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <pxOverflowTimerList>
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	67 e0       	ldi	r22, 0x07	; 7
    3848:	8a e0       	ldi	r24, 0x0A	; 10
    384a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <xQueueGenericCreate>
    384e:	90 93 ba 19 	sts	0x19BA, r25	; 0x8019ba <xTimerQueue+0x1>
    3852:	80 93 b9 19 	sts	0x19B9, r24	; 0x8019b9 <xTimerQueue>
    3856:	0f 90       	pop	r0
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	08 95       	ret

0000385c <xTimerCreateTimerTask>:
    385c:	ef 92       	push	r14
    385e:	ff 92       	push	r15
    3860:	0f 93       	push	r16
    3862:	d3 df       	rcall	.-90     	; 0x380a <prvCheckForValidListAndQueue>
    3864:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    3868:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    386c:	89 2b       	or	r24, r25
    386e:	91 f0       	breq	.+36     	; 0x3894 <xTimerCreateTimerTask+0x38>
    3870:	0f 2e       	mov	r0, r31
    3872:	f7 eb       	ldi	r31, 0xB7	; 183
    3874:	ef 2e       	mov	r14, r31
    3876:	f9 e1       	ldi	r31, 0x19	; 25
    3878:	ff 2e       	mov	r15, r31
    387a:	f0 2d       	mov	r31, r0
    387c:	03 e0       	ldi	r16, 0x03	; 3
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	45 e5       	ldi	r20, 0x55	; 85
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	65 e9       	ldi	r22, 0x95	; 149
    3888:	75 e0       	ldi	r23, 0x05	; 5
    388a:	87 e0       	ldi	r24, 0x07	; 7
    388c:	91 e0       	ldi	r25, 0x01	; 1
    388e:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
    3892:	01 c0       	rjmp	.+2      	; 0x3896 <xTimerCreateTimerTask+0x3a>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	0f 91       	pop	r16
    3898:	ff 90       	pop	r15
    389a:	ef 90       	pop	r14
    389c:	08 95       	ret

0000389e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    389e:	8f 92       	push	r8
    38a0:	9f 92       	push	r9
    38a2:	af 92       	push	r10
    38a4:	bf 92       	push	r11
    38a6:	cf 92       	push	r12
    38a8:	df 92       	push	r13
    38aa:	ef 92       	push	r14
    38ac:	ff 92       	push	r15
    38ae:	0f 93       	push	r16
    38b0:	1f 93       	push	r17
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	27 97       	sbiw	r28, 0x07	; 7
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    38c6:	e0 91 b9 19 	lds	r30, 0x19B9	; 0x8019b9 <xTimerQueue>
    38ca:	f0 91 ba 19 	lds	r31, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    38ce:	30 97       	sbiw	r30, 0x00	; 0
    38d0:	81 f1       	breq	.+96     	; 0x3932 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    38d2:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    38d4:	2a 83       	std	Y+2, r18	; 0x02
    38d6:	3b 83       	std	Y+3, r19	; 0x03
    38d8:	4c 83       	std	Y+4, r20	; 0x04
    38da:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    38dc:	9f 83       	std	Y+7, r25	; 0x07
    38de:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    38e0:	66 30       	cpi	r22, 0x06	; 6
    38e2:	f4 f4       	brge	.+60     	; 0x3920 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    38e4:	68 dc       	rcall	.-1840   	; 0x31b6 <xTaskGetSchedulerState>
    38e6:	82 30       	cpi	r24, 0x02	; 2
    38e8:	69 f4       	brne	.+26     	; 0x3904 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    38ea:	00 e0       	ldi	r16, 0x00	; 0
    38ec:	a7 01       	movw	r20, r14
    38ee:	96 01       	movw	r18, r12
    38f0:	be 01       	movw	r22, r28
    38f2:	6f 5f       	subi	r22, 0xFF	; 255
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    38fa:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    38fe:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xQueueGenericSend>
    3902:	18 c0       	rjmp	.+48     	; 0x3934 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3904:	00 e0       	ldi	r16, 0x00	; 0
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	a9 01       	movw	r20, r18
    390c:	be 01       	movw	r22, r28
    390e:	6f 5f       	subi	r22, 0xFF	; 255
    3910:	7f 4f       	sbci	r23, 0xFF	; 255
    3912:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <xTimerQueue>
    3916:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <xTimerQueue+0x1>
    391a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xQueueGenericSend>
    391e:	0a c0       	rjmp	.+20     	; 0x3934 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	a8 01       	movw	r20, r16
    3924:	be 01       	movw	r22, r28
    3926:	6f 5f       	subi	r22, 0xFF	; 255
    3928:	7f 4f       	sbci	r23, 0xFF	; 255
    392a:	cf 01       	movw	r24, r30
    392c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xQueueGenericSendFromISR>
    3930:	01 c0       	rjmp	.+2      	; 0x3934 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3932:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3934:	27 96       	adiw	r28, 0x07	; 7
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	df 90       	pop	r13
    394e:	cf 90       	pop	r12
    3950:	bf 90       	pop	r11
    3952:	af 90       	pop	r10
    3954:	9f 90       	pop	r9
    3956:	8f 90       	pop	r8
    3958:	08 95       	ret

0000395a <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    395a:	2f 92       	push	r2
    395c:	3f 92       	push	r3
    395e:	4f 92       	push	r4
    3960:	5f 92       	push	r5
    3962:	6f 92       	push	r6
    3964:	7f 92       	push	r7
    3966:	8f 92       	push	r8
    3968:	9f 92       	push	r9
    396a:	af 92       	push	r10
    396c:	bf 92       	push	r11
    396e:	cf 92       	push	r12
    3970:	df 92       	push	r13
    3972:	ef 92       	push	r14
    3974:	ff 92       	push	r15
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3980:	cd d8       	rcall	.-3686   	; 0x2b1c <xTaskGetTickCount>
    3982:	2b 01       	movw	r4, r22
    3984:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3986:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <xLastTime.2432>
    398a:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <xLastTime.2432+0x1>
    398e:	a0 91 b5 19 	lds	r26, 0x19B5	; 0x8019b5 <xLastTime.2432+0x2>
    3992:	b0 91 b6 19 	lds	r27, 0x19B6	; 0x8019b6 <xLastTime.2432+0x3>
    3996:	48 16       	cp	r4, r24
    3998:	59 06       	cpc	r5, r25
    399a:	6a 06       	cpc	r6, r26
    399c:	7b 06       	cpc	r7, r27
    399e:	08 f0       	brcs	.+2      	; 0x39a2 <prvSampleTimeNow+0x48>
    39a0:	53 c0       	rjmp	.+166    	; 0x3a48 <prvSampleTimeNow+0xee>
    39a2:	3b c0       	rjmp	.+118    	; 0x3a1a <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    39a4:	07 80       	ldd	r0, Z+7	; 0x07
    39a6:	f0 85       	ldd	r31, Z+8	; 0x08
    39a8:	e0 2d       	mov	r30, r0
    39aa:	80 80       	ld	r8, Z
    39ac:	91 80       	ldd	r9, Z+1	; 0x01
    39ae:	a2 80       	ldd	r10, Z+2	; 0x02
    39b0:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    39b2:	c0 85       	ldd	r28, Z+8	; 0x08
    39b4:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    39b6:	8e 01       	movw	r16, r28
    39b8:	0e 5f       	subi	r16, 0xFE	; 254
    39ba:	1f 4f       	sbci	r17, 0xFF	; 255
    39bc:	c8 01       	movw	r24, r16
    39be:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    39c2:	ec 89       	ldd	r30, Y+20	; 0x14
    39c4:	fd 89       	ldd	r31, Y+21	; 0x15
    39c6:	ce 01       	movw	r24, r28
    39c8:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	82 ff       	sbrs	r24, 2
    39ce:	25 c0       	rjmp	.+74     	; 0x3a1a <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    39d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    39d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    39d4:	a8 89       	ldd	r26, Y+16	; 0x10
    39d6:	b9 89       	ldd	r27, Y+17	; 0x11
    39d8:	88 0d       	add	r24, r8
    39da:	99 1d       	adc	r25, r9
    39dc:	aa 1d       	adc	r26, r10
    39de:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    39e0:	88 16       	cp	r8, r24
    39e2:	99 06       	cpc	r9, r25
    39e4:	aa 06       	cpc	r10, r26
    39e6:	bb 06       	cpc	r11, r27
    39e8:	70 f4       	brcc	.+28     	; 0x3a06 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    39ea:	8a 83       	std	Y+2, r24	; 0x02
    39ec:	9b 83       	std	Y+3, r25	; 0x03
    39ee:	ac 83       	std	Y+4, r26	; 0x04
    39f0:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    39f2:	db 87       	std	Y+11, r29	; 0x0b
    39f4:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    39f6:	b8 01       	movw	r22, r16
    39f8:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <pxCurrentTimerList>
    39fc:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
    3a00:	0e 94 19 0b 	call	0x1632	; 0x1632 <vListInsert>
    3a04:	0a c0       	rjmp	.+20     	; 0x3a1a <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a06:	c1 2c       	mov	r12, r1
    3a08:	d1 2c       	mov	r13, r1
    3a0a:	76 01       	movw	r14, r12
    3a0c:	00 e0       	ldi	r16, 0x00	; 0
    3a0e:	10 e0       	ldi	r17, 0x00	; 0
    3a10:	a5 01       	movw	r20, r10
    3a12:	94 01       	movw	r18, r8
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	ce 01       	movw	r24, r28
    3a18:	42 df       	rcall	.-380    	; 0x389e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a1a:	e0 91 bd 19 	lds	r30, 0x19BD	; 0x8019bd <pxCurrentTimerList>
    3a1e:	f0 91 be 19 	lds	r31, 0x19BE	; 0x8019be <pxCurrentTimerList+0x1>
    3a22:	80 81       	ld	r24, Z
    3a24:	81 11       	cpse	r24, r1
    3a26:	be cf       	rjmp	.-132    	; 0x39a4 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3a28:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <pxOverflowTimerList>
    3a2c:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <pxOverflowTimerList+0x1>
    3a30:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <pxCurrentTimerList+0x1>
    3a34:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3a38:	f0 93 bc 19 	sts	0x19BC, r31	; 0x8019bc <pxOverflowTimerList+0x1>
    3a3c:	e0 93 bb 19 	sts	0x19BB, r30	; 0x8019bb <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	f1 01       	movw	r30, r2
    3a44:	80 83       	st	Z, r24
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3a48:	f1 01       	movw	r30, r2
    3a4a:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3a4c:	40 92 b3 19 	sts	0x19B3, r4	; 0x8019b3 <xLastTime.2432>
    3a50:	50 92 b4 19 	sts	0x19B4, r5	; 0x8019b4 <xLastTime.2432+0x1>
    3a54:	60 92 b5 19 	sts	0x19B5, r6	; 0x8019b5 <xLastTime.2432+0x2>
    3a58:	70 92 b6 19 	sts	0x19B6, r7	; 0x8019b6 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3a5c:	c3 01       	movw	r24, r6
    3a5e:	b2 01       	movw	r22, r4
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	ff 90       	pop	r15
    3a6a:	ef 90       	pop	r14
    3a6c:	df 90       	pop	r13
    3a6e:	cf 90       	pop	r12
    3a70:	bf 90       	pop	r11
    3a72:	af 90       	pop	r10
    3a74:	9f 90       	pop	r9
    3a76:	8f 90       	pop	r8
    3a78:	7f 90       	pop	r7
    3a7a:	6f 90       	pop	r6
    3a7c:	5f 90       	pop	r5
    3a7e:	4f 90       	pop	r4
    3a80:	3f 90       	pop	r3
    3a82:	2f 90       	pop	r2
    3a84:	08 95       	ret

00003a86 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3a86:	08 95       	ret

00003a88 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3a88:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3a8a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a8c:	2f ef       	ldi	r18, 0xFF	; 255
    3a8e:	80 e7       	ldi	r24, 0x70	; 112
    3a90:	92 e0       	ldi	r25, 0x02	; 2
    3a92:	21 50       	subi	r18, 0x01	; 1
    3a94:	80 40       	sbci	r24, 0x00	; 0
    3a96:	90 40       	sbci	r25, 0x00	; 0
    3a98:	e1 f7       	brne	.-8      	; 0x3a92 <vApplicationMallocFailedHook+0xa>
    3a9a:	00 c0       	rjmp	.+0      	; 0x3a9c <vApplicationMallocFailedHook+0x14>
    3a9c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3a9e:	1f 9a       	sbi	0x03, 7	; 3
    3aa0:	f5 cf       	rjmp	.-22     	; 0x3a8c <vApplicationMallocFailedHook+0x4>

00003aa2 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3aa2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3aa4:	2f 9a       	sbi	0x05, 7	; 5
    3aa6:	2f ef       	ldi	r18, 0xFF	; 255
    3aa8:	87 ea       	ldi	r24, 0xA7	; 167
    3aaa:	91 e6       	ldi	r25, 0x61	; 97
    3aac:	21 50       	subi	r18, 0x01	; 1
    3aae:	80 40       	sbci	r24, 0x00	; 0
    3ab0:	90 40       	sbci	r25, 0x00	; 0
    3ab2:	e1 f7       	brne	.-8      	; 0x3aac <vApplicationStackOverflowHook+0xa>
    3ab4:	00 c0       	rjmp	.+0      	; 0x3ab6 <vApplicationStackOverflowHook+0x14>
    3ab6:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3ab8:	1f 9a       	sbi	0x03, 7	; 3
    3aba:	f5 cf       	rjmp	.-22     	; 0x3aa6 <vApplicationStackOverflowHook+0x4>

00003abc <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{	
    3abc:	8f 92       	push	r8
    3abe:	9f 92       	push	r9
    3ac0:	af 92       	push	r10
    3ac2:	bf 92       	push	r11
    3ac4:	cf 92       	push	r12
    3ac6:	df 92       	push	r13
    3ac8:	ef 92       	push	r14
    3aca:	ff 92       	push	r15
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
	startMeasureEventGroup = xEventGroupCreate();
    3ad0:	0e 94 40 08 	call	0x1080	; 0x1080 <xEventGroupCreate>
    3ad4:	90 93 50 1b 	sts	0x1B50, r25	; 0x801b50 <startMeasureEventGroup+0x1>
    3ad8:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3adc:	0e 94 40 08 	call	0x1080	; 0x1080 <xEventGroupCreate>
    3ae0:	90 93 36 1b 	sts	0x1B36, r25	; 0x801b36 <readyEventGroup+0x1>
    3ae4:	80 93 35 1b 	sts	0x1B35, r24	; 0x801b35 <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	84 e6       	ldi	r24, 0x64	; 100
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	0e 94 92 11 	call	0x2324	; 0x2324 <xStreamBufferGenericCreate>
    3af6:	90 93 32 1b 	sts	0x1B32, r25	; 0x801b32 <xMessageBuffer+0x1>
    3afa:	80 93 31 1b 	sts	0x1B31, r24	; 0x801b31 <xMessageBuffer>
	_downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	8c e2       	ldi	r24, 0x2C	; 44
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	0e 94 92 11 	call	0x2324	; 0x2324 <xStreamBufferGenericCreate>
    3b0c:	90 93 34 1b 	sts	0x1B34, r25	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3b10:	80 93 33 1b 	sts	0x1B33, r24	; 0x801b33 <_downlinkMessagebuffer>
	
	configuration_create();
    3b14:	0e 94 31 03 	call	0x662	; 0x662 <configuration_create>
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(HUMIDITY_TASK_HANDLE, 
    3b18:	00 91 35 1b 	lds	r16, 0x1B35	; 0x801b35 <readyEventGroup>
    3b1c:	10 91 36 1b 	lds	r17, 0x1B36	; 0x801b36 <readyEventGroup+0x1>
    3b20:	60 91 4f 1b 	lds	r22, 0x1B4F	; 0x801b4f <startMeasureEventGroup>
    3b24:	70 91 50 1b 	lds	r23, 0x1B50	; 0x801b50 <startMeasureEventGroup+0x1>
    3b28:	c1 2c       	mov	r12, r1
    3b2a:	d1 2c       	mov	r13, r1
    3b2c:	76 01       	movw	r14, r12
    3b2e:	68 94       	set
    3b30:	c4 f8       	bld	r12, 4
    3b32:	21 e0       	ldi	r18, 0x01	; 1
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	50 e0       	ldi	r21, 0x00	; 0
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 94 17 06 	call	0xc2e	; 0xc2e <humAndTempReader_create>
    3b42:	4c 01       	movw	r8, r24
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);

	xTaskCreate(
    3b44:	e1 2c       	mov	r14, r1
    3b46:	f1 2c       	mov	r15, r1
    3b48:	01 e0       	ldi	r16, 0x01	; 1
    3b4a:	9c 01       	movw	r18, r24
    3b4c:	40 ec       	ldi	r20, 0xC0	; 192
    3b4e:	50 e0       	ldi	r21, 0x00	; 0
    3b50:	6d e9       	ldi	r22, 0x9D	; 157
    3b52:	75 e0       	ldi	r23, 0x05	; 5
    3b54:	8d ec       	ldi	r24, 0xCD	; 205
    3b56:	96 e0       	ldi	r25, 0x06	; 6
    3b58:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
	HUMIDITY_TASK_STACK,
	(void*)humidityAndTemperature,
	TASK_HUMIDITY_SENSOR_PRIORITY,
	HUMIDITY_TASK_HANDLE);
	
	co2reader_t co2reader = co2Reader_create(CO2_TASK_HANDLE, startMeasureEventGroup, BIT_MEASURE_CO2,
    3b5c:	00 91 35 1b 	lds	r16, 0x1B35	; 0x801b35 <readyEventGroup>
    3b60:	10 91 36 1b 	lds	r17, 0x1B36	; 0x801b36 <readyEventGroup+0x1>
    3b64:	60 91 4f 1b 	lds	r22, 0x1B4F	; 0x801b4f <startMeasureEventGroup>
    3b68:	70 91 50 1b 	lds	r23, 0x1B50	; 0x801b50 <startMeasureEventGroup+0x1>
    3b6c:	c1 2c       	mov	r12, r1
    3b6e:	d1 2c       	mov	r13, r1
    3b70:	76 01       	movw	r14, r12
    3b72:	68 94       	set
    3b74:	c5 f8       	bld	r12, 5
    3b76:	22 e0       	ldi	r18, 0x02	; 2
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 84 02 	call	0x508	; 0x508 <co2Reader_create>
    3b86:	5c 01       	movw	r10, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);

	xTaskCreate(
    3b88:	e1 2c       	mov	r14, r1
    3b8a:	f1 2c       	mov	r15, r1
    3b8c:	01 e0       	ldi	r16, 0x01	; 1
    3b8e:	9c 01       	movw	r18, r24
    3b90:	40 ec       	ldi	r20, 0xC0	; 192
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	6e ea       	ldi	r22, 0xAE	; 174
    3b96:	75 e0       	ldi	r23, 0x05	; 5
    3b98:	89 e2       	ldi	r24, 0x29	; 41
    3b9a:	93 e0       	ldi	r25, 0x03	; 3
    3b9c:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
	(void*)co2reader,
	TASK_CO2_SENSOR_PRIORITY,
	CO2_TASK_HANDLE);

	
	device_t device= device_create(DEVICE_TASK_HANDLE, startMeasureEventGroup, ALL_BIT_MEASURE,
    3ba0:	00 91 35 1b 	lds	r16, 0x1B35	; 0x801b35 <readyEventGroup>
    3ba4:	10 91 36 1b 	lds	r17, 0x1B36	; 0x801b36 <readyEventGroup+0x1>
    3ba8:	60 91 4f 1b 	lds	r22, 0x1B4F	; 0x801b4f <startMeasureEventGroup>
    3bac:	70 91 50 1b 	lds	r23, 0x1B50	; 0x801b50 <startMeasureEventGroup+0x1>
    3bb0:	80 91 32 1b 	lds	r24, 0x1B32	; 0x801b32 <xMessageBuffer+0x1>
    3bb4:	8f 93       	push	r24
    3bb6:	80 91 31 1b 	lds	r24, 0x1B31	; 0x801b31 <xMessageBuffer>
    3bba:	8f 93       	push	r24
    3bbc:	0f 2e       	mov	r0, r31
    3bbe:	f0 e3       	ldi	r31, 0x30	; 48
    3bc0:	cf 2e       	mov	r12, r31
    3bc2:	d1 2c       	mov	r13, r1
    3bc4:	e1 2c       	mov	r14, r1
    3bc6:	f1 2c       	mov	r15, r1
    3bc8:	f0 2d       	mov	r31, r0
    3bca:	23 e0       	ldi	r18, 0x03	; 3
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e0       	ldi	r20, 0x00	; 0
    3bd0:	50 e0       	ldi	r21, 0x00	; 0
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 10 04 	call	0x820	; 0x820 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature, xMessageBuffer);

	xTaskCreate(
    3bda:	e1 2c       	mov	r14, r1
    3bdc:	f1 2c       	mov	r15, r1
    3bde:	03 e0       	ldi	r16, 0x03	; 3
    3be0:	9c 01       	movw	r18, r24
    3be2:	40 ec       	ldi	r20, 0xC0	; 192
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	68 eb       	ldi	r22, 0xB8	; 184
    3be8:	75 e0       	ldi	r23, 0x05	; 5
    3bea:	81 e7       	ldi	r24, 0x71	; 113
    3bec:	95 e0       	ldi	r25, 0x05	; 5
    3bee:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
	DEVICE_TASK_STACK,
	(void*)device,
	TASK_DEVICE_PRIORITY,
	DEVICE_TASK_HANDLE);
	
	lora_UpLinkHandler_create(xMessageBuffer);
    3bf2:	80 91 31 1b 	lds	r24, 0x1B31	; 0x801b31 <xMessageBuffer>
    3bf6:	90 91 32 1b 	lds	r25, 0x1B32	; 0x801b32 <xMessageBuffer+0x1>
    3bfa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <lora_UpLinkHandler_create>

	xTaskCreate(
    3bfe:	20 91 31 1b 	lds	r18, 0x1B31	; 0x801b31 <xMessageBuffer>
    3c02:	30 91 32 1b 	lds	r19, 0x1B32	; 0x801b32 <xMessageBuffer+0x1>
    3c06:	48 e8       	ldi	r20, 0x88	; 136
    3c08:	51 e0       	ldi	r21, 0x01	; 1
    3c0a:	6f eb       	ldi	r22, 0xBF	; 191
    3c0c:	75 e0       	ldi	r23, 0x05	; 5
    3c0e:	80 e2       	ldi	r24, 0x20	; 32
    3c10:	98 e0       	ldi	r25, 0x08	; 8
    3c12:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
	LORA_UPLINK_TASK_STACK , // This stack size can be checked & adjusted by reading the Stack Highwater
	(void*)xMessageBuffer,
	TASK_LORA_UPLINK_PRIORITY,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	NULL );
	
	lora_DownLinkHandler_create(_downlinkMessagebuffer);
    3c16:	80 91 33 1b 	lds	r24, 0x1B33	; 0x801b33 <_downlinkMessagebuffer>
    3c1a:	90 91 34 1b 	lds	r25, 0x1B34	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3c1e:	0e 94 75 05 	call	0xaea	; 0xaea <lora_DownLinkHandler_create>
	xTaskCreate(
    3c22:	20 91 33 1b 	lds	r18, 0x1B33	; 0x801b33 <_downlinkMessagebuffer>
    3c26:	30 91 34 1b 	lds	r19, 0x1B34	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3c2a:	02 e0       	ldi	r16, 0x02	; 2
    3c2c:	48 e8       	ldi	r20, 0x88	; 136
    3c2e:	51 e0       	ldi	r21, 0x01	; 1
    3c30:	68 ec       	ldi	r22, 0xC8	; 200
    3c32:	75 e0       	ldi	r23, 0x05	; 5
    3c34:	8d e0       	ldi	r24, 0x0D	; 13
    3c36:	96 e0       	ldi	r25, 0x06	; 6
    3c38:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
	(const portCHAR *)"LRDHHand", // A name just for humans
	LORA_DOWNLINK_TASK_STACK,  // This stack size can be checked & adjusted by reading the Stack Highwater
	(void*)_downlinkMessagebuffer,
	TASK_LORA_DOWNLINK_PRIORITY, // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	NULL );
}
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	ff 90       	pop	r15
    3c46:	ef 90       	pop	r14
    3c48:	df 90       	pop	r13
    3c4a:	cf 90       	pop	r12
    3c4c:	bf 90       	pop	r11
    3c4e:	af 90       	pop	r10
    3c50:	9f 90       	pop	r9
    3c52:	8f 90       	pop	r8
    3c54:	08 95       	ret

00003c56 <initialiseSystem>:

/*-----------------------------------------------------------------------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3c56:	81 b1       	in	r24, 0x01	; 1
    3c58:	81 68       	ori	r24, 0x81	; 129
    3c5a:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    3c5c:	0e 94 2a 08 	call	0x1054	; 0x1054 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	0e 94 f5 29 	call	0x53ea	; 0x53ea <stdioCreate>
	// Let's create some tasks
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3c66:	85 e0       	ldi	r24, 0x05	; 5
    3c68:	11 d0       	rcall	.+34     	; 0x3c8c <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, _downlinkMessagebuffer);
    3c6a:	60 91 33 1b 	lds	r22, 0x1B33	; 0x801b33 <_downlinkMessagebuffer>
    3c6e:	70 91 34 1b 	lds	r23, 0x1B34	; 0x801b34 <_downlinkMessagebuffer+0x1>
    3c72:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 3 
	
	hih8120Create();
    3c74:	c3 d3       	rcall	.+1926   	; 0x43fc <lora_driver_create>
    3c76:	69 c0       	rjmp	.+210    	; 0x3d4a <hih8120Create>
    3c78:	08 95       	ret

00003c7a <main>:
}

/*----------------------------------------------------------------------------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3c7a:	ed df       	rcall	.-38     	; 0x3c56 <initialiseSystem>
	printf("Program Started!!\n");
    3c7c:	81 ed       	ldi	r24, 0xD1	; 209
    3c7e:	95 e0       	ldi	r25, 0x05	; 5
    3c80:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <puts>
	create_tasks_and_semaphores();
    3c84:	1b df       	rcall	.-458    	; 0x3abc <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3c86:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <vTaskStartScheduler>
    3c8a:	ff cf       	rjmp	.-2      	; 0x3c8a <main+0x10>

00003c8c <hal_create>:
    3c8c:	e1 e5       	ldi	r30, 0x51	; 81
    3c8e:	fb e1       	ldi	r31, 0x1B	; 27
    3c90:	23 e5       	ldi	r18, 0x53	; 83
    3c92:	35 e2       	ldi	r19, 0x25	; 37
    3c94:	31 83       	std	Z+1, r19	; 0x01
    3c96:	20 83       	st	Z, r18
    3c98:	26 e5       	ldi	r18, 0x56	; 86
    3c9a:	35 e2       	ldi	r19, 0x25	; 37
    3c9c:	33 83       	std	Z+3, r19	; 0x03
    3c9e:	22 83       	std	Z+2, r18	; 0x02
    3ca0:	21 e6       	ldi	r18, 0x61	; 97
    3ca2:	35 e2       	ldi	r19, 0x25	; 37
    3ca4:	35 83       	std	Z+5, r19	; 0x05
    3ca6:	24 83       	std	Z+4, r18	; 0x04
    3ca8:	25 e6       	ldi	r18, 0x65	; 101
    3caa:	35 e2       	ldi	r19, 0x25	; 37
    3cac:	37 83       	std	Z+7, r19	; 0x07
    3cae:	26 83       	std	Z+6, r18	; 0x06
    3cb0:	2b e6       	ldi	r18, 0x6B	; 107
    3cb2:	35 e2       	ldi	r19, 0x25	; 37
    3cb4:	31 87       	std	Z+9, r19	; 0x09
    3cb6:	20 87       	std	Z+8, r18	; 0x08
    3cb8:	27 e7       	ldi	r18, 0x77	; 119
    3cba:	35 e2       	ldi	r19, 0x25	; 37
    3cbc:	33 87       	std	Z+11, r19	; 0x0b
    3cbe:	22 87       	std	Z+10, r18	; 0x0a
    3cc0:	2c e7       	ldi	r18, 0x7C	; 124
    3cc2:	35 e2       	ldi	r19, 0x25	; 37
    3cc4:	35 87       	std	Z+13, r19	; 0x0d
    3cc6:	24 87       	std	Z+12, r18	; 0x0c
    3cc8:	28 e8       	ldi	r18, 0x88	; 136
    3cca:	35 e2       	ldi	r19, 0x25	; 37
    3ccc:	37 87       	std	Z+15, r19	; 0x0f
    3cce:	26 87       	std	Z+14, r18	; 0x0e
    3cd0:	28 e6       	ldi	r18, 0x68	; 104
    3cd2:	35 e2       	ldi	r19, 0x25	; 37
    3cd4:	31 8b       	std	Z+17, r19	; 0x11
    3cd6:	20 8b       	std	Z+16, r18	; 0x10
    3cd8:	2d e8       	ldi	r18, 0x8D	; 141
    3cda:	35 e2       	ldi	r19, 0x25	; 37
    3cdc:	33 8b       	std	Z+19, r19	; 0x13
    3cde:	22 8b       	std	Z+18, r18	; 0x12
    3ce0:	2a e9       	ldi	r18, 0x9A	; 154
    3ce2:	35 e2       	ldi	r19, 0x25	; 37
    3ce4:	35 8b       	std	Z+21, r19	; 0x15
    3ce6:	24 8b       	std	Z+20, r18	; 0x14
    3ce8:	68 2f       	mov	r22, r24
    3cea:	cf 01       	movw	r24, r30
    3cec:	53 c1       	rjmp	.+678    	; 0x3f94 <led_create>
    3cee:	08 95       	ret

00003cf0 <_hihTwiCallback>:
    3cf0:	65 30       	cpi	r22, 0x05	; 5
    3cf2:	f1 f4       	brne	.+60     	; 0x3d30 <_hihTwiCallback+0x40>
    3cf4:	fa 01       	movw	r30, r20
    3cf6:	80 81       	ld	r24, Z
    3cf8:	8f 73       	andi	r24, 0x3F	; 63
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	98 2f       	mov	r25, r24
    3cfe:	88 27       	eor	r24, r24
    3d00:	21 81       	ldd	r18, Z+1	; 0x01
    3d02:	82 2b       	or	r24, r18
    3d04:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3d08:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	f0 e4       	ldi	r31, 0x40	; 64
    3d10:	8f 9f       	mul	r24, r31
    3d12:	c0 01       	movw	r24, r0
    3d14:	11 24       	eor	r1, r1
    3d16:	fa 01       	movw	r30, r20
    3d18:	23 81       	ldd	r18, Z+3	; 0x03
    3d1a:	26 95       	lsr	r18
    3d1c:	26 95       	lsr	r18
    3d1e:	82 2b       	or	r24, r18
    3d20:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3d24:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	80 93 d5 19 	sts	0x19D5, r24	; 0x8019d5 <_measuringIsReady>
    3d2e:	08 95       	ret
    3d30:	64 30       	cpi	r22, 0x04	; 4
    3d32:	51 f0       	breq	.+20     	; 0x3d48 <_hihTwiCallback+0x58>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e4       	ldi	r25, 0x40	; 64
    3d38:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3d3c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3d40:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3d44:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3d48:	08 95       	ret

00003d4a <hih8120Create>:
    3d4a:	0f 93       	push	r16
    3d4c:	1f 93       	push	r17
    3d4e:	08 e7       	ldi	r16, 0x78	; 120
    3d50:	1e e1       	ldi	r17, 0x1E	; 30
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	34 e2       	ldi	r19, 0x24	; 36
    3d56:	44 ef       	ldi	r20, 0xF4	; 244
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	87 e2       	ldi	r24, 0x27	; 39
    3d5e:	0e 94 2f 2a 	call	0x545e	; 0x545e <twiCreate>
    3d62:	90 93 d7 19 	sts	0x19D7, r25	; 0x8019d7 <_hih8120Handler+0x1>
    3d66:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_hih8120Handler>
    3d6a:	21 e0       	ldi	r18, 0x01	; 1
    3d6c:	89 2b       	or	r24, r25
    3d6e:	09 f0       	breq	.+2      	; 0x3d72 <hih8120Create+0x28>
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	82 2f       	mov	r24, r18
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	08 95       	ret

00003d7a <hih8120IsReady>:
    3d7a:	80 91 d5 19 	lds	r24, 0x19D5	; 0x8019d5 <_measuringIsReady>
    3d7e:	08 95       	ret

00003d80 <hih8120Wakeup>:
    3d80:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <_hih8120Handler>
    3d84:	90 91 d7 19 	lds	r25, 0x19D7	; 0x8019d7 <_hih8120Handler+0x1>
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	59 f0       	breq	.+22     	; 0x3da2 <hih8120Wakeup+0x22>
    3d8c:	40 e0       	ldi	r20, 0x00	; 0
    3d8e:	60 e0       	ldi	r22, 0x00	; 0
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	0e 94 80 2a 	call	0x5500	; 0x5500 <twiTransmit>
    3d96:	84 30       	cpi	r24, 0x04	; 4
    3d98:	31 f4       	brne	.+12     	; 0x3da6 <hih8120Wakeup+0x26>
    3d9a:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <_measuringIsReady>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	08 95       	ret
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	08 95       	ret
    3da6:	83 e0       	ldi	r24, 0x03	; 3
    3da8:	08 95       	ret

00003daa <hih8120Meassure>:
    3daa:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <_hih8120Handler>
    3dae:	90 91 d7 19 	lds	r25, 0x19D7	; 0x8019d7 <_hih8120Handler+0x1>
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	39 f0       	breq	.+14     	; 0x3dc4 <hih8120Meassure+0x1a>
    3db6:	64 e0       	ldi	r22, 0x04	; 4
    3db8:	0e 94 cc 2a 	call	0x5598	; 0x5598 <twiReceive>
    3dbc:	85 30       	cpi	r24, 0x05	; 5
    3dbe:	21 f0       	breq	.+8      	; 0x3dc8 <hih8120Meassure+0x1e>
    3dc0:	83 e0       	ldi	r24, 0x03	; 3
    3dc2:	08 95       	ret
    3dc4:	82 e0       	ldi	r24, 0x02	; 2
    3dc6:	08 95       	ret
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	08 95       	ret

00003dcc <hih8120GetHumidity>:
    3dcc:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3dd0:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__floatunsisf>
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	48 ec       	ldi	r20, 0xC8	; 200
    3de2:	52 e4       	ldi	r21, 0x42	; 66
    3de4:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__mulsf3>
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	38 ef       	ldi	r19, 0xF8	; 248
    3dec:	4f e7       	ldi	r20, 0x7F	; 127
    3dee:	56 e4       	ldi	r21, 0x46	; 70
    3df0:	0c 94 3d 2c 	jmp	0x587a	; 0x587a <__divsf3>
    3df4:	08 95       	ret

00003df6 <hih8120GetHumidityPercent_x10>:
    3df6:	ea df       	rcall	.-44     	; 0x3dcc <hih8120GetHumidity>
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e2       	ldi	r20, 0x20	; 32
    3dfe:	51 e4       	ldi	r21, 0x41	; 65
    3e00:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__mulsf3>
    3e04:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__fixunssfsi>
    3e08:	cb 01       	movw	r24, r22
    3e0a:	08 95       	ret

00003e0c <hih8120GetTemperature>:
    3e0c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3e10:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__floatunsisf>
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	45 e2       	ldi	r20, 0x25	; 37
    3e22:	53 e4       	ldi	r21, 0x43	; 67
    3e24:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__mulsf3>
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	38 ef       	ldi	r19, 0xF8	; 248
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	56 e4       	ldi	r21, 0x46	; 70
    3e30:	0e 94 3d 2c 	call	0x587a	; 0x587a <__divsf3>
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e2       	ldi	r20, 0x20	; 32
    3e3a:	52 e4       	ldi	r21, 0x42	; 66
    3e3c:	0c 94 d8 2b 	jmp	0x57b0	; 0x57b0 <__subsf3>
    3e40:	08 95       	ret

00003e42 <hih8120GetTemperature_x10>:
    3e42:	e4 df       	rcall	.-56     	; 0x3e0c <hih8120GetTemperature>
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e2       	ldi	r20, 0x20	; 32
    3e4a:	51 e4       	ldi	r21, 0x41	; 65
    3e4c:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__mulsf3>
    3e50:	0e 94 a5 2c 	call	0x594a	; 0x594a <__fixsfsi>
    3e54:	cb 01       	movw	r24, r22
    3e56:	08 95       	ret

00003e58 <_turn_off>:
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	fc 01       	movw	r30, r24
    3e60:	ee 0f       	add	r30, r30
    3e62:	ff 1f       	adc	r31, r31
    3e64:	e8 0f       	add	r30, r24
    3e66:	f9 1f       	adc	r31, r25
    3e68:	ee 0f       	add	r30, r30
    3e6a:	ff 1f       	adc	r31, r31
    3e6c:	e8 52       	subi	r30, 0x28	; 40
    3e6e:	f6 4e       	sbci	r31, 0xE6	; 230
    3e70:	23 81       	ldd	r18, Z+3	; 0x03
    3e72:	21 11       	cpse	r18, r1
    3e74:	0a c0       	rjmp	.+20     	; 0x3e8a <_turn_off+0x32>
    3e76:	ef 01       	movw	r28, r30
    3e78:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    3e7c:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    3e80:	6a 81       	ldd	r22, Y+2	; 0x02
    3e82:	88 81       	ld	r24, Y
    3e84:	99 81       	ldd	r25, Y+1	; 0x01
    3e86:	19 95       	eicall
    3e88:	12 c0       	rjmp	.+36     	; 0x3eae <_turn_off+0x56>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	aa 0f       	add	r26, r26
    3e8e:	bb 1f       	adc	r27, r27
    3e90:	ed 01       	movw	r28, r26
    3e92:	c8 0f       	add	r28, r24
    3e94:	d9 1f       	adc	r29, r25
    3e96:	cc 0f       	add	r28, r28
    3e98:	dd 1f       	adc	r29, r29
    3e9a:	c8 52       	subi	r28, 0x28	; 40
    3e9c:	d6 4e       	sbci	r29, 0xE6	; 230
    3e9e:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <register_access+0x12>
    3ea2:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <register_access+0x13>
    3ea6:	6a 81       	ldd	r22, Y+2	; 0x02
    3ea8:	88 81       	ld	r24, Y
    3eaa:	99 81       	ldd	r25, Y+1	; 0x01
    3eac:	19 95       	eicall
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	08 95       	ret

00003eb4 <_turn_on>:
    3eb4:	cf 93       	push	r28
    3eb6:	df 93       	push	r29
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	fc 01       	movw	r30, r24
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	e8 0f       	add	r30, r24
    3ec2:	f9 1f       	adc	r31, r25
    3ec4:	ee 0f       	add	r30, r30
    3ec6:	ff 1f       	adc	r31, r31
    3ec8:	e8 52       	subi	r30, 0x28	; 40
    3eca:	f6 4e       	sbci	r31, 0xE6	; 230
    3ecc:	23 81       	ldd	r18, Z+3	; 0x03
    3ece:	21 11       	cpse	r18, r1
    3ed0:	0a c0       	rjmp	.+20     	; 0x3ee6 <_turn_on+0x32>
    3ed2:	ef 01       	movw	r28, r30
    3ed4:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <register_access+0x12>
    3ed8:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <register_access+0x13>
    3edc:	6a 81       	ldd	r22, Y+2	; 0x02
    3ede:	88 81       	ld	r24, Y
    3ee0:	99 81       	ldd	r25, Y+1	; 0x01
    3ee2:	19 95       	eicall
    3ee4:	12 c0       	rjmp	.+36     	; 0x3f0a <_turn_on+0x56>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	aa 0f       	add	r26, r26
    3eea:	bb 1f       	adc	r27, r27
    3eec:	ed 01       	movw	r28, r26
    3eee:	c8 0f       	add	r28, r24
    3ef0:	d9 1f       	adc	r29, r25
    3ef2:	cc 0f       	add	r28, r28
    3ef4:	dd 1f       	adc	r29, r29
    3ef6:	c8 52       	subi	r28, 0x28	; 40
    3ef8:	d6 4e       	sbci	r29, 0xE6	; 230
    3efa:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    3efe:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    3f02:	6a 81       	ldd	r22, Y+2	; 0x02
    3f04:	88 81       	ld	r24, Y
    3f06:	99 81       	ldd	r25, Y+1	; 0x01
    3f08:	19 95       	eicall
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	08 95       	ret

00003f10 <_hal_led_task>:
    3f10:	0f 2e       	mov	r0, r31
    3f12:	f1 e5       	ldi	r31, 0x51	; 81
    3f14:	cf 2e       	mov	r12, r31
    3f16:	fb e1       	ldi	r31, 0x1B	; 27
    3f18:	df 2e       	mov	r13, r31
    3f1a:	f0 2d       	mov	r31, r0
    3f1c:	04 e0       	ldi	r16, 0x04	; 4
    3f1e:	c8 ed       	ldi	r28, 0xD8	; 216
    3f20:	d9 e1       	ldi	r29, 0x19	; 25
    3f22:	10 e0       	ldi	r17, 0x00	; 0
    3f24:	8c 81       	ldd	r24, Y+4	; 0x04
    3f26:	81 30       	cpi	r24, 0x01	; 1
    3f28:	69 f0       	breq	.+26     	; 0x3f44 <_hal_led_task+0x34>
    3f2a:	e8 f0       	brcs	.+58     	; 0x3f66 <_hal_led_task+0x56>
    3f2c:	82 30       	cpi	r24, 0x02	; 2
    3f2e:	39 f5       	brne	.+78     	; 0x3f7e <_hal_led_task+0x6e>
    3f30:	d6 01       	movw	r26, r12
    3f32:	1c 96       	adiw	r26, 0x0c	; 12
    3f34:	ed 91       	ld	r30, X+
    3f36:	fc 91       	ld	r31, X
    3f38:	1d 97       	sbiw	r26, 0x0d	; 13
    3f3a:	6a 81       	ldd	r22, Y+2	; 0x02
    3f3c:	88 81       	ld	r24, Y
    3f3e:	99 81       	ldd	r25, Y+1	; 0x01
    3f40:	19 95       	eicall
    3f42:	1d c0       	rjmp	.+58     	; 0x3f7e <_hal_led_task+0x6e>
    3f44:	8d 81       	ldd	r24, Y+5	; 0x05
    3f46:	8f 5f       	subi	r24, 0xFF	; 255
    3f48:	8a 30       	cpi	r24, 0x0A	; 10
    3f4a:	10 f4       	brcc	.+4      	; 0x3f50 <_hal_led_task+0x40>
    3f4c:	8d 83       	std	Y+5, r24	; 0x05
    3f4e:	17 c0       	rjmp	.+46     	; 0x3f7e <_hal_led_task+0x6e>
    3f50:	1d 82       	std	Y+5, r1	; 0x05
    3f52:	d6 01       	movw	r26, r12
    3f54:	1c 96       	adiw	r26, 0x0c	; 12
    3f56:	ed 91       	ld	r30, X+
    3f58:	fc 91       	ld	r31, X
    3f5a:	1d 97       	sbiw	r26, 0x0d	; 13
    3f5c:	6a 81       	ldd	r22, Y+2	; 0x02
    3f5e:	88 81       	ld	r24, Y
    3f60:	99 81       	ldd	r25, Y+1	; 0x01
    3f62:	19 95       	eicall
    3f64:	0c c0       	rjmp	.+24     	; 0x3f7e <_hal_led_task+0x6e>
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	88 23       	and	r24, r24
    3f6a:	31 f0       	breq	.+12     	; 0x3f78 <_hal_led_task+0x68>
    3f6c:	81 2f       	mov	r24, r17
    3f6e:	a2 df       	rcall	.-188    	; 0x3eb4 <_turn_on>
    3f70:	8d 81       	ldd	r24, Y+5	; 0x05
    3f72:	81 50       	subi	r24, 0x01	; 1
    3f74:	8d 83       	std	Y+5, r24	; 0x05
    3f76:	03 c0       	rjmp	.+6      	; 0x3f7e <_hal_led_task+0x6e>
    3f78:	0c 83       	std	Y+4, r16	; 0x04
    3f7a:	81 2f       	mov	r24, r17
    3f7c:	6d df       	rcall	.-294    	; 0x3e58 <_turn_off>
    3f7e:	1f 5f       	subi	r17, 0xFF	; 255
    3f80:	26 96       	adiw	r28, 0x06	; 6
    3f82:	14 30       	cpi	r17, 0x04	; 4
    3f84:	79 f6       	brne	.-98     	; 0x3f24 <_hal_led_task+0x14>
    3f86:	65 e0       	ldi	r22, 0x05	; 5
    3f88:	70 e0       	ldi	r23, 0x00	; 0
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <vTaskDelay>
    3f92:	c5 cf       	rjmp	.-118    	; 0x3f1e <_hal_led_task+0xe>

00003f94 <led_create>:
    3f94:	cf 92       	push	r12
    3f96:	df 92       	push	r13
    3f98:	ef 92       	push	r14
    3f9a:	ff 92       	push	r15
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    3fa4:	06 2f       	mov	r16, r22
    3fa6:	0f 2e       	mov	r0, r31
    3fa8:	f1 e5       	ldi	r31, 0x51	; 81
    3faa:	ef 2e       	mov	r14, r31
    3fac:	fb e1       	ldi	r31, 0x1B	; 27
    3fae:	ff 2e       	mov	r15, r31
    3fb0:	f0 2d       	mov	r31, r0
    3fb2:	d7 01       	movw	r26, r14
    3fb4:	18 96       	adiw	r26, 0x08	; 8
    3fb6:	ed 91       	ld	r30, X+
    3fb8:	fc 91       	ld	r31, X
    3fba:	19 97       	sbiw	r26, 0x09	; 9
    3fbc:	66 e0       	ldi	r22, 0x06	; 6
    3fbe:	87 e2       	ldi	r24, 0x27	; 39
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	19 95       	eicall
    3fc4:	c8 ed       	ldi	r28, 0xD8	; 216
    3fc6:	d9 e1       	ldi	r29, 0x19	; 25
    3fc8:	0f 2e       	mov	r0, r31
    3fca:	f8 e2       	ldi	r31, 0x28	; 40
    3fcc:	cf 2e       	mov	r12, r31
    3fce:	d1 2c       	mov	r13, r1
    3fd0:	f0 2d       	mov	r31, r0
    3fd2:	d9 82       	std	Y+1, r13	; 0x01
    3fd4:	c8 82       	st	Y, r12
    3fd6:	86 e0       	ldi	r24, 0x06	; 6
    3fd8:	8a 83       	std	Y+2, r24	; 0x02
    3fda:	1b 82       	std	Y+3, r1	; 0x03
    3fdc:	14 e0       	ldi	r17, 0x04	; 4
    3fde:	1c 83       	std	Y+4, r17	; 0x04
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	3a df       	rcall	.-396    	; 0x3e58 <_turn_off>
    3fe4:	d7 01       	movw	r26, r14
    3fe6:	18 96       	adiw	r26, 0x08	; 8
    3fe8:	ed 91       	ld	r30, X+
    3fea:	fc 91       	ld	r31, X
    3fec:	19 97       	sbiw	r26, 0x09	; 9
    3fee:	67 e0       	ldi	r22, 0x07	; 7
    3ff0:	87 e2       	ldi	r24, 0x27	; 39
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	19 95       	eicall
    3ff6:	df 82       	std	Y+7, r13	; 0x07
    3ff8:	ce 82       	std	Y+6, r12	; 0x06
    3ffa:	87 e0       	ldi	r24, 0x07	; 7
    3ffc:	88 87       	std	Y+8, r24	; 0x08
    3ffe:	19 86       	std	Y+9, r1	; 0x09
    4000:	1a 87       	std	Y+10, r17	; 0x0a
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	29 df       	rcall	.-430    	; 0x3e58 <_turn_off>
    4006:	d7 01       	movw	r26, r14
    4008:	18 96       	adiw	r26, 0x08	; 8
    400a:	ed 91       	ld	r30, X+
    400c:	fc 91       	ld	r31, X
    400e:	19 97       	sbiw	r26, 0x09	; 9
    4010:	65 e0       	ldi	r22, 0x05	; 5
    4012:	83 e3       	ldi	r24, 0x33	; 51
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	19 95       	eicall
    4018:	d7 01       	movw	r26, r14
    401a:	18 96       	adiw	r26, 0x08	; 8
    401c:	ed 91       	ld	r30, X+
    401e:	fc 91       	ld	r31, X
    4020:	19 97       	sbiw	r26, 0x09	; 9
    4022:	61 e0       	ldi	r22, 0x01	; 1
    4024:	84 e3       	ldi	r24, 0x34	; 52
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	19 95       	eicall
    402a:	84 e3       	ldi	r24, 0x34	; 52
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	9d 87       	std	Y+13, r25	; 0x0d
    4030:	8c 87       	std	Y+12, r24	; 0x0c
    4032:	85 e0       	ldi	r24, 0x05	; 5
    4034:	8e 87       	std	Y+14, r24	; 0x0e
    4036:	1f 86       	std	Y+15, r1	; 0x0f
    4038:	18 8b       	std	Y+16, r17	; 0x10
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	0d df       	rcall	.-486    	; 0x3e58 <_turn_off>
    403e:	d7 01       	movw	r26, r14
    4040:	18 96       	adiw	r26, 0x08	; 8
    4042:	ed 91       	ld	r30, X+
    4044:	fc 91       	ld	r31, X
    4046:	19 97       	sbiw	r26, 0x09	; 9
    4048:	64 e0       	ldi	r22, 0x04	; 4
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	91 e0       	ldi	r25, 0x01	; 1
    404e:	19 95       	eicall
    4050:	d7 01       	movw	r26, r14
    4052:	18 96       	adiw	r26, 0x08	; 8
    4054:	ed 91       	ld	r30, X+
    4056:	fc 91       	ld	r31, X
    4058:	19 97       	sbiw	r26, 0x09	; 9
    405a:	61 e0       	ldi	r22, 0x01	; 1
    405c:	82 e0       	ldi	r24, 0x02	; 2
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	19 95       	eicall
    4062:	82 e0       	ldi	r24, 0x02	; 2
    4064:	91 e0       	ldi	r25, 0x01	; 1
    4066:	9b 8b       	std	Y+19, r25	; 0x13
    4068:	8a 8b       	std	Y+18, r24	; 0x12
    406a:	1c 8b       	std	Y+20, r17	; 0x14
    406c:	1d 8a       	std	Y+21, r1	; 0x15
    406e:	1e 8b       	std	Y+22, r17	; 0x16
    4070:	83 e0       	ldi	r24, 0x03	; 3
    4072:	f2 de       	rcall	.-540    	; 0x3e58 <_turn_off>
    4074:	e1 2c       	mov	r14, r1
    4076:	f1 2c       	mov	r15, r1
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 ec       	ldi	r20, 0xC0	; 192
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	63 ee       	ldi	r22, 0xE3	; 227
    4082:	75 e0       	ldi	r23, 0x05	; 5
    4084:	88 e8       	ldi	r24, 0x88	; 136
    4086:	9f e1       	ldi	r25, 0x1F	; 31
    4088:	0e 94 2d 14 	call	0x285a	; 0x285a <xTaskCreate>
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	ff 90       	pop	r15
    4096:	ef 90       	pop	r14
    4098:	df 90       	pop	r13
    409a:	cf 90       	pop	r12
    409c:	08 95       	ret

0000409e <led_slow_blink>:
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	c8 2f       	mov	r28, r24
    40a8:	d0 e0       	ldi	r29, 0x00	; 0
    40aa:	8e 01       	movw	r16, r28
    40ac:	00 0f       	add	r16, r16
    40ae:	11 1f       	adc	r17, r17
    40b0:	d8 01       	movw	r26, r16
    40b2:	ac 0f       	add	r26, r28
    40b4:	bd 1f       	adc	r27, r29
    40b6:	aa 0f       	add	r26, r26
    40b8:	bb 1f       	adc	r27, r27
    40ba:	a8 52       	subi	r26, 0x28	; 40
    40bc:	b6 4e       	sbci	r27, 0xE6	; 230
    40be:	e0 91 5d 1b 	lds	r30, 0x1B5D	; 0x801b5d <register_access+0xc>
    40c2:	f0 91 5e 1b 	lds	r31, 0x1B5E	; 0x801b5e <register_access+0xd>
    40c6:	12 96       	adiw	r26, 0x02	; 2
    40c8:	6c 91       	ld	r22, X
    40ca:	12 97       	sbiw	r26, 0x02	; 2
    40cc:	8d 91       	ld	r24, X+
    40ce:	9c 91       	ld	r25, X
    40d0:	19 95       	eicall
    40d2:	c0 0f       	add	r28, r16
    40d4:	d1 1f       	adc	r29, r17
    40d6:	cc 0f       	add	r28, r28
    40d8:	dd 1f       	adc	r29, r29
    40da:	c8 52       	subi	r28, 0x28	; 40
    40dc:	d6 4e       	sbci	r29, 0xE6	; 230
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	8c 83       	std	Y+4, r24	; 0x04
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	08 95       	ret

000040ec <led_fast_blink>:
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	cf 93       	push	r28
    40f2:	df 93       	push	r29
    40f4:	c8 2f       	mov	r28, r24
    40f6:	d0 e0       	ldi	r29, 0x00	; 0
    40f8:	8e 01       	movw	r16, r28
    40fa:	00 0f       	add	r16, r16
    40fc:	11 1f       	adc	r17, r17
    40fe:	d8 01       	movw	r26, r16
    4100:	ac 0f       	add	r26, r28
    4102:	bd 1f       	adc	r27, r29
    4104:	aa 0f       	add	r26, r26
    4106:	bb 1f       	adc	r27, r27
    4108:	a8 52       	subi	r26, 0x28	; 40
    410a:	b6 4e       	sbci	r27, 0xE6	; 230
    410c:	e0 91 5d 1b 	lds	r30, 0x1B5D	; 0x801b5d <register_access+0xc>
    4110:	f0 91 5e 1b 	lds	r31, 0x1B5E	; 0x801b5e <register_access+0xd>
    4114:	12 96       	adiw	r26, 0x02	; 2
    4116:	6c 91       	ld	r22, X
    4118:	12 97       	sbiw	r26, 0x02	; 2
    411a:	8d 91       	ld	r24, X+
    411c:	9c 91       	ld	r25, X
    411e:	19 95       	eicall
    4120:	c0 0f       	add	r28, r16
    4122:	d1 1f       	adc	r29, r17
    4124:	cc 0f       	add	r28, r28
    4126:	dd 1f       	adc	r29, r29
    4128:	c8 52       	subi	r28, 0x28	; 40
    412a:	d6 4e       	sbci	r29, 0xE6	; 230
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	8c 83       	std	Y+4, r24	; 0x04
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	1f 91       	pop	r17
    4136:	0f 91       	pop	r16
    4138:	08 95       	ret

0000413a <led_led_on>:
    413a:	28 2f       	mov	r18, r24
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	f9 01       	movw	r30, r18
    4140:	ee 0f       	add	r30, r30
    4142:	ff 1f       	adc	r31, r31
    4144:	e2 0f       	add	r30, r18
    4146:	f3 1f       	adc	r31, r19
    4148:	ee 0f       	add	r30, r30
    414a:	ff 1f       	adc	r31, r31
    414c:	e8 52       	subi	r30, 0x28	; 40
    414e:	f6 4e       	sbci	r31, 0xE6	; 230
    4150:	93 e0       	ldi	r25, 0x03	; 3
    4152:	94 83       	std	Z+4, r25	; 0x04
    4154:	af ce       	rjmp	.-674    	; 0x3eb4 <_turn_on>
    4156:	08 95       	ret

00004158 <led_led_off>:
    4158:	28 2f       	mov	r18, r24
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	f9 01       	movw	r30, r18
    415e:	ee 0f       	add	r30, r30
    4160:	ff 1f       	adc	r31, r31
    4162:	e2 0f       	add	r30, r18
    4164:	f3 1f       	adc	r31, r19
    4166:	ee 0f       	add	r30, r30
    4168:	ff 1f       	adc	r31, r31
    416a:	e8 52       	subi	r30, 0x28	; 40
    416c:	f6 4e       	sbci	r31, 0xE6	; 230
    416e:	94 e0       	ldi	r25, 0x04	; 4
    4170:	94 83       	std	Z+4, r25	; 0x04
    4172:	72 ce       	rjmp	.-796    	; 0x3e58 <_turn_off>
    4174:	08 95       	ret

00004176 <led_long_puls>:
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	fc 01       	movw	r30, r24
    417a:	ee 0f       	add	r30, r30
    417c:	ff 1f       	adc	r31, r31
    417e:	df 01       	movw	r26, r30
    4180:	a8 0f       	add	r26, r24
    4182:	b9 1f       	adc	r27, r25
    4184:	aa 0f       	add	r26, r26
    4186:	bb 1f       	adc	r27, r27
    4188:	a8 52       	subi	r26, 0x28	; 40
    418a:	b6 4e       	sbci	r27, 0xE6	; 230
    418c:	24 e0       	ldi	r18, 0x04	; 4
    418e:	15 96       	adiw	r26, 0x05	; 5
    4190:	2c 93       	st	X, r18
    4192:	15 97       	sbiw	r26, 0x05	; 5
    4194:	fd 01       	movw	r30, r26
    4196:	14 82       	std	Z+4, r1	; 0x04
    4198:	08 95       	ret

0000419a <led_short_puls>:
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	fc 01       	movw	r30, r24
    419e:	ee 0f       	add	r30, r30
    41a0:	ff 1f       	adc	r31, r31
    41a2:	df 01       	movw	r26, r30
    41a4:	a8 0f       	add	r26, r24
    41a6:	b9 1f       	adc	r27, r25
    41a8:	aa 0f       	add	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	a8 52       	subi	r26, 0x28	; 40
    41ae:	b6 4e       	sbci	r27, 0xE6	; 230
    41b0:	21 e0       	ldi	r18, 0x01	; 1
    41b2:	15 96       	adiw	r26, 0x05	; 5
    41b4:	2c 93       	st	X, r18
    41b6:	15 97       	sbiw	r26, 0x05	; 5
    41b8:	fd 01       	movw	r30, r26
    41ba:	14 82       	std	Z+4, r1	; 0x04
    41bc:	08 95       	ret

000041be <_serial_call_back>:
    41be:	0f 93       	push	r16
    41c0:	1f 93       	push	r17
    41c2:	cf 93       	push	r28
    41c4:	df 93       	push	r29
    41c6:	1f 92       	push	r1
    41c8:	1f 92       	push	r1
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    41ce:	8c 01       	movw	r16, r24
    41d0:	19 82       	std	Y+1, r1	; 0x01
    41d2:	2d c0       	rjmp	.+90     	; 0x422e <_serial_call_back+0x70>
    41d4:	e0 91 54 1a 	lds	r30, 0x1A54	; 0x801a54 <rec_buf_inp.2947>
    41d8:	ec 32       	cpi	r30, 0x2C	; 44
    41da:	50 f4       	brcc	.+20     	; 0x41f0 <_serial_call_back+0x32>
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	8e 0f       	add	r24, r30
    41e0:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <rec_buf_inp.2947>
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	ea 57       	subi	r30, 0x7A	; 122
    41e8:	f5 4e       	sbci	r31, 0xE5	; 229
    41ea:	8a 81       	ldd	r24, Y+2	; 0x02
    41ec:	80 83       	st	Z, r24
    41ee:	02 c0       	rjmp	.+4      	; 0x41f4 <_serial_call_back+0x36>
    41f0:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <rec_buf_inp.2947>
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	8a 30       	cpi	r24, 0x0A	; 10
    41f8:	d1 f4       	brne	.+52     	; 0x422e <_serial_call_back+0x70>
    41fa:	40 91 54 1a 	lds	r20, 0x1A54	; 0x801a54 <rec_buf_inp.2947>
    41fe:	50 e0       	ldi	r21, 0x00	; 0
    4200:	fa 01       	movw	r30, r20
    4202:	ec 57       	subi	r30, 0x7C	; 124
    4204:	f5 4e       	sbci	r31, 0xE5	; 229
    4206:	10 82       	st	Z, r1
    4208:	41 50       	subi	r20, 0x01	; 1
    420a:	51 09       	sbc	r21, r1
    420c:	9e 01       	movw	r18, r28
    420e:	2f 5f       	subi	r18, 0xFF	; 255
    4210:	3f 4f       	sbci	r19, 0xFF	; 255
    4212:	66 e8       	ldi	r22, 0x86	; 134
    4214:	7a e1       	ldi	r23, 0x1A	; 26
    4216:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    421a:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    421e:	0e 94 a7 12 	call	0x254e	; 0x254e <xStreamBufferSendFromISR>
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	81 11       	cpse	r24, r1
    4226:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vPortYield>
    422a:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <rec_buf_inp.2947>
    422e:	be 01       	movw	r22, r28
    4230:	6e 5f       	subi	r22, 0xFE	; 254
    4232:	7f 4f       	sbci	r23, 0xFF	; 255
    4234:	c8 01       	movw	r24, r16
    4236:	47 d6       	rcall	.+3214   	; 0x4ec6 <serial_get_byte>
    4238:	88 23       	and	r24, r24
    423a:	61 f2       	breq	.-104    	; 0x41d4 <_serial_call_back+0x16>
    423c:	0f 90       	pop	r0
    423e:	0f 90       	pop	r0
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	1f 91       	pop	r17
    4246:	0f 91       	pop	r16
    4248:	08 95       	ret

0000424a <_upload_message>:
    424a:	0f 93       	push	r16
    424c:	1f 93       	push	r17
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	8c 01       	movw	r16, r24
    4254:	eb 01       	movw	r28, r22
    4256:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    425a:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    425e:	0e 94 be 11 	call	0x237c	; 0x237c <xStreamBufferReset>
    4262:	b8 01       	movw	r22, r16
    4264:	80 ef       	ldi	r24, 0xF0	; 240
    4266:	99 e1       	ldi	r25, 0x19	; 25
    4268:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcpy>
    426c:	20 97       	sbiw	r28, 0x00	; 0
    426e:	79 f0       	breq	.+30     	; 0x428e <_upload_message+0x44>
    4270:	e0 ef       	ldi	r30, 0xF0	; 240
    4272:	f9 e1       	ldi	r31, 0x19	; 25
    4274:	01 90       	ld	r0, Z+
    4276:	00 20       	and	r0, r0
    4278:	e9 f7       	brne	.-6      	; 0x4274 <_upload_message+0x2a>
    427a:	31 97       	sbiw	r30, 0x01	; 1
    427c:	80 e2       	ldi	r24, 0x20	; 32
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	91 83       	std	Z+1, r25	; 0x01
    4282:	80 83       	st	Z, r24
    4284:	be 01       	movw	r22, r28
    4286:	80 ef       	ldi	r24, 0xF0	; 240
    4288:	99 e1       	ldi	r25, 0x19	; 25
    428a:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
    428e:	e0 ef       	ldi	r30, 0xF0	; 240
    4290:	f9 e1       	ldi	r31, 0x19	; 25
    4292:	df 01       	movw	r26, r30
    4294:	0d 90       	ld	r0, X+
    4296:	00 20       	and	r0, r0
    4298:	e9 f7       	brne	.-6      	; 0x4294 <_upload_message+0x4a>
    429a:	11 97       	sbiw	r26, 0x01	; 1
    429c:	8d e0       	ldi	r24, 0x0D	; 13
    429e:	9a e0       	ldi	r25, 0x0A	; 10
    42a0:	11 96       	adiw	r26, 0x01	; 1
    42a2:	9c 93       	st	X, r25
    42a4:	8e 93       	st	-X, r24
    42a6:	12 96       	adiw	r26, 0x02	; 2
    42a8:	1c 92       	st	X, r1
    42aa:	01 90       	ld	r0, Z+
    42ac:	00 20       	and	r0, r0
    42ae:	e9 f7       	brne	.-6      	; 0x42aa <_upload_message+0x60>
    42b0:	31 97       	sbiw	r30, 0x01	; 1
    42b2:	e0 5f       	subi	r30, 0xF0	; 240
    42b4:	f9 41       	sbci	r31, 0x19	; 25
    42b6:	ae 2f       	mov	r26, r30
    42b8:	80 ef       	ldi	r24, 0xF0	; 240
    42ba:	99 e1       	ldi	r25, 0x19	; 25
    42bc:	ac 01       	movw	r20, r24
    42be:	6a 2f       	mov	r22, r26
    42c0:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <_rn2483_serial>
    42c4:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <_rn2483_serial+0x1>
    42c8:	ae d5       	rcall	.+2908   	; 0x4e26 <serial_send_bytes>
    42ca:	81 11       	cpse	r24, r1
    42cc:	11 c0       	rjmp	.+34     	; 0x42f0 <_upload_message+0xa6>
    42ce:	08 e2       	ldi	r16, 0x28	; 40
    42d0:	15 e0       	ldi	r17, 0x05	; 5
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	4d e2       	ldi	r20, 0x2D	; 45
    42d8:	50 e0       	ldi	r21, 0x00	; 0
    42da:	60 ee       	ldi	r22, 0xE0	; 224
    42dc:	7a e1       	ldi	r23, 0x1A	; 26
    42de:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    42e2:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    42e6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <xStreamBufferReceive>
    42ea:	80 ee       	ldi	r24, 0xE0	; 224
    42ec:	9a e1       	ldi	r25, 0x1A	; 26
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <_upload_message+0xaa>
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	08 95       	ret

000042fe <_reply2return_code>:
    42fe:	2f 92       	push	r2
    4300:	3f 92       	push	r3
    4302:	4f 92       	push	r4
    4304:	5f 92       	push	r5
    4306:	6f 92       	push	r6
    4308:	7f 92       	push	r7
    430a:	8f 92       	push	r8
    430c:	9f 92       	push	r9
    430e:	af 92       	push	r10
    4310:	bf 92       	push	r11
    4312:	cf 92       	push	r12
    4314:	df 92       	push	r13
    4316:	ef 92       	push	r14
    4318:	ff 92       	push	r15
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	5c 01       	movw	r10, r24
    4324:	fc 01       	movw	r30, r24
    4326:	01 90       	ld	r0, Z+
    4328:	00 20       	and	r0, r0
    432a:	e9 f7       	brne	.-6      	; 0x4326 <_reply2return_code+0x28>
    432c:	31 97       	sbiw	r30, 0x01	; 1
    432e:	6f 01       	movw	r12, r30
    4330:	c8 1a       	sub	r12, r24
    4332:	d9 0a       	sbc	r13, r25
    4334:	5c 2c       	mov	r5, r12
    4336:	0f 2e       	mov	r0, r31
    4338:	f4 e8       	ldi	r31, 0x84	; 132
    433a:	8f 2e       	mov	r8, r31
    433c:	f8 e0       	ldi	r31, 0x08	; 8
    433e:	9f 2e       	mov	r9, r31
    4340:	f0 2d       	mov	r31, r0
    4342:	e1 2c       	mov	r14, r1
    4344:	f1 2c       	mov	r15, r1
    4346:	4c 2c       	mov	r4, r12
    4348:	37 01       	movw	r6, r14
    434a:	f4 01       	movw	r30, r8
    434c:	01 81       	ldd	r16, Z+1	; 0x01
    434e:	12 81       	ldd	r17, Z+2	; 0x02
    4350:	e8 01       	movw	r28, r16
    4352:	09 90       	ld	r0, Y+
    4354:	00 20       	and	r0, r0
    4356:	e9 f7       	brne	.-6      	; 0x4352 <_reply2return_code+0x54>
    4358:	21 97       	sbiw	r28, 0x01	; 1
    435a:	c0 1b       	sub	r28, r16
    435c:	d1 0b       	sbc	r29, r17
    435e:	3c 2e       	mov	r3, r28
    4360:	f9 e0       	ldi	r31, 0x09	; 9
    4362:	cf 16       	cp	r12, r31
    4364:	d1 04       	cpc	r13, r1
    4366:	58 f0       	brcs	.+22     	; 0x437e <_reply2return_code+0x80>
    4368:	f4 01       	movw	r30, r8
    436a:	20 80       	ld	r2, Z
    436c:	fe e0       	ldi	r31, 0x0E	; 14
    436e:	2f 12       	cpse	r2, r31
    4370:	06 c0       	rjmp	.+12     	; 0x437e <_reply2return_code+0x80>
    4372:	b8 01       	movw	r22, r16
    4374:	c5 01       	movw	r24, r10
    4376:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <strcasestr>
    437a:	89 2b       	or	r24, r25
    437c:	09 f5       	brne	.+66     	; 0x43c0 <_reply2return_code+0xc2>
    437e:	44 2d       	mov	r20, r4
    4380:	35 14       	cp	r3, r5
    4382:	08 f4       	brcc	.+2      	; 0x4386 <_reply2return_code+0x88>
    4384:	4c 2f       	mov	r20, r28
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	b8 01       	movw	r22, r16
    438a:	c5 01       	movw	r24, r10
    438c:	0e 94 77 2f 	call	0x5eee	; 0x5eee <strncasecmp>
    4390:	89 2b       	or	r24, r25
    4392:	49 f4       	brne	.+18     	; 0x43a6 <_reply2return_code+0xa8>
    4394:	f3 01       	movw	r30, r6
    4396:	ee 0f       	add	r30, r30
    4398:	ff 1f       	adc	r31, r31
    439a:	e6 0d       	add	r30, r6
    439c:	f7 1d       	adc	r31, r7
    439e:	ec 57       	subi	r30, 0x7C	; 124
    43a0:	f7 4f       	sbci	r31, 0xF7	; 247
    43a2:	20 80       	ld	r2, Z
    43a4:	0d c0       	rjmp	.+26     	; 0x43c0 <_reply2return_code+0xc2>
    43a6:	8f ef       	ldi	r24, 0xFF	; 255
    43a8:	e8 1a       	sub	r14, r24
    43aa:	f8 0a       	sbc	r15, r24
    43ac:	e3 e0       	ldi	r30, 0x03	; 3
    43ae:	8e 0e       	add	r8, r30
    43b0:	91 1c       	adc	r9, r1
    43b2:	f1 e1       	ldi	r31, 0x11	; 17
    43b4:	ef 16       	cp	r14, r31
    43b6:	f1 04       	cpc	r15, r1
    43b8:	39 f6       	brne	.-114    	; 0x4348 <_reply2return_code+0x4a>
    43ba:	68 94       	set
    43bc:	22 24       	eor	r2, r2
    43be:	24 f8       	bld	r2, 4
    43c0:	82 2d       	mov	r24, r2
    43c2:	df 91       	pop	r29
    43c4:	cf 91       	pop	r28
    43c6:	1f 91       	pop	r17
    43c8:	0f 91       	pop	r16
    43ca:	ff 90       	pop	r15
    43cc:	ef 90       	pop	r14
    43ce:	df 90       	pop	r13
    43d0:	cf 90       	pop	r12
    43d2:	bf 90       	pop	r11
    43d4:	af 90       	pop	r10
    43d6:	9f 90       	pop	r9
    43d8:	8f 90       	pop	r8
    43da:	7f 90       	pop	r7
    43dc:	6f 90       	pop	r6
    43de:	5f 90       	pop	r5
    43e0:	4f 90       	pop	r4
    43e2:	3f 90       	pop	r3
    43e4:	2f 90       	pop	r2
    43e6:	08 95       	ret

000043e8 <_upload_message_rc>:
    43e8:	30 df       	rcall	.-416    	; 0x424a <_upload_message>
    43ea:	89 cf       	rjmp	.-238    	; 0x42fe <_reply2return_code>
    43ec:	08 95       	ret

000043ee <lora_driver_flush_buffers>:
    43ee:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    43f2:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    43f6:	0c 94 be 11 	jmp	0x237c	; 0x237c <xStreamBufferReset>
    43fa:	08 95       	ret

000043fc <lora_driver_create>:
    43fc:	8f 92       	push	r8
    43fe:	9f 92       	push	r9
    4400:	af 92       	push	r10
    4402:	cf 92       	push	r12
    4404:	ef 92       	push	r14
    4406:	0f 93       	push	r16
    4408:	1f 93       	push	r17
    440a:	cf 93       	push	r28
    440c:	c8 2f       	mov	r28, r24
    440e:	8b 01       	movw	r16, r22
    4410:	41 e0       	ldi	r20, 0x01	; 1
    4412:	60 e0       	ldi	r22, 0x00	; 0
    4414:	70 e0       	ldi	r23, 0x00	; 0
    4416:	88 ec       	ldi	r24, 0xC8	; 200
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0e 94 92 11 	call	0x2324	; 0x2324 <xStreamBufferGenericCreate>
    441e:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    4422:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <_serial_reply_buffer_handle>
    4426:	10 93 56 1a 	sts	0x1A56, r17	; 0x801a56 <_downlinkMessageBuffer+0x1>
    442a:	00 93 55 1a 	sts	0x1A55, r16	; 0x801a55 <_downlinkMessageBuffer>
    442e:	0f 2e       	mov	r0, r31
    4430:	ff ed       	ldi	r31, 0xDF	; 223
    4432:	8f 2e       	mov	r8, r31
    4434:	f0 e2       	ldi	r31, 0x20	; 32
    4436:	9f 2e       	mov	r9, r31
    4438:	f0 2d       	mov	r31, r0
    443a:	68 94       	set
    443c:	aa 24       	eor	r10, r10
    443e:	a6 f8       	bld	r10, 6
    4440:	68 94       	set
    4442:	cc 24       	eor	r12, r12
    4444:	c6 f8       	bld	r12, 6
    4446:	e1 2c       	mov	r14, r1
    4448:	00 e0       	ldi	r16, 0x00	; 0
    444a:	23 e0       	ldi	r18, 0x03	; 3
    444c:	40 e0       	ldi	r20, 0x00	; 0
    444e:	51 ee       	ldi	r21, 0xE1	; 225
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	70 e0       	ldi	r23, 0x00	; 0
    4454:	8c 2f       	mov	r24, r28
    4456:	2c d4       	rcall	.+2136   	; 0x4cb0 <serial_new_instance>
    4458:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <_rn2483_serial+0x1>
    445c:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <_rn2483_serial>
    4460:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    4464:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    4468:	64 e0       	ldi	r22, 0x04	; 4
    446a:	87 e0       	ldi	r24, 0x07	; 7
    446c:	91 e0       	ldi	r25, 0x01	; 1
    446e:	19 95       	eicall
    4470:	cf 91       	pop	r28
    4472:	1f 91       	pop	r17
    4474:	0f 91       	pop	r16
    4476:	ef 90       	pop	r14
    4478:	cf 90       	pop	r12
    447a:	af 90       	pop	r10
    447c:	9f 90       	pop	r9
    447e:	8f 90       	pop	r8
    4480:	08 95       	ret

00004482 <lora_driver_reset_rn2483>:
    4482:	88 23       	and	r24, r24
    4484:	49 f0       	breq	.+18     	; 0x4498 <lora_driver_reset_rn2483+0x16>
    4486:	e0 91 63 1b 	lds	r30, 0x1B63	; 0x801b63 <register_access+0x12>
    448a:	f0 91 64 1b 	lds	r31, 0x1B64	; 0x801b64 <register_access+0x13>
    448e:	64 e0       	ldi	r22, 0x04	; 4
    4490:	88 e0       	ldi	r24, 0x08	; 8
    4492:	91 e0       	ldi	r25, 0x01	; 1
    4494:	19 95       	eicall
    4496:	08 95       	ret
    4498:	e0 91 59 1b 	lds	r30, 0x1B59	; 0x801b59 <register_access+0x8>
    449c:	f0 91 5a 1b 	lds	r31, 0x1B5A	; 0x801b5a <register_access+0x9>
    44a0:	64 e0       	ldi	r22, 0x04	; 4
    44a2:	88 e0       	ldi	r24, 0x08	; 8
    44a4:	91 e0       	ldi	r25, 0x01	; 1
    44a6:	19 95       	eicall
    44a8:	08 95       	ret

000044aa <lora_driver_rn2483_factory_reset>:
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	8a e0       	ldi	r24, 0x0A	; 10
    44b0:	96 e0       	ldi	r25, 0x06	; 6
    44b2:	cb de       	rcall	.-618    	; 0x424a <_upload_message>
    44b4:	e0 ee       	ldi	r30, 0xE0	; 224
    44b6:	fa e1       	ldi	r31, 0x1A	; 26
    44b8:	01 90       	ld	r0, Z+
    44ba:	00 20       	and	r0, r0
    44bc:	e9 f7       	brne	.-6      	; 0x44b8 <lora_driver_rn2483_factory_reset+0xe>
    44be:	31 97       	sbiw	r30, 0x01	; 1
    44c0:	e0 5e       	subi	r30, 0xE0	; 224
    44c2:	fa 41       	sbci	r31, 0x1A	; 26
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	75 97       	sbiw	r30, 0x15	; 21
    44c8:	08 f0       	brcs	.+2      	; 0x44cc <lora_driver_rn2483_factory_reset+0x22>
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	08 95       	ret

000044ce <lora_driver_get_rn2483_hweui>:
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	ec 01       	movw	r28, r24
    44d4:	60 e0       	ldi	r22, 0x00	; 0
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	8b e1       	ldi	r24, 0x1B	; 27
    44da:	96 e0       	ldi	r25, 0x06	; 6
    44dc:	b6 de       	rcall	.-660    	; 0x424a <_upload_message>
    44de:	e0 ee       	ldi	r30, 0xE0	; 224
    44e0:	fa e1       	ldi	r31, 0x1A	; 26
    44e2:	01 90       	ld	r0, Z+
    44e4:	00 20       	and	r0, r0
    44e6:	e9 f7       	brne	.-6      	; 0x44e2 <lora_driver_get_rn2483_hweui+0x14>
    44e8:	e1 5f       	subi	r30, 0xF1	; 241
    44ea:	fa 41       	sbci	r31, 0x1A	; 26
    44ec:	39 f4       	brne	.+14     	; 0x44fc <lora_driver_get_rn2483_hweui+0x2e>
    44ee:	60 ee       	ldi	r22, 0xE0	; 224
    44f0:	7a e1       	ldi	r23, 0x1A	; 26
    44f2:	ce 01       	movw	r24, r28
    44f4:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcpy>
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <lora_driver_get_rn2483_hweui+0x32>
    44fc:	18 82       	st	Y, r1
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	08 95       	ret

00004506 <lora_driver_set_device_identifier>:
    4506:	fc 01       	movw	r30, r24
    4508:	01 90       	ld	r0, Z+
    450a:	00 20       	and	r0, r0
    450c:	e9 f7       	brne	.-6      	; 0x4508 <lora_driver_set_device_identifier+0x2>
    450e:	9f 01       	movw	r18, r30
    4510:	21 51       	subi	r18, 0x11	; 17
    4512:	31 09       	sbc	r19, r1
    4514:	28 17       	cp	r18, r24
    4516:	39 07       	cpc	r19, r25
    4518:	29 f4       	brne	.+10     	; 0x4524 <lora_driver_set_device_identifier+0x1e>
    451a:	bc 01       	movw	r22, r24
    451c:	89 e4       	ldi	r24, 0x49	; 73
    451e:	96 e0       	ldi	r25, 0x06	; 6
    4520:	63 cf       	rjmp	.-314    	; 0x43e8 <_upload_message_rc>
    4522:	08 95       	ret
    4524:	89 e0       	ldi	r24, 0x09	; 9
    4526:	08 95       	ret

00004528 <lora_driver_set_application_identifier>:
    4528:	fc 01       	movw	r30, r24
    452a:	01 90       	ld	r0, Z+
    452c:	00 20       	and	r0, r0
    452e:	e9 f7       	brne	.-6      	; 0x452a <lora_driver_set_application_identifier+0x2>
    4530:	9f 01       	movw	r18, r30
    4532:	21 51       	subi	r18, 0x11	; 17
    4534:	31 09       	sbc	r19, r1
    4536:	28 17       	cp	r18, r24
    4538:	39 07       	cpc	r19, r25
    453a:	29 f4       	brne	.+10     	; 0x4546 <lora_driver_set_application_identifier+0x1e>
    453c:	bc 01       	movw	r22, r24
    453e:	88 e5       	ldi	r24, 0x58	; 88
    4540:	96 e0       	ldi	r25, 0x06	; 6
    4542:	52 cf       	rjmp	.-348    	; 0x43e8 <_upload_message_rc>
    4544:	08 95       	ret
    4546:	89 e0       	ldi	r24, 0x09	; 9
    4548:	08 95       	ret

0000454a <lora_driver_set_application_key>:
    454a:	fc 01       	movw	r30, r24
    454c:	01 90       	ld	r0, Z+
    454e:	00 20       	and	r0, r0
    4550:	e9 f7       	brne	.-6      	; 0x454c <lora_driver_set_application_key+0x2>
    4552:	9f 01       	movw	r18, r30
    4554:	21 52       	subi	r18, 0x21	; 33
    4556:	31 09       	sbc	r19, r1
    4558:	28 17       	cp	r18, r24
    455a:	39 07       	cpc	r19, r25
    455c:	29 f4       	brne	.+10     	; 0x4568 <lora_driver_set_application_key+0x1e>
    455e:	bc 01       	movw	r22, r24
    4560:	87 e6       	ldi	r24, 0x67	; 103
    4562:	96 e0       	ldi	r25, 0x06	; 6
    4564:	41 cf       	rjmp	.-382    	; 0x43e8 <_upload_message_rc>
    4566:	08 95       	ret
    4568:	89 e0       	ldi	r24, 0x09	; 9
    456a:	08 95       	ret

0000456c <lora_driver_save_mac>:
    456c:	60 e0       	ldi	r22, 0x00	; 0
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	86 ea       	ldi	r24, 0xA6	; 166
    4572:	96 e0       	ldi	r25, 0x06	; 6
    4574:	39 cf       	rjmp	.-398    	; 0x43e8 <_upload_message_rc>
    4576:	08 95       	ret

00004578 <lora_driver_join>:
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	e8 2f       	mov	r30, r24
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	ee 0f       	add	r30, r30
    4582:	ff 1f       	adc	r31, r31
    4584:	e0 58       	subi	r30, 0x80	; 128
    4586:	f7 4f       	sbci	r31, 0xF7	; 247
    4588:	60 81       	ld	r22, Z
    458a:	71 81       	ldd	r23, Z+1	; 0x01
    458c:	8f ea       	ldi	r24, 0xAF	; 175
    458e:	96 e0       	ldi	r25, 0x06	; 6
    4590:	2b df       	rcall	.-426    	; 0x43e8 <_upload_message_rc>
    4592:	81 11       	cpse	r24, r1
    4594:	14 c0       	rjmp	.+40     	; 0x45be <lora_driver_join+0x46>
    4596:	08 e2       	ldi	r16, 0x28	; 40
    4598:	15 e0       	ldi	r17, 0x05	; 5
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	4d e2       	ldi	r20, 0x2D	; 45
    45a0:	50 e0       	ldi	r21, 0x00	; 0
    45a2:	60 ee       	ldi	r22, 0xE0	; 224
    45a4:	7a e1       	ldi	r23, 0x1A	; 26
    45a6:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    45aa:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    45ae:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <xStreamBufferReceive>
    45b2:	88 23       	and	r24, r24
    45b4:	21 f0       	breq	.+8      	; 0x45be <lora_driver_join+0x46>
    45b6:	80 ee       	ldi	r24, 0xE0	; 224
    45b8:	9a e1       	ldi	r25, 0x1A	; 26
    45ba:	a1 de       	rcall	.-702    	; 0x42fe <_reply2return_code>
    45bc:	03 c0       	rjmp	.+6      	; 0x45c4 <lora_driver_join+0x4c>
    45be:	80 ee       	ldi	r24, 0xE0	; 224
    45c0:	9a e1       	ldi	r25, 0x1A	; 26
    45c2:	9d de       	rcall	.-710    	; 0x42fe <_reply2return_code>
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	08 95       	ret

000045ca <lora_driver_sent_upload_message>:
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	1f 92       	push	r1
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	db 01       	movw	r26, r22
    45da:	11 96       	adiw	r26, 0x01	; 1
    45dc:	9c 91       	ld	r25, X
    45de:	11 97       	sbiw	r26, 0x01	; 1
    45e0:	95 31       	cpi	r25, 0x15	; 21
    45e2:	08 f0       	brcs	.+2      	; 0x45e6 <lora_driver_sent_upload_message+0x1c>
    45e4:	b4 c0       	rjmp	.+360    	; 0x474e <lora_driver_sent_upload_message+0x184>
    45e6:	99 23       	and	r25, r25
    45e8:	81 f1       	breq	.+96     	; 0x464a <lora_driver_sent_upload_message+0x80>
    45ea:	60 e0       	ldi	r22, 0x00	; 0
    45ec:	70 e0       	ldi	r23, 0x00	; 0
    45ee:	27 2f       	mov	r18, r23
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	46 2f       	mov	r20, r22
    45f4:	50 e0       	ldi	r21, 0x00	; 0
    45f6:	fd 01       	movw	r30, r26
    45f8:	e4 0f       	add	r30, r20
    45fa:	f5 1f       	adc	r31, r21
    45fc:	92 81       	ldd	r25, Z+2	; 0x02
    45fe:	92 95       	swap	r25
    4600:	9f 70       	andi	r25, 0x0F	; 15
    4602:	9a 30       	cpi	r25, 0x0A	; 10
    4604:	10 f0       	brcs	.+4      	; 0x460a <lora_driver_sent_upload_message+0x40>
    4606:	99 5c       	subi	r25, 0xC9	; 201
    4608:	01 c0       	rjmp	.+2      	; 0x460c <lora_driver_sent_upload_message+0x42>
    460a:	90 5d       	subi	r25, 0xD0	; 208
    460c:	f9 01       	movw	r30, r18
    460e:	ef 58       	subi	r30, 0x8F	; 143
    4610:	f5 4e       	sbci	r31, 0xE5	; 229
    4612:	90 83       	st	Z, r25
    4614:	2f 5f       	subi	r18, 0xFF	; 255
    4616:	3f 4f       	sbci	r19, 0xFF	; 255
    4618:	fd 01       	movw	r30, r26
    461a:	e4 0f       	add	r30, r20
    461c:	f5 1f       	adc	r31, r21
    461e:	92 81       	ldd	r25, Z+2	; 0x02
    4620:	9f 70       	andi	r25, 0x0F	; 15
    4622:	49 2f       	mov	r20, r25
    4624:	50 e0       	ldi	r21, 0x00	; 0
    4626:	4a 30       	cpi	r20, 0x0A	; 10
    4628:	51 05       	cpc	r21, r1
    462a:	14 f0       	brlt	.+4      	; 0x4630 <lora_driver_sent_upload_message+0x66>
    462c:	99 5c       	subi	r25, 0xC9	; 201
    462e:	01 c0       	rjmp	.+2      	; 0x4632 <lora_driver_sent_upload_message+0x68>
    4630:	90 5d       	subi	r25, 0xD0	; 208
    4632:	f9 01       	movw	r30, r18
    4634:	ef 58       	subi	r30, 0x8F	; 143
    4636:	f5 4e       	sbci	r31, 0xE5	; 229
    4638:	90 83       	st	Z, r25
    463a:	7e 5f       	subi	r23, 0xFE	; 254
    463c:	6f 5f       	subi	r22, 0xFF	; 255
    463e:	11 96       	adiw	r26, 0x01	; 1
    4640:	9c 91       	ld	r25, X
    4642:	11 97       	sbiw	r26, 0x01	; 1
    4644:	69 17       	cp	r22, r25
    4646:	98 f2       	brcs	.-90     	; 0x45ee <lora_driver_sent_upload_message+0x24>
    4648:	01 c0       	rjmp	.+2      	; 0x464c <lora_driver_sent_upload_message+0x82>
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	e7 2f       	mov	r30, r23
    464e:	f0 e0       	ldi	r31, 0x00	; 0
    4650:	ef 58       	subi	r30, 0x8F	; 143
    4652:	f5 4e       	sbci	r31, 0xE5	; 229
    4654:	10 82       	st	Z, r1
    4656:	4c 91       	ld	r20, X
    4658:	81 11       	cpse	r24, r1
    465a:	03 c0       	rjmp	.+6      	; 0x4662 <lora_driver_sent_upload_message+0x98>
    465c:	88 eb       	ldi	r24, 0xB8	; 184
    465e:	96 e0       	ldi	r25, 0x06	; 6
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <lora_driver_sent_upload_message+0x9c>
    4662:	8a eb       	ldi	r24, 0xBA	; 186
    4664:	96 e0       	ldi	r25, 0x06	; 6
    4666:	21 e7       	ldi	r18, 0x71	; 113
    4668:	3a e1       	ldi	r19, 0x1A	; 26
    466a:	3f 93       	push	r19
    466c:	2f 93       	push	r18
    466e:	1f 92       	push	r1
    4670:	4f 93       	push	r20
    4672:	9f 93       	push	r25
    4674:	8f 93       	push	r24
    4676:	8e eb       	ldi	r24, 0xBE	; 190
    4678:	96 e0       	ldi	r25, 0x06	; 6
    467a:	9f 93       	push	r25
    467c:	8f 93       	push	r24
    467e:	83 eb       	ldi	r24, 0xB3	; 179
    4680:	9a e1       	ldi	r25, 0x1A	; 26
    4682:	9f 93       	push	r25
    4684:	8f 93       	push	r24
    4686:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <sprintf>
    468a:	60 e0       	ldi	r22, 0x00	; 0
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	83 eb       	ldi	r24, 0xB3	; 179
    4690:	9a e1       	ldi	r25, 0x1A	; 26
    4692:	aa de       	rcall	.-684    	; 0x43e8 <_upload_message_rc>
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	81 11       	cpse	r24, r1
    46a0:	59 c0       	rjmp	.+178    	; 0x4754 <lora_driver_sent_upload_message+0x18a>
    46a2:	08 e2       	ldi	r16, 0x28	; 40
    46a4:	15 e0       	ldi	r17, 0x05	; 5
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	4d e2       	ldi	r20, 0x2D	; 45
    46ac:	50 e0       	ldi	r21, 0x00	; 0
    46ae:	60 ee       	ldi	r22, 0xE0	; 224
    46b0:	7a e1       	ldi	r23, 0x1A	; 26
    46b2:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <_serial_reply_buffer_handle>
    46b6:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <_serial_reply_buffer_handle+0x1>
    46ba:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <xStreamBufferReceive>
    46be:	88 23       	and	r24, r24
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <lora_driver_sent_upload_message+0xfa>
    46c2:	47 c0       	rjmp	.+142    	; 0x4752 <lora_driver_sent_upload_message+0x188>
    46c4:	80 ee       	ldi	r24, 0xE0	; 224
    46c6:	9a e1       	ldi	r25, 0x1A	; 26
    46c8:	1a de       	rcall	.-972    	; 0x42fe <_reply2return_code>
    46ca:	8e 30       	cpi	r24, 0x0E	; 14
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <lora_driver_sent_upload_message+0x106>
    46ce:	42 c0       	rjmp	.+132    	; 0x4754 <lora_driver_sent_upload_message+0x18a>
    46d0:	87 e0       	ldi	r24, 0x07	; 7
    46d2:	89 83       	std	Y+1, r24	; 0x01
    46d4:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <_downlinkMessageBuffer>
    46d8:	90 91 56 1a 	lds	r25, 0x1A56	; 0x801a56 <_downlinkMessageBuffer+0x1>
    46dc:	89 2b       	or	r24, r25
    46de:	a9 f1       	breq	.+106    	; 0x474a <lora_driver_sent_upload_message+0x180>
    46e0:	be 01       	movw	r22, r28
    46e2:	6f 5f       	subi	r22, 0xFF	; 255
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	80 ee       	ldi	r24, 0xE0	; 224
    46e8:	9a e1       	ldi	r25, 0x1A	; 26
    46ea:	68 d1       	rcall	.+720    	; 0x49bc <decode_port_no>
    46ec:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_downlink_payload>
    46f0:	e9 81       	ldd	r30, Y+1	; 0x01
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	e0 52       	subi	r30, 0x20	; 32
    46f6:	f5 4e       	sbci	r31, 0xE5	; 229
    46f8:	df 01       	movw	r26, r30
    46fa:	0d 90       	ld	r0, X+
    46fc:	00 20       	and	r0, r0
    46fe:	e9 f7       	brne	.-6      	; 0x46fa <lora_driver_sent_upload_message+0x130>
    4700:	11 97       	sbiw	r26, 0x01	; 1
    4702:	ae 1b       	sub	r26, r30
    4704:	bf 0b       	sbc	r27, r31
    4706:	aa 23       	and	r26, r26
    4708:	91 f0       	breq	.+36     	; 0x472e <lora_driver_sent_upload_message+0x164>
    470a:	bb 27       	eor	r27, r27
    470c:	cd 01       	movw	r24, r26
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	9c 01       	movw	r18, r24
    4712:	12 f4       	brpl	.+4      	; 0x4718 <lora_driver_sent_upload_message+0x14e>
    4714:	2f 5f       	subi	r18, 0xFF	; 255
    4716:	3f 4f       	sbci	r19, 0xFF	; 255
    4718:	35 95       	asr	r19
    471a:	27 95       	ror	r18
    471c:	20 93 5c 1a 	sts	0x1A5C, r18	; 0x801a5c <_downlink_payload+0x1>
    4720:	af 01       	movw	r20, r30
    4722:	4f 5f       	subi	r20, 0xFF	; 255
    4724:	5f 4f       	sbci	r21, 0xFF	; 255
    4726:	64 e1       	ldi	r22, 0x14	; 20
    4728:	8d e5       	ldi	r24, 0x5D	; 93
    472a:	9a e1       	ldi	r25, 0x1A	; 26
    472c:	73 d1       	rcall	.+742    	; 0x4a14 <decode_hexadecimal_string_bytes>
    472e:	01 e0       	ldi	r16, 0x01	; 1
    4730:	10 e0       	ldi	r17, 0x00	; 0
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	46 e1       	ldi	r20, 0x16	; 22
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	6b e5       	ldi	r22, 0x5B	; 91
    473c:	7a e1       	ldi	r23, 0x1A	; 26
    473e:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <_downlinkMessageBuffer>
    4742:	90 91 56 1a 	lds	r25, 0x1A56	; 0x801a56 <_downlinkMessageBuffer+0x1>
    4746:	0e 94 fd 11 	call	0x23fa	; 0x23fa <xStreamBufferSend>
    474a:	8e e0       	ldi	r24, 0x0E	; 14
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <lora_driver_sent_upload_message+0x18a>
    474e:	84 e1       	ldi	r24, 0x14	; 20
    4750:	01 c0       	rjmp	.+2      	; 0x4754 <lora_driver_sent_upload_message+0x18a>
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	0f 90       	pop	r0
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	08 95       	ret

00004760 <lora_driver_set_adaptive_data_rate>:
    4760:	81 30       	cpi	r24, 0x01	; 1
    4762:	19 f0       	breq	.+6      	; 0x476a <lora_driver_set_adaptive_data_rate+0xa>
    4764:	6e ec       	ldi	r22, 0xCE	; 206
    4766:	76 e0       	ldi	r23, 0x06	; 6
    4768:	02 c0       	rjmp	.+4      	; 0x476e <lora_driver_set_adaptive_data_rate+0xe>
    476a:	67 ea       	ldi	r22, 0xA7	; 167
    476c:	77 e0       	ldi	r23, 0x07	; 7
    476e:	82 ed       	ldi	r24, 0xD2	; 210
    4770:	96 e0       	ldi	r25, 0x06	; 6
    4772:	3a ce       	rjmp	.-908    	; 0x43e8 <_upload_message_rc>
    4774:	08 95       	ret

00004776 <lora_driver_set_receive_delay>:
    4776:	9f 93       	push	r25
    4778:	8f 93       	push	r24
    477a:	83 e0       	ldi	r24, 0x03	; 3
    477c:	97 e0       	ldi	r25, 0x07	; 7
    477e:	9f 93       	push	r25
    4780:	8f 93       	push	r24
    4782:	83 eb       	ldi	r24, 0xB3	; 179
    4784:	9a e1       	ldi	r25, 0x1A	; 26
    4786:	9f 93       	push	r25
    4788:	8f 93       	push	r24
    478a:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <sprintf>
    478e:	60 e0       	ldi	r22, 0x00	; 0
    4790:	70 e0       	ldi	r23, 0x00	; 0
    4792:	83 eb       	ldi	r24, 0xB3	; 179
    4794:	9a e1       	ldi	r25, 0x1A	; 26
    4796:	28 de       	rcall	.-944    	; 0x43e8 <_upload_message_rc>
    4798:	0f 90       	pop	r0
    479a:	0f 90       	pop	r0
    479c:	0f 90       	pop	r0
    479e:	0f 90       	pop	r0
    47a0:	0f 90       	pop	r0
    47a2:	0f 90       	pop	r0
    47a4:	08 95       	ret

000047a6 <lora_driver_configure_to_eu868>:
    47a6:	2f 92       	push	r2
    47a8:	3f 92       	push	r3
    47aa:	4f 92       	push	r4
    47ac:	5f 92       	push	r5
    47ae:	6f 92       	push	r6
    47b0:	7f 92       	push	r7
    47b2:	8f 92       	push	r8
    47b4:	9f 92       	push	r9
    47b6:	af 92       	push	r10
    47b8:	bf 92       	push	r11
    47ba:	cf 92       	push	r12
    47bc:	df 92       	push	r13
    47be:	ef 92       	push	r14
    47c0:	ff 92       	push	r15
    47c2:	0f 93       	push	r16
    47c4:	1f 93       	push	r17
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	a0 97       	sbiw	r28, 0x20	; 32
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	de bf       	out	0x3e, r29	; 62
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	cd bf       	out	0x3d, r28	; 61
    47da:	60 e3       	ldi	r22, 0x30	; 48
    47dc:	77 e0       	ldi	r23, 0x07	; 7
    47de:	8c e3       	ldi	r24, 0x3C	; 60
    47e0:	97 e0       	ldi	r25, 0x07	; 7
    47e2:	33 dd       	rcall	.-1434   	; 0x424a <_upload_message>
    47e4:	8c dd       	rcall	.-1256   	; 0x42fe <_reply2return_code>
    47e6:	81 11       	cpse	r24, r1
    47e8:	a3 c0       	rjmp	.+326    	; 0x4930 <lora_driver_configure_to_eu868+0x18a>
    47ea:	80 e2       	ldi	r24, 0x20	; 32
    47ec:	e1 e2       	ldi	r30, 0x21	; 33
    47ee:	f2 e0       	ldi	r31, 0x02	; 2
    47f0:	de 01       	movw	r26, r28
    47f2:	11 96       	adiw	r26, 0x01	; 1
    47f4:	01 90       	ld	r0, Z+
    47f6:	0d 92       	st	X+, r0
    47f8:	8a 95       	dec	r24
    47fa:	e1 f7       	brne	.-8      	; 0x47f4 <lora_driver_configure_to_eu868+0x4e>
    47fc:	9e 01       	movw	r18, r28
    47fe:	2f 5f       	subi	r18, 0xFF	; 255
    4800:	3f 4f       	sbci	r19, 0xFF	; 255
    4802:	69 01       	movw	r12, r18
    4804:	e1 2c       	mov	r14, r1
    4806:	f1 2c       	mov	r15, r1
    4808:	0f 2e       	mov	r0, r31
    480a:	f8 e4       	ldi	r31, 0x48	; 72
    480c:	af 2e       	mov	r10, r31
    480e:	f7 e0       	ldi	r31, 0x07	; 7
    4810:	bf 2e       	mov	r11, r31
    4812:	f0 2d       	mov	r31, r0
    4814:	03 eb       	ldi	r16, 0xB3	; 179
    4816:	1a e1       	ldi	r17, 0x1A	; 26
    4818:	0f 2e       	mov	r0, r31
    481a:	f1 e6       	ldi	r31, 0x61	; 97
    481c:	4f 2e       	mov	r4, r31
    481e:	f7 e0       	ldi	r31, 0x07	; 7
    4820:	5f 2e       	mov	r5, r31
    4822:	f0 2d       	mov	r31, r0
    4824:	0f 2e       	mov	r0, r31
    4826:	f8 e7       	ldi	r31, 0x78	; 120
    4828:	8f 2e       	mov	r8, r31
    482a:	f7 e0       	ldi	r31, 0x07	; 7
    482c:	9f 2e       	mov	r9, r31
    482e:	f0 2d       	mov	r31, r0
    4830:	0f 2e       	mov	r0, r31
    4832:	f2 e9       	ldi	r31, 0x92	; 146
    4834:	6f 2e       	mov	r6, r31
    4836:	f7 e0       	ldi	r31, 0x07	; 7
    4838:	7f 2e       	mov	r7, r31
    483a:	f0 2d       	mov	r31, r0
    483c:	3e 2c       	mov	r3, r14
    483e:	2f 2c       	mov	r2, r15
    4840:	ff 92       	push	r15
    4842:	ef 92       	push	r14
    4844:	bf 92       	push	r11
    4846:	af 92       	push	r10
    4848:	1f 93       	push	r17
    484a:	0f 93       	push	r16
    484c:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <sprintf>
    4850:	60 e0       	ldi	r22, 0x00	; 0
    4852:	70 e0       	ldi	r23, 0x00	; 0
    4854:	c8 01       	movw	r24, r16
    4856:	f9 dc       	rcall	.-1550   	; 0x424a <_upload_message>
    4858:	52 dd       	rcall	.-1372   	; 0x42fe <_reply2return_code>
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	0f 90       	pop	r0
    4866:	81 11       	cpse	r24, r1
    4868:	63 c0       	rjmp	.+198    	; 0x4930 <lora_driver_configure_to_eu868+0x18a>
    486a:	32 e0       	ldi	r19, 0x02	; 2
    486c:	3e 15       	cp	r19, r14
    486e:	e8 f4       	brcc	.+58     	; 0x48aa <lora_driver_configure_to_eu868+0x104>
    4870:	f6 01       	movw	r30, r12
    4872:	83 81       	ldd	r24, Z+3	; 0x03
    4874:	8f 93       	push	r24
    4876:	82 81       	ldd	r24, Z+2	; 0x02
    4878:	8f 93       	push	r24
    487a:	81 81       	ldd	r24, Z+1	; 0x01
    487c:	8f 93       	push	r24
    487e:	80 81       	ld	r24, Z
    4880:	8f 93       	push	r24
    4882:	ff 92       	push	r15
    4884:	ef 92       	push	r14
    4886:	5f 92       	push	r5
    4888:	4f 92       	push	r4
    488a:	1f 93       	push	r17
    488c:	0f 93       	push	r16
    488e:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <sprintf>
    4892:	60 e0       	ldi	r22, 0x00	; 0
    4894:	70 e0       	ldi	r23, 0x00	; 0
    4896:	c8 01       	movw	r24, r16
    4898:	d8 dc       	rcall	.-1616   	; 0x424a <_upload_message>
    489a:	31 dd       	rcall	.-1438   	; 0x42fe <_reply2return_code>
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	cd bf       	out	0x3d, r28	; 61
    48a6:	81 11       	cpse	r24, r1
    48a8:	43 c0       	rjmp	.+134    	; 0x4930 <lora_driver_configure_to_eu868+0x18a>
    48aa:	2f 92       	push	r2
    48ac:	3f 92       	push	r3
    48ae:	9f 92       	push	r9
    48b0:	8f 92       	push	r8
    48b2:	1f 93       	push	r17
    48b4:	0f 93       	push	r16
    48b6:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <sprintf>
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	c8 01       	movw	r24, r16
    48c0:	c4 dc       	rcall	.-1656   	; 0x424a <_upload_message>
    48c2:	1d dd       	rcall	.-1478   	; 0x42fe <_reply2return_code>
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	81 11       	cpse	r24, r1
    48d2:	2e c0       	rjmp	.+92     	; 0x4930 <lora_driver_configure_to_eu868+0x18a>
    48d4:	2f 92       	push	r2
    48d6:	3f 92       	push	r3
    48d8:	7f 92       	push	r7
    48da:	6f 92       	push	r6
    48dc:	1f 93       	push	r17
    48de:	0f 93       	push	r16
    48e0:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <sprintf>
    48e4:	60 e0       	ldi	r22, 0x00	; 0
    48e6:	70 e0       	ldi	r23, 0x00	; 0
    48e8:	c8 01       	movw	r24, r16
    48ea:	af dc       	rcall	.-1698   	; 0x424a <_upload_message>
    48ec:	08 dd       	rcall	.-1520   	; 0x42fe <_reply2return_code>
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	81 11       	cpse	r24, r1
    48fc:	19 c0       	rjmp	.+50     	; 0x4930 <lora_driver_configure_to_eu868+0x18a>
    48fe:	3f ef       	ldi	r19, 0xFF	; 255
    4900:	e3 1a       	sub	r14, r19
    4902:	f3 0a       	sbc	r15, r19
    4904:	84 e0       	ldi	r24, 0x04	; 4
    4906:	c8 0e       	add	r12, r24
    4908:	d1 1c       	adc	r13, r1
    490a:	98 e0       	ldi	r25, 0x08	; 8
    490c:	e9 16       	cp	r14, r25
    490e:	f1 04       	cpc	r15, r1
    4910:	09 f0       	breq	.+2      	; 0x4914 <lora_driver_configure_to_eu868+0x16e>
    4912:	94 cf       	rjmp	.-216    	; 0x483c <lora_driver_configure_to_eu868+0x96>
    4914:	60 e0       	ldi	r22, 0x00	; 0
    4916:	70 e0       	ldi	r23, 0x00	; 0
    4918:	8a ea       	ldi	r24, 0xAA	; 170
    491a:	97 e0       	ldi	r25, 0x07	; 7
    491c:	96 dc       	rcall	.-1748   	; 0x424a <_upload_message>
    491e:	ef dc       	rcall	.-1570   	; 0x42fe <_reply2return_code>
    4920:	81 11       	cpse	r24, r1
    4922:	06 c0       	rjmp	.+12     	; 0x4930 <lora_driver_configure_to_eu868+0x18a>
    4924:	60 e0       	ldi	r22, 0x00	; 0
    4926:	70 e0       	ldi	r23, 0x00	; 0
    4928:	8b eb       	ldi	r24, 0xBB	; 187
    492a:	97 e0       	ldi	r25, 0x07	; 7
    492c:	8e dc       	rcall	.-1764   	; 0x424a <_upload_message>
    492e:	e7 dc       	rcall	.-1586   	; 0x42fe <_reply2return_code>
    4930:	a0 96       	adiw	r28, 0x20	; 32
    4932:	0f b6       	in	r0, 0x3f	; 63
    4934:	f8 94       	cli
    4936:	de bf       	out	0x3e, r29	; 62
    4938:	0f be       	out	0x3f, r0	; 63
    493a:	cd bf       	out	0x3d, r28	; 61
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	ff 90       	pop	r15
    4946:	ef 90       	pop	r14
    4948:	df 90       	pop	r13
    494a:	cf 90       	pop	r12
    494c:	bf 90       	pop	r11
    494e:	af 90       	pop	r10
    4950:	9f 90       	pop	r9
    4952:	8f 90       	pop	r8
    4954:	7f 90       	pop	r7
    4956:	6f 90       	pop	r6
    4958:	5f 90       	pop	r5
    495a:	4f 90       	pop	r4
    495c:	3f 90       	pop	r3
    495e:	2f 90       	pop	r2
    4960:	08 95       	ret

00004962 <lora_driver_set_otaa_identity>:
    4962:	ef 92       	push	r14
    4964:	ff 92       	push	r15
    4966:	0f 93       	push	r16
    4968:	1f 93       	push	r17
    496a:	cf 93       	push	r28
    496c:	df 93       	push	r29
    496e:	ec 01       	movw	r28, r24
    4970:	8b 01       	movw	r16, r22
    4972:	7a 01       	movw	r14, r20
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	f4 de       	rcall	.-536    	; 0x4760 <lora_driver_set_adaptive_data_rate>
    4978:	81 11       	cpse	r24, r1
    497a:	0d c0       	rjmp	.+26     	; 0x4996 <lora_driver_set_otaa_identity+0x34>
    497c:	ce 01       	movw	r24, r28
    497e:	d4 dd       	rcall	.-1112   	; 0x4528 <lora_driver_set_application_identifier>
    4980:	81 11       	cpse	r24, r1
    4982:	09 c0       	rjmp	.+18     	; 0x4996 <lora_driver_set_otaa_identity+0x34>
    4984:	c8 01       	movw	r24, r16
    4986:	e1 dd       	rcall	.-1086   	; 0x454a <lora_driver_set_application_key>
    4988:	81 11       	cpse	r24, r1
    498a:	05 c0       	rjmp	.+10     	; 0x4996 <lora_driver_set_otaa_identity+0x34>
    498c:	c7 01       	movw	r24, r14
    498e:	bb dd       	rcall	.-1162   	; 0x4506 <lora_driver_set_device_identifier>
    4990:	81 11       	cpse	r24, r1
    4992:	01 c0       	rjmp	.+2      	; 0x4996 <lora_driver_set_otaa_identity+0x34>
    4994:	eb dd       	rcall	.-1066   	; 0x456c <lora_driver_save_mac>
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	ff 90       	pop	r15
    49a0:	ef 90       	pop	r14
    49a2:	08 95       	ret

000049a4 <lora_driver_map_return_code_to_text>:
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	fc 01       	movw	r30, r24
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	8e 0f       	add	r24, r30
    49ae:	9f 1f       	adc	r25, r31
    49b0:	fc 01       	movw	r30, r24
    49b2:	ec 57       	subi	r30, 0x7C	; 124
    49b4:	f7 4f       	sbci	r31, 0xF7	; 247
    49b6:	81 81       	ldd	r24, Z+1	; 0x01
    49b8:	92 81       	ldd	r25, Z+2	; 0x02
    49ba:	08 95       	ret

000049bc <decode_port_no>:
    49bc:	dc 01       	movw	r26, r24
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	29 f1       	breq	.+74     	; 0x4a0c <decode_port_no+0x50>
    49c2:	fb 01       	movw	r30, r22
    49c4:	20 81       	ld	r18, Z
    49c6:	fc 01       	movw	r30, r24
    49c8:	01 90       	ld	r0, Z+
    49ca:	00 20       	and	r0, r0
    49cc:	e9 f7       	brne	.-6      	; 0x49c8 <decode_port_no+0xc>
    49ce:	31 97       	sbiw	r30, 0x01	; 1
    49d0:	e8 1b       	sub	r30, r24
    49d2:	f9 0b       	sbc	r31, r25
    49d4:	82 2f       	mov	r24, r18
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	e8 17       	cp	r30, r24
    49da:	f9 07       	cpc	r31, r25
    49dc:	c8 f0       	brcs	.+50     	; 0x4a10 <decode_port_no+0x54>
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	08 c0       	rjmp	.+16     	; 0x49f2 <decode_port_no+0x36>
    49e2:	88 0f       	add	r24, r24
    49e4:	38 2f       	mov	r19, r24
    49e6:	33 0f       	add	r19, r19
    49e8:	33 0f       	add	r19, r19
    49ea:	83 0f       	add	r24, r19
    49ec:	80 53       	subi	r24, 0x30	; 48
    49ee:	89 0f       	add	r24, r25
    49f0:	2f 5f       	subi	r18, 0xFF	; 255
    49f2:	fd 01       	movw	r30, r26
    49f4:	e2 0f       	add	r30, r18
    49f6:	f1 1d       	adc	r31, r1
    49f8:	90 81       	ld	r25, Z
    49fa:	30 ed       	ldi	r19, 0xD0	; 208
    49fc:	39 0f       	add	r19, r25
    49fe:	3a 30       	cpi	r19, 0x0A	; 10
    4a00:	10 f4       	brcc	.+4      	; 0x4a06 <decode_port_no+0x4a>
    4a02:	91 11       	cpse	r25, r1
    4a04:	ee cf       	rjmp	.-36     	; 0x49e2 <decode_port_no+0x26>
    4a06:	fb 01       	movw	r30, r22
    4a08:	20 83       	st	Z, r18
    4a0a:	08 95       	ret
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	08 95       	ret
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	08 95       	ret

00004a14 <decode_hexadecimal_string_bytes>:
    4a14:	0f 93       	push	r16
    4a16:	1f 93       	push	r17
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	ea 01       	movw	r28, r20
    4a20:	20 97       	sbiw	r28, 0x00	; 0
    4a22:	e1 f1       	breq	.+120    	; 0x4a9c <decode_hexadecimal_string_bytes+0x88>
    4a24:	fa 01       	movw	r30, r20
    4a26:	01 90       	ld	r0, Z+
    4a28:	00 20       	and	r0, r0
    4a2a:	e9 f7       	brne	.-6      	; 0x4a26 <decode_hexadecimal_string_bytes+0x12>
    4a2c:	31 97       	sbiw	r30, 0x01	; 1
    4a2e:	e4 1b       	sub	r30, r20
    4a30:	f5 0b       	sbc	r31, r21
    4a32:	32 97       	sbiw	r30, 0x02	; 2
    4a34:	10 f5       	brcc	.+68     	; 0x4a7a <decode_hexadecimal_string_bytes+0x66>
    4a36:	32 c0       	rjmp	.+100    	; 0x4a9c <decode_hexadecimal_string_bytes+0x88>
    4a38:	8d 01       	movw	r16, r26
    4a3a:	04 0f       	add	r16, r20
    4a3c:	15 1f       	adc	r17, r21
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	ae 01       	movw	r20, r28
    4a42:	42 0f       	add	r20, r18
    4a44:	53 1f       	adc	r21, r19
    4a46:	fa 01       	movw	r30, r20
    4a48:	90 81       	ld	r25, Z
    4a4a:	91 34       	cpi	r25, 0x41	; 65
    4a4c:	28 f0       	brcs	.+10     	; 0x4a58 <decode_hexadecimal_string_bytes+0x44>
    4a4e:	97 53       	subi	r25, 0x37	; 55
    4a50:	59 2f       	mov	r21, r25
    4a52:	52 95       	swap	r21
    4a54:	50 7f       	andi	r21, 0xF0	; 240
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <decode_hexadecimal_string_bytes+0x4a>
    4a58:	59 2f       	mov	r21, r25
    4a5a:	52 95       	swap	r21
    4a5c:	50 7f       	andi	r21, 0xF0	; 240
    4a5e:	2c 0f       	add	r18, r28
    4a60:	3d 1f       	adc	r19, r29
    4a62:	f9 01       	movw	r30, r18
    4a64:	91 81       	ldd	r25, Z+1	; 0x01
    4a66:	91 34       	cpi	r25, 0x41	; 65
    4a68:	10 f0       	brcs	.+4      	; 0x4a6e <decode_hexadecimal_string_bytes+0x5a>
    4a6a:	97 53       	subi	r25, 0x37	; 55
    4a6c:	01 c0       	rjmp	.+2      	; 0x4a70 <decode_hexadecimal_string_bytes+0x5c>
    4a6e:	90 53       	subi	r25, 0x30	; 48
    4a70:	95 0f       	add	r25, r21
    4a72:	f8 01       	movw	r30, r16
    4a74:	90 83       	st	Z, r25
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	01 c0       	rjmp	.+2      	; 0x4a7c <decode_hexadecimal_string_bytes+0x68>
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	28 2f       	mov	r18, r24
    4a7e:	22 0f       	add	r18, r18
    4a80:	48 2f       	mov	r20, r24
    4a82:	50 e0       	ldi	r21, 0x00	; 0
    4a84:	fe 01       	movw	r30, r28
    4a86:	01 90       	ld	r0, Z+
    4a88:	00 20       	and	r0, r0
    4a8a:	e9 f7       	brne	.-6      	; 0x4a86 <decode_hexadecimal_string_bytes+0x72>
    4a8c:	31 97       	sbiw	r30, 0x01	; 1
    4a8e:	ec 1b       	sub	r30, r28
    4a90:	fd 0b       	sbc	r31, r29
    4a92:	4e 17       	cp	r20, r30
    4a94:	5f 07       	cpc	r21, r31
    4a96:	10 f4       	brcc	.+4      	; 0x4a9c <decode_hexadecimal_string_bytes+0x88>
    4a98:	86 13       	cpse	r24, r22
    4a9a:	ce cf       	rjmp	.-100    	; 0x4a38 <decode_hexadecimal_string_bytes+0x24>
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	08 95       	ret

00004aa6 <reg_read_register>:
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	80 81       	ld	r24, Z
    4aaa:	08 95       	ret

00004aac <reg_read_bit>:
    4aac:	fc 01       	movw	r30, r24
    4aae:	20 81       	ld	r18, Z
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	02 c0       	rjmp	.+4      	; 0x4aba <reg_read_bit+0xe>
    4ab6:	88 0f       	add	r24, r24
    4ab8:	99 1f       	adc	r25, r25
    4aba:	6a 95       	dec	r22
    4abc:	e2 f7       	brpl	.-8      	; 0x4ab6 <reg_read_bit+0xa>
    4abe:	82 23       	and	r24, r18
    4ac0:	08 95       	ret

00004ac2 <reg_read_bits>:
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	80 81       	ld	r24, Z
    4ac6:	86 23       	and	r24, r22
    4ac8:	08 95       	ret

00004aca <reg_set_register>:
    4aca:	fc 01       	movw	r30, r24
    4acc:	60 83       	st	Z, r22
    4ace:	08 95       	ret

00004ad0 <reg_clear_register>:
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	10 82       	st	Z, r1
    4ad4:	08 95       	ret

00004ad6 <reg_set_bit>:
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	40 81       	ld	r20, Z
    4ada:	21 e0       	ldi	r18, 0x01	; 1
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <reg_set_bit+0xe>
    4ae0:	22 0f       	add	r18, r18
    4ae2:	33 1f       	adc	r19, r19
    4ae4:	6a 95       	dec	r22
    4ae6:	e2 f7       	brpl	.-8      	; 0x4ae0 <reg_set_bit+0xa>
    4ae8:	24 2b       	or	r18, r20
    4aea:	20 83       	st	Z, r18
    4aec:	08 95       	ret

00004aee <reg_set_bits>:
    4aee:	fc 01       	movw	r30, r24
    4af0:	20 81       	ld	r18, Z
    4af2:	62 2b       	or	r22, r18
    4af4:	60 83       	st	Z, r22
    4af6:	08 95       	ret

00004af8 <reg_toggle_bit>:
    4af8:	fc 01       	movw	r30, r24
    4afa:	40 81       	ld	r20, Z
    4afc:	21 e0       	ldi	r18, 0x01	; 1
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <reg_toggle_bit+0xe>
    4b02:	22 0f       	add	r18, r18
    4b04:	33 1f       	adc	r19, r19
    4b06:	6a 95       	dec	r22
    4b08:	e2 f7       	brpl	.-8      	; 0x4b02 <reg_toggle_bit+0xa>
    4b0a:	24 27       	eor	r18, r20
    4b0c:	20 83       	st	Z, r18
    4b0e:	08 95       	ret

00004b10 <reg_toggle_bits>:
    4b10:	fc 01       	movw	r30, r24
    4b12:	20 81       	ld	r18, Z
    4b14:	62 27       	eor	r22, r18
    4b16:	60 83       	st	Z, r22
    4b18:	08 95       	ret

00004b1a <reg_clear_bit>:
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	90 81       	ld	r25, Z
    4b1e:	21 e0       	ldi	r18, 0x01	; 1
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <reg_clear_bit+0xe>
    4b24:	22 0f       	add	r18, r18
    4b26:	33 1f       	adc	r19, r19
    4b28:	6a 95       	dec	r22
    4b2a:	e2 f7       	brpl	.-8      	; 0x4b24 <reg_clear_bit+0xa>
    4b2c:	20 95       	com	r18
    4b2e:	29 23       	and	r18, r25
    4b30:	20 83       	st	Z, r18
    4b32:	08 95       	ret

00004b34 <reg_clear_bits>:
    4b34:	fc 01       	movw	r30, r24
    4b36:	90 81       	ld	r25, Z
    4b38:	60 95       	com	r22
    4b3a:	69 23       	and	r22, r25
    4b3c:	60 83       	st	Z, r22
    4b3e:	08 95       	ret

00004b40 <_serial_call_back>:
    4b40:	80 91 10 1b 	lds	r24, 0x1B10	; 0x801b10 <crc_sum.1941>
    4b44:	86 0f       	add	r24, r22
    4b46:	80 93 10 1b 	sts	0x1B10, r24	; 0x801b10 <crc_sum.1941>
    4b4a:	90 91 13 1b 	lds	r25, 0x1B13	; 0x801b13 <_mh_state>
    4b4e:	91 30       	cpi	r25, 0x01	; 1
    4b50:	79 f0       	breq	.+30     	; 0x4b70 <_serial_call_back+0x30>
    4b52:	28 f0       	brcs	.+10     	; 0x4b5e <_serial_call_back+0x1e>
    4b54:	92 30       	cpi	r25, 0x02	; 2
    4b56:	a9 f0       	breq	.+42     	; 0x4b82 <_serial_call_back+0x42>
    4b58:	93 30       	cpi	r25, 0x03	; 3
    4b5a:	19 f1       	breq	.+70     	; 0x4ba2 <_serial_call_back+0x62>
    4b5c:	08 95       	ret
    4b5e:	6f 3f       	cpi	r22, 0xFF	; 255
    4b60:	09 f0       	breq	.+2      	; 0x4b64 <_serial_call_back+0x24>
    4b62:	48 c0       	rjmp	.+144    	; 0x4bf4 <_serial_call_back+0xb4>
    4b64:	10 92 10 1b 	sts	0x1B10, r1	; 0x801b10 <crc_sum.1941>
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	80 93 13 1b 	sts	0x1B13, r24	; 0x801b13 <_mh_state>
    4b6e:	08 95       	ret
    4b70:	66 38       	cpi	r22, 0x86	; 134
    4b72:	09 f0       	breq	.+2      	; 0x4b76 <_serial_call_back+0x36>
    4b74:	3f c0       	rjmp	.+126    	; 0x4bf4 <_serial_call_back+0xb4>
    4b76:	10 92 0f 1b 	sts	0x1B0F, r1	; 0x801b0f <inDex.1939>
    4b7a:	82 e0       	ldi	r24, 0x02	; 2
    4b7c:	80 93 13 1b 	sts	0x1B13, r24	; 0x801b13 <_mh_state>
    4b80:	08 95       	ret
    4b82:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <inDex.1939>
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	8e 0f       	add	r24, r30
    4b8a:	80 93 0f 1b 	sts	0x1B0F, r24	; 0x801b0f <inDex.1939>
    4b8e:	f0 e0       	ldi	r31, 0x00	; 0
    4b90:	e3 5f       	subi	r30, 0xF3	; 243
    4b92:	f4 4e       	sbci	r31, 0xE4	; 228
    4b94:	60 83       	st	Z, r22
    4b96:	82 30       	cpi	r24, 0x02	; 2
    4b98:	69 f5       	brne	.+90     	; 0x4bf4 <_serial_call_back+0xb4>
    4b9a:	83 e0       	ldi	r24, 0x03	; 3
    4b9c:	80 93 13 1b 	sts	0x1B13, r24	; 0x801b13 <_mh_state>
    4ba0:	08 95       	ret
    4ba2:	90 91 0f 1b 	lds	r25, 0x1B0F	; 0x801b0f <inDex.1939>
    4ba6:	21 e0       	ldi	r18, 0x01	; 1
    4ba8:	29 0f       	add	r18, r25
    4baa:	20 93 0f 1b 	sts	0x1B0F, r18	; 0x801b0f <inDex.1939>
    4bae:	96 30       	cpi	r25, 0x06	; 6
    4bb0:	09 f5       	brne	.+66     	; 0x4bf4 <_serial_call_back+0xb4>
    4bb2:	81 11       	cpse	r24, r1
    4bb4:	0e c0       	rjmp	.+28     	; 0x4bd2 <_serial_call_back+0x92>
    4bb6:	ed e0       	ldi	r30, 0x0D	; 13
    4bb8:	fb e1       	ldi	r31, 0x1B	; 27
    4bba:	80 81       	ld	r24, Z
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	98 2f       	mov	r25, r24
    4bc0:	88 27       	eor	r24, r24
    4bc2:	21 81       	ldd	r18, Z+1	; 0x01
    4bc4:	82 0f       	add	r24, r18
    4bc6:	91 1d       	adc	r25, r1
    4bc8:	90 93 15 1b 	sts	0x1B15, r25	; 0x801b15 <_ppm+0x1>
    4bcc:	80 93 14 1b 	sts	0x1B14, r24	; 0x801b14 <_ppm>
    4bd0:	04 c0       	rjmp	.+8      	; 0x4bda <_serial_call_back+0x9a>
    4bd2:	10 92 15 1b 	sts	0x1B15, r1	; 0x801b15 <_ppm+0x1>
    4bd6:	10 92 14 1b 	sts	0x1B14, r1	; 0x801b14 <_ppm>
    4bda:	10 92 13 1b 	sts	0x1B13, r1	; 0x801b13 <_mh_state>
    4bde:	e0 91 11 1b 	lds	r30, 0x1B11	; 0x801b11 <_app_call_back>
    4be2:	f0 91 12 1b 	lds	r31, 0x1B12	; 0x801b12 <_app_call_back+0x1>
    4be6:	30 97       	sbiw	r30, 0x00	; 0
    4be8:	29 f0       	breq	.+10     	; 0x4bf4 <_serial_call_back+0xb4>
    4bea:	80 91 14 1b 	lds	r24, 0x1B14	; 0x801b14 <_ppm>
    4bee:	90 91 15 1b 	lds	r25, 0x1B15	; 0x801b15 <_ppm+0x1>
    4bf2:	19 95       	eicall
    4bf4:	08 95       	ret

00004bf6 <mh_z19_create>:
    4bf6:	8f 92       	push	r8
    4bf8:	9f 92       	push	r9
    4bfa:	af 92       	push	r10
    4bfc:	cf 92       	push	r12
    4bfe:	ef 92       	push	r14
    4c00:	0f 93       	push	r16
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	eb 01       	movw	r28, r22
    4c08:	0f 2e       	mov	r0, r31
    4c0a:	f0 ea       	ldi	r31, 0xA0	; 160
    4c0c:	8f 2e       	mov	r8, r31
    4c0e:	f5 e2       	ldi	r31, 0x25	; 37
    4c10:	9f 2e       	mov	r9, r31
    4c12:	f0 2d       	mov	r31, r0
    4c14:	68 94       	set
    4c16:	aa 24       	eor	r10, r10
    4c18:	a4 f8       	bld	r10, 4
    4c1a:	68 94       	set
    4c1c:	cc 24       	eor	r12, r12
    4c1e:	c4 f8       	bld	r12, 4
    4c20:	e1 2c       	mov	r14, r1
    4c22:	00 e0       	ldi	r16, 0x00	; 0
    4c24:	23 e0       	ldi	r18, 0x03	; 3
    4c26:	40 e8       	ldi	r20, 0x80	; 128
    4c28:	55 e2       	ldi	r21, 0x25	; 37
    4c2a:	60 e0       	ldi	r22, 0x00	; 0
    4c2c:	70 e0       	ldi	r23, 0x00	; 0
    4c2e:	40 d0       	rcall	.+128    	; 0x4cb0 <serial_new_instance>
    4c30:	90 93 17 1b 	sts	0x1B17, r25	; 0x801b17 <_serial+0x1>
    4c34:	80 93 16 1b 	sts	0x1B16, r24	; 0x801b16 <_serial>
    4c38:	d0 93 12 1b 	sts	0x1B12, r29	; 0x801b12 <_app_call_back+0x1>
    4c3c:	c0 93 11 1b 	sts	0x1B11, r28	; 0x801b11 <_app_call_back>
    4c40:	df 91       	pop	r29
    4c42:	cf 91       	pop	r28
    4c44:	0f 91       	pop	r16
    4c46:	ef 90       	pop	r14
    4c48:	cf 90       	pop	r12
    4c4a:	af 90       	pop	r10
    4c4c:	9f 90       	pop	r9
    4c4e:	8f 90       	pop	r8
    4c50:	08 95       	ret

00004c52 <mh_z19_take_meassuring>:
    4c52:	cf 93       	push	r28
    4c54:	df 93       	push	r29
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
    4c5a:	29 97       	sbiw	r28, 0x09	; 9
    4c5c:	0f b6       	in	r0, 0x3f	; 63
    4c5e:	f8 94       	cli
    4c60:	de bf       	out	0x3e, r29	; 62
    4c62:	0f be       	out	0x3f, r0	; 63
    4c64:	cd bf       	out	0x3d, r28	; 61
    4c66:	89 e0       	ldi	r24, 0x09	; 9
    4c68:	e1 e4       	ldi	r30, 0x41	; 65
    4c6a:	f2 e0       	ldi	r31, 0x02	; 2
    4c6c:	9e 01       	movw	r18, r28
    4c6e:	2f 5f       	subi	r18, 0xFF	; 255
    4c70:	3f 4f       	sbci	r19, 0xFF	; 255
    4c72:	d9 01       	movw	r26, r18
    4c74:	01 90       	ld	r0, Z+
    4c76:	0d 92       	st	X+, r0
    4c78:	8a 95       	dec	r24
    4c7a:	e1 f7       	brne	.-8      	; 0x4c74 <mh_z19_take_meassuring+0x22>
    4c7c:	10 92 15 1b 	sts	0x1B15, r1	; 0x801b15 <_ppm+0x1>
    4c80:	10 92 14 1b 	sts	0x1B14, r1	; 0x801b14 <_ppm>
    4c84:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <_serial>
    4c88:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <_serial+0x1>
    4c8c:	00 97       	sbiw	r24, 0x00	; 0
    4c8e:	31 f0       	breq	.+12     	; 0x4c9c <mh_z19_take_meassuring+0x4a>
    4c90:	42 2f       	mov	r20, r18
    4c92:	53 2f       	mov	r21, r19
    4c94:	69 e0       	ldi	r22, 0x09	; 9
    4c96:	c7 d0       	rcall	.+398    	; 0x4e26 <serial_send_bytes>
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	01 c0       	rjmp	.+2      	; 0x4c9e <mh_z19_take_meassuring+0x4c>
    4c9c:	82 e0       	ldi	r24, 0x02	; 2
    4c9e:	29 96       	adiw	r28, 0x09	; 9
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	df 91       	pop	r29
    4cac:	cf 91       	pop	r28
    4cae:	08 95       	ret

00004cb0 <serial_new_instance>:
    4cb0:	2f 92       	push	r2
    4cb2:	3f 92       	push	r3
    4cb4:	4f 92       	push	r4
    4cb6:	5f 92       	push	r5
    4cb8:	6f 92       	push	r6
    4cba:	7f 92       	push	r7
    4cbc:	8f 92       	push	r8
    4cbe:	9f 92       	push	r9
    4cc0:	af 92       	push	r10
    4cc2:	cf 92       	push	r12
    4cc4:	ef 92       	push	r14
    4cc6:	ff 92       	push	r15
    4cc8:	0f 93       	push	r16
    4cca:	1f 93       	push	r17
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	cd b7       	in	r28, 0x3d	; 61
    4cd2:	de b7       	in	r29, 0x3e	; 62
    4cd4:	f8 2e       	mov	r15, r24
    4cd6:	2a 01       	movw	r4, r20
    4cd8:	3b 01       	movw	r6, r22
    4cda:	88 e0       	ldi	r24, 0x08	; 8
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	9b d7       	rcall	.+3894   	; 0x5c16 <malloc>
    4ce0:	8c 01       	movw	r16, r24
    4ce2:	8f 2d       	mov	r24, r15
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	88 0f       	add	r24, r24
    4ce8:	99 1f       	adc	r25, r25
    4cea:	fc 01       	movw	r30, r24
    4cec:	e8 5e       	subi	r30, 0xE8	; 232
    4cee:	f4 4e       	sbci	r31, 0xE4	; 228
    4cf0:	11 83       	std	Z+1, r17	; 0x01
    4cf2:	00 83       	st	Z, r16
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	e6 5f       	subi	r30, 0xF6	; 246
    4cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    4cfa:	80 81       	ld	r24, Z
    4cfc:	91 81       	ldd	r25, Z+1	; 0x01
    4cfe:	d8 01       	movw	r26, r16
    4d00:	8d 93       	st	X+, r24
    4d02:	9c 93       	st	X, r25
    4d04:	6c 2d       	mov	r22, r12
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	84 e0       	ldi	r24, 0x04	; 4
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	6a d7       	rcall	.+3796   	; 0x5be2 <calloc>
    4d0e:	1c 01       	movw	r2, r24
    4d10:	61 e0       	ldi	r22, 0x01	; 1
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	86 e0       	ldi	r24, 0x06	; 6
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	64 d7       	rcall	.+3784   	; 0x5be2 <calloc>
    4d1a:	7c 01       	movw	r14, r24
    4d1c:	4c 2d       	mov	r20, r12
    4d1e:	b1 01       	movw	r22, r2
    4d20:	2b d5       	rcall	.+2646   	; 0x5778 <fifo_init>
    4d22:	f8 01       	movw	r30, r16
    4d24:	f5 82       	std	Z+5, r15	; 0x05
    4d26:	e4 82       	std	Z+4, r14	; 0x04
    4d28:	6a 2d       	mov	r22, r10
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	84 e0       	ldi	r24, 0x04	; 4
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	58 d7       	rcall	.+3760   	; 0x5be2 <calloc>
    4d32:	1c 01       	movw	r2, r24
    4d34:	61 e0       	ldi	r22, 0x01	; 1
    4d36:	70 e0       	ldi	r23, 0x00	; 0
    4d38:	86 e0       	ldi	r24, 0x06	; 6
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	52 d7       	rcall	.+3748   	; 0x5be2 <calloc>
    4d3e:	7c 01       	movw	r14, r24
    4d40:	4a 2d       	mov	r20, r10
    4d42:	b1 01       	movw	r22, r2
    4d44:	19 d5       	rcall	.+2610   	; 0x5778 <fifo_init>
    4d46:	d8 01       	movw	r26, r16
    4d48:	13 96       	adiw	r26, 0x03	; 3
    4d4a:	fc 92       	st	X, r15
    4d4c:	ee 92       	st	-X, r14
    4d4e:	12 97       	sbiw	r26, 0x02	; 2
    4d50:	17 96       	adiw	r26, 0x07	; 7
    4d52:	9c 92       	st	X, r9
    4d54:	8e 92       	st	-X, r8
    4d56:	16 97       	sbiw	r26, 0x06	; 6
    4d58:	ff b6       	in	r15, 0x3f	; 63
    4d5a:	f8 94       	cli
    4d5c:	ed 91       	ld	r30, X+
    4d5e:	fc 91       	ld	r31, X
    4d60:	11 97       	sbiw	r26, 0x01	; 1
    4d62:	36 97       	sbiw	r30, 0x06	; 6
    4d64:	80 81       	ld	r24, Z
    4d66:	82 60       	ori	r24, 0x02	; 2
    4d68:	80 83       	st	Z, r24
    4d6a:	8d 90       	ld	r8, X+
    4d6c:	9c 90       	ld	r9, X
    4d6e:	c3 01       	movw	r24, r6
    4d70:	b2 01       	movw	r22, r4
    4d72:	1c d6       	rcall	.+3128   	; 0x59ac <__floatunsisf>
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	40 e0       	ldi	r20, 0x00	; 0
    4d7a:	51 e4       	ldi	r21, 0x41	; 65
    4d7c:	a5 d6       	rcall	.+3402   	; 0x5ac8 <__mulsf3>
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	60 e0       	ldi	r22, 0x00	; 0
    4d84:	74 e2       	ldi	r23, 0x24	; 36
    4d86:	84 e7       	ldi	r24, 0x74	; 116
    4d88:	9b e4       	ldi	r25, 0x4B	; 75
    4d8a:	77 d5       	rcall	.+2798   	; 0x587a <__divsf3>
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	40 e8       	ldi	r20, 0x80	; 128
    4d92:	5f e3       	ldi	r21, 0x3F	; 63
    4d94:	0d d5       	rcall	.+2586   	; 0x57b0 <__subsf3>
    4d96:	de d5       	rcall	.+3004   	; 0x5954 <__fixunssfsi>
    4d98:	f4 01       	movw	r30, r8
    4d9a:	32 97       	sbiw	r30, 0x02	; 2
    4d9c:	60 83       	st	Z, r22
    4d9e:	d8 01       	movw	r26, r16
    4da0:	ed 91       	ld	r30, X+
    4da2:	fc 91       	ld	r31, X
    4da4:	11 97       	sbiw	r26, 0x01	; 1
    4da6:	35 97       	sbiw	r30, 0x05	; 5
    4da8:	88 e9       	ldi	r24, 0x98	; 152
    4daa:	80 83       	st	Z, r24
    4dac:	ed 91       	ld	r30, X+
    4dae:	fc 91       	ld	r31, X
    4db0:	34 97       	sbiw	r30, 0x04	; 4
    4db2:	86 e0       	ldi	r24, 0x06	; 6
    4db4:	80 83       	st	Z, r24
    4db6:	ff be       	out	0x3f, r15	; 63
    4db8:	c8 01       	movw	r24, r16
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	1f 91       	pop	r17
    4dc0:	0f 91       	pop	r16
    4dc2:	ff 90       	pop	r15
    4dc4:	ef 90       	pop	r14
    4dc6:	cf 90       	pop	r12
    4dc8:	af 90       	pop	r10
    4dca:	9f 90       	pop	r9
    4dcc:	8f 90       	pop	r8
    4dce:	7f 90       	pop	r7
    4dd0:	6f 90       	pop	r6
    4dd2:	5f 90       	pop	r5
    4dd4:	4f 90       	pop	r4
    4dd6:	3f 90       	pop	r3
    4dd8:	2f 90       	pop	r2
    4dda:	08 95       	ret

00004ddc <serial_send_byte>:
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	ec 01       	movw	r28, r24
    4de2:	ea 81       	ldd	r30, Y+2	; 0x02
    4de4:	fb 81       	ldd	r31, Y+3	; 0x03
    4de6:	93 81       	ldd	r25, Z+3	; 0x03
    4de8:	82 81       	ldd	r24, Z+2	; 0x02
    4dea:	25 81       	ldd	r18, Z+5	; 0x05
    4dec:	98 1b       	sub	r25, r24
    4dee:	92 23       	and	r25, r18
    4df0:	84 81       	ldd	r24, Z+4	; 0x04
    4df2:	98 17       	cp	r25, r24
    4df4:	a1 f0       	breq	.+40     	; 0x4e1e <serial_send_byte+0x42>
    4df6:	93 81       	ldd	r25, Z+3	; 0x03
    4df8:	26 95       	lsr	r18
    4dfa:	29 23       	and	r18, r25
    4dfc:	a0 81       	ld	r26, Z
    4dfe:	b1 81       	ldd	r27, Z+1	; 0x01
    4e00:	a2 0f       	add	r26, r18
    4e02:	b1 1d       	adc	r27, r1
    4e04:	6c 93       	st	X, r22
    4e06:	9f 5f       	subi	r25, 0xFF	; 255
    4e08:	25 81       	ldd	r18, Z+5	; 0x05
    4e0a:	92 23       	and	r25, r18
    4e0c:	93 83       	std	Z+3, r25	; 0x03
    4e0e:	e8 81       	ld	r30, Y
    4e10:	f9 81       	ldd	r31, Y+1	; 0x01
    4e12:	35 97       	sbiw	r30, 0x05	; 5
    4e14:	80 81       	ld	r24, Z
    4e16:	80 62       	ori	r24, 0x20	; 32
    4e18:	80 83       	st	Z, r24
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <serial_send_byte+0x44>
    4e1e:	82 e0       	ldi	r24, 0x02	; 2
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	08 95       	ret

00004e26 <serial_send_bytes>:
    4e26:	ef 92       	push	r14
    4e28:	ff 92       	push	r15
    4e2a:	0f 93       	push	r16
    4e2c:	1f 93       	push	r17
    4e2e:	cf 93       	push	r28
    4e30:	df 93       	push	r29
    4e32:	7c 01       	movw	r14, r24
    4e34:	dc 01       	movw	r26, r24
    4e36:	12 96       	adiw	r26, 0x02	; 2
    4e38:	ed 91       	ld	r30, X+
    4e3a:	fc 91       	ld	r31, X
    4e3c:	13 97       	sbiw	r26, 0x03	; 3
    4e3e:	93 81       	ldd	r25, Z+3	; 0x03
    4e40:	82 81       	ldd	r24, Z+2	; 0x02
    4e42:	98 1b       	sub	r25, r24
    4e44:	85 81       	ldd	r24, Z+5	; 0x05
    4e46:	98 23       	and	r25, r24
    4e48:	84 81       	ldd	r24, Z+4	; 0x04
    4e4a:	89 1b       	sub	r24, r25
    4e4c:	86 17       	cp	r24, r22
    4e4e:	98 f1       	brcs	.+102    	; 0x4eb6 <serial_send_bytes+0x90>
    4e50:	66 23       	and	r22, r22
    4e52:	41 f1       	breq	.+80     	; 0x4ea4 <serial_send_bytes+0x7e>
    4e54:	84 2f       	mov	r24, r20
    4e56:	95 2f       	mov	r25, r21
    4e58:	dc 01       	movw	r26, r24
    4e5a:	61 50       	subi	r22, 0x01	; 1
    4e5c:	46 2f       	mov	r20, r22
    4e5e:	50 e0       	ldi	r21, 0x00	; 0
    4e60:	4f 5f       	subi	r20, 0xFF	; 255
    4e62:	5f 4f       	sbci	r21, 0xFF	; 255
    4e64:	48 0f       	add	r20, r24
    4e66:	59 1f       	adc	r21, r25
    4e68:	e7 01       	movw	r28, r14
    4e6a:	ea 81       	ldd	r30, Y+2	; 0x02
    4e6c:	fb 81       	ldd	r31, Y+3	; 0x03
    4e6e:	93 81       	ldd	r25, Z+3	; 0x03
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	25 81       	ldd	r18, Z+5	; 0x05
    4e74:	98 1b       	sub	r25, r24
    4e76:	92 23       	and	r25, r18
    4e78:	84 81       	ldd	r24, Z+4	; 0x04
    4e7a:	98 17       	cp	r25, r24
    4e7c:	79 f0       	breq	.+30     	; 0x4e9c <serial_send_bytes+0x76>
    4e7e:	8c 91       	ld	r24, X
    4e80:	93 81       	ldd	r25, Z+3	; 0x03
    4e82:	26 95       	lsr	r18
    4e84:	29 23       	and	r18, r25
    4e86:	60 81       	ld	r22, Z
    4e88:	71 81       	ldd	r23, Z+1	; 0x01
    4e8a:	8b 01       	movw	r16, r22
    4e8c:	02 0f       	add	r16, r18
    4e8e:	11 1d       	adc	r17, r1
    4e90:	e8 01       	movw	r28, r16
    4e92:	88 83       	st	Y, r24
    4e94:	9f 5f       	subi	r25, 0xFF	; 255
    4e96:	85 81       	ldd	r24, Z+5	; 0x05
    4e98:	98 23       	and	r25, r24
    4e9a:	93 83       	std	Z+3, r25	; 0x03
    4e9c:	11 96       	adiw	r26, 0x01	; 1
    4e9e:	a4 17       	cp	r26, r20
    4ea0:	b5 07       	cpc	r27, r21
    4ea2:	11 f7       	brne	.-60     	; 0x4e68 <serial_send_bytes+0x42>
    4ea4:	d7 01       	movw	r26, r14
    4ea6:	ed 91       	ld	r30, X+
    4ea8:	fc 91       	ld	r31, X
    4eaa:	35 97       	sbiw	r30, 0x05	; 5
    4eac:	80 81       	ld	r24, Z
    4eae:	80 62       	ori	r24, 0x20	; 32
    4eb0:	80 83       	st	Z, r24
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	01 c0       	rjmp	.+2      	; 0x4eb8 <serial_send_bytes+0x92>
    4eb6:	82 e0       	ldi	r24, 0x02	; 2
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	1f 91       	pop	r17
    4ebe:	0f 91       	pop	r16
    4ec0:	ff 90       	pop	r15
    4ec2:	ef 90       	pop	r14
    4ec4:	08 95       	ret

00004ec6 <serial_get_byte>:
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	14 96       	adiw	r26, 0x04	; 4
    4eca:	ed 91       	ld	r30, X+
    4ecc:	fc 91       	ld	r31, X
    4ece:	15 97       	sbiw	r26, 0x05	; 5
    4ed0:	93 81       	ldd	r25, Z+3	; 0x03
    4ed2:	82 81       	ldd	r24, Z+2	; 0x02
    4ed4:	98 17       	cp	r25, r24
    4ed6:	89 f0       	breq	.+34     	; 0x4efa <serial_get_byte+0x34>
    4ed8:	92 81       	ldd	r25, Z+2	; 0x02
    4eda:	85 81       	ldd	r24, Z+5	; 0x05
    4edc:	86 95       	lsr	r24
    4ede:	89 23       	and	r24, r25
    4ee0:	a0 81       	ld	r26, Z
    4ee2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ee4:	a8 0f       	add	r26, r24
    4ee6:	b1 1d       	adc	r27, r1
    4ee8:	8c 91       	ld	r24, X
    4eea:	db 01       	movw	r26, r22
    4eec:	8c 93       	st	X, r24
    4eee:	9f 5f       	subi	r25, 0xFF	; 255
    4ef0:	85 81       	ldd	r24, Z+5	; 0x05
    4ef2:	98 23       	and	r25, r24
    4ef4:	92 83       	std	Z+2, r25	; 0x02
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	08 95       	ret
    4efa:	83 e0       	ldi	r24, 0x03	; 3
    4efc:	08 95       	ret

00004efe <__vector_25>:
    4efe:	1f 92       	push	r1
    4f00:	0f 92       	push	r0
    4f02:	0f b6       	in	r0, 0x3f	; 63
    4f04:	0f 92       	push	r0
    4f06:	11 24       	eor	r1, r1
    4f08:	0b b6       	in	r0, 0x3b	; 59
    4f0a:	0f 92       	push	r0
    4f0c:	2f 93       	push	r18
    4f0e:	3f 93       	push	r19
    4f10:	4f 93       	push	r20
    4f12:	5f 93       	push	r21
    4f14:	6f 93       	push	r22
    4f16:	7f 93       	push	r23
    4f18:	8f 93       	push	r24
    4f1a:	9f 93       	push	r25
    4f1c:	af 93       	push	r26
    4f1e:	bf 93       	push	r27
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	ef 93       	push	r30
    4f26:	ff 93       	push	r31
    4f28:	a0 91 18 1b 	lds	r26, 0x1B18	; 0x801b18 <_ser_handle>
    4f2c:	b0 91 19 1b 	lds	r27, 0x1B19	; 0x801b19 <_ser_handle+0x1>
    4f30:	10 97       	sbiw	r26, 0x00	; 0
    4f32:	11 f1       	breq	.+68     	; 0x4f78 <__vector_25+0x7a>
    4f34:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4f38:	14 96       	adiw	r26, 0x04	; 4
    4f3a:	ed 91       	ld	r30, X+
    4f3c:	fc 91       	ld	r31, X
    4f3e:	15 97       	sbiw	r26, 0x05	; 5
    4f40:	93 81       	ldd	r25, Z+3	; 0x03
    4f42:	82 81       	ldd	r24, Z+2	; 0x02
    4f44:	25 81       	ldd	r18, Z+5	; 0x05
    4f46:	98 1b       	sub	r25, r24
    4f48:	92 23       	and	r25, r18
    4f4a:	84 81       	ldd	r24, Z+4	; 0x04
    4f4c:	98 17       	cp	r25, r24
    4f4e:	61 f0       	breq	.+24     	; 0x4f68 <__vector_25+0x6a>
    4f50:	83 81       	ldd	r24, Z+3	; 0x03
    4f52:	26 95       	lsr	r18
    4f54:	28 23       	and	r18, r24
    4f56:	c0 81       	ld	r28, Z
    4f58:	d1 81       	ldd	r29, Z+1	; 0x01
    4f5a:	c2 0f       	add	r28, r18
    4f5c:	d1 1d       	adc	r29, r1
    4f5e:	68 83       	st	Y, r22
    4f60:	8f 5f       	subi	r24, 0xFF	; 255
    4f62:	95 81       	ldd	r25, Z+5	; 0x05
    4f64:	89 23       	and	r24, r25
    4f66:	83 83       	std	Z+3, r24	; 0x03
    4f68:	16 96       	adiw	r26, 0x06	; 6
    4f6a:	ed 91       	ld	r30, X+
    4f6c:	fc 91       	ld	r31, X
    4f6e:	17 97       	sbiw	r26, 0x07	; 7
    4f70:	30 97       	sbiw	r30, 0x00	; 0
    4f72:	11 f0       	breq	.+4      	; 0x4f78 <__vector_25+0x7a>
    4f74:	cd 01       	movw	r24, r26
    4f76:	19 95       	eicall
    4f78:	ff 91       	pop	r31
    4f7a:	ef 91       	pop	r30
    4f7c:	df 91       	pop	r29
    4f7e:	cf 91       	pop	r28
    4f80:	bf 91       	pop	r27
    4f82:	af 91       	pop	r26
    4f84:	9f 91       	pop	r25
    4f86:	8f 91       	pop	r24
    4f88:	7f 91       	pop	r23
    4f8a:	6f 91       	pop	r22
    4f8c:	5f 91       	pop	r21
    4f8e:	4f 91       	pop	r20
    4f90:	3f 91       	pop	r19
    4f92:	2f 91       	pop	r18
    4f94:	0f 90       	pop	r0
    4f96:	0b be       	out	0x3b, r0	; 59
    4f98:	0f 90       	pop	r0
    4f9a:	0f be       	out	0x3f, r0	; 63
    4f9c:	0f 90       	pop	r0
    4f9e:	1f 90       	pop	r1
    4fa0:	18 95       	reti

00004fa2 <__vector_26>:
    4fa2:	1f 92       	push	r1
    4fa4:	0f 92       	push	r0
    4fa6:	0f b6       	in	r0, 0x3f	; 63
    4fa8:	0f 92       	push	r0
    4faa:	11 24       	eor	r1, r1
    4fac:	0b b6       	in	r0, 0x3b	; 59
    4fae:	0f 92       	push	r0
    4fb0:	2f 93       	push	r18
    4fb2:	8f 93       	push	r24
    4fb4:	9f 93       	push	r25
    4fb6:	af 93       	push	r26
    4fb8:	bf 93       	push	r27
    4fba:	ef 93       	push	r30
    4fbc:	ff 93       	push	r31
    4fbe:	e0 91 18 1b 	lds	r30, 0x1B18	; 0x801b18 <_ser_handle>
    4fc2:	f0 91 19 1b 	lds	r31, 0x1B19	; 0x801b19 <_ser_handle+0x1>
    4fc6:	30 97       	sbiw	r30, 0x00	; 0
    4fc8:	b9 f0       	breq	.+46     	; 0x4ff8 <__vector_26+0x56>
    4fca:	02 80       	ldd	r0, Z+2	; 0x02
    4fcc:	f3 81       	ldd	r31, Z+3	; 0x03
    4fce:	e0 2d       	mov	r30, r0
    4fd0:	93 81       	ldd	r25, Z+3	; 0x03
    4fd2:	82 81       	ldd	r24, Z+2	; 0x02
    4fd4:	98 17       	cp	r25, r24
    4fd6:	b1 f0       	breq	.+44     	; 0x5004 <__vector_26+0x62>
    4fd8:	92 81       	ldd	r25, Z+2	; 0x02
    4fda:	85 81       	ldd	r24, Z+5	; 0x05
    4fdc:	28 2f       	mov	r18, r24
    4fde:	26 95       	lsr	r18
    4fe0:	29 23       	and	r18, r25
    4fe2:	a0 81       	ld	r26, Z
    4fe4:	b1 81       	ldd	r27, Z+1	; 0x01
    4fe6:	a2 0f       	add	r26, r18
    4fe8:	b1 1d       	adc	r27, r1
    4fea:	2c 91       	ld	r18, X
    4fec:	9f 5f       	subi	r25, 0xFF	; 255
    4fee:	89 23       	and	r24, r25
    4ff0:	82 83       	std	Z+2, r24	; 0x02
    4ff2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4ff6:	0b c0       	rjmp	.+22     	; 0x500e <__vector_26+0x6c>
    4ff8:	e1 ec       	ldi	r30, 0xC1	; 193
    4ffa:	f0 e0       	ldi	r31, 0x00	; 0
    4ffc:	80 81       	ld	r24, Z
    4ffe:	8f 7d       	andi	r24, 0xDF	; 223
    5000:	80 83       	st	Z, r24
    5002:	05 c0       	rjmp	.+10     	; 0x500e <__vector_26+0x6c>
    5004:	e1 ec       	ldi	r30, 0xC1	; 193
    5006:	f0 e0       	ldi	r31, 0x00	; 0
    5008:	80 81       	ld	r24, Z
    500a:	8f 7d       	andi	r24, 0xDF	; 223
    500c:	80 83       	st	Z, r24
    500e:	ff 91       	pop	r31
    5010:	ef 91       	pop	r30
    5012:	bf 91       	pop	r27
    5014:	af 91       	pop	r26
    5016:	9f 91       	pop	r25
    5018:	8f 91       	pop	r24
    501a:	2f 91       	pop	r18
    501c:	0f 90       	pop	r0
    501e:	0b be       	out	0x3b, r0	; 59
    5020:	0f 90       	pop	r0
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	0f 90       	pop	r0
    5026:	1f 90       	pop	r1
    5028:	18 95       	reti

0000502a <__vector_36>:
    502a:	1f 92       	push	r1
    502c:	0f 92       	push	r0
    502e:	0f b6       	in	r0, 0x3f	; 63
    5030:	0f 92       	push	r0
    5032:	11 24       	eor	r1, r1
    5034:	0b b6       	in	r0, 0x3b	; 59
    5036:	0f 92       	push	r0
    5038:	2f 93       	push	r18
    503a:	3f 93       	push	r19
    503c:	4f 93       	push	r20
    503e:	5f 93       	push	r21
    5040:	6f 93       	push	r22
    5042:	7f 93       	push	r23
    5044:	8f 93       	push	r24
    5046:	9f 93       	push	r25
    5048:	af 93       	push	r26
    504a:	bf 93       	push	r27
    504c:	cf 93       	push	r28
    504e:	df 93       	push	r29
    5050:	ef 93       	push	r30
    5052:	ff 93       	push	r31
    5054:	a0 91 1a 1b 	lds	r26, 0x1B1A	; 0x801b1a <_ser_handle+0x2>
    5058:	b0 91 1b 1b 	lds	r27, 0x1B1B	; 0x801b1b <_ser_handle+0x3>
    505c:	10 97       	sbiw	r26, 0x00	; 0
    505e:	11 f1       	breq	.+68     	; 0x50a4 <__vector_36+0x7a>
    5060:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5064:	14 96       	adiw	r26, 0x04	; 4
    5066:	ed 91       	ld	r30, X+
    5068:	fc 91       	ld	r31, X
    506a:	15 97       	sbiw	r26, 0x05	; 5
    506c:	93 81       	ldd	r25, Z+3	; 0x03
    506e:	82 81       	ldd	r24, Z+2	; 0x02
    5070:	25 81       	ldd	r18, Z+5	; 0x05
    5072:	98 1b       	sub	r25, r24
    5074:	92 23       	and	r25, r18
    5076:	84 81       	ldd	r24, Z+4	; 0x04
    5078:	98 17       	cp	r25, r24
    507a:	61 f0       	breq	.+24     	; 0x5094 <__vector_36+0x6a>
    507c:	83 81       	ldd	r24, Z+3	; 0x03
    507e:	26 95       	lsr	r18
    5080:	28 23       	and	r18, r24
    5082:	c0 81       	ld	r28, Z
    5084:	d1 81       	ldd	r29, Z+1	; 0x01
    5086:	c2 0f       	add	r28, r18
    5088:	d1 1d       	adc	r29, r1
    508a:	68 83       	st	Y, r22
    508c:	8f 5f       	subi	r24, 0xFF	; 255
    508e:	95 81       	ldd	r25, Z+5	; 0x05
    5090:	89 23       	and	r24, r25
    5092:	83 83       	std	Z+3, r24	; 0x03
    5094:	16 96       	adiw	r26, 0x06	; 6
    5096:	ed 91       	ld	r30, X+
    5098:	fc 91       	ld	r31, X
    509a:	17 97       	sbiw	r26, 0x07	; 7
    509c:	30 97       	sbiw	r30, 0x00	; 0
    509e:	11 f0       	breq	.+4      	; 0x50a4 <__vector_36+0x7a>
    50a0:	cd 01       	movw	r24, r26
    50a2:	19 95       	eicall
    50a4:	ff 91       	pop	r31
    50a6:	ef 91       	pop	r30
    50a8:	df 91       	pop	r29
    50aa:	cf 91       	pop	r28
    50ac:	bf 91       	pop	r27
    50ae:	af 91       	pop	r26
    50b0:	9f 91       	pop	r25
    50b2:	8f 91       	pop	r24
    50b4:	7f 91       	pop	r23
    50b6:	6f 91       	pop	r22
    50b8:	5f 91       	pop	r21
    50ba:	4f 91       	pop	r20
    50bc:	3f 91       	pop	r19
    50be:	2f 91       	pop	r18
    50c0:	0f 90       	pop	r0
    50c2:	0b be       	out	0x3b, r0	; 59
    50c4:	0f 90       	pop	r0
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	0f 90       	pop	r0
    50ca:	1f 90       	pop	r1
    50cc:	18 95       	reti

000050ce <__vector_37>:
    50ce:	1f 92       	push	r1
    50d0:	0f 92       	push	r0
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	0f 92       	push	r0
    50d6:	11 24       	eor	r1, r1
    50d8:	0b b6       	in	r0, 0x3b	; 59
    50da:	0f 92       	push	r0
    50dc:	2f 93       	push	r18
    50de:	8f 93       	push	r24
    50e0:	9f 93       	push	r25
    50e2:	af 93       	push	r26
    50e4:	bf 93       	push	r27
    50e6:	ef 93       	push	r30
    50e8:	ff 93       	push	r31
    50ea:	e0 91 1a 1b 	lds	r30, 0x1B1A	; 0x801b1a <_ser_handle+0x2>
    50ee:	f0 91 1b 1b 	lds	r31, 0x1B1B	; 0x801b1b <_ser_handle+0x3>
    50f2:	30 97       	sbiw	r30, 0x00	; 0
    50f4:	b9 f0       	breq	.+46     	; 0x5124 <__vector_37+0x56>
    50f6:	02 80       	ldd	r0, Z+2	; 0x02
    50f8:	f3 81       	ldd	r31, Z+3	; 0x03
    50fa:	e0 2d       	mov	r30, r0
    50fc:	93 81       	ldd	r25, Z+3	; 0x03
    50fe:	82 81       	ldd	r24, Z+2	; 0x02
    5100:	98 17       	cp	r25, r24
    5102:	b1 f0       	breq	.+44     	; 0x5130 <__vector_37+0x62>
    5104:	92 81       	ldd	r25, Z+2	; 0x02
    5106:	85 81       	ldd	r24, Z+5	; 0x05
    5108:	28 2f       	mov	r18, r24
    510a:	26 95       	lsr	r18
    510c:	29 23       	and	r18, r25
    510e:	a0 81       	ld	r26, Z
    5110:	b1 81       	ldd	r27, Z+1	; 0x01
    5112:	a2 0f       	add	r26, r18
    5114:	b1 1d       	adc	r27, r1
    5116:	2c 91       	ld	r18, X
    5118:	9f 5f       	subi	r25, 0xFF	; 255
    511a:	89 23       	and	r24, r25
    511c:	82 83       	std	Z+2, r24	; 0x02
    511e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5122:	0b c0       	rjmp	.+22     	; 0x513a <__vector_37+0x6c>
    5124:	e9 ec       	ldi	r30, 0xC9	; 201
    5126:	f0 e0       	ldi	r31, 0x00	; 0
    5128:	80 81       	ld	r24, Z
    512a:	8f 7d       	andi	r24, 0xDF	; 223
    512c:	80 83       	st	Z, r24
    512e:	05 c0       	rjmp	.+10     	; 0x513a <__vector_37+0x6c>
    5130:	e9 ec       	ldi	r30, 0xC9	; 201
    5132:	f0 e0       	ldi	r31, 0x00	; 0
    5134:	80 81       	ld	r24, Z
    5136:	8f 7d       	andi	r24, 0xDF	; 223
    5138:	80 83       	st	Z, r24
    513a:	ff 91       	pop	r31
    513c:	ef 91       	pop	r30
    513e:	bf 91       	pop	r27
    5140:	af 91       	pop	r26
    5142:	9f 91       	pop	r25
    5144:	8f 91       	pop	r24
    5146:	2f 91       	pop	r18
    5148:	0f 90       	pop	r0
    514a:	0b be       	out	0x3b, r0	; 59
    514c:	0f 90       	pop	r0
    514e:	0f be       	out	0x3f, r0	; 63
    5150:	0f 90       	pop	r0
    5152:	1f 90       	pop	r1
    5154:	18 95       	reti

00005156 <__vector_51>:
    5156:	1f 92       	push	r1
    5158:	0f 92       	push	r0
    515a:	0f b6       	in	r0, 0x3f	; 63
    515c:	0f 92       	push	r0
    515e:	11 24       	eor	r1, r1
    5160:	0b b6       	in	r0, 0x3b	; 59
    5162:	0f 92       	push	r0
    5164:	2f 93       	push	r18
    5166:	3f 93       	push	r19
    5168:	4f 93       	push	r20
    516a:	5f 93       	push	r21
    516c:	6f 93       	push	r22
    516e:	7f 93       	push	r23
    5170:	8f 93       	push	r24
    5172:	9f 93       	push	r25
    5174:	af 93       	push	r26
    5176:	bf 93       	push	r27
    5178:	cf 93       	push	r28
    517a:	df 93       	push	r29
    517c:	ef 93       	push	r30
    517e:	ff 93       	push	r31
    5180:	a0 91 1c 1b 	lds	r26, 0x1B1C	; 0x801b1c <_ser_handle+0x4>
    5184:	b0 91 1d 1b 	lds	r27, 0x1B1D	; 0x801b1d <_ser_handle+0x5>
    5188:	10 97       	sbiw	r26, 0x00	; 0
    518a:	11 f1       	breq	.+68     	; 0x51d0 <__vector_51+0x7a>
    518c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5190:	14 96       	adiw	r26, 0x04	; 4
    5192:	ed 91       	ld	r30, X+
    5194:	fc 91       	ld	r31, X
    5196:	15 97       	sbiw	r26, 0x05	; 5
    5198:	93 81       	ldd	r25, Z+3	; 0x03
    519a:	82 81       	ldd	r24, Z+2	; 0x02
    519c:	25 81       	ldd	r18, Z+5	; 0x05
    519e:	98 1b       	sub	r25, r24
    51a0:	92 23       	and	r25, r18
    51a2:	84 81       	ldd	r24, Z+4	; 0x04
    51a4:	98 17       	cp	r25, r24
    51a6:	61 f0       	breq	.+24     	; 0x51c0 <__vector_51+0x6a>
    51a8:	83 81       	ldd	r24, Z+3	; 0x03
    51aa:	26 95       	lsr	r18
    51ac:	28 23       	and	r18, r24
    51ae:	c0 81       	ld	r28, Z
    51b0:	d1 81       	ldd	r29, Z+1	; 0x01
    51b2:	c2 0f       	add	r28, r18
    51b4:	d1 1d       	adc	r29, r1
    51b6:	68 83       	st	Y, r22
    51b8:	8f 5f       	subi	r24, 0xFF	; 255
    51ba:	95 81       	ldd	r25, Z+5	; 0x05
    51bc:	89 23       	and	r24, r25
    51be:	83 83       	std	Z+3, r24	; 0x03
    51c0:	16 96       	adiw	r26, 0x06	; 6
    51c2:	ed 91       	ld	r30, X+
    51c4:	fc 91       	ld	r31, X
    51c6:	17 97       	sbiw	r26, 0x07	; 7
    51c8:	30 97       	sbiw	r30, 0x00	; 0
    51ca:	11 f0       	breq	.+4      	; 0x51d0 <__vector_51+0x7a>
    51cc:	cd 01       	movw	r24, r26
    51ce:	19 95       	eicall
    51d0:	ff 91       	pop	r31
    51d2:	ef 91       	pop	r30
    51d4:	df 91       	pop	r29
    51d6:	cf 91       	pop	r28
    51d8:	bf 91       	pop	r27
    51da:	af 91       	pop	r26
    51dc:	9f 91       	pop	r25
    51de:	8f 91       	pop	r24
    51e0:	7f 91       	pop	r23
    51e2:	6f 91       	pop	r22
    51e4:	5f 91       	pop	r21
    51e6:	4f 91       	pop	r20
    51e8:	3f 91       	pop	r19
    51ea:	2f 91       	pop	r18
    51ec:	0f 90       	pop	r0
    51ee:	0b be       	out	0x3b, r0	; 59
    51f0:	0f 90       	pop	r0
    51f2:	0f be       	out	0x3f, r0	; 63
    51f4:	0f 90       	pop	r0
    51f6:	1f 90       	pop	r1
    51f8:	18 95       	reti

000051fa <__vector_52>:
    51fa:	1f 92       	push	r1
    51fc:	0f 92       	push	r0
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	0f 92       	push	r0
    5202:	11 24       	eor	r1, r1
    5204:	0b b6       	in	r0, 0x3b	; 59
    5206:	0f 92       	push	r0
    5208:	2f 93       	push	r18
    520a:	8f 93       	push	r24
    520c:	9f 93       	push	r25
    520e:	af 93       	push	r26
    5210:	bf 93       	push	r27
    5212:	ef 93       	push	r30
    5214:	ff 93       	push	r31
    5216:	e0 91 1c 1b 	lds	r30, 0x1B1C	; 0x801b1c <_ser_handle+0x4>
    521a:	f0 91 1d 1b 	lds	r31, 0x1B1D	; 0x801b1d <_ser_handle+0x5>
    521e:	30 97       	sbiw	r30, 0x00	; 0
    5220:	b9 f0       	breq	.+46     	; 0x5250 <__vector_52+0x56>
    5222:	02 80       	ldd	r0, Z+2	; 0x02
    5224:	f3 81       	ldd	r31, Z+3	; 0x03
    5226:	e0 2d       	mov	r30, r0
    5228:	93 81       	ldd	r25, Z+3	; 0x03
    522a:	82 81       	ldd	r24, Z+2	; 0x02
    522c:	98 17       	cp	r25, r24
    522e:	b1 f0       	breq	.+44     	; 0x525c <__vector_52+0x62>
    5230:	92 81       	ldd	r25, Z+2	; 0x02
    5232:	85 81       	ldd	r24, Z+5	; 0x05
    5234:	28 2f       	mov	r18, r24
    5236:	26 95       	lsr	r18
    5238:	29 23       	and	r18, r25
    523a:	a0 81       	ld	r26, Z
    523c:	b1 81       	ldd	r27, Z+1	; 0x01
    523e:	a2 0f       	add	r26, r18
    5240:	b1 1d       	adc	r27, r1
    5242:	2c 91       	ld	r18, X
    5244:	9f 5f       	subi	r25, 0xFF	; 255
    5246:	89 23       	and	r24, r25
    5248:	82 83       	std	Z+2, r24	; 0x02
    524a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    524e:	0b c0       	rjmp	.+22     	; 0x5266 <__vector_52+0x6c>
    5250:	e1 ed       	ldi	r30, 0xD1	; 209
    5252:	f0 e0       	ldi	r31, 0x00	; 0
    5254:	80 81       	ld	r24, Z
    5256:	8f 7d       	andi	r24, 0xDF	; 223
    5258:	80 83       	st	Z, r24
    525a:	05 c0       	rjmp	.+10     	; 0x5266 <__vector_52+0x6c>
    525c:	e1 ed       	ldi	r30, 0xD1	; 209
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	80 81       	ld	r24, Z
    5262:	8f 7d       	andi	r24, 0xDF	; 223
    5264:	80 83       	st	Z, r24
    5266:	ff 91       	pop	r31
    5268:	ef 91       	pop	r30
    526a:	bf 91       	pop	r27
    526c:	af 91       	pop	r26
    526e:	9f 91       	pop	r25
    5270:	8f 91       	pop	r24
    5272:	2f 91       	pop	r18
    5274:	0f 90       	pop	r0
    5276:	0b be       	out	0x3b, r0	; 59
    5278:	0f 90       	pop	r0
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	0f 90       	pop	r0
    527e:	1f 90       	pop	r1
    5280:	18 95       	reti

00005282 <__vector_54>:
    5282:	1f 92       	push	r1
    5284:	0f 92       	push	r0
    5286:	0f b6       	in	r0, 0x3f	; 63
    5288:	0f 92       	push	r0
    528a:	11 24       	eor	r1, r1
    528c:	0b b6       	in	r0, 0x3b	; 59
    528e:	0f 92       	push	r0
    5290:	2f 93       	push	r18
    5292:	3f 93       	push	r19
    5294:	4f 93       	push	r20
    5296:	5f 93       	push	r21
    5298:	6f 93       	push	r22
    529a:	7f 93       	push	r23
    529c:	8f 93       	push	r24
    529e:	9f 93       	push	r25
    52a0:	af 93       	push	r26
    52a2:	bf 93       	push	r27
    52a4:	cf 93       	push	r28
    52a6:	df 93       	push	r29
    52a8:	ef 93       	push	r30
    52aa:	ff 93       	push	r31
    52ac:	a0 91 1e 1b 	lds	r26, 0x1B1E	; 0x801b1e <_ser_handle+0x6>
    52b0:	b0 91 1f 1b 	lds	r27, 0x1B1F	; 0x801b1f <_ser_handle+0x7>
    52b4:	10 97       	sbiw	r26, 0x00	; 0
    52b6:	11 f1       	breq	.+68     	; 0x52fc <__vector_54+0x7a>
    52b8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    52bc:	14 96       	adiw	r26, 0x04	; 4
    52be:	ed 91       	ld	r30, X+
    52c0:	fc 91       	ld	r31, X
    52c2:	15 97       	sbiw	r26, 0x05	; 5
    52c4:	93 81       	ldd	r25, Z+3	; 0x03
    52c6:	82 81       	ldd	r24, Z+2	; 0x02
    52c8:	25 81       	ldd	r18, Z+5	; 0x05
    52ca:	98 1b       	sub	r25, r24
    52cc:	92 23       	and	r25, r18
    52ce:	84 81       	ldd	r24, Z+4	; 0x04
    52d0:	98 17       	cp	r25, r24
    52d2:	61 f0       	breq	.+24     	; 0x52ec <__vector_54+0x6a>
    52d4:	83 81       	ldd	r24, Z+3	; 0x03
    52d6:	26 95       	lsr	r18
    52d8:	28 23       	and	r18, r24
    52da:	c0 81       	ld	r28, Z
    52dc:	d1 81       	ldd	r29, Z+1	; 0x01
    52de:	c2 0f       	add	r28, r18
    52e0:	d1 1d       	adc	r29, r1
    52e2:	68 83       	st	Y, r22
    52e4:	8f 5f       	subi	r24, 0xFF	; 255
    52e6:	95 81       	ldd	r25, Z+5	; 0x05
    52e8:	89 23       	and	r24, r25
    52ea:	83 83       	std	Z+3, r24	; 0x03
    52ec:	16 96       	adiw	r26, 0x06	; 6
    52ee:	ed 91       	ld	r30, X+
    52f0:	fc 91       	ld	r31, X
    52f2:	17 97       	sbiw	r26, 0x07	; 7
    52f4:	30 97       	sbiw	r30, 0x00	; 0
    52f6:	11 f0       	breq	.+4      	; 0x52fc <__vector_54+0x7a>
    52f8:	cd 01       	movw	r24, r26
    52fa:	19 95       	eicall
    52fc:	ff 91       	pop	r31
    52fe:	ef 91       	pop	r30
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	bf 91       	pop	r27
    5306:	af 91       	pop	r26
    5308:	9f 91       	pop	r25
    530a:	8f 91       	pop	r24
    530c:	7f 91       	pop	r23
    530e:	6f 91       	pop	r22
    5310:	5f 91       	pop	r21
    5312:	4f 91       	pop	r20
    5314:	3f 91       	pop	r19
    5316:	2f 91       	pop	r18
    5318:	0f 90       	pop	r0
    531a:	0b be       	out	0x3b, r0	; 59
    531c:	0f 90       	pop	r0
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	0f 90       	pop	r0
    5322:	1f 90       	pop	r1
    5324:	18 95       	reti

00005326 <__vector_55>:
    5326:	1f 92       	push	r1
    5328:	0f 92       	push	r0
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	0f 92       	push	r0
    532e:	11 24       	eor	r1, r1
    5330:	0b b6       	in	r0, 0x3b	; 59
    5332:	0f 92       	push	r0
    5334:	2f 93       	push	r18
    5336:	8f 93       	push	r24
    5338:	9f 93       	push	r25
    533a:	af 93       	push	r26
    533c:	bf 93       	push	r27
    533e:	ef 93       	push	r30
    5340:	ff 93       	push	r31
    5342:	e0 91 1e 1b 	lds	r30, 0x1B1E	; 0x801b1e <_ser_handle+0x6>
    5346:	f0 91 1f 1b 	lds	r31, 0x1B1F	; 0x801b1f <_ser_handle+0x7>
    534a:	30 97       	sbiw	r30, 0x00	; 0
    534c:	b9 f0       	breq	.+46     	; 0x537c <__vector_55+0x56>
    534e:	02 80       	ldd	r0, Z+2	; 0x02
    5350:	f3 81       	ldd	r31, Z+3	; 0x03
    5352:	e0 2d       	mov	r30, r0
    5354:	93 81       	ldd	r25, Z+3	; 0x03
    5356:	82 81       	ldd	r24, Z+2	; 0x02
    5358:	98 17       	cp	r25, r24
    535a:	b1 f0       	breq	.+44     	; 0x5388 <__vector_55+0x62>
    535c:	92 81       	ldd	r25, Z+2	; 0x02
    535e:	85 81       	ldd	r24, Z+5	; 0x05
    5360:	28 2f       	mov	r18, r24
    5362:	26 95       	lsr	r18
    5364:	29 23       	and	r18, r25
    5366:	a0 81       	ld	r26, Z
    5368:	b1 81       	ldd	r27, Z+1	; 0x01
    536a:	a2 0f       	add	r26, r18
    536c:	b1 1d       	adc	r27, r1
    536e:	2c 91       	ld	r18, X
    5370:	9f 5f       	subi	r25, 0xFF	; 255
    5372:	89 23       	and	r24, r25
    5374:	82 83       	std	Z+2, r24	; 0x02
    5376:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    537a:	0b c0       	rjmp	.+22     	; 0x5392 <__vector_55+0x6c>
    537c:	e1 e3       	ldi	r30, 0x31	; 49
    537e:	f1 e0       	ldi	r31, 0x01	; 1
    5380:	80 81       	ld	r24, Z
    5382:	8f 7d       	andi	r24, 0xDF	; 223
    5384:	80 83       	st	Z, r24
    5386:	05 c0       	rjmp	.+10     	; 0x5392 <__vector_55+0x6c>
    5388:	e1 e3       	ldi	r30, 0x31	; 49
    538a:	f1 e0       	ldi	r31, 0x01	; 1
    538c:	80 81       	ld	r24, Z
    538e:	8f 7d       	andi	r24, 0xDF	; 223
    5390:	80 83       	st	Z, r24
    5392:	ff 91       	pop	r31
    5394:	ef 91       	pop	r30
    5396:	bf 91       	pop	r27
    5398:	af 91       	pop	r26
    539a:	9f 91       	pop	r25
    539c:	8f 91       	pop	r24
    539e:	2f 91       	pop	r18
    53a0:	0f 90       	pop	r0
    53a2:	0b be       	out	0x3b, r0	; 59
    53a4:	0f 90       	pop	r0
    53a6:	0f be       	out	0x3f, r0	; 63
    53a8:	0f 90       	pop	r0
    53aa:	1f 90       	pop	r1
    53ac:	18 95       	reti

000053ae <usart_getchar>:
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	1f 92       	push	r1
    53b4:	cd b7       	in	r28, 0x3d	; 61
    53b6:	de b7       	in	r29, 0x3e	; 62
    53b8:	be 01       	movw	r22, r28
    53ba:	6f 5f       	subi	r22, 0xFF	; 255
    53bc:	7f 4f       	sbci	r23, 0xFF	; 255
    53be:	80 91 20 1b 	lds	r24, 0x1B20	; 0x801b20 <_com_serial_instance>
    53c2:	90 91 21 1b 	lds	r25, 0x1B21	; 0x801b21 <_com_serial_instance+0x1>
    53c6:	7f dd       	rcall	.-1282   	; 0x4ec6 <serial_get_byte>
    53c8:	81 11       	cpse	r24, r1
    53ca:	f6 cf       	rjmp	.-20     	; 0x53b8 <usart_getchar+0xa>
    53cc:	89 81       	ldd	r24, Y+1	; 0x01
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	0f 90       	pop	r0
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	08 95       	ret

000053d8 <usart_putchar>:
    53d8:	68 2f       	mov	r22, r24
    53da:	80 91 20 1b 	lds	r24, 0x1B20	; 0x801b20 <_com_serial_instance>
    53de:	90 91 21 1b 	lds	r25, 0x1B21	; 0x801b21 <_com_serial_instance+0x1>
    53e2:	fc dc       	rcall	.-1544   	; 0x4ddc <serial_send_byte>
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	08 95       	ret

000053ea <stdioCreate>:
    53ea:	8f 92       	push	r8
    53ec:	9f 92       	push	r9
    53ee:	af 92       	push	r10
    53f0:	cf 92       	push	r12
    53f2:	ef 92       	push	r14
    53f4:	0f 93       	push	r16
    53f6:	81 2c       	mov	r8, r1
    53f8:	91 2c       	mov	r9, r1
    53fa:	68 94       	set
    53fc:	aa 24       	eor	r10, r10
    53fe:	a7 f8       	bld	r10, 7
    5400:	68 94       	set
    5402:	cc 24       	eor	r12, r12
    5404:	c7 f8       	bld	r12, 7
    5406:	e1 2c       	mov	r14, r1
    5408:	00 e0       	ldi	r16, 0x00	; 0
    540a:	23 e0       	ldi	r18, 0x03	; 3
    540c:	40 e0       	ldi	r20, 0x00	; 0
    540e:	51 ee       	ldi	r21, 0xE1	; 225
    5410:	60 e0       	ldi	r22, 0x00	; 0
    5412:	70 e0       	ldi	r23, 0x00	; 0
    5414:	4d dc       	rcall	.-1894   	; 0x4cb0 <serial_new_instance>
    5416:	90 93 21 1b 	sts	0x1B21, r25	; 0x801b21 <_com_serial_instance+0x1>
    541a:	80 93 20 1b 	sts	0x1B20, r24	; 0x801b20 <_com_serial_instance>
    541e:	eb e6       	ldi	r30, 0x6B	; 107
    5420:	fb e1       	ldi	r31, 0x1B	; 27
    5422:	82 e1       	ldi	r24, 0x12	; 18
    5424:	92 e0       	ldi	r25, 0x02	; 2
    5426:	91 83       	std	Z+1, r25	; 0x01
    5428:	80 83       	st	Z, r24
    542a:	93 83       	std	Z+3, r25	; 0x03
    542c:	82 83       	std	Z+2, r24	; 0x02
    542e:	0f 91       	pop	r16
    5430:	ef 90       	pop	r14
    5432:	cf 90       	pop	r12
    5434:	af 90       	pop	r10
    5436:	9f 90       	pop	r9
    5438:	8f 90       	pop	r8
    543a:	08 95       	ret

0000543c <_initTwiInterface>:
    543c:	80 91 30 1b 	lds	r24, 0x1B30	; 0x801b30 <_twiIsInitiated>
    5440:	81 11       	cpse	r24, r1
    5442:	0c c0       	rjmp	.+24     	; 0x545c <_initTwiInterface+0x20>
    5444:	8c e0       	ldi	r24, 0x0C	; 12
    5446:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    544a:	8f ef       	ldi	r24, 0xFF	; 255
    544c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5450:	84 e0       	ldi	r24, 0x04	; 4
    5452:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	80 93 30 1b 	sts	0x1B30, r24	; 0x801b30 <_twiIsInitiated>
    545c:	08 95       	ret

0000545e <twiCreate>:
    545e:	af 92       	push	r10
    5460:	bf 92       	push	r11
    5462:	cf 92       	push	r12
    5464:	df 92       	push	r13
    5466:	ef 92       	push	r14
    5468:	ff 92       	push	r15
    546a:	0f 93       	push	r16
    546c:	1f 93       	push	r17
    546e:	cf 93       	push	r28
    5470:	df 93       	push	r29
    5472:	a8 2e       	mov	r10, r24
    5474:	b6 2e       	mov	r11, r22
    5476:	69 01       	movw	r12, r18
    5478:	7a 01       	movw	r14, r20
    547a:	84 e0       	ldi	r24, 0x04	; 4
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	cb d3       	rcall	.+1942   	; 0x5c16 <malloc>
    5480:	ec 01       	movw	r28, r24
    5482:	89 2b       	or	r24, r25
    5484:	61 f1       	breq	.+88     	; 0x54de <twiCreate+0x80>
    5486:	a8 82       	st	Y, r10
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	b8 12       	cpse	r11, r24
    548c:	12 c0       	rjmp	.+36     	; 0x54b2 <twiCreate+0x54>
    548e:	c7 01       	movw	r24, r14
    5490:	b6 01       	movw	r22, r12
    5492:	20 ea       	ldi	r18, 0xA0	; 160
    5494:	36 e8       	ldi	r19, 0x86	; 134
    5496:	41 e0       	ldi	r20, 0x01	; 1
    5498:	50 e0       	ldi	r21, 0x00	; 0
    549a:	79 d3       	rcall	.+1778   	; 0x5b8e <__udivmodsi4>
    549c:	da 01       	movw	r26, r20
    549e:	c9 01       	movw	r24, r18
    54a0:	40 97       	sbiw	r24, 0x10	; 16
    54a2:	a1 09       	sbc	r26, r1
    54a4:	b1 09       	sbc	r27, r1
    54a6:	b6 95       	lsr	r27
    54a8:	a7 95       	ror	r26
    54aa:	97 95       	ror	r25
    54ac:	87 95       	ror	r24
    54ae:	89 83       	std	Y+1, r24	; 0x01
    54b0:	11 c0       	rjmp	.+34     	; 0x54d4 <twiCreate+0x76>
    54b2:	c7 01       	movw	r24, r14
    54b4:	b6 01       	movw	r22, r12
    54b6:	20 e8       	ldi	r18, 0x80	; 128
    54b8:	3a e1       	ldi	r19, 0x1A	; 26
    54ba:	46 e0       	ldi	r20, 0x06	; 6
    54bc:	50 e0       	ldi	r21, 0x00	; 0
    54be:	67 d3       	rcall	.+1742   	; 0x5b8e <__udivmodsi4>
    54c0:	da 01       	movw	r26, r20
    54c2:	c9 01       	movw	r24, r18
    54c4:	40 97       	sbiw	r24, 0x10	; 16
    54c6:	a1 09       	sbc	r26, r1
    54c8:	b1 09       	sbc	r27, r1
    54ca:	b6 95       	lsr	r27
    54cc:	a7 95       	ror	r26
    54ce:	97 95       	ror	r25
    54d0:	87 95       	ror	r24
    54d2:	89 83       	std	Y+1, r24	; 0x01
    54d4:	1b 83       	std	Y+3, r17	; 0x03
    54d6:	0a 83       	std	Y+2, r16	; 0x02
    54d8:	8c 2f       	mov	r24, r28
    54da:	9d 2f       	mov	r25, r29
    54dc:	02 c0       	rjmp	.+4      	; 0x54e2 <twiCreate+0x84>
    54de:	80 e0       	ldi	r24, 0x00	; 0
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	1f 91       	pop	r17
    54e8:	0f 91       	pop	r16
    54ea:	ff 90       	pop	r15
    54ec:	ef 90       	pop	r14
    54ee:	df 90       	pop	r13
    54f0:	cf 90       	pop	r12
    54f2:	bf 90       	pop	r11
    54f4:	af 90       	pop	r10
    54f6:	08 95       	ret

000054f8 <twiIsBusy>:
    54f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    54fc:	81 70       	andi	r24, 0x01	; 1
    54fe:	08 95       	ret

00005500 <twiTransmit>:
    5500:	ff 92       	push	r15
    5502:	0f 93       	push	r16
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	00 97       	sbiw	r24, 0x00	; 0
    550c:	d1 f1       	breq	.+116    	; 0x5582 <twiTransmit+0x82>
    550e:	4a 30       	cpi	r20, 0x0A	; 10
    5510:	d0 f5       	brcc	.+116    	; 0x5586 <twiTransmit+0x86>
    5512:	f4 2e       	mov	r15, r20
    5514:	8b 01       	movw	r16, r22
    5516:	ec 01       	movw	r28, r24
    5518:	ef df       	rcall	.-34     	; 0x54f8 <twiIsBusy>
    551a:	81 11       	cpse	r24, r1
    551c:	36 c0       	rjmp	.+108    	; 0x558a <twiTransmit+0x8a>
    551e:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    5522:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    5526:	c8 17       	cp	r28, r24
    5528:	d9 07       	cpc	r29, r25
    552a:	41 f0       	breq	.+16     	; 0x553c <twiTransmit+0x3c>
    552c:	87 df       	rcall	.-242    	; 0x543c <_initTwiInterface>
    552e:	89 81       	ldd	r24, Y+1	; 0x01
    5530:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5534:	d0 93 24 1b 	sts	0x1B24, r29	; 0x801b24 <_twiCurrentHandler+0x1>
    5538:	c0 93 23 1b 	sts	0x1B23, r28	; 0x801b23 <_twiCurrentHandler>
    553c:	81 e0       	ldi	r24, 0x01	; 1
    553e:	8f 0d       	add	r24, r15
    5540:	80 93 25 1b 	sts	0x1B25, r24	; 0x801b25 <_twiMessageLen>
    5544:	88 81       	ld	r24, Y
    5546:	88 0f       	add	r24, r24
    5548:	80 93 26 1b 	sts	0x1B26, r24	; 0x801b26 <_twiMessageBuffer>
    554c:	ff 20       	and	r15, r15
    554e:	89 f0       	breq	.+34     	; 0x5572 <twiTransmit+0x72>
    5550:	f8 01       	movw	r30, r16
    5552:	a7 e2       	ldi	r26, 0x27	; 39
    5554:	bb e1       	ldi	r27, 0x1B	; 27
    5556:	4f ef       	ldi	r20, 0xFF	; 255
    5558:	4f 0d       	add	r20, r15
    555a:	64 2f       	mov	r22, r20
    555c:	70 e0       	ldi	r23, 0x00	; 0
    555e:	cb 01       	movw	r24, r22
    5560:	01 96       	adiw	r24, 0x01	; 1
    5562:	b8 01       	movw	r22, r16
    5564:	68 0f       	add	r22, r24
    5566:	79 1f       	adc	r23, r25
    5568:	81 91       	ld	r24, Z+
    556a:	8d 93       	st	X+, r24
    556c:	e6 17       	cp	r30, r22
    556e:	f7 07       	cpc	r31, r23
    5570:	d9 f7       	brne	.-10     	; 0x5568 <twiTransmit+0x68>
    5572:	88 ef       	ldi	r24, 0xF8	; 248
    5574:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5578:	85 ea       	ldi	r24, 0xA5	; 165
    557a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    557e:	84 e0       	ldi	r24, 0x04	; 4
    5580:	05 c0       	rjmp	.+10     	; 0x558c <twiTransmit+0x8c>
    5582:	86 e0       	ldi	r24, 0x06	; 6
    5584:	03 c0       	rjmp	.+6      	; 0x558c <twiTransmit+0x8c>
    5586:	87 e0       	ldi	r24, 0x07	; 7
    5588:	01 c0       	rjmp	.+2      	; 0x558c <twiTransmit+0x8c>
    558a:	82 e0       	ldi	r24, 0x02	; 2
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	1f 91       	pop	r17
    5592:	0f 91       	pop	r16
    5594:	ff 90       	pop	r15
    5596:	08 95       	ret

00005598 <twiReceive>:
    5598:	1f 93       	push	r17
    559a:	cf 93       	push	r28
    559c:	df 93       	push	r29
    559e:	00 97       	sbiw	r24, 0x00	; 0
    55a0:	29 f1       	breq	.+74     	; 0x55ec <twiReceive+0x54>
    55a2:	6b 30       	cpi	r22, 0x0B	; 11
    55a4:	28 f5       	brcc	.+74     	; 0x55f0 <twiReceive+0x58>
    55a6:	16 2f       	mov	r17, r22
    55a8:	ec 01       	movw	r28, r24
    55aa:	a6 df       	rcall	.-180    	; 0x54f8 <twiIsBusy>
    55ac:	81 11       	cpse	r24, r1
    55ae:	22 c0       	rjmp	.+68     	; 0x55f4 <twiReceive+0x5c>
    55b0:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    55b4:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    55b8:	c8 17       	cp	r28, r24
    55ba:	d9 07       	cpc	r29, r25
    55bc:	41 f0       	breq	.+16     	; 0x55ce <twiReceive+0x36>
    55be:	3e df       	rcall	.-388    	; 0x543c <_initTwiInterface>
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    55c6:	d0 93 24 1b 	sts	0x1B24, r29	; 0x801b24 <_twiCurrentHandler+0x1>
    55ca:	c0 93 23 1b 	sts	0x1B23, r28	; 0x801b23 <_twiCurrentHandler>
    55ce:	10 93 25 1b 	sts	0x1B25, r17	; 0x801b25 <_twiMessageLen>
    55d2:	88 81       	ld	r24, Y
    55d4:	88 0f       	add	r24, r24
    55d6:	81 60       	ori	r24, 0x01	; 1
    55d8:	80 93 26 1b 	sts	0x1B26, r24	; 0x801b26 <_twiMessageBuffer>
    55dc:	88 ef       	ldi	r24, 0xF8	; 248
    55de:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    55e2:	85 ea       	ldi	r24, 0xA5	; 165
    55e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    55e8:	85 e0       	ldi	r24, 0x05	; 5
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <twiReceive+0x5e>
    55ec:	86 e0       	ldi	r24, 0x06	; 6
    55ee:	03 c0       	rjmp	.+6      	; 0x55f6 <twiReceive+0x5e>
    55f0:	87 e0       	ldi	r24, 0x07	; 7
    55f2:	01 c0       	rjmp	.+2      	; 0x55f6 <twiReceive+0x5e>
    55f4:	82 e0       	ldi	r24, 0x02	; 2
    55f6:	df 91       	pop	r29
    55f8:	cf 91       	pop	r28
    55fa:	1f 91       	pop	r17
    55fc:	08 95       	ret

000055fe <__vector_39>:
    55fe:	1f 92       	push	r1
    5600:	0f 92       	push	r0
    5602:	0f b6       	in	r0, 0x3f	; 63
    5604:	0f 92       	push	r0
    5606:	11 24       	eor	r1, r1
    5608:	0b b6       	in	r0, 0x3b	; 59
    560a:	0f 92       	push	r0
    560c:	2f 93       	push	r18
    560e:	3f 93       	push	r19
    5610:	4f 93       	push	r20
    5612:	5f 93       	push	r21
    5614:	6f 93       	push	r22
    5616:	7f 93       	push	r23
    5618:	8f 93       	push	r24
    561a:	9f 93       	push	r25
    561c:	af 93       	push	r26
    561e:	bf 93       	push	r27
    5620:	ef 93       	push	r30
    5622:	ff 93       	push	r31
    5624:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5628:	8e 2f       	mov	r24, r30
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	fc 01       	movw	r30, r24
    562e:	38 97       	sbiw	r30, 0x08	; 8
    5630:	e1 35       	cpi	r30, 0x51	; 81
    5632:	f1 05       	cpc	r31, r1
    5634:	08 f0       	brcs	.+2      	; 0x5638 <__vector_39+0x3a>
    5636:	75 c0       	rjmp	.+234    	; 0x5722 <__vector_39+0x124>
    5638:	88 27       	eor	r24, r24
    563a:	e4 58       	subi	r30, 0x84	; 132
    563c:	ff 4f       	sbci	r31, 0xFF	; 255
    563e:	8f 4f       	sbci	r24, 0xFF	; 255
    5640:	c8 c2       	rjmp	.+1424   	; 0x5bd2 <__tablejump2__>
    5642:	10 92 22 1b 	sts	0x1B22, r1	; 0x801b22 <_index.1885>
    5646:	e0 91 22 1b 	lds	r30, 0x1B22	; 0x801b22 <_index.1885>
    564a:	80 91 25 1b 	lds	r24, 0x1B25	; 0x801b25 <_twiMessageLen>
    564e:	e8 17       	cp	r30, r24
    5650:	70 f4       	brcc	.+28     	; 0x566e <__vector_39+0x70>
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	8e 0f       	add	r24, r30
    5656:	80 93 22 1b 	sts	0x1B22, r24	; 0x801b22 <_index.1885>
    565a:	f0 e0       	ldi	r31, 0x00	; 0
    565c:	ea 5d       	subi	r30, 0xDA	; 218
    565e:	f4 4e       	sbci	r31, 0xE4	; 228
    5660:	80 81       	ld	r24, Z
    5662:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5666:	85 e8       	ldi	r24, 0x85	; 133
    5668:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    566c:	72 c0       	rjmp	.+228    	; 0x5752 <__vector_39+0x154>
    566e:	84 e9       	ldi	r24, 0x94	; 148
    5670:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5674:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    5678:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    567c:	dc 01       	movw	r26, r24
    567e:	12 96       	adiw	r26, 0x02	; 2
    5680:	ed 91       	ld	r30, X+
    5682:	fc 91       	ld	r31, X
    5684:	13 97       	sbiw	r26, 0x03	; 3
    5686:	30 97       	sbiw	r30, 0x00	; 0
    5688:	09 f4       	brne	.+2      	; 0x568c <__vector_39+0x8e>
    568a:	63 c0       	rjmp	.+198    	; 0x5752 <__vector_39+0x154>
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	40 e0       	ldi	r20, 0x00	; 0
    5690:	50 e0       	ldi	r21, 0x00	; 0
    5692:	64 e0       	ldi	r22, 0x04	; 4
    5694:	19 95       	eicall
    5696:	5d c0       	rjmp	.+186    	; 0x5752 <__vector_39+0x154>
    5698:	e0 91 22 1b 	lds	r30, 0x1B22	; 0x801b22 <_index.1885>
    569c:	81 e0       	ldi	r24, 0x01	; 1
    569e:	8e 0f       	add	r24, r30
    56a0:	80 93 22 1b 	sts	0x1B22, r24	; 0x801b22 <_index.1885>
    56a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56a8:	f0 e0       	ldi	r31, 0x00	; 0
    56aa:	ea 5d       	subi	r30, 0xDA	; 218
    56ac:	f4 4e       	sbci	r31, 0xE4	; 228
    56ae:	80 83       	st	Z, r24
    56b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    56b4:	80 34       	cpi	r24, 0x40	; 64
    56b6:	11 f4       	brne	.+4      	; 0x56bc <__vector_39+0xbe>
    56b8:	10 92 22 1b 	sts	0x1B22, r1	; 0x801b22 <_index.1885>
    56bc:	20 91 22 1b 	lds	r18, 0x1B22	; 0x801b22 <_index.1885>
    56c0:	30 e0       	ldi	r19, 0x00	; 0
    56c2:	80 91 25 1b 	lds	r24, 0x1B25	; 0x801b25 <_twiMessageLen>
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	01 97       	sbiw	r24, 0x01	; 1
    56ca:	28 17       	cp	r18, r24
    56cc:	39 07       	cpc	r19, r25
    56ce:	24 f4       	brge	.+8      	; 0x56d8 <__vector_39+0xda>
    56d0:	85 ec       	ldi	r24, 0xC5	; 197
    56d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56d6:	3d c0       	rjmp	.+122    	; 0x5752 <__vector_39+0x154>
    56d8:	85 e8       	ldi	r24, 0x85	; 133
    56da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56de:	39 c0       	rjmp	.+114    	; 0x5752 <__vector_39+0x154>
    56e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    56e4:	e0 91 22 1b 	lds	r30, 0x1B22	; 0x801b22 <_index.1885>
    56e8:	f0 e0       	ldi	r31, 0x00	; 0
    56ea:	ea 5d       	subi	r30, 0xDA	; 218
    56ec:	f4 4e       	sbci	r31, 0xE4	; 228
    56ee:	80 83       	st	Z, r24
    56f0:	84 e9       	ldi	r24, 0x94	; 148
    56f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    56f6:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    56fa:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    56fe:	dc 01       	movw	r26, r24
    5700:	12 96       	adiw	r26, 0x02	; 2
    5702:	ed 91       	ld	r30, X+
    5704:	fc 91       	ld	r31, X
    5706:	13 97       	sbiw	r26, 0x03	; 3
    5708:	30 97       	sbiw	r30, 0x00	; 0
    570a:	19 f1       	breq	.+70     	; 0x5752 <__vector_39+0x154>
    570c:	20 91 25 1b 	lds	r18, 0x1B25	; 0x801b25 <_twiMessageLen>
    5710:	46 e2       	ldi	r20, 0x26	; 38
    5712:	5b e1       	ldi	r21, 0x1B	; 27
    5714:	65 e0       	ldi	r22, 0x05	; 5
    5716:	19 95       	eicall
    5718:	1c c0       	rjmp	.+56     	; 0x5752 <__vector_39+0x154>
    571a:	85 ea       	ldi	r24, 0xA5	; 165
    571c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5720:	18 c0       	rjmp	.+48     	; 0x5752 <__vector_39+0x154>
    5722:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5726:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    572a:	84 e0       	ldi	r24, 0x04	; 4
    572c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5730:	80 91 23 1b 	lds	r24, 0x1B23	; 0x801b23 <_twiCurrentHandler>
    5734:	90 91 24 1b 	lds	r25, 0x1B24	; 0x801b24 <_twiCurrentHandler+0x1>
    5738:	dc 01       	movw	r26, r24
    573a:	12 96       	adiw	r26, 0x02	; 2
    573c:	ed 91       	ld	r30, X+
    573e:	fc 91       	ld	r31, X
    5740:	13 97       	sbiw	r26, 0x03	; 3
    5742:	30 97       	sbiw	r30, 0x00	; 0
    5744:	31 f0       	breq	.+12     	; 0x5752 <__vector_39+0x154>
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	40 e0       	ldi	r20, 0x00	; 0
    574a:	50 e0       	ldi	r21, 0x00	; 0
    574c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    5750:	19 95       	eicall
    5752:	ff 91       	pop	r31
    5754:	ef 91       	pop	r30
    5756:	bf 91       	pop	r27
    5758:	af 91       	pop	r26
    575a:	9f 91       	pop	r25
    575c:	8f 91       	pop	r24
    575e:	7f 91       	pop	r23
    5760:	6f 91       	pop	r22
    5762:	5f 91       	pop	r21
    5764:	4f 91       	pop	r20
    5766:	3f 91       	pop	r19
    5768:	2f 91       	pop	r18
    576a:	0f 90       	pop	r0
    576c:	0b be       	out	0x3b, r0	; 59
    576e:	0f 90       	pop	r0
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	0f 90       	pop	r0
    5774:	1f 90       	pop	r1
    5776:	18 95       	reti

00005778 <fifo_init>:
    5778:	fc 01       	movw	r30, r24
    577a:	41 11       	cpse	r20, r1
    577c:	01 c0       	rjmp	.+2      	; 0x5780 <fifo_init+0x8>
    577e:	6c d3       	rcall	.+1752   	; 0x5e58 <abort>
    5780:	84 2f       	mov	r24, r20
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	9c 01       	movw	r18, r24
    5786:	21 50       	subi	r18, 0x01	; 1
    5788:	31 09       	sbc	r19, r1
    578a:	82 23       	and	r24, r18
    578c:	93 23       	and	r25, r19
    578e:	89 2b       	or	r24, r25
    5790:	09 f0       	breq	.+2      	; 0x5794 <fifo_init+0x1c>
    5792:	62 d3       	rcall	.+1732   	; 0x5e58 <abort>
    5794:	41 38       	cpi	r20, 0x81	; 129
    5796:	08 f0       	brcs	.+2      	; 0x579a <fifo_init+0x22>
    5798:	5f d3       	rcall	.+1726   	; 0x5e58 <abort>
    579a:	12 82       	std	Z+2, r1	; 0x02
    579c:	13 82       	std	Z+3, r1	; 0x03
    579e:	44 83       	std	Z+4, r20	; 0x04
    57a0:	44 0f       	add	r20, r20
    57a2:	41 50       	subi	r20, 0x01	; 1
    57a4:	45 83       	std	Z+5, r20	; 0x05
    57a6:	71 83       	std	Z+1, r23	; 0x01
    57a8:	60 83       	st	Z, r22
    57aa:	80 e0       	ldi	r24, 0x00	; 0
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	08 95       	ret

000057b0 <__subsf3>:
    57b0:	50 58       	subi	r21, 0x80	; 128

000057b2 <__addsf3>:
    57b2:	bb 27       	eor	r27, r27
    57b4:	aa 27       	eor	r26, r26
    57b6:	0e d0       	rcall	.+28     	; 0x57d4 <__addsf3x>
    57b8:	4d c1       	rjmp	.+666    	; 0x5a54 <__fp_round>
    57ba:	3e d1       	rcall	.+636    	; 0x5a38 <__fp_pscA>
    57bc:	30 f0       	brcs	.+12     	; 0x57ca <__addsf3+0x18>
    57be:	43 d1       	rcall	.+646    	; 0x5a46 <__fp_pscB>
    57c0:	20 f0       	brcs	.+8      	; 0x57ca <__addsf3+0x18>
    57c2:	31 f4       	brne	.+12     	; 0x57d0 <__addsf3+0x1e>
    57c4:	9f 3f       	cpi	r25, 0xFF	; 255
    57c6:	11 f4       	brne	.+4      	; 0x57cc <__addsf3+0x1a>
    57c8:	1e f4       	brtc	.+6      	; 0x57d0 <__addsf3+0x1e>
    57ca:	33 c1       	rjmp	.+614    	; 0x5a32 <__fp_nan>
    57cc:	0e f4       	brtc	.+2      	; 0x57d0 <__addsf3+0x1e>
    57ce:	e0 95       	com	r30
    57d0:	e7 fb       	bst	r30, 7
    57d2:	29 c1       	rjmp	.+594    	; 0x5a26 <__fp_inf>

000057d4 <__addsf3x>:
    57d4:	e9 2f       	mov	r30, r25
    57d6:	4f d1       	rcall	.+670    	; 0x5a76 <__fp_split3>
    57d8:	80 f3       	brcs	.-32     	; 0x57ba <__addsf3+0x8>
    57da:	ba 17       	cp	r27, r26
    57dc:	62 07       	cpc	r22, r18
    57de:	73 07       	cpc	r23, r19
    57e0:	84 07       	cpc	r24, r20
    57e2:	95 07       	cpc	r25, r21
    57e4:	18 f0       	brcs	.+6      	; 0x57ec <__addsf3x+0x18>
    57e6:	71 f4       	brne	.+28     	; 0x5804 <__addsf3x+0x30>
    57e8:	9e f5       	brtc	.+102    	; 0x5850 <__addsf3x+0x7c>
    57ea:	67 c1       	rjmp	.+718    	; 0x5aba <__fp_zero>
    57ec:	0e f4       	brtc	.+2      	; 0x57f0 <__addsf3x+0x1c>
    57ee:	e0 95       	com	r30
    57f0:	0b 2e       	mov	r0, r27
    57f2:	ba 2f       	mov	r27, r26
    57f4:	a0 2d       	mov	r26, r0
    57f6:	0b 01       	movw	r0, r22
    57f8:	b9 01       	movw	r22, r18
    57fa:	90 01       	movw	r18, r0
    57fc:	0c 01       	movw	r0, r24
    57fe:	ca 01       	movw	r24, r20
    5800:	a0 01       	movw	r20, r0
    5802:	11 24       	eor	r1, r1
    5804:	ff 27       	eor	r31, r31
    5806:	59 1b       	sub	r21, r25
    5808:	99 f0       	breq	.+38     	; 0x5830 <__addsf3x+0x5c>
    580a:	59 3f       	cpi	r21, 0xF9	; 249
    580c:	50 f4       	brcc	.+20     	; 0x5822 <__addsf3x+0x4e>
    580e:	50 3e       	cpi	r21, 0xE0	; 224
    5810:	68 f1       	brcs	.+90     	; 0x586c <__addsf3x+0x98>
    5812:	1a 16       	cp	r1, r26
    5814:	f0 40       	sbci	r31, 0x00	; 0
    5816:	a2 2f       	mov	r26, r18
    5818:	23 2f       	mov	r18, r19
    581a:	34 2f       	mov	r19, r20
    581c:	44 27       	eor	r20, r20
    581e:	58 5f       	subi	r21, 0xF8	; 248
    5820:	f3 cf       	rjmp	.-26     	; 0x5808 <__addsf3x+0x34>
    5822:	46 95       	lsr	r20
    5824:	37 95       	ror	r19
    5826:	27 95       	ror	r18
    5828:	a7 95       	ror	r26
    582a:	f0 40       	sbci	r31, 0x00	; 0
    582c:	53 95       	inc	r21
    582e:	c9 f7       	brne	.-14     	; 0x5822 <__addsf3x+0x4e>
    5830:	7e f4       	brtc	.+30     	; 0x5850 <__addsf3x+0x7c>
    5832:	1f 16       	cp	r1, r31
    5834:	ba 0b       	sbc	r27, r26
    5836:	62 0b       	sbc	r22, r18
    5838:	73 0b       	sbc	r23, r19
    583a:	84 0b       	sbc	r24, r20
    583c:	ba f0       	brmi	.+46     	; 0x586c <__addsf3x+0x98>
    583e:	91 50       	subi	r25, 0x01	; 1
    5840:	a1 f0       	breq	.+40     	; 0x586a <__addsf3x+0x96>
    5842:	ff 0f       	add	r31, r31
    5844:	bb 1f       	adc	r27, r27
    5846:	66 1f       	adc	r22, r22
    5848:	77 1f       	adc	r23, r23
    584a:	88 1f       	adc	r24, r24
    584c:	c2 f7       	brpl	.-16     	; 0x583e <__addsf3x+0x6a>
    584e:	0e c0       	rjmp	.+28     	; 0x586c <__addsf3x+0x98>
    5850:	ba 0f       	add	r27, r26
    5852:	62 1f       	adc	r22, r18
    5854:	73 1f       	adc	r23, r19
    5856:	84 1f       	adc	r24, r20
    5858:	48 f4       	brcc	.+18     	; 0x586c <__addsf3x+0x98>
    585a:	87 95       	ror	r24
    585c:	77 95       	ror	r23
    585e:	67 95       	ror	r22
    5860:	b7 95       	ror	r27
    5862:	f7 95       	ror	r31
    5864:	9e 3f       	cpi	r25, 0xFE	; 254
    5866:	08 f0       	brcs	.+2      	; 0x586a <__addsf3x+0x96>
    5868:	b3 cf       	rjmp	.-154    	; 0x57d0 <__addsf3+0x1e>
    586a:	93 95       	inc	r25
    586c:	88 0f       	add	r24, r24
    586e:	08 f0       	brcs	.+2      	; 0x5872 <__addsf3x+0x9e>
    5870:	99 27       	eor	r25, r25
    5872:	ee 0f       	add	r30, r30
    5874:	97 95       	ror	r25
    5876:	87 95       	ror	r24
    5878:	08 95       	ret

0000587a <__divsf3>:
    587a:	0c d0       	rcall	.+24     	; 0x5894 <__divsf3x>
    587c:	eb c0       	rjmp	.+470    	; 0x5a54 <__fp_round>
    587e:	e3 d0       	rcall	.+454    	; 0x5a46 <__fp_pscB>
    5880:	40 f0       	brcs	.+16     	; 0x5892 <__divsf3+0x18>
    5882:	da d0       	rcall	.+436    	; 0x5a38 <__fp_pscA>
    5884:	30 f0       	brcs	.+12     	; 0x5892 <__divsf3+0x18>
    5886:	21 f4       	brne	.+8      	; 0x5890 <__divsf3+0x16>
    5888:	5f 3f       	cpi	r21, 0xFF	; 255
    588a:	19 f0       	breq	.+6      	; 0x5892 <__divsf3+0x18>
    588c:	cc c0       	rjmp	.+408    	; 0x5a26 <__fp_inf>
    588e:	51 11       	cpse	r21, r1
    5890:	15 c1       	rjmp	.+554    	; 0x5abc <__fp_szero>
    5892:	cf c0       	rjmp	.+414    	; 0x5a32 <__fp_nan>

00005894 <__divsf3x>:
    5894:	f0 d0       	rcall	.+480    	; 0x5a76 <__fp_split3>
    5896:	98 f3       	brcs	.-26     	; 0x587e <__divsf3+0x4>

00005898 <__divsf3_pse>:
    5898:	99 23       	and	r25, r25
    589a:	c9 f3       	breq	.-14     	; 0x588e <__divsf3+0x14>
    589c:	55 23       	and	r21, r21
    589e:	b1 f3       	breq	.-20     	; 0x588c <__divsf3+0x12>
    58a0:	95 1b       	sub	r25, r21
    58a2:	55 0b       	sbc	r21, r21
    58a4:	bb 27       	eor	r27, r27
    58a6:	aa 27       	eor	r26, r26
    58a8:	62 17       	cp	r22, r18
    58aa:	73 07       	cpc	r23, r19
    58ac:	84 07       	cpc	r24, r20
    58ae:	38 f0       	brcs	.+14     	; 0x58be <__divsf3_pse+0x26>
    58b0:	9f 5f       	subi	r25, 0xFF	; 255
    58b2:	5f 4f       	sbci	r21, 0xFF	; 255
    58b4:	22 0f       	add	r18, r18
    58b6:	33 1f       	adc	r19, r19
    58b8:	44 1f       	adc	r20, r20
    58ba:	aa 1f       	adc	r26, r26
    58bc:	a9 f3       	breq	.-22     	; 0x58a8 <__divsf3_pse+0x10>
    58be:	33 d0       	rcall	.+102    	; 0x5926 <__divsf3_pse+0x8e>
    58c0:	0e 2e       	mov	r0, r30
    58c2:	3a f0       	brmi	.+14     	; 0x58d2 <__divsf3_pse+0x3a>
    58c4:	e0 e8       	ldi	r30, 0x80	; 128
    58c6:	30 d0       	rcall	.+96     	; 0x5928 <__divsf3_pse+0x90>
    58c8:	91 50       	subi	r25, 0x01	; 1
    58ca:	50 40       	sbci	r21, 0x00	; 0
    58cc:	e6 95       	lsr	r30
    58ce:	00 1c       	adc	r0, r0
    58d0:	ca f7       	brpl	.-14     	; 0x58c4 <__divsf3_pse+0x2c>
    58d2:	29 d0       	rcall	.+82     	; 0x5926 <__divsf3_pse+0x8e>
    58d4:	fe 2f       	mov	r31, r30
    58d6:	27 d0       	rcall	.+78     	; 0x5926 <__divsf3_pse+0x8e>
    58d8:	66 0f       	add	r22, r22
    58da:	77 1f       	adc	r23, r23
    58dc:	88 1f       	adc	r24, r24
    58de:	bb 1f       	adc	r27, r27
    58e0:	26 17       	cp	r18, r22
    58e2:	37 07       	cpc	r19, r23
    58e4:	48 07       	cpc	r20, r24
    58e6:	ab 07       	cpc	r26, r27
    58e8:	b0 e8       	ldi	r27, 0x80	; 128
    58ea:	09 f0       	breq	.+2      	; 0x58ee <__divsf3_pse+0x56>
    58ec:	bb 0b       	sbc	r27, r27
    58ee:	80 2d       	mov	r24, r0
    58f0:	bf 01       	movw	r22, r30
    58f2:	ff 27       	eor	r31, r31
    58f4:	93 58       	subi	r25, 0x83	; 131
    58f6:	5f 4f       	sbci	r21, 0xFF	; 255
    58f8:	2a f0       	brmi	.+10     	; 0x5904 <__divsf3_pse+0x6c>
    58fa:	9e 3f       	cpi	r25, 0xFE	; 254
    58fc:	51 05       	cpc	r21, r1
    58fe:	68 f0       	brcs	.+26     	; 0x591a <__divsf3_pse+0x82>
    5900:	92 c0       	rjmp	.+292    	; 0x5a26 <__fp_inf>
    5902:	dc c0       	rjmp	.+440    	; 0x5abc <__fp_szero>
    5904:	5f 3f       	cpi	r21, 0xFF	; 255
    5906:	ec f3       	brlt	.-6      	; 0x5902 <__divsf3_pse+0x6a>
    5908:	98 3e       	cpi	r25, 0xE8	; 232
    590a:	dc f3       	brlt	.-10     	; 0x5902 <__divsf3_pse+0x6a>
    590c:	86 95       	lsr	r24
    590e:	77 95       	ror	r23
    5910:	67 95       	ror	r22
    5912:	b7 95       	ror	r27
    5914:	f7 95       	ror	r31
    5916:	9f 5f       	subi	r25, 0xFF	; 255
    5918:	c9 f7       	brne	.-14     	; 0x590c <__divsf3_pse+0x74>
    591a:	88 0f       	add	r24, r24
    591c:	91 1d       	adc	r25, r1
    591e:	96 95       	lsr	r25
    5920:	87 95       	ror	r24
    5922:	97 f9       	bld	r25, 7
    5924:	08 95       	ret
    5926:	e1 e0       	ldi	r30, 0x01	; 1
    5928:	66 0f       	add	r22, r22
    592a:	77 1f       	adc	r23, r23
    592c:	88 1f       	adc	r24, r24
    592e:	bb 1f       	adc	r27, r27
    5930:	62 17       	cp	r22, r18
    5932:	73 07       	cpc	r23, r19
    5934:	84 07       	cpc	r24, r20
    5936:	ba 07       	cpc	r27, r26
    5938:	20 f0       	brcs	.+8      	; 0x5942 <__divsf3_pse+0xaa>
    593a:	62 1b       	sub	r22, r18
    593c:	73 0b       	sbc	r23, r19
    593e:	84 0b       	sbc	r24, r20
    5940:	ba 0b       	sbc	r27, r26
    5942:	ee 1f       	adc	r30, r30
    5944:	88 f7       	brcc	.-30     	; 0x5928 <__divsf3_pse+0x90>
    5946:	e0 95       	com	r30
    5948:	08 95       	ret

0000594a <__fixsfsi>:
    594a:	04 d0       	rcall	.+8      	; 0x5954 <__fixunssfsi>
    594c:	68 94       	set
    594e:	b1 11       	cpse	r27, r1
    5950:	b5 c0       	rjmp	.+362    	; 0x5abc <__fp_szero>
    5952:	08 95       	ret

00005954 <__fixunssfsi>:
    5954:	98 d0       	rcall	.+304    	; 0x5a86 <__fp_splitA>
    5956:	88 f0       	brcs	.+34     	; 0x597a <__fixunssfsi+0x26>
    5958:	9f 57       	subi	r25, 0x7F	; 127
    595a:	90 f0       	brcs	.+36     	; 0x5980 <__fixunssfsi+0x2c>
    595c:	b9 2f       	mov	r27, r25
    595e:	99 27       	eor	r25, r25
    5960:	b7 51       	subi	r27, 0x17	; 23
    5962:	a0 f0       	brcs	.+40     	; 0x598c <__fixunssfsi+0x38>
    5964:	d1 f0       	breq	.+52     	; 0x599a <__fixunssfsi+0x46>
    5966:	66 0f       	add	r22, r22
    5968:	77 1f       	adc	r23, r23
    596a:	88 1f       	adc	r24, r24
    596c:	99 1f       	adc	r25, r25
    596e:	1a f0       	brmi	.+6      	; 0x5976 <__fixunssfsi+0x22>
    5970:	ba 95       	dec	r27
    5972:	c9 f7       	brne	.-14     	; 0x5966 <__fixunssfsi+0x12>
    5974:	12 c0       	rjmp	.+36     	; 0x599a <__fixunssfsi+0x46>
    5976:	b1 30       	cpi	r27, 0x01	; 1
    5978:	81 f0       	breq	.+32     	; 0x599a <__fixunssfsi+0x46>
    597a:	9f d0       	rcall	.+318    	; 0x5aba <__fp_zero>
    597c:	b1 e0       	ldi	r27, 0x01	; 1
    597e:	08 95       	ret
    5980:	9c c0       	rjmp	.+312    	; 0x5aba <__fp_zero>
    5982:	67 2f       	mov	r22, r23
    5984:	78 2f       	mov	r23, r24
    5986:	88 27       	eor	r24, r24
    5988:	b8 5f       	subi	r27, 0xF8	; 248
    598a:	39 f0       	breq	.+14     	; 0x599a <__fixunssfsi+0x46>
    598c:	b9 3f       	cpi	r27, 0xF9	; 249
    598e:	cc f3       	brlt	.-14     	; 0x5982 <__fixunssfsi+0x2e>
    5990:	86 95       	lsr	r24
    5992:	77 95       	ror	r23
    5994:	67 95       	ror	r22
    5996:	b3 95       	inc	r27
    5998:	d9 f7       	brne	.-10     	; 0x5990 <__fixunssfsi+0x3c>
    599a:	3e f4       	brtc	.+14     	; 0x59aa <__fixunssfsi+0x56>
    599c:	90 95       	com	r25
    599e:	80 95       	com	r24
    59a0:	70 95       	com	r23
    59a2:	61 95       	neg	r22
    59a4:	7f 4f       	sbci	r23, 0xFF	; 255
    59a6:	8f 4f       	sbci	r24, 0xFF	; 255
    59a8:	9f 4f       	sbci	r25, 0xFF	; 255
    59aa:	08 95       	ret

000059ac <__floatunsisf>:
    59ac:	e8 94       	clt
    59ae:	09 c0       	rjmp	.+18     	; 0x59c2 <__floatsisf+0x12>

000059b0 <__floatsisf>:
    59b0:	97 fb       	bst	r25, 7
    59b2:	3e f4       	brtc	.+14     	; 0x59c2 <__floatsisf+0x12>
    59b4:	90 95       	com	r25
    59b6:	80 95       	com	r24
    59b8:	70 95       	com	r23
    59ba:	61 95       	neg	r22
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	8f 4f       	sbci	r24, 0xFF	; 255
    59c0:	9f 4f       	sbci	r25, 0xFF	; 255
    59c2:	99 23       	and	r25, r25
    59c4:	a9 f0       	breq	.+42     	; 0x59f0 <__floatsisf+0x40>
    59c6:	f9 2f       	mov	r31, r25
    59c8:	96 e9       	ldi	r25, 0x96	; 150
    59ca:	bb 27       	eor	r27, r27
    59cc:	93 95       	inc	r25
    59ce:	f6 95       	lsr	r31
    59d0:	87 95       	ror	r24
    59d2:	77 95       	ror	r23
    59d4:	67 95       	ror	r22
    59d6:	b7 95       	ror	r27
    59d8:	f1 11       	cpse	r31, r1
    59da:	f8 cf       	rjmp	.-16     	; 0x59cc <__floatsisf+0x1c>
    59dc:	fa f4       	brpl	.+62     	; 0x5a1c <__floatsisf+0x6c>
    59de:	bb 0f       	add	r27, r27
    59e0:	11 f4       	brne	.+4      	; 0x59e6 <__floatsisf+0x36>
    59e2:	60 ff       	sbrs	r22, 0
    59e4:	1b c0       	rjmp	.+54     	; 0x5a1c <__floatsisf+0x6c>
    59e6:	6f 5f       	subi	r22, 0xFF	; 255
    59e8:	7f 4f       	sbci	r23, 0xFF	; 255
    59ea:	8f 4f       	sbci	r24, 0xFF	; 255
    59ec:	9f 4f       	sbci	r25, 0xFF	; 255
    59ee:	16 c0       	rjmp	.+44     	; 0x5a1c <__floatsisf+0x6c>
    59f0:	88 23       	and	r24, r24
    59f2:	11 f0       	breq	.+4      	; 0x59f8 <__floatsisf+0x48>
    59f4:	96 e9       	ldi	r25, 0x96	; 150
    59f6:	11 c0       	rjmp	.+34     	; 0x5a1a <__floatsisf+0x6a>
    59f8:	77 23       	and	r23, r23
    59fa:	21 f0       	breq	.+8      	; 0x5a04 <__floatsisf+0x54>
    59fc:	9e e8       	ldi	r25, 0x8E	; 142
    59fe:	87 2f       	mov	r24, r23
    5a00:	76 2f       	mov	r23, r22
    5a02:	05 c0       	rjmp	.+10     	; 0x5a0e <__floatsisf+0x5e>
    5a04:	66 23       	and	r22, r22
    5a06:	71 f0       	breq	.+28     	; 0x5a24 <__floatsisf+0x74>
    5a08:	96 e8       	ldi	r25, 0x86	; 134
    5a0a:	86 2f       	mov	r24, r22
    5a0c:	70 e0       	ldi	r23, 0x00	; 0
    5a0e:	60 e0       	ldi	r22, 0x00	; 0
    5a10:	2a f0       	brmi	.+10     	; 0x5a1c <__floatsisf+0x6c>
    5a12:	9a 95       	dec	r25
    5a14:	66 0f       	add	r22, r22
    5a16:	77 1f       	adc	r23, r23
    5a18:	88 1f       	adc	r24, r24
    5a1a:	da f7       	brpl	.-10     	; 0x5a12 <__floatsisf+0x62>
    5a1c:	88 0f       	add	r24, r24
    5a1e:	96 95       	lsr	r25
    5a20:	87 95       	ror	r24
    5a22:	97 f9       	bld	r25, 7
    5a24:	08 95       	ret

00005a26 <__fp_inf>:
    5a26:	97 f9       	bld	r25, 7
    5a28:	9f 67       	ori	r25, 0x7F	; 127
    5a2a:	80 e8       	ldi	r24, 0x80	; 128
    5a2c:	70 e0       	ldi	r23, 0x00	; 0
    5a2e:	60 e0       	ldi	r22, 0x00	; 0
    5a30:	08 95       	ret

00005a32 <__fp_nan>:
    5a32:	9f ef       	ldi	r25, 0xFF	; 255
    5a34:	80 ec       	ldi	r24, 0xC0	; 192
    5a36:	08 95       	ret

00005a38 <__fp_pscA>:
    5a38:	00 24       	eor	r0, r0
    5a3a:	0a 94       	dec	r0
    5a3c:	16 16       	cp	r1, r22
    5a3e:	17 06       	cpc	r1, r23
    5a40:	18 06       	cpc	r1, r24
    5a42:	09 06       	cpc	r0, r25
    5a44:	08 95       	ret

00005a46 <__fp_pscB>:
    5a46:	00 24       	eor	r0, r0
    5a48:	0a 94       	dec	r0
    5a4a:	12 16       	cp	r1, r18
    5a4c:	13 06       	cpc	r1, r19
    5a4e:	14 06       	cpc	r1, r20
    5a50:	05 06       	cpc	r0, r21
    5a52:	08 95       	ret

00005a54 <__fp_round>:
    5a54:	09 2e       	mov	r0, r25
    5a56:	03 94       	inc	r0
    5a58:	00 0c       	add	r0, r0
    5a5a:	11 f4       	brne	.+4      	; 0x5a60 <__fp_round+0xc>
    5a5c:	88 23       	and	r24, r24
    5a5e:	52 f0       	brmi	.+20     	; 0x5a74 <__fp_round+0x20>
    5a60:	bb 0f       	add	r27, r27
    5a62:	40 f4       	brcc	.+16     	; 0x5a74 <__fp_round+0x20>
    5a64:	bf 2b       	or	r27, r31
    5a66:	11 f4       	brne	.+4      	; 0x5a6c <__fp_round+0x18>
    5a68:	60 ff       	sbrs	r22, 0
    5a6a:	04 c0       	rjmp	.+8      	; 0x5a74 <__fp_round+0x20>
    5a6c:	6f 5f       	subi	r22, 0xFF	; 255
    5a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a70:	8f 4f       	sbci	r24, 0xFF	; 255
    5a72:	9f 4f       	sbci	r25, 0xFF	; 255
    5a74:	08 95       	ret

00005a76 <__fp_split3>:
    5a76:	57 fd       	sbrc	r21, 7
    5a78:	90 58       	subi	r25, 0x80	; 128
    5a7a:	44 0f       	add	r20, r20
    5a7c:	55 1f       	adc	r21, r21
    5a7e:	59 f0       	breq	.+22     	; 0x5a96 <__fp_splitA+0x10>
    5a80:	5f 3f       	cpi	r21, 0xFF	; 255
    5a82:	71 f0       	breq	.+28     	; 0x5aa0 <__fp_splitA+0x1a>
    5a84:	47 95       	ror	r20

00005a86 <__fp_splitA>:
    5a86:	88 0f       	add	r24, r24
    5a88:	97 fb       	bst	r25, 7
    5a8a:	99 1f       	adc	r25, r25
    5a8c:	61 f0       	breq	.+24     	; 0x5aa6 <__fp_splitA+0x20>
    5a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a90:	79 f0       	breq	.+30     	; 0x5ab0 <__fp_splitA+0x2a>
    5a92:	87 95       	ror	r24
    5a94:	08 95       	ret
    5a96:	12 16       	cp	r1, r18
    5a98:	13 06       	cpc	r1, r19
    5a9a:	14 06       	cpc	r1, r20
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	f2 cf       	rjmp	.-28     	; 0x5a84 <__fp_split3+0xe>
    5aa0:	46 95       	lsr	r20
    5aa2:	f1 df       	rcall	.-30     	; 0x5a86 <__fp_splitA>
    5aa4:	08 c0       	rjmp	.+16     	; 0x5ab6 <__fp_splitA+0x30>
    5aa6:	16 16       	cp	r1, r22
    5aa8:	17 06       	cpc	r1, r23
    5aaa:	18 06       	cpc	r1, r24
    5aac:	99 1f       	adc	r25, r25
    5aae:	f1 cf       	rjmp	.-30     	; 0x5a92 <__fp_splitA+0xc>
    5ab0:	86 95       	lsr	r24
    5ab2:	71 05       	cpc	r23, r1
    5ab4:	61 05       	cpc	r22, r1
    5ab6:	08 94       	sec
    5ab8:	08 95       	ret

00005aba <__fp_zero>:
    5aba:	e8 94       	clt

00005abc <__fp_szero>:
    5abc:	bb 27       	eor	r27, r27
    5abe:	66 27       	eor	r22, r22
    5ac0:	77 27       	eor	r23, r23
    5ac2:	cb 01       	movw	r24, r22
    5ac4:	97 f9       	bld	r25, 7
    5ac6:	08 95       	ret

00005ac8 <__mulsf3>:
    5ac8:	0b d0       	rcall	.+22     	; 0x5ae0 <__mulsf3x>
    5aca:	c4 cf       	rjmp	.-120    	; 0x5a54 <__fp_round>
    5acc:	b5 df       	rcall	.-150    	; 0x5a38 <__fp_pscA>
    5ace:	28 f0       	brcs	.+10     	; 0x5ada <__mulsf3+0x12>
    5ad0:	ba df       	rcall	.-140    	; 0x5a46 <__fp_pscB>
    5ad2:	18 f0       	brcs	.+6      	; 0x5ada <__mulsf3+0x12>
    5ad4:	95 23       	and	r25, r21
    5ad6:	09 f0       	breq	.+2      	; 0x5ada <__mulsf3+0x12>
    5ad8:	a6 cf       	rjmp	.-180    	; 0x5a26 <__fp_inf>
    5ada:	ab cf       	rjmp	.-170    	; 0x5a32 <__fp_nan>
    5adc:	11 24       	eor	r1, r1
    5ade:	ee cf       	rjmp	.-36     	; 0x5abc <__fp_szero>

00005ae0 <__mulsf3x>:
    5ae0:	ca df       	rcall	.-108    	; 0x5a76 <__fp_split3>
    5ae2:	a0 f3       	brcs	.-24     	; 0x5acc <__mulsf3+0x4>

00005ae4 <__mulsf3_pse>:
    5ae4:	95 9f       	mul	r25, r21
    5ae6:	d1 f3       	breq	.-12     	; 0x5adc <__mulsf3+0x14>
    5ae8:	95 0f       	add	r25, r21
    5aea:	50 e0       	ldi	r21, 0x00	; 0
    5aec:	55 1f       	adc	r21, r21
    5aee:	62 9f       	mul	r22, r18
    5af0:	f0 01       	movw	r30, r0
    5af2:	72 9f       	mul	r23, r18
    5af4:	bb 27       	eor	r27, r27
    5af6:	f0 0d       	add	r31, r0
    5af8:	b1 1d       	adc	r27, r1
    5afa:	63 9f       	mul	r22, r19
    5afc:	aa 27       	eor	r26, r26
    5afe:	f0 0d       	add	r31, r0
    5b00:	b1 1d       	adc	r27, r1
    5b02:	aa 1f       	adc	r26, r26
    5b04:	64 9f       	mul	r22, r20
    5b06:	66 27       	eor	r22, r22
    5b08:	b0 0d       	add	r27, r0
    5b0a:	a1 1d       	adc	r26, r1
    5b0c:	66 1f       	adc	r22, r22
    5b0e:	82 9f       	mul	r24, r18
    5b10:	22 27       	eor	r18, r18
    5b12:	b0 0d       	add	r27, r0
    5b14:	a1 1d       	adc	r26, r1
    5b16:	62 1f       	adc	r22, r18
    5b18:	73 9f       	mul	r23, r19
    5b1a:	b0 0d       	add	r27, r0
    5b1c:	a1 1d       	adc	r26, r1
    5b1e:	62 1f       	adc	r22, r18
    5b20:	83 9f       	mul	r24, r19
    5b22:	a0 0d       	add	r26, r0
    5b24:	61 1d       	adc	r22, r1
    5b26:	22 1f       	adc	r18, r18
    5b28:	74 9f       	mul	r23, r20
    5b2a:	33 27       	eor	r19, r19
    5b2c:	a0 0d       	add	r26, r0
    5b2e:	61 1d       	adc	r22, r1
    5b30:	23 1f       	adc	r18, r19
    5b32:	84 9f       	mul	r24, r20
    5b34:	60 0d       	add	r22, r0
    5b36:	21 1d       	adc	r18, r1
    5b38:	82 2f       	mov	r24, r18
    5b3a:	76 2f       	mov	r23, r22
    5b3c:	6a 2f       	mov	r22, r26
    5b3e:	11 24       	eor	r1, r1
    5b40:	9f 57       	subi	r25, 0x7F	; 127
    5b42:	50 40       	sbci	r21, 0x00	; 0
    5b44:	8a f0       	brmi	.+34     	; 0x5b68 <__mulsf3_pse+0x84>
    5b46:	e1 f0       	breq	.+56     	; 0x5b80 <__mulsf3_pse+0x9c>
    5b48:	88 23       	and	r24, r24
    5b4a:	4a f0       	brmi	.+18     	; 0x5b5e <__mulsf3_pse+0x7a>
    5b4c:	ee 0f       	add	r30, r30
    5b4e:	ff 1f       	adc	r31, r31
    5b50:	bb 1f       	adc	r27, r27
    5b52:	66 1f       	adc	r22, r22
    5b54:	77 1f       	adc	r23, r23
    5b56:	88 1f       	adc	r24, r24
    5b58:	91 50       	subi	r25, 0x01	; 1
    5b5a:	50 40       	sbci	r21, 0x00	; 0
    5b5c:	a9 f7       	brne	.-22     	; 0x5b48 <__mulsf3_pse+0x64>
    5b5e:	9e 3f       	cpi	r25, 0xFE	; 254
    5b60:	51 05       	cpc	r21, r1
    5b62:	70 f0       	brcs	.+28     	; 0x5b80 <__mulsf3_pse+0x9c>
    5b64:	60 cf       	rjmp	.-320    	; 0x5a26 <__fp_inf>
    5b66:	aa cf       	rjmp	.-172    	; 0x5abc <__fp_szero>
    5b68:	5f 3f       	cpi	r21, 0xFF	; 255
    5b6a:	ec f3       	brlt	.-6      	; 0x5b66 <__mulsf3_pse+0x82>
    5b6c:	98 3e       	cpi	r25, 0xE8	; 232
    5b6e:	dc f3       	brlt	.-10     	; 0x5b66 <__mulsf3_pse+0x82>
    5b70:	86 95       	lsr	r24
    5b72:	77 95       	ror	r23
    5b74:	67 95       	ror	r22
    5b76:	b7 95       	ror	r27
    5b78:	f7 95       	ror	r31
    5b7a:	e7 95       	ror	r30
    5b7c:	9f 5f       	subi	r25, 0xFF	; 255
    5b7e:	c1 f7       	brne	.-16     	; 0x5b70 <__mulsf3_pse+0x8c>
    5b80:	fe 2b       	or	r31, r30
    5b82:	88 0f       	add	r24, r24
    5b84:	91 1d       	adc	r25, r1
    5b86:	96 95       	lsr	r25
    5b88:	87 95       	ror	r24
    5b8a:	97 f9       	bld	r25, 7
    5b8c:	08 95       	ret

00005b8e <__udivmodsi4>:
    5b8e:	a1 e2       	ldi	r26, 0x21	; 33
    5b90:	1a 2e       	mov	r1, r26
    5b92:	aa 1b       	sub	r26, r26
    5b94:	bb 1b       	sub	r27, r27
    5b96:	fd 01       	movw	r30, r26
    5b98:	0d c0       	rjmp	.+26     	; 0x5bb4 <__udivmodsi4_ep>

00005b9a <__udivmodsi4_loop>:
    5b9a:	aa 1f       	adc	r26, r26
    5b9c:	bb 1f       	adc	r27, r27
    5b9e:	ee 1f       	adc	r30, r30
    5ba0:	ff 1f       	adc	r31, r31
    5ba2:	a2 17       	cp	r26, r18
    5ba4:	b3 07       	cpc	r27, r19
    5ba6:	e4 07       	cpc	r30, r20
    5ba8:	f5 07       	cpc	r31, r21
    5baa:	20 f0       	brcs	.+8      	; 0x5bb4 <__udivmodsi4_ep>
    5bac:	a2 1b       	sub	r26, r18
    5bae:	b3 0b       	sbc	r27, r19
    5bb0:	e4 0b       	sbc	r30, r20
    5bb2:	f5 0b       	sbc	r31, r21

00005bb4 <__udivmodsi4_ep>:
    5bb4:	66 1f       	adc	r22, r22
    5bb6:	77 1f       	adc	r23, r23
    5bb8:	88 1f       	adc	r24, r24
    5bba:	99 1f       	adc	r25, r25
    5bbc:	1a 94       	dec	r1
    5bbe:	69 f7       	brne	.-38     	; 0x5b9a <__udivmodsi4_loop>
    5bc0:	60 95       	com	r22
    5bc2:	70 95       	com	r23
    5bc4:	80 95       	com	r24
    5bc6:	90 95       	com	r25
    5bc8:	9b 01       	movw	r18, r22
    5bca:	ac 01       	movw	r20, r24
    5bcc:	bd 01       	movw	r22, r26
    5bce:	cf 01       	movw	r24, r30
    5bd0:	08 95       	ret

00005bd2 <__tablejump2__>:
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	ff 1f       	adc	r31, r31
    5bd6:	88 1f       	adc	r24, r24
    5bd8:	8b bf       	out	0x3b, r24	; 59
    5bda:	07 90       	elpm	r0, Z+
    5bdc:	f6 91       	elpm	r31, Z
    5bde:	e0 2d       	mov	r30, r0
    5be0:	19 94       	eijmp

00005be2 <calloc>:
    5be2:	0f 93       	push	r16
    5be4:	1f 93       	push	r17
    5be6:	cf 93       	push	r28
    5be8:	df 93       	push	r29
    5bea:	86 9f       	mul	r24, r22
    5bec:	80 01       	movw	r16, r0
    5bee:	87 9f       	mul	r24, r23
    5bf0:	10 0d       	add	r17, r0
    5bf2:	96 9f       	mul	r25, r22
    5bf4:	10 0d       	add	r17, r0
    5bf6:	11 24       	eor	r1, r1
    5bf8:	c8 01       	movw	r24, r16
    5bfa:	0d d0       	rcall	.+26     	; 0x5c16 <malloc>
    5bfc:	ec 01       	movw	r28, r24
    5bfe:	00 97       	sbiw	r24, 0x00	; 0
    5c00:	21 f0       	breq	.+8      	; 0x5c0a <calloc+0x28>
    5c02:	a8 01       	movw	r20, r16
    5c04:	60 e0       	ldi	r22, 0x00	; 0
    5c06:	70 e0       	ldi	r23, 0x00	; 0
    5c08:	34 d1       	rcall	.+616    	; 0x5e72 <memset>
    5c0a:	ce 01       	movw	r24, r28
    5c0c:	df 91       	pop	r29
    5c0e:	cf 91       	pop	r28
    5c10:	1f 91       	pop	r17
    5c12:	0f 91       	pop	r16
    5c14:	08 95       	ret

00005c16 <malloc>:
    5c16:	0f 93       	push	r16
    5c18:	1f 93       	push	r17
    5c1a:	cf 93       	push	r28
    5c1c:	df 93       	push	r29
    5c1e:	82 30       	cpi	r24, 0x02	; 2
    5c20:	91 05       	cpc	r25, r1
    5c22:	10 f4       	brcc	.+4      	; 0x5c28 <malloc+0x12>
    5c24:	82 e0       	ldi	r24, 0x02	; 2
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	e0 91 69 1b 	lds	r30, 0x1B69	; 0x801b69 <__flp>
    5c2c:	f0 91 6a 1b 	lds	r31, 0x1B6A	; 0x801b6a <__flp+0x1>
    5c30:	20 e0       	ldi	r18, 0x00	; 0
    5c32:	30 e0       	ldi	r19, 0x00	; 0
    5c34:	a0 e0       	ldi	r26, 0x00	; 0
    5c36:	b0 e0       	ldi	r27, 0x00	; 0
    5c38:	30 97       	sbiw	r30, 0x00	; 0
    5c3a:	19 f1       	breq	.+70     	; 0x5c82 <malloc+0x6c>
    5c3c:	40 81       	ld	r20, Z
    5c3e:	51 81       	ldd	r21, Z+1	; 0x01
    5c40:	02 81       	ldd	r16, Z+2	; 0x02
    5c42:	13 81       	ldd	r17, Z+3	; 0x03
    5c44:	48 17       	cp	r20, r24
    5c46:	59 07       	cpc	r21, r25
    5c48:	c8 f0       	brcs	.+50     	; 0x5c7c <malloc+0x66>
    5c4a:	84 17       	cp	r24, r20
    5c4c:	95 07       	cpc	r25, r21
    5c4e:	69 f4       	brne	.+26     	; 0x5c6a <malloc+0x54>
    5c50:	10 97       	sbiw	r26, 0x00	; 0
    5c52:	31 f0       	breq	.+12     	; 0x5c60 <malloc+0x4a>
    5c54:	12 96       	adiw	r26, 0x02	; 2
    5c56:	0c 93       	st	X, r16
    5c58:	12 97       	sbiw	r26, 0x02	; 2
    5c5a:	13 96       	adiw	r26, 0x03	; 3
    5c5c:	1c 93       	st	X, r17
    5c5e:	27 c0       	rjmp	.+78     	; 0x5cae <malloc+0x98>
    5c60:	00 93 69 1b 	sts	0x1B69, r16	; 0x801b69 <__flp>
    5c64:	10 93 6a 1b 	sts	0x1B6A, r17	; 0x801b6a <__flp+0x1>
    5c68:	22 c0       	rjmp	.+68     	; 0x5cae <malloc+0x98>
    5c6a:	21 15       	cp	r18, r1
    5c6c:	31 05       	cpc	r19, r1
    5c6e:	19 f0       	breq	.+6      	; 0x5c76 <malloc+0x60>
    5c70:	42 17       	cp	r20, r18
    5c72:	53 07       	cpc	r21, r19
    5c74:	18 f4       	brcc	.+6      	; 0x5c7c <malloc+0x66>
    5c76:	9a 01       	movw	r18, r20
    5c78:	bd 01       	movw	r22, r26
    5c7a:	ef 01       	movw	r28, r30
    5c7c:	df 01       	movw	r26, r30
    5c7e:	f8 01       	movw	r30, r16
    5c80:	db cf       	rjmp	.-74     	; 0x5c38 <malloc+0x22>
    5c82:	21 15       	cp	r18, r1
    5c84:	31 05       	cpc	r19, r1
    5c86:	f9 f0       	breq	.+62     	; 0x5cc6 <malloc+0xb0>
    5c88:	28 1b       	sub	r18, r24
    5c8a:	39 0b       	sbc	r19, r25
    5c8c:	24 30       	cpi	r18, 0x04	; 4
    5c8e:	31 05       	cpc	r19, r1
    5c90:	80 f4       	brcc	.+32     	; 0x5cb2 <malloc+0x9c>
    5c92:	8a 81       	ldd	r24, Y+2	; 0x02
    5c94:	9b 81       	ldd	r25, Y+3	; 0x03
    5c96:	61 15       	cp	r22, r1
    5c98:	71 05       	cpc	r23, r1
    5c9a:	21 f0       	breq	.+8      	; 0x5ca4 <malloc+0x8e>
    5c9c:	fb 01       	movw	r30, r22
    5c9e:	93 83       	std	Z+3, r25	; 0x03
    5ca0:	82 83       	std	Z+2, r24	; 0x02
    5ca2:	04 c0       	rjmp	.+8      	; 0x5cac <malloc+0x96>
    5ca4:	90 93 6a 1b 	sts	0x1B6A, r25	; 0x801b6a <__flp+0x1>
    5ca8:	80 93 69 1b 	sts	0x1B69, r24	; 0x801b69 <__flp>
    5cac:	fe 01       	movw	r30, r28
    5cae:	32 96       	adiw	r30, 0x02	; 2
    5cb0:	44 c0       	rjmp	.+136    	; 0x5d3a <malloc+0x124>
    5cb2:	fe 01       	movw	r30, r28
    5cb4:	e2 0f       	add	r30, r18
    5cb6:	f3 1f       	adc	r31, r19
    5cb8:	81 93       	st	Z+, r24
    5cba:	91 93       	st	Z+, r25
    5cbc:	22 50       	subi	r18, 0x02	; 2
    5cbe:	31 09       	sbc	r19, r1
    5cc0:	39 83       	std	Y+1, r19	; 0x01
    5cc2:	28 83       	st	Y, r18
    5cc4:	3a c0       	rjmp	.+116    	; 0x5d3a <malloc+0x124>
    5cc6:	20 91 67 1b 	lds	r18, 0x1B67	; 0x801b67 <__brkval>
    5cca:	30 91 68 1b 	lds	r19, 0x1B68	; 0x801b68 <__brkval+0x1>
    5cce:	23 2b       	or	r18, r19
    5cd0:	41 f4       	brne	.+16     	; 0x5ce2 <malloc+0xcc>
    5cd2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5cd6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5cda:	30 93 68 1b 	sts	0x1B68, r19	; 0x801b68 <__brkval+0x1>
    5cde:	20 93 67 1b 	sts	0x1B67, r18	; 0x801b67 <__brkval>
    5ce2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5ce6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5cea:	21 15       	cp	r18, r1
    5cec:	31 05       	cpc	r19, r1
    5cee:	41 f4       	brne	.+16     	; 0x5d00 <malloc+0xea>
    5cf0:	2d b7       	in	r18, 0x3d	; 61
    5cf2:	3e b7       	in	r19, 0x3e	; 62
    5cf4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5cf8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5cfc:	24 1b       	sub	r18, r20
    5cfe:	35 0b       	sbc	r19, r21
    5d00:	e0 91 67 1b 	lds	r30, 0x1B67	; 0x801b67 <__brkval>
    5d04:	f0 91 68 1b 	lds	r31, 0x1B68	; 0x801b68 <__brkval+0x1>
    5d08:	e2 17       	cp	r30, r18
    5d0a:	f3 07       	cpc	r31, r19
    5d0c:	a0 f4       	brcc	.+40     	; 0x5d36 <malloc+0x120>
    5d0e:	2e 1b       	sub	r18, r30
    5d10:	3f 0b       	sbc	r19, r31
    5d12:	28 17       	cp	r18, r24
    5d14:	39 07       	cpc	r19, r25
    5d16:	78 f0       	brcs	.+30     	; 0x5d36 <malloc+0x120>
    5d18:	ac 01       	movw	r20, r24
    5d1a:	4e 5f       	subi	r20, 0xFE	; 254
    5d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d1e:	24 17       	cp	r18, r20
    5d20:	35 07       	cpc	r19, r21
    5d22:	48 f0       	brcs	.+18     	; 0x5d36 <malloc+0x120>
    5d24:	4e 0f       	add	r20, r30
    5d26:	5f 1f       	adc	r21, r31
    5d28:	50 93 68 1b 	sts	0x1B68, r21	; 0x801b68 <__brkval+0x1>
    5d2c:	40 93 67 1b 	sts	0x1B67, r20	; 0x801b67 <__brkval>
    5d30:	81 93       	st	Z+, r24
    5d32:	91 93       	st	Z+, r25
    5d34:	02 c0       	rjmp	.+4      	; 0x5d3a <malloc+0x124>
    5d36:	e0 e0       	ldi	r30, 0x00	; 0
    5d38:	f0 e0       	ldi	r31, 0x00	; 0
    5d3a:	cf 01       	movw	r24, r30
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	1f 91       	pop	r17
    5d42:	0f 91       	pop	r16
    5d44:	08 95       	ret

00005d46 <free>:
    5d46:	cf 93       	push	r28
    5d48:	df 93       	push	r29
    5d4a:	00 97       	sbiw	r24, 0x00	; 0
    5d4c:	09 f4       	brne	.+2      	; 0x5d50 <free+0xa>
    5d4e:	81 c0       	rjmp	.+258    	; 0x5e52 <free+0x10c>
    5d50:	fc 01       	movw	r30, r24
    5d52:	32 97       	sbiw	r30, 0x02	; 2
    5d54:	13 82       	std	Z+3, r1	; 0x03
    5d56:	12 82       	std	Z+2, r1	; 0x02
    5d58:	a0 91 69 1b 	lds	r26, 0x1B69	; 0x801b69 <__flp>
    5d5c:	b0 91 6a 1b 	lds	r27, 0x1B6A	; 0x801b6a <__flp+0x1>
    5d60:	10 97       	sbiw	r26, 0x00	; 0
    5d62:	81 f4       	brne	.+32     	; 0x5d84 <free+0x3e>
    5d64:	20 81       	ld	r18, Z
    5d66:	31 81       	ldd	r19, Z+1	; 0x01
    5d68:	82 0f       	add	r24, r18
    5d6a:	93 1f       	adc	r25, r19
    5d6c:	20 91 67 1b 	lds	r18, 0x1B67	; 0x801b67 <__brkval>
    5d70:	30 91 68 1b 	lds	r19, 0x1B68	; 0x801b68 <__brkval+0x1>
    5d74:	28 17       	cp	r18, r24
    5d76:	39 07       	cpc	r19, r25
    5d78:	51 f5       	brne	.+84     	; 0x5dce <free+0x88>
    5d7a:	f0 93 68 1b 	sts	0x1B68, r31	; 0x801b68 <__brkval+0x1>
    5d7e:	e0 93 67 1b 	sts	0x1B67, r30	; 0x801b67 <__brkval>
    5d82:	67 c0       	rjmp	.+206    	; 0x5e52 <free+0x10c>
    5d84:	ed 01       	movw	r28, r26
    5d86:	20 e0       	ldi	r18, 0x00	; 0
    5d88:	30 e0       	ldi	r19, 0x00	; 0
    5d8a:	ce 17       	cp	r28, r30
    5d8c:	df 07       	cpc	r29, r31
    5d8e:	40 f4       	brcc	.+16     	; 0x5da0 <free+0x5a>
    5d90:	4a 81       	ldd	r20, Y+2	; 0x02
    5d92:	5b 81       	ldd	r21, Y+3	; 0x03
    5d94:	9e 01       	movw	r18, r28
    5d96:	41 15       	cp	r20, r1
    5d98:	51 05       	cpc	r21, r1
    5d9a:	f1 f0       	breq	.+60     	; 0x5dd8 <free+0x92>
    5d9c:	ea 01       	movw	r28, r20
    5d9e:	f5 cf       	rjmp	.-22     	; 0x5d8a <free+0x44>
    5da0:	d3 83       	std	Z+3, r29	; 0x03
    5da2:	c2 83       	std	Z+2, r28	; 0x02
    5da4:	40 81       	ld	r20, Z
    5da6:	51 81       	ldd	r21, Z+1	; 0x01
    5da8:	84 0f       	add	r24, r20
    5daa:	95 1f       	adc	r25, r21
    5dac:	c8 17       	cp	r28, r24
    5dae:	d9 07       	cpc	r29, r25
    5db0:	59 f4       	brne	.+22     	; 0x5dc8 <free+0x82>
    5db2:	88 81       	ld	r24, Y
    5db4:	99 81       	ldd	r25, Y+1	; 0x01
    5db6:	84 0f       	add	r24, r20
    5db8:	95 1f       	adc	r25, r21
    5dba:	02 96       	adiw	r24, 0x02	; 2
    5dbc:	91 83       	std	Z+1, r25	; 0x01
    5dbe:	80 83       	st	Z, r24
    5dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    5dc4:	93 83       	std	Z+3, r25	; 0x03
    5dc6:	82 83       	std	Z+2, r24	; 0x02
    5dc8:	21 15       	cp	r18, r1
    5dca:	31 05       	cpc	r19, r1
    5dcc:	29 f4       	brne	.+10     	; 0x5dd8 <free+0x92>
    5dce:	f0 93 6a 1b 	sts	0x1B6A, r31	; 0x801b6a <__flp+0x1>
    5dd2:	e0 93 69 1b 	sts	0x1B69, r30	; 0x801b69 <__flp>
    5dd6:	3d c0       	rjmp	.+122    	; 0x5e52 <free+0x10c>
    5dd8:	e9 01       	movw	r28, r18
    5dda:	fb 83       	std	Y+3, r31	; 0x03
    5ddc:	ea 83       	std	Y+2, r30	; 0x02
    5dde:	49 91       	ld	r20, Y+
    5de0:	59 91       	ld	r21, Y+
    5de2:	c4 0f       	add	r28, r20
    5de4:	d5 1f       	adc	r29, r21
    5de6:	ec 17       	cp	r30, r28
    5de8:	fd 07       	cpc	r31, r29
    5dea:	61 f4       	brne	.+24     	; 0x5e04 <free+0xbe>
    5dec:	80 81       	ld	r24, Z
    5dee:	91 81       	ldd	r25, Z+1	; 0x01
    5df0:	84 0f       	add	r24, r20
    5df2:	95 1f       	adc	r25, r21
    5df4:	02 96       	adiw	r24, 0x02	; 2
    5df6:	e9 01       	movw	r28, r18
    5df8:	99 83       	std	Y+1, r25	; 0x01
    5dfa:	88 83       	st	Y, r24
    5dfc:	82 81       	ldd	r24, Z+2	; 0x02
    5dfe:	93 81       	ldd	r25, Z+3	; 0x03
    5e00:	9b 83       	std	Y+3, r25	; 0x03
    5e02:	8a 83       	std	Y+2, r24	; 0x02
    5e04:	e0 e0       	ldi	r30, 0x00	; 0
    5e06:	f0 e0       	ldi	r31, 0x00	; 0
    5e08:	12 96       	adiw	r26, 0x02	; 2
    5e0a:	8d 91       	ld	r24, X+
    5e0c:	9c 91       	ld	r25, X
    5e0e:	13 97       	sbiw	r26, 0x03	; 3
    5e10:	00 97       	sbiw	r24, 0x00	; 0
    5e12:	19 f0       	breq	.+6      	; 0x5e1a <free+0xd4>
    5e14:	fd 01       	movw	r30, r26
    5e16:	dc 01       	movw	r26, r24
    5e18:	f7 cf       	rjmp	.-18     	; 0x5e08 <free+0xc2>
    5e1a:	8d 91       	ld	r24, X+
    5e1c:	9c 91       	ld	r25, X
    5e1e:	11 97       	sbiw	r26, 0x01	; 1
    5e20:	9d 01       	movw	r18, r26
    5e22:	2e 5f       	subi	r18, 0xFE	; 254
    5e24:	3f 4f       	sbci	r19, 0xFF	; 255
    5e26:	82 0f       	add	r24, r18
    5e28:	93 1f       	adc	r25, r19
    5e2a:	20 91 67 1b 	lds	r18, 0x1B67	; 0x801b67 <__brkval>
    5e2e:	30 91 68 1b 	lds	r19, 0x1B68	; 0x801b68 <__brkval+0x1>
    5e32:	28 17       	cp	r18, r24
    5e34:	39 07       	cpc	r19, r25
    5e36:	69 f4       	brne	.+26     	; 0x5e52 <free+0x10c>
    5e38:	30 97       	sbiw	r30, 0x00	; 0
    5e3a:	29 f4       	brne	.+10     	; 0x5e46 <free+0x100>
    5e3c:	10 92 6a 1b 	sts	0x1B6A, r1	; 0x801b6a <__flp+0x1>
    5e40:	10 92 69 1b 	sts	0x1B69, r1	; 0x801b69 <__flp>
    5e44:	02 c0       	rjmp	.+4      	; 0x5e4a <free+0x104>
    5e46:	13 82       	std	Z+3, r1	; 0x03
    5e48:	12 82       	std	Z+2, r1	; 0x02
    5e4a:	b0 93 68 1b 	sts	0x1B68, r27	; 0x801b68 <__brkval+0x1>
    5e4e:	a0 93 67 1b 	sts	0x1B67, r26	; 0x801b67 <__brkval>
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	08 95       	ret

00005e58 <abort>:
    5e58:	81 e0       	ldi	r24, 0x01	; 1
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	f8 94       	cli
    5e5e:	7d c3       	rjmp	.+1786   	; 0x655a <_exit>

00005e60 <memcpy>:
    5e60:	fb 01       	movw	r30, r22
    5e62:	dc 01       	movw	r26, r24
    5e64:	02 c0       	rjmp	.+4      	; 0x5e6a <memcpy+0xa>
    5e66:	01 90       	ld	r0, Z+
    5e68:	0d 92       	st	X+, r0
    5e6a:	41 50       	subi	r20, 0x01	; 1
    5e6c:	50 40       	sbci	r21, 0x00	; 0
    5e6e:	d8 f7       	brcc	.-10     	; 0x5e66 <memcpy+0x6>
    5e70:	08 95       	ret

00005e72 <memset>:
    5e72:	dc 01       	movw	r26, r24
    5e74:	01 c0       	rjmp	.+2      	; 0x5e78 <memset+0x6>
    5e76:	6d 93       	st	X+, r22
    5e78:	41 50       	subi	r20, 0x01	; 1
    5e7a:	50 40       	sbci	r21, 0x00	; 0
    5e7c:	e0 f7       	brcc	.-8      	; 0x5e76 <memset+0x4>
    5e7e:	08 95       	ret

00005e80 <strcasestr>:
    5e80:	fb 01       	movw	r30, r22
    5e82:	51 91       	ld	r21, Z+
    5e84:	55 23       	and	r21, r21
    5e86:	b1 f0       	breq	.+44     	; 0x5eb4 <strcasestr+0x34>
    5e88:	bf 01       	movw	r22, r30
    5e8a:	dc 01       	movw	r26, r24
    5e8c:	05 2e       	mov	r0, r21
    5e8e:	4d 91       	ld	r20, X+
    5e90:	44 23       	and	r20, r20
    5e92:	69 f0       	breq	.+26     	; 0x5eae <strcasestr+0x2e>
    5e94:	10 d0       	rcall	.+32     	; 0x5eb6 <strcasestr+0x36>
    5e96:	d9 f7       	brne	.-10     	; 0x5e8e <strcasestr+0xe>
    5e98:	cd 01       	movw	r24, r26
    5e9a:	01 90       	ld	r0, Z+
    5e9c:	00 20       	and	r0, r0
    5e9e:	49 f0       	breq	.+18     	; 0x5eb2 <strcasestr+0x32>
    5ea0:	4d 91       	ld	r20, X+
    5ea2:	41 11       	cpse	r20, r1
    5ea4:	08 d0       	rcall	.+16     	; 0x5eb6 <strcasestr+0x36>
    5ea6:	c9 f3       	breq	.-14     	; 0x5e9a <strcasestr+0x1a>
    5ea8:	fb 01       	movw	r30, r22
    5eaa:	41 11       	cpse	r20, r1
    5eac:	ee cf       	rjmp	.-36     	; 0x5e8a <strcasestr+0xa>
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	01 97       	sbiw	r24, 0x01	; 1
    5eb4:	08 95       	ret
    5eb6:	40 25       	eor	r20, r0
    5eb8:	39 f0       	breq	.+14     	; 0x5ec8 <strcasestr+0x48>
    5eba:	40 32       	cpi	r20, 0x20	; 32
    5ebc:	29 f4       	brne	.+10     	; 0x5ec8 <strcasestr+0x48>
    5ebe:	40 29       	or	r20, r0
    5ec0:	4b 57       	subi	r20, 0x7B	; 123
    5ec2:	46 5e       	subi	r20, 0xE6	; 230
    5ec4:	08 f0       	brcs	.+2      	; 0x5ec8 <strcasestr+0x48>
    5ec6:	18 94       	sez
    5ec8:	08 95       	ret

00005eca <strcat>:
    5eca:	fb 01       	movw	r30, r22
    5ecc:	dc 01       	movw	r26, r24
    5ece:	0d 90       	ld	r0, X+
    5ed0:	00 20       	and	r0, r0
    5ed2:	e9 f7       	brne	.-6      	; 0x5ece <strcat+0x4>
    5ed4:	11 97       	sbiw	r26, 0x01	; 1
    5ed6:	01 90       	ld	r0, Z+
    5ed8:	0d 92       	st	X+, r0
    5eda:	00 20       	and	r0, r0
    5edc:	e1 f7       	brne	.-8      	; 0x5ed6 <strcat+0xc>
    5ede:	08 95       	ret

00005ee0 <strcpy>:
    5ee0:	fb 01       	movw	r30, r22
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	01 90       	ld	r0, Z+
    5ee6:	0d 92       	st	X+, r0
    5ee8:	00 20       	and	r0, r0
    5eea:	e1 f7       	brne	.-8      	; 0x5ee4 <strcpy+0x4>
    5eec:	08 95       	ret

00005eee <strncasecmp>:
    5eee:	fb 01       	movw	r30, r22
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	41 50       	subi	r20, 0x01	; 1
    5ef4:	50 40       	sbci	r21, 0x00	; 0
    5ef6:	88 f0       	brcs	.+34     	; 0x5f1a <strncasecmp+0x2c>
    5ef8:	8d 91       	ld	r24, X+
    5efa:	81 34       	cpi	r24, 0x41	; 65
    5efc:	1c f0       	brlt	.+6      	; 0x5f04 <strncasecmp+0x16>
    5efe:	8b 35       	cpi	r24, 0x5B	; 91
    5f00:	0c f4       	brge	.+2      	; 0x5f04 <strncasecmp+0x16>
    5f02:	80 5e       	subi	r24, 0xE0	; 224
    5f04:	61 91       	ld	r22, Z+
    5f06:	61 34       	cpi	r22, 0x41	; 65
    5f08:	1c f0       	brlt	.+6      	; 0x5f10 <strncasecmp+0x22>
    5f0a:	6b 35       	cpi	r22, 0x5B	; 91
    5f0c:	0c f4       	brge	.+2      	; 0x5f10 <strncasecmp+0x22>
    5f0e:	60 5e       	subi	r22, 0xE0	; 224
    5f10:	86 1b       	sub	r24, r22
    5f12:	61 11       	cpse	r22, r1
    5f14:	71 f3       	breq	.-36     	; 0x5ef2 <strncasecmp+0x4>
    5f16:	99 0b       	sbc	r25, r25
    5f18:	08 95       	ret
    5f1a:	88 1b       	sub	r24, r24
    5f1c:	fc cf       	rjmp	.-8      	; 0x5f16 <strncasecmp+0x28>

00005f1e <printf>:
    5f1e:	cf 93       	push	r28
    5f20:	df 93       	push	r29
    5f22:	cd b7       	in	r28, 0x3d	; 61
    5f24:	de b7       	in	r29, 0x3e	; 62
    5f26:	ae 01       	movw	r20, r28
    5f28:	4a 5f       	subi	r20, 0xFA	; 250
    5f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f2c:	fa 01       	movw	r30, r20
    5f2e:	61 91       	ld	r22, Z+
    5f30:	71 91       	ld	r23, Z+
    5f32:	af 01       	movw	r20, r30
    5f34:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <__iob+0x2>
    5f38:	90 91 6e 1b 	lds	r25, 0x1B6E	; 0x801b6e <__iob+0x3>
    5f3c:	61 d0       	rcall	.+194    	; 0x6000 <vfprintf>
    5f3e:	df 91       	pop	r29
    5f40:	cf 91       	pop	r28
    5f42:	08 95       	ret

00005f44 <puts>:
    5f44:	0f 93       	push	r16
    5f46:	1f 93       	push	r17
    5f48:	cf 93       	push	r28
    5f4a:	df 93       	push	r29
    5f4c:	e0 91 6d 1b 	lds	r30, 0x1B6D	; 0x801b6d <__iob+0x2>
    5f50:	f0 91 6e 1b 	lds	r31, 0x1B6E	; 0x801b6e <__iob+0x3>
    5f54:	23 81       	ldd	r18, Z+3	; 0x03
    5f56:	21 ff       	sbrs	r18, 1
    5f58:	1b c0       	rjmp	.+54     	; 0x5f90 <puts+0x4c>
    5f5a:	8c 01       	movw	r16, r24
    5f5c:	d0 e0       	ldi	r29, 0x00	; 0
    5f5e:	c0 e0       	ldi	r28, 0x00	; 0
    5f60:	f8 01       	movw	r30, r16
    5f62:	81 91       	ld	r24, Z+
    5f64:	8f 01       	movw	r16, r30
    5f66:	60 91 6d 1b 	lds	r22, 0x1B6D	; 0x801b6d <__iob+0x2>
    5f6a:	70 91 6e 1b 	lds	r23, 0x1B6E	; 0x801b6e <__iob+0x3>
    5f6e:	db 01       	movw	r26, r22
    5f70:	18 96       	adiw	r26, 0x08	; 8
    5f72:	ed 91       	ld	r30, X+
    5f74:	fc 91       	ld	r31, X
    5f76:	19 97       	sbiw	r26, 0x09	; 9
    5f78:	88 23       	and	r24, r24
    5f7a:	31 f0       	breq	.+12     	; 0x5f88 <puts+0x44>
    5f7c:	19 95       	eicall
    5f7e:	89 2b       	or	r24, r25
    5f80:	79 f3       	breq	.-34     	; 0x5f60 <puts+0x1c>
    5f82:	df ef       	ldi	r29, 0xFF	; 255
    5f84:	cf ef       	ldi	r28, 0xFF	; 255
    5f86:	ec cf       	rjmp	.-40     	; 0x5f60 <puts+0x1c>
    5f88:	8a e0       	ldi	r24, 0x0A	; 10
    5f8a:	19 95       	eicall
    5f8c:	89 2b       	or	r24, r25
    5f8e:	19 f0       	breq	.+6      	; 0x5f96 <puts+0x52>
    5f90:	8f ef       	ldi	r24, 0xFF	; 255
    5f92:	9f ef       	ldi	r25, 0xFF	; 255
    5f94:	02 c0       	rjmp	.+4      	; 0x5f9a <puts+0x56>
    5f96:	8d 2f       	mov	r24, r29
    5f98:	9c 2f       	mov	r25, r28
    5f9a:	df 91       	pop	r29
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	08 95       	ret

00005fa4 <sprintf>:
    5fa4:	0f 93       	push	r16
    5fa6:	1f 93       	push	r17
    5fa8:	cf 93       	push	r28
    5faa:	df 93       	push	r29
    5fac:	cd b7       	in	r28, 0x3d	; 61
    5fae:	de b7       	in	r29, 0x3e	; 62
    5fb0:	2e 97       	sbiw	r28, 0x0e	; 14
    5fb2:	0f b6       	in	r0, 0x3f	; 63
    5fb4:	f8 94       	cli
    5fb6:	de bf       	out	0x3e, r29	; 62
    5fb8:	0f be       	out	0x3f, r0	; 63
    5fba:	cd bf       	out	0x3d, r28	; 61
    5fbc:	0e 89       	ldd	r16, Y+22	; 0x16
    5fbe:	1f 89       	ldd	r17, Y+23	; 0x17
    5fc0:	86 e0       	ldi	r24, 0x06	; 6
    5fc2:	8c 83       	std	Y+4, r24	; 0x04
    5fc4:	1a 83       	std	Y+2, r17	; 0x02
    5fc6:	09 83       	std	Y+1, r16	; 0x01
    5fc8:	8f ef       	ldi	r24, 0xFF	; 255
    5fca:	9f e7       	ldi	r25, 0x7F	; 127
    5fcc:	9e 83       	std	Y+6, r25	; 0x06
    5fce:	8d 83       	std	Y+5, r24	; 0x05
    5fd0:	ae 01       	movw	r20, r28
    5fd2:	46 5e       	subi	r20, 0xE6	; 230
    5fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fd6:	68 8d       	ldd	r22, Y+24	; 0x18
    5fd8:	79 8d       	ldd	r23, Y+25	; 0x19
    5fda:	ce 01       	movw	r24, r28
    5fdc:	01 96       	adiw	r24, 0x01	; 1
    5fde:	10 d0       	rcall	.+32     	; 0x6000 <vfprintf>
    5fe0:	ef 81       	ldd	r30, Y+7	; 0x07
    5fe2:	f8 85       	ldd	r31, Y+8	; 0x08
    5fe4:	e0 0f       	add	r30, r16
    5fe6:	f1 1f       	adc	r31, r17
    5fe8:	10 82       	st	Z, r1
    5fea:	2e 96       	adiw	r28, 0x0e	; 14
    5fec:	0f b6       	in	r0, 0x3f	; 63
    5fee:	f8 94       	cli
    5ff0:	de bf       	out	0x3e, r29	; 62
    5ff2:	0f be       	out	0x3f, r0	; 63
    5ff4:	cd bf       	out	0x3d, r28	; 61
    5ff6:	df 91       	pop	r29
    5ff8:	cf 91       	pop	r28
    5ffa:	1f 91       	pop	r17
    5ffc:	0f 91       	pop	r16
    5ffe:	08 95       	ret

00006000 <vfprintf>:
    6000:	2f 92       	push	r2
    6002:	3f 92       	push	r3
    6004:	4f 92       	push	r4
    6006:	5f 92       	push	r5
    6008:	6f 92       	push	r6
    600a:	7f 92       	push	r7
    600c:	8f 92       	push	r8
    600e:	9f 92       	push	r9
    6010:	af 92       	push	r10
    6012:	bf 92       	push	r11
    6014:	cf 92       	push	r12
    6016:	df 92       	push	r13
    6018:	ef 92       	push	r14
    601a:	ff 92       	push	r15
    601c:	0f 93       	push	r16
    601e:	1f 93       	push	r17
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	cd b7       	in	r28, 0x3d	; 61
    6026:	de b7       	in	r29, 0x3e	; 62
    6028:	2b 97       	sbiw	r28, 0x0b	; 11
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	f8 94       	cli
    602e:	de bf       	out	0x3e, r29	; 62
    6030:	0f be       	out	0x3f, r0	; 63
    6032:	cd bf       	out	0x3d, r28	; 61
    6034:	6c 01       	movw	r12, r24
    6036:	7b 01       	movw	r14, r22
    6038:	8a 01       	movw	r16, r20
    603a:	fc 01       	movw	r30, r24
    603c:	17 82       	std	Z+7, r1	; 0x07
    603e:	16 82       	std	Z+6, r1	; 0x06
    6040:	83 81       	ldd	r24, Z+3	; 0x03
    6042:	81 ff       	sbrs	r24, 1
    6044:	bf c1       	rjmp	.+894    	; 0x63c4 <vfprintf+0x3c4>
    6046:	ce 01       	movw	r24, r28
    6048:	01 96       	adiw	r24, 0x01	; 1
    604a:	3c 01       	movw	r6, r24
    604c:	f6 01       	movw	r30, r12
    604e:	93 81       	ldd	r25, Z+3	; 0x03
    6050:	f7 01       	movw	r30, r14
    6052:	93 fd       	sbrc	r25, 3
    6054:	85 91       	lpm	r24, Z+
    6056:	93 ff       	sbrs	r25, 3
    6058:	81 91       	ld	r24, Z+
    605a:	7f 01       	movw	r14, r30
    605c:	88 23       	and	r24, r24
    605e:	09 f4       	brne	.+2      	; 0x6062 <vfprintf+0x62>
    6060:	ad c1       	rjmp	.+858    	; 0x63bc <vfprintf+0x3bc>
    6062:	85 32       	cpi	r24, 0x25	; 37
    6064:	39 f4       	brne	.+14     	; 0x6074 <vfprintf+0x74>
    6066:	93 fd       	sbrc	r25, 3
    6068:	85 91       	lpm	r24, Z+
    606a:	93 ff       	sbrs	r25, 3
    606c:	81 91       	ld	r24, Z+
    606e:	7f 01       	movw	r14, r30
    6070:	85 32       	cpi	r24, 0x25	; 37
    6072:	21 f4       	brne	.+8      	; 0x607c <vfprintf+0x7c>
    6074:	b6 01       	movw	r22, r12
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	d6 d1       	rcall	.+940    	; 0x6426 <fputc>
    607a:	e8 cf       	rjmp	.-48     	; 0x604c <vfprintf+0x4c>
    607c:	91 2c       	mov	r9, r1
    607e:	21 2c       	mov	r2, r1
    6080:	31 2c       	mov	r3, r1
    6082:	ff e1       	ldi	r31, 0x1F	; 31
    6084:	f3 15       	cp	r31, r3
    6086:	d8 f0       	brcs	.+54     	; 0x60be <vfprintf+0xbe>
    6088:	8b 32       	cpi	r24, 0x2B	; 43
    608a:	79 f0       	breq	.+30     	; 0x60aa <vfprintf+0xaa>
    608c:	38 f4       	brcc	.+14     	; 0x609c <vfprintf+0x9c>
    608e:	80 32       	cpi	r24, 0x20	; 32
    6090:	79 f0       	breq	.+30     	; 0x60b0 <vfprintf+0xb0>
    6092:	83 32       	cpi	r24, 0x23	; 35
    6094:	a1 f4       	brne	.+40     	; 0x60be <vfprintf+0xbe>
    6096:	23 2d       	mov	r18, r3
    6098:	20 61       	ori	r18, 0x10	; 16
    609a:	1d c0       	rjmp	.+58     	; 0x60d6 <vfprintf+0xd6>
    609c:	8d 32       	cpi	r24, 0x2D	; 45
    609e:	61 f0       	breq	.+24     	; 0x60b8 <vfprintf+0xb8>
    60a0:	80 33       	cpi	r24, 0x30	; 48
    60a2:	69 f4       	brne	.+26     	; 0x60be <vfprintf+0xbe>
    60a4:	23 2d       	mov	r18, r3
    60a6:	21 60       	ori	r18, 0x01	; 1
    60a8:	16 c0       	rjmp	.+44     	; 0x60d6 <vfprintf+0xd6>
    60aa:	83 2d       	mov	r24, r3
    60ac:	82 60       	ori	r24, 0x02	; 2
    60ae:	38 2e       	mov	r3, r24
    60b0:	e3 2d       	mov	r30, r3
    60b2:	e4 60       	ori	r30, 0x04	; 4
    60b4:	3e 2e       	mov	r3, r30
    60b6:	2a c0       	rjmp	.+84     	; 0x610c <vfprintf+0x10c>
    60b8:	f3 2d       	mov	r31, r3
    60ba:	f8 60       	ori	r31, 0x08	; 8
    60bc:	1d c0       	rjmp	.+58     	; 0x60f8 <vfprintf+0xf8>
    60be:	37 fc       	sbrc	r3, 7
    60c0:	2d c0       	rjmp	.+90     	; 0x611c <vfprintf+0x11c>
    60c2:	20 ed       	ldi	r18, 0xD0	; 208
    60c4:	28 0f       	add	r18, r24
    60c6:	2a 30       	cpi	r18, 0x0A	; 10
    60c8:	40 f0       	brcs	.+16     	; 0x60da <vfprintf+0xda>
    60ca:	8e 32       	cpi	r24, 0x2E	; 46
    60cc:	b9 f4       	brne	.+46     	; 0x60fc <vfprintf+0xfc>
    60ce:	36 fc       	sbrc	r3, 6
    60d0:	75 c1       	rjmp	.+746    	; 0x63bc <vfprintf+0x3bc>
    60d2:	23 2d       	mov	r18, r3
    60d4:	20 64       	ori	r18, 0x40	; 64
    60d6:	32 2e       	mov	r3, r18
    60d8:	19 c0       	rjmp	.+50     	; 0x610c <vfprintf+0x10c>
    60da:	36 fe       	sbrs	r3, 6
    60dc:	06 c0       	rjmp	.+12     	; 0x60ea <vfprintf+0xea>
    60de:	8a e0       	ldi	r24, 0x0A	; 10
    60e0:	98 9e       	mul	r9, r24
    60e2:	20 0d       	add	r18, r0
    60e4:	11 24       	eor	r1, r1
    60e6:	92 2e       	mov	r9, r18
    60e8:	11 c0       	rjmp	.+34     	; 0x610c <vfprintf+0x10c>
    60ea:	ea e0       	ldi	r30, 0x0A	; 10
    60ec:	2e 9e       	mul	r2, r30
    60ee:	20 0d       	add	r18, r0
    60f0:	11 24       	eor	r1, r1
    60f2:	22 2e       	mov	r2, r18
    60f4:	f3 2d       	mov	r31, r3
    60f6:	f0 62       	ori	r31, 0x20	; 32
    60f8:	3f 2e       	mov	r3, r31
    60fa:	08 c0       	rjmp	.+16     	; 0x610c <vfprintf+0x10c>
    60fc:	8c 36       	cpi	r24, 0x6C	; 108
    60fe:	21 f4       	brne	.+8      	; 0x6108 <vfprintf+0x108>
    6100:	83 2d       	mov	r24, r3
    6102:	80 68       	ori	r24, 0x80	; 128
    6104:	38 2e       	mov	r3, r24
    6106:	02 c0       	rjmp	.+4      	; 0x610c <vfprintf+0x10c>
    6108:	88 36       	cpi	r24, 0x68	; 104
    610a:	41 f4       	brne	.+16     	; 0x611c <vfprintf+0x11c>
    610c:	f7 01       	movw	r30, r14
    610e:	93 fd       	sbrc	r25, 3
    6110:	85 91       	lpm	r24, Z+
    6112:	93 ff       	sbrs	r25, 3
    6114:	81 91       	ld	r24, Z+
    6116:	7f 01       	movw	r14, r30
    6118:	81 11       	cpse	r24, r1
    611a:	b3 cf       	rjmp	.-154    	; 0x6082 <vfprintf+0x82>
    611c:	98 2f       	mov	r25, r24
    611e:	9f 7d       	andi	r25, 0xDF	; 223
    6120:	95 54       	subi	r25, 0x45	; 69
    6122:	93 30       	cpi	r25, 0x03	; 3
    6124:	28 f4       	brcc	.+10     	; 0x6130 <vfprintf+0x130>
    6126:	0c 5f       	subi	r16, 0xFC	; 252
    6128:	1f 4f       	sbci	r17, 0xFF	; 255
    612a:	9f e3       	ldi	r25, 0x3F	; 63
    612c:	99 83       	std	Y+1, r25	; 0x01
    612e:	0d c0       	rjmp	.+26     	; 0x614a <vfprintf+0x14a>
    6130:	83 36       	cpi	r24, 0x63	; 99
    6132:	31 f0       	breq	.+12     	; 0x6140 <vfprintf+0x140>
    6134:	83 37       	cpi	r24, 0x73	; 115
    6136:	71 f0       	breq	.+28     	; 0x6154 <vfprintf+0x154>
    6138:	83 35       	cpi	r24, 0x53	; 83
    613a:	09 f0       	breq	.+2      	; 0x613e <vfprintf+0x13e>
    613c:	55 c0       	rjmp	.+170    	; 0x61e8 <vfprintf+0x1e8>
    613e:	20 c0       	rjmp	.+64     	; 0x6180 <vfprintf+0x180>
    6140:	f8 01       	movw	r30, r16
    6142:	80 81       	ld	r24, Z
    6144:	89 83       	std	Y+1, r24	; 0x01
    6146:	0e 5f       	subi	r16, 0xFE	; 254
    6148:	1f 4f       	sbci	r17, 0xFF	; 255
    614a:	88 24       	eor	r8, r8
    614c:	83 94       	inc	r8
    614e:	91 2c       	mov	r9, r1
    6150:	53 01       	movw	r10, r6
    6152:	12 c0       	rjmp	.+36     	; 0x6178 <vfprintf+0x178>
    6154:	28 01       	movw	r4, r16
    6156:	f2 e0       	ldi	r31, 0x02	; 2
    6158:	4f 0e       	add	r4, r31
    615a:	51 1c       	adc	r5, r1
    615c:	f8 01       	movw	r30, r16
    615e:	a0 80       	ld	r10, Z
    6160:	b1 80       	ldd	r11, Z+1	; 0x01
    6162:	36 fe       	sbrs	r3, 6
    6164:	03 c0       	rjmp	.+6      	; 0x616c <vfprintf+0x16c>
    6166:	69 2d       	mov	r22, r9
    6168:	70 e0       	ldi	r23, 0x00	; 0
    616a:	02 c0       	rjmp	.+4      	; 0x6170 <vfprintf+0x170>
    616c:	6f ef       	ldi	r22, 0xFF	; 255
    616e:	7f ef       	ldi	r23, 0xFF	; 255
    6170:	c5 01       	movw	r24, r10
    6172:	4e d1       	rcall	.+668    	; 0x6410 <strnlen>
    6174:	4c 01       	movw	r8, r24
    6176:	82 01       	movw	r16, r4
    6178:	f3 2d       	mov	r31, r3
    617a:	ff 77       	andi	r31, 0x7F	; 127
    617c:	3f 2e       	mov	r3, r31
    617e:	15 c0       	rjmp	.+42     	; 0x61aa <vfprintf+0x1aa>
    6180:	28 01       	movw	r4, r16
    6182:	22 e0       	ldi	r18, 0x02	; 2
    6184:	42 0e       	add	r4, r18
    6186:	51 1c       	adc	r5, r1
    6188:	f8 01       	movw	r30, r16
    618a:	a0 80       	ld	r10, Z
    618c:	b1 80       	ldd	r11, Z+1	; 0x01
    618e:	36 fe       	sbrs	r3, 6
    6190:	03 c0       	rjmp	.+6      	; 0x6198 <vfprintf+0x198>
    6192:	69 2d       	mov	r22, r9
    6194:	70 e0       	ldi	r23, 0x00	; 0
    6196:	02 c0       	rjmp	.+4      	; 0x619c <vfprintf+0x19c>
    6198:	6f ef       	ldi	r22, 0xFF	; 255
    619a:	7f ef       	ldi	r23, 0xFF	; 255
    619c:	c5 01       	movw	r24, r10
    619e:	2d d1       	rcall	.+602    	; 0x63fa <strnlen_P>
    61a0:	4c 01       	movw	r8, r24
    61a2:	f3 2d       	mov	r31, r3
    61a4:	f0 68       	ori	r31, 0x80	; 128
    61a6:	3f 2e       	mov	r3, r31
    61a8:	82 01       	movw	r16, r4
    61aa:	33 fc       	sbrc	r3, 3
    61ac:	19 c0       	rjmp	.+50     	; 0x61e0 <vfprintf+0x1e0>
    61ae:	82 2d       	mov	r24, r2
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	88 16       	cp	r8, r24
    61b4:	99 06       	cpc	r9, r25
    61b6:	a0 f4       	brcc	.+40     	; 0x61e0 <vfprintf+0x1e0>
    61b8:	b6 01       	movw	r22, r12
    61ba:	80 e2       	ldi	r24, 0x20	; 32
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	33 d1       	rcall	.+614    	; 0x6426 <fputc>
    61c0:	2a 94       	dec	r2
    61c2:	f5 cf       	rjmp	.-22     	; 0x61ae <vfprintf+0x1ae>
    61c4:	f5 01       	movw	r30, r10
    61c6:	37 fc       	sbrc	r3, 7
    61c8:	85 91       	lpm	r24, Z+
    61ca:	37 fe       	sbrs	r3, 7
    61cc:	81 91       	ld	r24, Z+
    61ce:	5f 01       	movw	r10, r30
    61d0:	b6 01       	movw	r22, r12
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	28 d1       	rcall	.+592    	; 0x6426 <fputc>
    61d6:	21 10       	cpse	r2, r1
    61d8:	2a 94       	dec	r2
    61da:	21 e0       	ldi	r18, 0x01	; 1
    61dc:	82 1a       	sub	r8, r18
    61de:	91 08       	sbc	r9, r1
    61e0:	81 14       	cp	r8, r1
    61e2:	91 04       	cpc	r9, r1
    61e4:	79 f7       	brne	.-34     	; 0x61c4 <vfprintf+0x1c4>
    61e6:	e1 c0       	rjmp	.+450    	; 0x63aa <vfprintf+0x3aa>
    61e8:	84 36       	cpi	r24, 0x64	; 100
    61ea:	11 f0       	breq	.+4      	; 0x61f0 <vfprintf+0x1f0>
    61ec:	89 36       	cpi	r24, 0x69	; 105
    61ee:	39 f5       	brne	.+78     	; 0x623e <vfprintf+0x23e>
    61f0:	f8 01       	movw	r30, r16
    61f2:	37 fe       	sbrs	r3, 7
    61f4:	07 c0       	rjmp	.+14     	; 0x6204 <vfprintf+0x204>
    61f6:	60 81       	ld	r22, Z
    61f8:	71 81       	ldd	r23, Z+1	; 0x01
    61fa:	82 81       	ldd	r24, Z+2	; 0x02
    61fc:	93 81       	ldd	r25, Z+3	; 0x03
    61fe:	0c 5f       	subi	r16, 0xFC	; 252
    6200:	1f 4f       	sbci	r17, 0xFF	; 255
    6202:	08 c0       	rjmp	.+16     	; 0x6214 <vfprintf+0x214>
    6204:	60 81       	ld	r22, Z
    6206:	71 81       	ldd	r23, Z+1	; 0x01
    6208:	07 2e       	mov	r0, r23
    620a:	00 0c       	add	r0, r0
    620c:	88 0b       	sbc	r24, r24
    620e:	99 0b       	sbc	r25, r25
    6210:	0e 5f       	subi	r16, 0xFE	; 254
    6212:	1f 4f       	sbci	r17, 0xFF	; 255
    6214:	f3 2d       	mov	r31, r3
    6216:	ff 76       	andi	r31, 0x6F	; 111
    6218:	3f 2e       	mov	r3, r31
    621a:	97 ff       	sbrs	r25, 7
    621c:	09 c0       	rjmp	.+18     	; 0x6230 <vfprintf+0x230>
    621e:	90 95       	com	r25
    6220:	80 95       	com	r24
    6222:	70 95       	com	r23
    6224:	61 95       	neg	r22
    6226:	7f 4f       	sbci	r23, 0xFF	; 255
    6228:	8f 4f       	sbci	r24, 0xFF	; 255
    622a:	9f 4f       	sbci	r25, 0xFF	; 255
    622c:	f0 68       	ori	r31, 0x80	; 128
    622e:	3f 2e       	mov	r3, r31
    6230:	2a e0       	ldi	r18, 0x0A	; 10
    6232:	30 e0       	ldi	r19, 0x00	; 0
    6234:	a3 01       	movw	r20, r6
    6236:	33 d1       	rcall	.+614    	; 0x649e <__ultoa_invert>
    6238:	88 2e       	mov	r8, r24
    623a:	86 18       	sub	r8, r6
    623c:	44 c0       	rjmp	.+136    	; 0x62c6 <vfprintf+0x2c6>
    623e:	85 37       	cpi	r24, 0x75	; 117
    6240:	31 f4       	brne	.+12     	; 0x624e <vfprintf+0x24e>
    6242:	23 2d       	mov	r18, r3
    6244:	2f 7e       	andi	r18, 0xEF	; 239
    6246:	b2 2e       	mov	r11, r18
    6248:	2a e0       	ldi	r18, 0x0A	; 10
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	25 c0       	rjmp	.+74     	; 0x6298 <vfprintf+0x298>
    624e:	93 2d       	mov	r25, r3
    6250:	99 7f       	andi	r25, 0xF9	; 249
    6252:	b9 2e       	mov	r11, r25
    6254:	8f 36       	cpi	r24, 0x6F	; 111
    6256:	c1 f0       	breq	.+48     	; 0x6288 <vfprintf+0x288>
    6258:	18 f4       	brcc	.+6      	; 0x6260 <vfprintf+0x260>
    625a:	88 35       	cpi	r24, 0x58	; 88
    625c:	79 f0       	breq	.+30     	; 0x627c <vfprintf+0x27c>
    625e:	ae c0       	rjmp	.+348    	; 0x63bc <vfprintf+0x3bc>
    6260:	80 37       	cpi	r24, 0x70	; 112
    6262:	19 f0       	breq	.+6      	; 0x626a <vfprintf+0x26a>
    6264:	88 37       	cpi	r24, 0x78	; 120
    6266:	21 f0       	breq	.+8      	; 0x6270 <vfprintf+0x270>
    6268:	a9 c0       	rjmp	.+338    	; 0x63bc <vfprintf+0x3bc>
    626a:	e9 2f       	mov	r30, r25
    626c:	e0 61       	ori	r30, 0x10	; 16
    626e:	be 2e       	mov	r11, r30
    6270:	b4 fe       	sbrs	r11, 4
    6272:	0d c0       	rjmp	.+26     	; 0x628e <vfprintf+0x28e>
    6274:	fb 2d       	mov	r31, r11
    6276:	f4 60       	ori	r31, 0x04	; 4
    6278:	bf 2e       	mov	r11, r31
    627a:	09 c0       	rjmp	.+18     	; 0x628e <vfprintf+0x28e>
    627c:	34 fe       	sbrs	r3, 4
    627e:	0a c0       	rjmp	.+20     	; 0x6294 <vfprintf+0x294>
    6280:	29 2f       	mov	r18, r25
    6282:	26 60       	ori	r18, 0x06	; 6
    6284:	b2 2e       	mov	r11, r18
    6286:	06 c0       	rjmp	.+12     	; 0x6294 <vfprintf+0x294>
    6288:	28 e0       	ldi	r18, 0x08	; 8
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	05 c0       	rjmp	.+10     	; 0x6298 <vfprintf+0x298>
    628e:	20 e1       	ldi	r18, 0x10	; 16
    6290:	30 e0       	ldi	r19, 0x00	; 0
    6292:	02 c0       	rjmp	.+4      	; 0x6298 <vfprintf+0x298>
    6294:	20 e1       	ldi	r18, 0x10	; 16
    6296:	32 e0       	ldi	r19, 0x02	; 2
    6298:	f8 01       	movw	r30, r16
    629a:	b7 fe       	sbrs	r11, 7
    629c:	07 c0       	rjmp	.+14     	; 0x62ac <vfprintf+0x2ac>
    629e:	60 81       	ld	r22, Z
    62a0:	71 81       	ldd	r23, Z+1	; 0x01
    62a2:	82 81       	ldd	r24, Z+2	; 0x02
    62a4:	93 81       	ldd	r25, Z+3	; 0x03
    62a6:	0c 5f       	subi	r16, 0xFC	; 252
    62a8:	1f 4f       	sbci	r17, 0xFF	; 255
    62aa:	06 c0       	rjmp	.+12     	; 0x62b8 <vfprintf+0x2b8>
    62ac:	60 81       	ld	r22, Z
    62ae:	71 81       	ldd	r23, Z+1	; 0x01
    62b0:	80 e0       	ldi	r24, 0x00	; 0
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	0e 5f       	subi	r16, 0xFE	; 254
    62b6:	1f 4f       	sbci	r17, 0xFF	; 255
    62b8:	a3 01       	movw	r20, r6
    62ba:	f1 d0       	rcall	.+482    	; 0x649e <__ultoa_invert>
    62bc:	88 2e       	mov	r8, r24
    62be:	86 18       	sub	r8, r6
    62c0:	fb 2d       	mov	r31, r11
    62c2:	ff 77       	andi	r31, 0x7F	; 127
    62c4:	3f 2e       	mov	r3, r31
    62c6:	36 fe       	sbrs	r3, 6
    62c8:	0d c0       	rjmp	.+26     	; 0x62e4 <vfprintf+0x2e4>
    62ca:	23 2d       	mov	r18, r3
    62cc:	2e 7f       	andi	r18, 0xFE	; 254
    62ce:	a2 2e       	mov	r10, r18
    62d0:	89 14       	cp	r8, r9
    62d2:	58 f4       	brcc	.+22     	; 0x62ea <vfprintf+0x2ea>
    62d4:	34 fe       	sbrs	r3, 4
    62d6:	0b c0       	rjmp	.+22     	; 0x62ee <vfprintf+0x2ee>
    62d8:	32 fc       	sbrc	r3, 2
    62da:	09 c0       	rjmp	.+18     	; 0x62ee <vfprintf+0x2ee>
    62dc:	83 2d       	mov	r24, r3
    62de:	8e 7e       	andi	r24, 0xEE	; 238
    62e0:	a8 2e       	mov	r10, r24
    62e2:	05 c0       	rjmp	.+10     	; 0x62ee <vfprintf+0x2ee>
    62e4:	b8 2c       	mov	r11, r8
    62e6:	a3 2c       	mov	r10, r3
    62e8:	03 c0       	rjmp	.+6      	; 0x62f0 <vfprintf+0x2f0>
    62ea:	b8 2c       	mov	r11, r8
    62ec:	01 c0       	rjmp	.+2      	; 0x62f0 <vfprintf+0x2f0>
    62ee:	b9 2c       	mov	r11, r9
    62f0:	a4 fe       	sbrs	r10, 4
    62f2:	0f c0       	rjmp	.+30     	; 0x6312 <vfprintf+0x312>
    62f4:	fe 01       	movw	r30, r28
    62f6:	e8 0d       	add	r30, r8
    62f8:	f1 1d       	adc	r31, r1
    62fa:	80 81       	ld	r24, Z
    62fc:	80 33       	cpi	r24, 0x30	; 48
    62fe:	21 f4       	brne	.+8      	; 0x6308 <vfprintf+0x308>
    6300:	9a 2d       	mov	r25, r10
    6302:	99 7e       	andi	r25, 0xE9	; 233
    6304:	a9 2e       	mov	r10, r25
    6306:	09 c0       	rjmp	.+18     	; 0x631a <vfprintf+0x31a>
    6308:	a2 fe       	sbrs	r10, 2
    630a:	06 c0       	rjmp	.+12     	; 0x6318 <vfprintf+0x318>
    630c:	b3 94       	inc	r11
    630e:	b3 94       	inc	r11
    6310:	04 c0       	rjmp	.+8      	; 0x631a <vfprintf+0x31a>
    6312:	8a 2d       	mov	r24, r10
    6314:	86 78       	andi	r24, 0x86	; 134
    6316:	09 f0       	breq	.+2      	; 0x631a <vfprintf+0x31a>
    6318:	b3 94       	inc	r11
    631a:	a3 fc       	sbrc	r10, 3
    631c:	10 c0       	rjmp	.+32     	; 0x633e <vfprintf+0x33e>
    631e:	a0 fe       	sbrs	r10, 0
    6320:	06 c0       	rjmp	.+12     	; 0x632e <vfprintf+0x32e>
    6322:	b2 14       	cp	r11, r2
    6324:	80 f4       	brcc	.+32     	; 0x6346 <vfprintf+0x346>
    6326:	28 0c       	add	r2, r8
    6328:	92 2c       	mov	r9, r2
    632a:	9b 18       	sub	r9, r11
    632c:	0d c0       	rjmp	.+26     	; 0x6348 <vfprintf+0x348>
    632e:	b2 14       	cp	r11, r2
    6330:	58 f4       	brcc	.+22     	; 0x6348 <vfprintf+0x348>
    6332:	b6 01       	movw	r22, r12
    6334:	80 e2       	ldi	r24, 0x20	; 32
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	76 d0       	rcall	.+236    	; 0x6426 <fputc>
    633a:	b3 94       	inc	r11
    633c:	f8 cf       	rjmp	.-16     	; 0x632e <vfprintf+0x32e>
    633e:	b2 14       	cp	r11, r2
    6340:	18 f4       	brcc	.+6      	; 0x6348 <vfprintf+0x348>
    6342:	2b 18       	sub	r2, r11
    6344:	02 c0       	rjmp	.+4      	; 0x634a <vfprintf+0x34a>
    6346:	98 2c       	mov	r9, r8
    6348:	21 2c       	mov	r2, r1
    634a:	a4 fe       	sbrs	r10, 4
    634c:	0f c0       	rjmp	.+30     	; 0x636c <vfprintf+0x36c>
    634e:	b6 01       	movw	r22, r12
    6350:	80 e3       	ldi	r24, 0x30	; 48
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	68 d0       	rcall	.+208    	; 0x6426 <fputc>
    6356:	a2 fe       	sbrs	r10, 2
    6358:	16 c0       	rjmp	.+44     	; 0x6386 <vfprintf+0x386>
    635a:	a1 fc       	sbrc	r10, 1
    635c:	03 c0       	rjmp	.+6      	; 0x6364 <vfprintf+0x364>
    635e:	88 e7       	ldi	r24, 0x78	; 120
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	02 c0       	rjmp	.+4      	; 0x6368 <vfprintf+0x368>
    6364:	88 e5       	ldi	r24, 0x58	; 88
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	b6 01       	movw	r22, r12
    636a:	0c c0       	rjmp	.+24     	; 0x6384 <vfprintf+0x384>
    636c:	8a 2d       	mov	r24, r10
    636e:	86 78       	andi	r24, 0x86	; 134
    6370:	51 f0       	breq	.+20     	; 0x6386 <vfprintf+0x386>
    6372:	a1 fe       	sbrs	r10, 1
    6374:	02 c0       	rjmp	.+4      	; 0x637a <vfprintf+0x37a>
    6376:	8b e2       	ldi	r24, 0x2B	; 43
    6378:	01 c0       	rjmp	.+2      	; 0x637c <vfprintf+0x37c>
    637a:	80 e2       	ldi	r24, 0x20	; 32
    637c:	a7 fc       	sbrc	r10, 7
    637e:	8d e2       	ldi	r24, 0x2D	; 45
    6380:	b6 01       	movw	r22, r12
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	50 d0       	rcall	.+160    	; 0x6426 <fputc>
    6386:	89 14       	cp	r8, r9
    6388:	30 f4       	brcc	.+12     	; 0x6396 <vfprintf+0x396>
    638a:	b6 01       	movw	r22, r12
    638c:	80 e3       	ldi	r24, 0x30	; 48
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	4a d0       	rcall	.+148    	; 0x6426 <fputc>
    6392:	9a 94       	dec	r9
    6394:	f8 cf       	rjmp	.-16     	; 0x6386 <vfprintf+0x386>
    6396:	8a 94       	dec	r8
    6398:	f3 01       	movw	r30, r6
    639a:	e8 0d       	add	r30, r8
    639c:	f1 1d       	adc	r31, r1
    639e:	80 81       	ld	r24, Z
    63a0:	b6 01       	movw	r22, r12
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	40 d0       	rcall	.+128    	; 0x6426 <fputc>
    63a6:	81 10       	cpse	r8, r1
    63a8:	f6 cf       	rjmp	.-20     	; 0x6396 <vfprintf+0x396>
    63aa:	22 20       	and	r2, r2
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <vfprintf+0x3b0>
    63ae:	4e ce       	rjmp	.-868    	; 0x604c <vfprintf+0x4c>
    63b0:	b6 01       	movw	r22, r12
    63b2:	80 e2       	ldi	r24, 0x20	; 32
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	37 d0       	rcall	.+110    	; 0x6426 <fputc>
    63b8:	2a 94       	dec	r2
    63ba:	f7 cf       	rjmp	.-18     	; 0x63aa <vfprintf+0x3aa>
    63bc:	f6 01       	movw	r30, r12
    63be:	86 81       	ldd	r24, Z+6	; 0x06
    63c0:	97 81       	ldd	r25, Z+7	; 0x07
    63c2:	02 c0       	rjmp	.+4      	; 0x63c8 <vfprintf+0x3c8>
    63c4:	8f ef       	ldi	r24, 0xFF	; 255
    63c6:	9f ef       	ldi	r25, 0xFF	; 255
    63c8:	2b 96       	adiw	r28, 0x0b	; 11
    63ca:	0f b6       	in	r0, 0x3f	; 63
    63cc:	f8 94       	cli
    63ce:	de bf       	out	0x3e, r29	; 62
    63d0:	0f be       	out	0x3f, r0	; 63
    63d2:	cd bf       	out	0x3d, r28	; 61
    63d4:	df 91       	pop	r29
    63d6:	cf 91       	pop	r28
    63d8:	1f 91       	pop	r17
    63da:	0f 91       	pop	r16
    63dc:	ff 90       	pop	r15
    63de:	ef 90       	pop	r14
    63e0:	df 90       	pop	r13
    63e2:	cf 90       	pop	r12
    63e4:	bf 90       	pop	r11
    63e6:	af 90       	pop	r10
    63e8:	9f 90       	pop	r9
    63ea:	8f 90       	pop	r8
    63ec:	7f 90       	pop	r7
    63ee:	6f 90       	pop	r6
    63f0:	5f 90       	pop	r5
    63f2:	4f 90       	pop	r4
    63f4:	3f 90       	pop	r3
    63f6:	2f 90       	pop	r2
    63f8:	08 95       	ret

000063fa <strnlen_P>:
    63fa:	fc 01       	movw	r30, r24
    63fc:	05 90       	lpm	r0, Z+
    63fe:	61 50       	subi	r22, 0x01	; 1
    6400:	70 40       	sbci	r23, 0x00	; 0
    6402:	01 10       	cpse	r0, r1
    6404:	d8 f7       	brcc	.-10     	; 0x63fc <strnlen_P+0x2>
    6406:	80 95       	com	r24
    6408:	90 95       	com	r25
    640a:	8e 0f       	add	r24, r30
    640c:	9f 1f       	adc	r25, r31
    640e:	08 95       	ret

00006410 <strnlen>:
    6410:	fc 01       	movw	r30, r24
    6412:	61 50       	subi	r22, 0x01	; 1
    6414:	70 40       	sbci	r23, 0x00	; 0
    6416:	01 90       	ld	r0, Z+
    6418:	01 10       	cpse	r0, r1
    641a:	d8 f7       	brcc	.-10     	; 0x6412 <strnlen+0x2>
    641c:	80 95       	com	r24
    641e:	90 95       	com	r25
    6420:	8e 0f       	add	r24, r30
    6422:	9f 1f       	adc	r25, r31
    6424:	08 95       	ret

00006426 <fputc>:
    6426:	0f 93       	push	r16
    6428:	1f 93       	push	r17
    642a:	cf 93       	push	r28
    642c:	df 93       	push	r29
    642e:	fb 01       	movw	r30, r22
    6430:	23 81       	ldd	r18, Z+3	; 0x03
    6432:	21 fd       	sbrc	r18, 1
    6434:	03 c0       	rjmp	.+6      	; 0x643c <fputc+0x16>
    6436:	8f ef       	ldi	r24, 0xFF	; 255
    6438:	9f ef       	ldi	r25, 0xFF	; 255
    643a:	2c c0       	rjmp	.+88     	; 0x6494 <fputc+0x6e>
    643c:	22 ff       	sbrs	r18, 2
    643e:	16 c0       	rjmp	.+44     	; 0x646c <fputc+0x46>
    6440:	46 81       	ldd	r20, Z+6	; 0x06
    6442:	57 81       	ldd	r21, Z+7	; 0x07
    6444:	24 81       	ldd	r18, Z+4	; 0x04
    6446:	35 81       	ldd	r19, Z+5	; 0x05
    6448:	42 17       	cp	r20, r18
    644a:	53 07       	cpc	r21, r19
    644c:	44 f4       	brge	.+16     	; 0x645e <fputc+0x38>
    644e:	a0 81       	ld	r26, Z
    6450:	b1 81       	ldd	r27, Z+1	; 0x01
    6452:	9d 01       	movw	r18, r26
    6454:	2f 5f       	subi	r18, 0xFF	; 255
    6456:	3f 4f       	sbci	r19, 0xFF	; 255
    6458:	31 83       	std	Z+1, r19	; 0x01
    645a:	20 83       	st	Z, r18
    645c:	8c 93       	st	X, r24
    645e:	26 81       	ldd	r18, Z+6	; 0x06
    6460:	37 81       	ldd	r19, Z+7	; 0x07
    6462:	2f 5f       	subi	r18, 0xFF	; 255
    6464:	3f 4f       	sbci	r19, 0xFF	; 255
    6466:	37 83       	std	Z+7, r19	; 0x07
    6468:	26 83       	std	Z+6, r18	; 0x06
    646a:	14 c0       	rjmp	.+40     	; 0x6494 <fputc+0x6e>
    646c:	8b 01       	movw	r16, r22
    646e:	ec 01       	movw	r28, r24
    6470:	fb 01       	movw	r30, r22
    6472:	00 84       	ldd	r0, Z+8	; 0x08
    6474:	f1 85       	ldd	r31, Z+9	; 0x09
    6476:	e0 2d       	mov	r30, r0
    6478:	19 95       	eicall
    647a:	89 2b       	or	r24, r25
    647c:	e1 f6       	brne	.-72     	; 0x6436 <fputc+0x10>
    647e:	d8 01       	movw	r26, r16
    6480:	16 96       	adiw	r26, 0x06	; 6
    6482:	8d 91       	ld	r24, X+
    6484:	9c 91       	ld	r25, X
    6486:	17 97       	sbiw	r26, 0x07	; 7
    6488:	01 96       	adiw	r24, 0x01	; 1
    648a:	17 96       	adiw	r26, 0x07	; 7
    648c:	9c 93       	st	X, r25
    648e:	8e 93       	st	-X, r24
    6490:	16 97       	sbiw	r26, 0x06	; 6
    6492:	ce 01       	movw	r24, r28
    6494:	df 91       	pop	r29
    6496:	cf 91       	pop	r28
    6498:	1f 91       	pop	r17
    649a:	0f 91       	pop	r16
    649c:	08 95       	ret

0000649e <__ultoa_invert>:
    649e:	fa 01       	movw	r30, r20
    64a0:	aa 27       	eor	r26, r26
    64a2:	28 30       	cpi	r18, 0x08	; 8
    64a4:	51 f1       	breq	.+84     	; 0x64fa <__ultoa_invert+0x5c>
    64a6:	20 31       	cpi	r18, 0x10	; 16
    64a8:	81 f1       	breq	.+96     	; 0x650a <__ultoa_invert+0x6c>
    64aa:	e8 94       	clt
    64ac:	6f 93       	push	r22
    64ae:	6e 7f       	andi	r22, 0xFE	; 254
    64b0:	6e 5f       	subi	r22, 0xFE	; 254
    64b2:	7f 4f       	sbci	r23, 0xFF	; 255
    64b4:	8f 4f       	sbci	r24, 0xFF	; 255
    64b6:	9f 4f       	sbci	r25, 0xFF	; 255
    64b8:	af 4f       	sbci	r26, 0xFF	; 255
    64ba:	b1 e0       	ldi	r27, 0x01	; 1
    64bc:	3e d0       	rcall	.+124    	; 0x653a <__ultoa_invert+0x9c>
    64be:	b4 e0       	ldi	r27, 0x04	; 4
    64c0:	3c d0       	rcall	.+120    	; 0x653a <__ultoa_invert+0x9c>
    64c2:	67 0f       	add	r22, r23
    64c4:	78 1f       	adc	r23, r24
    64c6:	89 1f       	adc	r24, r25
    64c8:	9a 1f       	adc	r25, r26
    64ca:	a1 1d       	adc	r26, r1
    64cc:	68 0f       	add	r22, r24
    64ce:	79 1f       	adc	r23, r25
    64d0:	8a 1f       	adc	r24, r26
    64d2:	91 1d       	adc	r25, r1
    64d4:	a1 1d       	adc	r26, r1
    64d6:	6a 0f       	add	r22, r26
    64d8:	71 1d       	adc	r23, r1
    64da:	81 1d       	adc	r24, r1
    64dc:	91 1d       	adc	r25, r1
    64de:	a1 1d       	adc	r26, r1
    64e0:	20 d0       	rcall	.+64     	; 0x6522 <__ultoa_invert+0x84>
    64e2:	09 f4       	brne	.+2      	; 0x64e6 <__ultoa_invert+0x48>
    64e4:	68 94       	set
    64e6:	3f 91       	pop	r19
    64e8:	2a e0       	ldi	r18, 0x0A	; 10
    64ea:	26 9f       	mul	r18, r22
    64ec:	11 24       	eor	r1, r1
    64ee:	30 19       	sub	r19, r0
    64f0:	30 5d       	subi	r19, 0xD0	; 208
    64f2:	31 93       	st	Z+, r19
    64f4:	de f6       	brtc	.-74     	; 0x64ac <__ultoa_invert+0xe>
    64f6:	cf 01       	movw	r24, r30
    64f8:	08 95       	ret
    64fa:	46 2f       	mov	r20, r22
    64fc:	47 70       	andi	r20, 0x07	; 7
    64fe:	40 5d       	subi	r20, 0xD0	; 208
    6500:	41 93       	st	Z+, r20
    6502:	b3 e0       	ldi	r27, 0x03	; 3
    6504:	0f d0       	rcall	.+30     	; 0x6524 <__ultoa_invert+0x86>
    6506:	c9 f7       	brne	.-14     	; 0x64fa <__ultoa_invert+0x5c>
    6508:	f6 cf       	rjmp	.-20     	; 0x64f6 <__ultoa_invert+0x58>
    650a:	46 2f       	mov	r20, r22
    650c:	4f 70       	andi	r20, 0x0F	; 15
    650e:	40 5d       	subi	r20, 0xD0	; 208
    6510:	4a 33       	cpi	r20, 0x3A	; 58
    6512:	18 f0       	brcs	.+6      	; 0x651a <__ultoa_invert+0x7c>
    6514:	49 5d       	subi	r20, 0xD9	; 217
    6516:	31 fd       	sbrc	r19, 1
    6518:	40 52       	subi	r20, 0x20	; 32
    651a:	41 93       	st	Z+, r20
    651c:	02 d0       	rcall	.+4      	; 0x6522 <__ultoa_invert+0x84>
    651e:	a9 f7       	brne	.-22     	; 0x650a <__ultoa_invert+0x6c>
    6520:	ea cf       	rjmp	.-44     	; 0x64f6 <__ultoa_invert+0x58>
    6522:	b4 e0       	ldi	r27, 0x04	; 4
    6524:	a6 95       	lsr	r26
    6526:	97 95       	ror	r25
    6528:	87 95       	ror	r24
    652a:	77 95       	ror	r23
    652c:	67 95       	ror	r22
    652e:	ba 95       	dec	r27
    6530:	c9 f7       	brne	.-14     	; 0x6524 <__ultoa_invert+0x86>
    6532:	00 97       	sbiw	r24, 0x00	; 0
    6534:	61 05       	cpc	r22, r1
    6536:	71 05       	cpc	r23, r1
    6538:	08 95       	ret
    653a:	9b 01       	movw	r18, r22
    653c:	ac 01       	movw	r20, r24
    653e:	0a 2e       	mov	r0, r26
    6540:	06 94       	lsr	r0
    6542:	57 95       	ror	r21
    6544:	47 95       	ror	r20
    6546:	37 95       	ror	r19
    6548:	27 95       	ror	r18
    654a:	ba 95       	dec	r27
    654c:	c9 f7       	brne	.-14     	; 0x6540 <__ultoa_invert+0xa2>
    654e:	62 0f       	add	r22, r18
    6550:	73 1f       	adc	r23, r19
    6552:	84 1f       	adc	r24, r20
    6554:	95 1f       	adc	r25, r21
    6556:	a0 1d       	adc	r26, r0
    6558:	08 95       	ret

0000655a <_exit>:
    655a:	f8 94       	cli

0000655c <__stop_program>:
    655c:	ff cf       	rjmp	.-2      	; 0x655c <__stop_program>
