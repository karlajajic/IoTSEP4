
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a6  00800200  00004efa  00004f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000124b  008006a6  008006a6  00005434  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000970  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c9e2  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003121  00000000  00000000  00012822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e44  00000000  00000000  00015943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000216c  00000000  00000000  0001b788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c62  00000000  00000000  0001d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b797  00000000  00000000  00021556  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c0  00000000  00000000  0002cced  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c2       	rjmp	.+1166   	; 0x490 <__ctors_end>
       2:	00 00       	nop
       4:	66 c2       	rjmp	.+1228   	; 0x4d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c2       	rjmp	.+1224   	; 0x4d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c2       	rjmp	.+1220   	; 0x4d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c2       	rjmp	.+1216   	; 0x4d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c2       	rjmp	.+1212   	; 0x4d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c2       	rjmp	.+1208   	; 0x4d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c2       	rjmp	.+1204   	; 0x4d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c2       	rjmp	.+1200   	; 0x4d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c2       	rjmp	.+1196   	; 0x4d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c2       	rjmp	.+1192   	; 0x4d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c2       	rjmp	.+1188   	; 0x4d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d2 c6       	rjmp	.+3492   	; 0xdd6 <__vector_12>
      32:	00 00       	nop
      34:	4e c2       	rjmp	.+1180   	; 0x4d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c2       	rjmp	.+1176   	; 0x4d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c2       	rjmp	.+1172   	; 0x4d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c2       	rjmp	.+1168   	; 0x4d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	46 c2       	rjmp	.+1164   	; 0x4d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c2       	rjmp	.+1160   	; 0x4d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c2       	rjmp	.+1156   	; 0x4d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c2       	rjmp	.+1152   	; 0x4d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	3e c2       	rjmp	.+1148   	; 0x4d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c2       	rjmp	.+1144   	; 0x4d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c2       	rjmp	.+1140   	; 0x4d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c2       	rjmp	.+1136   	; 0x4d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__vector_25>
      68:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__vector_26>
      6c:	32 c2       	rjmp	.+1124   	; 0x4d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c2       	rjmp	.+1120   	; 0x4d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c2       	rjmp	.+1116   	; 0x4d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c2       	rjmp	.+1112   	; 0x4d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c2       	rjmp	.+1108   	; 0x4d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c2       	rjmp	.+1104   	; 0x4d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c2       	rjmp	.+1100   	; 0x4d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c2       	rjmp	.+1096   	; 0x4d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c2       	rjmp	.+1092   	; 0x4d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__vector_36>
      94:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <__vector_37>
      98:	1c c2       	rjmp	.+1080   	; 0x4d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__vector_39>
      a0:	18 c2       	rjmp	.+1072   	; 0x4d2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	16 c2       	rjmp	.+1068   	; 0x4d2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	14 c2       	rjmp	.+1064   	; 0x4d2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	12 c2       	rjmp	.+1060   	; 0x4d2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	10 c2       	rjmp	.+1056   	; 0x4d2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0e c2       	rjmp	.+1052   	; 0x4d2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c c2       	rjmp	.+1048   	; 0x4d2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0a c2       	rjmp	.+1044   	; 0x4d2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	08 c2       	rjmp	.+1040   	; 0x4d2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	06 c2       	rjmp	.+1036   	; 0x4d2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	04 c2       	rjmp	.+1032   	; 0x4d2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <__vector_51>
      d0:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__vector_52>
      d4:	fe c1       	rjmp	.+1020   	; 0x4d2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__vector_54>
      dc:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <__vector_55>
      e0:	f8 c1       	rjmp	.+1008   	; 0x4d2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 01       	movw	r22, r30
      e6:	bf 01       	movw	r22, r30
      e8:	bf 01       	movw	r22, r30
      ea:	f9 01       	movw	r30, r18
      ec:	01 02       	muls	r16, r17
      ee:	17 02       	muls	r17, r23
      f0:	bf 01       	movw	r22, r30
      f2:	bf 01       	movw	r22, r30
      f4:	f9 01       	movw	r30, r18
      f6:	01 02       	muls	r16, r17
      f8:	53 20       	and	r5, r3
      fa:	c3 20       	and	r12, r3
      fc:	c3 20       	and	r12, r3
      fe:	c3 20       	and	r12, r3
     100:	c3 20       	and	r12, r3
     102:	c3 20       	and	r12, r3
     104:	c3 20       	and	r12, r3
     106:	c3 20       	and	r12, r3
     108:	53 20       	and	r5, r3
     10a:	c3 20       	and	r12, r3
     10c:	c3 20       	and	r12, r3
     10e:	c3 20       	and	r12, r3
     110:	c3 20       	and	r12, r3
     112:	c3 20       	and	r12, r3
     114:	c3 20       	and	r12, r3
     116:	c3 20       	and	r12, r3
     118:	55 20       	and	r5, r5
     11a:	c3 20       	and	r12, r3
     11c:	c3 20       	and	r12, r3
     11e:	c3 20       	and	r12, r3
     120:	c3 20       	and	r12, r3
     122:	c3 20       	and	r12, r3
     124:	c3 20       	and	r12, r3
     126:	c3 20       	and	r12, r3
     128:	c3 20       	and	r12, r3
     12a:	c3 20       	and	r12, r3
     12c:	c3 20       	and	r12, r3
     12e:	c3 20       	and	r12, r3
     130:	c3 20       	and	r12, r3
     132:	c3 20       	and	r12, r3
     134:	c3 20       	and	r12, r3
     136:	c3 20       	and	r12, r3
     138:	55 20       	and	r5, r5
     13a:	c3 20       	and	r12, r3
     13c:	c3 20       	and	r12, r3
     13e:	c3 20       	and	r12, r3
     140:	c3 20       	and	r12, r3
     142:	c3 20       	and	r12, r3
     144:	c3 20       	and	r12, r3
     146:	c3 20       	and	r12, r3
     148:	c3 20       	and	r12, r3
     14a:	c3 20       	and	r12, r3
     14c:	c3 20       	and	r12, r3
     14e:	c3 20       	and	r12, r3
     150:	c3 20       	and	r12, r3
     152:	c3 20       	and	r12, r3
     154:	c3 20       	and	r12, r3
     156:	c3 20       	and	r12, r3
     158:	bf 20       	and	r11, r15
     15a:	c3 20       	and	r12, r3
     15c:	c3 20       	and	r12, r3
     15e:	c3 20       	and	r12, r3
     160:	c3 20       	and	r12, r3
     162:	c3 20       	and	r12, r3
     164:	c3 20       	and	r12, r3
     166:	c3 20       	and	r12, r3
     168:	8a 20       	and	r8, r10
     16a:	c3 20       	and	r12, r3
     16c:	c3 20       	and	r12, r3
     16e:	c3 20       	and	r12, r3
     170:	c3 20       	and	r12, r3
     172:	c3 20       	and	r12, r3
     174:	c3 20       	and	r12, r3
     176:	c3 20       	and	r12, r3
     178:	c3 20       	and	r12, r3
     17a:	c3 20       	and	r12, r3
     17c:	c3 20       	and	r12, r3
     17e:	c3 20       	and	r12, r3
     180:	c3 20       	and	r12, r3
     182:	c3 20       	and	r12, r3
     184:	c3 20       	and	r12, r3
     186:	c3 20       	and	r12, r3
     188:	7e 20       	and	r7, r14
     18a:	c3 20       	and	r12, r3
     18c:	c3 20       	and	r12, r3
     18e:	c3 20       	and	r12, r3
     190:	c3 20       	and	r12, r3
     192:	c3 20       	and	r12, r3
     194:	c3 20       	and	r12, r3
     196:	c3 20       	and	r12, r3
     198:	a2 20       	and	r10, r2

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a ee       	ldi	r16, 0xEA	; 234
     19c:	16 e1       	ldi	r17, 0x16	; 22
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e1       	ldi	r31, 0x1A	; 26
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e1       	ldi	r31, 0x17	; 23
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 e9 16 	lds	r24, 0x16E9	; 0x8016e9 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	6a d4       	rcall	.+2260   	; 0xaa0 <uxListRemove>
     1cc:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 dd 16 	sts	0x16DD, r24	; 0x8016dd <uxCurrentNumberOfTasks>
     1d6:	80 91 e9 16 	lds	r24, 0x16E9	; 0x8016e9 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 e9 16 	sts	0x16E9, r24	; 0x8016e9 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	b7 d3       	rcall	.+1902   	; 0x958 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	b5 d3       	rcall	.+1898   	; 0x958 <vPortFree>
     1ee:	80 91 e9 16 	lds	r24, 0x16E9	; 0x8016e9 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	25 d5       	rcall	.+2634   	; 0xc4a <vPortYield>
     200:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 52 17 	lds	r30, 0x1752	; 0x801752 <pxCurrentTimerList>
     232:	f0 91 53 17 	lds	r31, 0x1753	; 0x801753 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0f c1       	rjmp	.+542    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 85 14 	call	0x290a	; 0x290a <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	65 c0       	rjmp	.+202    	; 0x330 <prvTimerTask+0x12a>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     27e:	e0 91 52 17 	lds	r30, 0x1752	; 0x801752 <pxCurrentTimerList>
     282:	f0 91 53 17 	lds	r31, 0x1753	; 0x801753 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	03 d4       	rcall	.+2054   	; 0xaa0 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 95 13 	call	0x272a	; 0x272a <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 27 14 	call	0x284e	; 0x284e <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9f c0       	rjmp	.+318    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <xTimerQueue>
     31c:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <xTimerQueue+0x1>
     320:	0e 94 b6 09 	call	0x136c	; 0x136c <vQueueWaitForMessageRestricted>
     324:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     328:	81 11       	cpse	r24, r1
     32a:	8a c0       	rjmp	.+276    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     32c:	8e d4       	rcall	.+2332   	; 0xc4a <vPortYield>
     32e:	88 c0       	rjmp	.+272    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     330:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     334:	85 c0       	rjmp	.+266    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 23       	and	r24, r24
     33a:	0c f4       	brge	.+2      	; 0x33e <prvTimerTask+0x138>
     33c:	81 c0       	rjmp	.+258    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     33e:	4e 80       	ldd	r4, Y+6	; 0x06
     340:	5f 80       	ldd	r5, Y+7	; 0x07
     342:	d2 01       	movw	r26, r4
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	8d 91       	ld	r24, X+
     348:	9c 91       	ld	r25, X
     34a:	1d 97       	sbiw	r26, 0x0d	; 13
     34c:	89 2b       	or	r24, r25
     34e:	19 f0       	breq	.+6      	; 0x356 <prvTimerTask+0x150>
     350:	c2 01       	movw	r24, r4
     352:	02 96       	adiw	r24, 0x02	; 2
     354:	a5 d3       	rcall	.+1866   	; 0xaa0 <uxListRemove>
     356:	ce 01       	movw	r24, r28
     358:	08 96       	adiw	r24, 0x08	; 8
     35a:	0e 94 85 14 	call	0x290a	; 0x290a <prvSampleTimeNow>
     35e:	8b 01       	movw	r16, r22
     360:	9c 01       	movw	r18, r24
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	0e 2e       	mov	r0, r30
     366:	00 0c       	add	r0, r0
     368:	ff 0b       	sbc	r31, r31
     36a:	ea 30       	cpi	r30, 0x0A	; 10
     36c:	f1 05       	cpc	r31, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <prvTimerTask+0x16c>
     370:	67 c0       	rjmp	.+206    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     372:	88 27       	eor	r24, r24
     374:	ee 58       	subi	r30, 0x8E	; 142
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	8f 4f       	sbci	r24, 0xFF	; 255
     37a:	0c 94 b7 22 	jmp	0x456e	; 0x456e <__tablejump2__>
     37e:	f2 01       	movw	r30, r4
     380:	87 89       	ldd	r24, Z+23	; 0x17
     382:	81 60       	ori	r24, 0x01	; 1
     384:	87 8b       	std	Z+23, r24	; 0x17
     386:	ca 80       	ldd	r12, Y+2	; 0x02
     388:	db 80       	ldd	r13, Y+3	; 0x03
     38a:	ec 80       	ldd	r14, Y+4	; 0x04
     38c:	fd 80       	ldd	r15, Y+5	; 0x05
     38e:	46 85       	ldd	r20, Z+14	; 0x0e
     390:	57 85       	ldd	r21, Z+15	; 0x0f
     392:	60 89       	ldd	r22, Z+16	; 0x10
     394:	71 89       	ldd	r23, Z+17	; 0x11
     396:	4c 0d       	add	r20, r12
     398:	5d 1d       	adc	r21, r13
     39a:	6e 1d       	adc	r22, r14
     39c:	7f 1d       	adc	r23, r15
     39e:	c2 01       	movw	r24, r4
     3a0:	0e 94 95 13 	call	0x272a	; 0x272a <prvInsertTimerInActiveList>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <prvTimerTask+0x1a4>
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3aa:	d2 01       	movw	r26, r4
     3ac:	54 96       	adiw	r26, 0x14	; 20
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	55 97       	sbiw	r26, 0x15	; 21
     3b4:	c2 01       	movw	r24, r4
     3b6:	19 95       	eicall
     3b8:	f2 01       	movw	r30, r4
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	82 ff       	sbrs	r24, 2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c0:	4a 81       	ldd	r20, Y+2	; 0x02
     3c2:	5b 81       	ldd	r21, Y+3	; 0x03
     3c4:	6c 81       	ldd	r22, Y+4	; 0x04
     3c6:	7d 81       	ldd	r23, Y+5	; 0x05
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
     3cc:	a0 89       	ldd	r26, Z+16	; 0x10
     3ce:	b1 89       	ldd	r27, Z+17	; 0x11
     3d0:	9a 01       	movw	r18, r20
     3d2:	ab 01       	movw	r20, r22
     3d4:	28 0f       	add	r18, r24
     3d6:	39 1f       	adc	r19, r25
     3d8:	4a 1f       	adc	r20, r26
     3da:	5b 1f       	adc	r21, r27
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
     3e0:	ea 2c       	mov	r14, r10
     3e2:	fb 2c       	mov	r15, r11
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	c2 01       	movw	r24, r4
     3ec:	0e 94 27 14 	call	0x284e	; 0x284e <xTimerGenericCommand>
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f2:	d2 01       	movw	r26, r4
     3f4:	57 96       	adiw	r26, 0x17	; 23
     3f6:	8c 91       	ld	r24, X
     3f8:	57 97       	sbiw	r26, 0x17	; 23
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     402:	f2 01       	movw	r30, r4
     404:	87 89       	ldd	r24, Z+23	; 0x17
     406:	81 60       	ori	r24, 0x01	; 1
     408:	87 8b       	std	Z+23, r24	; 0x17
     40a:	4a 81       	ldd	r20, Y+2	; 0x02
     40c:	5b 81       	ldd	r21, Y+3	; 0x03
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	7d 81       	ldd	r23, Y+5	; 0x05
     412:	46 87       	std	Z+14, r20	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	60 8b       	std	Z+16, r22	; 0x10
     418:	71 8b       	std	Z+17, r23	; 0x11
     41a:	40 0f       	add	r20, r16
     41c:	51 1f       	adc	r21, r17
     41e:	62 1f       	adc	r22, r18
     420:	73 1f       	adc	r23, r19
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c2 01       	movw	r24, r4
     428:	0e 94 95 13 	call	0x272a	; 0x272a <prvInsertTimerInActiveList>
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	f2 01       	movw	r30, r4
     430:	87 89       	ldd	r24, Z+23	; 0x17
     432:	81 fd       	sbrc	r24, 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c2 01       	movw	r24, r4
     438:	8f d2       	rcall	.+1310   	; 0x958 <vPortFree>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	87 8b       	std	Z+23, r24	; 0x17
     440:	28 2d       	mov	r18, r8
     442:	39 2d       	mov	r19, r9
     444:	4a 2d       	mov	r20, r10
     446:	5b 2d       	mov	r21, r11
     448:	66 2d       	mov	r22, r6
     44a:	77 2d       	mov	r23, r7
     44c:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <xTimerQueue>
     450:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <xTimerQueue+0x1>
     454:	f6 d6       	rcall	.+3564   	; 0x1242 <xQueueReceive>
     456:	81 11       	cpse	r24, r1
     458:	6e cf       	rjmp	.-292    	; 0x336 <prvTimerTask+0x130>
     45a:	e9 ce       	rjmp	.-558    	; 0x22e <prvTimerTask+0x28>
     45c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <vTaskSuspendAll>
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 85 14 	call	0x290a	; 0x290a <prvSampleTimeNow>
     468:	6b 87       	std	Y+11, r22	; 0x0b
     46a:	7c 87       	std	Y+12, r23	; 0x0c
     46c:	8d 87       	std	Y+13, r24	; 0x0d
     46e:	9e 87       	std	Y+14, r25	; 0x0e
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	5d cf       	rjmp	.-326    	; 0x330 <prvTimerTask+0x12a>
     476:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <pxOverflowTimerList>
     47a:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <pxOverflowTimerList+0x1>
     47e:	80 81       	ld	r24, Z
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	81 11       	cpse	r24, r1
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	28 2c       	mov	r2, r8
     488:	39 2c       	mov	r3, r9
     48a:	4a 2c       	mov	r4, r10
     48c:	5b 2c       	mov	r5, r11
     48e:	3a cf       	rjmp	.-396    	; 0x304 <prvTimerTask+0xfe>

00000490 <__ctors_end>:
     490:	11 24       	eor	r1, r1
     492:	1f be       	out	0x3f, r1	; 63
     494:	cf ef       	ldi	r28, 0xFF	; 255
     496:	d1 e2       	ldi	r29, 0x21	; 33
     498:	de bf       	out	0x3e, r29	; 62
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	0c bf       	out	0x3c, r16	; 60

000004a0 <__do_copy_data>:
     4a0:	16 e0       	ldi	r17, 0x06	; 6
     4a2:	a0 e0       	ldi	r26, 0x00	; 0
     4a4:	b2 e0       	ldi	r27, 0x02	; 2
     4a6:	ea ef       	ldi	r30, 0xFA	; 250
     4a8:	fe e4       	ldi	r31, 0x4E	; 78
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	0b bf       	out	0x3b, r16	; 59
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__do_copy_data+0x14>
     4b0:	07 90       	elpm	r0, Z+
     4b2:	0d 92       	st	X+, r0
     4b4:	a6 3a       	cpi	r26, 0xA6	; 166
     4b6:	b1 07       	cpc	r27, r17
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__do_copy_data+0x10>

000004ba <__do_clear_bss>:
     4ba:	28 e1       	ldi	r18, 0x18	; 24
     4bc:	a6 ea       	ldi	r26, 0xA6	; 166
     4be:	b6 e0       	ldi	r27, 0x06	; 6
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
     4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
     4c4:	a1 3f       	cpi	r26, 0xF1	; 241
     4c6:	b2 07       	cpc	r27, r18
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
     4ca:	0e 94 81 15 	call	0x2b02	; 0x2b02 <main>
     4ce:	0c 94 7b 27 	jmp	0x4ef6	; 0x4ef6 <_exit>

000004d2 <__bad_interrupt>:
     4d2:	96 cd       	rjmp	.-1236   	; 0x0 <__vectors>

000004d4 <lora_UpLinkHandler_create>:


/*Check for the parameters*/

void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	xTaskCreate(
     4dc:	e1 2c       	mov	r14, r1
     4de:	f1 2c       	mov	r15, r1
     4e0:	08 2f       	mov	r16, r24
     4e2:	48 e8       	ldi	r20, 0x88	; 136
     4e4:	51 e0       	ldi	r21, 0x01	; 1
     4e6:	6d e3       	ldi	r22, 0x3D	; 61
     4e8:	72 e0       	ldi	r23, 0x02	; 2
     4ea:	86 e8       	ldi	r24, 0x86	; 134
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	08 95       	ret

000004fa <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 0c 19 	call	0x3218	; 0x3218 <lora_driver_reset_rn2483>
		vTaskDelay(2);
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 12 10 	call	0x2024	; 0x2024 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 0c 19 	call	0x3218	; 0x3218 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     522:	66 e9       	ldi	r22, 0x96	; 150
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 12 10 	call	0x2024	; 0x2024 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     52e:	0e 94 c2 18 	call	0x3184	; 0x3184 <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     538:	0e 94 20 19 	call	0x3240	; 0x3240 <lora_driver_rn2483_factory_reset>
     53c:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	86 e4       	ldi	r24, 0x46	; 70
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     550:	0e 94 9e 1a 	call	0x353c	; 0x353c <lora_driver_configure_to_eu868>
     554:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	89 e5       	ldi	r24, 0x59	; 89
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     568:	8c eb       	ldi	r24, 0xBC	; 188
     56a:	96 e0       	ldi	r25, 0x06	; 6
     56c:	0e 94 32 19 	call	0x3264	; 0x3264 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     570:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     574:	cc eb       	ldi	r28, 0xBC	; 188
     576:	d6 e0       	ldi	r29, 0x06	; 6
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	82 e7       	ldi	r24, 0x72	; 114
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 4e 19 	call	0x329c	; 0x329c <lora_driver_set_device_identifier>
     592:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	86 e8       	ldi	r24, 0x86	; 134
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     5aa:	ae 01       	movw	r20, r28
     5ac:	6b e9       	ldi	r22, 0x9B	; 155
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	8c eb       	ldi	r24, 0xBC	; 188
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <lora_driver_set_otaa_identity>
     5b8:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	8b e9       	ldi	r24, 0x9B	; 155
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	8c eb       	ldi	r24, 0xBC	; 188
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	8d ec       	ldi	r24, 0xCD	; 205
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     5e0:	0e 94 81 19 	call	0x3302	; 0x3302 <lora_driver_save_mac>
     5e4:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     5f8:	8d b7       	in	r24, 0x3d	; 61
     5fa:	9e b7       	in	r25, 0x3e	; 62
     5fc:	82 96       	adiw	r24, 0x22	; 34
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	9e bf       	out	0x3e, r25	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	8d bf       	out	0x3d, r24	; 61
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <lora_driver_set_adaptive_data_rate>
     60e:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	82 e1       	ldi	r24, 0x12	; 18
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     622:	84 ef       	ldi	r24, 0xF4	; 244
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 86 1a 	call	0x350c	; 0x350c <lora_driver_set_receive_delay>
     62a:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	8f 93       	push	r24
     636:	84 ef       	ldi	r24, 0xF4	; 244
     638:	8f 93       	push	r24
     63a:	83 e3       	ldi	r24, 0x33	; 51
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>
     646:	8d b7       	in	r24, 0x3d	; 61
     648:	9e b7       	in	r25, 0x3e	; 62
     64a:	0a 96       	adiw	r24, 0x0a	; 10
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	9e bf       	out	0x3e, r25	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	8d bf       	out	0x3d, r24	; 61
     656:	ca e0       	ldi	r28, 0x0A	; 10
     658:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     65a:	03 e5       	ldi	r16, 0x53	; 83
     65c:	13 e0       	ldi	r17, 0x03	; 3

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 87 19 	call	0x330e	; 0x330e <lora_driver_join>
     664:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     666:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	1f 93       	push	r17
     674:	0f 93       	push	r16
     676:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

		if ( rc != LoRa_ACCEPTED)
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	d8 16       	cp	r13, r24
     68a:	a9 f0       	breq	.+42     	; 0x6b6 <lora_UpLinkHandler_task+0x1bc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     692:	66 e3       	ldi	r22, 0x36	; 54
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 12 10 	call	0x2024	; 0x2024 <vTaskDelay>
     69e:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     6a0:	f1 f6       	brne	.-68     	; 0x65e <lora_UpLinkHandler_task+0x164>
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <lora_UpLinkHandler_task+0x1ae>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     6a4:	d2 d2       	rcall	.+1444   	; 0xc4a <vPortYield>
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <lora_UpLinkHandler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 77 17 	call	0x2eee	; 0x2eee <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	0e 94 41 17 	call	0x2e82	; 0x2e82 <led_fast_blink>
     6b4:	f7 cf       	rjmp	.-18     	; 0x6a4 <lora_UpLinkHandler_task+0x1aa>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <led_led_on>
		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     6bc:	00 e0       	ldi	r16, 0x00	; 0
     6be:	10 e0       	ldi	r17, 0x00	; 0
     6c0:	98 01       	movw	r18, r16
     6c2:	42 e3       	ldi	r20, 0x32	; 50
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	66 ea       	ldi	r22, 0xA6	; 166
     6c8:	76 e0       	ldi	r23, 0x06	; 6
     6ca:	c7 01       	movw	r24, r14
     6cc:	0e 94 11 0c 	call	0x1822	; 0x1822 <xStreamBufferReceive>
		
		//_uplink_payload = (_uplink_payload) &rxData;
		
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     6d6:	66 ea       	ldi	r22, 0xA6	; 166
     6d8:	76 e0       	ldi	r23, 0x06	; 6
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 b0 19 	call	0x3360	; 0x3360 <lora_driver_sent_upload_message>
     6e0:	0e 94 9d 1b 	call	0x373a	; 0x373a <lora_driver_map_return_code_to_text>
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	83 e7       	ldi	r24, 0x73	; 115
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>
	}
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	08 95       	ret

0000070c <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     70c:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     70e:	ce 01       	movw	r24, r28
     710:	f4 de       	rcall	.-536    	; 0x4fa <lora_UpLinkHandler_task>
			vTaskDelay(300000);
     712:	60 ee       	ldi	r22, 0xE0	; 224
     714:	73 e9       	ldi	r23, 0x93	; 147
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 12 10 	call	0x2024	; 0x2024 <vTaskDelay>
     71e:	f7 cf       	rjmp	.-18     	; 0x70e <lora_UpLinkHandler_startTask+0x2>

00000720 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     720:	e7 e0       	ldi	r30, 0x07	; 7
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	80 81       	ld	r24, Z
     726:	8f 60       	ori	r24, 0x0F	; 15
     728:	80 83       	st	Z, r24
     72a:	08 95       	ret

0000072c <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     72c:	e8 e0       	ldi	r30, 0x08	; 8
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	90 81       	ld	r25, Z
     732:	90 7f       	andi	r25, 0xF0	; 240
     734:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     736:	90 81       	ld	r25, Z
     738:	8f 70       	andi	r24, 0x0F	; 15
     73a:	98 2b       	or	r25, r24
     73c:	90 83       	st	Z, r25
     73e:	08 95       	ret

00000740 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     740:	e8 e0       	ldi	r30, 0x08	; 8
     742:	f1 e0       	ldi	r31, 0x01	; 1
     744:	80 81       	ld	r24, Z
     746:	80 7f       	andi	r24, 0xF0	; 240
     748:	80 83       	st	Z, r24
     74a:	08 95       	ret

0000074c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     752:	e8 e2       	ldi	r30, 0x28	; 40
     754:	f7 e0       	ldi	r31, 0x07	; 7
     756:	01 c0       	rjmp	.+2      	; 0x75a <prvInsertBlockIntoFreeList+0xe>
     758:	f9 01       	movw	r30, r18
     75a:	20 81       	ld	r18, Z
     75c:	31 81       	ldd	r19, Z+1	; 0x01
     75e:	2a 17       	cp	r18, r26
     760:	3b 07       	cpc	r19, r27
     762:	d0 f3       	brcs	.-12     	; 0x758 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	af 01       	movw	r20, r30
     76a:	48 0f       	add	r20, r24
     76c:	59 1f       	adc	r21, r25
     76e:	a4 17       	cp	r26, r20
     770:	b5 07       	cpc	r27, r21
     772:	49 f4       	brne	.+18     	; 0x786 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	4d 91       	ld	r20, X+
     778:	5c 91       	ld	r21, X
     77a:	13 97       	sbiw	r26, 0x03	; 3
     77c:	84 0f       	add	r24, r20
     77e:	95 1f       	adc	r25, r21
     780:	93 83       	std	Z+3, r25	; 0x03
     782:	82 83       	std	Z+2, r24	; 0x02
     784:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	8d 91       	ld	r24, X+
     78a:	9c 91       	ld	r25, X
     78c:	13 97       	sbiw	r26, 0x03	; 3
     78e:	ed 01       	movw	r28, r26
     790:	c8 0f       	add	r28, r24
     792:	d9 1f       	adc	r29, r25
     794:	2c 17       	cp	r18, r28
     796:	3d 07       	cpc	r19, r29
     798:	d9 f4       	brne	.+54     	; 0x7d0 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     79a:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <pxEnd>
     79e:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <pxEnd+0x1>
     7a2:	c2 17       	cp	r28, r18
     7a4:	d3 07       	cpc	r29, r19
     7a6:	81 f0       	breq	.+32     	; 0x7c8 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7a8:	2a 81       	ldd	r18, Y+2	; 0x02
     7aa:	3b 81       	ldd	r19, Y+3	; 0x03
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	13 96       	adiw	r26, 0x03	; 3
     7b2:	9c 93       	st	X, r25
     7b4:	8e 93       	st	-X, r24
     7b6:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7b8:	c0 81       	ld	r28, Z
     7ba:	d1 81       	ldd	r29, Z+1	; 0x01
     7bc:	88 81       	ld	r24, Y
     7be:	99 81       	ldd	r25, Y+1	; 0x01
     7c0:	11 96       	adiw	r26, 0x01	; 1
     7c2:	9c 93       	st	X, r25
     7c4:	8e 93       	st	-X, r24
     7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7c8:	11 96       	adiw	r26, 0x01	; 1
     7ca:	dc 93       	st	X, r29
     7cc:	ce 93       	st	-X, r28
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7d0:	11 96       	adiw	r26, 0x01	; 1
     7d2:	3c 93       	st	X, r19
     7d4:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     7d6:	ae 17       	cp	r26, r30
     7d8:	bf 07       	cpc	r27, r31
     7da:	11 f0       	breq	.+4      	; 0x7e0 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7dc:	b1 83       	std	Z+1, r27	; 0x01
     7de:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     7f8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     7fc:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxEnd>
     800:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxEnd+0x1>
     804:	89 2b       	or	r24, r25
     806:	41 f5       	brne	.+80     	; 0x858 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     808:	e8 e2       	ldi	r30, 0x28	; 40
     80a:	f7 e0       	ldi	r31, 0x07	; 7
     80c:	ac e2       	ldi	r26, 0x2C	; 44
     80e:	b7 e0       	ldi	r27, 0x07	; 7
     810:	b1 83       	std	Z+1, r27	; 0x01
     812:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     814:	13 82       	std	Z+3, r1	; 0x03
     816:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     818:	e8 ec       	ldi	r30, 0xC8	; 200
     81a:	f6 e1       	ldi	r31, 0x16	; 22
     81c:	f0 93 27 07 	sts	0x0727, r31	; 0x800727 <pxEnd+0x1>
     820:	e0 93 26 07 	sts	0x0726, r30	; 0x800726 <pxEnd>
	pxEnd->xBlockSize = 0;
     824:	13 82       	std	Z+3, r1	; 0x03
     826:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     828:	11 82       	std	Z+1, r1	; 0x01
     82a:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     82c:	8c e9       	ldi	r24, 0x9C	; 156
     82e:	9f e0       	ldi	r25, 0x0F	; 15
     830:	13 96       	adiw	r26, 0x03	; 3
     832:	9c 93       	st	X, r25
     834:	8e 93       	st	-X, r24
     836:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     838:	ed 93       	st	X+, r30
     83a:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     83c:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <xMinimumEverFreeBytesRemaining+0x1>
     840:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     844:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <xFreeBytesRemaining+0x1>
     848:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e8       	ldi	r25, 0x80	; 128
     850:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <xBlockAllocatedBit+0x1>
     854:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     858:	e0 90 20 07 	lds	r14, 0x0720	; 0x800720 <xBlockAllocatedBit>
     85c:	f0 90 21 07 	lds	r15, 0x0721	; 0x800721 <xBlockAllocatedBit+0x1>
     860:	c7 01       	movw	r24, r14
     862:	8c 23       	and	r24, r28
     864:	9d 23       	and	r25, r29
     866:	89 2b       	or	r24, r25
     868:	09 f0       	breq	.+2      	; 0x86c <pvPortMalloc+0x86>
     86a:	66 c0       	rjmp	.+204    	; 0x938 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     86c:	20 97       	sbiw	r28, 0x00	; 0
     86e:	09 f4       	brne	.+2      	; 0x872 <pvPortMalloc+0x8c>
     870:	66 c0       	rjmp	.+204    	; 0x93e <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     872:	ae 01       	movw	r20, r28
     874:	4c 5f       	subi	r20, 0xFC	; 252
     876:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     878:	09 f4       	brne	.+2      	; 0x87c <pvPortMalloc+0x96>
     87a:	5e c0       	rjmp	.+188    	; 0x938 <pvPortMalloc+0x152>
     87c:	00 91 24 07 	lds	r16, 0x0724	; 0x800724 <xFreeBytesRemaining>
     880:	10 91 25 07 	lds	r17, 0x0725	; 0x800725 <xFreeBytesRemaining+0x1>
     884:	04 17       	cp	r16, r20
     886:	15 07       	cpc	r17, r21
     888:	08 f4       	brcc	.+2      	; 0x88c <pvPortMalloc+0xa6>
     88a:	56 c0       	rjmp	.+172    	; 0x938 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     88c:	c0 91 28 07 	lds	r28, 0x0728	; 0x800728 <xStart>
     890:	d0 91 29 07 	lds	r29, 0x0729	; 0x800729 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     894:	e8 e2       	ldi	r30, 0x28	; 40
     896:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     898:	02 c0       	rjmp	.+4      	; 0x89e <pvPortMalloc+0xb8>
     89a:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     89c:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     89e:	2a 81       	ldd	r18, Y+2	; 0x02
     8a0:	3b 81       	ldd	r19, Y+3	; 0x03
     8a2:	24 17       	cp	r18, r20
     8a4:	35 07       	cpc	r19, r21
     8a6:	28 f4       	brcc	.+10     	; 0x8b2 <pvPortMalloc+0xcc>
     8a8:	28 81       	ld	r18, Y
     8aa:	39 81       	ldd	r19, Y+1	; 0x01
     8ac:	21 15       	cp	r18, r1
     8ae:	31 05       	cpc	r19, r1
     8b0:	a1 f7       	brne	.-24     	; 0x89a <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     8b2:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxEnd>
     8b6:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxEnd+0x1>
     8ba:	c8 17       	cp	r28, r24
     8bc:	d9 07       	cpc	r29, r25
     8be:	e1 f1       	breq	.+120    	; 0x938 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     8c0:	c0 80       	ld	r12, Z
     8c2:	d1 80       	ldd	r13, Z+1	; 0x01
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	c8 0e       	add	r12, r24
     8c8:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     8ca:	88 81       	ld	r24, Y
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8d2:	2a 81       	ldd	r18, Y+2	; 0x02
     8d4:	3b 81       	ldd	r19, Y+3	; 0x03
     8d6:	24 1b       	sub	r18, r20
     8d8:	35 0b       	sbc	r19, r21
     8da:	29 30       	cpi	r18, 0x09	; 9
     8dc:	31 05       	cpc	r19, r1
     8de:	48 f0       	brcs	.+18     	; 0x8f2 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8e0:	ce 01       	movw	r24, r28
     8e2:	84 0f       	add	r24, r20
     8e4:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8e6:	fc 01       	movw	r30, r24
     8e8:	33 83       	std	Z+3, r19	; 0x03
     8ea:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     8ec:	5b 83       	std	Y+3, r21	; 0x03
     8ee:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     8f0:	2d df       	rcall	.-422    	; 0x74c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	9b 81       	ldd	r25, Y+3	; 0x03
     8f6:	08 1b       	sub	r16, r24
     8f8:	19 0b       	sbc	r17, r25
     8fa:	10 93 25 07 	sts	0x0725, r17	; 0x800725 <xFreeBytesRemaining+0x1>
     8fe:	00 93 24 07 	sts	0x0724, r16	; 0x800724 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     902:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <xMinimumEverFreeBytesRemaining>
     906:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <xMinimumEverFreeBytesRemaining+0x1>
     90a:	02 17       	cp	r16, r18
     90c:	13 07       	cpc	r17, r19
     90e:	20 f4       	brcc	.+8      	; 0x918 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     910:	10 93 23 07 	sts	0x0723, r17	; 0x800723 <xMinimumEverFreeBytesRemaining+0x1>
     914:	00 93 22 07 	sts	0x0722, r16	; 0x800722 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	fb 82       	std	Y+3, r15	; 0x03
     91e:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     920:	19 82       	std	Y+1, r1	; 0x01
     922:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     924:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     928:	c1 14       	cp	r12, r1
     92a:	d1 04       	cpc	r13, r1
     92c:	59 f4       	brne	.+22     	; 0x944 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     92e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <vApplicationMallocFailedHook>
     932:	c1 2c       	mov	r12, r1
     934:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     936:	06 c0       	rjmp	.+12     	; 0x944 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     938:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     93c:	f8 cf       	rjmp	.-16     	; 0x92e <pvPortMalloc+0x148>
     93e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     942:	f5 cf       	rjmp	.-22     	; 0x92e <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     944:	c6 01       	movw	r24, r12
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret

00000958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	51 f1       	breq	.+84     	; 0x9b4 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     960:	fc 01       	movw	r30, r24
     962:	34 97       	sbiw	r30, 0x04	; 4
     964:	22 81       	ldd	r18, Z+2	; 0x02
     966:	33 81       	ldd	r19, Z+3	; 0x03
     968:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <xBlockAllocatedBit>
     96c:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <xBlockAllocatedBit+0x1>
     970:	b9 01       	movw	r22, r18
     972:	64 23       	and	r22, r20
     974:	75 23       	and	r23, r21
     976:	67 2b       	or	r22, r23
     978:	e9 f0       	breq	.+58     	; 0x9b4 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     97a:	60 81       	ld	r22, Z
     97c:	71 81       	ldd	r23, Z+1	; 0x01
     97e:	67 2b       	or	r22, r23
     980:	c9 f4       	brne	.+50     	; 0x9b4 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     982:	ef 01       	movw	r28, r30
     984:	40 95       	com	r20
     986:	50 95       	com	r21
     988:	24 23       	and	r18, r20
     98a:	35 23       	and	r19, r21
     98c:	33 83       	std	Z+3, r19	; 0x03
     98e:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     990:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     994:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <xFreeBytesRemaining>
     998:	30 91 25 07 	lds	r19, 0x0725	; 0x800725 <xFreeBytesRemaining+0x1>
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	9b 81       	ldd	r25, Y+3	; 0x03
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <xFreeBytesRemaining+0x1>
     9a8:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     9ac:	ce 01       	movw	r24, r28
     9ae:	ce de       	rcall	.-612    	; 0x74c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     9b0:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     9ba:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9bc:	03 96       	adiw	r24, 0x03	; 3
     9be:	92 83       	std	Z+2, r25	; 0x02
     9c0:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     9c2:	4f ef       	ldi	r20, 0xFF	; 255
     9c4:	5f ef       	ldi	r21, 0xFF	; 255
     9c6:	ba 01       	movw	r22, r20
     9c8:	43 83       	std	Z+3, r20	; 0x03
     9ca:	54 83       	std	Z+4, r21	; 0x04
     9cc:	65 83       	std	Z+5, r22	; 0x05
     9ce:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9d0:	90 87       	std	Z+8, r25	; 0x08
     9d2:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9d4:	92 87       	std	Z+10, r25	; 0x0a
     9d6:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     9d8:	10 82       	st	Z, r1
     9da:	08 95       	ret

000009dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     9dc:	fc 01       	movw	r30, r24
     9de:	13 86       	std	Z+11, r1	; 0x0b
     9e0:	12 86       	std	Z+10, r1	; 0x0a
     9e2:	08 95       	ret

000009e4 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	9c 01       	movw	r18, r24
     9ea:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     9ec:	dc 01       	movw	r26, r24
     9ee:	11 96       	adiw	r26, 0x01	; 1
     9f0:	cd 91       	ld	r28, X+
     9f2:	dc 91       	ld	r29, X
     9f4:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     9f6:	d5 83       	std	Z+5, r29	; 0x05
     9f8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     9fa:	8e 81       	ldd	r24, Y+6	; 0x06
     9fc:	9f 81       	ldd	r25, Y+7	; 0x07
     9fe:	97 83       	std	Z+7, r25	; 0x07
     a00:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     a02:	8e 81       	ldd	r24, Y+6	; 0x06
     a04:	9f 81       	ldd	r25, Y+7	; 0x07
     a06:	dc 01       	movw	r26, r24
     a08:	15 96       	adiw	r26, 0x05	; 5
     a0a:	7c 93       	st	X, r23
     a0c:	6e 93       	st	-X, r22
     a0e:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     a10:	7f 83       	std	Y+7, r23	; 0x07
     a12:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     a14:	33 87       	std	Z+11, r19	; 0x0b
     a16:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a18:	f9 01       	movw	r30, r18
     a1a:	80 81       	ld	r24, Z
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 83       	st	Z, r24
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a30:	08 81       	ld	r16, Y
     a32:	19 81       	ldd	r17, Y+1	; 0x01
     a34:	2a 81       	ldd	r18, Y+2	; 0x02
     a36:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a38:	0f 3f       	cpi	r16, 0xFF	; 255
     a3a:	4f ef       	ldi	r20, 0xFF	; 255
     a3c:	14 07       	cpc	r17, r20
     a3e:	24 07       	cpc	r18, r20
     a40:	34 07       	cpc	r19, r20
     a42:	21 f4       	brne	.+8      	; 0xa4c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a44:	fc 01       	movw	r30, r24
     a46:	a1 85       	ldd	r26, Z+9	; 0x09
     a48:	b2 85       	ldd	r27, Z+10	; 0x0a
     a4a:	11 c0       	rjmp	.+34     	; 0xa6e <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a4c:	dc 01       	movw	r26, r24
     a4e:	13 96       	adiw	r26, 0x03	; 3
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <vListInsert+0x2e>
     a52:	df 01       	movw	r26, r30
     a54:	14 96       	adiw	r26, 0x04	; 4
     a56:	ed 91       	ld	r30, X+
     a58:	fc 91       	ld	r31, X
     a5a:	15 97       	sbiw	r26, 0x05	; 5
     a5c:	40 81       	ld	r20, Z
     a5e:	51 81       	ldd	r21, Z+1	; 0x01
     a60:	62 81       	ldd	r22, Z+2	; 0x02
     a62:	73 81       	ldd	r23, Z+3	; 0x03
     a64:	04 17       	cp	r16, r20
     a66:	15 07       	cpc	r17, r21
     a68:	26 07       	cpc	r18, r22
     a6a:	37 07       	cpc	r19, r23
     a6c:	90 f7       	brcc	.-28     	; 0xa52 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a6e:	14 96       	adiw	r26, 0x04	; 4
     a70:	ed 91       	ld	r30, X+
     a72:	fc 91       	ld	r31, X
     a74:	15 97       	sbiw	r26, 0x05	; 5
     a76:	fd 83       	std	Y+5, r31	; 0x05
     a78:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a7a:	d7 83       	std	Z+7, r29	; 0x07
     a7c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a7e:	bf 83       	std	Y+7, r27	; 0x07
     a80:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a82:	15 96       	adiw	r26, 0x05	; 5
     a84:	dc 93       	st	X, r29
     a86:	ce 93       	st	-X, r28
     a88:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a8a:	9b 87       	std	Y+11, r25	; 0x0b
     a8c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a8e:	fc 01       	movw	r30, r24
     a90:	20 81       	ld	r18, Z
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	20 83       	st	Z, r18
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     aa6:	a2 85       	ldd	r26, Z+10	; 0x0a
     aa8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     aaa:	c4 81       	ldd	r28, Z+4	; 0x04
     aac:	d5 81       	ldd	r29, Z+5	; 0x05
     aae:	86 81       	ldd	r24, Z+6	; 0x06
     ab0:	97 81       	ldd	r25, Z+7	; 0x07
     ab2:	9f 83       	std	Y+7, r25	; 0x07
     ab4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ab6:	c6 81       	ldd	r28, Z+6	; 0x06
     ab8:	d7 81       	ldd	r29, Z+7	; 0x07
     aba:	84 81       	ldd	r24, Z+4	; 0x04
     abc:	95 81       	ldd	r25, Z+5	; 0x05
     abe:	9d 83       	std	Y+5, r25	; 0x05
     ac0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	8d 91       	ld	r24, X+
     ac6:	9c 91       	ld	r25, X
     ac8:	12 97       	sbiw	r26, 0x02	; 2
     aca:	e8 17       	cp	r30, r24
     acc:	f9 07       	cpc	r31, r25
     ace:	31 f4       	brne	.+12     	; 0xadc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ad0:	86 81       	ldd	r24, Z+6	; 0x06
     ad2:	97 81       	ldd	r25, Z+7	; 0x07
     ad4:	12 96       	adiw	r26, 0x02	; 2
     ad6:	9c 93       	st	X, r25
     ad8:	8e 93       	st	-X, r24
     ada:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     adc:	13 86       	std	Z+11, r1	; 0x0b
     ade:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     ae0:	8c 91       	ld	r24, X
     ae2:	81 50       	subi	r24, 0x01	; 1
     ae4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ae6:	8c 91       	ld	r24, X
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     aee:	31 e1       	ldi	r19, 0x11	; 17
     af0:	fc 01       	movw	r30, r24
     af2:	30 83       	st	Z, r19
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	22 e2       	ldi	r18, 0x22	; 34
     af8:	20 83       	st	Z, r18
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	a3 e3       	ldi	r26, 0x33	; 51
     afe:	a0 83       	st	Z, r26
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	60 83       	st	Z, r22
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	70 83       	st	Z, r23
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	10 82       	st	Z, r1
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	10 82       	st	Z, r1
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	60 e8       	ldi	r22, 0x80	; 128
     b14:	60 83       	st	Z, r22
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	10 82       	st	Z, r1
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	10 82       	st	Z, r1
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	10 82       	st	Z, r1
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	62 e0       	ldi	r22, 0x02	; 2
     b26:	60 83       	st	Z, r22
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	63 e0       	ldi	r22, 0x03	; 3
     b2c:	60 83       	st	Z, r22
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	64 e0       	ldi	r22, 0x04	; 4
     b32:	60 83       	st	Z, r22
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	65 e0       	ldi	r22, 0x05	; 5
     b38:	60 83       	st	Z, r22
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	66 e0       	ldi	r22, 0x06	; 6
     b3e:	60 83       	st	Z, r22
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	67 e0       	ldi	r22, 0x07	; 7
     b44:	60 83       	st	Z, r22
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	68 e0       	ldi	r22, 0x08	; 8
     b4a:	60 83       	st	Z, r22
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	69 e0       	ldi	r22, 0x09	; 9
     b50:	60 83       	st	Z, r22
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	60 e1       	ldi	r22, 0x10	; 16
     b56:	60 83       	st	Z, r22
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	30 83       	st	Z, r19
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	32 e1       	ldi	r19, 0x12	; 18
     b60:	30 83       	st	Z, r19
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	33 e1       	ldi	r19, 0x13	; 19
     b66:	30 83       	st	Z, r19
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	34 e1       	ldi	r19, 0x14	; 20
     b6c:	30 83       	st	Z, r19
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	35 e1       	ldi	r19, 0x15	; 21
     b72:	30 83       	st	Z, r19
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	36 e1       	ldi	r19, 0x16	; 22
     b78:	30 83       	st	Z, r19
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	37 e1       	ldi	r19, 0x17	; 23
     b7e:	30 83       	st	Z, r19
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	38 e1       	ldi	r19, 0x18	; 24
     b84:	30 83       	st	Z, r19
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	39 e1       	ldi	r19, 0x19	; 25
     b8a:	30 83       	st	Z, r19
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	30 e2       	ldi	r19, 0x20	; 32
     b90:	30 83       	st	Z, r19
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	31 e2       	ldi	r19, 0x21	; 33
     b96:	30 83       	st	Z, r19
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	20 83       	st	Z, r18
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	23 e2       	ldi	r18, 0x23	; 35
     ba0:	20 83       	st	Z, r18
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	40 83       	st	Z, r20
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	50 83       	st	Z, r21
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	26 e2       	ldi	r18, 0x26	; 38
     bae:	20 83       	st	Z, r18
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	27 e2       	ldi	r18, 0x27	; 39
     bb4:	20 83       	st	Z, r18
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	28 e2       	ldi	r18, 0x28	; 40
     bba:	20 83       	st	Z, r18
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	29 e2       	ldi	r18, 0x29	; 41
     bc0:	20 83       	st	Z, r18
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	20 e3       	ldi	r18, 0x30	; 48
     bc6:	20 83       	st	Z, r18
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	21 e3       	ldi	r18, 0x31	; 49
     bcc:	20 83       	st	Z, r18
     bce:	89 97       	sbiw	r24, 0x29	; 41
     bd0:	08 95       	ret

00000bd2 <xPortStartScheduler>:
     bd2:	a8 95       	wdr
     bd4:	90 ec       	ldi	r25, 0xC0	; 192
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	a8 95       	wdr
     bde:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     be8:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <pxCurrentTCB>
     bec:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
     bf0:	cd 91       	ld	r28, X+
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	dd 91       	ld	r29, X+
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	ff 91       	pop	r31
     bfa:	ef 91       	pop	r30
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	1f 90       	pop	r1
     c36:	0f 90       	pop	r0
     c38:	0c be       	out	0x3c, r0	; 60
     c3a:	0f 90       	pop	r0
     c3c:	0b be       	out	0x3b, r0	; 59
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	08 95       	ret
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	08 95       	ret

00000c4a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	0f 92       	push	r0
     c52:	0b b6       	in	r0, 0x3b	; 59
     c54:	0f 92       	push	r0
     c56:	0c b6       	in	r0, 0x3c	; 60
     c58:	0f 92       	push	r0
     c5a:	1f 92       	push	r1
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 92       	push	r2
     c60:	3f 92       	push	r3
     c62:	4f 92       	push	r4
     c64:	5f 92       	push	r5
     c66:	6f 92       	push	r6
     c68:	7f 92       	push	r7
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <pxCurrentTCB>
     c9e:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
     ca2:	0d b6       	in	r0, 0x3d	; 61
     ca4:	0d 92       	st	X+, r0
     ca6:	0e b6       	in	r0, 0x3e	; 62
     ca8:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     caa:	0e 94 2b 10 	call	0x2056	; 0x2056 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     cae:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <pxCurrentTCB>
     cb2:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
     cb6:	cd 91       	ld	r28, X+
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	dd 91       	ld	r29, X+
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	1f 90       	pop	r1
     cfc:	0f 90       	pop	r0
     cfe:	0c be       	out	0x3c, r0	; 60
     d00:	0f 90       	pop	r0
     d02:	0b be       	out	0x3b, r0	; 59
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d0a:	08 95       	ret

00000d0c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	0f 92       	push	r0
     d14:	0b b6       	in	r0, 0x3b	; 59
     d16:	0f 92       	push	r0
     d18:	0c b6       	in	r0, 0x3c	; 60
     d1a:	0f 92       	push	r0
     d1c:	1f 92       	push	r1
     d1e:	11 24       	eor	r1, r1
     d20:	2f 92       	push	r2
     d22:	3f 92       	push	r3
     d24:	4f 92       	push	r4
     d26:	5f 92       	push	r5
     d28:	6f 92       	push	r6
     d2a:	7f 92       	push	r7
     d2c:	8f 92       	push	r8
     d2e:	9f 92       	push	r9
     d30:	af 92       	push	r10
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
     d5c:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <pxCurrentTCB>
     d60:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
     d64:	0d b6       	in	r0, 0x3d	; 61
     d66:	0d 92       	st	X+, r0
     d68:	0e b6       	in	r0, 0x3e	; 62
     d6a:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     d6c:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     d6e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <xTaskIncrementTick>
     d72:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d74:	0e 94 2b 10 	call	0x2056	; 0x2056 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     d78:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <pxCurrentTCB>
     d7c:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
     d80:	cd 91       	ld	r28, X+
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	dd 91       	ld	r29, X+
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	9f 90       	pop	r9
     db6:	8f 90       	pop	r8
     db8:	7f 90       	pop	r7
     dba:	6f 90       	pop	r6
     dbc:	5f 90       	pop	r5
     dbe:	4f 90       	pop	r4
     dc0:	3f 90       	pop	r3
     dc2:	2f 90       	pop	r2
     dc4:	1f 90       	pop	r1
     dc6:	0f 90       	pop	r0
     dc8:	0c be       	out	0x3c, r0	; 60
     dca:	0f 90       	pop	r0
     dcc:	0b be       	out	0x3b, r0	; 59
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     dd4:	08 95       	ret

00000dd6 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     dd6:	9a df       	rcall	.-204    	; 0xd0c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     dd8:	18 95       	reti

00000dda <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	0f 92       	push	r0
     de0:	fc 01       	movw	r30, r24
     de2:	96 8d       	ldd	r25, Z+30	; 0x1e
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	91 11       	cpse	r25, r1
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret

00000df0 <prvCopyDataToQueue>:
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	04 2f       	mov	r16, r20
     dfc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     dfe:	48 a1       	ldd	r20, Y+32	; 0x20
     e00:	41 11       	cpse	r20, r1
     e02:	0c c0       	rjmp	.+24     	; 0xe1c <prvCopyDataToQueue+0x2c>
     e04:	88 81       	ld	r24, Y
     e06:	99 81       	ldd	r25, Y+1	; 0x01
     e08:	89 2b       	or	r24, r25
     e0a:	09 f0       	breq	.+2      	; 0xe0e <prvCopyDataToQueue+0x1e>
     e0c:	42 c0       	rjmp	.+132    	; 0xe92 <prvCopyDataToQueue+0xa2>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
     e12:	0e 94 b6 11 	call	0x236c	; 0x236c <xTaskPriorityDisinherit>
     e16:	1d 82       	std	Y+5, r1	; 0x05
     e18:	1c 82       	std	Y+4, r1	; 0x04
     e1a:	42 c0       	rjmp	.+132    	; 0xea0 <prvCopyDataToQueue+0xb0>
     e1c:	01 11       	cpse	r16, r1
     e1e:	17 c0       	rjmp	.+46     	; 0xe4e <prvCopyDataToQueue+0x5e>
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
     e26:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memcpy>
     e2a:	28 a1       	ldd	r18, Y+32	; 0x20
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	82 0f       	add	r24, r18
     e32:	91 1d       	adc	r25, r1
     e34:	9b 83       	std	Y+3, r25	; 0x03
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	2c 81       	ldd	r18, Y+4	; 0x04
     e3a:	3d 81       	ldd	r19, Y+5	; 0x05
     e3c:	82 17       	cp	r24, r18
     e3e:	93 07       	cpc	r25, r19
     e40:	50 f1       	brcs	.+84     	; 0xe96 <prvCopyDataToQueue+0xa6>
     e42:	88 81       	ld	r24, Y
     e44:	99 81       	ldd	r25, Y+1	; 0x01
     e46:	9b 83       	std	Y+3, r25	; 0x03
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	29 c0       	rjmp	.+82     	; 0xea0 <prvCopyDataToQueue+0xb0>
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	8e 81       	ldd	r24, Y+6	; 0x06
     e52:	9f 81       	ldd	r25, Y+7	; 0x07
     e54:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memcpy>
     e58:	88 a1       	ldd	r24, Y+32	; 0x20
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	91 95       	neg	r25
     e5e:	81 95       	neg	r24
     e60:	91 09       	sbc	r25, r1
     e62:	2e 81       	ldd	r18, Y+6	; 0x06
     e64:	3f 81       	ldd	r19, Y+7	; 0x07
     e66:	28 0f       	add	r18, r24
     e68:	39 1f       	adc	r19, r25
     e6a:	3f 83       	std	Y+7, r19	; 0x07
     e6c:	2e 83       	std	Y+6, r18	; 0x06
     e6e:	48 81       	ld	r20, Y
     e70:	59 81       	ldd	r21, Y+1	; 0x01
     e72:	24 17       	cp	r18, r20
     e74:	35 07       	cpc	r19, r21
     e76:	30 f4       	brcc	.+12     	; 0xe84 <prvCopyDataToQueue+0x94>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	9f 83       	std	Y+7, r25	; 0x07
     e82:	8e 83       	std	Y+6, r24	; 0x06
     e84:	02 30       	cpi	r16, 0x02	; 2
     e86:	49 f4       	brne	.+18     	; 0xe9a <prvCopyDataToQueue+0xaa>
     e88:	11 23       	and	r17, r17
     e8a:	49 f0       	breq	.+18     	; 0xe9e <prvCopyDataToQueue+0xae>
     e8c:	11 50       	subi	r17, 0x01	; 1
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <prvCopyDataToQueue+0xb0>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <prvCopyDataToQueue+0xb0>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <prvCopyDataToQueue+0xb0>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <prvCopyDataToQueue+0xb0>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	1f 5f       	subi	r17, 0xFF	; 255
     ea2:	1e 8f       	std	Y+30, r17	; 0x1e
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	08 95       	ret

00000eae <prvCopyDataFromQueue>:
     eae:	fc 01       	movw	r30, r24
     eb0:	40 a1       	ldd	r20, Z+32	; 0x20
     eb2:	44 23       	and	r20, r20
     eb4:	a9 f0       	breq	.+42     	; 0xee0 <prvCopyDataFromQueue+0x32>
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	26 81       	ldd	r18, Z+6	; 0x06
     eba:	37 81       	ldd	r19, Z+7	; 0x07
     ebc:	24 0f       	add	r18, r20
     ebe:	35 1f       	adc	r19, r21
     ec0:	37 83       	std	Z+7, r19	; 0x07
     ec2:	26 83       	std	Z+6, r18	; 0x06
     ec4:	84 81       	ldd	r24, Z+4	; 0x04
     ec6:	95 81       	ldd	r25, Z+5	; 0x05
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	20 f0       	brcs	.+8      	; 0xed6 <prvCopyDataFromQueue+0x28>
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	97 83       	std	Z+7, r25	; 0x07
     ed4:	86 83       	std	Z+6, r24	; 0x06
     ed6:	cb 01       	movw	r24, r22
     ed8:	66 81       	ldd	r22, Z+6	; 0x06
     eda:	77 81       	ldd	r23, Z+7	; 0x07
     edc:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <memcpy>
     ee0:	08 95       	ret

00000ee2 <prvUnlockQueue>:
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	8c 01       	movw	r16, r24
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	0f 92       	push	r0
     ef4:	fc 01       	movw	r30, r24
     ef6:	c2 a1       	ldd	r28, Z+34	; 0x22
     ef8:	1c 16       	cp	r1, r28
     efa:	ac f4       	brge	.+42     	; 0xf26 <prvUnlockQueue+0x44>
     efc:	83 89       	ldd	r24, Z+19	; 0x13
     efe:	81 11       	cpse	r24, r1
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <prvUnlockQueue+0x2c>
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <prvUnlockQueue+0x44>
     f04:	f8 01       	movw	r30, r16
     f06:	83 89       	ldd	r24, Z+19	; 0x13
     f08:	81 11       	cpse	r24, r1
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <prvUnlockQueue+0x34>
     f0c:	0c c0       	rjmp	.+24     	; 0xf26 <prvUnlockQueue+0x44>
     f0e:	78 01       	movw	r14, r16
     f10:	f3 e1       	ldi	r31, 0x13	; 19
     f12:	ef 0e       	add	r14, r31
     f14:	f1 1c       	adc	r15, r1
     f16:	c7 01       	movw	r24, r14
     f18:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xTaskRemoveFromEventList>
     f1c:	81 11       	cpse	r24, r1
     f1e:	0e 94 9f 11 	call	0x233e	; 0x233e <vTaskMissedYield>
     f22:	c1 50       	subi	r28, 0x01	; 1
     f24:	79 f7       	brne	.-34     	; 0xf04 <prvUnlockQueue+0x22>
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	f8 01       	movw	r30, r16
     f2a:	82 a3       	std	Z+34, r24	; 0x22
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	0f 92       	push	r0
     f36:	c1 a1       	ldd	r28, Z+33	; 0x21
     f38:	1c 16       	cp	r1, r28
     f3a:	ac f4       	brge	.+42     	; 0xf66 <prvUnlockQueue+0x84>
     f3c:	80 85       	ldd	r24, Z+8	; 0x08
     f3e:	81 11       	cpse	r24, r1
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <prvUnlockQueue+0x6c>
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <prvUnlockQueue+0x84>
     f44:	f8 01       	movw	r30, r16
     f46:	80 85       	ldd	r24, Z+8	; 0x08
     f48:	81 11       	cpse	r24, r1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <prvUnlockQueue+0x74>
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <prvUnlockQueue+0x84>
     f4e:	78 01       	movw	r14, r16
     f50:	f8 e0       	ldi	r31, 0x08	; 8
     f52:	ef 0e       	add	r14, r31
     f54:	f1 1c       	adc	r15, r1
     f56:	c7 01       	movw	r24, r14
     f58:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xTaskRemoveFromEventList>
     f5c:	81 11       	cpse	r24, r1
     f5e:	0e 94 9f 11 	call	0x233e	; 0x233e <vTaskMissedYield>
     f62:	c1 50       	subi	r28, 0x01	; 1
     f64:	79 f7       	brne	.-34     	; 0xf44 <prvUnlockQueue+0x62>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	f8 01       	movw	r30, r16
     f6a:	81 a3       	std	Z+33, r24	; 0x21
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	08 95       	ret

00000f7c <xQueueGenericReset>:
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	ec 01       	movw	r28, r24
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	0f 92       	push	r0
     f88:	e8 81       	ld	r30, Y
     f8a:	f9 81       	ldd	r31, Y+1	; 0x01
     f8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f8e:	28 a1       	ldd	r18, Y+32	; 0x20
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	82 9f       	mul	r24, r18
     f96:	a0 01       	movw	r20, r0
     f98:	83 9f       	mul	r24, r19
     f9a:	50 0d       	add	r21, r0
     f9c:	92 9f       	mul	r25, r18
     f9e:	50 0d       	add	r21, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	4e 0f       	add	r20, r30
     fa4:	5f 1f       	adc	r21, r31
     fa6:	5d 83       	std	Y+5, r21	; 0x05
     fa8:	4c 83       	std	Y+4, r20	; 0x04
     faa:	1e 8e       	std	Y+30, r1	; 0x1e
     fac:	fb 83       	std	Y+3, r31	; 0x03
     fae:	ea 83       	std	Y+2, r30	; 0x02
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	82 9f       	mul	r24, r18
     fb4:	a0 01       	movw	r20, r0
     fb6:	83 9f       	mul	r24, r19
     fb8:	50 0d       	add	r21, r0
     fba:	92 9f       	mul	r25, r18
     fbc:	50 0d       	add	r21, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	cf 01       	movw	r24, r30
     fc2:	84 0f       	add	r24, r20
     fc4:	95 1f       	adc	r25, r21
     fc6:	9f 83       	std	Y+7, r25	; 0x07
     fc8:	8e 83       	std	Y+6, r24	; 0x06
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	89 a3       	std	Y+33, r24	; 0x21
     fce:	8a a3       	std	Y+34, r24	; 0x22
     fd0:	61 11       	cpse	r22, r1
     fd2:	0b c0       	rjmp	.+22     	; 0xfea <xQueueGenericReset+0x6e>
     fd4:	88 85       	ldd	r24, Y+8	; 0x08
     fd6:	88 23       	and	r24, r24
     fd8:	71 f0       	breq	.+28     	; 0xff6 <xQueueGenericReset+0x7a>
     fda:	ce 01       	movw	r24, r28
     fdc:	08 96       	adiw	r24, 0x08	; 8
     fde:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xTaskRemoveFromEventList>
     fe2:	88 23       	and	r24, r24
     fe4:	41 f0       	breq	.+16     	; 0xff6 <xQueueGenericReset+0x7a>
     fe6:	31 de       	rcall	.-926    	; 0xc4a <vPortYield>
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <xQueueGenericReset+0x7a>
     fea:	ce 01       	movw	r24, r28
     fec:	08 96       	adiw	r24, 0x08	; 8
     fee:	e5 dc       	rcall	.-1590   	; 0x9ba <vListInitialise>
     ff0:	ce 01       	movw	r24, r28
     ff2:	43 96       	adiw	r24, 0x13	; 19
     ff4:	e2 dc       	rcall	.-1596   	; 0x9ba <vListInitialise>
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <xQueueGenericCreate>:
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	08 2f       	mov	r16, r24
    100e:	16 2f       	mov	r17, r22
    1010:	f4 2e       	mov	r15, r20
    1012:	66 23       	and	r22, r22
    1014:	b9 f0       	breq	.+46     	; 0x1044 <xQueueGenericCreate+0x42>
    1016:	86 9f       	mul	r24, r22
    1018:	c0 01       	movw	r24, r0
    101a:	11 24       	eor	r1, r1
    101c:	85 96       	adiw	r24, 0x25	; 37
    101e:	e3 db       	rcall	.-2106   	; 0x7e6 <pvPortMalloc>
    1020:	ec 01       	movw	r28, r24
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	41 f4       	brne	.+16     	; 0x1036 <xQueueGenericCreate+0x34>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <xQueueGenericCreate+0x4e>
    1028:	0f 8f       	std	Y+31, r16	; 0x1f
    102a:	18 a3       	std	Y+32, r17	; 0x20
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	ce 01       	movw	r24, r28
    1030:	a5 df       	rcall	.-182    	; 0xf7c <xQueueGenericReset>
    1032:	fc a2       	std	Y+36, r15	; 0x24
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <xQueueGenericCreate+0x4e>
    1036:	85 96       	adiw	r24, 0x25	; 37
    1038:	99 83       	std	Y+1, r25	; 0x01
    103a:	88 83       	st	Y, r24
    103c:	f5 cf       	rjmp	.-22     	; 0x1028 <xQueueGenericCreate+0x26>
    103e:	d9 83       	std	Y+1, r29	; 0x01
    1040:	c8 83       	st	Y, r28
    1042:	f2 cf       	rjmp	.-28     	; 0x1028 <xQueueGenericCreate+0x26>
    1044:	85 e2       	ldi	r24, 0x25	; 37
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	ce db       	rcall	.-2148   	; 0x7e6 <pvPortMalloc>
    104a:	ec 01       	movw	r28, r24
    104c:	89 2b       	or	r24, r25
    104e:	b9 f7       	brne	.-18     	; 0x103e <xQueueGenericCreate+0x3c>
    1050:	ce 01       	movw	r24, r28
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	08 95       	ret

0000105e <xQueueGenericSend>:
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	29 97       	sbiw	r28, 0x09	; 9
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	7c 01       	movw	r14, r24
    1086:	5b 01       	movw	r10, r22
    1088:	2e 83       	std	Y+6, r18	; 0x06
    108a:	3f 83       	std	Y+7, r19	; 0x07
    108c:	48 87       	std	Y+8, r20	; 0x08
    108e:	59 87       	std	Y+9, r21	; 0x09
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	99 24       	eor	r9, r9
    1094:	93 94       	inc	r9
    1096:	6c 01       	movw	r12, r24
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	c8 0e       	add	r12, r24
    109c:	d1 1c       	adc	r13, r1
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	0f 92       	push	r0
    10a4:	f7 01       	movw	r30, r14
    10a6:	96 8d       	ldd	r25, Z+30	; 0x1e
    10a8:	87 8d       	ldd	r24, Z+31	; 0x1f
    10aa:	98 17       	cp	r25, r24
    10ac:	10 f0       	brcs	.+4      	; 0x10b2 <xQueueGenericSend+0x54>
    10ae:	02 30       	cpi	r16, 0x02	; 2
    10b0:	b1 f4       	brne	.+44     	; 0x10de <xQueueGenericSend+0x80>
    10b2:	40 2f       	mov	r20, r16
    10b4:	b5 01       	movw	r22, r10
    10b6:	c7 01       	movw	r24, r14
    10b8:	9b de       	rcall	.-714    	; 0xdf0 <prvCopyDataToQueue>
    10ba:	f7 01       	movw	r30, r14
    10bc:	93 89       	ldd	r25, Z+19	; 0x13
    10be:	99 23       	and	r25, r25
    10c0:	41 f0       	breq	.+16     	; 0x10d2 <xQueueGenericSend+0x74>
    10c2:	c7 01       	movw	r24, r14
    10c4:	43 96       	adiw	r24, 0x13	; 19
    10c6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <xTaskRemoveFromEventList>
    10ca:	88 23       	and	r24, r24
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <xQueueGenericSend+0x78>
    10ce:	bd dd       	rcall	.-1158   	; 0xc4a <vPortYield>
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <xQueueGenericSend+0x78>
    10d2:	81 11       	cpse	r24, r1
    10d4:	ba dd       	rcall	.-1164   	; 0xc4a <vPortYield>
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	4d c0       	rjmp	.+154    	; 0x1178 <xQueueGenericSend+0x11a>
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	9f 81       	ldd	r25, Y+7	; 0x07
    10e2:	a8 85       	ldd	r26, Y+8	; 0x08
    10e4:	b9 85       	ldd	r27, Y+9	; 0x09
    10e6:	89 2b       	or	r24, r25
    10e8:	8a 2b       	or	r24, r26
    10ea:	8b 2b       	or	r24, r27
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <xQueueGenericSend+0x98>
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	41 c0       	rjmp	.+130    	; 0x1178 <xQueueGenericSend+0x11a>
    10f6:	11 11       	cpse	r17, r1
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <xQueueGenericSend+0xa6>
    10fa:	ce 01       	movw	r24, r28
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	0e 94 39 11 	call	0x2272	; 0x2272 <vTaskInternalSetTimeOutState>
    1102:	19 2d       	mov	r17, r9
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	28 d6       	rcall	.+3152   	; 0x1d5a <vTaskSuspendAll>
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	0f 92       	push	r0
    1110:	f7 01       	movw	r30, r14
    1112:	81 a1       	ldd	r24, Z+33	; 0x21
    1114:	8f 3f       	cpi	r24, 0xFF	; 255
    1116:	09 f4       	brne	.+2      	; 0x111a <xQueueGenericSend+0xbc>
    1118:	11 a2       	std	Z+33, r1	; 0x21
    111a:	f7 01       	movw	r30, r14
    111c:	82 a1       	ldd	r24, Z+34	; 0x22
    111e:	8f 3f       	cpi	r24, 0xFF	; 255
    1120:	09 f4       	brne	.+2      	; 0x1124 <xQueueGenericSend+0xc6>
    1122:	12 a2       	std	Z+34, r1	; 0x22
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	be 01       	movw	r22, r28
    112a:	6a 5f       	subi	r22, 0xFA	; 250
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	0e 94 4a 11 	call	0x2294	; 0x2294 <xTaskCheckForTimeOut>
    1136:	81 11       	cpse	r24, r1
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <xQueueGenericSend+0x112>
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	0f 92       	push	r0
    1140:	f7 01       	movw	r30, r14
    1142:	96 8d       	ldd	r25, Z+30	; 0x1e
    1144:	87 8d       	ldd	r24, Z+31	; 0x1f
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	98 13       	cpse	r25, r24
    114c:	0d c0       	rjmp	.+26     	; 0x1168 <xQueueGenericSend+0x10a>
    114e:	4e 81       	ldd	r20, Y+6	; 0x06
    1150:	5f 81       	ldd	r21, Y+7	; 0x07
    1152:	68 85       	ldd	r22, Y+8	; 0x08
    1154:	79 85       	ldd	r23, Y+9	; 0x09
    1156:	c6 01       	movw	r24, r12
    1158:	fd d7       	rcall	.+4090   	; 0x2154 <vTaskPlaceOnEventList>
    115a:	c7 01       	movw	r24, r14
    115c:	c2 de       	rcall	.-636    	; 0xee2 <prvUnlockQueue>
    115e:	e6 d6       	rcall	.+3532   	; 0x1f2c <xTaskResumeAll>
    1160:	81 11       	cpse	r24, r1
    1162:	9d cf       	rjmp	.-198    	; 0x109e <xQueueGenericSend+0x40>
    1164:	72 dd       	rcall	.-1308   	; 0xc4a <vPortYield>
    1166:	9b cf       	rjmp	.-202    	; 0x109e <xQueueGenericSend+0x40>
    1168:	c7 01       	movw	r24, r14
    116a:	bb de       	rcall	.-650    	; 0xee2 <prvUnlockQueue>
    116c:	df d6       	rcall	.+3518   	; 0x1f2c <xTaskResumeAll>
    116e:	97 cf       	rjmp	.-210    	; 0x109e <xQueueGenericSend+0x40>
    1170:	c7 01       	movw	r24, r14
    1172:	b7 de       	rcall	.-658    	; 0xee2 <prvUnlockQueue>
    1174:	db d6       	rcall	.+3510   	; 0x1f2c <xTaskResumeAll>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	29 96       	adiw	r28, 0x09	; 9
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	08 95       	ret

0000119c <xQueueCreateMutex>:
    119c:	0f 93       	push	r16
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	48 2f       	mov	r20, r24
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	2c df       	rcall	.-424    	; 0x1002 <xQueueGenericCreate>
    11aa:	ec 01       	movw	r28, r24
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <xQueueCreateMutex+0x2c>
    11b0:	1d 82       	std	Y+5, r1	; 0x05
    11b2:	1c 82       	std	Y+4, r1	; 0x04
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	18 82       	st	Y, r1
    11b8:	1e 82       	std	Y+6, r1	; 0x06
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	4b df       	rcall	.-362    	; 0x105e <xQueueGenericSend>
    11c8:	ce 01       	movw	r24, r28
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <xQueueGenericSendFromISR>:
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	8a 01       	movw	r16, r20
    11e0:	fc 01       	movw	r30, r24
    11e2:	56 8d       	ldd	r21, Z+30	; 0x1e
    11e4:	37 8d       	ldd	r19, Z+31	; 0x1f
    11e6:	53 17       	cp	r21, r19
    11e8:	10 f0       	brcs	.+4      	; 0x11ee <xQueueGenericSendFromISR+0x1c>
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	e1 f4       	brne	.+56     	; 0x1226 <xQueueGenericSendFromISR+0x54>
    11ee:	42 2f       	mov	r20, r18
    11f0:	78 01       	movw	r14, r16
    11f2:	ec 01       	movw	r28, r24
    11f4:	1a a1       	ldd	r17, Y+34	; 0x22
    11f6:	fc dd       	rcall	.-1032   	; 0xdf0 <prvCopyDataToQueue>
    11f8:	1f 3f       	cpi	r17, 0xFF	; 255
    11fa:	79 f4       	brne	.+30     	; 0x121a <xQueueGenericSendFromISR+0x48>
    11fc:	8b 89       	ldd	r24, Y+19	; 0x13
    11fe:	88 23       	and	r24, r24
    1200:	a1 f0       	breq	.+40     	; 0x122a <xQueueGenericSendFromISR+0x58>
    1202:	ce 01       	movw	r24, r28
    1204:	43 96       	adiw	r24, 0x13	; 19
    1206:	dd d7       	rcall	.+4026   	; 0x21c2 <xTaskRemoveFromEventList>
    1208:	88 23       	and	r24, r24
    120a:	89 f0       	breq	.+34     	; 0x122e <xQueueGenericSendFromISR+0x5c>
    120c:	e1 14       	cp	r14, r1
    120e:	f1 04       	cpc	r15, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <xQueueGenericSendFromISR+0x60>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	f7 01       	movw	r30, r14
    1216:	80 83       	st	Z, r24
    1218:	0d c0       	rjmp	.+26     	; 0x1234 <xQueueGenericSendFromISR+0x62>
    121a:	ff 24       	eor	r15, r15
    121c:	f3 94       	inc	r15
    121e:	f1 0e       	add	r15, r17
    1220:	fa a2       	std	Y+34, r15	; 0x22
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <xQueueGenericSendFromISR+0x62>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <xQueueGenericSendFromISR+0x62>
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <xQueueGenericSendFromISR+0x62>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <xQueueGenericSendFromISR+0x62>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	08 95       	ret

00001242 <xQueueReceive>:
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	29 97       	sbiw	r28, 0x09	; 9
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	8c 01       	movw	r16, r24
    126a:	5b 01       	movw	r10, r22
    126c:	2e 83       	std	Y+6, r18	; 0x06
    126e:	3f 83       	std	Y+7, r19	; 0x07
    1270:	48 87       	std	Y+8, r20	; 0x08
    1272:	59 87       	std	Y+9, r21	; 0x09
    1274:	e1 2c       	mov	r14, r1
    1276:	99 24       	eor	r9, r9
    1278:	93 94       	inc	r9
    127a:	6c 01       	movw	r12, r24
    127c:	83 e1       	ldi	r24, 0x13	; 19
    127e:	c8 0e       	add	r12, r24
    1280:	d1 1c       	adc	r13, r1
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	0f 92       	push	r0
    1288:	f8 01       	movw	r30, r16
    128a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    128c:	ff 20       	and	r15, r15
    128e:	91 f0       	breq	.+36     	; 0x12b4 <xQueueReceive+0x72>
    1290:	b5 01       	movw	r22, r10
    1292:	c8 01       	movw	r24, r16
    1294:	0c de       	rcall	.-1000   	; 0xeae <prvCopyDataFromQueue>
    1296:	fa 94       	dec	r15
    1298:	f8 01       	movw	r30, r16
    129a:	f6 8e       	std	Z+30, r15	; 0x1e
    129c:	80 85       	ldd	r24, Z+8	; 0x08
    129e:	88 23       	and	r24, r24
    12a0:	29 f0       	breq	.+10     	; 0x12ac <xQueueReceive+0x6a>
    12a2:	c8 01       	movw	r24, r16
    12a4:	08 96       	adiw	r24, 0x08	; 8
    12a6:	8d d7       	rcall	.+3866   	; 0x21c2 <xTaskRemoveFromEventList>
    12a8:	81 11       	cpse	r24, r1
    12aa:	cf dc       	rcall	.-1634   	; 0xc4a <vPortYield>
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	4a c0       	rjmp	.+148    	; 0x1348 <xQueueReceive+0x106>
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	a8 85       	ldd	r26, Y+8	; 0x08
    12ba:	b9 85       	ldd	r27, Y+9	; 0x09
    12bc:	89 2b       	or	r24, r25
    12be:	8a 2b       	or	r24, r26
    12c0:	8b 2b       	or	r24, r27
    12c2:	21 f4       	brne	.+8      	; 0x12cc <xQueueReceive+0x8a>
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	3e c0       	rjmp	.+124    	; 0x1348 <xQueueReceive+0x106>
    12cc:	e1 10       	cpse	r14, r1
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <xQueueReceive+0x96>
    12d0:	ce 01       	movw	r24, r28
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	ce d7       	rcall	.+3996   	; 0x2272 <vTaskInternalSetTimeOutState>
    12d6:	e9 2c       	mov	r14, r9
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	3e d5       	rcall	.+2684   	; 0x1d5a <vTaskSuspendAll>
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	0f 92       	push	r0
    12e4:	f8 01       	movw	r30, r16
    12e6:	81 a1       	ldd	r24, Z+33	; 0x21
    12e8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ea:	09 f4       	brne	.+2      	; 0x12ee <xQueueReceive+0xac>
    12ec:	11 a2       	std	Z+33, r1	; 0x21
    12ee:	f8 01       	movw	r30, r16
    12f0:	82 a1       	ldd	r24, Z+34	; 0x22
    12f2:	8f 3f       	cpi	r24, 0xFF	; 255
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <xQueueReceive+0xb6>
    12f6:	12 a2       	std	Z+34, r1	; 0x22
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	be 01       	movw	r22, r28
    12fe:	6a 5f       	subi	r22, 0xFA	; 250
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	c6 d7       	rcall	.+3980   	; 0x2294 <xTaskCheckForTimeOut>
    1308:	81 11       	cpse	r24, r1
    130a:	15 c0       	rjmp	.+42     	; 0x1336 <xQueueReceive+0xf4>
    130c:	c8 01       	movw	r24, r16
    130e:	65 dd       	rcall	.-1334   	; 0xdda <prvIsQueueEmpty>
    1310:	88 23       	and	r24, r24
    1312:	69 f0       	breq	.+26     	; 0x132e <xQueueReceive+0xec>
    1314:	4e 81       	ldd	r20, Y+6	; 0x06
    1316:	5f 81       	ldd	r21, Y+7	; 0x07
    1318:	68 85       	ldd	r22, Y+8	; 0x08
    131a:	79 85       	ldd	r23, Y+9	; 0x09
    131c:	c6 01       	movw	r24, r12
    131e:	1a d7       	rcall	.+3636   	; 0x2154 <vTaskPlaceOnEventList>
    1320:	c8 01       	movw	r24, r16
    1322:	df dd       	rcall	.-1090   	; 0xee2 <prvUnlockQueue>
    1324:	03 d6       	rcall	.+3078   	; 0x1f2c <xTaskResumeAll>
    1326:	81 11       	cpse	r24, r1
    1328:	ac cf       	rjmp	.-168    	; 0x1282 <xQueueReceive+0x40>
    132a:	8f dc       	rcall	.-1762   	; 0xc4a <vPortYield>
    132c:	aa cf       	rjmp	.-172    	; 0x1282 <xQueueReceive+0x40>
    132e:	c8 01       	movw	r24, r16
    1330:	d8 dd       	rcall	.-1104   	; 0xee2 <prvUnlockQueue>
    1332:	fc d5       	rcall	.+3064   	; 0x1f2c <xTaskResumeAll>
    1334:	a6 cf       	rjmp	.-180    	; 0x1282 <xQueueReceive+0x40>
    1336:	c8 01       	movw	r24, r16
    1338:	d4 dd       	rcall	.-1112   	; 0xee2 <prvUnlockQueue>
    133a:	f8 d5       	rcall	.+3056   	; 0x1f2c <xTaskResumeAll>
    133c:	c8 01       	movw	r24, r16
    133e:	4d dd       	rcall	.-1382   	; 0xdda <prvIsQueueEmpty>
    1340:	88 23       	and	r24, r24
    1342:	09 f4       	brne	.+2      	; 0x1346 <xQueueReceive+0x104>
    1344:	9e cf       	rjmp	.-196    	; 0x1282 <xQueueReceive+0x40>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	29 96       	adiw	r28, 0x09	; 9
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	08 95       	ret

0000136c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	0f 92       	push	r0
    1378:	89 a1       	ldd	r24, Y+33	; 0x21
    137a:	8f 3f       	cpi	r24, 0xFF	; 255
    137c:	09 f4       	brne	.+2      	; 0x1380 <vQueueWaitForMessageRestricted+0x14>
    137e:	19 a2       	std	Y+33, r1	; 0x21
    1380:	8a a1       	ldd	r24, Y+34	; 0x22
    1382:	8f 3f       	cpi	r24, 0xFF	; 255
    1384:	09 f4       	brne	.+2      	; 0x1388 <vQueueWaitForMessageRestricted+0x1c>
    1386:	1a a2       	std	Y+34, r1	; 0x22
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    138c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    138e:	81 11       	cpse	r24, r1
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1392:	ce 01       	movw	r24, r28
    1394:	43 96       	adiw	r24, 0x13	; 19
    1396:	f5 d6       	rcall	.+3562   	; 0x2182 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1398:	ce 01       	movw	r24, r28
    139a:	a3 dd       	rcall	.-1210   	; 0xee2 <prvUnlockQueue>
    }
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    13a2:	fc 01       	movw	r30, r24
    13a4:	44 81       	ldd	r20, Z+4	; 0x04
    13a6:	55 81       	ldd	r21, Z+5	; 0x05
    13a8:	22 81       	ldd	r18, Z+2	; 0x02
    13aa:	33 81       	ldd	r19, Z+3	; 0x03
    13ac:	24 0f       	add	r18, r20
    13ae:	35 1f       	adc	r19, r21
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	b9 01       	movw	r22, r18
    13b6:	68 1b       	sub	r22, r24
    13b8:	79 0b       	sbc	r23, r25
    13ba:	cb 01       	movw	r24, r22
    13bc:	64 17       	cp	r22, r20
    13be:	75 07       	cpc	r23, r21
    13c0:	10 f0       	brcs	.+4      	; 0x13c6 <prvBytesInBuffer+0x24>
    13c2:	84 1b       	sub	r24, r20
    13c4:	95 0b       	sbc	r25, r21
    13c6:	08 95       	ret

000013c8 <prvWriteBytesToBuffer>:
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	6c 01       	movw	r12, r24
    13de:	5b 01       	movw	r10, r22
    13e0:	7a 01       	movw	r14, r20
    13e2:	fc 01       	movw	r30, r24
    13e4:	c2 81       	ldd	r28, Z+2	; 0x02
    13e6:	d3 81       	ldd	r29, Z+3	; 0x03
    13e8:	04 81       	ldd	r16, Z+4	; 0x04
    13ea:	15 81       	ldd	r17, Z+5	; 0x05
    13ec:	0c 1b       	sub	r16, r28
    13ee:	1d 0b       	sbc	r17, r29
    13f0:	40 17       	cp	r20, r16
    13f2:	51 07       	cpc	r21, r17
    13f4:	08 f4       	brcc	.+2      	; 0x13f8 <prvWriteBytesToBuffer+0x30>
    13f6:	8a 01       	movw	r16, r20
    13f8:	f6 01       	movw	r30, r12
    13fa:	84 85       	ldd	r24, Z+12	; 0x0c
    13fc:	95 85       	ldd	r25, Z+13	; 0x0d
    13fe:	a8 01       	movw	r20, r16
    1400:	b5 01       	movw	r22, r10
    1402:	8c 0f       	add	r24, r28
    1404:	9d 1f       	adc	r25, r29
    1406:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memcpy>
    140a:	0e 15       	cp	r16, r14
    140c:	1f 05       	cpc	r17, r15
    140e:	58 f4       	brcc	.+22     	; 0x1426 <prvWriteBytesToBuffer+0x5e>
    1410:	a7 01       	movw	r20, r14
    1412:	40 1b       	sub	r20, r16
    1414:	51 0b       	sbc	r21, r17
    1416:	b5 01       	movw	r22, r10
    1418:	60 0f       	add	r22, r16
    141a:	71 1f       	adc	r23, r17
    141c:	f6 01       	movw	r30, r12
    141e:	84 85       	ldd	r24, Z+12	; 0x0c
    1420:	95 85       	ldd	r25, Z+13	; 0x0d
    1422:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memcpy>
    1426:	ce 01       	movw	r24, r28
    1428:	8e 0d       	add	r24, r14
    142a:	9f 1d       	adc	r25, r15
    142c:	f6 01       	movw	r30, r12
    142e:	24 81       	ldd	r18, Z+4	; 0x04
    1430:	35 81       	ldd	r19, Z+5	; 0x05
    1432:	82 17       	cp	r24, r18
    1434:	93 07       	cpc	r25, r19
    1436:	10 f0       	brcs	.+4      	; 0x143c <prvWriteBytesToBuffer+0x74>
    1438:	82 1b       	sub	r24, r18
    143a:	93 0b       	sbc	r25, r19
    143c:	f6 01       	movw	r30, r12
    143e:	93 83       	std	Z+3, r25	; 0x03
    1440:	82 83       	std	Z+2, r24	; 0x02
    1442:	c7 01       	movw	r24, r14
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	08 95       	ret

0000145a <prvWriteMessageToBuffer>:
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	1f 92       	push	r1
    146c:	1f 92       	push	r1
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	5a 83       	std	Y+2, r21	; 0x02
    1474:	49 83       	std	Y+1, r20	; 0x01
    1476:	21 15       	cp	r18, r1
    1478:	31 05       	cpc	r19, r1
    147a:	c9 f0       	breq	.+50     	; 0x14ae <prvWriteMessageToBuffer+0x54>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
    1480:	fc 01       	movw	r30, r24
    1482:	86 85       	ldd	r24, Z+14	; 0x0e
    1484:	80 fd       	sbrc	r24, 0
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <prvWriteMessageToBuffer+0x3e>
    1488:	ca 01       	movw	r24, r20
    148a:	24 17       	cp	r18, r20
    148c:	35 07       	cpc	r19, r21
    148e:	08 f4       	brcc	.+2      	; 0x1492 <prvWriteMessageToBuffer+0x38>
    1490:	c9 01       	movw	r24, r18
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	11 c0       	rjmp	.+34     	; 0x14ba <prvWriteMessageToBuffer+0x60>
    1498:	20 17       	cp	r18, r16
    149a:	31 07       	cpc	r19, r17
    149c:	58 f0       	brcs	.+22     	; 0x14b4 <prvWriteMessageToBuffer+0x5a>
    149e:	42 e0       	ldi	r20, 0x02	; 2
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	be 01       	movw	r22, r28
    14a4:	6f 5f       	subi	r22, 0xFF	; 255
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	c7 01       	movw	r24, r14
    14aa:	8e df       	rcall	.-228    	; 0x13c8 <prvWriteBytesToBuffer>
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <prvWriteMessageToBuffer+0x60>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <prvWriteMessageToBuffer+0x6a>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <prvWriteMessageToBuffer+0x6a>
    14ba:	49 81       	ldd	r20, Y+1	; 0x01
    14bc:	5a 81       	ldd	r21, Y+2	; 0x02
    14be:	b6 01       	movw	r22, r12
    14c0:	c7 01       	movw	r24, r14
    14c2:	82 df       	rcall	.-252    	; 0x13c8 <prvWriteBytesToBuffer>
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <prvReadBytesFromBuffer>:
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	7c 01       	movw	r14, r24
    14f0:	5b 01       	movw	r10, r22
    14f2:	e9 01       	movw	r28, r18
    14f4:	42 17       	cp	r20, r18
    14f6:	53 07       	cpc	r21, r19
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <prvReadBytesFromBuffer+0x22>
    14fa:	ea 01       	movw	r28, r20
    14fc:	20 97       	sbiw	r28, 0x00	; 0
    14fe:	79 f1       	breq	.+94     	; 0x155e <prvReadBytesFromBuffer+0x84>
    1500:	f7 01       	movw	r30, r14
    1502:	00 81       	ld	r16, Z
    1504:	11 81       	ldd	r17, Z+1	; 0x01
    1506:	c4 80       	ldd	r12, Z+4	; 0x04
    1508:	d5 80       	ldd	r13, Z+5	; 0x05
    150a:	c0 1a       	sub	r12, r16
    150c:	d1 0a       	sbc	r13, r17
    150e:	cc 15       	cp	r28, r12
    1510:	dd 05       	cpc	r29, r13
    1512:	08 f4       	brcc	.+2      	; 0x1516 <prvReadBytesFromBuffer+0x3c>
    1514:	6e 01       	movw	r12, r28
    1516:	f7 01       	movw	r30, r14
    1518:	64 85       	ldd	r22, Z+12	; 0x0c
    151a:	75 85       	ldd	r23, Z+13	; 0x0d
    151c:	60 0f       	add	r22, r16
    151e:	71 1f       	adc	r23, r17
    1520:	a6 01       	movw	r20, r12
    1522:	c5 01       	movw	r24, r10
    1524:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memcpy>
    1528:	cc 16       	cp	r12, r28
    152a:	dd 06       	cpc	r13, r29
    152c:	58 f4       	brcc	.+22     	; 0x1544 <prvReadBytesFromBuffer+0x6a>
    152e:	ae 01       	movw	r20, r28
    1530:	4c 19       	sub	r20, r12
    1532:	5d 09       	sbc	r21, r13
    1534:	f7 01       	movw	r30, r14
    1536:	64 85       	ldd	r22, Z+12	; 0x0c
    1538:	75 85       	ldd	r23, Z+13	; 0x0d
    153a:	c5 01       	movw	r24, r10
    153c:	8c 0d       	add	r24, r12
    153e:	9d 1d       	adc	r25, r13
    1540:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memcpy>
    1544:	0c 0f       	add	r16, r28
    1546:	1d 1f       	adc	r17, r29
    1548:	f7 01       	movw	r30, r14
    154a:	84 81       	ldd	r24, Z+4	; 0x04
    154c:	95 81       	ldd	r25, Z+5	; 0x05
    154e:	08 17       	cp	r16, r24
    1550:	19 07       	cpc	r17, r25
    1552:	10 f0       	brcs	.+4      	; 0x1558 <prvReadBytesFromBuffer+0x7e>
    1554:	08 1b       	sub	r16, r24
    1556:	19 0b       	sbc	r17, r25
    1558:	f7 01       	movw	r30, r14
    155a:	11 83       	std	Z+1, r17	; 0x01
    155c:	00 83       	st	Z, r16
    155e:	ce 01       	movw	r24, r28
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	08 95       	ret

00001576 <xStreamBufferGenericCreate>:
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	eb 01       	movw	r28, r22
    1582:	11 e0       	ldi	r17, 0x01	; 1
    1584:	41 30       	cpi	r20, 0x01	; 1
    1586:	09 f0       	breq	.+2      	; 0x158a <xStreamBufferGenericCreate+0x14>
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	20 97       	sbiw	r28, 0x00	; 0
    158c:	11 f4       	brne	.+4      	; 0x1592 <xStreamBufferGenericCreate+0x1c>
    158e:	c1 e0       	ldi	r28, 0x01	; 1
    1590:	d0 e0       	ldi	r29, 0x00	; 0
    1592:	7c 01       	movw	r14, r24
    1594:	2f ef       	ldi	r18, 0xFF	; 255
    1596:	e2 1a       	sub	r14, r18
    1598:	f2 0a       	sbc	r15, r18
    159a:	41 96       	adiw	r24, 0x11	; 17
    159c:	24 d9       	rcall	.-3512   	; 0x7e6 <pvPortMalloc>
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <xStreamBufferGenericCreate+0x4c>
    15a2:	20 e1       	ldi	r18, 0x10	; 16
    15a4:	fc 01       	movw	r30, r24
    15a6:	11 92       	st	Z+, r1
    15a8:	2a 95       	dec	r18
    15aa:	e9 f7       	brne	.-6      	; 0x15a6 <xStreamBufferGenericCreate+0x30>
    15ac:	9c 01       	movw	r18, r24
    15ae:	20 5f       	subi	r18, 0xF0	; 240
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	fc 01       	movw	r30, r24
    15b4:	35 87       	std	Z+13, r19	; 0x0d
    15b6:	24 87       	std	Z+12, r18	; 0x0c
    15b8:	f5 82       	std	Z+5, r15	; 0x05
    15ba:	e4 82       	std	Z+4, r14	; 0x04
    15bc:	d7 83       	std	Z+7, r29	; 0x07
    15be:	c6 83       	std	Z+6, r28	; 0x06
    15c0:	16 87       	std	Z+14, r17	; 0x0e
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <xStreamBufferReset>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	fc 01       	movw	r30, r24
    15d4:	27 85       	ldd	r18, Z+15	; 0x0f
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	0f 92       	push	r0
    15dc:	80 85       	ldd	r24, Z+8	; 0x08
    15de:	91 85       	ldd	r25, Z+9	; 0x09
    15e0:	89 2b       	or	r24, r25
    15e2:	d1 f4       	brne	.+52     	; 0x1618 <xStreamBufferReset+0x4a>
    15e4:	82 85       	ldd	r24, Z+10	; 0x0a
    15e6:	93 85       	ldd	r25, Z+11	; 0x0b
    15e8:	89 2b       	or	r24, r25
    15ea:	c1 f4       	brne	.+48     	; 0x161c <xStreamBufferReset+0x4e>
    15ec:	86 85       	ldd	r24, Z+14	; 0x0e
    15ee:	46 81       	ldd	r20, Z+6	; 0x06
    15f0:	57 81       	ldd	r21, Z+7	; 0x07
    15f2:	64 81       	ldd	r22, Z+4	; 0x04
    15f4:	75 81       	ldd	r23, Z+5	; 0x05
    15f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    15f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    15fa:	90 e1       	ldi	r25, 0x10	; 16
    15fc:	ef 01       	movw	r28, r30
    15fe:	19 92       	st	Y+, r1
    1600:	9a 95       	dec	r25
    1602:	e9 f7       	brne	.-6      	; 0x15fe <xStreamBufferReset+0x30>
    1604:	b5 87       	std	Z+13, r27	; 0x0d
    1606:	a4 87       	std	Z+12, r26	; 0x0c
    1608:	75 83       	std	Z+5, r23	; 0x05
    160a:	64 83       	std	Z+4, r22	; 0x04
    160c:	57 83       	std	Z+7, r21	; 0x07
    160e:	46 83       	std	Z+6, r20	; 0x06
    1610:	86 87       	std	Z+14, r24	; 0x0e
    1612:	27 87       	std	Z+15, r18	; 0x0f
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	03 c0       	rjmp	.+6      	; 0x161e <xStreamBufferReset+0x50>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	01 c0       	rjmp	.+2      	; 0x161e <xStreamBufferReset+0x50>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <xStreamBufferSpacesAvailable>:
    1628:	fc 01       	movw	r30, r24
    162a:	24 81       	ldd	r18, Z+4	; 0x04
    162c:	35 81       	ldd	r19, Z+5	; 0x05
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	42 81       	ldd	r20, Z+2	; 0x02
    1634:	53 81       	ldd	r21, Z+3	; 0x03
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	84 1b       	sub	r24, r20
    163e:	95 0b       	sbc	r25, r21
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	10 f0       	brcs	.+4      	; 0x164a <xStreamBufferSpacesAvailable+0x22>
    1646:	82 1b       	sub	r24, r18
    1648:	93 0b       	sbc	r25, r19
    164a:	08 95       	ret

0000164c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    164c:	2f 92       	push	r2
    164e:	3f 92       	push	r3
    1650:	4f 92       	push	r4
    1652:	5f 92       	push	r5
    1654:	6f 92       	push	r6
    1656:	7f 92       	push	r7
    1658:	8f 92       	push	r8
    165a:	9f 92       	push	r9
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	29 97       	sbiw	r28, 0x09	; 9
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	5c 01       	movw	r10, r24
    1682:	1b 01       	movw	r2, r22
    1684:	2a 01       	movw	r4, r20
    1686:	0e 83       	std	Y+6, r16	; 0x06
    1688:	1f 83       	std	Y+7, r17	; 0x07
    168a:	28 87       	std	Y+8, r18	; 0x08
    168c:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    168e:	fc 01       	movw	r30, r24
    1690:	86 85       	ldd	r24, Z+14	; 0x0e
    1692:	80 ff       	sbrs	r24, 0
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1696:	3a 01       	movw	r6, r20
    1698:	f2 e0       	ldi	r31, 0x02	; 2
    169a:	6f 0e       	add	r6, r31
    169c:	71 1c       	adc	r7, r1
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    16a0:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    16a2:	8e 81       	ldd	r24, Y+6	; 0x06
    16a4:	9f 81       	ldd	r25, Y+7	; 0x07
    16a6:	a8 85       	ldd	r26, Y+8	; 0x08
    16a8:	b9 85       	ldd	r27, Y+9	; 0x09
    16aa:	89 2b       	or	r24, r25
    16ac:	8a 2b       	or	r24, r26
    16ae:	8b 2b       	or	r24, r27
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <xStreamBufferSend+0x68>
    16b2:	34 c0       	rjmp	.+104    	; 0x171c <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	c6 d5       	rcall	.+2956   	; 0x2246 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16c0:	c5 01       	movw	r24, r10
    16c2:	b2 df       	rcall	.-156    	; 0x1628 <xStreamBufferSpacesAvailable>
    16c4:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    16c6:	86 15       	cp	r24, r6
    16c8:	97 05       	cpc	r25, r7
    16ca:	18 f5       	brcc	.+70     	; 0x1712 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 81 13 	call	0x2702	; 0x2702 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    16d4:	38 d6       	rcall	.+3184   	; 0x2346 <xTaskGetCurrentTaskHandle>
    16d6:	f5 01       	movw	r30, r10
    16d8:	93 87       	std	Z+11, r25	; 0x0b
    16da:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    16e0:	ce 80       	ldd	r12, Y+6	; 0x06
    16e2:	df 80       	ldd	r13, Y+7	; 0x07
    16e4:	e8 84       	ldd	r14, Y+8	; 0x08
    16e6:	f9 84       	ldd	r15, Y+9	; 0x09
    16e8:	00 e0       	ldi	r16, 0x00	; 0
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	cb 01       	movw	r24, r22
    16f8:	79 d6       	rcall	.+3314   	; 0x23ec <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    16fa:	f5 01       	movw	r30, r10
    16fc:	13 86       	std	Z+11, r1	; 0x0b
    16fe:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1700:	be 01       	movw	r22, r28
    1702:	6a 5f       	subi	r22, 0xFA	; 250
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	ce 01       	movw	r24, r28
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	c4 d5       	rcall	.+2952   	; 0x2294 <xTaskCheckForTimeOut>
    170c:	88 23       	and	r24, r24
    170e:	a9 f2       	breq	.-86     	; 0x16ba <xStreamBufferSend+0x6e>
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1712:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	81 14       	cp	r8, r1
    1718:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    171a:	19 f4       	brne	.+6      	; 0x1722 <xStreamBufferSend+0xd6>
    171c:	c5 01       	movw	r24, r10
    171e:	84 df       	rcall	.-248    	; 0x1628 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1720:	4c 01       	movw	r8, r24
    1722:	83 01       	movw	r16, r6
    1724:	94 01       	movw	r18, r8
    1726:	a2 01       	movw	r20, r4
    1728:	b1 01       	movw	r22, r2
    172a:	c5 01       	movw	r24, r10
    172c:	96 de       	rcall	.-724    	; 0x145a <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    172e:	7c 01       	movw	r14, r24
    1730:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1732:	d9 f0       	breq	.+54     	; 0x176a <xStreamBufferSend+0x11e>
    1734:	c5 01       	movw	r24, r10
    1736:	35 de       	rcall	.-918    	; 0x13a2 <prvBytesInBuffer>
    1738:	f5 01       	movw	r30, r10
    173a:	26 81       	ldd	r18, Z+6	; 0x06
    173c:	37 81       	ldd	r19, Z+7	; 0x07
    173e:	82 17       	cp	r24, r18
    1740:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1742:	98 f0       	brcs	.+38     	; 0x176a <xStreamBufferSend+0x11e>
    1744:	0a d3       	rcall	.+1556   	; 0x1d5a <vTaskSuspendAll>
    1746:	f5 01       	movw	r30, r10
    1748:	80 85       	ldd	r24, Z+8	; 0x08
    174a:	91 85       	ldd	r25, Z+9	; 0x09
    174c:	89 2b       	or	r24, r25
    174e:	61 f0       	breq	.+24     	; 0x1768 <xStreamBufferSend+0x11c>
    1750:	80 85       	ldd	r24, Z+8	; 0x08
    1752:	91 85       	ldd	r25, Z+9	; 0x09
    1754:	00 e0       	ldi	r16, 0x00	; 0
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	ba 01       	movw	r22, r20
    1760:	cf d6       	rcall	.+3486   	; 0x2500 <xTaskGenericNotify>
    1762:	f5 01       	movw	r30, r10
    1764:	11 86       	std	Z+9, r1	; 0x09
    1766:	10 86       	std	Z+8, r1	; 0x08
    1768:	e1 d3       	rcall	.+1986   	; 0x1f2c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    176a:	c7 01       	movw	r24, r14
    176c:	29 96       	adiw	r28, 0x09	; 9
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	bf 90       	pop	r11
    178a:	af 90       	pop	r10
    178c:	9f 90       	pop	r9
    178e:	8f 90       	pop	r8
    1790:	7f 90       	pop	r7
    1792:	6f 90       	pop	r6
    1794:	5f 90       	pop	r5
    1796:	4f 90       	pop	r4
    1798:	3f 90       	pop	r3
    179a:	2f 90       	pop	r2
    179c:	08 95       	ret

0000179e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    179e:	af 92       	push	r10
    17a0:	bf 92       	push	r11
    17a2:	cf 92       	push	r12
    17a4:	df 92       	push	r13
    17a6:	ef 92       	push	r14
    17a8:	ff 92       	push	r15
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	ec 01       	movw	r28, r24
    17b4:	5b 01       	movw	r10, r22
    17b6:	6a 01       	movw	r12, r20
    17b8:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    17bc:	80 ff       	sbrs	r24, 0
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17c0:	8a 01       	movw	r16, r20
    17c2:	0e 5f       	subi	r16, 0xFE	; 254
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    17c8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17ca:	ce 01       	movw	r24, r28
    17cc:	2d df       	rcall	.-422    	; 0x1628 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    17ce:	9c 01       	movw	r18, r24
    17d0:	a6 01       	movw	r20, r12
    17d2:	b5 01       	movw	r22, r10
    17d4:	ce 01       	movw	r24, r28
    17d6:	41 de       	rcall	.-894    	; 0x145a <prvWriteMessageToBuffer>
    17d8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    17da:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    17dc:	b1 f0       	breq	.+44     	; 0x180a <xStreamBufferSendFromISR+0x6c>
    17de:	ce 01       	movw	r24, r28
    17e0:	e0 dd       	rcall	.-1088   	; 0x13a2 <prvBytesInBuffer>
    17e2:	2e 81       	ldd	r18, Y+6	; 0x06
    17e4:	3f 81       	ldd	r19, Y+7	; 0x07
    17e6:	82 17       	cp	r24, r18
    17e8:	93 07       	cpc	r25, r19
    17ea:	78 f0       	brcs	.+30     	; 0x180a <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    17ec:	88 85       	ldd	r24, Y+8	; 0x08
    17ee:	99 85       	ldd	r25, Y+9	; 0x09
    17f0:	89 2b       	or	r24, r25
    17f2:	59 f0       	breq	.+22     	; 0x180a <xStreamBufferSendFromISR+0x6c>
    17f4:	88 85       	ldd	r24, Y+8	; 0x08
    17f6:	99 85       	ldd	r25, Y+9	; 0x09
    17f8:	00 e0       	ldi	r16, 0x00	; 0
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	ba 01       	movw	r22, r20
    1804:	f5 d6       	rcall	.+3562   	; 0x25f0 <xTaskGenericNotifyFromISR>
    1806:	19 86       	std	Y+9, r1	; 0x09
    1808:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    180a:	c6 01       	movw	r24, r12
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	08 95       	ret

00001822 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1822:	4f 92       	push	r4
    1824:	5f 92       	push	r5
    1826:	6f 92       	push	r6
    1828:	7f 92       	push	r7
    182a:	8f 92       	push	r8
    182c:	9f 92       	push	r9
    182e:	af 92       	push	r10
    1830:	bf 92       	push	r11
    1832:	cf 92       	push	r12
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	1f 92       	push	r1
    1844:	1f 92       	push	r1
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	5c 01       	movw	r10, r24
    184c:	2b 01       	movw	r4, r22
    184e:	3a 01       	movw	r6, r20
    1850:	68 01       	movw	r12, r16
    1852:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1854:	fc 01       	movw	r30, r24
    1856:	86 85       	ldd	r24, Z+14	; 0x0e
    1858:	80 fd       	sbrc	r24, 0
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    185c:	81 2c       	mov	r8, r1
    185e:	91 2c       	mov	r9, r1
    1860:	04 c0       	rjmp	.+8      	; 0x186a <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1862:	68 94       	set
    1864:	88 24       	eor	r8, r8
    1866:	81 f8       	bld	r8, 1
    1868:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    186a:	c1 14       	cp	r12, r1
    186c:	d1 04       	cpc	r13, r1
    186e:	e1 04       	cpc	r14, r1
    1870:	f1 04       	cpc	r15, r1
    1872:	29 f1       	breq	.+74     	; 0x18be <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    187a:	c5 01       	movw	r24, r10
    187c:	92 dd       	rcall	.-1244   	; 0x13a2 <prvBytesInBuffer>
    187e:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1880:	88 16       	cp	r8, r24
    1882:	99 06       	cpc	r9, r25
    1884:	38 f0       	brcs	.+14     	; 0x1894 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    188a:	3b d7       	rcall	.+3702   	; 0x2702 <xTaskNotifyStateClear>
    188c:	5c d5       	rcall	.+2744   	; 0x2346 <xTaskGetCurrentTaskHandle>
    188e:	f5 01       	movw	r30, r10
    1890:	91 87       	std	Z+9, r25	; 0x09
    1892:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1898:	80 16       	cp	r8, r16
    189a:	91 06       	cpc	r9, r17
    189c:	b0 f0       	brcs	.+44     	; 0x18ca <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    189e:	00 e0       	ldi	r16, 0x00	; 0
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	cb 01       	movw	r24, r22
    18ae:	9e d5       	rcall	.+2876   	; 0x23ec <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    18b0:	f5 01       	movw	r30, r10
    18b2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18b4:	10 86       	std	Z+8, r1	; 0x08
    18b6:	c5 01       	movw	r24, r10
    18b8:	74 dd       	rcall	.-1304   	; 0x13a2 <prvBytesInBuffer>
    18ba:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <xStreamBufferReceive+0xa2>
    18be:	c5 01       	movw	r24, r10
    18c0:	70 dd       	rcall	.-1312   	; 0x13a2 <prvBytesInBuffer>
    18c2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    18c4:	80 16       	cp	r8, r16
    18c6:	91 06       	cpc	r9, r17
    18c8:	b8 f5       	brcc	.+110    	; 0x1938 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    18ca:	81 14       	cp	r8, r1
    18cc:	91 04       	cpc	r9, r1
    18ce:	c1 f0       	breq	.+48     	; 0x1900 <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    18d0:	f5 01       	movw	r30, r10
    18d2:	e0 80       	ld	r14, Z
    18d4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    18d6:	98 01       	movw	r18, r16
    18d8:	a4 01       	movw	r20, r8
    18da:	be 01       	movw	r22, r28
    18dc:	6f 5f       	subi	r22, 0xFF	; 255
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	c5 01       	movw	r24, r10
    18e2:	fb dd       	rcall	.-1034   	; 0x14da <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    18e8:	08 19       	sub	r16, r8
    18ea:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    18ec:	68 16       	cp	r6, r24
    18ee:	79 06       	cpc	r7, r25
    18f0:	30 f4       	brcc	.+12     	; 0x18fe <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    18f2:	f5 01       	movw	r30, r10
    18f4:	f1 82       	std	Z+1, r15	; 0x01
    18f6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    18f8:	61 2c       	mov	r6, r1
    18fa:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    18fe:	3c 01       	movw	r6, r24
    1900:	98 01       	movw	r18, r16
    1902:	a3 01       	movw	r20, r6
    1904:	b2 01       	movw	r22, r4
    1906:	c5 01       	movw	r24, r10
    1908:	e8 dd       	rcall	.-1072   	; 0x14da <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    190a:	7c 01       	movw	r14, r24
    190c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    190e:	b1 f0       	breq	.+44     	; 0x193c <xStreamBufferReceive+0x11a>
    1910:	24 d2       	rcall	.+1096   	; 0x1d5a <vTaskSuspendAll>
    1912:	f5 01       	movw	r30, r10
    1914:	82 85       	ldd	r24, Z+10	; 0x0a
    1916:	93 85       	ldd	r25, Z+11	; 0x0b
    1918:	89 2b       	or	r24, r25
    191a:	61 f0       	breq	.+24     	; 0x1934 <xStreamBufferReceive+0x112>
    191c:	82 85       	ldd	r24, Z+10	; 0x0a
    191e:	93 85       	ldd	r25, Z+11	; 0x0b
    1920:	00 e0       	ldi	r16, 0x00	; 0
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	ba 01       	movw	r22, r20
    192c:	e9 d5       	rcall	.+3026   	; 0x2500 <xTaskGenericNotify>
    192e:	f5 01       	movw	r30, r10
    1930:	13 86       	std	Z+11, r1	; 0x0b
    1932:	12 86       	std	Z+10, r1	; 0x0a
    1934:	fb d2       	rcall	.+1526   	; 0x1f2c <xTaskResumeAll>
    1936:	02 c0       	rjmp	.+4      	; 0x193c <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1938:	e1 2c       	mov	r14, r1
    193a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    193c:	c7 01       	movw	r24, r14
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	9f 90       	pop	r9
    1958:	8f 90       	pop	r8
    195a:	7f 90       	pop	r7
    195c:	6f 90       	pop	r6
    195e:	5f 90       	pop	r5
    1960:	4f 90       	pop	r4
    1962:	08 95       	ret

00001964 <prvResetNextTaskUnblockTime>:
    1964:	e0 91 02 17 	lds	r30, 0x1702	; 0x801702 <pxDelayedTaskList>
    1968:	f0 91 03 17 	lds	r31, 0x1703	; 0x801703 <pxDelayedTaskList+0x1>
    196c:	80 81       	ld	r24, Z
    196e:	81 11       	cpse	r24, r1
    1970:	0c c0       	rjmp	.+24     	; 0x198a <prvResetNextTaskUnblockTime+0x26>
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	dc 01       	movw	r26, r24
    1978:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xNextTaskUnblockTime>
    197c:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1980:	a0 93 d1 16 	sts	0x16D1, r26	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1984:	b0 93 d2 16 	sts	0x16D2, r27	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1988:	08 95       	ret
    198a:	e0 91 02 17 	lds	r30, 0x1702	; 0x801702 <pxDelayedTaskList>
    198e:	f0 91 03 17 	lds	r31, 0x1703	; 0x801703 <pxDelayedTaskList+0x1>
    1992:	07 80       	ldd	r0, Z+7	; 0x07
    1994:	f0 85       	ldd	r31, Z+8	; 0x08
    1996:	e0 2d       	mov	r30, r0
    1998:	00 84       	ldd	r0, Z+8	; 0x08
    199a:	f1 85       	ldd	r31, Z+9	; 0x09
    199c:	e0 2d       	mov	r30, r0
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	a4 81       	ldd	r26, Z+4	; 0x04
    19a4:	b5 81       	ldd	r27, Z+5	; 0x05
    19a6:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xNextTaskUnblockTime>
    19aa:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    19ae:	a0 93 d1 16 	sts	0x16D1, r26	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    19b2:	b0 93 d2 16 	sts	0x16D2, r27	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    19b6:	08 95       	ret

000019b8 <prvAddCurrentTaskToDelayedList>:
    19b8:	8f 92       	push	r8
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	cf 93       	push	r28
    19ca:	6b 01       	movw	r12, r22
    19cc:	7c 01       	movw	r14, r24
    19ce:	c4 2f       	mov	r28, r20
    19d0:	80 90 d9 16 	lds	r8, 0x16D9	; 0x8016d9 <xTickCount>
    19d4:	90 90 da 16 	lds	r9, 0x16DA	; 0x8016da <xTickCount+0x1>
    19d8:	a0 90 db 16 	lds	r10, 0x16DB	; 0x8016db <xTickCount+0x2>
    19dc:	b0 90 dc 16 	lds	r11, 0x16DC	; 0x8016dc <xTickCount+0x3>
    19e0:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxCurrentTCB>
    19e4:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    19e8:	02 96       	adiw	r24, 0x02	; 2
    19ea:	5a d8       	rcall	.-3916   	; 0xaa0 <uxListRemove>
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	c8 16       	cp	r12, r24
    19f0:	d8 06       	cpc	r13, r24
    19f2:	e8 06       	cpc	r14, r24
    19f4:	f8 06       	cpc	r15, r24
    19f6:	69 f4       	brne	.+26     	; 0x1a12 <prvAddCurrentTaskToDelayedList+0x5a>
    19f8:	cc 23       	and	r28, r28
    19fa:	59 f0       	breq	.+22     	; 0x1a12 <prvAddCurrentTaskToDelayedList+0x5a>
    19fc:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <pxCurrentTCB>
    1a00:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1a04:	6e 5f       	subi	r22, 0xFE	; 254
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255
    1a08:	8e ed       	ldi	r24, 0xDE	; 222
    1a0a:	96 e1       	ldi	r25, 0x16	; 22
    1a0c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    1a10:	3f c0       	rjmp	.+126    	; 0x1a90 <prvAddCurrentTaskToDelayedList+0xd8>
    1a12:	c8 0c       	add	r12, r8
    1a14:	d9 1c       	adc	r13, r9
    1a16:	ea 1c       	adc	r14, r10
    1a18:	fb 1c       	adc	r15, r11
    1a1a:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1a1e:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1a22:	c2 82       	std	Z+2, r12	; 0x02
    1a24:	d3 82       	std	Z+3, r13	; 0x03
    1a26:	e4 82       	std	Z+4, r14	; 0x04
    1a28:	f5 82       	std	Z+5, r15	; 0x05
    1a2a:	c8 14       	cp	r12, r8
    1a2c:	d9 04       	cpc	r13, r9
    1a2e:	ea 04       	cpc	r14, r10
    1a30:	fb 04       	cpc	r15, r11
    1a32:	68 f4       	brcc	.+26     	; 0x1a4e <prvAddCurrentTaskToDelayedList+0x96>
    1a34:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <pxCurrentTCB>
    1a38:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1a3c:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <pxOverflowDelayedTaskList>
    1a40:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <pxOverflowDelayedTaskList+0x1>
    1a44:	6e 5f       	subi	r22, 0xFE	; 254
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInsert>
    1a4c:	21 c0       	rjmp	.+66     	; 0x1a90 <prvAddCurrentTaskToDelayedList+0xd8>
    1a4e:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <pxCurrentTCB>
    1a52:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1a56:	80 91 02 17 	lds	r24, 0x1702	; 0x801702 <pxDelayedTaskList>
    1a5a:	90 91 03 17 	lds	r25, 0x1703	; 0x801703 <pxDelayedTaskList+0x1>
    1a5e:	6e 5f       	subi	r22, 0xFE	; 254
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInsert>
    1a66:	80 91 cf 16 	lds	r24, 0x16CF	; 0x8016cf <xNextTaskUnblockTime>
    1a6a:	90 91 d0 16 	lds	r25, 0x16D0	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1a6e:	a0 91 d1 16 	lds	r26, 0x16D1	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1a72:	b0 91 d2 16 	lds	r27, 0x16D2	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1a76:	c8 16       	cp	r12, r24
    1a78:	d9 06       	cpc	r13, r25
    1a7a:	ea 06       	cpc	r14, r26
    1a7c:	fb 06       	cpc	r15, r27
    1a7e:	40 f4       	brcc	.+16     	; 0x1a90 <prvAddCurrentTaskToDelayedList+0xd8>
    1a80:	c0 92 cf 16 	sts	0x16CF, r12	; 0x8016cf <xNextTaskUnblockTime>
    1a84:	d0 92 d0 16 	sts	0x16D0, r13	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1a88:	e0 92 d1 16 	sts	0x16D1, r14	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1a8c:	f0 92 d2 16 	sts	0x16D2, r15	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1a90:	cf 91       	pop	r28
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	8f 90       	pop	r8
    1aa2:	08 95       	ret

00001aa4 <xTaskCreate>:
    1aa4:	4f 92       	push	r4
    1aa6:	5f 92       	push	r5
    1aa8:	6f 92       	push	r6
    1aaa:	7f 92       	push	r7
    1aac:	8f 92       	push	r8
    1aae:	9f 92       	push	r9
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	4c 01       	movw	r8, r24
    1ac4:	6b 01       	movw	r12, r22
    1ac6:	5a 01       	movw	r10, r20
    1ac8:	29 01       	movw	r4, r18
    1aca:	ca 01       	movw	r24, r20
    1acc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pvPortMalloc>
    1ad0:	3c 01       	movw	r6, r24
    1ad2:	89 2b       	or	r24, r25
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <xTaskCreate+0x34>
    1ad6:	f4 c0       	rjmp	.+488    	; 0x1cc0 <xTaskCreate+0x21c>
    1ad8:	80 e3       	ldi	r24, 0x30	; 48
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pvPortMalloc>
    1ae0:	ec 01       	movw	r28, r24
    1ae2:	89 2b       	or	r24, r25
    1ae4:	99 f0       	breq	.+38     	; 0x1b0c <xTaskCreate+0x68>
    1ae6:	7c 8e       	std	Y+28, r7	; 0x1c
    1ae8:	6b 8e       	std	Y+27, r6	; 0x1b
    1aea:	a5 01       	movw	r20, r10
    1aec:	65 ea       	ldi	r22, 0xA5	; 165
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	c3 01       	movw	r24, r6
    1af2:	0e 94 07 24 	call	0x480e	; 0x480e <memset>
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	a2 1a       	sub	r10, r18
    1afa:	b1 08       	sbc	r11, r1
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	a8 0e       	add	r10, r24
    1b02:	b9 1e       	adc	r11, r25
    1b04:	c1 14       	cp	r12, r1
    1b06:	d1 04       	cpc	r13, r1
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <xTaskCreate+0x70>
    1b0a:	20 c0       	rjmp	.+64     	; 0x1b4c <xTaskCreate+0xa8>
    1b0c:	c3 01       	movw	r24, r6
    1b0e:	0e 94 ac 04 	call	0x958	; 0x958 <vPortFree>
    1b12:	d6 c0       	rjmp	.+428    	; 0x1cc0 <xTaskCreate+0x21c>
    1b14:	d6 01       	movw	r26, r12
    1b16:	8c 91       	ld	r24, X
    1b18:	8d 8f       	std	Y+29, r24	; 0x1d
    1b1a:	8c 91       	ld	r24, X
    1b1c:	88 23       	and	r24, r24
    1b1e:	a1 f0       	breq	.+40     	; 0x1b48 <xTaskCreate+0xa4>
    1b20:	ae 01       	movw	r20, r28
    1b22:	42 5e       	subi	r20, 0xE2	; 226
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	f6 01       	movw	r30, r12
    1b28:	31 96       	adiw	r30, 0x01	; 1
    1b2a:	b8 e0       	ldi	r27, 0x08	; 8
    1b2c:	cb 0e       	add	r12, r27
    1b2e:	d1 1c       	adc	r13, r1
    1b30:	cf 01       	movw	r24, r30
    1b32:	21 91       	ld	r18, Z+
    1b34:	da 01       	movw	r26, r20
    1b36:	2d 93       	st	X+, r18
    1b38:	ad 01       	movw	r20, r26
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	8c 91       	ld	r24, X
    1b3e:	88 23       	and	r24, r24
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <xTaskCreate+0xa4>
    1b42:	ec 15       	cp	r30, r12
    1b44:	fd 05       	cpc	r31, r13
    1b46:	a1 f7       	brne	.-24     	; 0x1b30 <xTaskCreate+0x8c>
    1b48:	1c a2       	std	Y+36, r1	; 0x24
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <xTaskCreate+0xaa>
    1b4c:	1d 8e       	std	Y+29, r1	; 0x1d
    1b4e:	04 30       	cpi	r16, 0x04	; 4
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <xTaskCreate+0xb0>
    1b52:	03 e0       	ldi	r16, 0x03	; 3
    1b54:	0a 8f       	std	Y+26, r16	; 0x1a
    1b56:	0f a3       	std	Y+39, r16	; 0x27
    1b58:	18 a6       	std	Y+40, r1	; 0x28
    1b5a:	6e 01       	movw	r12, r28
    1b5c:	b2 e0       	ldi	r27, 0x02	; 2
    1b5e:	cb 0e       	add	r12, r27
    1b60:	d1 1c       	adc	r13, r1
    1b62:	c6 01       	movw	r24, r12
    1b64:	0e 94 ee 04 	call	0x9dc	; 0x9dc <vListInitialiseItem>
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0e 96       	adiw	r24, 0x0e	; 14
    1b6c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <vListInitialiseItem>
    1b70:	db 87       	std	Y+11, r29	; 0x0b
    1b72:	ca 87       	std	Y+10, r28	; 0x0a
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	80 1b       	sub	r24, r16
    1b7e:	91 09       	sbc	r25, r1
    1b80:	a1 09       	sbc	r26, r1
    1b82:	b1 09       	sbc	r27, r1
    1b84:	8e 87       	std	Y+14, r24	; 0x0e
    1b86:	9f 87       	std	Y+15, r25	; 0x0f
    1b88:	a8 8b       	std	Y+16, r26	; 0x10
    1b8a:	b9 8b       	std	Y+17, r27	; 0x11
    1b8c:	df 8b       	std	Y+23, r29	; 0x17
    1b8e:	ce 8b       	std	Y+22, r28	; 0x16
    1b90:	1a a6       	std	Y+42, r1	; 0x2a
    1b92:	19 a6       	std	Y+41, r1	; 0x29
    1b94:	1b a6       	std	Y+43, r1	; 0x2b
    1b96:	1c a6       	std	Y+44, r1	; 0x2c
    1b98:	1d a6       	std	Y+45, r1	; 0x2d
    1b9a:	1e a6       	std	Y+46, r1	; 0x2e
    1b9c:	1f a6       	std	Y+47, r1	; 0x2f
    1b9e:	a2 01       	movw	r20, r4
    1ba0:	b4 01       	movw	r22, r8
    1ba2:	c5 01       	movw	r24, r10
    1ba4:	0e 94 77 05 	call	0xaee	; 0xaee <pxPortInitialiseStack>
    1ba8:	99 83       	std	Y+1, r25	; 0x01
    1baa:	88 83       	st	Y, r24
    1bac:	e1 14       	cp	r14, r1
    1bae:	f1 04       	cpc	r15, r1
    1bb0:	19 f0       	breq	.+6      	; 0x1bb8 <xTaskCreate+0x114>
    1bb2:	f7 01       	movw	r30, r14
    1bb4:	d1 83       	std	Z+1, r29	; 0x01
    1bb6:	c0 83       	st	Z, r28
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	0f 92       	push	r0
    1bbe:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <uxCurrentNumberOfTasks>
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	80 93 dd 16 	sts	0x16DD, r24	; 0x8016dd <uxCurrentNumberOfTasks>
    1bc8:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxCurrentTCB>
    1bcc:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1bd0:	89 2b       	or	r24, r25
    1bd2:	d1 f5       	brne	.+116    	; 0x1c48 <xTaskCreate+0x1a4>
    1bd4:	d0 93 47 17 	sts	0x1747, r29	; 0x801747 <pxCurrentTCB+0x1>
    1bd8:	c0 93 46 17 	sts	0x1746, r28	; 0x801746 <pxCurrentTCB>
    1bdc:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <uxCurrentNumberOfTasks>
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <xTaskCreate+0x142>
    1be4:	41 c0       	rjmp	.+130    	; 0x1c68 <xTaskCreate+0x1c4>
    1be6:	8a e1       	ldi	r24, 0x1A	; 26
    1be8:	97 e1       	ldi	r25, 0x17	; 23
    1bea:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1bee:	85 e2       	ldi	r24, 0x25	; 37
    1bf0:	97 e1       	ldi	r25, 0x17	; 23
    1bf2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1bf6:	80 e3       	ldi	r24, 0x30	; 48
    1bf8:	97 e1       	ldi	r25, 0x17	; 23
    1bfa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1bfe:	8b e3       	ldi	r24, 0x3B	; 59
    1c00:	97 e1       	ldi	r25, 0x17	; 23
    1c02:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1c06:	8f e0       	ldi	r24, 0x0F	; 15
    1c08:	97 e1       	ldi	r25, 0x17	; 23
    1c0a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1c0e:	84 e0       	ldi	r24, 0x04	; 4
    1c10:	97 e1       	ldi	r25, 0x17	; 23
    1c12:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1c16:	85 ef       	ldi	r24, 0xF5	; 245
    1c18:	96 e1       	ldi	r25, 0x16	; 22
    1c1a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1c1e:	8a ee       	ldi	r24, 0xEA	; 234
    1c20:	96 e1       	ldi	r25, 0x16	; 22
    1c22:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1c26:	8e ed       	ldi	r24, 0xDE	; 222
    1c28:	96 e1       	ldi	r25, 0x16	; 22
    1c2a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    1c2e:	8f e0       	ldi	r24, 0x0F	; 15
    1c30:	97 e1       	ldi	r25, 0x17	; 23
    1c32:	90 93 03 17 	sts	0x1703, r25	; 0x801703 <pxDelayedTaskList+0x1>
    1c36:	80 93 02 17 	sts	0x1702, r24	; 0x801702 <pxDelayedTaskList>
    1c3a:	84 e0       	ldi	r24, 0x04	; 4
    1c3c:	97 e1       	ldi	r25, 0x17	; 23
    1c3e:	90 93 01 17 	sts	0x1701, r25	; 0x801701 <pxOverflowDelayedTaskList+0x1>
    1c42:	80 93 00 17 	sts	0x1700, r24	; 0x801700 <pxOverflowDelayedTaskList>
    1c46:	10 c0       	rjmp	.+32     	; 0x1c68 <xTaskCreate+0x1c4>
    1c48:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <xSchedulerRunning>
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	0c c0       	rjmp	.+24     	; 0x1c68 <xTaskCreate+0x1c4>
    1c50:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1c54:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1c58:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c5c:	89 17       	cp	r24, r25
    1c5e:	20 f0       	brcs	.+8      	; 0x1c68 <xTaskCreate+0x1c4>
    1c60:	d0 93 47 17 	sts	0x1747, r29	; 0x801747 <pxCurrentTCB+0x1>
    1c64:	c0 93 46 17 	sts	0x1746, r28	; 0x801746 <pxCurrentTCB>
    1c68:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <uxTaskNumber>
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <uxTaskNumber>
    1c72:	8d a3       	std	Y+37, r24	; 0x25
    1c74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c76:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    1c7a:	98 17       	cp	r25, r24
    1c7c:	10 f4       	brcc	.+4      	; 0x1c82 <xTaskCreate+0x1de>
    1c7e:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    1c82:	fb e0       	ldi	r31, 0x0B	; 11
    1c84:	8f 9f       	mul	r24, r31
    1c86:	c0 01       	movw	r24, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	b6 01       	movw	r22, r12
    1c8c:	86 5e       	subi	r24, 0xE6	; 230
    1c8e:	98 4e       	sbci	r25, 0xE8	; 232
    1c90:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <xSchedulerRunning>
    1c9c:	88 23       	and	r24, r24
    1c9e:	61 f0       	breq	.+24     	; 0x1cb8 <xTaskCreate+0x214>
    1ca0:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1ca4:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1ca8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1caa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cac:	98 17       	cp	r25, r24
    1cae:	30 f4       	brcc	.+12     	; 0x1cbc <xTaskCreate+0x218>
    1cb0:	0e 94 25 06 	call	0xc4a	; 0xc4a <vPortYield>
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <xTaskCreate+0x21e>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <xTaskCreate+0x21e>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <xTaskCreate+0x21e>
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	cf 90       	pop	r12
    1cd0:	bf 90       	pop	r11
    1cd2:	af 90       	pop	r10
    1cd4:	9f 90       	pop	r9
    1cd6:	8f 90       	pop	r8
    1cd8:	7f 90       	pop	r7
    1cda:	6f 90       	pop	r6
    1cdc:	5f 90       	pop	r5
    1cde:	4f 90       	pop	r4
    1ce0:	08 95       	ret

00001ce2 <vTaskStartScheduler>:
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	0f 93       	push	r16
    1ce8:	0f 2e       	mov	r0, r31
    1cea:	fd ec       	ldi	r31, 0xCD	; 205
    1cec:	ef 2e       	mov	r14, r31
    1cee:	f6 e1       	ldi	r31, 0x16	; 22
    1cf0:	ff 2e       	mov	r15, r31
    1cf2:	f0 2d       	mov	r31, r0
    1cf4:	00 e0       	ldi	r16, 0x00	; 0
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 ec       	ldi	r20, 0xC0	; 192
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	68 e8       	ldi	r22, 0x88	; 136
    1d00:	73 e0       	ldi	r23, 0x03	; 3
    1d02:	8d ec       	ldi	r24, 0xCD	; 205
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	ce de       	rcall	.-612    	; 0x1aa4 <xTaskCreate>
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	19 f5       	brne	.+70     	; 0x1d52 <vTaskStartScheduler+0x70>
    1d0c:	80 d5       	rcall	.+2816   	; 0x280e <xTimerCreateTimerTask>
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	01 f5       	brne	.+64     	; 0x1d52 <vTaskStartScheduler+0x70>
    1d12:	f8 94       	cli
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	dc 01       	movw	r26, r24
    1d1a:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xNextTaskUnblockTime>
    1d1e:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1d22:	a0 93 d1 16 	sts	0x16D1, r26	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1d26:	b0 93 d2 16 	sts	0x16D2, r27	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	80 93 d7 16 	sts	0x16D7, r24	; 0x8016d7 <xSchedulerRunning>
    1d30:	10 92 d9 16 	sts	0x16D9, r1	; 0x8016d9 <xTickCount>
    1d34:	10 92 da 16 	sts	0x16DA, r1	; 0x8016da <xTickCount+0x1>
    1d38:	10 92 db 16 	sts	0x16DB, r1	; 0x8016db <xTickCount+0x2>
    1d3c:	10 92 dc 16 	sts	0x16DC, r1	; 0x8016dc <xTickCount+0x3>
    1d40:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1d44:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1d48:	81 a5       	ldd	r24, Z+41	; 0x29
    1d4a:	0e 94 96 03 	call	0x72c	; 0x72c <task_switch_in>
    1d4e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <xPortStartScheduler>
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <vTaskSuspendAll>:
    1d5a:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	80 93 cc 16 	sts	0x16CC, r24	; 0x8016cc <uxSchedulerSuspended>
    1d64:	08 95       	ret

00001d66 <xTaskGetTickCount>:
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	0f 92       	push	r0
    1d6c:	60 91 d9 16 	lds	r22, 0x16D9	; 0x8016d9 <xTickCount>
    1d70:	70 91 da 16 	lds	r23, 0x16DA	; 0x8016da <xTickCount+0x1>
    1d74:	80 91 db 16 	lds	r24, 0x16DB	; 0x8016db <xTickCount+0x2>
    1d78:	90 91 dc 16 	lds	r25, 0x16DC	; 0x8016dc <xTickCount+0x3>
    1d7c:	0f 90       	pop	r0
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	08 95       	ret

00001d82 <xTaskIncrementTick>:
    1d82:	9f 92       	push	r9
    1d84:	af 92       	push	r10
    1d86:	bf 92       	push	r11
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    1d9c:	81 11       	cpse	r24, r1
    1d9e:	ad c0       	rjmp	.+346    	; 0x1efa <xTaskIncrementTick+0x178>
    1da0:	c0 90 d9 16 	lds	r12, 0x16D9	; 0x8016d9 <xTickCount>
    1da4:	d0 90 da 16 	lds	r13, 0x16DA	; 0x8016da <xTickCount+0x1>
    1da8:	e0 90 db 16 	lds	r14, 0x16DB	; 0x8016db <xTickCount+0x2>
    1dac:	f0 90 dc 16 	lds	r15, 0x16DC	; 0x8016dc <xTickCount+0x3>
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	c8 1a       	sub	r12, r24
    1db4:	d8 0a       	sbc	r13, r24
    1db6:	e8 0a       	sbc	r14, r24
    1db8:	f8 0a       	sbc	r15, r24
    1dba:	c0 92 d9 16 	sts	0x16D9, r12	; 0x8016d9 <xTickCount>
    1dbe:	d0 92 da 16 	sts	0x16DA, r13	; 0x8016da <xTickCount+0x1>
    1dc2:	e0 92 db 16 	sts	0x16DB, r14	; 0x8016db <xTickCount+0x2>
    1dc6:	f0 92 dc 16 	sts	0x16DC, r15	; 0x8016dc <xTickCount+0x3>
    1dca:	c1 14       	cp	r12, r1
    1dcc:	d1 04       	cpc	r13, r1
    1dce:	e1 04       	cpc	r14, r1
    1dd0:	f1 04       	cpc	r15, r1
    1dd2:	b1 f4       	brne	.+44     	; 0x1e00 <xTaskIncrementTick+0x7e>
    1dd4:	80 91 02 17 	lds	r24, 0x1702	; 0x801702 <pxDelayedTaskList>
    1dd8:	90 91 03 17 	lds	r25, 0x1703	; 0x801703 <pxDelayedTaskList+0x1>
    1ddc:	20 91 00 17 	lds	r18, 0x1700	; 0x801700 <pxOverflowDelayedTaskList>
    1de0:	30 91 01 17 	lds	r19, 0x1701	; 0x801701 <pxOverflowDelayedTaskList+0x1>
    1de4:	30 93 03 17 	sts	0x1703, r19	; 0x801703 <pxDelayedTaskList+0x1>
    1de8:	20 93 02 17 	sts	0x1702, r18	; 0x801702 <pxDelayedTaskList>
    1dec:	90 93 01 17 	sts	0x1701, r25	; 0x801701 <pxOverflowDelayedTaskList+0x1>
    1df0:	80 93 00 17 	sts	0x1700, r24	; 0x801700 <pxOverflowDelayedTaskList>
    1df4:	80 91 d4 16 	lds	r24, 0x16D4	; 0x8016d4 <xNumOfOverflows>
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	80 93 d4 16 	sts	0x16D4, r24	; 0x8016d4 <xNumOfOverflows>
    1dfe:	b2 dd       	rcall	.-1180   	; 0x1964 <prvResetNextTaskUnblockTime>
    1e00:	80 91 cf 16 	lds	r24, 0x16CF	; 0x8016cf <xNextTaskUnblockTime>
    1e04:	90 91 d0 16 	lds	r25, 0x16D0	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1e08:	a0 91 d1 16 	lds	r26, 0x16D1	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1e0c:	b0 91 d2 16 	lds	r27, 0x16D2	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1e10:	c8 16       	cp	r12, r24
    1e12:	d9 06       	cpc	r13, r25
    1e14:	ea 06       	cpc	r14, r26
    1e16:	fb 06       	cpc	r15, r27
    1e18:	10 f4       	brcc	.+4      	; 0x1e1e <xTaskIncrementTick+0x9c>
    1e1a:	b1 2c       	mov	r11, r1
    1e1c:	5d c0       	rjmp	.+186    	; 0x1ed8 <xTaskIncrementTick+0x156>
    1e1e:	b1 2c       	mov	r11, r1
    1e20:	0f 2e       	mov	r0, r31
    1e22:	fb e0       	ldi	r31, 0x0B	; 11
    1e24:	af 2e       	mov	r10, r31
    1e26:	f0 2d       	mov	r31, r0
    1e28:	99 24       	eor	r9, r9
    1e2a:	93 94       	inc	r9
    1e2c:	e0 91 02 17 	lds	r30, 0x1702	; 0x801702 <pxDelayedTaskList>
    1e30:	f0 91 03 17 	lds	r31, 0x1703	; 0x801703 <pxDelayedTaskList+0x1>
    1e34:	80 81       	ld	r24, Z
    1e36:	81 11       	cpse	r24, r1
    1e38:	0c c0       	rjmp	.+24     	; 0x1e52 <xTaskIncrementTick+0xd0>
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	dc 01       	movw	r26, r24
    1e40:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xNextTaskUnblockTime>
    1e44:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1e48:	a0 93 d1 16 	sts	0x16D1, r26	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1e4c:	b0 93 d2 16 	sts	0x16D2, r27	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1e50:	43 c0       	rjmp	.+134    	; 0x1ed8 <xTaskIncrementTick+0x156>
    1e52:	e0 91 02 17 	lds	r30, 0x1702	; 0x801702 <pxDelayedTaskList>
    1e56:	f0 91 03 17 	lds	r31, 0x1703	; 0x801703 <pxDelayedTaskList+0x1>
    1e5a:	07 80       	ldd	r0, Z+7	; 0x07
    1e5c:	f0 85       	ldd	r31, Z+8	; 0x08
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	c0 85       	ldd	r28, Z+8	; 0x08
    1e62:	d1 85       	ldd	r29, Z+9	; 0x09
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	ac 81       	ldd	r26, Y+4	; 0x04
    1e6a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e6c:	c8 16       	cp	r12, r24
    1e6e:	d9 06       	cpc	r13, r25
    1e70:	ea 06       	cpc	r14, r26
    1e72:	fb 06       	cpc	r15, r27
    1e74:	48 f4       	brcc	.+18     	; 0x1e88 <xTaskIncrementTick+0x106>
    1e76:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xNextTaskUnblockTime>
    1e7a:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <xNextTaskUnblockTime+0x1>
    1e7e:	a0 93 d1 16 	sts	0x16D1, r26	; 0x8016d1 <xNextTaskUnblockTime+0x2>
    1e82:	b0 93 d2 16 	sts	0x16D2, r27	; 0x8016d2 <xNextTaskUnblockTime+0x3>
    1e86:	28 c0       	rjmp	.+80     	; 0x1ed8 <xTaskIncrementTick+0x156>
    1e88:	8e 01       	movw	r16, r28
    1e8a:	0e 5f       	subi	r16, 0xFE	; 254
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	c8 01       	movw	r24, r16
    1e90:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    1e94:	88 8d       	ldd	r24, Y+24	; 0x18
    1e96:	99 8d       	ldd	r25, Y+25	; 0x19
    1e98:	89 2b       	or	r24, r25
    1e9a:	21 f0       	breq	.+8      	; 0x1ea4 <xTaskIncrementTick+0x122>
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	0e 96       	adiw	r24, 0x0e	; 14
    1ea0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    1ea4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ea6:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    1eaa:	98 17       	cp	r25, r24
    1eac:	10 f4       	brcc	.+4      	; 0x1eb2 <xTaskIncrementTick+0x130>
    1eae:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    1eb2:	a8 9e       	mul	r10, r24
    1eb4:	c0 01       	movw	r24, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	b8 01       	movw	r22, r16
    1eba:	86 5e       	subi	r24, 0xE6	; 230
    1ebc:	98 4e       	sbci	r25, 0xE8	; 232
    1ebe:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    1ec2:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1ec6:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1eca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ecc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ece:	98 17       	cp	r25, r24
    1ed0:	08 f4       	brcc	.+2      	; 0x1ed4 <xTaskIncrementTick+0x152>
    1ed2:	ac cf       	rjmp	.-168    	; 0x1e2c <xTaskIncrementTick+0xaa>
    1ed4:	b9 2c       	mov	r11, r9
    1ed6:	aa cf       	rjmp	.-172    	; 0x1e2c <xTaskIncrementTick+0xaa>
    1ed8:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1edc:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1ee0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1ee2:	8b e0       	ldi	r24, 0x0B	; 11
    1ee4:	e8 9f       	mul	r30, r24
    1ee6:	f0 01       	movw	r30, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	e6 5e       	subi	r30, 0xE6	; 230
    1eec:	f8 4e       	sbci	r31, 0xE8	; 232
    1eee:	80 81       	ld	r24, Z
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	48 f0       	brcs	.+18     	; 0x1f06 <xTaskIncrementTick+0x184>
    1ef4:	bb 24       	eor	r11, r11
    1ef6:	b3 94       	inc	r11
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <xTaskIncrementTick+0x184>
    1efa:	80 91 d6 16 	lds	r24, 0x16D6	; 0x8016d6 <uxPendedTicks>
    1efe:	8f 5f       	subi	r24, 0xFF	; 255
    1f00:	80 93 d6 16 	sts	0x16D6, r24	; 0x8016d6 <uxPendedTicks>
    1f04:	b1 2c       	mov	r11, r1
    1f06:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <xYieldPending>
    1f0a:	88 23       	and	r24, r24
    1f0c:	11 f0       	breq	.+4      	; 0x1f12 <xTaskIncrementTick+0x190>
    1f0e:	bb 24       	eor	r11, r11
    1f10:	b3 94       	inc	r11
    1f12:	8b 2d       	mov	r24, r11
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	9f 90       	pop	r9
    1f2a:	08 95       	ret

00001f2c <xTaskResumeAll>:
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    1f46:	81 50       	subi	r24, 0x01	; 1
    1f48:	80 93 cc 16 	sts	0x16CC, r24	; 0x8016cc <uxSchedulerSuspended>
    1f4c:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    1f50:	81 11       	cpse	r24, r1
    1f52:	5a c0       	rjmp	.+180    	; 0x2008 <xTaskResumeAll+0xdc>
    1f54:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <uxCurrentNumberOfTasks>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	2c c0       	rjmp	.+88     	; 0x1fb4 <xTaskResumeAll+0x88>
    1f5c:	58 c0       	rjmp	.+176    	; 0x200e <xTaskResumeAll+0xe2>
    1f5e:	d7 01       	movw	r26, r14
    1f60:	17 96       	adiw	r26, 0x07	; 7
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	18 97       	sbiw	r26, 0x08	; 8
    1f68:	c0 85       	ldd	r28, Z+8	; 0x08
    1f6a:	d1 85       	ldd	r29, Z+9	; 0x09
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	0e 96       	adiw	r24, 0x0e	; 14
    1f70:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    1f74:	8e 01       	movw	r16, r28
    1f76:	0e 5f       	subi	r16, 0xFE	; 254
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    1f80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f82:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    1f86:	98 17       	cp	r25, r24
    1f88:	10 f4       	brcc	.+4      	; 0x1f8e <xTaskResumeAll+0x62>
    1f8a:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    1f8e:	d8 9e       	mul	r13, r24
    1f90:	c0 01       	movw	r24, r0
    1f92:	11 24       	eor	r1, r1
    1f94:	b8 01       	movw	r22, r16
    1f96:	86 5e       	subi	r24, 0xE6	; 230
    1f98:	98 4e       	sbci	r25, 0xE8	; 232
    1f9a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    1f9e:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    1fa2:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    1fa6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1faa:	98 17       	cp	r25, r24
    1fac:	88 f0       	brcs	.+34     	; 0x1fd0 <xTaskResumeAll+0xa4>
    1fae:	c0 92 d5 16 	sts	0x16D5, r12	; 0x8016d5 <xYieldPending>
    1fb2:	0e c0       	rjmp	.+28     	; 0x1fd0 <xTaskResumeAll+0xa4>
    1fb4:	c0 e0       	ldi	r28, 0x00	; 0
    1fb6:	d0 e0       	ldi	r29, 0x00	; 0
    1fb8:	0f 2e       	mov	r0, r31
    1fba:	f5 ef       	ldi	r31, 0xF5	; 245
    1fbc:	ef 2e       	mov	r14, r31
    1fbe:	f6 e1       	ldi	r31, 0x16	; 22
    1fc0:	ff 2e       	mov	r15, r31
    1fc2:	f0 2d       	mov	r31, r0
    1fc4:	0f 2e       	mov	r0, r31
    1fc6:	fb e0       	ldi	r31, 0x0B	; 11
    1fc8:	df 2e       	mov	r13, r31
    1fca:	f0 2d       	mov	r31, r0
    1fcc:	cc 24       	eor	r12, r12
    1fce:	c3 94       	inc	r12
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	80 81       	ld	r24, Z
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	c3 cf       	rjmp	.-122    	; 0x1f5e <xTaskResumeAll+0x32>
    1fd8:	cd 2b       	or	r28, r29
    1fda:	09 f0       	breq	.+2      	; 0x1fde <xTaskResumeAll+0xb2>
    1fdc:	c3 dc       	rcall	.-1658   	; 0x1964 <prvResetNextTaskUnblockTime>
    1fde:	c0 91 d6 16 	lds	r28, 0x16D6	; 0x8016d6 <uxPendedTicks>
    1fe2:	cc 23       	and	r28, r28
    1fe4:	49 f0       	breq	.+18     	; 0x1ff8 <xTaskResumeAll+0xcc>
    1fe6:	d1 e0       	ldi	r29, 0x01	; 1
    1fe8:	cc de       	rcall	.-616    	; 0x1d82 <xTaskIncrementTick>
    1fea:	81 11       	cpse	r24, r1
    1fec:	d0 93 d5 16 	sts	0x16D5, r29	; 0x8016d5 <xYieldPending>
    1ff0:	c1 50       	subi	r28, 0x01	; 1
    1ff2:	d1 f7       	brne	.-12     	; 0x1fe8 <xTaskResumeAll+0xbc>
    1ff4:	10 92 d6 16 	sts	0x16D6, r1	; 0x8016d6 <uxPendedTicks>
    1ff8:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <xYieldPending>
    1ffc:	88 23       	and	r24, r24
    1ffe:	31 f0       	breq	.+12     	; 0x200c <xTaskResumeAll+0xe0>
    2000:	0e 94 25 06 	call	0xc4a	; 0xc4a <vPortYield>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	03 c0       	rjmp	.+6      	; 0x200e <xTaskResumeAll+0xe2>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	01 c0       	rjmp	.+2      	; 0x200e <xTaskResumeAll+0xe2>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	df 90       	pop	r13
    2020:	cf 90       	pop	r12
    2022:	08 95       	ret

00002024 <vTaskDelay>:
    2024:	cf 92       	push	r12
    2026:	df 92       	push	r13
    2028:	ef 92       	push	r14
    202a:	ff 92       	push	r15
    202c:	6b 01       	movw	r12, r22
    202e:	7c 01       	movw	r14, r24
    2030:	67 2b       	or	r22, r23
    2032:	68 2b       	or	r22, r24
    2034:	69 2b       	or	r22, r25
    2036:	41 f0       	breq	.+16     	; 0x2048 <vTaskDelay+0x24>
    2038:	90 de       	rcall	.-736    	; 0x1d5a <vTaskSuspendAll>
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	c7 01       	movw	r24, r14
    203e:	b6 01       	movw	r22, r12
    2040:	bb dc       	rcall	.-1674   	; 0x19b8 <prvAddCurrentTaskToDelayedList>
    2042:	74 df       	rcall	.-280    	; 0x1f2c <xTaskResumeAll>
    2044:	81 11       	cpse	r24, r1
    2046:	02 c0       	rjmp	.+4      	; 0x204c <vTaskDelay+0x28>
    2048:	0e 94 25 06 	call	0xc4a	; 0xc4a <vPortYield>
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	08 95       	ret

00002056 <vTaskSwitchContext>:
    2056:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    205a:	88 23       	and	r24, r24
    205c:	21 f0       	breq	.+8      	; 0x2066 <vTaskSwitchContext+0x10>
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <xYieldPending>
    2064:	08 95       	ret
    2066:	10 92 d5 16 	sts	0x16D5, r1	; 0x8016d5 <xYieldPending>
    206a:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    206e:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2072:	81 a5       	ldd	r24, Z+41	; 0x29
    2074:	0e 94 a0 03 	call	0x740	; 0x740 <task_switch_out>
    2078:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <pxCurrentTCB>
    207c:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2080:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2084:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2088:	2d 91       	ld	r18, X+
    208a:	3c 91       	ld	r19, X
    208c:	83 8d       	ldd	r24, Z+27	; 0x1b
    208e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2090:	82 17       	cp	r24, r18
    2092:	93 07       	cpc	r25, r19
    2094:	58 f0       	brcs	.+22     	; 0x20ac <vTaskSwitchContext+0x56>
    2096:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <pxCurrentTCB>
    209a:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    209e:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxCurrentTCB>
    20a2:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    20a6:	63 5e       	subi	r22, 0xE3	; 227
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	d3 d4       	rcall	.+2470   	; 0x2a52 <vApplicationStackOverflowHook>
    20ac:	80 91 d8 16 	lds	r24, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	9b e0       	ldi	r25, 0x0B	; 11
    20b6:	89 9f       	mul	r24, r25
    20b8:	f0 01       	movw	r30, r0
    20ba:	11 24       	eor	r1, r1
    20bc:	e6 5e       	subi	r30, 0xE6	; 230
    20be:	f8 4e       	sbci	r31, 0xE8	; 232
    20c0:	90 81       	ld	r25, Z
    20c2:	91 11       	cpse	r25, r1
    20c4:	0e c0       	rjmp	.+28     	; 0x20e2 <vTaskSwitchContext+0x8c>
    20c6:	4b e0       	ldi	r20, 0x0B	; 11
    20c8:	81 50       	subi	r24, 0x01	; 1
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	42 9f       	mul	r20, r18
    20d0:	f0 01       	movw	r30, r0
    20d2:	43 9f       	mul	r20, r19
    20d4:	f0 0d       	add	r31, r0
    20d6:	11 24       	eor	r1, r1
    20d8:	e6 5e       	subi	r30, 0xE6	; 230
    20da:	f8 4e       	sbci	r31, 0xE8	; 232
    20dc:	90 81       	ld	r25, Z
    20de:	99 23       	and	r25, r25
    20e0:	99 f3       	breq	.-26     	; 0x20c8 <vTaskSwitchContext+0x72>
    20e2:	9b e0       	ldi	r25, 0x0B	; 11
    20e4:	92 9f       	mul	r25, r18
    20e6:	a0 01       	movw	r20, r0
    20e8:	93 9f       	mul	r25, r19
    20ea:	50 0d       	add	r21, r0
    20ec:	11 24       	eor	r1, r1
    20ee:	da 01       	movw	r26, r20
    20f0:	a6 5e       	subi	r26, 0xE6	; 230
    20f2:	b8 4e       	sbci	r27, 0xE8	; 232
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	12 97       	sbiw	r26, 0x02	; 2
    20fc:	04 80       	ldd	r0, Z+4	; 0x04
    20fe:	f5 81       	ldd	r31, Z+5	; 0x05
    2100:	e0 2d       	mov	r30, r0
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	fc 93       	st	X, r31
    2106:	ee 93       	st	-X, r30
    2108:	11 97       	sbiw	r26, 0x01	; 1
    210a:	43 5e       	subi	r20, 0xE3	; 227
    210c:	58 4e       	sbci	r21, 0xE8	; 232
    210e:	e4 17       	cp	r30, r20
    2110:	f5 07       	cpc	r31, r21
    2112:	29 f4       	brne	.+10     	; 0x211e <vTaskSwitchContext+0xc8>
    2114:	44 81       	ldd	r20, Z+4	; 0x04
    2116:	55 81       	ldd	r21, Z+5	; 0x05
    2118:	fd 01       	movw	r30, r26
    211a:	52 83       	std	Z+2, r21	; 0x02
    211c:	41 83       	std	Z+1, r20	; 0x01
    211e:	9b e0       	ldi	r25, 0x0B	; 11
    2120:	92 9f       	mul	r25, r18
    2122:	f0 01       	movw	r30, r0
    2124:	93 9f       	mul	r25, r19
    2126:	f0 0d       	add	r31, r0
    2128:	11 24       	eor	r1, r1
    212a:	e6 5e       	subi	r30, 0xE6	; 230
    212c:	f8 4e       	sbci	r31, 0xE8	; 232
    212e:	01 80       	ldd	r0, Z+1	; 0x01
    2130:	f2 81       	ldd	r31, Z+2	; 0x02
    2132:	e0 2d       	mov	r30, r0
    2134:	20 85       	ldd	r18, Z+8	; 0x08
    2136:	31 85       	ldd	r19, Z+9	; 0x09
    2138:	30 93 47 17 	sts	0x1747, r19	; 0x801747 <pxCurrentTCB+0x1>
    213c:	20 93 46 17 	sts	0x1746, r18	; 0x801746 <pxCurrentTCB>
    2140:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    2144:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2148:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    214c:	81 a5       	ldd	r24, Z+41	; 0x29
    214e:	0c 94 96 03 	jmp	0x72c	; 0x72c <task_switch_in>
    2152:	08 95       	ret

00002154 <vTaskPlaceOnEventList>:
    2154:	cf 92       	push	r12
    2156:	df 92       	push	r13
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	6a 01       	movw	r12, r20
    215e:	7b 01       	movw	r14, r22
    2160:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <pxCurrentTCB>
    2164:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2168:	62 5f       	subi	r22, 0xF2	; 242
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInsert>
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	20 dc       	rcall	.-1984   	; 0x19b8 <prvAddCurrentTaskToDelayedList>
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	08 95       	ret

00002182 <vTaskPlaceOnEventListRestricted>:
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	cf 93       	push	r28
    218c:	6a 01       	movw	r12, r20
    218e:	7b 01       	movw	r14, r22
    2190:	c2 2f       	mov	r28, r18
    2192:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <pxCurrentTCB>
    2196:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    219a:	62 5f       	subi	r22, 0xF2	; 242
    219c:	7f 4f       	sbci	r23, 0xFF	; 255
    219e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    21a2:	cc 23       	and	r28, r28
    21a4:	21 f0       	breq	.+8      	; 0x21ae <vTaskPlaceOnEventListRestricted+0x2c>
    21a6:	cc 24       	eor	r12, r12
    21a8:	ca 94       	dec	r12
    21aa:	dc 2c       	mov	r13, r12
    21ac:	76 01       	movw	r14, r12
    21ae:	4c 2f       	mov	r20, r28
    21b0:	c7 01       	movw	r24, r14
    21b2:	b6 01       	movw	r22, r12
    21b4:	01 dc       	rcall	.-2046   	; 0x19b8 <prvAddCurrentTaskToDelayedList>
    21b6:	cf 91       	pop	r28
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	cf 90       	pop	r12
    21c0:	08 95       	ret

000021c2 <xTaskRemoveFromEventList>:
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	dc 01       	movw	r26, r24
    21cc:	17 96       	adiw	r26, 0x07	; 7
    21ce:	ed 91       	ld	r30, X+
    21d0:	fc 91       	ld	r31, X
    21d2:	18 97       	sbiw	r26, 0x08	; 8
    21d4:	c0 85       	ldd	r28, Z+8	; 0x08
    21d6:	d1 85       	ldd	r29, Z+9	; 0x09
    21d8:	8e 01       	movw	r16, r28
    21da:	02 5f       	subi	r16, 0xF2	; 242
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	c8 01       	movw	r24, r16
    21e0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    21e4:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    21e8:	81 11       	cpse	r24, r1
    21ea:	16 c0       	rjmp	.+44     	; 0x2218 <__stack+0x19>
    21ec:	0c 50       	subi	r16, 0x0C	; 12
    21ee:	11 09       	sbc	r17, r1
    21f0:	c8 01       	movw	r24, r16
    21f2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    21f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21f8:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    21fc:	98 17       	cp	r25, r24
    21fe:	10 f4       	brcc	.+4      	; 0x2204 <__stack+0x5>
    2200:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    2204:	bb e0       	ldi	r27, 0x0B	; 11
    2206:	8b 9f       	mul	r24, r27
    2208:	c0 01       	movw	r24, r0
    220a:	11 24       	eor	r1, r1
    220c:	b8 01       	movw	r22, r16
    220e:	86 5e       	subi	r24, 0xE6	; 230
    2210:	98 4e       	sbci	r25, 0xE8	; 232
    2212:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <__stack+0x23>
    2218:	b8 01       	movw	r22, r16
    221a:	85 ef       	ldi	r24, 0xF5	; 245
    221c:	96 e1       	ldi	r25, 0x16	; 22
    221e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    2222:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2226:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    222a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    222c:	82 8d       	ldd	r24, Z+26	; 0x1a
    222e:	89 17       	cp	r24, r25
    2230:	20 f4       	brcc	.+8      	; 0x223a <__stack+0x3b>
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <xYieldPending>
    2238:	01 c0       	rjmp	.+2      	; 0x223c <__stack+0x3d>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <vTaskSetTimeOutState>:
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	0f 92       	push	r0
    224c:	20 91 d4 16 	lds	r18, 0x16D4	; 0x8016d4 <xNumOfOverflows>
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
    2254:	40 91 d9 16 	lds	r20, 0x16D9	; 0x8016d9 <xTickCount>
    2258:	50 91 da 16 	lds	r21, 0x16DA	; 0x8016da <xTickCount+0x1>
    225c:	60 91 db 16 	lds	r22, 0x16DB	; 0x8016db <xTickCount+0x2>
    2260:	70 91 dc 16 	lds	r23, 0x16DC	; 0x8016dc <xTickCount+0x3>
    2264:	41 83       	std	Z+1, r20	; 0x01
    2266:	52 83       	std	Z+2, r21	; 0x02
    2268:	63 83       	std	Z+3, r22	; 0x03
    226a:	74 83       	std	Z+4, r23	; 0x04
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	08 95       	ret

00002272 <vTaskInternalSetTimeOutState>:
    2272:	20 91 d4 16 	lds	r18, 0x16D4	; 0x8016d4 <xNumOfOverflows>
    2276:	fc 01       	movw	r30, r24
    2278:	20 83       	st	Z, r18
    227a:	40 91 d9 16 	lds	r20, 0x16D9	; 0x8016d9 <xTickCount>
    227e:	50 91 da 16 	lds	r21, 0x16DA	; 0x8016da <xTickCount+0x1>
    2282:	60 91 db 16 	lds	r22, 0x16DB	; 0x8016db <xTickCount+0x2>
    2286:	70 91 dc 16 	lds	r23, 0x16DC	; 0x8016dc <xTickCount+0x3>
    228a:	41 83       	std	Z+1, r20	; 0x01
    228c:	52 83       	std	Z+2, r21	; 0x02
    228e:	63 83       	std	Z+3, r22	; 0x03
    2290:	74 83       	std	Z+4, r23	; 0x04
    2292:	08 95       	ret

00002294 <xTaskCheckForTimeOut>:
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	fb 01       	movw	r30, r22
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	0f 92       	push	r0
    22ac:	40 91 d9 16 	lds	r20, 0x16D9	; 0x8016d9 <xTickCount>
    22b0:	50 91 da 16 	lds	r21, 0x16DA	; 0x8016da <xTickCount+0x1>
    22b4:	60 91 db 16 	lds	r22, 0x16DB	; 0x8016db <xTickCount+0x2>
    22b8:	70 91 dc 16 	lds	r23, 0x16DC	; 0x8016dc <xTickCount+0x3>
    22bc:	00 81       	ld	r16, Z
    22be:	11 81       	ldd	r17, Z+1	; 0x01
    22c0:	22 81       	ldd	r18, Z+2	; 0x02
    22c2:	33 81       	ldd	r19, Z+3	; 0x03
    22c4:	0f 3f       	cpi	r16, 0xFF	; 255
    22c6:	af ef       	ldi	r26, 0xFF	; 255
    22c8:	1a 07       	cpc	r17, r26
    22ca:	2a 07       	cpc	r18, r26
    22cc:	3a 07       	cpc	r19, r26
    22ce:	49 f1       	breq	.+82     	; 0x2322 <xTaskCheckForTimeOut+0x8e>
    22d0:	ec 01       	movw	r28, r24
    22d2:	c9 80       	ldd	r12, Y+1	; 0x01
    22d4:	da 80       	ldd	r13, Y+2	; 0x02
    22d6:	eb 80       	ldd	r14, Y+3	; 0x03
    22d8:	fc 80       	ldd	r15, Y+4	; 0x04
    22da:	a0 91 d4 16 	lds	r26, 0x16D4	; 0x8016d4 <xNumOfOverflows>
    22de:	b8 81       	ld	r27, Y
    22e0:	ba 17       	cp	r27, r26
    22e2:	29 f0       	breq	.+10     	; 0x22ee <xTaskCheckForTimeOut+0x5a>
    22e4:	4c 15       	cp	r20, r12
    22e6:	5d 05       	cpc	r21, r13
    22e8:	6e 05       	cpc	r22, r14
    22ea:	7f 05       	cpc	r23, r15
    22ec:	e0 f4       	brcc	.+56     	; 0x2326 <xTaskCheckForTimeOut+0x92>
    22ee:	4c 19       	sub	r20, r12
    22f0:	5d 09       	sbc	r21, r13
    22f2:	6e 09       	sbc	r22, r14
    22f4:	7f 09       	sbc	r23, r15
    22f6:	40 17       	cp	r20, r16
    22f8:	51 07       	cpc	r21, r17
    22fa:	62 07       	cpc	r22, r18
    22fc:	73 07       	cpc	r23, r19
    22fe:	58 f4       	brcc	.+22     	; 0x2316 <xTaskCheckForTimeOut+0x82>
    2300:	04 1b       	sub	r16, r20
    2302:	15 0b       	sbc	r17, r21
    2304:	26 0b       	sbc	r18, r22
    2306:	37 0b       	sbc	r19, r23
    2308:	00 83       	st	Z, r16
    230a:	11 83       	std	Z+1, r17	; 0x01
    230c:	22 83       	std	Z+2, r18	; 0x02
    230e:	33 83       	std	Z+3, r19	; 0x03
    2310:	b0 df       	rcall	.-160    	; 0x2272 <vTaskInternalSetTimeOutState>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <xTaskCheckForTimeOut+0x94>
    2316:	10 82       	st	Z, r1
    2318:	11 82       	std	Z+1, r1	; 0x01
    231a:	12 82       	std	Z+2, r1	; 0x02
    231c:	13 82       	std	Z+3, r1	; 0x03
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <xTaskCheckForTimeOut+0x94>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <xTaskCheckForTimeOut+0x94>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	08 95       	ret

0000233e <vTaskMissedYield>:
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <xYieldPending>
    2344:	08 95       	ret

00002346 <xTaskGetCurrentTaskHandle>:
    2346:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxCurrentTCB>
    234a:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    234e:	08 95       	ret

00002350 <xTaskGetSchedulerState>:
    2350:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <xSchedulerRunning>
    2354:	88 23       	and	r24, r24
    2356:	31 f0       	breq	.+12     	; 0x2364 <xTaskGetSchedulerState+0x14>
    2358:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    235c:	88 23       	and	r24, r24
    235e:	21 f0       	breq	.+8      	; 0x2368 <xTaskGetSchedulerState+0x18>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	08 95       	ret
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	08 95       	ret
    2368:	82 e0       	ldi	r24, 0x02	; 2
    236a:	08 95       	ret

0000236c <xTaskPriorityDisinherit>:
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	fc 01       	movw	r30, r24
    2376:	89 2b       	or	r24, r25
    2378:	79 f1       	breq	.+94     	; 0x23d8 <xTaskPriorityDisinherit+0x6c>
    237a:	80 a5       	ldd	r24, Z+40	; 0x28
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	80 a7       	std	Z+40, r24	; 0x28
    2380:	22 8d       	ldd	r18, Z+26	; 0x1a
    2382:	97 a1       	ldd	r25, Z+39	; 0x27
    2384:	29 17       	cp	r18, r25
    2386:	51 f1       	breq	.+84     	; 0x23dc <xTaskPriorityDisinherit+0x70>
    2388:	81 11       	cpse	r24, r1
    238a:	2a c0       	rjmp	.+84     	; 0x23e0 <xTaskPriorityDisinherit+0x74>
    238c:	ef 01       	movw	r28, r30
    238e:	8f 01       	movw	r16, r30
    2390:	0e 5f       	subi	r16, 0xFE	; 254
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	c8 01       	movw	r24, r16
    2396:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    239a:	8f a1       	ldd	r24, Y+39	; 0x27
    239c:	8a 8f       	std	Y+26, r24	; 0x1a
    239e:	44 e0       	ldi	r20, 0x04	; 4
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	48 1b       	sub	r20, r24
    23a8:	51 09       	sbc	r21, r1
    23aa:	61 09       	sbc	r22, r1
    23ac:	71 09       	sbc	r23, r1
    23ae:	4e 87       	std	Y+14, r20	; 0x0e
    23b0:	5f 87       	std	Y+15, r21	; 0x0f
    23b2:	68 8b       	std	Y+16, r22	; 0x10
    23b4:	79 8b       	std	Y+17, r23	; 0x11
    23b6:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    23ba:	98 17       	cp	r25, r24
    23bc:	10 f4       	brcc	.+4      	; 0x23c2 <xTaskPriorityDisinherit+0x56>
    23be:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    23c2:	2b e0       	ldi	r18, 0x0B	; 11
    23c4:	82 9f       	mul	r24, r18
    23c6:	c0 01       	movw	r24, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	b8 01       	movw	r22, r16
    23cc:	86 5e       	subi	r24, 0xE6	; 230
    23ce:	98 4e       	sbci	r25, 0xE8	; 232
    23d0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	05 c0       	rjmp	.+10     	; 0x23e2 <xTaskPriorityDisinherit+0x76>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <xTaskPriorityDisinherit+0x76>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <xTaskPriorityDisinherit+0x76>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	08 95       	ret

000023ec <xTaskNotifyWait>:
    23ec:	4f 92       	push	r4
    23ee:	5f 92       	push	r5
    23f0:	6f 92       	push	r6
    23f2:	7f 92       	push	r7
    23f4:	8f 92       	push	r8
    23f6:	9f 92       	push	r9
    23f8:	af 92       	push	r10
    23fa:	bf 92       	push	r11
    23fc:	cf 92       	push	r12
    23fe:	df 92       	push	r13
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	49 01       	movw	r8, r18
    240a:	5a 01       	movw	r10, r20
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	0f 92       	push	r0
    2412:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2416:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    241a:	27 a5       	ldd	r18, Z+47	; 0x2f
    241c:	22 30       	cpi	r18, 0x02	; 2
    241e:	39 f1       	breq	.+78     	; 0x246e <xTaskNotifyWait+0x82>
    2420:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2424:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2428:	43 a4       	ldd	r4, Z+43	; 0x2b
    242a:	54 a4       	ldd	r5, Z+44	; 0x2c
    242c:	65 a4       	ldd	r6, Z+45	; 0x2d
    242e:	76 a4       	ldd	r7, Z+46	; 0x2e
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	80 95       	com	r24
    2436:	90 95       	com	r25
    2438:	a0 95       	com	r26
    243a:	b0 95       	com	r27
    243c:	84 21       	and	r24, r4
    243e:	95 21       	and	r25, r5
    2440:	a6 21       	and	r26, r6
    2442:	b7 21       	and	r27, r7
    2444:	83 a7       	std	Z+43, r24	; 0x2b
    2446:	94 a7       	std	Z+44, r25	; 0x2c
    2448:	a5 a7       	std	Z+45, r26	; 0x2d
    244a:	b6 a7       	std	Z+46, r27	; 0x2e
    244c:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2450:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	87 a7       	std	Z+47, r24	; 0x2f
    2458:	c1 14       	cp	r12, r1
    245a:	d1 04       	cpc	r13, r1
    245c:	e1 04       	cpc	r14, r1
    245e:	f1 04       	cpc	r15, r1
    2460:	31 f0       	breq	.+12     	; 0x246e <xTaskNotifyWait+0x82>
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	c7 01       	movw	r24, r14
    2466:	b6 01       	movw	r22, r12
    2468:	a7 da       	rcall	.-2738   	; 0x19b8 <prvAddCurrentTaskToDelayedList>
    246a:	0e 94 25 06 	call	0xc4a	; 0xc4a <vPortYield>
    246e:	0f 90       	pop	r0
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	0f 92       	push	r0
    2478:	01 15       	cp	r16, r1
    247a:	11 05       	cpc	r17, r1
    247c:	69 f0       	breq	.+26     	; 0x2498 <xTaskNotifyWait+0xac>
    247e:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    2482:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    2486:	83 a5       	ldd	r24, Z+43	; 0x2b
    2488:	94 a5       	ldd	r25, Z+44	; 0x2c
    248a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    248c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    248e:	f8 01       	movw	r30, r16
    2490:	80 83       	st	Z, r24
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	a2 83       	std	Z+2, r26	; 0x02
    2496:	b3 83       	std	Z+3, r27	; 0x03
    2498:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    249c:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    24a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	b1 f4       	brne	.+44     	; 0x24d2 <xTaskNotifyWait+0xe6>
    24a6:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    24aa:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    24ae:	83 a5       	ldd	r24, Z+43	; 0x2b
    24b0:	94 a5       	ldd	r25, Z+44	; 0x2c
    24b2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    24b4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    24b6:	80 94       	com	r8
    24b8:	90 94       	com	r9
    24ba:	a0 94       	com	r10
    24bc:	b0 94       	com	r11
    24be:	88 22       	and	r8, r24
    24c0:	99 22       	and	r9, r25
    24c2:	aa 22       	and	r10, r26
    24c4:	bb 22       	and	r11, r27
    24c6:	83 a6       	std	Z+43, r8	; 0x2b
    24c8:	94 a6       	std	Z+44, r9	; 0x2c
    24ca:	a5 a6       	std	Z+45, r10	; 0x2d
    24cc:	b6 a6       	std	Z+46, r11	; 0x2e
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <xTaskNotifyWait+0xe8>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    24d8:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    24dc:	17 a6       	std	Z+47, r1	; 0x2f
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	df 90       	pop	r13
    24ec:	cf 90       	pop	r12
    24ee:	bf 90       	pop	r11
    24f0:	af 90       	pop	r10
    24f2:	9f 90       	pop	r9
    24f4:	8f 90       	pop	r8
    24f6:	7f 90       	pop	r7
    24f8:	6f 90       	pop	r6
    24fa:	5f 90       	pop	r5
    24fc:	4f 90       	pop	r4
    24fe:	08 95       	ret

00002500 <xTaskGenericNotify>:
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	fc 01       	movw	r30, r24
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	0f 92       	push	r0
    2510:	01 15       	cp	r16, r1
    2512:	11 05       	cpc	r17, r1
    2514:	49 f0       	breq	.+18     	; 0x2528 <xTaskGenericNotify+0x28>
    2516:	83 a5       	ldd	r24, Z+43	; 0x2b
    2518:	94 a5       	ldd	r25, Z+44	; 0x2c
    251a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    251c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    251e:	e8 01       	movw	r28, r16
    2520:	88 83       	st	Y, r24
    2522:	99 83       	std	Y+1, r25	; 0x01
    2524:	aa 83       	std	Y+2, r26	; 0x02
    2526:	bb 83       	std	Y+3, r27	; 0x03
    2528:	87 a5       	ldd	r24, Z+47	; 0x2f
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	97 a7       	std	Z+47, r25	; 0x2f
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	b1 f0       	breq	.+44     	; 0x255e <xTaskGenericNotify+0x5e>
    2532:	18 f4       	brcc	.+6      	; 0x253a <xTaskGenericNotify+0x3a>
    2534:	21 30       	cpi	r18, 0x01	; 1
    2536:	31 f0       	breq	.+12     	; 0x2544 <xTaskGenericNotify+0x44>
    2538:	2a c0       	rjmp	.+84     	; 0x258e <xTaskGenericNotify+0x8e>
    253a:	23 30       	cpi	r18, 0x03	; 3
    253c:	e9 f0       	breq	.+58     	; 0x2578 <xTaskGenericNotify+0x78>
    253e:	24 30       	cpi	r18, 0x04	; 4
    2540:	01 f1       	breq	.+64     	; 0x2582 <xTaskGenericNotify+0x82>
    2542:	25 c0       	rjmp	.+74     	; 0x258e <xTaskGenericNotify+0x8e>
    2544:	03 a5       	ldd	r16, Z+43	; 0x2b
    2546:	14 a5       	ldd	r17, Z+44	; 0x2c
    2548:	25 a5       	ldd	r18, Z+45	; 0x2d
    254a:	36 a5       	ldd	r19, Z+46	; 0x2e
    254c:	40 2b       	or	r20, r16
    254e:	51 2b       	or	r21, r17
    2550:	62 2b       	or	r22, r18
    2552:	73 2b       	or	r23, r19
    2554:	43 a7       	std	Z+43, r20	; 0x2b
    2556:	54 a7       	std	Z+44, r21	; 0x2c
    2558:	65 a7       	std	Z+45, r22	; 0x2d
    255a:	76 a7       	std	Z+46, r23	; 0x2e
    255c:	18 c0       	rjmp	.+48     	; 0x258e <xTaskGenericNotify+0x8e>
    255e:	43 a5       	ldd	r20, Z+43	; 0x2b
    2560:	54 a5       	ldd	r21, Z+44	; 0x2c
    2562:	65 a5       	ldd	r22, Z+45	; 0x2d
    2564:	76 a5       	ldd	r23, Z+46	; 0x2e
    2566:	4f 5f       	subi	r20, 0xFF	; 255
    2568:	5f 4f       	sbci	r21, 0xFF	; 255
    256a:	6f 4f       	sbci	r22, 0xFF	; 255
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	43 a7       	std	Z+43, r20	; 0x2b
    2570:	54 a7       	std	Z+44, r21	; 0x2c
    2572:	65 a7       	std	Z+45, r22	; 0x2d
    2574:	76 a7       	std	Z+46, r23	; 0x2e
    2576:	0b c0       	rjmp	.+22     	; 0x258e <xTaskGenericNotify+0x8e>
    2578:	43 a7       	std	Z+43, r20	; 0x2b
    257a:	54 a7       	std	Z+44, r21	; 0x2c
    257c:	65 a7       	std	Z+45, r22	; 0x2d
    257e:	76 a7       	std	Z+46, r23	; 0x2e
    2580:	06 c0       	rjmp	.+12     	; 0x258e <xTaskGenericNotify+0x8e>
    2582:	82 30       	cpi	r24, 0x02	; 2
    2584:	49 f1       	breq	.+82     	; 0x25d8 <xTaskGenericNotify+0xd8>
    2586:	43 a7       	std	Z+43, r20	; 0x2b
    2588:	54 a7       	std	Z+44, r21	; 0x2c
    258a:	65 a7       	std	Z+45, r22	; 0x2d
    258c:	76 a7       	std	Z+46, r23	; 0x2e
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	29 f5       	brne	.+74     	; 0x25dc <xTaskGenericNotify+0xdc>
    2592:	ef 01       	movw	r28, r30
    2594:	8f 01       	movw	r16, r30
    2596:	0e 5f       	subi	r16, 0xFE	; 254
    2598:	1f 4f       	sbci	r17, 0xFF	; 255
    259a:	c8 01       	movw	r24, r16
    259c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    25a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25a2:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    25a6:	98 17       	cp	r25, r24
    25a8:	10 f4       	brcc	.+4      	; 0x25ae <xTaskGenericNotify+0xae>
    25aa:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    25ae:	2b e0       	ldi	r18, 0x0B	; 11
    25b0:	82 9f       	mul	r24, r18
    25b2:	c0 01       	movw	r24, r0
    25b4:	11 24       	eor	r1, r1
    25b6:	b8 01       	movw	r22, r16
    25b8:	86 5e       	subi	r24, 0xE6	; 230
    25ba:	98 4e       	sbci	r25, 0xE8	; 232
    25bc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    25c0:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    25c4:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    25c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    25cc:	89 17       	cp	r24, r25
    25ce:	40 f4       	brcc	.+16     	; 0x25e0 <xTaskGenericNotify+0xe0>
    25d0:	0e 94 25 06 	call	0xc4a	; 0xc4a <vPortYield>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	05 c0       	rjmp	.+10     	; 0x25e2 <xTaskGenericNotify+0xe2>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <xTaskGenericNotify+0xe2>
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <xTaskGenericNotify+0xe2>
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	08 95       	ret

000025f0 <xTaskGenericNotifyFromISR>:
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	fc 01       	movw	r30, r24
    25fe:	01 15       	cp	r16, r1
    2600:	11 05       	cpc	r17, r1
    2602:	49 f0       	breq	.+18     	; 0x2616 <xTaskGenericNotifyFromISR+0x26>
    2604:	83 a5       	ldd	r24, Z+43	; 0x2b
    2606:	94 a5       	ldd	r25, Z+44	; 0x2c
    2608:	a5 a5       	ldd	r26, Z+45	; 0x2d
    260a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    260c:	e8 01       	movw	r28, r16
    260e:	88 83       	st	Y, r24
    2610:	99 83       	std	Y+1, r25	; 0x01
    2612:	aa 83       	std	Y+2, r26	; 0x02
    2614:	bb 83       	std	Y+3, r27	; 0x03
    2616:	87 a5       	ldd	r24, Z+47	; 0x2f
    2618:	92 e0       	ldi	r25, 0x02	; 2
    261a:	97 a7       	std	Z+47, r25	; 0x2f
    261c:	22 30       	cpi	r18, 0x02	; 2
    261e:	b1 f0       	breq	.+44     	; 0x264c <xTaskGenericNotifyFromISR+0x5c>
    2620:	18 f4       	brcc	.+6      	; 0x2628 <xTaskGenericNotifyFromISR+0x38>
    2622:	21 30       	cpi	r18, 0x01	; 1
    2624:	31 f0       	breq	.+12     	; 0x2632 <xTaskGenericNotifyFromISR+0x42>
    2626:	2a c0       	rjmp	.+84     	; 0x267c <xTaskGenericNotifyFromISR+0x8c>
    2628:	23 30       	cpi	r18, 0x03	; 3
    262a:	e9 f0       	breq	.+58     	; 0x2666 <xTaskGenericNotifyFromISR+0x76>
    262c:	24 30       	cpi	r18, 0x04	; 4
    262e:	01 f1       	breq	.+64     	; 0x2670 <xTaskGenericNotifyFromISR+0x80>
    2630:	25 c0       	rjmp	.+74     	; 0x267c <xTaskGenericNotifyFromISR+0x8c>
    2632:	03 a5       	ldd	r16, Z+43	; 0x2b
    2634:	14 a5       	ldd	r17, Z+44	; 0x2c
    2636:	25 a5       	ldd	r18, Z+45	; 0x2d
    2638:	36 a5       	ldd	r19, Z+46	; 0x2e
    263a:	40 2b       	or	r20, r16
    263c:	51 2b       	or	r21, r17
    263e:	62 2b       	or	r22, r18
    2640:	73 2b       	or	r23, r19
    2642:	43 a7       	std	Z+43, r20	; 0x2b
    2644:	54 a7       	std	Z+44, r21	; 0x2c
    2646:	65 a7       	std	Z+45, r22	; 0x2d
    2648:	76 a7       	std	Z+46, r23	; 0x2e
    264a:	18 c0       	rjmp	.+48     	; 0x267c <xTaskGenericNotifyFromISR+0x8c>
    264c:	43 a5       	ldd	r20, Z+43	; 0x2b
    264e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2650:	65 a5       	ldd	r22, Z+45	; 0x2d
    2652:	76 a5       	ldd	r23, Z+46	; 0x2e
    2654:	4f 5f       	subi	r20, 0xFF	; 255
    2656:	5f 4f       	sbci	r21, 0xFF	; 255
    2658:	6f 4f       	sbci	r22, 0xFF	; 255
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	43 a7       	std	Z+43, r20	; 0x2b
    265e:	54 a7       	std	Z+44, r21	; 0x2c
    2660:	65 a7       	std	Z+45, r22	; 0x2d
    2662:	76 a7       	std	Z+46, r23	; 0x2e
    2664:	0b c0       	rjmp	.+22     	; 0x267c <xTaskGenericNotifyFromISR+0x8c>
    2666:	43 a7       	std	Z+43, r20	; 0x2b
    2668:	54 a7       	std	Z+44, r21	; 0x2c
    266a:	65 a7       	std	Z+45, r22	; 0x2d
    266c:	76 a7       	std	Z+46, r23	; 0x2e
    266e:	06 c0       	rjmp	.+12     	; 0x267c <xTaskGenericNotifyFromISR+0x8c>
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	d9 f1       	breq	.+118    	; 0x26ea <xTaskGenericNotifyFromISR+0xfa>
    2674:	43 a7       	std	Z+43, r20	; 0x2b
    2676:	54 a7       	std	Z+44, r21	; 0x2c
    2678:	65 a7       	std	Z+45, r22	; 0x2d
    267a:	76 a7       	std	Z+46, r23	; 0x2e
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	b9 f5       	brne	.+110    	; 0x26ee <xTaskGenericNotifyFromISR+0xfe>
    2680:	ef 01       	movw	r28, r30
    2682:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <uxSchedulerSuspended>
    2686:	81 11       	cpse	r24, r1
    2688:	17 c0       	rjmp	.+46     	; 0x26b8 <xTaskGenericNotifyFromISR+0xc8>
    268a:	8f 01       	movw	r16, r30
    268c:	0e 5f       	subi	r16, 0xFE	; 254
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	c8 01       	movw	r24, r16
    2692:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
    2696:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2698:	90 91 d8 16 	lds	r25, 0x16D8	; 0x8016d8 <uxTopReadyPriority>
    269c:	98 17       	cp	r25, r24
    269e:	10 f4       	brcc	.+4      	; 0x26a4 <xTaskGenericNotifyFromISR+0xb4>
    26a0:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <uxTopReadyPriority>
    26a4:	eb e0       	ldi	r30, 0x0B	; 11
    26a6:	8e 9f       	mul	r24, r30
    26a8:	c0 01       	movw	r24, r0
    26aa:	11 24       	eor	r1, r1
    26ac:	b8 01       	movw	r22, r16
    26ae:	86 5e       	subi	r24, 0xE6	; 230
    26b0:	98 4e       	sbci	r25, 0xE8	; 232
    26b2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    26b6:	07 c0       	rjmp	.+14     	; 0x26c6 <xTaskGenericNotifyFromISR+0xd6>
    26b8:	bf 01       	movw	r22, r30
    26ba:	62 5f       	subi	r22, 0xF2	; 242
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	85 ef       	ldi	r24, 0xF5	; 245
    26c0:	96 e1       	ldi	r25, 0x16	; 22
    26c2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInsertEnd>
    26c6:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxCurrentTCB>
    26ca:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxCurrentTCB+0x1>
    26ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d2:	89 17       	cp	r24, r25
    26d4:	70 f4       	brcc	.+28     	; 0x26f2 <xTaskGenericNotifyFromISR+0x102>
    26d6:	e1 14       	cp	r14, r1
    26d8:	f1 04       	cpc	r15, r1
    26da:	19 f0       	breq	.+6      	; 0x26e2 <xTaskGenericNotifyFromISR+0xf2>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	e7 01       	movw	r28, r14
    26e0:	88 83       	st	Y, r24
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <xYieldPending>
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <xTaskGenericNotifyFromISR+0x104>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <xTaskGenericNotifyFromISR+0x104>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <xTaskGenericNotifyFromISR+0x104>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	08 95       	ret

00002702 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	21 f4       	brne	.+8      	; 0x270e <xTaskNotifyStateClear+0xc>
    2706:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxCurrentTCB>
    270a:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2714:	fc 01       	movw	r30, r24
    2716:	27 a5       	ldd	r18, Z+47	; 0x2f
    2718:	22 30       	cpi	r18, 0x02	; 2
    271a:	19 f4       	brne	.+6      	; 0x2722 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    271c:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2722:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2724:	0f 90       	pop	r0
    2726:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2728:	08 95       	ret

0000272a <prvInsertTimerInActiveList>:
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	fc 01       	movw	r30, r24
    2738:	42 83       	std	Z+2, r20	; 0x02
    273a:	53 83       	std	Z+3, r21	; 0x03
    273c:	64 83       	std	Z+4, r22	; 0x04
    273e:	75 83       	std	Z+5, r23	; 0x05
    2740:	93 87       	std	Z+11, r25	; 0x0b
    2742:	82 87       	std	Z+10, r24	; 0x0a
    2744:	04 17       	cp	r16, r20
    2746:	15 07       	cpc	r17, r21
    2748:	26 07       	cpc	r18, r22
    274a:	37 07       	cpc	r19, r23
    274c:	c0 f0       	brcs	.+48     	; 0x277e <prvInsertTimerInActiveList+0x54>
    274e:	0c 19       	sub	r16, r12
    2750:	1d 09       	sbc	r17, r13
    2752:	2e 09       	sbc	r18, r14
    2754:	3f 09       	sbc	r19, r15
    2756:	86 85       	ldd	r24, Z+14	; 0x0e
    2758:	97 85       	ldd	r25, Z+15	; 0x0f
    275a:	a0 89       	ldd	r26, Z+16	; 0x10
    275c:	b1 89       	ldd	r27, Z+17	; 0x11
    275e:	08 17       	cp	r16, r24
    2760:	19 07       	cpc	r17, r25
    2762:	2a 07       	cpc	r18, r26
    2764:	3b 07       	cpc	r19, r27
    2766:	00 f5       	brcc	.+64     	; 0x27a8 <prvInsertTimerInActiveList+0x7e>
    2768:	bf 01       	movw	r22, r30
    276a:	6e 5f       	subi	r22, 0xFE	; 254
    276c:	7f 4f       	sbci	r23, 0xFF	; 255
    276e:	80 91 50 17 	lds	r24, 0x1750	; 0x801750 <pxOverflowTimerList>
    2772:	90 91 51 17 	lds	r25, 0x1751	; 0x801751 <pxOverflowTimerList+0x1>
    2776:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInsert>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	18 c0       	rjmp	.+48     	; 0x27ae <prvInsertTimerInActiveList+0x84>
    277e:	0c 15       	cp	r16, r12
    2780:	1d 05       	cpc	r17, r13
    2782:	2e 05       	cpc	r18, r14
    2784:	3f 05       	cpc	r19, r15
    2786:	28 f4       	brcc	.+10     	; 0x2792 <prvInsertTimerInActiveList+0x68>
    2788:	4c 15       	cp	r20, r12
    278a:	5d 05       	cpc	r21, r13
    278c:	6e 05       	cpc	r22, r14
    278e:	7f 05       	cpc	r23, r15
    2790:	68 f4       	brcc	.+26     	; 0x27ac <prvInsertTimerInActiveList+0x82>
    2792:	bf 01       	movw	r22, r30
    2794:	6e 5f       	subi	r22, 0xFE	; 254
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	80 91 52 17 	lds	r24, 0x1752	; 0x801752 <pxCurrentTimerList>
    279c:	90 91 53 17 	lds	r25, 0x1753	; 0x801753 <pxCurrentTimerList+0x1>
    27a0:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInsert>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	03 c0       	rjmp	.+6      	; 0x27ae <prvInsertTimerInActiveList+0x84>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <prvInsertTimerInActiveList+0x84>
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	1f 91       	pop	r17
    27b0:	0f 91       	pop	r16
    27b2:	ff 90       	pop	r15
    27b4:	ef 90       	pop	r14
    27b6:	df 90       	pop	r13
    27b8:	cf 90       	pop	r12
    27ba:	08 95       	ret

000027bc <prvCheckForValidListAndQueue>:
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	0f 92       	push	r0
    27c2:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <xTimerQueue>
    27c6:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <xTimerQueue+0x1>
    27ca:	89 2b       	or	r24, r25
    27cc:	e9 f4       	brne	.+58     	; 0x2808 <prvCheckForValidListAndQueue+0x4c>
    27ce:	8f e5       	ldi	r24, 0x5F	; 95
    27d0:	97 e1       	ldi	r25, 0x17	; 23
    27d2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    27d6:	84 e5       	ldi	r24, 0x54	; 84
    27d8:	97 e1       	ldi	r25, 0x17	; 23
    27da:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vListInitialise>
    27de:	8f e5       	ldi	r24, 0x5F	; 95
    27e0:	97 e1       	ldi	r25, 0x17	; 23
    27e2:	90 93 53 17 	sts	0x1753, r25	; 0x801753 <pxCurrentTimerList+0x1>
    27e6:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <pxCurrentTimerList>
    27ea:	84 e5       	ldi	r24, 0x54	; 84
    27ec:	97 e1       	ldi	r25, 0x17	; 23
    27ee:	90 93 51 17 	sts	0x1751, r25	; 0x801751 <pxOverflowTimerList+0x1>
    27f2:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <pxOverflowTimerList>
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	67 e0       	ldi	r22, 0x07	; 7
    27fa:	8a e0       	ldi	r24, 0x0A	; 10
    27fc:	0e 94 01 08 	call	0x1002	; 0x1002 <xQueueGenericCreate>
    2800:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <xTimerQueue+0x1>
    2804:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <xTimerQueue>
    2808:	0f 90       	pop	r0
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	08 95       	ret

0000280e <xTimerCreateTimerTask>:
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	d3 df       	rcall	.-90     	; 0x27bc <prvCheckForValidListAndQueue>
    2816:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <xTimerQueue>
    281a:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <xTimerQueue+0x1>
    281e:	89 2b       	or	r24, r25
    2820:	89 f0       	breq	.+34     	; 0x2844 <xTimerCreateTimerTask+0x36>
    2822:	0f 2e       	mov	r0, r31
    2824:	fc e4       	ldi	r31, 0x4C	; 76
    2826:	ef 2e       	mov	r14, r31
    2828:	f7 e1       	ldi	r31, 0x17	; 23
    282a:	ff 2e       	mov	r15, r31
    282c:	f0 2d       	mov	r31, r0
    282e:	03 e0       	ldi	r16, 0x03	; 3
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	45 e5       	ldi	r20, 0x55	; 85
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	6d e8       	ldi	r22, 0x8D	; 141
    283a:	73 e0       	ldi	r23, 0x03	; 3
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	31 d9       	rcall	.-3486   	; 0x1aa4 <xTaskCreate>
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <xTimerCreateTimerTask+0x38>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	08 95       	ret

0000284e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    284e:	8f 92       	push	r8
    2850:	9f 92       	push	r9
    2852:	af 92       	push	r10
    2854:	bf 92       	push	r11
    2856:	cf 92       	push	r12
    2858:	df 92       	push	r13
    285a:	ef 92       	push	r14
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	27 97       	sbiw	r28, 0x07	; 7
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2876:	e0 91 4e 17 	lds	r30, 0x174E	; 0x80174e <xTimerQueue>
    287a:	f0 91 4f 17 	lds	r31, 0x174F	; 0x80174f <xTimerQueue+0x1>
    287e:	30 97       	sbiw	r30, 0x00	; 0
    2880:	81 f1       	breq	.+96     	; 0x28e2 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2882:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2884:	2a 83       	std	Y+2, r18	; 0x02
    2886:	3b 83       	std	Y+3, r19	; 0x03
    2888:	4c 83       	std	Y+4, r20	; 0x04
    288a:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    288c:	9f 83       	std	Y+7, r25	; 0x07
    288e:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2890:	66 30       	cpi	r22, 0x06	; 6
    2892:	f4 f4       	brge	.+60     	; 0x28d0 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2894:	5d dd       	rcall	.-1350   	; 0x2350 <xTaskGetSchedulerState>
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	69 f4       	brne	.+26     	; 0x28b4 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    289a:	00 e0       	ldi	r16, 0x00	; 0
    289c:	a7 01       	movw	r20, r14
    289e:	96 01       	movw	r18, r12
    28a0:	be 01       	movw	r22, r28
    28a2:	6f 5f       	subi	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <xTimerQueue>
    28aa:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <xTimerQueue+0x1>
    28ae:	0e 94 2f 08 	call	0x105e	; 0x105e <xQueueGenericSend>
    28b2:	18 c0       	rjmp	.+48     	; 0x28e4 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    28b4:	00 e0       	ldi	r16, 0x00	; 0
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	a9 01       	movw	r20, r18
    28bc:	be 01       	movw	r22, r28
    28be:	6f 5f       	subi	r22, 0xFF	; 255
    28c0:	7f 4f       	sbci	r23, 0xFF	; 255
    28c2:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <xTimerQueue>
    28c6:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <xTimerQueue+0x1>
    28ca:	0e 94 2f 08 	call	0x105e	; 0x105e <xQueueGenericSend>
    28ce:	0a c0       	rjmp	.+20     	; 0x28e4 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	a8 01       	movw	r20, r16
    28d4:	be 01       	movw	r22, r28
    28d6:	6f 5f       	subi	r22, 0xFF	; 255
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255
    28da:	cf 01       	movw	r24, r30
    28dc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <xQueueGenericSendFromISR>
    28e0:	01 c0       	rjmp	.+2      	; 0x28e4 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    28e4:	27 96       	adiw	r28, 0x07	; 7
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
    2900:	bf 90       	pop	r11
    2902:	af 90       	pop	r10
    2904:	9f 90       	pop	r9
    2906:	8f 90       	pop	r8
    2908:	08 95       	ret

0000290a <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    290a:	2f 92       	push	r2
    290c:	3f 92       	push	r3
    290e:	4f 92       	push	r4
    2910:	5f 92       	push	r5
    2912:	6f 92       	push	r6
    2914:	7f 92       	push	r7
    2916:	8f 92       	push	r8
    2918:	9f 92       	push	r9
    291a:	af 92       	push	r10
    291c:	bf 92       	push	r11
    291e:	cf 92       	push	r12
    2920:	df 92       	push	r13
    2922:	ef 92       	push	r14
    2924:	ff 92       	push	r15
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2930:	1a da       	rcall	.-3020   	; 0x1d66 <xTaskGetTickCount>
    2932:	2b 01       	movw	r4, r22
    2934:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    2936:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <xLastTime.2432>
    293a:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <xLastTime.2432+0x1>
    293e:	a0 91 4a 17 	lds	r26, 0x174A	; 0x80174a <xLastTime.2432+0x2>
    2942:	b0 91 4b 17 	lds	r27, 0x174B	; 0x80174b <xLastTime.2432+0x3>
    2946:	48 16       	cp	r4, r24
    2948:	59 06       	cpc	r5, r25
    294a:	6a 06       	cpc	r6, r26
    294c:	7b 06       	cpc	r7, r27
    294e:	08 f0       	brcs	.+2      	; 0x2952 <prvSampleTimeNow+0x48>
    2950:	53 c0       	rjmp	.+166    	; 0x29f8 <prvSampleTimeNow+0xee>
    2952:	3b c0       	rjmp	.+118    	; 0x29ca <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2954:	07 80       	ldd	r0, Z+7	; 0x07
    2956:	f0 85       	ldd	r31, Z+8	; 0x08
    2958:	e0 2d       	mov	r30, r0
    295a:	80 80       	ld	r8, Z
    295c:	91 80       	ldd	r9, Z+1	; 0x01
    295e:	a2 80       	ldd	r10, Z+2	; 0x02
    2960:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2962:	c0 85       	ldd	r28, Z+8	; 0x08
    2964:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2966:	8e 01       	movw	r16, r28
    2968:	0e 5f       	subi	r16, 0xFE	; 254
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2972:	ec 89       	ldd	r30, Y+20	; 0x14
    2974:	fd 89       	ldd	r31, Y+21	; 0x15
    2976:	ce 01       	movw	r24, r28
    2978:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    297a:	8f 89       	ldd	r24, Y+23	; 0x17
    297c:	82 ff       	sbrs	r24, 2
    297e:	25 c0       	rjmp	.+74     	; 0x29ca <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2980:	8e 85       	ldd	r24, Y+14	; 0x0e
    2982:	9f 85       	ldd	r25, Y+15	; 0x0f
    2984:	a8 89       	ldd	r26, Y+16	; 0x10
    2986:	b9 89       	ldd	r27, Y+17	; 0x11
    2988:	88 0d       	add	r24, r8
    298a:	99 1d       	adc	r25, r9
    298c:	aa 1d       	adc	r26, r10
    298e:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2990:	88 16       	cp	r8, r24
    2992:	99 06       	cpc	r9, r25
    2994:	aa 06       	cpc	r10, r26
    2996:	bb 06       	cpc	r11, r27
    2998:	70 f4       	brcc	.+28     	; 0x29b6 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    299a:	8a 83       	std	Y+2, r24	; 0x02
    299c:	9b 83       	std	Y+3, r25	; 0x03
    299e:	ac 83       	std	Y+4, r26	; 0x04
    29a0:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    29a2:	db 87       	std	Y+11, r29	; 0x0b
    29a4:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    29a6:	b8 01       	movw	r22, r16
    29a8:	80 91 52 17 	lds	r24, 0x1752	; 0x801752 <pxCurrentTimerList>
    29ac:	90 91 53 17 	lds	r25, 0x1753	; 0x801753 <pxCurrentTimerList+0x1>
    29b0:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInsert>
    29b4:	0a c0       	rjmp	.+20     	; 0x29ca <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    29b6:	c1 2c       	mov	r12, r1
    29b8:	d1 2c       	mov	r13, r1
    29ba:	76 01       	movw	r14, r12
    29bc:	00 e0       	ldi	r16, 0x00	; 0
    29be:	10 e0       	ldi	r17, 0x00	; 0
    29c0:	a5 01       	movw	r20, r10
    29c2:	94 01       	movw	r18, r8
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	ce 01       	movw	r24, r28
    29c8:	42 df       	rcall	.-380    	; 0x284e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    29ca:	e0 91 52 17 	lds	r30, 0x1752	; 0x801752 <pxCurrentTimerList>
    29ce:	f0 91 53 17 	lds	r31, 0x1753	; 0x801753 <pxCurrentTimerList+0x1>
    29d2:	80 81       	ld	r24, Z
    29d4:	81 11       	cpse	r24, r1
    29d6:	be cf       	rjmp	.-132    	; 0x2954 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    29d8:	80 91 50 17 	lds	r24, 0x1750	; 0x801750 <pxOverflowTimerList>
    29dc:	90 91 51 17 	lds	r25, 0x1751	; 0x801751 <pxOverflowTimerList+0x1>
    29e0:	90 93 53 17 	sts	0x1753, r25	; 0x801753 <pxCurrentTimerList+0x1>
    29e4:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    29e8:	f0 93 51 17 	sts	0x1751, r31	; 0x801751 <pxOverflowTimerList+0x1>
    29ec:	e0 93 50 17 	sts	0x1750, r30	; 0x801750 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	f1 01       	movw	r30, r2
    29f4:	80 83       	st	Z, r24
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    29f8:	f1 01       	movw	r30, r2
    29fa:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    29fc:	40 92 48 17 	sts	0x1748, r4	; 0x801748 <xLastTime.2432>
    2a00:	50 92 49 17 	sts	0x1749, r5	; 0x801749 <xLastTime.2432+0x1>
    2a04:	60 92 4a 17 	sts	0x174A, r6	; 0x80174a <xLastTime.2432+0x2>
    2a08:	70 92 4b 17 	sts	0x174B, r7	; 0x80174b <xLastTime.2432+0x3>

    return xTimeNow;
}
    2a0c:	c3 01       	movw	r24, r6
    2a0e:	b2 01       	movw	r22, r4
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	df 90       	pop	r13
    2a1e:	cf 90       	pop	r12
    2a20:	bf 90       	pop	r11
    2a22:	af 90       	pop	r10
    2a24:	9f 90       	pop	r9
    2a26:	8f 90       	pop	r8
    2a28:	7f 90       	pop	r7
    2a2a:	6f 90       	pop	r6
    2a2c:	5f 90       	pop	r5
    2a2e:	4f 90       	pop	r4
    2a30:	3f 90       	pop	r3
    2a32:	2f 90       	pop	r2
    2a34:	08 95       	ret

00002a36 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2a36:	08 95       	ret

00002a38 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a38:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a3a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a3c:	2f ef       	ldi	r18, 0xFF	; 255
    2a3e:	80 e7       	ldi	r24, 0x70	; 112
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	21 50       	subi	r18, 0x01	; 1
    2a44:	80 40       	sbci	r24, 0x00	; 0
    2a46:	90 40       	sbci	r25, 0x00	; 0
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <vApplicationMallocFailedHook+0xa>
    2a4a:	00 c0       	rjmp	.+0      	; 0x2a4c <vApplicationMallocFailedHook+0x14>
    2a4c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2a4e:	1f 9a       	sbi	0x03, 7	; 3
    2a50:	f5 cf       	rjmp	.-22     	; 0x2a3c <vApplicationMallocFailedHook+0x4>

00002a52 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a52:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a54:	2f 9a       	sbi	0x05, 7	; 5
    2a56:	2f ef       	ldi	r18, 0xFF	; 255
    2a58:	87 ea       	ldi	r24, 0xA7	; 167
    2a5a:	91 e6       	ldi	r25, 0x61	; 97
    2a5c:	21 50       	subi	r18, 0x01	; 1
    2a5e:	80 40       	sbci	r24, 0x00	; 0
    2a60:	90 40       	sbci	r25, 0x00	; 0
    2a62:	e1 f7       	brne	.-8      	; 0x2a5c <vApplicationStackOverflowHook+0xa>
    2a64:	00 c0       	rjmp	.+0      	; 0x2a66 <vApplicationStackOverflowHook+0x14>
    2a66:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2a68:	1f 9a       	sbi	0x03, 7	; 3
    2a6a:	f5 cf       	rjmp	.-22     	; 0x2a56 <vApplicationStackOverflowHook+0x4>

00002a6c <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2a6c:	81 b1       	in	r24, 0x01	; 1
    2a6e:	81 68       	ori	r24, 0x81	; 129
    2a70:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    2a72:	0e 94 90 03 	call	0x720	; 0x720 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 08 20 	call	0x4010	; 0x4010 <stdioCreate>
	// Let's create some tasks
	
	printf("Yabababababaduuuuuuuuuuuuuuuu");
    2a7c:	81 ea       	ldi	r24, 0xA1	; 161
    2a7e:	93 e0       	ldi	r25, 0x03	; 3
    2a80:	9f 93       	push	r25
    2a82:	8f 93       	push	r24
    2a84:	0e 94 5d 24 	call	0x48ba	; 0x48ba <printf>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    2a88:	85 e0       	ldi	r24, 0x05	; 5
    2a8a:	80 d0       	rcall	.+256    	; 0x2b8c <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	7f d3       	rcall	.+1790   	; 0x3192 <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3 
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	08 95       	ret

00002a9a <doStuff>:
{
	uint16_t hum = 1234;
	uint16_t temp = 5678;


	payload.bytes[0] = hum >> 8;
    2a9a:	eb eb       	ldi	r30, 0xBB	; 187
    2a9c:	f8 e1       	ldi	r31, 0x18	; 24
    2a9e:	84 e0       	ldi	r24, 0x04	; 4
    2aa0:	82 83       	std	Z+2, r24	; 0x02
	payload.bytes[1] = hum & 0xFF;
    2aa2:	82 ed       	ldi	r24, 0xD2	; 210
    2aa4:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = temp >> 8;
    2aa6:	96 e1       	ldi	r25, 0x16	; 22
    2aa8:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = hum & 0xFF;
    2aaa:	85 83       	std	Z+5, r24	; 0x05
    2aac:	08 95       	ret

00002aae <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2aae:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2ab0:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <xTestSemaphore>
    2ab4:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <xTestSemaphore+0x1>
    2ab8:	89 2b       	or	r24, r25
    2aba:	89 f4       	brne	.+34     	; 0x2ade <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	0e 94 ce 08 	call	0x119c	; 0x119c <xQueueCreateMutex>
    2ac2:	90 93 ba 18 	sts	0x18BA, r25	; 0x8018ba <xTestSemaphore+0x1>
    2ac6:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	41 f0       	breq	.+16     	; 0x2ade <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2ace:	00 e0       	ldi	r16, 0x00	; 0
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	0e 94 2f 08 	call	0x105e	; 0x105e <xQueueGenericSend>
		}
	}
	
	xMessageBuffer = xMessageBufferCreate(100);
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	84 e6       	ldi	r24, 0x64	; 100
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <xStreamBufferGenericCreate>
    2aec:	90 93 b8 18 	sts	0x18B8, r25	; 0x8018b8 <xMessageBuffer+0x1>
    2af0:	80 93 b7 18 	sts	0x18B7, r24	; 0x8018b7 <xMessageBuffer>
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    2af4:	bc 01       	movw	r22, r24
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lora_UpLinkHandler_create>
	
	doStuff();
    2afc:	ce df       	rcall	.-100    	; 0x2a9a <doStuff>
	//,  (const portCHAR *)"Task2"  // A name just for humans
	//,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	//,  NULL
	//,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	//,  NULL );
}
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <main>:
	payload.bytes[3] = hum & 0xFF;
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2b02:	b4 df       	rcall	.-152    	; 0x2a6c <initialiseSystem>
	printf("Program Started!!\n");
    2b04:	8f eb       	ldi	r24, 0xBF	; 191
    2b06:	93 e0       	ldi	r25, 0x03	; 3
    2b08:	0e 94 70 24 	call	0x48e0	; 0x48e0 <puts>
	create_tasks_and_semaphores();
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2b0c:	d0 df       	rcall	.-96     	; 0x2aae <create_tasks_and_semaphores>
    2b0e:	e9 d8       	rcall	.-3630   	; 0x1ce2 <vTaskStartScheduler>
    2b10:	ff cf       	rjmp	.-2      	; 0x2b10 <main+0xe>

00002b12 <__floatunsisf>:
    2b12:	e8 94       	clt
    2b14:	09 c0       	rjmp	.+18     	; 0x2b28 <__floatsisf+0x12>

00002b16 <__floatsisf>:
    2b16:	97 fb       	bst	r25, 7
    2b18:	3e f4       	brtc	.+14     	; 0x2b28 <__floatsisf+0x12>
    2b1a:	90 95       	com	r25
    2b1c:	80 95       	com	r24
    2b1e:	70 95       	com	r23
    2b20:	61 95       	neg	r22
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255
    2b24:	8f 4f       	sbci	r24, 0xFF	; 255
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	99 23       	and	r25, r25
    2b2a:	a9 f0       	breq	.+42     	; 0x2b56 <__floatsisf+0x40>
    2b2c:	f9 2f       	mov	r31, r25
    2b2e:	96 e9       	ldi	r25, 0x96	; 150
    2b30:	bb 27       	eor	r27, r27
    2b32:	93 95       	inc	r25
    2b34:	f6 95       	lsr	r31
    2b36:	87 95       	ror	r24
    2b38:	77 95       	ror	r23
    2b3a:	67 95       	ror	r22
    2b3c:	b7 95       	ror	r27
    2b3e:	f1 11       	cpse	r31, r1
    2b40:	f8 cf       	rjmp	.-16     	; 0x2b32 <__floatsisf+0x1c>
    2b42:	fa f4       	brpl	.+62     	; 0x2b82 <__floatsisf+0x6c>
    2b44:	bb 0f       	add	r27, r27
    2b46:	11 f4       	brne	.+4      	; 0x2b4c <__floatsisf+0x36>
    2b48:	60 ff       	sbrs	r22, 0
    2b4a:	1b c0       	rjmp	.+54     	; 0x2b82 <__floatsisf+0x6c>
    2b4c:	6f 5f       	subi	r22, 0xFF	; 255
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	8f 4f       	sbci	r24, 0xFF	; 255
    2b52:	9f 4f       	sbci	r25, 0xFF	; 255
    2b54:	16 c0       	rjmp	.+44     	; 0x2b82 <__floatsisf+0x6c>
    2b56:	88 23       	and	r24, r24
    2b58:	11 f0       	breq	.+4      	; 0x2b5e <__floatsisf+0x48>
    2b5a:	96 e9       	ldi	r25, 0x96	; 150
    2b5c:	11 c0       	rjmp	.+34     	; 0x2b80 <__floatsisf+0x6a>
    2b5e:	77 23       	and	r23, r23
    2b60:	21 f0       	breq	.+8      	; 0x2b6a <__floatsisf+0x54>
    2b62:	9e e8       	ldi	r25, 0x8E	; 142
    2b64:	87 2f       	mov	r24, r23
    2b66:	76 2f       	mov	r23, r22
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <__floatsisf+0x5e>
    2b6a:	66 23       	and	r22, r22
    2b6c:	71 f0       	breq	.+28     	; 0x2b8a <__floatsisf+0x74>
    2b6e:	96 e8       	ldi	r25, 0x86	; 134
    2b70:	86 2f       	mov	r24, r22
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	2a f0       	brmi	.+10     	; 0x2b82 <__floatsisf+0x6c>
    2b78:	9a 95       	dec	r25
    2b7a:	66 0f       	add	r22, r22
    2b7c:	77 1f       	adc	r23, r23
    2b7e:	88 1f       	adc	r24, r24
    2b80:	da f7       	brpl	.-10     	; 0x2b78 <__floatsisf+0x62>
    2b82:	88 0f       	add	r24, r24
    2b84:	96 95       	lsr	r25
    2b86:	87 95       	ror	r24
    2b88:	97 f9       	bld	r25, 7
    2b8a:	08 95       	ret

00002b8c <hal_create>:
    2b8c:	e1 ed       	ldi	r30, 0xD1	; 209
    2b8e:	f8 e1       	ldi	r31, 0x18	; 24
    2b90:	2e e1       	ldi	r18, 0x1E	; 30
    2b92:	3c e1       	ldi	r19, 0x1C	; 28
    2b94:	31 83       	std	Z+1, r19	; 0x01
    2b96:	20 83       	st	Z, r18
    2b98:	21 e2       	ldi	r18, 0x21	; 33
    2b9a:	3c e1       	ldi	r19, 0x1C	; 28
    2b9c:	33 83       	std	Z+3, r19	; 0x03
    2b9e:	22 83       	std	Z+2, r18	; 0x02
    2ba0:	2c e2       	ldi	r18, 0x2C	; 44
    2ba2:	3c e1       	ldi	r19, 0x1C	; 28
    2ba4:	35 83       	std	Z+5, r19	; 0x05
    2ba6:	24 83       	std	Z+4, r18	; 0x04
    2ba8:	20 e3       	ldi	r18, 0x30	; 48
    2baa:	3c e1       	ldi	r19, 0x1C	; 28
    2bac:	37 83       	std	Z+7, r19	; 0x07
    2bae:	26 83       	std	Z+6, r18	; 0x06
    2bb0:	26 e3       	ldi	r18, 0x36	; 54
    2bb2:	3c e1       	ldi	r19, 0x1C	; 28
    2bb4:	31 87       	std	Z+9, r19	; 0x09
    2bb6:	20 87       	std	Z+8, r18	; 0x08
    2bb8:	22 e4       	ldi	r18, 0x42	; 66
    2bba:	3c e1       	ldi	r19, 0x1C	; 28
    2bbc:	33 87       	std	Z+11, r19	; 0x0b
    2bbe:	22 87       	std	Z+10, r18	; 0x0a
    2bc0:	27 e4       	ldi	r18, 0x47	; 71
    2bc2:	3c e1       	ldi	r19, 0x1C	; 28
    2bc4:	35 87       	std	Z+13, r19	; 0x0d
    2bc6:	24 87       	std	Z+12, r18	; 0x0c
    2bc8:	23 e5       	ldi	r18, 0x53	; 83
    2bca:	3c e1       	ldi	r19, 0x1C	; 28
    2bcc:	37 87       	std	Z+15, r19	; 0x0f
    2bce:	26 87       	std	Z+14, r18	; 0x0e
    2bd0:	23 e3       	ldi	r18, 0x33	; 51
    2bd2:	3c e1       	ldi	r19, 0x1C	; 28
    2bd4:	31 8b       	std	Z+17, r19	; 0x11
    2bd6:	20 8b       	std	Z+16, r18	; 0x10
    2bd8:	28 e5       	ldi	r18, 0x58	; 88
    2bda:	3c e1       	ldi	r19, 0x1C	; 28
    2bdc:	33 8b       	std	Z+19, r19	; 0x13
    2bde:	22 8b       	std	Z+18, r18	; 0x12
    2be0:	25 e6       	ldi	r18, 0x65	; 101
    2be2:	3c e1       	ldi	r19, 0x1C	; 28
    2be4:	35 8b       	std	Z+21, r19	; 0x15
    2be6:	24 8b       	std	Z+20, r18	; 0x14
    2be8:	68 2f       	mov	r22, r24
    2bea:	cf 01       	movw	r24, r30
    2bec:	9e c0       	rjmp	.+316    	; 0x2d2a <led_create>
    2bee:	08 95       	ret

00002bf0 <_turn_off>:
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	e8 0f       	add	r30, r24
    2bfe:	f9 1f       	adc	r31, r25
    2c00:	ee 0f       	add	r30, r30
    2c02:	ff 1f       	adc	r31, r31
    2c04:	e6 59       	subi	r30, 0x96	; 150
    2c06:	f8 4e       	sbci	r31, 0xE8	; 232
    2c08:	23 81       	ldd	r18, Z+3	; 0x03
    2c0a:	21 11       	cpse	r18, r1
    2c0c:	0a c0       	rjmp	.+20     	; 0x2c22 <_turn_off+0x32>
    2c0e:	ef 01       	movw	r28, r30
    2c10:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <register_access+0x8>
    2c14:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <register_access+0x9>
    2c18:	6a 81       	ldd	r22, Y+2	; 0x02
    2c1a:	88 81       	ld	r24, Y
    2c1c:	99 81       	ldd	r25, Y+1	; 0x01
    2c1e:	19 95       	eicall
    2c20:	12 c0       	rjmp	.+36     	; 0x2c46 <_turn_off+0x56>
    2c22:	dc 01       	movw	r26, r24
    2c24:	aa 0f       	add	r26, r26
    2c26:	bb 1f       	adc	r27, r27
    2c28:	ed 01       	movw	r28, r26
    2c2a:	c8 0f       	add	r28, r24
    2c2c:	d9 1f       	adc	r29, r25
    2c2e:	cc 0f       	add	r28, r28
    2c30:	dd 1f       	adc	r29, r29
    2c32:	c6 59       	subi	r28, 0x96	; 150
    2c34:	d8 4e       	sbci	r29, 0xE8	; 232
    2c36:	e0 91 e3 18 	lds	r30, 0x18E3	; 0x8018e3 <register_access+0x12>
    2c3a:	f0 91 e4 18 	lds	r31, 0x18E4	; 0x8018e4 <register_access+0x13>
    2c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    2c40:	88 81       	ld	r24, Y
    2c42:	99 81       	ldd	r25, Y+1	; 0x01
    2c44:	19 95       	eicall
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	08 95       	ret

00002c4c <_turn_on>:
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	fc 01       	movw	r30, r24
    2c54:	ee 0f       	add	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	e8 0f       	add	r30, r24
    2c5a:	f9 1f       	adc	r31, r25
    2c5c:	ee 0f       	add	r30, r30
    2c5e:	ff 1f       	adc	r31, r31
    2c60:	e6 59       	subi	r30, 0x96	; 150
    2c62:	f8 4e       	sbci	r31, 0xE8	; 232
    2c64:	23 81       	ldd	r18, Z+3	; 0x03
    2c66:	21 11       	cpse	r18, r1
    2c68:	0a c0       	rjmp	.+20     	; 0x2c7e <_turn_on+0x32>
    2c6a:	ef 01       	movw	r28, r30
    2c6c:	e0 91 e3 18 	lds	r30, 0x18E3	; 0x8018e3 <register_access+0x12>
    2c70:	f0 91 e4 18 	lds	r31, 0x18E4	; 0x8018e4 <register_access+0x13>
    2c74:	6a 81       	ldd	r22, Y+2	; 0x02
    2c76:	88 81       	ld	r24, Y
    2c78:	99 81       	ldd	r25, Y+1	; 0x01
    2c7a:	19 95       	eicall
    2c7c:	12 c0       	rjmp	.+36     	; 0x2ca2 <_turn_on+0x56>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	aa 0f       	add	r26, r26
    2c82:	bb 1f       	adc	r27, r27
    2c84:	ed 01       	movw	r28, r26
    2c86:	c8 0f       	add	r28, r24
    2c88:	d9 1f       	adc	r29, r25
    2c8a:	cc 0f       	add	r28, r28
    2c8c:	dd 1f       	adc	r29, r29
    2c8e:	c6 59       	subi	r28, 0x96	; 150
    2c90:	d8 4e       	sbci	r29, 0xE8	; 232
    2c92:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <register_access+0x8>
    2c96:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <register_access+0x9>
    2c9a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c9c:	88 81       	ld	r24, Y
    2c9e:	99 81       	ldd	r25, Y+1	; 0x01
    2ca0:	19 95       	eicall
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	08 95       	ret

00002ca8 <_hal_led_task>:
    2ca8:	0f 2e       	mov	r0, r31
    2caa:	f1 ed       	ldi	r31, 0xD1	; 209
    2cac:	cf 2e       	mov	r12, r31
    2cae:	f8 e1       	ldi	r31, 0x18	; 24
    2cb0:	df 2e       	mov	r13, r31
    2cb2:	f0 2d       	mov	r31, r0
    2cb4:	04 e0       	ldi	r16, 0x04	; 4
    2cb6:	ca e6       	ldi	r28, 0x6A	; 106
    2cb8:	d7 e1       	ldi	r29, 0x17	; 23
    2cba:	10 e0       	ldi	r17, 0x00	; 0
    2cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	69 f0       	breq	.+26     	; 0x2cdc <_hal_led_task+0x34>
    2cc2:	e8 f0       	brcs	.+58     	; 0x2cfe <_hal_led_task+0x56>
    2cc4:	82 30       	cpi	r24, 0x02	; 2
    2cc6:	39 f5       	brne	.+78     	; 0x2d16 <_hal_led_task+0x6e>
    2cc8:	d6 01       	movw	r26, r12
    2cca:	1c 96       	adiw	r26, 0x0c	; 12
    2ccc:	ed 91       	ld	r30, X+
    2cce:	fc 91       	ld	r31, X
    2cd0:	1d 97       	sbiw	r26, 0x0d	; 13
    2cd2:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd4:	88 81       	ld	r24, Y
    2cd6:	99 81       	ldd	r25, Y+1	; 0x01
    2cd8:	19 95       	eicall
    2cda:	1d c0       	rjmp	.+58     	; 0x2d16 <_hal_led_task+0x6e>
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	8f 5f       	subi	r24, 0xFF	; 255
    2ce0:	8a 30       	cpi	r24, 0x0A	; 10
    2ce2:	10 f4       	brcc	.+4      	; 0x2ce8 <_hal_led_task+0x40>
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	17 c0       	rjmp	.+46     	; 0x2d16 <_hal_led_task+0x6e>
    2ce8:	1d 82       	std	Y+5, r1	; 0x05
    2cea:	d6 01       	movw	r26, r12
    2cec:	1c 96       	adiw	r26, 0x0c	; 12
    2cee:	ed 91       	ld	r30, X+
    2cf0:	fc 91       	ld	r31, X
    2cf2:	1d 97       	sbiw	r26, 0x0d	; 13
    2cf4:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf6:	88 81       	ld	r24, Y
    2cf8:	99 81       	ldd	r25, Y+1	; 0x01
    2cfa:	19 95       	eicall
    2cfc:	0c c0       	rjmp	.+24     	; 0x2d16 <_hal_led_task+0x6e>
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	88 23       	and	r24, r24
    2d02:	31 f0       	breq	.+12     	; 0x2d10 <_hal_led_task+0x68>
    2d04:	81 2f       	mov	r24, r17
    2d06:	a2 df       	rcall	.-188    	; 0x2c4c <_turn_on>
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	81 50       	subi	r24, 0x01	; 1
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	03 c0       	rjmp	.+6      	; 0x2d16 <_hal_led_task+0x6e>
    2d10:	0c 83       	std	Y+4, r16	; 0x04
    2d12:	81 2f       	mov	r24, r17
    2d14:	6d df       	rcall	.-294    	; 0x2bf0 <_turn_off>
    2d16:	1f 5f       	subi	r17, 0xFF	; 255
    2d18:	26 96       	adiw	r28, 0x06	; 6
    2d1a:	14 30       	cpi	r17, 0x04	; 4
    2d1c:	79 f6       	brne	.-98     	; 0x2cbc <_hal_led_task+0x14>
    2d1e:	65 e0       	ldi	r22, 0x05	; 5
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	7e d9       	rcall	.-3332   	; 0x2024 <vTaskDelay>
    2d28:	c6 cf       	rjmp	.-116    	; 0x2cb6 <_hal_led_task+0xe>

00002d2a <led_create>:
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	06 2f       	mov	r16, r22
    2d3c:	0f 2e       	mov	r0, r31
    2d3e:	f1 ed       	ldi	r31, 0xD1	; 209
    2d40:	ef 2e       	mov	r14, r31
    2d42:	f8 e1       	ldi	r31, 0x18	; 24
    2d44:	ff 2e       	mov	r15, r31
    2d46:	f0 2d       	mov	r31, r0
    2d48:	d7 01       	movw	r26, r14
    2d4a:	18 96       	adiw	r26, 0x08	; 8
    2d4c:	ed 91       	ld	r30, X+
    2d4e:	fc 91       	ld	r31, X
    2d50:	19 97       	sbiw	r26, 0x09	; 9
    2d52:	66 e0       	ldi	r22, 0x06	; 6
    2d54:	87 e2       	ldi	r24, 0x27	; 39
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	19 95       	eicall
    2d5a:	ca e6       	ldi	r28, 0x6A	; 106
    2d5c:	d7 e1       	ldi	r29, 0x17	; 23
    2d5e:	0f 2e       	mov	r0, r31
    2d60:	f8 e2       	ldi	r31, 0x28	; 40
    2d62:	cf 2e       	mov	r12, r31
    2d64:	d1 2c       	mov	r13, r1
    2d66:	f0 2d       	mov	r31, r0
    2d68:	d9 82       	std	Y+1, r13	; 0x01
    2d6a:	c8 82       	st	Y, r12
    2d6c:	86 e0       	ldi	r24, 0x06	; 6
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
    2d70:	1b 82       	std	Y+3, r1	; 0x03
    2d72:	14 e0       	ldi	r17, 0x04	; 4
    2d74:	1c 83       	std	Y+4, r17	; 0x04
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	3b df       	rcall	.-394    	; 0x2bf0 <_turn_off>
    2d7a:	d7 01       	movw	r26, r14
    2d7c:	18 96       	adiw	r26, 0x08	; 8
    2d7e:	ed 91       	ld	r30, X+
    2d80:	fc 91       	ld	r31, X
    2d82:	19 97       	sbiw	r26, 0x09	; 9
    2d84:	67 e0       	ldi	r22, 0x07	; 7
    2d86:	87 e2       	ldi	r24, 0x27	; 39
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	19 95       	eicall
    2d8c:	df 82       	std	Y+7, r13	; 0x07
    2d8e:	ce 82       	std	Y+6, r12	; 0x06
    2d90:	87 e0       	ldi	r24, 0x07	; 7
    2d92:	88 87       	std	Y+8, r24	; 0x08
    2d94:	19 86       	std	Y+9, r1	; 0x09
    2d96:	1a 87       	std	Y+10, r17	; 0x0a
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	2a df       	rcall	.-428    	; 0x2bf0 <_turn_off>
    2d9c:	d7 01       	movw	r26, r14
    2d9e:	18 96       	adiw	r26, 0x08	; 8
    2da0:	ed 91       	ld	r30, X+
    2da2:	fc 91       	ld	r31, X
    2da4:	19 97       	sbiw	r26, 0x09	; 9
    2da6:	65 e0       	ldi	r22, 0x05	; 5
    2da8:	83 e3       	ldi	r24, 0x33	; 51
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	19 95       	eicall
    2dae:	d7 01       	movw	r26, r14
    2db0:	18 96       	adiw	r26, 0x08	; 8
    2db2:	ed 91       	ld	r30, X+
    2db4:	fc 91       	ld	r31, X
    2db6:	19 97       	sbiw	r26, 0x09	; 9
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	84 e3       	ldi	r24, 0x34	; 52
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	19 95       	eicall
    2dc0:	84 e3       	ldi	r24, 0x34	; 52
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9d 87       	std	Y+13, r25	; 0x0d
    2dc6:	8c 87       	std	Y+12, r24	; 0x0c
    2dc8:	85 e0       	ldi	r24, 0x05	; 5
    2dca:	8e 87       	std	Y+14, r24	; 0x0e
    2dcc:	1f 86       	std	Y+15, r1	; 0x0f
    2dce:	18 8b       	std	Y+16, r17	; 0x10
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	0e df       	rcall	.-484    	; 0x2bf0 <_turn_off>
    2dd4:	d7 01       	movw	r26, r14
    2dd6:	18 96       	adiw	r26, 0x08	; 8
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	19 97       	sbiw	r26, 0x09	; 9
    2dde:	64 e0       	ldi	r22, 0x04	; 4
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	91 e0       	ldi	r25, 0x01	; 1
    2de4:	19 95       	eicall
    2de6:	d7 01       	movw	r26, r14
    2de8:	18 96       	adiw	r26, 0x08	; 8
    2dea:	ed 91       	ld	r30, X+
    2dec:	fc 91       	ld	r31, X
    2dee:	19 97       	sbiw	r26, 0x09	; 9
    2df0:	61 e0       	ldi	r22, 0x01	; 1
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	19 95       	eicall
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	9b 8b       	std	Y+19, r25	; 0x13
    2dfe:	8a 8b       	std	Y+18, r24	; 0x12
    2e00:	1c 8b       	std	Y+20, r17	; 0x14
    2e02:	1d 8a       	std	Y+21, r1	; 0x15
    2e04:	1e 8b       	std	Y+22, r17	; 0x16
    2e06:	83 e0       	ldi	r24, 0x03	; 3
    2e08:	f3 de       	rcall	.-538    	; 0x2bf0 <_turn_off>
    2e0a:	e1 2c       	mov	r14, r1
    2e0c:	f1 2c       	mov	r15, r1
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 ec       	ldi	r20, 0xC0	; 192
    2e14:	50 e0       	ldi	r21, 0x00	; 0
    2e16:	61 ed       	ldi	r22, 0xD1	; 209
    2e18:	73 e0       	ldi	r23, 0x03	; 3
    2e1a:	84 e5       	ldi	r24, 0x54	; 84
    2e1c:	96 e1       	ldi	r25, 0x16	; 22
    2e1e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <xTaskCreate>
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	1f 91       	pop	r17
    2e28:	0f 91       	pop	r16
    2e2a:	ff 90       	pop	r15
    2e2c:	ef 90       	pop	r14
    2e2e:	df 90       	pop	r13
    2e30:	cf 90       	pop	r12
    2e32:	08 95       	ret

00002e34 <led_slow_blink>:
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	c8 2f       	mov	r28, r24
    2e3e:	d0 e0       	ldi	r29, 0x00	; 0
    2e40:	8e 01       	movw	r16, r28
    2e42:	00 0f       	add	r16, r16
    2e44:	11 1f       	adc	r17, r17
    2e46:	d8 01       	movw	r26, r16
    2e48:	ac 0f       	add	r26, r28
    2e4a:	bd 1f       	adc	r27, r29
    2e4c:	aa 0f       	add	r26, r26
    2e4e:	bb 1f       	adc	r27, r27
    2e50:	a6 59       	subi	r26, 0x96	; 150
    2e52:	b8 4e       	sbci	r27, 0xE8	; 232
    2e54:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <register_access+0xc>
    2e58:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <register_access+0xd>
    2e5c:	12 96       	adiw	r26, 0x02	; 2
    2e5e:	6c 91       	ld	r22, X
    2e60:	12 97       	sbiw	r26, 0x02	; 2
    2e62:	8d 91       	ld	r24, X+
    2e64:	9c 91       	ld	r25, X
    2e66:	19 95       	eicall
    2e68:	c0 0f       	add	r28, r16
    2e6a:	d1 1f       	adc	r29, r17
    2e6c:	cc 0f       	add	r28, r28
    2e6e:	dd 1f       	adc	r29, r29
    2e70:	c6 59       	subi	r28, 0x96	; 150
    2e72:	d8 4e       	sbci	r29, 0xE8	; 232
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	8c 83       	std	Y+4, r24	; 0x04
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	08 95       	ret

00002e82 <led_fast_blink>:
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	c8 2f       	mov	r28, r24
    2e8c:	d0 e0       	ldi	r29, 0x00	; 0
    2e8e:	8e 01       	movw	r16, r28
    2e90:	00 0f       	add	r16, r16
    2e92:	11 1f       	adc	r17, r17
    2e94:	d8 01       	movw	r26, r16
    2e96:	ac 0f       	add	r26, r28
    2e98:	bd 1f       	adc	r27, r29
    2e9a:	aa 0f       	add	r26, r26
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	a6 59       	subi	r26, 0x96	; 150
    2ea0:	b8 4e       	sbci	r27, 0xE8	; 232
    2ea2:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <register_access+0xc>
    2ea6:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <register_access+0xd>
    2eaa:	12 96       	adiw	r26, 0x02	; 2
    2eac:	6c 91       	ld	r22, X
    2eae:	12 97       	sbiw	r26, 0x02	; 2
    2eb0:	8d 91       	ld	r24, X+
    2eb2:	9c 91       	ld	r25, X
    2eb4:	19 95       	eicall
    2eb6:	c0 0f       	add	r28, r16
    2eb8:	d1 1f       	adc	r29, r17
    2eba:	cc 0f       	add	r28, r28
    2ebc:	dd 1f       	adc	r29, r29
    2ebe:	c6 59       	subi	r28, 0x96	; 150
    2ec0:	d8 4e       	sbci	r29, 0xE8	; 232
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	8c 83       	std	Y+4, r24	; 0x04
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	1f 91       	pop	r17
    2ecc:	0f 91       	pop	r16
    2ece:	08 95       	ret

00002ed0 <led_led_on>:
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	f9 01       	movw	r30, r18
    2ed6:	ee 0f       	add	r30, r30
    2ed8:	ff 1f       	adc	r31, r31
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	ee 0f       	add	r30, r30
    2ee0:	ff 1f       	adc	r31, r31
    2ee2:	e6 59       	subi	r30, 0x96	; 150
    2ee4:	f8 4e       	sbci	r31, 0xE8	; 232
    2ee6:	93 e0       	ldi	r25, 0x03	; 3
    2ee8:	94 83       	std	Z+4, r25	; 0x04
    2eea:	b0 ce       	rjmp	.-672    	; 0x2c4c <_turn_on>
    2eec:	08 95       	ret

00002eee <led_led_off>:
    2eee:	28 2f       	mov	r18, r24
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	f9 01       	movw	r30, r18
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	e2 0f       	add	r30, r18
    2efa:	f3 1f       	adc	r31, r19
    2efc:	ee 0f       	add	r30, r30
    2efe:	ff 1f       	adc	r31, r31
    2f00:	e6 59       	subi	r30, 0x96	; 150
    2f02:	f8 4e       	sbci	r31, 0xE8	; 232
    2f04:	94 e0       	ldi	r25, 0x04	; 4
    2f06:	94 83       	std	Z+4, r25	; 0x04
    2f08:	73 ce       	rjmp	.-794    	; 0x2bf0 <_turn_off>
    2f0a:	08 95       	ret

00002f0c <led_long_puls>:
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	fc 01       	movw	r30, r24
    2f10:	ee 0f       	add	r30, r30
    2f12:	ff 1f       	adc	r31, r31
    2f14:	df 01       	movw	r26, r30
    2f16:	a8 0f       	add	r26, r24
    2f18:	b9 1f       	adc	r27, r25
    2f1a:	aa 0f       	add	r26, r26
    2f1c:	bb 1f       	adc	r27, r27
    2f1e:	a6 59       	subi	r26, 0x96	; 150
    2f20:	b8 4e       	sbci	r27, 0xE8	; 232
    2f22:	24 e0       	ldi	r18, 0x04	; 4
    2f24:	15 96       	adiw	r26, 0x05	; 5
    2f26:	2c 93       	st	X, r18
    2f28:	15 97       	sbiw	r26, 0x05	; 5
    2f2a:	fd 01       	movw	r30, r26
    2f2c:	14 82       	std	Z+4, r1	; 0x04
    2f2e:	08 95       	ret

00002f30 <led_short_puls>:
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	fc 01       	movw	r30, r24
    2f34:	ee 0f       	add	r30, r30
    2f36:	ff 1f       	adc	r31, r31
    2f38:	df 01       	movw	r26, r30
    2f3a:	a8 0f       	add	r26, r24
    2f3c:	b9 1f       	adc	r27, r25
    2f3e:	aa 0f       	add	r26, r26
    2f40:	bb 1f       	adc	r27, r27
    2f42:	a6 59       	subi	r26, 0x96	; 150
    2f44:	b8 4e       	sbci	r27, 0xE8	; 232
    2f46:	21 e0       	ldi	r18, 0x01	; 1
    2f48:	15 96       	adiw	r26, 0x05	; 5
    2f4a:	2c 93       	st	X, r18
    2f4c:	15 97       	sbiw	r26, 0x05	; 5
    2f4e:	fd 01       	movw	r30, r26
    2f50:	14 82       	std	Z+4, r1	; 0x04
    2f52:	08 95       	ret

00002f54 <_serial_call_back>:
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	1f 92       	push	r1
    2f5e:	1f 92       	push	r1
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	8c 01       	movw	r16, r24
    2f66:	19 82       	std	Y+1, r1	; 0x01
    2f68:	2d c0       	rjmp	.+90     	; 0x2fc4 <_serial_call_back+0x70>
    2f6a:	e0 91 e6 17 	lds	r30, 0x17E6	; 0x8017e6 <rec_buf_inp.2947>
    2f6e:	ec 32       	cpi	r30, 0x2C	; 44
    2f70:	50 f4       	brcc	.+20     	; 0x2f86 <_serial_call_back+0x32>
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	8e 0f       	add	r24, r30
    2f76:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <rec_buf_inp.2947>
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	e8 5e       	subi	r30, 0xE8	; 232
    2f7e:	f7 4e       	sbci	r31, 0xE7	; 231
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	80 83       	st	Z, r24
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <_serial_call_back+0x36>
    2f86:	10 92 e6 17 	sts	0x17E6, r1	; 0x8017e6 <rec_buf_inp.2947>
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	8a 30       	cpi	r24, 0x0A	; 10
    2f8e:	d1 f4       	brne	.+52     	; 0x2fc4 <_serial_call_back+0x70>
    2f90:	40 91 e6 17 	lds	r20, 0x17E6	; 0x8017e6 <rec_buf_inp.2947>
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	fa 01       	movw	r30, r20
    2f98:	ea 5e       	subi	r30, 0xEA	; 234
    2f9a:	f7 4e       	sbci	r31, 0xE7	; 231
    2f9c:	10 82       	st	Z, r1
    2f9e:	41 50       	subi	r20, 0x01	; 1
    2fa0:	51 09       	sbc	r21, r1
    2fa2:	9e 01       	movw	r18, r28
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	68 e1       	ldi	r22, 0x18	; 24
    2faa:	78 e1       	ldi	r23, 0x18	; 24
    2fac:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_serial_reply_buffer_handle>
    2fb0:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    2fb4:	0e 94 cf 0b 	call	0x179e	; 0x179e <xStreamBufferSendFromISR>
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	81 11       	cpse	r24, r1
    2fbc:	0e 94 25 06 	call	0xc4a	; 0xc4a <vPortYield>
    2fc0:	10 92 e6 17 	sts	0x17E6, r1	; 0x8017e6 <rec_buf_inp.2947>
    2fc4:	be 01       	movw	r22, r28
    2fc6:	6e 5f       	subi	r22, 0xFE	; 254
    2fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fca:	c8 01       	movw	r24, r16
    2fcc:	8f d5       	rcall	.+2846   	; 0x3aec <serial_get_byte>
    2fce:	88 23       	and	r24, r24
    2fd0:	61 f2       	breq	.-104    	; 0x2f6a <_serial_call_back+0x16>
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	08 95       	ret

00002fe0 <_upload_message>:
    2fe0:	0f 93       	push	r16
    2fe2:	1f 93       	push	r17
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	8c 01       	movw	r16, r24
    2fea:	eb 01       	movw	r28, r22
    2fec:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_serial_reply_buffer_handle>
    2ff0:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    2ff4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <xStreamBufferReset>
    2ff8:	b8 01       	movw	r22, r16
    2ffa:	82 e8       	ldi	r24, 0x82	; 130
    2ffc:	97 e1       	ldi	r25, 0x17	; 23
    2ffe:	0e 94 3e 24 	call	0x487c	; 0x487c <strcpy>
    3002:	20 97       	sbiw	r28, 0x00	; 0
    3004:	79 f0       	breq	.+30     	; 0x3024 <_upload_message+0x44>
    3006:	e2 e8       	ldi	r30, 0x82	; 130
    3008:	f7 e1       	ldi	r31, 0x17	; 23
    300a:	01 90       	ld	r0, Z+
    300c:	00 20       	and	r0, r0
    300e:	e9 f7       	brne	.-6      	; 0x300a <_upload_message+0x2a>
    3010:	31 97       	sbiw	r30, 0x01	; 1
    3012:	80 e2       	ldi	r24, 0x20	; 32
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	be 01       	movw	r22, r28
    301c:	82 e8       	ldi	r24, 0x82	; 130
    301e:	97 e1       	ldi	r25, 0x17	; 23
    3020:	0e 94 33 24 	call	0x4866	; 0x4866 <strcat>
    3024:	e2 e8       	ldi	r30, 0x82	; 130
    3026:	f7 e1       	ldi	r31, 0x17	; 23
    3028:	df 01       	movw	r26, r30
    302a:	0d 90       	ld	r0, X+
    302c:	00 20       	and	r0, r0
    302e:	e9 f7       	brne	.-6      	; 0x302a <_upload_message+0x4a>
    3030:	11 97       	sbiw	r26, 0x01	; 1
    3032:	8d e0       	ldi	r24, 0x0D	; 13
    3034:	9a e0       	ldi	r25, 0x0A	; 10
    3036:	11 96       	adiw	r26, 0x01	; 1
    3038:	9c 93       	st	X, r25
    303a:	8e 93       	st	-X, r24
    303c:	12 96       	adiw	r26, 0x02	; 2
    303e:	1c 92       	st	X, r1
    3040:	01 90       	ld	r0, Z+
    3042:	00 20       	and	r0, r0
    3044:	e9 f7       	brne	.-6      	; 0x3040 <_upload_message+0x60>
    3046:	31 97       	sbiw	r30, 0x01	; 1
    3048:	e2 58       	subi	r30, 0x82	; 130
    304a:	f7 41       	sbci	r31, 0x17	; 23
    304c:	ae 2f       	mov	r26, r30
    304e:	82 e8       	ldi	r24, 0x82	; 130
    3050:	97 e1       	ldi	r25, 0x17	; 23
    3052:	ac 01       	movw	r20, r24
    3054:	6a 2f       	mov	r22, r26
    3056:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <_rn2483_serial>
    305a:	90 91 ec 17 	lds	r25, 0x17EC	; 0x8017ec <_rn2483_serial+0x1>
    305e:	f6 d4       	rcall	.+2540   	; 0x3a4c <serial_send_bytes>
    3060:	81 11       	cpse	r24, r1
    3062:	11 c0       	rjmp	.+34     	; 0x3086 <_upload_message+0xa6>
    3064:	08 e2       	ldi	r16, 0x28	; 40
    3066:	15 e0       	ldi	r17, 0x05	; 5
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	4d e2       	ldi	r20, 0x2D	; 45
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	62 e7       	ldi	r22, 0x72	; 114
    3072:	78 e1       	ldi	r23, 0x18	; 24
    3074:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_serial_reply_buffer_handle>
    3078:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    307c:	0e 94 11 0c 	call	0x1822	; 0x1822 <xStreamBufferReceive>
    3080:	82 e7       	ldi	r24, 0x72	; 114
    3082:	98 e1       	ldi	r25, 0x18	; 24
    3084:	02 c0       	rjmp	.+4      	; 0x308a <_upload_message+0xaa>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	08 95       	ret

00003094 <_reply2return_code>:
    3094:	2f 92       	push	r2
    3096:	3f 92       	push	r3
    3098:	4f 92       	push	r4
    309a:	5f 92       	push	r5
    309c:	6f 92       	push	r6
    309e:	7f 92       	push	r7
    30a0:	8f 92       	push	r8
    30a2:	9f 92       	push	r9
    30a4:	af 92       	push	r10
    30a6:	bf 92       	push	r11
    30a8:	cf 92       	push	r12
    30aa:	df 92       	push	r13
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	5c 01       	movw	r10, r24
    30ba:	fc 01       	movw	r30, r24
    30bc:	01 90       	ld	r0, Z+
    30be:	00 20       	and	r0, r0
    30c0:	e9 f7       	brne	.-6      	; 0x30bc <_reply2return_code+0x28>
    30c2:	31 97       	sbiw	r30, 0x01	; 1
    30c4:	6f 01       	movw	r12, r30
    30c6:	c8 1a       	sub	r12, r24
    30c8:	d9 0a       	sbc	r13, r25
    30ca:	5c 2c       	mov	r5, r12
    30cc:	0f 2e       	mov	r0, r31
    30ce:	f2 e7       	ldi	r31, 0x72	; 114
    30d0:	8f 2e       	mov	r8, r31
    30d2:	f6 e0       	ldi	r31, 0x06	; 6
    30d4:	9f 2e       	mov	r9, r31
    30d6:	f0 2d       	mov	r31, r0
    30d8:	e1 2c       	mov	r14, r1
    30da:	f1 2c       	mov	r15, r1
    30dc:	4c 2c       	mov	r4, r12
    30de:	37 01       	movw	r6, r14
    30e0:	f4 01       	movw	r30, r8
    30e2:	01 81       	ldd	r16, Z+1	; 0x01
    30e4:	12 81       	ldd	r17, Z+2	; 0x02
    30e6:	e8 01       	movw	r28, r16
    30e8:	09 90       	ld	r0, Y+
    30ea:	00 20       	and	r0, r0
    30ec:	e9 f7       	brne	.-6      	; 0x30e8 <_reply2return_code+0x54>
    30ee:	21 97       	sbiw	r28, 0x01	; 1
    30f0:	c0 1b       	sub	r28, r16
    30f2:	d1 0b       	sbc	r29, r17
    30f4:	3c 2e       	mov	r3, r28
    30f6:	f9 e0       	ldi	r31, 0x09	; 9
    30f8:	cf 16       	cp	r12, r31
    30fa:	d1 04       	cpc	r13, r1
    30fc:	58 f0       	brcs	.+22     	; 0x3114 <_reply2return_code+0x80>
    30fe:	f4 01       	movw	r30, r8
    3100:	20 80       	ld	r2, Z
    3102:	fe e0       	ldi	r31, 0x0E	; 14
    3104:	2f 12       	cpse	r2, r31
    3106:	06 c0       	rjmp	.+12     	; 0x3114 <_reply2return_code+0x80>
    3108:	b8 01       	movw	r22, r16
    310a:	c5 01       	movw	r24, r10
    310c:	0e 94 0e 24 	call	0x481c	; 0x481c <strcasestr>
    3110:	89 2b       	or	r24, r25
    3112:	09 f5       	brne	.+66     	; 0x3156 <_reply2return_code+0xc2>
    3114:	44 2d       	mov	r20, r4
    3116:	35 14       	cp	r3, r5
    3118:	08 f4       	brcc	.+2      	; 0x311c <_reply2return_code+0x88>
    311a:	4c 2f       	mov	r20, r28
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	b8 01       	movw	r22, r16
    3120:	c5 01       	movw	r24, r10
    3122:	0e 94 45 24 	call	0x488a	; 0x488a <strncasecmp>
    3126:	89 2b       	or	r24, r25
    3128:	49 f4       	brne	.+18     	; 0x313c <_reply2return_code+0xa8>
    312a:	f3 01       	movw	r30, r6
    312c:	ee 0f       	add	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	e6 0d       	add	r30, r6
    3132:	f7 1d       	adc	r31, r7
    3134:	ee 58       	subi	r30, 0x8E	; 142
    3136:	f9 4f       	sbci	r31, 0xF9	; 249
    3138:	20 80       	ld	r2, Z
    313a:	0d c0       	rjmp	.+26     	; 0x3156 <_reply2return_code+0xc2>
    313c:	8f ef       	ldi	r24, 0xFF	; 255
    313e:	e8 1a       	sub	r14, r24
    3140:	f8 0a       	sbc	r15, r24
    3142:	e3 e0       	ldi	r30, 0x03	; 3
    3144:	8e 0e       	add	r8, r30
    3146:	91 1c       	adc	r9, r1
    3148:	f1 e1       	ldi	r31, 0x11	; 17
    314a:	ef 16       	cp	r14, r31
    314c:	f1 04       	cpc	r15, r1
    314e:	39 f6       	brne	.-114    	; 0x30de <_reply2return_code+0x4a>
    3150:	68 94       	set
    3152:	22 24       	eor	r2, r2
    3154:	24 f8       	bld	r2, 4
    3156:	82 2d       	mov	r24, r2
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	ff 90       	pop	r15
    3162:	ef 90       	pop	r14
    3164:	df 90       	pop	r13
    3166:	cf 90       	pop	r12
    3168:	bf 90       	pop	r11
    316a:	af 90       	pop	r10
    316c:	9f 90       	pop	r9
    316e:	8f 90       	pop	r8
    3170:	7f 90       	pop	r7
    3172:	6f 90       	pop	r6
    3174:	5f 90       	pop	r5
    3176:	4f 90       	pop	r4
    3178:	3f 90       	pop	r3
    317a:	2f 90       	pop	r2
    317c:	08 95       	ret

0000317e <_upload_message_rc>:
    317e:	30 df       	rcall	.-416    	; 0x2fe0 <_upload_message>
    3180:	89 cf       	rjmp	.-238    	; 0x3094 <_reply2return_code>
    3182:	08 95       	ret

00003184 <lora_driver_flush_buffers>:
    3184:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_serial_reply_buffer_handle>
    3188:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    318c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <xStreamBufferReset>
    3190:	08 95       	ret

00003192 <lora_driver_create>:
    3192:	8f 92       	push	r8
    3194:	9f 92       	push	r9
    3196:	af 92       	push	r10
    3198:	cf 92       	push	r12
    319a:	ef 92       	push	r14
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	c8 2f       	mov	r28, r24
    31a4:	8b 01       	movw	r16, r22
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	88 ec       	ldi	r24, 0xC8	; 200
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 bb 0a 	call	0x1576	; 0x1576 <xStreamBufferGenericCreate>
    31b4:	90 93 ea 17 	sts	0x17EA, r25	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    31b8:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <_serial_reply_buffer_handle>
    31bc:	10 93 e8 17 	sts	0x17E8, r17	; 0x8017e8 <_downlinkMessageBuffer+0x1>
    31c0:	00 93 e7 17 	sts	0x17E7, r16	; 0x8017e7 <_downlinkMessageBuffer>
    31c4:	0f 2e       	mov	r0, r31
    31c6:	fa ea       	ldi	r31, 0xAA	; 170
    31c8:	8f 2e       	mov	r8, r31
    31ca:	f7 e1       	ldi	r31, 0x17	; 23
    31cc:	9f 2e       	mov	r9, r31
    31ce:	f0 2d       	mov	r31, r0
    31d0:	68 94       	set
    31d2:	aa 24       	eor	r10, r10
    31d4:	a6 f8       	bld	r10, 6
    31d6:	68 94       	set
    31d8:	cc 24       	eor	r12, r12
    31da:	c6 f8       	bld	r12, 6
    31dc:	e1 2c       	mov	r14, r1
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	23 e0       	ldi	r18, 0x03	; 3
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	51 ee       	ldi	r21, 0xE1	; 225
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	8c 2f       	mov	r24, r28
    31ec:	74 d3       	rcall	.+1768   	; 0x38d6 <serial_new_instance>
    31ee:	90 93 ec 17 	sts	0x17EC, r25	; 0x8017ec <_rn2483_serial+0x1>
    31f2:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <_rn2483_serial>
    31f6:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <register_access+0x8>
    31fa:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <register_access+0x9>
    31fe:	64 e0       	ldi	r22, 0x04	; 4
    3200:	87 e0       	ldi	r24, 0x07	; 7
    3202:	91 e0       	ldi	r25, 0x01	; 1
    3204:	19 95       	eicall
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ef 90       	pop	r14
    320e:	cf 90       	pop	r12
    3210:	af 90       	pop	r10
    3212:	9f 90       	pop	r9
    3214:	8f 90       	pop	r8
    3216:	08 95       	ret

00003218 <lora_driver_reset_rn2483>:
    3218:	88 23       	and	r24, r24
    321a:	49 f0       	breq	.+18     	; 0x322e <lora_driver_reset_rn2483+0x16>
    321c:	e0 91 e3 18 	lds	r30, 0x18E3	; 0x8018e3 <register_access+0x12>
    3220:	f0 91 e4 18 	lds	r31, 0x18E4	; 0x8018e4 <register_access+0x13>
    3224:	64 e0       	ldi	r22, 0x04	; 4
    3226:	88 e0       	ldi	r24, 0x08	; 8
    3228:	91 e0       	ldi	r25, 0x01	; 1
    322a:	19 95       	eicall
    322c:	08 95       	ret
    322e:	e0 91 d9 18 	lds	r30, 0x18D9	; 0x8018d9 <register_access+0x8>
    3232:	f0 91 da 18 	lds	r31, 0x18DA	; 0x8018da <register_access+0x9>
    3236:	64 e0       	ldi	r22, 0x04	; 4
    3238:	88 e0       	ldi	r24, 0x08	; 8
    323a:	91 e0       	ldi	r25, 0x01	; 1
    323c:	19 95       	eicall
    323e:	08 95       	ret

00003240 <lora_driver_rn2483_factory_reset>:
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	88 ef       	ldi	r24, 0xF8	; 248
    3246:	93 e0       	ldi	r25, 0x03	; 3
    3248:	cb de       	rcall	.-618    	; 0x2fe0 <_upload_message>
    324a:	e2 e7       	ldi	r30, 0x72	; 114
    324c:	f8 e1       	ldi	r31, 0x18	; 24
    324e:	01 90       	ld	r0, Z+
    3250:	00 20       	and	r0, r0
    3252:	e9 f7       	brne	.-6      	; 0x324e <lora_driver_rn2483_factory_reset+0xe>
    3254:	31 97       	sbiw	r30, 0x01	; 1
    3256:	e2 57       	subi	r30, 0x72	; 114
    3258:	f8 41       	sbci	r31, 0x18	; 24
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	75 97       	sbiw	r30, 0x15	; 21
    325e:	08 f0       	brcs	.+2      	; 0x3262 <lora_driver_rn2483_factory_reset+0x22>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	08 95       	ret

00003264 <lora_driver_get_rn2483_hweui>:
    3264:	cf 93       	push	r28
    3266:	df 93       	push	r29
    3268:	ec 01       	movw	r28, r24
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	89 e0       	ldi	r24, 0x09	; 9
    3270:	94 e0       	ldi	r25, 0x04	; 4
    3272:	b6 de       	rcall	.-660    	; 0x2fe0 <_upload_message>
    3274:	e2 e7       	ldi	r30, 0x72	; 114
    3276:	f8 e1       	ldi	r31, 0x18	; 24
    3278:	01 90       	ld	r0, Z+
    327a:	00 20       	and	r0, r0
    327c:	e9 f7       	brne	.-6      	; 0x3278 <lora_driver_get_rn2483_hweui+0x14>
    327e:	e3 58       	subi	r30, 0x83	; 131
    3280:	f8 41       	sbci	r31, 0x18	; 24
    3282:	39 f4       	brne	.+14     	; 0x3292 <lora_driver_get_rn2483_hweui+0x2e>
    3284:	62 e7       	ldi	r22, 0x72	; 114
    3286:	78 e1       	ldi	r23, 0x18	; 24
    3288:	ce 01       	movw	r24, r28
    328a:	0e 94 3e 24 	call	0x487c	; 0x487c <strcpy>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	02 c0       	rjmp	.+4      	; 0x3296 <lora_driver_get_rn2483_hweui+0x32>
    3292:	18 82       	st	Y, r1
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	08 95       	ret

0000329c <lora_driver_set_device_identifier>:
    329c:	fc 01       	movw	r30, r24
    329e:	01 90       	ld	r0, Z+
    32a0:	00 20       	and	r0, r0
    32a2:	e9 f7       	brne	.-6      	; 0x329e <lora_driver_set_device_identifier+0x2>
    32a4:	9f 01       	movw	r18, r30
    32a6:	21 51       	subi	r18, 0x11	; 17
    32a8:	31 09       	sbc	r19, r1
    32aa:	28 17       	cp	r18, r24
    32ac:	39 07       	cpc	r19, r25
    32ae:	29 f4       	brne	.+10     	; 0x32ba <lora_driver_set_device_identifier+0x1e>
    32b0:	bc 01       	movw	r22, r24
    32b2:	87 e3       	ldi	r24, 0x37	; 55
    32b4:	94 e0       	ldi	r25, 0x04	; 4
    32b6:	63 cf       	rjmp	.-314    	; 0x317e <_upload_message_rc>
    32b8:	08 95       	ret
    32ba:	89 e0       	ldi	r24, 0x09	; 9
    32bc:	08 95       	ret

000032be <lora_driver_set_application_identifier>:
    32be:	fc 01       	movw	r30, r24
    32c0:	01 90       	ld	r0, Z+
    32c2:	00 20       	and	r0, r0
    32c4:	e9 f7       	brne	.-6      	; 0x32c0 <lora_driver_set_application_identifier+0x2>
    32c6:	9f 01       	movw	r18, r30
    32c8:	21 51       	subi	r18, 0x11	; 17
    32ca:	31 09       	sbc	r19, r1
    32cc:	28 17       	cp	r18, r24
    32ce:	39 07       	cpc	r19, r25
    32d0:	29 f4       	brne	.+10     	; 0x32dc <lora_driver_set_application_identifier+0x1e>
    32d2:	bc 01       	movw	r22, r24
    32d4:	86 e4       	ldi	r24, 0x46	; 70
    32d6:	94 e0       	ldi	r25, 0x04	; 4
    32d8:	52 cf       	rjmp	.-348    	; 0x317e <_upload_message_rc>
    32da:	08 95       	ret
    32dc:	89 e0       	ldi	r24, 0x09	; 9
    32de:	08 95       	ret

000032e0 <lora_driver_set_application_key>:
    32e0:	fc 01       	movw	r30, r24
    32e2:	01 90       	ld	r0, Z+
    32e4:	00 20       	and	r0, r0
    32e6:	e9 f7       	brne	.-6      	; 0x32e2 <lora_driver_set_application_key+0x2>
    32e8:	9f 01       	movw	r18, r30
    32ea:	21 52       	subi	r18, 0x21	; 33
    32ec:	31 09       	sbc	r19, r1
    32ee:	28 17       	cp	r18, r24
    32f0:	39 07       	cpc	r19, r25
    32f2:	29 f4       	brne	.+10     	; 0x32fe <lora_driver_set_application_key+0x1e>
    32f4:	bc 01       	movw	r22, r24
    32f6:	85 e5       	ldi	r24, 0x55	; 85
    32f8:	94 e0       	ldi	r25, 0x04	; 4
    32fa:	41 cf       	rjmp	.-382    	; 0x317e <_upload_message_rc>
    32fc:	08 95       	ret
    32fe:	89 e0       	ldi	r24, 0x09	; 9
    3300:	08 95       	ret

00003302 <lora_driver_save_mac>:
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	84 e9       	ldi	r24, 0x94	; 148
    3308:	94 e0       	ldi	r25, 0x04	; 4
    330a:	39 cf       	rjmp	.-398    	; 0x317e <_upload_message_rc>
    330c:	08 95       	ret

0000330e <lora_driver_join>:
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	e8 2f       	mov	r30, r24
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	ee 0f       	add	r30, r30
    3318:	ff 1f       	adc	r31, r31
    331a:	e2 59       	subi	r30, 0x92	; 146
    331c:	f9 4f       	sbci	r31, 0xF9	; 249
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	8d e9       	ldi	r24, 0x9D	; 157
    3324:	94 e0       	ldi	r25, 0x04	; 4
    3326:	2b df       	rcall	.-426    	; 0x317e <_upload_message_rc>
    3328:	81 11       	cpse	r24, r1
    332a:	14 c0       	rjmp	.+40     	; 0x3354 <lora_driver_join+0x46>
    332c:	08 e2       	ldi	r16, 0x28	; 40
    332e:	15 e0       	ldi	r17, 0x05	; 5
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	4d e2       	ldi	r20, 0x2D	; 45
    3336:	50 e0       	ldi	r21, 0x00	; 0
    3338:	62 e7       	ldi	r22, 0x72	; 114
    333a:	78 e1       	ldi	r23, 0x18	; 24
    333c:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_serial_reply_buffer_handle>
    3340:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    3344:	0e 94 11 0c 	call	0x1822	; 0x1822 <xStreamBufferReceive>
    3348:	88 23       	and	r24, r24
    334a:	21 f0       	breq	.+8      	; 0x3354 <lora_driver_join+0x46>
    334c:	82 e7       	ldi	r24, 0x72	; 114
    334e:	98 e1       	ldi	r25, 0x18	; 24
    3350:	a1 de       	rcall	.-702    	; 0x3094 <_reply2return_code>
    3352:	03 c0       	rjmp	.+6      	; 0x335a <lora_driver_join+0x4c>
    3354:	82 e7       	ldi	r24, 0x72	; 114
    3356:	98 e1       	ldi	r25, 0x18	; 24
    3358:	9d de       	rcall	.-710    	; 0x3094 <_reply2return_code>
    335a:	1f 91       	pop	r17
    335c:	0f 91       	pop	r16
    335e:	08 95       	ret

00003360 <lora_driver_sent_upload_message>:
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	1f 92       	push	r1
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	db 01       	movw	r26, r22
    3370:	11 96       	adiw	r26, 0x01	; 1
    3372:	9c 91       	ld	r25, X
    3374:	11 97       	sbiw	r26, 0x01	; 1
    3376:	95 31       	cpi	r25, 0x15	; 21
    3378:	08 f0       	brcs	.+2      	; 0x337c <lora_driver_sent_upload_message+0x1c>
    337a:	b4 c0       	rjmp	.+360    	; 0x34e4 <lora_driver_sent_upload_message+0x184>
    337c:	99 23       	and	r25, r25
    337e:	81 f1       	breq	.+96     	; 0x33e0 <lora_driver_sent_upload_message+0x80>
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	27 2f       	mov	r18, r23
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	46 2f       	mov	r20, r22
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	fd 01       	movw	r30, r26
    338e:	e4 0f       	add	r30, r20
    3390:	f5 1f       	adc	r31, r21
    3392:	92 81       	ldd	r25, Z+2	; 0x02
    3394:	92 95       	swap	r25
    3396:	9f 70       	andi	r25, 0x0F	; 15
    3398:	9a 30       	cpi	r25, 0x0A	; 10
    339a:	10 f0       	brcs	.+4      	; 0x33a0 <lora_driver_sent_upload_message+0x40>
    339c:	99 5c       	subi	r25, 0xC9	; 201
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <lora_driver_sent_upload_message+0x42>
    33a0:	90 5d       	subi	r25, 0xD0	; 208
    33a2:	f9 01       	movw	r30, r18
    33a4:	ed 5f       	subi	r30, 0xFD	; 253
    33a6:	f7 4e       	sbci	r31, 0xE7	; 231
    33a8:	90 83       	st	Z, r25
    33aa:	2f 5f       	subi	r18, 0xFF	; 255
    33ac:	3f 4f       	sbci	r19, 0xFF	; 255
    33ae:	fd 01       	movw	r30, r26
    33b0:	e4 0f       	add	r30, r20
    33b2:	f5 1f       	adc	r31, r21
    33b4:	92 81       	ldd	r25, Z+2	; 0x02
    33b6:	9f 70       	andi	r25, 0x0F	; 15
    33b8:	49 2f       	mov	r20, r25
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	4a 30       	cpi	r20, 0x0A	; 10
    33be:	51 05       	cpc	r21, r1
    33c0:	14 f0       	brlt	.+4      	; 0x33c6 <lora_driver_sent_upload_message+0x66>
    33c2:	99 5c       	subi	r25, 0xC9	; 201
    33c4:	01 c0       	rjmp	.+2      	; 0x33c8 <lora_driver_sent_upload_message+0x68>
    33c6:	90 5d       	subi	r25, 0xD0	; 208
    33c8:	f9 01       	movw	r30, r18
    33ca:	ed 5f       	subi	r30, 0xFD	; 253
    33cc:	f7 4e       	sbci	r31, 0xE7	; 231
    33ce:	90 83       	st	Z, r25
    33d0:	7e 5f       	subi	r23, 0xFE	; 254
    33d2:	6f 5f       	subi	r22, 0xFF	; 255
    33d4:	11 96       	adiw	r26, 0x01	; 1
    33d6:	9c 91       	ld	r25, X
    33d8:	11 97       	sbiw	r26, 0x01	; 1
    33da:	69 17       	cp	r22, r25
    33dc:	98 f2       	brcs	.-90     	; 0x3384 <lora_driver_sent_upload_message+0x24>
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <lora_driver_sent_upload_message+0x82>
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	e7 2f       	mov	r30, r23
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	ed 5f       	subi	r30, 0xFD	; 253
    33e8:	f7 4e       	sbci	r31, 0xE7	; 231
    33ea:	10 82       	st	Z, r1
    33ec:	4c 91       	ld	r20, X
    33ee:	81 11       	cpse	r24, r1
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <lora_driver_sent_upload_message+0x98>
    33f2:	86 ea       	ldi	r24, 0xA6	; 166
    33f4:	94 e0       	ldi	r25, 0x04	; 4
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <lora_driver_sent_upload_message+0x9c>
    33f8:	88 ea       	ldi	r24, 0xA8	; 168
    33fa:	94 e0       	ldi	r25, 0x04	; 4
    33fc:	23 e0       	ldi	r18, 0x03	; 3
    33fe:	38 e1       	ldi	r19, 0x18	; 24
    3400:	3f 93       	push	r19
    3402:	2f 93       	push	r18
    3404:	1f 92       	push	r1
    3406:	4f 93       	push	r20
    3408:	9f 93       	push	r25
    340a:	8f 93       	push	r24
    340c:	8c ea       	ldi	r24, 0xAC	; 172
    340e:	94 e0       	ldi	r25, 0x04	; 4
    3410:	9f 93       	push	r25
    3412:	8f 93       	push	r24
    3414:	85 e4       	ldi	r24, 0x45	; 69
    3416:	98 e1       	ldi	r25, 0x18	; 24
    3418:	9f 93       	push	r25
    341a:	8f 93       	push	r24
    341c:	0e 94 a0 24 	call	0x4940	; 0x4940 <sprintf>
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	85 e4       	ldi	r24, 0x45	; 69
    3426:	98 e1       	ldi	r25, 0x18	; 24
    3428:	aa de       	rcall	.-684    	; 0x317e <_upload_message_rc>
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	81 11       	cpse	r24, r1
    3436:	59 c0       	rjmp	.+178    	; 0x34ea <lora_driver_sent_upload_message+0x18a>
    3438:	08 e2       	ldi	r16, 0x28	; 40
    343a:	15 e0       	ldi	r17, 0x05	; 5
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4d e2       	ldi	r20, 0x2D	; 45
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	62 e7       	ldi	r22, 0x72	; 114
    3446:	78 e1       	ldi	r23, 0x18	; 24
    3448:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_serial_reply_buffer_handle>
    344c:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_serial_reply_buffer_handle+0x1>
    3450:	0e 94 11 0c 	call	0x1822	; 0x1822 <xStreamBufferReceive>
    3454:	88 23       	and	r24, r24
    3456:	09 f4       	brne	.+2      	; 0x345a <lora_driver_sent_upload_message+0xfa>
    3458:	47 c0       	rjmp	.+142    	; 0x34e8 <lora_driver_sent_upload_message+0x188>
    345a:	82 e7       	ldi	r24, 0x72	; 114
    345c:	98 e1       	ldi	r25, 0x18	; 24
    345e:	1a de       	rcall	.-972    	; 0x3094 <_reply2return_code>
    3460:	8e 30       	cpi	r24, 0x0E	; 14
    3462:	09 f0       	breq	.+2      	; 0x3466 <lora_driver_sent_upload_message+0x106>
    3464:	42 c0       	rjmp	.+132    	; 0x34ea <lora_driver_sent_upload_message+0x18a>
    3466:	87 e0       	ldi	r24, 0x07	; 7
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	80 91 e7 17 	lds	r24, 0x17E7	; 0x8017e7 <_downlinkMessageBuffer>
    346e:	90 91 e8 17 	lds	r25, 0x17E8	; 0x8017e8 <_downlinkMessageBuffer+0x1>
    3472:	89 2b       	or	r24, r25
    3474:	a9 f1       	breq	.+106    	; 0x34e0 <lora_driver_sent_upload_message+0x180>
    3476:	be 01       	movw	r22, r28
    3478:	6f 5f       	subi	r22, 0xFF	; 255
    347a:	7f 4f       	sbci	r23, 0xFF	; 255
    347c:	82 e7       	ldi	r24, 0x72	; 114
    347e:	98 e1       	ldi	r25, 0x18	; 24
    3480:	68 d1       	rcall	.+720    	; 0x3752 <decode_port_no>
    3482:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <_downlink_payload>
    3486:	e9 81       	ldd	r30, Y+1	; 0x01
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	ee 58       	subi	r30, 0x8E	; 142
    348c:	f7 4e       	sbci	r31, 0xE7	; 231
    348e:	df 01       	movw	r26, r30
    3490:	0d 90       	ld	r0, X+
    3492:	00 20       	and	r0, r0
    3494:	e9 f7       	brne	.-6      	; 0x3490 <lora_driver_sent_upload_message+0x130>
    3496:	11 97       	sbiw	r26, 0x01	; 1
    3498:	ae 1b       	sub	r26, r30
    349a:	bf 0b       	sbc	r27, r31
    349c:	aa 23       	and	r26, r26
    349e:	91 f0       	breq	.+36     	; 0x34c4 <lora_driver_sent_upload_message+0x164>
    34a0:	bb 27       	eor	r27, r27
    34a2:	cd 01       	movw	r24, r26
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9c 01       	movw	r18, r24
    34a8:	12 f4       	brpl	.+4      	; 0x34ae <lora_driver_sent_upload_message+0x14e>
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	35 95       	asr	r19
    34b0:	27 95       	ror	r18
    34b2:	20 93 ee 17 	sts	0x17EE, r18	; 0x8017ee <_downlink_payload+0x1>
    34b6:	af 01       	movw	r20, r30
    34b8:	4f 5f       	subi	r20, 0xFF	; 255
    34ba:	5f 4f       	sbci	r21, 0xFF	; 255
    34bc:	64 e1       	ldi	r22, 0x14	; 20
    34be:	8f ee       	ldi	r24, 0xEF	; 239
    34c0:	97 e1       	ldi	r25, 0x17	; 23
    34c2:	73 d1       	rcall	.+742    	; 0x37aa <decode_hexadecimal_string_bytes>
    34c4:	01 e0       	ldi	r16, 0x01	; 1
    34c6:	10 e0       	ldi	r17, 0x00	; 0
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	46 e1       	ldi	r20, 0x16	; 22
    34ce:	50 e0       	ldi	r21, 0x00	; 0
    34d0:	6d ee       	ldi	r22, 0xED	; 237
    34d2:	77 e1       	ldi	r23, 0x17	; 23
    34d4:	80 91 e7 17 	lds	r24, 0x17E7	; 0x8017e7 <_downlinkMessageBuffer>
    34d8:	90 91 e8 17 	lds	r25, 0x17E8	; 0x8017e8 <_downlinkMessageBuffer+0x1>
    34dc:	0e 94 26 0b 	call	0x164c	; 0x164c <xStreamBufferSend>
    34e0:	8e e0       	ldi	r24, 0x0E	; 14
    34e2:	03 c0       	rjmp	.+6      	; 0x34ea <lora_driver_sent_upload_message+0x18a>
    34e4:	84 e1       	ldi	r24, 0x14	; 20
    34e6:	01 c0       	rjmp	.+2      	; 0x34ea <lora_driver_sent_upload_message+0x18a>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	0f 90       	pop	r0
    34ec:	df 91       	pop	r29
    34ee:	cf 91       	pop	r28
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret

000034f6 <lora_driver_set_adaptive_data_rate>:
    34f6:	81 30       	cpi	r24, 0x01	; 1
    34f8:	19 f0       	breq	.+6      	; 0x3500 <lora_driver_set_adaptive_data_rate+0xa>
    34fa:	6c eb       	ldi	r22, 0xBC	; 188
    34fc:	74 e0       	ldi	r23, 0x04	; 4
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <lora_driver_set_adaptive_data_rate+0xe>
    3500:	65 e9       	ldi	r22, 0x95	; 149
    3502:	75 e0       	ldi	r23, 0x05	; 5
    3504:	80 ec       	ldi	r24, 0xC0	; 192
    3506:	94 e0       	ldi	r25, 0x04	; 4
    3508:	3a ce       	rjmp	.-908    	; 0x317e <_upload_message_rc>
    350a:	08 95       	ret

0000350c <lora_driver_set_receive_delay>:
    350c:	9f 93       	push	r25
    350e:	8f 93       	push	r24
    3510:	81 ef       	ldi	r24, 0xF1	; 241
    3512:	94 e0       	ldi	r25, 0x04	; 4
    3514:	9f 93       	push	r25
    3516:	8f 93       	push	r24
    3518:	85 e4       	ldi	r24, 0x45	; 69
    351a:	98 e1       	ldi	r25, 0x18	; 24
    351c:	9f 93       	push	r25
    351e:	8f 93       	push	r24
    3520:	0e 94 a0 24 	call	0x4940	; 0x4940 <sprintf>
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	85 e4       	ldi	r24, 0x45	; 69
    352a:	98 e1       	ldi	r25, 0x18	; 24
    352c:	28 de       	rcall	.-944    	; 0x317e <_upload_message_rc>
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	08 95       	ret

0000353c <lora_driver_configure_to_eu868>:
    353c:	2f 92       	push	r2
    353e:	3f 92       	push	r3
    3540:	4f 92       	push	r4
    3542:	5f 92       	push	r5
    3544:	6f 92       	push	r6
    3546:	7f 92       	push	r7
    3548:	8f 92       	push	r8
    354a:	9f 92       	push	r9
    354c:	af 92       	push	r10
    354e:	bf 92       	push	r11
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	a0 97       	sbiw	r28, 0x20	; 32
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	6e e1       	ldi	r22, 0x1E	; 30
    3572:	75 e0       	ldi	r23, 0x05	; 5
    3574:	8a e2       	ldi	r24, 0x2A	; 42
    3576:	95 e0       	ldi	r25, 0x05	; 5
    3578:	33 dd       	rcall	.-1434   	; 0x2fe0 <_upload_message>
    357a:	8c dd       	rcall	.-1256   	; 0x3094 <_reply2return_code>
    357c:	81 11       	cpse	r24, r1
    357e:	a3 c0       	rjmp	.+326    	; 0x36c6 <lora_driver_configure_to_eu868+0x18a>
    3580:	80 e2       	ldi	r24, 0x20	; 32
    3582:	ed e1       	ldi	r30, 0x1D	; 29
    3584:	f2 e0       	ldi	r31, 0x02	; 2
    3586:	de 01       	movw	r26, r28
    3588:	11 96       	adiw	r26, 0x01	; 1
    358a:	01 90       	ld	r0, Z+
    358c:	0d 92       	st	X+, r0
    358e:	8a 95       	dec	r24
    3590:	e1 f7       	brne	.-8      	; 0x358a <lora_driver_configure_to_eu868+0x4e>
    3592:	9e 01       	movw	r18, r28
    3594:	2f 5f       	subi	r18, 0xFF	; 255
    3596:	3f 4f       	sbci	r19, 0xFF	; 255
    3598:	69 01       	movw	r12, r18
    359a:	e1 2c       	mov	r14, r1
    359c:	f1 2c       	mov	r15, r1
    359e:	0f 2e       	mov	r0, r31
    35a0:	f6 e3       	ldi	r31, 0x36	; 54
    35a2:	af 2e       	mov	r10, r31
    35a4:	f5 e0       	ldi	r31, 0x05	; 5
    35a6:	bf 2e       	mov	r11, r31
    35a8:	f0 2d       	mov	r31, r0
    35aa:	05 e4       	ldi	r16, 0x45	; 69
    35ac:	18 e1       	ldi	r17, 0x18	; 24
    35ae:	0f 2e       	mov	r0, r31
    35b0:	ff e4       	ldi	r31, 0x4F	; 79
    35b2:	4f 2e       	mov	r4, r31
    35b4:	f5 e0       	ldi	r31, 0x05	; 5
    35b6:	5f 2e       	mov	r5, r31
    35b8:	f0 2d       	mov	r31, r0
    35ba:	0f 2e       	mov	r0, r31
    35bc:	f6 e6       	ldi	r31, 0x66	; 102
    35be:	8f 2e       	mov	r8, r31
    35c0:	f5 e0       	ldi	r31, 0x05	; 5
    35c2:	9f 2e       	mov	r9, r31
    35c4:	f0 2d       	mov	r31, r0
    35c6:	0f 2e       	mov	r0, r31
    35c8:	f0 e8       	ldi	r31, 0x80	; 128
    35ca:	6f 2e       	mov	r6, r31
    35cc:	f5 e0       	ldi	r31, 0x05	; 5
    35ce:	7f 2e       	mov	r7, r31
    35d0:	f0 2d       	mov	r31, r0
    35d2:	3e 2c       	mov	r3, r14
    35d4:	2f 2c       	mov	r2, r15
    35d6:	ff 92       	push	r15
    35d8:	ef 92       	push	r14
    35da:	bf 92       	push	r11
    35dc:	af 92       	push	r10
    35de:	1f 93       	push	r17
    35e0:	0f 93       	push	r16
    35e2:	0e 94 a0 24 	call	0x4940	; 0x4940 <sprintf>
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	c8 01       	movw	r24, r16
    35ec:	f9 dc       	rcall	.-1550   	; 0x2fe0 <_upload_message>
    35ee:	52 dd       	rcall	.-1372   	; 0x3094 <_reply2return_code>
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	81 11       	cpse	r24, r1
    35fe:	63 c0       	rjmp	.+198    	; 0x36c6 <lora_driver_configure_to_eu868+0x18a>
    3600:	32 e0       	ldi	r19, 0x02	; 2
    3602:	3e 15       	cp	r19, r14
    3604:	e8 f4       	brcc	.+58     	; 0x3640 <lora_driver_configure_to_eu868+0x104>
    3606:	f6 01       	movw	r30, r12
    3608:	83 81       	ldd	r24, Z+3	; 0x03
    360a:	8f 93       	push	r24
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	8f 93       	push	r24
    3610:	81 81       	ldd	r24, Z+1	; 0x01
    3612:	8f 93       	push	r24
    3614:	80 81       	ld	r24, Z
    3616:	8f 93       	push	r24
    3618:	ff 92       	push	r15
    361a:	ef 92       	push	r14
    361c:	5f 92       	push	r5
    361e:	4f 92       	push	r4
    3620:	1f 93       	push	r17
    3622:	0f 93       	push	r16
    3624:	0e 94 a0 24 	call	0x4940	; 0x4940 <sprintf>
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	c8 01       	movw	r24, r16
    362e:	d8 dc       	rcall	.-1616   	; 0x2fe0 <_upload_message>
    3630:	31 dd       	rcall	.-1438   	; 0x3094 <_reply2return_code>
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	81 11       	cpse	r24, r1
    363e:	43 c0       	rjmp	.+134    	; 0x36c6 <lora_driver_configure_to_eu868+0x18a>
    3640:	2f 92       	push	r2
    3642:	3f 92       	push	r3
    3644:	9f 92       	push	r9
    3646:	8f 92       	push	r8
    3648:	1f 93       	push	r17
    364a:	0f 93       	push	r16
    364c:	0e 94 a0 24 	call	0x4940	; 0x4940 <sprintf>
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	c8 01       	movw	r24, r16
    3656:	c4 dc       	rcall	.-1656   	; 0x2fe0 <_upload_message>
    3658:	1d dd       	rcall	.-1478   	; 0x3094 <_reply2return_code>
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	81 11       	cpse	r24, r1
    3668:	2e c0       	rjmp	.+92     	; 0x36c6 <lora_driver_configure_to_eu868+0x18a>
    366a:	2f 92       	push	r2
    366c:	3f 92       	push	r3
    366e:	7f 92       	push	r7
    3670:	6f 92       	push	r6
    3672:	1f 93       	push	r17
    3674:	0f 93       	push	r16
    3676:	0e 94 a0 24 	call	0x4940	; 0x4940 <sprintf>
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	70 e0       	ldi	r23, 0x00	; 0
    367e:	c8 01       	movw	r24, r16
    3680:	af dc       	rcall	.-1698   	; 0x2fe0 <_upload_message>
    3682:	08 dd       	rcall	.-1520   	; 0x3094 <_reply2return_code>
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	81 11       	cpse	r24, r1
    3692:	19 c0       	rjmp	.+50     	; 0x36c6 <lora_driver_configure_to_eu868+0x18a>
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	e3 1a       	sub	r14, r19
    3698:	f3 0a       	sbc	r15, r19
    369a:	84 e0       	ldi	r24, 0x04	; 4
    369c:	c8 0e       	add	r12, r24
    369e:	d1 1c       	adc	r13, r1
    36a0:	98 e0       	ldi	r25, 0x08	; 8
    36a2:	e9 16       	cp	r14, r25
    36a4:	f1 04       	cpc	r15, r1
    36a6:	09 f0       	breq	.+2      	; 0x36aa <lora_driver_configure_to_eu868+0x16e>
    36a8:	94 cf       	rjmp	.-216    	; 0x35d2 <lora_driver_configure_to_eu868+0x96>
    36aa:	60 e0       	ldi	r22, 0x00	; 0
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	88 e9       	ldi	r24, 0x98	; 152
    36b0:	95 e0       	ldi	r25, 0x05	; 5
    36b2:	96 dc       	rcall	.-1748   	; 0x2fe0 <_upload_message>
    36b4:	ef dc       	rcall	.-1570   	; 0x3094 <_reply2return_code>
    36b6:	81 11       	cpse	r24, r1
    36b8:	06 c0       	rjmp	.+12     	; 0x36c6 <lora_driver_configure_to_eu868+0x18a>
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	89 ea       	ldi	r24, 0xA9	; 169
    36c0:	95 e0       	ldi	r25, 0x05	; 5
    36c2:	8e dc       	rcall	.-1764   	; 0x2fe0 <_upload_message>
    36c4:	e7 dc       	rcall	.-1586   	; 0x3094 <_reply2return_code>
    36c6:	a0 96       	adiw	r28, 0x20	; 32
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	1f 91       	pop	r17
    36d8:	0f 91       	pop	r16
    36da:	ff 90       	pop	r15
    36dc:	ef 90       	pop	r14
    36de:	df 90       	pop	r13
    36e0:	cf 90       	pop	r12
    36e2:	bf 90       	pop	r11
    36e4:	af 90       	pop	r10
    36e6:	9f 90       	pop	r9
    36e8:	8f 90       	pop	r8
    36ea:	7f 90       	pop	r7
    36ec:	6f 90       	pop	r6
    36ee:	5f 90       	pop	r5
    36f0:	4f 90       	pop	r4
    36f2:	3f 90       	pop	r3
    36f4:	2f 90       	pop	r2
    36f6:	08 95       	ret

000036f8 <lora_driver_set_otaa_identity>:
    36f8:	ef 92       	push	r14
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	cf 93       	push	r28
    3702:	df 93       	push	r29
    3704:	ec 01       	movw	r28, r24
    3706:	8b 01       	movw	r16, r22
    3708:	7a 01       	movw	r14, r20
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	f4 de       	rcall	.-536    	; 0x34f6 <lora_driver_set_adaptive_data_rate>
    370e:	81 11       	cpse	r24, r1
    3710:	0d c0       	rjmp	.+26     	; 0x372c <lora_driver_set_otaa_identity+0x34>
    3712:	ce 01       	movw	r24, r28
    3714:	d4 dd       	rcall	.-1112   	; 0x32be <lora_driver_set_application_identifier>
    3716:	81 11       	cpse	r24, r1
    3718:	09 c0       	rjmp	.+18     	; 0x372c <lora_driver_set_otaa_identity+0x34>
    371a:	c8 01       	movw	r24, r16
    371c:	e1 dd       	rcall	.-1086   	; 0x32e0 <lora_driver_set_application_key>
    371e:	81 11       	cpse	r24, r1
    3720:	05 c0       	rjmp	.+10     	; 0x372c <lora_driver_set_otaa_identity+0x34>
    3722:	c7 01       	movw	r24, r14
    3724:	bb dd       	rcall	.-1162   	; 0x329c <lora_driver_set_device_identifier>
    3726:	81 11       	cpse	r24, r1
    3728:	01 c0       	rjmp	.+2      	; 0x372c <lora_driver_set_otaa_identity+0x34>
    372a:	eb dd       	rcall	.-1066   	; 0x3302 <lora_driver_save_mac>
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	ff 90       	pop	r15
    3736:	ef 90       	pop	r14
    3738:	08 95       	ret

0000373a <lora_driver_map_return_code_to_text>:
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	fc 01       	movw	r30, r24
    373e:	ee 0f       	add	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	8e 0f       	add	r24, r30
    3744:	9f 1f       	adc	r25, r31
    3746:	fc 01       	movw	r30, r24
    3748:	ee 58       	subi	r30, 0x8E	; 142
    374a:	f9 4f       	sbci	r31, 0xF9	; 249
    374c:	81 81       	ldd	r24, Z+1	; 0x01
    374e:	92 81       	ldd	r25, Z+2	; 0x02
    3750:	08 95       	ret

00003752 <decode_port_no>:
    3752:	dc 01       	movw	r26, r24
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	29 f1       	breq	.+74     	; 0x37a2 <decode_port_no+0x50>
    3758:	fb 01       	movw	r30, r22
    375a:	20 81       	ld	r18, Z
    375c:	fc 01       	movw	r30, r24
    375e:	01 90       	ld	r0, Z+
    3760:	00 20       	and	r0, r0
    3762:	e9 f7       	brne	.-6      	; 0x375e <decode_port_no+0xc>
    3764:	31 97       	sbiw	r30, 0x01	; 1
    3766:	e8 1b       	sub	r30, r24
    3768:	f9 0b       	sbc	r31, r25
    376a:	82 2f       	mov	r24, r18
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	e8 17       	cp	r30, r24
    3770:	f9 07       	cpc	r31, r25
    3772:	c8 f0       	brcs	.+50     	; 0x37a6 <decode_port_no+0x54>
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	08 c0       	rjmp	.+16     	; 0x3788 <decode_port_no+0x36>
    3778:	88 0f       	add	r24, r24
    377a:	38 2f       	mov	r19, r24
    377c:	33 0f       	add	r19, r19
    377e:	33 0f       	add	r19, r19
    3780:	83 0f       	add	r24, r19
    3782:	80 53       	subi	r24, 0x30	; 48
    3784:	89 0f       	add	r24, r25
    3786:	2f 5f       	subi	r18, 0xFF	; 255
    3788:	fd 01       	movw	r30, r26
    378a:	e2 0f       	add	r30, r18
    378c:	f1 1d       	adc	r31, r1
    378e:	90 81       	ld	r25, Z
    3790:	30 ed       	ldi	r19, 0xD0	; 208
    3792:	39 0f       	add	r19, r25
    3794:	3a 30       	cpi	r19, 0x0A	; 10
    3796:	10 f4       	brcc	.+4      	; 0x379c <decode_port_no+0x4a>
    3798:	91 11       	cpse	r25, r1
    379a:	ee cf       	rjmp	.-36     	; 0x3778 <decode_port_no+0x26>
    379c:	fb 01       	movw	r30, r22
    379e:	20 83       	st	Z, r18
    37a0:	08 95       	ret
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	08 95       	ret
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	08 95       	ret

000037aa <decode_hexadecimal_string_bytes>:
    37aa:	0f 93       	push	r16
    37ac:	1f 93       	push	r17
    37ae:	cf 93       	push	r28
    37b0:	df 93       	push	r29
    37b2:	dc 01       	movw	r26, r24
    37b4:	ea 01       	movw	r28, r20
    37b6:	20 97       	sbiw	r28, 0x00	; 0
    37b8:	e1 f1       	breq	.+120    	; 0x3832 <decode_hexadecimal_string_bytes+0x88>
    37ba:	fa 01       	movw	r30, r20
    37bc:	01 90       	ld	r0, Z+
    37be:	00 20       	and	r0, r0
    37c0:	e9 f7       	brne	.-6      	; 0x37bc <decode_hexadecimal_string_bytes+0x12>
    37c2:	31 97       	sbiw	r30, 0x01	; 1
    37c4:	e4 1b       	sub	r30, r20
    37c6:	f5 0b       	sbc	r31, r21
    37c8:	32 97       	sbiw	r30, 0x02	; 2
    37ca:	10 f5       	brcc	.+68     	; 0x3810 <decode_hexadecimal_string_bytes+0x66>
    37cc:	32 c0       	rjmp	.+100    	; 0x3832 <decode_hexadecimal_string_bytes+0x88>
    37ce:	8d 01       	movw	r16, r26
    37d0:	04 0f       	add	r16, r20
    37d2:	15 1f       	adc	r17, r21
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	ae 01       	movw	r20, r28
    37d8:	42 0f       	add	r20, r18
    37da:	53 1f       	adc	r21, r19
    37dc:	fa 01       	movw	r30, r20
    37de:	90 81       	ld	r25, Z
    37e0:	91 34       	cpi	r25, 0x41	; 65
    37e2:	28 f0       	brcs	.+10     	; 0x37ee <decode_hexadecimal_string_bytes+0x44>
    37e4:	97 53       	subi	r25, 0x37	; 55
    37e6:	59 2f       	mov	r21, r25
    37e8:	52 95       	swap	r21
    37ea:	50 7f       	andi	r21, 0xF0	; 240
    37ec:	03 c0       	rjmp	.+6      	; 0x37f4 <decode_hexadecimal_string_bytes+0x4a>
    37ee:	59 2f       	mov	r21, r25
    37f0:	52 95       	swap	r21
    37f2:	50 7f       	andi	r21, 0xF0	; 240
    37f4:	2c 0f       	add	r18, r28
    37f6:	3d 1f       	adc	r19, r29
    37f8:	f9 01       	movw	r30, r18
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	91 34       	cpi	r25, 0x41	; 65
    37fe:	10 f0       	brcs	.+4      	; 0x3804 <decode_hexadecimal_string_bytes+0x5a>
    3800:	97 53       	subi	r25, 0x37	; 55
    3802:	01 c0       	rjmp	.+2      	; 0x3806 <decode_hexadecimal_string_bytes+0x5c>
    3804:	90 53       	subi	r25, 0x30	; 48
    3806:	95 0f       	add	r25, r21
    3808:	f8 01       	movw	r30, r16
    380a:	90 83       	st	Z, r25
    380c:	8f 5f       	subi	r24, 0xFF	; 255
    380e:	01 c0       	rjmp	.+2      	; 0x3812 <decode_hexadecimal_string_bytes+0x68>
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	28 2f       	mov	r18, r24
    3814:	22 0f       	add	r18, r18
    3816:	48 2f       	mov	r20, r24
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	fe 01       	movw	r30, r28
    381c:	01 90       	ld	r0, Z+
    381e:	00 20       	and	r0, r0
    3820:	e9 f7       	brne	.-6      	; 0x381c <decode_hexadecimal_string_bytes+0x72>
    3822:	31 97       	sbiw	r30, 0x01	; 1
    3824:	ec 1b       	sub	r30, r28
    3826:	fd 0b       	sbc	r31, r29
    3828:	4e 17       	cp	r20, r30
    382a:	5f 07       	cpc	r21, r31
    382c:	10 f4       	brcc	.+4      	; 0x3832 <decode_hexadecimal_string_bytes+0x88>
    382e:	86 13       	cpse	r24, r22
    3830:	ce cf       	rjmp	.-100    	; 0x37ce <decode_hexadecimal_string_bytes+0x24>
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <reg_read_register>:
    383c:	fc 01       	movw	r30, r24
    383e:	80 81       	ld	r24, Z
    3840:	08 95       	ret

00003842 <reg_read_bit>:
    3842:	fc 01       	movw	r30, r24
    3844:	20 81       	ld	r18, Z
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	02 c0       	rjmp	.+4      	; 0x3850 <reg_read_bit+0xe>
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	6a 95       	dec	r22
    3852:	e2 f7       	brpl	.-8      	; 0x384c <reg_read_bit+0xa>
    3854:	82 23       	and	r24, r18
    3856:	08 95       	ret

00003858 <reg_read_bits>:
    3858:	fc 01       	movw	r30, r24
    385a:	80 81       	ld	r24, Z
    385c:	86 23       	and	r24, r22
    385e:	08 95       	ret

00003860 <reg_set_register>:
    3860:	fc 01       	movw	r30, r24
    3862:	60 83       	st	Z, r22
    3864:	08 95       	ret

00003866 <reg_clear_register>:
    3866:	fc 01       	movw	r30, r24
    3868:	10 82       	st	Z, r1
    386a:	08 95       	ret

0000386c <reg_set_bit>:
    386c:	fc 01       	movw	r30, r24
    386e:	40 81       	ld	r20, Z
    3870:	21 e0       	ldi	r18, 0x01	; 1
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	02 c0       	rjmp	.+4      	; 0x387a <reg_set_bit+0xe>
    3876:	22 0f       	add	r18, r18
    3878:	33 1f       	adc	r19, r19
    387a:	6a 95       	dec	r22
    387c:	e2 f7       	brpl	.-8      	; 0x3876 <reg_set_bit+0xa>
    387e:	24 2b       	or	r18, r20
    3880:	20 83       	st	Z, r18
    3882:	08 95       	ret

00003884 <reg_set_bits>:
    3884:	fc 01       	movw	r30, r24
    3886:	20 81       	ld	r18, Z
    3888:	62 2b       	or	r22, r18
    388a:	60 83       	st	Z, r22
    388c:	08 95       	ret

0000388e <reg_toggle_bit>:
    388e:	fc 01       	movw	r30, r24
    3890:	40 81       	ld	r20, Z
    3892:	21 e0       	ldi	r18, 0x01	; 1
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	02 c0       	rjmp	.+4      	; 0x389c <reg_toggle_bit+0xe>
    3898:	22 0f       	add	r18, r18
    389a:	33 1f       	adc	r19, r19
    389c:	6a 95       	dec	r22
    389e:	e2 f7       	brpl	.-8      	; 0x3898 <reg_toggle_bit+0xa>
    38a0:	24 27       	eor	r18, r20
    38a2:	20 83       	st	Z, r18
    38a4:	08 95       	ret

000038a6 <reg_toggle_bits>:
    38a6:	fc 01       	movw	r30, r24
    38a8:	20 81       	ld	r18, Z
    38aa:	62 27       	eor	r22, r18
    38ac:	60 83       	st	Z, r22
    38ae:	08 95       	ret

000038b0 <reg_clear_bit>:
    38b0:	fc 01       	movw	r30, r24
    38b2:	90 81       	ld	r25, Z
    38b4:	21 e0       	ldi	r18, 0x01	; 1
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <reg_clear_bit+0xe>
    38ba:	22 0f       	add	r18, r18
    38bc:	33 1f       	adc	r19, r19
    38be:	6a 95       	dec	r22
    38c0:	e2 f7       	brpl	.-8      	; 0x38ba <reg_clear_bit+0xa>
    38c2:	20 95       	com	r18
    38c4:	29 23       	and	r18, r25
    38c6:	20 83       	st	Z, r18
    38c8:	08 95       	ret

000038ca <reg_clear_bits>:
    38ca:	fc 01       	movw	r30, r24
    38cc:	90 81       	ld	r25, Z
    38ce:	60 95       	com	r22
    38d0:	69 23       	and	r22, r25
    38d2:	60 83       	st	Z, r22
    38d4:	08 95       	ret

000038d6 <serial_new_instance>:
    38d6:	2f 92       	push	r2
    38d8:	3f 92       	push	r3
    38da:	4f 92       	push	r4
    38dc:	5f 92       	push	r5
    38de:	6f 92       	push	r6
    38e0:	7f 92       	push	r7
    38e2:	8f 92       	push	r8
    38e4:	9f 92       	push	r9
    38e6:	af 92       	push	r10
    38e8:	cf 92       	push	r12
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	cf 93       	push	r28
    38f4:	df 93       	push	r29
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	f8 2e       	mov	r15, r24
    38fc:	2a 01       	movw	r4, r20
    38fe:	3b 01       	movw	r6, r22
    3900:	88 e0       	ldi	r24, 0x08	; 8
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	56 d6       	rcall	.+3244   	; 0x45b2 <malloc>
    3906:	8c 01       	movw	r16, r24
    3908:	8f 2d       	mov	r24, r15
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	88 0f       	add	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	fc 01       	movw	r30, r24
    3912:	e1 56       	subi	r30, 0x61	; 97
    3914:	f7 4e       	sbci	r31, 0xE7	; 231
    3916:	11 83       	std	Z+1, r17	; 0x01
    3918:	00 83       	st	Z, r16
    391a:	fc 01       	movw	r30, r24
    391c:	ea 5f       	subi	r30, 0xFA	; 250
    391e:	fd 4f       	sbci	r31, 0xFD	; 253
    3920:	80 81       	ld	r24, Z
    3922:	91 81       	ldd	r25, Z+1	; 0x01
    3924:	d8 01       	movw	r26, r16
    3926:	8d 93       	st	X+, r24
    3928:	9c 93       	st	X, r25
    392a:	6c 2d       	mov	r22, r12
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	84 e0       	ldi	r24, 0x04	; 4
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	25 d6       	rcall	.+3146   	; 0x457e <calloc>
    3934:	1c 01       	movw	r2, r24
    3936:	61 e0       	ldi	r22, 0x01	; 1
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	86 e0       	ldi	r24, 0x06	; 6
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	1f d6       	rcall	.+3134   	; 0x457e <calloc>
    3940:	7c 01       	movw	r14, r24
    3942:	4c 2d       	mov	r20, r12
    3944:	b1 01       	movw	r22, r2
    3946:	4a d4       	rcall	.+2196   	; 0x41dc <fifo_init>
    3948:	f8 01       	movw	r30, r16
    394a:	f5 82       	std	Z+5, r15	; 0x05
    394c:	e4 82       	std	Z+4, r14	; 0x04
    394e:	6a 2d       	mov	r22, r10
    3950:	70 e0       	ldi	r23, 0x00	; 0
    3952:	84 e0       	ldi	r24, 0x04	; 4
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	13 d6       	rcall	.+3110   	; 0x457e <calloc>
    3958:	1c 01       	movw	r2, r24
    395a:	61 e0       	ldi	r22, 0x01	; 1
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	86 e0       	ldi	r24, 0x06	; 6
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	0d d6       	rcall	.+3098   	; 0x457e <calloc>
    3964:	7c 01       	movw	r14, r24
    3966:	4a 2d       	mov	r20, r10
    3968:	b1 01       	movw	r22, r2
    396a:	38 d4       	rcall	.+2160   	; 0x41dc <fifo_init>
    396c:	d8 01       	movw	r26, r16
    396e:	13 96       	adiw	r26, 0x03	; 3
    3970:	fc 92       	st	X, r15
    3972:	ee 92       	st	-X, r14
    3974:	12 97       	sbiw	r26, 0x02	; 2
    3976:	17 96       	adiw	r26, 0x07	; 7
    3978:	9c 92       	st	X, r9
    397a:	8e 92       	st	-X, r8
    397c:	16 97       	sbiw	r26, 0x06	; 6
    397e:	ff b6       	in	r15, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	ed 91       	ld	r30, X+
    3984:	fc 91       	ld	r31, X
    3986:	11 97       	sbiw	r26, 0x01	; 1
    3988:	36 97       	sbiw	r30, 0x06	; 6
    398a:	80 81       	ld	r24, Z
    398c:	82 60       	ori	r24, 0x02	; 2
    398e:	80 83       	st	Z, r24
    3990:	8d 90       	ld	r8, X+
    3992:	9c 90       	ld	r9, X
    3994:	c3 01       	movw	r24, r6
    3996:	b2 01       	movw	r22, r4
    3998:	bc d8       	rcall	.-3720   	; 0x2b12 <__floatunsisf>
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	82 d5       	rcall	.+2820   	; 0x44a8 <__mulsf3>
    39a4:	9b 01       	movw	r18, r22
    39a6:	ac 01       	movw	r20, r24
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	74 e2       	ldi	r23, 0x24	; 36
    39ac:	84 e7       	ldi	r24, 0x74	; 116
    39ae:	9b e4       	ldi	r25, 0x4B	; 75
    39b0:	96 d4       	rcall	.+2348   	; 0x42de <__divsf3>
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	2c d4       	rcall	.+2136   	; 0x4214 <__subsf3>
    39bc:	f8 d4       	rcall	.+2544   	; 0x43ae <__fixunssfsi>
    39be:	f4 01       	movw	r30, r8
    39c0:	32 97       	sbiw	r30, 0x02	; 2
    39c2:	60 83       	st	Z, r22
    39c4:	d8 01       	movw	r26, r16
    39c6:	ed 91       	ld	r30, X+
    39c8:	fc 91       	ld	r31, X
    39ca:	11 97       	sbiw	r26, 0x01	; 1
    39cc:	35 97       	sbiw	r30, 0x05	; 5
    39ce:	88 e9       	ldi	r24, 0x98	; 152
    39d0:	80 83       	st	Z, r24
    39d2:	ed 91       	ld	r30, X+
    39d4:	fc 91       	ld	r31, X
    39d6:	34 97       	sbiw	r30, 0x04	; 4
    39d8:	86 e0       	ldi	r24, 0x06	; 6
    39da:	80 83       	st	Z, r24
    39dc:	ff be       	out	0x3f, r15	; 63
    39de:	c8 01       	movw	r24, r16
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	cf 90       	pop	r12
    39ee:	af 90       	pop	r10
    39f0:	9f 90       	pop	r9
    39f2:	8f 90       	pop	r8
    39f4:	7f 90       	pop	r7
    39f6:	6f 90       	pop	r6
    39f8:	5f 90       	pop	r5
    39fa:	4f 90       	pop	r4
    39fc:	3f 90       	pop	r3
    39fe:	2f 90       	pop	r2
    3a00:	08 95       	ret

00003a02 <serial_send_byte>:
    3a02:	cf 93       	push	r28
    3a04:	df 93       	push	r29
    3a06:	ec 01       	movw	r28, r24
    3a08:	ea 81       	ldd	r30, Y+2	; 0x02
    3a0a:	fb 81       	ldd	r31, Y+3	; 0x03
    3a0c:	93 81       	ldd	r25, Z+3	; 0x03
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	25 81       	ldd	r18, Z+5	; 0x05
    3a12:	98 1b       	sub	r25, r24
    3a14:	92 23       	and	r25, r18
    3a16:	84 81       	ldd	r24, Z+4	; 0x04
    3a18:	98 17       	cp	r25, r24
    3a1a:	a1 f0       	breq	.+40     	; 0x3a44 <serial_send_byte+0x42>
    3a1c:	93 81       	ldd	r25, Z+3	; 0x03
    3a1e:	26 95       	lsr	r18
    3a20:	29 23       	and	r18, r25
    3a22:	a0 81       	ld	r26, Z
    3a24:	b1 81       	ldd	r27, Z+1	; 0x01
    3a26:	a2 0f       	add	r26, r18
    3a28:	b1 1d       	adc	r27, r1
    3a2a:	6c 93       	st	X, r22
    3a2c:	9f 5f       	subi	r25, 0xFF	; 255
    3a2e:	25 81       	ldd	r18, Z+5	; 0x05
    3a30:	92 23       	and	r25, r18
    3a32:	93 83       	std	Z+3, r25	; 0x03
    3a34:	e8 81       	ld	r30, Y
    3a36:	f9 81       	ldd	r31, Y+1	; 0x01
    3a38:	35 97       	sbiw	r30, 0x05	; 5
    3a3a:	80 81       	ld	r24, Z
    3a3c:	80 62       	ori	r24, 0x20	; 32
    3a3e:	80 83       	st	Z, r24
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	01 c0       	rjmp	.+2      	; 0x3a46 <serial_send_byte+0x44>
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	08 95       	ret

00003a4c <serial_send_bytes>:
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	7c 01       	movw	r14, r24
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	12 96       	adiw	r26, 0x02	; 2
    3a5e:	ed 91       	ld	r30, X+
    3a60:	fc 91       	ld	r31, X
    3a62:	13 97       	sbiw	r26, 0x03	; 3
    3a64:	93 81       	ldd	r25, Z+3	; 0x03
    3a66:	82 81       	ldd	r24, Z+2	; 0x02
    3a68:	98 1b       	sub	r25, r24
    3a6a:	85 81       	ldd	r24, Z+5	; 0x05
    3a6c:	98 23       	and	r25, r24
    3a6e:	84 81       	ldd	r24, Z+4	; 0x04
    3a70:	89 1b       	sub	r24, r25
    3a72:	86 17       	cp	r24, r22
    3a74:	98 f1       	brcs	.+102    	; 0x3adc <serial_send_bytes+0x90>
    3a76:	66 23       	and	r22, r22
    3a78:	41 f1       	breq	.+80     	; 0x3aca <serial_send_bytes+0x7e>
    3a7a:	84 2f       	mov	r24, r20
    3a7c:	95 2f       	mov	r25, r21
    3a7e:	dc 01       	movw	r26, r24
    3a80:	61 50       	subi	r22, 0x01	; 1
    3a82:	46 2f       	mov	r20, r22
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	4f 5f       	subi	r20, 0xFF	; 255
    3a88:	5f 4f       	sbci	r21, 0xFF	; 255
    3a8a:	48 0f       	add	r20, r24
    3a8c:	59 1f       	adc	r21, r25
    3a8e:	e7 01       	movw	r28, r14
    3a90:	ea 81       	ldd	r30, Y+2	; 0x02
    3a92:	fb 81       	ldd	r31, Y+3	; 0x03
    3a94:	93 81       	ldd	r25, Z+3	; 0x03
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	25 81       	ldd	r18, Z+5	; 0x05
    3a9a:	98 1b       	sub	r25, r24
    3a9c:	92 23       	and	r25, r18
    3a9e:	84 81       	ldd	r24, Z+4	; 0x04
    3aa0:	98 17       	cp	r25, r24
    3aa2:	79 f0       	breq	.+30     	; 0x3ac2 <serial_send_bytes+0x76>
    3aa4:	8c 91       	ld	r24, X
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	26 95       	lsr	r18
    3aaa:	29 23       	and	r18, r25
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	8b 01       	movw	r16, r22
    3ab2:	02 0f       	add	r16, r18
    3ab4:	11 1d       	adc	r17, r1
    3ab6:	e8 01       	movw	r28, r16
    3ab8:	88 83       	st	Y, r24
    3aba:	9f 5f       	subi	r25, 0xFF	; 255
    3abc:	85 81       	ldd	r24, Z+5	; 0x05
    3abe:	98 23       	and	r25, r24
    3ac0:	93 83       	std	Z+3, r25	; 0x03
    3ac2:	11 96       	adiw	r26, 0x01	; 1
    3ac4:	a4 17       	cp	r26, r20
    3ac6:	b5 07       	cpc	r27, r21
    3ac8:	11 f7       	brne	.-60     	; 0x3a8e <serial_send_bytes+0x42>
    3aca:	d7 01       	movw	r26, r14
    3acc:	ed 91       	ld	r30, X+
    3ace:	fc 91       	ld	r31, X
    3ad0:	35 97       	sbiw	r30, 0x05	; 5
    3ad2:	80 81       	ld	r24, Z
    3ad4:	80 62       	ori	r24, 0x20	; 32
    3ad6:	80 83       	st	Z, r24
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <serial_send_bytes+0x92>
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	1f 91       	pop	r17
    3ae4:	0f 91       	pop	r16
    3ae6:	ff 90       	pop	r15
    3ae8:	ef 90       	pop	r14
    3aea:	08 95       	ret

00003aec <serial_get_byte>:
    3aec:	dc 01       	movw	r26, r24
    3aee:	14 96       	adiw	r26, 0x04	; 4
    3af0:	ed 91       	ld	r30, X+
    3af2:	fc 91       	ld	r31, X
    3af4:	15 97       	sbiw	r26, 0x05	; 5
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	82 81       	ldd	r24, Z+2	; 0x02
    3afa:	98 17       	cp	r25, r24
    3afc:	89 f0       	breq	.+34     	; 0x3b20 <serial_get_byte+0x34>
    3afe:	92 81       	ldd	r25, Z+2	; 0x02
    3b00:	85 81       	ldd	r24, Z+5	; 0x05
    3b02:	86 95       	lsr	r24
    3b04:	89 23       	and	r24, r25
    3b06:	a0 81       	ld	r26, Z
    3b08:	b1 81       	ldd	r27, Z+1	; 0x01
    3b0a:	a8 0f       	add	r26, r24
    3b0c:	b1 1d       	adc	r27, r1
    3b0e:	8c 91       	ld	r24, X
    3b10:	db 01       	movw	r26, r22
    3b12:	8c 93       	st	X, r24
    3b14:	9f 5f       	subi	r25, 0xFF	; 255
    3b16:	85 81       	ldd	r24, Z+5	; 0x05
    3b18:	98 23       	and	r25, r24
    3b1a:	92 83       	std	Z+2, r25	; 0x02
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	08 95       	ret
    3b20:	83 e0       	ldi	r24, 0x03	; 3
    3b22:	08 95       	ret

00003b24 <__vector_25>:
    3b24:	1f 92       	push	r1
    3b26:	0f 92       	push	r0
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	0f 92       	push	r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	0b b6       	in	r0, 0x3b	; 59
    3b30:	0f 92       	push	r0
    3b32:	2f 93       	push	r18
    3b34:	3f 93       	push	r19
    3b36:	4f 93       	push	r20
    3b38:	5f 93       	push	r21
    3b3a:	6f 93       	push	r22
    3b3c:	7f 93       	push	r23
    3b3e:	8f 93       	push	r24
    3b40:	9f 93       	push	r25
    3b42:	af 93       	push	r26
    3b44:	bf 93       	push	r27
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	ef 93       	push	r30
    3b4c:	ff 93       	push	r31
    3b4e:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <_ser_handle>
    3b52:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <_ser_handle+0x1>
    3b56:	10 97       	sbiw	r26, 0x00	; 0
    3b58:	11 f1       	breq	.+68     	; 0x3b9e <__vector_25+0x7a>
    3b5a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3b5e:	14 96       	adiw	r26, 0x04	; 4
    3b60:	ed 91       	ld	r30, X+
    3b62:	fc 91       	ld	r31, X
    3b64:	15 97       	sbiw	r26, 0x05	; 5
    3b66:	93 81       	ldd	r25, Z+3	; 0x03
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
    3b6a:	25 81       	ldd	r18, Z+5	; 0x05
    3b6c:	98 1b       	sub	r25, r24
    3b6e:	92 23       	and	r25, r18
    3b70:	84 81       	ldd	r24, Z+4	; 0x04
    3b72:	98 17       	cp	r25, r24
    3b74:	61 f0       	breq	.+24     	; 0x3b8e <__vector_25+0x6a>
    3b76:	83 81       	ldd	r24, Z+3	; 0x03
    3b78:	26 95       	lsr	r18
    3b7a:	28 23       	and	r18, r24
    3b7c:	c0 81       	ld	r28, Z
    3b7e:	d1 81       	ldd	r29, Z+1	; 0x01
    3b80:	c2 0f       	add	r28, r18
    3b82:	d1 1d       	adc	r29, r1
    3b84:	68 83       	st	Y, r22
    3b86:	8f 5f       	subi	r24, 0xFF	; 255
    3b88:	95 81       	ldd	r25, Z+5	; 0x05
    3b8a:	89 23       	and	r24, r25
    3b8c:	83 83       	std	Z+3, r24	; 0x03
    3b8e:	16 96       	adiw	r26, 0x06	; 6
    3b90:	ed 91       	ld	r30, X+
    3b92:	fc 91       	ld	r31, X
    3b94:	17 97       	sbiw	r26, 0x07	; 7
    3b96:	30 97       	sbiw	r30, 0x00	; 0
    3b98:	11 f0       	breq	.+4      	; 0x3b9e <__vector_25+0x7a>
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	19 95       	eicall
    3b9e:	ff 91       	pop	r31
    3ba0:	ef 91       	pop	r30
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	bf 91       	pop	r27
    3ba8:	af 91       	pop	r26
    3baa:	9f 91       	pop	r25
    3bac:	8f 91       	pop	r24
    3bae:	7f 91       	pop	r23
    3bb0:	6f 91       	pop	r22
    3bb2:	5f 91       	pop	r21
    3bb4:	4f 91       	pop	r20
    3bb6:	3f 91       	pop	r19
    3bb8:	2f 91       	pop	r18
    3bba:	0f 90       	pop	r0
    3bbc:	0b be       	out	0x3b, r0	; 59
    3bbe:	0f 90       	pop	r0
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	0f 90       	pop	r0
    3bc4:	1f 90       	pop	r1
    3bc6:	18 95       	reti

00003bc8 <__vector_26>:
    3bc8:	1f 92       	push	r1
    3bca:	0f 92       	push	r0
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	0f 92       	push	r0
    3bd0:	11 24       	eor	r1, r1
    3bd2:	0b b6       	in	r0, 0x3b	; 59
    3bd4:	0f 92       	push	r0
    3bd6:	2f 93       	push	r18
    3bd8:	8f 93       	push	r24
    3bda:	9f 93       	push	r25
    3bdc:	af 93       	push	r26
    3bde:	bf 93       	push	r27
    3be0:	ef 93       	push	r30
    3be2:	ff 93       	push	r31
    3be4:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <_ser_handle>
    3be8:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <_ser_handle+0x1>
    3bec:	30 97       	sbiw	r30, 0x00	; 0
    3bee:	b9 f0       	breq	.+46     	; 0x3c1e <__vector_26+0x56>
    3bf0:	02 80       	ldd	r0, Z+2	; 0x02
    3bf2:	f3 81       	ldd	r31, Z+3	; 0x03
    3bf4:	e0 2d       	mov	r30, r0
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	98 17       	cp	r25, r24
    3bfc:	b1 f0       	breq	.+44     	; 0x3c2a <__vector_26+0x62>
    3bfe:	92 81       	ldd	r25, Z+2	; 0x02
    3c00:	85 81       	ldd	r24, Z+5	; 0x05
    3c02:	28 2f       	mov	r18, r24
    3c04:	26 95       	lsr	r18
    3c06:	29 23       	and	r18, r25
    3c08:	a0 81       	ld	r26, Z
    3c0a:	b1 81       	ldd	r27, Z+1	; 0x01
    3c0c:	a2 0f       	add	r26, r18
    3c0e:	b1 1d       	adc	r27, r1
    3c10:	2c 91       	ld	r18, X
    3c12:	9f 5f       	subi	r25, 0xFF	; 255
    3c14:	89 23       	and	r24, r25
    3c16:	82 83       	std	Z+2, r24	; 0x02
    3c18:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c1c:	0b c0       	rjmp	.+22     	; 0x3c34 <__vector_26+0x6c>
    3c1e:	e1 ec       	ldi	r30, 0xC1	; 193
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	8f 7d       	andi	r24, 0xDF	; 223
    3c26:	80 83       	st	Z, r24
    3c28:	05 c0       	rjmp	.+10     	; 0x3c34 <__vector_26+0x6c>
    3c2a:	e1 ec       	ldi	r30, 0xC1	; 193
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	8f 7d       	andi	r24, 0xDF	; 223
    3c32:	80 83       	st	Z, r24
    3c34:	ff 91       	pop	r31
    3c36:	ef 91       	pop	r30
    3c38:	bf 91       	pop	r27
    3c3a:	af 91       	pop	r26
    3c3c:	9f 91       	pop	r25
    3c3e:	8f 91       	pop	r24
    3c40:	2f 91       	pop	r18
    3c42:	0f 90       	pop	r0
    3c44:	0b be       	out	0x3b, r0	; 59
    3c46:	0f 90       	pop	r0
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	0f 90       	pop	r0
    3c4c:	1f 90       	pop	r1
    3c4e:	18 95       	reti

00003c50 <__vector_36>:
    3c50:	1f 92       	push	r1
    3c52:	0f 92       	push	r0
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	0f 92       	push	r0
    3c58:	11 24       	eor	r1, r1
    3c5a:	0b b6       	in	r0, 0x3b	; 59
    3c5c:	0f 92       	push	r0
    3c5e:	2f 93       	push	r18
    3c60:	3f 93       	push	r19
    3c62:	4f 93       	push	r20
    3c64:	5f 93       	push	r21
    3c66:	6f 93       	push	r22
    3c68:	7f 93       	push	r23
    3c6a:	8f 93       	push	r24
    3c6c:	9f 93       	push	r25
    3c6e:	af 93       	push	r26
    3c70:	bf 93       	push	r27
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	ef 93       	push	r30
    3c78:	ff 93       	push	r31
    3c7a:	a0 91 a1 18 	lds	r26, 0x18A1	; 0x8018a1 <_ser_handle+0x2>
    3c7e:	b0 91 a2 18 	lds	r27, 0x18A2	; 0x8018a2 <_ser_handle+0x3>
    3c82:	10 97       	sbiw	r26, 0x00	; 0
    3c84:	11 f1       	breq	.+68     	; 0x3cca <__vector_36+0x7a>
    3c86:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3c8a:	14 96       	adiw	r26, 0x04	; 4
    3c8c:	ed 91       	ld	r30, X+
    3c8e:	fc 91       	ld	r31, X
    3c90:	15 97       	sbiw	r26, 0x05	; 5
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	25 81       	ldd	r18, Z+5	; 0x05
    3c98:	98 1b       	sub	r25, r24
    3c9a:	92 23       	and	r25, r18
    3c9c:	84 81       	ldd	r24, Z+4	; 0x04
    3c9e:	98 17       	cp	r25, r24
    3ca0:	61 f0       	breq	.+24     	; 0x3cba <__vector_36+0x6a>
    3ca2:	83 81       	ldd	r24, Z+3	; 0x03
    3ca4:	26 95       	lsr	r18
    3ca6:	28 23       	and	r18, r24
    3ca8:	c0 81       	ld	r28, Z
    3caa:	d1 81       	ldd	r29, Z+1	; 0x01
    3cac:	c2 0f       	add	r28, r18
    3cae:	d1 1d       	adc	r29, r1
    3cb0:	68 83       	st	Y, r22
    3cb2:	8f 5f       	subi	r24, 0xFF	; 255
    3cb4:	95 81       	ldd	r25, Z+5	; 0x05
    3cb6:	89 23       	and	r24, r25
    3cb8:	83 83       	std	Z+3, r24	; 0x03
    3cba:	16 96       	adiw	r26, 0x06	; 6
    3cbc:	ed 91       	ld	r30, X+
    3cbe:	fc 91       	ld	r31, X
    3cc0:	17 97       	sbiw	r26, 0x07	; 7
    3cc2:	30 97       	sbiw	r30, 0x00	; 0
    3cc4:	11 f0       	breq	.+4      	; 0x3cca <__vector_36+0x7a>
    3cc6:	cd 01       	movw	r24, r26
    3cc8:	19 95       	eicall
    3cca:	ff 91       	pop	r31
    3ccc:	ef 91       	pop	r30
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	bf 91       	pop	r27
    3cd4:	af 91       	pop	r26
    3cd6:	9f 91       	pop	r25
    3cd8:	8f 91       	pop	r24
    3cda:	7f 91       	pop	r23
    3cdc:	6f 91       	pop	r22
    3cde:	5f 91       	pop	r21
    3ce0:	4f 91       	pop	r20
    3ce2:	3f 91       	pop	r19
    3ce4:	2f 91       	pop	r18
    3ce6:	0f 90       	pop	r0
    3ce8:	0b be       	out	0x3b, r0	; 59
    3cea:	0f 90       	pop	r0
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	0f 90       	pop	r0
    3cf0:	1f 90       	pop	r1
    3cf2:	18 95       	reti

00003cf4 <__vector_37>:
    3cf4:	1f 92       	push	r1
    3cf6:	0f 92       	push	r0
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	0f 92       	push	r0
    3cfc:	11 24       	eor	r1, r1
    3cfe:	0b b6       	in	r0, 0x3b	; 59
    3d00:	0f 92       	push	r0
    3d02:	2f 93       	push	r18
    3d04:	8f 93       	push	r24
    3d06:	9f 93       	push	r25
    3d08:	af 93       	push	r26
    3d0a:	bf 93       	push	r27
    3d0c:	ef 93       	push	r30
    3d0e:	ff 93       	push	r31
    3d10:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <_ser_handle+0x2>
    3d14:	f0 91 a2 18 	lds	r31, 0x18A2	; 0x8018a2 <_ser_handle+0x3>
    3d18:	30 97       	sbiw	r30, 0x00	; 0
    3d1a:	b9 f0       	breq	.+46     	; 0x3d4a <__vector_37+0x56>
    3d1c:	02 80       	ldd	r0, Z+2	; 0x02
    3d1e:	f3 81       	ldd	r31, Z+3	; 0x03
    3d20:	e0 2d       	mov	r30, r0
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	98 17       	cp	r25, r24
    3d28:	b1 f0       	breq	.+44     	; 0x3d56 <__vector_37+0x62>
    3d2a:	92 81       	ldd	r25, Z+2	; 0x02
    3d2c:	85 81       	ldd	r24, Z+5	; 0x05
    3d2e:	28 2f       	mov	r18, r24
    3d30:	26 95       	lsr	r18
    3d32:	29 23       	and	r18, r25
    3d34:	a0 81       	ld	r26, Z
    3d36:	b1 81       	ldd	r27, Z+1	; 0x01
    3d38:	a2 0f       	add	r26, r18
    3d3a:	b1 1d       	adc	r27, r1
    3d3c:	2c 91       	ld	r18, X
    3d3e:	9f 5f       	subi	r25, 0xFF	; 255
    3d40:	89 23       	and	r24, r25
    3d42:	82 83       	std	Z+2, r24	; 0x02
    3d44:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3d48:	0b c0       	rjmp	.+22     	; 0x3d60 <__vector_37+0x6c>
    3d4a:	e9 ec       	ldi	r30, 0xC9	; 201
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	80 81       	ld	r24, Z
    3d50:	8f 7d       	andi	r24, 0xDF	; 223
    3d52:	80 83       	st	Z, r24
    3d54:	05 c0       	rjmp	.+10     	; 0x3d60 <__vector_37+0x6c>
    3d56:	e9 ec       	ldi	r30, 0xC9	; 201
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	80 81       	ld	r24, Z
    3d5c:	8f 7d       	andi	r24, 0xDF	; 223
    3d5e:	80 83       	st	Z, r24
    3d60:	ff 91       	pop	r31
    3d62:	ef 91       	pop	r30
    3d64:	bf 91       	pop	r27
    3d66:	af 91       	pop	r26
    3d68:	9f 91       	pop	r25
    3d6a:	8f 91       	pop	r24
    3d6c:	2f 91       	pop	r18
    3d6e:	0f 90       	pop	r0
    3d70:	0b be       	out	0x3b, r0	; 59
    3d72:	0f 90       	pop	r0
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	0f 90       	pop	r0
    3d78:	1f 90       	pop	r1
    3d7a:	18 95       	reti

00003d7c <__vector_51>:
    3d7c:	1f 92       	push	r1
    3d7e:	0f 92       	push	r0
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	0f 92       	push	r0
    3d84:	11 24       	eor	r1, r1
    3d86:	0b b6       	in	r0, 0x3b	; 59
    3d88:	0f 92       	push	r0
    3d8a:	2f 93       	push	r18
    3d8c:	3f 93       	push	r19
    3d8e:	4f 93       	push	r20
    3d90:	5f 93       	push	r21
    3d92:	6f 93       	push	r22
    3d94:	7f 93       	push	r23
    3d96:	8f 93       	push	r24
    3d98:	9f 93       	push	r25
    3d9a:	af 93       	push	r26
    3d9c:	bf 93       	push	r27
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	ef 93       	push	r30
    3da4:	ff 93       	push	r31
    3da6:	a0 91 a3 18 	lds	r26, 0x18A3	; 0x8018a3 <_ser_handle+0x4>
    3daa:	b0 91 a4 18 	lds	r27, 0x18A4	; 0x8018a4 <_ser_handle+0x5>
    3dae:	10 97       	sbiw	r26, 0x00	; 0
    3db0:	11 f1       	breq	.+68     	; 0x3df6 <__vector_51+0x7a>
    3db2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3db6:	14 96       	adiw	r26, 0x04	; 4
    3db8:	ed 91       	ld	r30, X+
    3dba:	fc 91       	ld	r31, X
    3dbc:	15 97       	sbiw	r26, 0x05	; 5
    3dbe:	93 81       	ldd	r25, Z+3	; 0x03
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	25 81       	ldd	r18, Z+5	; 0x05
    3dc4:	98 1b       	sub	r25, r24
    3dc6:	92 23       	and	r25, r18
    3dc8:	84 81       	ldd	r24, Z+4	; 0x04
    3dca:	98 17       	cp	r25, r24
    3dcc:	61 f0       	breq	.+24     	; 0x3de6 <__vector_51+0x6a>
    3dce:	83 81       	ldd	r24, Z+3	; 0x03
    3dd0:	26 95       	lsr	r18
    3dd2:	28 23       	and	r18, r24
    3dd4:	c0 81       	ld	r28, Z
    3dd6:	d1 81       	ldd	r29, Z+1	; 0x01
    3dd8:	c2 0f       	add	r28, r18
    3dda:	d1 1d       	adc	r29, r1
    3ddc:	68 83       	st	Y, r22
    3dde:	8f 5f       	subi	r24, 0xFF	; 255
    3de0:	95 81       	ldd	r25, Z+5	; 0x05
    3de2:	89 23       	and	r24, r25
    3de4:	83 83       	std	Z+3, r24	; 0x03
    3de6:	16 96       	adiw	r26, 0x06	; 6
    3de8:	ed 91       	ld	r30, X+
    3dea:	fc 91       	ld	r31, X
    3dec:	17 97       	sbiw	r26, 0x07	; 7
    3dee:	30 97       	sbiw	r30, 0x00	; 0
    3df0:	11 f0       	breq	.+4      	; 0x3df6 <__vector_51+0x7a>
    3df2:	cd 01       	movw	r24, r26
    3df4:	19 95       	eicall
    3df6:	ff 91       	pop	r31
    3df8:	ef 91       	pop	r30
    3dfa:	df 91       	pop	r29
    3dfc:	cf 91       	pop	r28
    3dfe:	bf 91       	pop	r27
    3e00:	af 91       	pop	r26
    3e02:	9f 91       	pop	r25
    3e04:	8f 91       	pop	r24
    3e06:	7f 91       	pop	r23
    3e08:	6f 91       	pop	r22
    3e0a:	5f 91       	pop	r21
    3e0c:	4f 91       	pop	r20
    3e0e:	3f 91       	pop	r19
    3e10:	2f 91       	pop	r18
    3e12:	0f 90       	pop	r0
    3e14:	0b be       	out	0x3b, r0	; 59
    3e16:	0f 90       	pop	r0
    3e18:	0f be       	out	0x3f, r0	; 63
    3e1a:	0f 90       	pop	r0
    3e1c:	1f 90       	pop	r1
    3e1e:	18 95       	reti

00003e20 <__vector_52>:
    3e20:	1f 92       	push	r1
    3e22:	0f 92       	push	r0
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	0f 92       	push	r0
    3e28:	11 24       	eor	r1, r1
    3e2a:	0b b6       	in	r0, 0x3b	; 59
    3e2c:	0f 92       	push	r0
    3e2e:	2f 93       	push	r18
    3e30:	8f 93       	push	r24
    3e32:	9f 93       	push	r25
    3e34:	af 93       	push	r26
    3e36:	bf 93       	push	r27
    3e38:	ef 93       	push	r30
    3e3a:	ff 93       	push	r31
    3e3c:	e0 91 a3 18 	lds	r30, 0x18A3	; 0x8018a3 <_ser_handle+0x4>
    3e40:	f0 91 a4 18 	lds	r31, 0x18A4	; 0x8018a4 <_ser_handle+0x5>
    3e44:	30 97       	sbiw	r30, 0x00	; 0
    3e46:	b9 f0       	breq	.+46     	; 0x3e76 <__vector_52+0x56>
    3e48:	02 80       	ldd	r0, Z+2	; 0x02
    3e4a:	f3 81       	ldd	r31, Z+3	; 0x03
    3e4c:	e0 2d       	mov	r30, r0
    3e4e:	93 81       	ldd	r25, Z+3	; 0x03
    3e50:	82 81       	ldd	r24, Z+2	; 0x02
    3e52:	98 17       	cp	r25, r24
    3e54:	b1 f0       	breq	.+44     	; 0x3e82 <__vector_52+0x62>
    3e56:	92 81       	ldd	r25, Z+2	; 0x02
    3e58:	85 81       	ldd	r24, Z+5	; 0x05
    3e5a:	28 2f       	mov	r18, r24
    3e5c:	26 95       	lsr	r18
    3e5e:	29 23       	and	r18, r25
    3e60:	a0 81       	ld	r26, Z
    3e62:	b1 81       	ldd	r27, Z+1	; 0x01
    3e64:	a2 0f       	add	r26, r18
    3e66:	b1 1d       	adc	r27, r1
    3e68:	2c 91       	ld	r18, X
    3e6a:	9f 5f       	subi	r25, 0xFF	; 255
    3e6c:	89 23       	and	r24, r25
    3e6e:	82 83       	std	Z+2, r24	; 0x02
    3e70:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3e74:	0b c0       	rjmp	.+22     	; 0x3e8c <__vector_52+0x6c>
    3e76:	e1 ed       	ldi	r30, 0xD1	; 209
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	80 81       	ld	r24, Z
    3e7c:	8f 7d       	andi	r24, 0xDF	; 223
    3e7e:	80 83       	st	Z, r24
    3e80:	05 c0       	rjmp	.+10     	; 0x3e8c <__vector_52+0x6c>
    3e82:	e1 ed       	ldi	r30, 0xD1	; 209
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	80 81       	ld	r24, Z
    3e88:	8f 7d       	andi	r24, 0xDF	; 223
    3e8a:	80 83       	st	Z, r24
    3e8c:	ff 91       	pop	r31
    3e8e:	ef 91       	pop	r30
    3e90:	bf 91       	pop	r27
    3e92:	af 91       	pop	r26
    3e94:	9f 91       	pop	r25
    3e96:	8f 91       	pop	r24
    3e98:	2f 91       	pop	r18
    3e9a:	0f 90       	pop	r0
    3e9c:	0b be       	out	0x3b, r0	; 59
    3e9e:	0f 90       	pop	r0
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	0f 90       	pop	r0
    3ea4:	1f 90       	pop	r1
    3ea6:	18 95       	reti

00003ea8 <__vector_54>:
    3ea8:	1f 92       	push	r1
    3eaa:	0f 92       	push	r0
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	0f 92       	push	r0
    3eb0:	11 24       	eor	r1, r1
    3eb2:	0b b6       	in	r0, 0x3b	; 59
    3eb4:	0f 92       	push	r0
    3eb6:	2f 93       	push	r18
    3eb8:	3f 93       	push	r19
    3eba:	4f 93       	push	r20
    3ebc:	5f 93       	push	r21
    3ebe:	6f 93       	push	r22
    3ec0:	7f 93       	push	r23
    3ec2:	8f 93       	push	r24
    3ec4:	9f 93       	push	r25
    3ec6:	af 93       	push	r26
    3ec8:	bf 93       	push	r27
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	ef 93       	push	r30
    3ed0:	ff 93       	push	r31
    3ed2:	a0 91 a5 18 	lds	r26, 0x18A5	; 0x8018a5 <_ser_handle+0x6>
    3ed6:	b0 91 a6 18 	lds	r27, 0x18A6	; 0x8018a6 <_ser_handle+0x7>
    3eda:	10 97       	sbiw	r26, 0x00	; 0
    3edc:	11 f1       	breq	.+68     	; 0x3f22 <__vector_54+0x7a>
    3ede:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3ee2:	14 96       	adiw	r26, 0x04	; 4
    3ee4:	ed 91       	ld	r30, X+
    3ee6:	fc 91       	ld	r31, X
    3ee8:	15 97       	sbiw	r26, 0x05	; 5
    3eea:	93 81       	ldd	r25, Z+3	; 0x03
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	25 81       	ldd	r18, Z+5	; 0x05
    3ef0:	98 1b       	sub	r25, r24
    3ef2:	92 23       	and	r25, r18
    3ef4:	84 81       	ldd	r24, Z+4	; 0x04
    3ef6:	98 17       	cp	r25, r24
    3ef8:	61 f0       	breq	.+24     	; 0x3f12 <__vector_54+0x6a>
    3efa:	83 81       	ldd	r24, Z+3	; 0x03
    3efc:	26 95       	lsr	r18
    3efe:	28 23       	and	r18, r24
    3f00:	c0 81       	ld	r28, Z
    3f02:	d1 81       	ldd	r29, Z+1	; 0x01
    3f04:	c2 0f       	add	r28, r18
    3f06:	d1 1d       	adc	r29, r1
    3f08:	68 83       	st	Y, r22
    3f0a:	8f 5f       	subi	r24, 0xFF	; 255
    3f0c:	95 81       	ldd	r25, Z+5	; 0x05
    3f0e:	89 23       	and	r24, r25
    3f10:	83 83       	std	Z+3, r24	; 0x03
    3f12:	16 96       	adiw	r26, 0x06	; 6
    3f14:	ed 91       	ld	r30, X+
    3f16:	fc 91       	ld	r31, X
    3f18:	17 97       	sbiw	r26, 0x07	; 7
    3f1a:	30 97       	sbiw	r30, 0x00	; 0
    3f1c:	11 f0       	breq	.+4      	; 0x3f22 <__vector_54+0x7a>
    3f1e:	cd 01       	movw	r24, r26
    3f20:	19 95       	eicall
    3f22:	ff 91       	pop	r31
    3f24:	ef 91       	pop	r30
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	bf 91       	pop	r27
    3f2c:	af 91       	pop	r26
    3f2e:	9f 91       	pop	r25
    3f30:	8f 91       	pop	r24
    3f32:	7f 91       	pop	r23
    3f34:	6f 91       	pop	r22
    3f36:	5f 91       	pop	r21
    3f38:	4f 91       	pop	r20
    3f3a:	3f 91       	pop	r19
    3f3c:	2f 91       	pop	r18
    3f3e:	0f 90       	pop	r0
    3f40:	0b be       	out	0x3b, r0	; 59
    3f42:	0f 90       	pop	r0
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	0f 90       	pop	r0
    3f48:	1f 90       	pop	r1
    3f4a:	18 95       	reti

00003f4c <__vector_55>:
    3f4c:	1f 92       	push	r1
    3f4e:	0f 92       	push	r0
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	0f 92       	push	r0
    3f54:	11 24       	eor	r1, r1
    3f56:	0b b6       	in	r0, 0x3b	; 59
    3f58:	0f 92       	push	r0
    3f5a:	2f 93       	push	r18
    3f5c:	8f 93       	push	r24
    3f5e:	9f 93       	push	r25
    3f60:	af 93       	push	r26
    3f62:	bf 93       	push	r27
    3f64:	ef 93       	push	r30
    3f66:	ff 93       	push	r31
    3f68:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <_ser_handle+0x6>
    3f6c:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <_ser_handle+0x7>
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	b9 f0       	breq	.+46     	; 0x3fa2 <__vector_55+0x56>
    3f74:	02 80       	ldd	r0, Z+2	; 0x02
    3f76:	f3 81       	ldd	r31, Z+3	; 0x03
    3f78:	e0 2d       	mov	r30, r0
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	82 81       	ldd	r24, Z+2	; 0x02
    3f7e:	98 17       	cp	r25, r24
    3f80:	b1 f0       	breq	.+44     	; 0x3fae <__vector_55+0x62>
    3f82:	92 81       	ldd	r25, Z+2	; 0x02
    3f84:	85 81       	ldd	r24, Z+5	; 0x05
    3f86:	28 2f       	mov	r18, r24
    3f88:	26 95       	lsr	r18
    3f8a:	29 23       	and	r18, r25
    3f8c:	a0 81       	ld	r26, Z
    3f8e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f90:	a2 0f       	add	r26, r18
    3f92:	b1 1d       	adc	r27, r1
    3f94:	2c 91       	ld	r18, X
    3f96:	9f 5f       	subi	r25, 0xFF	; 255
    3f98:	89 23       	and	r24, r25
    3f9a:	82 83       	std	Z+2, r24	; 0x02
    3f9c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3fa0:	0b c0       	rjmp	.+22     	; 0x3fb8 <__vector_55+0x6c>
    3fa2:	e1 e3       	ldi	r30, 0x31	; 49
    3fa4:	f1 e0       	ldi	r31, 0x01	; 1
    3fa6:	80 81       	ld	r24, Z
    3fa8:	8f 7d       	andi	r24, 0xDF	; 223
    3faa:	80 83       	st	Z, r24
    3fac:	05 c0       	rjmp	.+10     	; 0x3fb8 <__vector_55+0x6c>
    3fae:	e1 e3       	ldi	r30, 0x31	; 49
    3fb0:	f1 e0       	ldi	r31, 0x01	; 1
    3fb2:	80 81       	ld	r24, Z
    3fb4:	8f 7d       	andi	r24, 0xDF	; 223
    3fb6:	80 83       	st	Z, r24
    3fb8:	ff 91       	pop	r31
    3fba:	ef 91       	pop	r30
    3fbc:	bf 91       	pop	r27
    3fbe:	af 91       	pop	r26
    3fc0:	9f 91       	pop	r25
    3fc2:	8f 91       	pop	r24
    3fc4:	2f 91       	pop	r18
    3fc6:	0f 90       	pop	r0
    3fc8:	0b be       	out	0x3b, r0	; 59
    3fca:	0f 90       	pop	r0
    3fcc:	0f be       	out	0x3f, r0	; 63
    3fce:	0f 90       	pop	r0
    3fd0:	1f 90       	pop	r1
    3fd2:	18 95       	reti

00003fd4 <usart_getchar>:
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	1f 92       	push	r1
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
    3fde:	be 01       	movw	r22, r28
    3fe0:	6f 5f       	subi	r22, 0xFF	; 255
    3fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe4:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <_com_serial_instance>
    3fe8:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <_com_serial_instance+0x1>
    3fec:	7f dd       	rcall	.-1282   	; 0x3aec <serial_get_byte>
    3fee:	81 11       	cpse	r24, r1
    3ff0:	f6 cf       	rjmp	.-20     	; 0x3fde <usart_getchar+0xa>
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0f 90       	pop	r0
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <usart_putchar>:
    3ffe:	68 2f       	mov	r22, r24
    4000:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <_com_serial_instance>
    4004:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <_com_serial_instance+0x1>
    4008:	fc dc       	rcall	.-1544   	; 0x3a02 <serial_send_byte>
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	08 95       	ret

00004010 <stdioCreate>:
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	cf 92       	push	r12
    4018:	ef 92       	push	r14
    401a:	0f 93       	push	r16
    401c:	81 2c       	mov	r8, r1
    401e:	91 2c       	mov	r9, r1
    4020:	68 94       	set
    4022:	aa 24       	eor	r10, r10
    4024:	a7 f8       	bld	r10, 7
    4026:	68 94       	set
    4028:	cc 24       	eor	r12, r12
    402a:	c7 f8       	bld	r12, 7
    402c:	e1 2c       	mov	r14, r1
    402e:	00 e0       	ldi	r16, 0x00	; 0
    4030:	23 e0       	ldi	r18, 0x03	; 3
    4032:	40 e0       	ldi	r20, 0x00	; 0
    4034:	51 ee       	ldi	r21, 0xE1	; 225
    4036:	60 e0       	ldi	r22, 0x00	; 0
    4038:	70 e0       	ldi	r23, 0x00	; 0
    403a:	4d dc       	rcall	.-1894   	; 0x38d6 <serial_new_instance>
    403c:	90 93 a8 18 	sts	0x18A8, r25	; 0x8018a8 <_com_serial_instance+0x1>
    4040:	80 93 a7 18 	sts	0x18A7, r24	; 0x8018a7 <_com_serial_instance>
    4044:	eb ee       	ldi	r30, 0xEB	; 235
    4046:	f8 e1       	ldi	r31, 0x18	; 24
    4048:	8e e0       	ldi	r24, 0x0E	; 14
    404a:	92 e0       	ldi	r25, 0x02	; 2
    404c:	91 83       	std	Z+1, r25	; 0x01
    404e:	80 83       	st	Z, r24
    4050:	93 83       	std	Z+3, r25	; 0x03
    4052:	82 83       	std	Z+2, r24	; 0x02
    4054:	0f 91       	pop	r16
    4056:	ef 90       	pop	r14
    4058:	cf 90       	pop	r12
    405a:	af 90       	pop	r10
    405c:	9f 90       	pop	r9
    405e:	8f 90       	pop	r8
    4060:	08 95       	ret

00004062 <__vector_39>:
    4062:	1f 92       	push	r1
    4064:	0f 92       	push	r0
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	0f 92       	push	r0
    406a:	11 24       	eor	r1, r1
    406c:	0b b6       	in	r0, 0x3b	; 59
    406e:	0f 92       	push	r0
    4070:	2f 93       	push	r18
    4072:	3f 93       	push	r19
    4074:	4f 93       	push	r20
    4076:	5f 93       	push	r21
    4078:	6f 93       	push	r22
    407a:	7f 93       	push	r23
    407c:	8f 93       	push	r24
    407e:	9f 93       	push	r25
    4080:	af 93       	push	r26
    4082:	bf 93       	push	r27
    4084:	ef 93       	push	r30
    4086:	ff 93       	push	r31
    4088:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    408c:	8e 2f       	mov	r24, r30
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	fc 01       	movw	r30, r24
    4092:	38 97       	sbiw	r30, 0x08	; 8
    4094:	e1 35       	cpi	r30, 0x51	; 81
    4096:	f1 05       	cpc	r31, r1
    4098:	08 f0       	brcs	.+2      	; 0x409c <__vector_39+0x3a>
    409a:	75 c0       	rjmp	.+234    	; 0x4186 <__vector_39+0x124>
    409c:	88 27       	eor	r24, r24
    409e:	e4 58       	subi	r30, 0x84	; 132
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	8f 4f       	sbci	r24, 0xFF	; 255
    40a4:	64 c2       	rjmp	.+1224   	; 0x456e <__tablejump2__>
    40a6:	10 92 a9 18 	sts	0x18A9, r1	; 0x8018a9 <_index.1885>
    40aa:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <_index.1885>
    40ae:	80 91 ac 18 	lds	r24, 0x18AC	; 0x8018ac <_twiMessageLen>
    40b2:	e8 17       	cp	r30, r24
    40b4:	70 f4       	brcc	.+28     	; 0x40d2 <__vector_39+0x70>
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	8e 0f       	add	r24, r30
    40ba:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <_index.1885>
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	e3 55       	subi	r30, 0x53	; 83
    40c2:	f7 4e       	sbci	r31, 0xE7	; 231
    40c4:	80 81       	ld	r24, Z
    40c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    40ca:	85 e8       	ldi	r24, 0x85	; 133
    40cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    40d0:	72 c0       	rjmp	.+228    	; 0x41b6 <__vector_39+0x154>
    40d2:	84 e9       	ldi	r24, 0x94	; 148
    40d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    40d8:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <_twiCurrentHandler>
    40dc:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <_twiCurrentHandler+0x1>
    40e0:	dc 01       	movw	r26, r24
    40e2:	12 96       	adiw	r26, 0x02	; 2
    40e4:	ed 91       	ld	r30, X+
    40e6:	fc 91       	ld	r31, X
    40e8:	13 97       	sbiw	r26, 0x03	; 3
    40ea:	30 97       	sbiw	r30, 0x00	; 0
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <__vector_39+0x8e>
    40ee:	63 c0       	rjmp	.+198    	; 0x41b6 <__vector_39+0x154>
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	40 e0       	ldi	r20, 0x00	; 0
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	64 e0       	ldi	r22, 0x04	; 4
    40f8:	19 95       	eicall
    40fa:	5d c0       	rjmp	.+186    	; 0x41b6 <__vector_39+0x154>
    40fc:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <_index.1885>
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	8e 0f       	add	r24, r30
    4104:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <_index.1885>
    4108:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    410c:	f0 e0       	ldi	r31, 0x00	; 0
    410e:	e3 55       	subi	r30, 0x53	; 83
    4110:	f7 4e       	sbci	r31, 0xE7	; 231
    4112:	80 83       	st	Z, r24
    4114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4118:	80 34       	cpi	r24, 0x40	; 64
    411a:	11 f4       	brne	.+4      	; 0x4120 <__vector_39+0xbe>
    411c:	10 92 a9 18 	sts	0x18A9, r1	; 0x8018a9 <_index.1885>
    4120:	20 91 a9 18 	lds	r18, 0x18A9	; 0x8018a9 <_index.1885>
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	80 91 ac 18 	lds	r24, 0x18AC	; 0x8018ac <_twiMessageLen>
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	28 17       	cp	r18, r24
    4130:	39 07       	cpc	r19, r25
    4132:	24 f4       	brge	.+8      	; 0x413c <__vector_39+0xda>
    4134:	85 ec       	ldi	r24, 0xC5	; 197
    4136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    413a:	3d c0       	rjmp	.+122    	; 0x41b6 <__vector_39+0x154>
    413c:	85 e8       	ldi	r24, 0x85	; 133
    413e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4142:	39 c0       	rjmp	.+114    	; 0x41b6 <__vector_39+0x154>
    4144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4148:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <_index.1885>
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	e3 55       	subi	r30, 0x53	; 83
    4150:	f7 4e       	sbci	r31, 0xE7	; 231
    4152:	80 83       	st	Z, r24
    4154:	84 e9       	ldi	r24, 0x94	; 148
    4156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    415a:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <_twiCurrentHandler>
    415e:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <_twiCurrentHandler+0x1>
    4162:	dc 01       	movw	r26, r24
    4164:	12 96       	adiw	r26, 0x02	; 2
    4166:	ed 91       	ld	r30, X+
    4168:	fc 91       	ld	r31, X
    416a:	13 97       	sbiw	r26, 0x03	; 3
    416c:	30 97       	sbiw	r30, 0x00	; 0
    416e:	19 f1       	breq	.+70     	; 0x41b6 <__vector_39+0x154>
    4170:	20 91 ac 18 	lds	r18, 0x18AC	; 0x8018ac <_twiMessageLen>
    4174:	4d ea       	ldi	r20, 0xAD	; 173
    4176:	58 e1       	ldi	r21, 0x18	; 24
    4178:	65 e0       	ldi	r22, 0x05	; 5
    417a:	19 95       	eicall
    417c:	1c c0       	rjmp	.+56     	; 0x41b6 <__vector_39+0x154>
    417e:	85 ea       	ldi	r24, 0xA5	; 165
    4180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4184:	18 c0       	rjmp	.+48     	; 0x41b6 <__vector_39+0x154>
    4186:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    418a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_twiCurrentState>
    418e:	84 e0       	ldi	r24, 0x04	; 4
    4190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4194:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <_twiCurrentHandler>
    4198:	90 91 ab 18 	lds	r25, 0x18AB	; 0x8018ab <_twiCurrentHandler+0x1>
    419c:	dc 01       	movw	r26, r24
    419e:	12 96       	adiw	r26, 0x02	; 2
    41a0:	ed 91       	ld	r30, X+
    41a2:	fc 91       	ld	r31, X
    41a4:	13 97       	sbiw	r26, 0x03	; 3
    41a6:	30 97       	sbiw	r30, 0x00	; 0
    41a8:	31 f0       	breq	.+12     	; 0x41b6 <__vector_39+0x154>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	40 e0       	ldi	r20, 0x00	; 0
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_twiCurrentState>
    41b4:	19 95       	eicall
    41b6:	ff 91       	pop	r31
    41b8:	ef 91       	pop	r30
    41ba:	bf 91       	pop	r27
    41bc:	af 91       	pop	r26
    41be:	9f 91       	pop	r25
    41c0:	8f 91       	pop	r24
    41c2:	7f 91       	pop	r23
    41c4:	6f 91       	pop	r22
    41c6:	5f 91       	pop	r21
    41c8:	4f 91       	pop	r20
    41ca:	3f 91       	pop	r19
    41cc:	2f 91       	pop	r18
    41ce:	0f 90       	pop	r0
    41d0:	0b be       	out	0x3b, r0	; 59
    41d2:	0f 90       	pop	r0
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	0f 90       	pop	r0
    41d8:	1f 90       	pop	r1
    41da:	18 95       	reti

000041dc <fifo_init>:
    41dc:	fc 01       	movw	r30, r24
    41de:	41 11       	cpse	r20, r1
    41e0:	01 c0       	rjmp	.+2      	; 0x41e4 <fifo_init+0x8>
    41e2:	08 d3       	rcall	.+1552   	; 0x47f4 <abort>
    41e4:	84 2f       	mov	r24, r20
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	9c 01       	movw	r18, r24
    41ea:	21 50       	subi	r18, 0x01	; 1
    41ec:	31 09       	sbc	r19, r1
    41ee:	82 23       	and	r24, r18
    41f0:	93 23       	and	r25, r19
    41f2:	89 2b       	or	r24, r25
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <fifo_init+0x1c>
    41f6:	fe d2       	rcall	.+1532   	; 0x47f4 <abort>
    41f8:	41 38       	cpi	r20, 0x81	; 129
    41fa:	08 f0       	brcs	.+2      	; 0x41fe <fifo_init+0x22>
    41fc:	fb d2       	rcall	.+1526   	; 0x47f4 <abort>
    41fe:	12 82       	std	Z+2, r1	; 0x02
    4200:	13 82       	std	Z+3, r1	; 0x03
    4202:	44 83       	std	Z+4, r20	; 0x04
    4204:	44 0f       	add	r20, r20
    4206:	41 50       	subi	r20, 0x01	; 1
    4208:	45 83       	std	Z+5, r20	; 0x05
    420a:	71 83       	std	Z+1, r23	; 0x01
    420c:	60 83       	st	Z, r22
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	08 95       	ret

00004214 <__subsf3>:
    4214:	50 58       	subi	r21, 0x80	; 128

00004216 <__addsf3>:
    4216:	bb 27       	eor	r27, r27
    4218:	aa 27       	eor	r26, r26
    421a:	0e d0       	rcall	.+28     	; 0x4238 <__addsf3x>
    421c:	0b c1       	rjmp	.+534    	; 0x4434 <__fp_round>
    421e:	fc d0       	rcall	.+504    	; 0x4418 <__fp_pscA>
    4220:	30 f0       	brcs	.+12     	; 0x422e <__addsf3+0x18>
    4222:	01 d1       	rcall	.+514    	; 0x4426 <__fp_pscB>
    4224:	20 f0       	brcs	.+8      	; 0x422e <__addsf3+0x18>
    4226:	31 f4       	brne	.+12     	; 0x4234 <__addsf3+0x1e>
    4228:	9f 3f       	cpi	r25, 0xFF	; 255
    422a:	11 f4       	brne	.+4      	; 0x4230 <__addsf3+0x1a>
    422c:	1e f4       	brtc	.+6      	; 0x4234 <__addsf3+0x1e>
    422e:	f1 c0       	rjmp	.+482    	; 0x4412 <__fp_nan>
    4230:	0e f4       	brtc	.+2      	; 0x4234 <__addsf3+0x1e>
    4232:	e0 95       	com	r30
    4234:	e7 fb       	bst	r30, 7
    4236:	e7 c0       	rjmp	.+462    	; 0x4406 <__fp_inf>

00004238 <__addsf3x>:
    4238:	e9 2f       	mov	r30, r25
    423a:	0d d1       	rcall	.+538    	; 0x4456 <__fp_split3>
    423c:	80 f3       	brcs	.-32     	; 0x421e <__addsf3+0x8>
    423e:	ba 17       	cp	r27, r26
    4240:	62 07       	cpc	r22, r18
    4242:	73 07       	cpc	r23, r19
    4244:	84 07       	cpc	r24, r20
    4246:	95 07       	cpc	r25, r21
    4248:	18 f0       	brcs	.+6      	; 0x4250 <__addsf3x+0x18>
    424a:	71 f4       	brne	.+28     	; 0x4268 <__addsf3x+0x30>
    424c:	9e f5       	brtc	.+102    	; 0x42b4 <__addsf3x+0x7c>
    424e:	25 c1       	rjmp	.+586    	; 0x449a <__fp_zero>
    4250:	0e f4       	brtc	.+2      	; 0x4254 <__addsf3x+0x1c>
    4252:	e0 95       	com	r30
    4254:	0b 2e       	mov	r0, r27
    4256:	ba 2f       	mov	r27, r26
    4258:	a0 2d       	mov	r26, r0
    425a:	0b 01       	movw	r0, r22
    425c:	b9 01       	movw	r22, r18
    425e:	90 01       	movw	r18, r0
    4260:	0c 01       	movw	r0, r24
    4262:	ca 01       	movw	r24, r20
    4264:	a0 01       	movw	r20, r0
    4266:	11 24       	eor	r1, r1
    4268:	ff 27       	eor	r31, r31
    426a:	59 1b       	sub	r21, r25
    426c:	99 f0       	breq	.+38     	; 0x4294 <__addsf3x+0x5c>
    426e:	59 3f       	cpi	r21, 0xF9	; 249
    4270:	50 f4       	brcc	.+20     	; 0x4286 <__addsf3x+0x4e>
    4272:	50 3e       	cpi	r21, 0xE0	; 224
    4274:	68 f1       	brcs	.+90     	; 0x42d0 <__addsf3x+0x98>
    4276:	1a 16       	cp	r1, r26
    4278:	f0 40       	sbci	r31, 0x00	; 0
    427a:	a2 2f       	mov	r26, r18
    427c:	23 2f       	mov	r18, r19
    427e:	34 2f       	mov	r19, r20
    4280:	44 27       	eor	r20, r20
    4282:	58 5f       	subi	r21, 0xF8	; 248
    4284:	f3 cf       	rjmp	.-26     	; 0x426c <__addsf3x+0x34>
    4286:	46 95       	lsr	r20
    4288:	37 95       	ror	r19
    428a:	27 95       	ror	r18
    428c:	a7 95       	ror	r26
    428e:	f0 40       	sbci	r31, 0x00	; 0
    4290:	53 95       	inc	r21
    4292:	c9 f7       	brne	.-14     	; 0x4286 <__addsf3x+0x4e>
    4294:	7e f4       	brtc	.+30     	; 0x42b4 <__addsf3x+0x7c>
    4296:	1f 16       	cp	r1, r31
    4298:	ba 0b       	sbc	r27, r26
    429a:	62 0b       	sbc	r22, r18
    429c:	73 0b       	sbc	r23, r19
    429e:	84 0b       	sbc	r24, r20
    42a0:	ba f0       	brmi	.+46     	; 0x42d0 <__addsf3x+0x98>
    42a2:	91 50       	subi	r25, 0x01	; 1
    42a4:	a1 f0       	breq	.+40     	; 0x42ce <__addsf3x+0x96>
    42a6:	ff 0f       	add	r31, r31
    42a8:	bb 1f       	adc	r27, r27
    42aa:	66 1f       	adc	r22, r22
    42ac:	77 1f       	adc	r23, r23
    42ae:	88 1f       	adc	r24, r24
    42b0:	c2 f7       	brpl	.-16     	; 0x42a2 <__addsf3x+0x6a>
    42b2:	0e c0       	rjmp	.+28     	; 0x42d0 <__addsf3x+0x98>
    42b4:	ba 0f       	add	r27, r26
    42b6:	62 1f       	adc	r22, r18
    42b8:	73 1f       	adc	r23, r19
    42ba:	84 1f       	adc	r24, r20
    42bc:	48 f4       	brcc	.+18     	; 0x42d0 <__addsf3x+0x98>
    42be:	87 95       	ror	r24
    42c0:	77 95       	ror	r23
    42c2:	67 95       	ror	r22
    42c4:	b7 95       	ror	r27
    42c6:	f7 95       	ror	r31
    42c8:	9e 3f       	cpi	r25, 0xFE	; 254
    42ca:	08 f0       	brcs	.+2      	; 0x42ce <__addsf3x+0x96>
    42cc:	b3 cf       	rjmp	.-154    	; 0x4234 <__addsf3+0x1e>
    42ce:	93 95       	inc	r25
    42d0:	88 0f       	add	r24, r24
    42d2:	08 f0       	brcs	.+2      	; 0x42d6 <__addsf3x+0x9e>
    42d4:	99 27       	eor	r25, r25
    42d6:	ee 0f       	add	r30, r30
    42d8:	97 95       	ror	r25
    42da:	87 95       	ror	r24
    42dc:	08 95       	ret

000042de <__divsf3>:
    42de:	0c d0       	rcall	.+24     	; 0x42f8 <__divsf3x>
    42e0:	a9 c0       	rjmp	.+338    	; 0x4434 <__fp_round>
    42e2:	a1 d0       	rcall	.+322    	; 0x4426 <__fp_pscB>
    42e4:	40 f0       	brcs	.+16     	; 0x42f6 <__divsf3+0x18>
    42e6:	98 d0       	rcall	.+304    	; 0x4418 <__fp_pscA>
    42e8:	30 f0       	brcs	.+12     	; 0x42f6 <__divsf3+0x18>
    42ea:	21 f4       	brne	.+8      	; 0x42f4 <__divsf3+0x16>
    42ec:	5f 3f       	cpi	r21, 0xFF	; 255
    42ee:	19 f0       	breq	.+6      	; 0x42f6 <__divsf3+0x18>
    42f0:	8a c0       	rjmp	.+276    	; 0x4406 <__fp_inf>
    42f2:	51 11       	cpse	r21, r1
    42f4:	d3 c0       	rjmp	.+422    	; 0x449c <__fp_szero>
    42f6:	8d c0       	rjmp	.+282    	; 0x4412 <__fp_nan>

000042f8 <__divsf3x>:
    42f8:	ae d0       	rcall	.+348    	; 0x4456 <__fp_split3>
    42fa:	98 f3       	brcs	.-26     	; 0x42e2 <__divsf3+0x4>

000042fc <__divsf3_pse>:
    42fc:	99 23       	and	r25, r25
    42fe:	c9 f3       	breq	.-14     	; 0x42f2 <__divsf3+0x14>
    4300:	55 23       	and	r21, r21
    4302:	b1 f3       	breq	.-20     	; 0x42f0 <__divsf3+0x12>
    4304:	95 1b       	sub	r25, r21
    4306:	55 0b       	sbc	r21, r21
    4308:	bb 27       	eor	r27, r27
    430a:	aa 27       	eor	r26, r26
    430c:	62 17       	cp	r22, r18
    430e:	73 07       	cpc	r23, r19
    4310:	84 07       	cpc	r24, r20
    4312:	38 f0       	brcs	.+14     	; 0x4322 <__divsf3_pse+0x26>
    4314:	9f 5f       	subi	r25, 0xFF	; 255
    4316:	5f 4f       	sbci	r21, 0xFF	; 255
    4318:	22 0f       	add	r18, r18
    431a:	33 1f       	adc	r19, r19
    431c:	44 1f       	adc	r20, r20
    431e:	aa 1f       	adc	r26, r26
    4320:	a9 f3       	breq	.-22     	; 0x430c <__divsf3_pse+0x10>
    4322:	33 d0       	rcall	.+102    	; 0x438a <__divsf3_pse+0x8e>
    4324:	0e 2e       	mov	r0, r30
    4326:	3a f0       	brmi	.+14     	; 0x4336 <__divsf3_pse+0x3a>
    4328:	e0 e8       	ldi	r30, 0x80	; 128
    432a:	30 d0       	rcall	.+96     	; 0x438c <__divsf3_pse+0x90>
    432c:	91 50       	subi	r25, 0x01	; 1
    432e:	50 40       	sbci	r21, 0x00	; 0
    4330:	e6 95       	lsr	r30
    4332:	00 1c       	adc	r0, r0
    4334:	ca f7       	brpl	.-14     	; 0x4328 <__divsf3_pse+0x2c>
    4336:	29 d0       	rcall	.+82     	; 0x438a <__divsf3_pse+0x8e>
    4338:	fe 2f       	mov	r31, r30
    433a:	27 d0       	rcall	.+78     	; 0x438a <__divsf3_pse+0x8e>
    433c:	66 0f       	add	r22, r22
    433e:	77 1f       	adc	r23, r23
    4340:	88 1f       	adc	r24, r24
    4342:	bb 1f       	adc	r27, r27
    4344:	26 17       	cp	r18, r22
    4346:	37 07       	cpc	r19, r23
    4348:	48 07       	cpc	r20, r24
    434a:	ab 07       	cpc	r26, r27
    434c:	b0 e8       	ldi	r27, 0x80	; 128
    434e:	09 f0       	breq	.+2      	; 0x4352 <__divsf3_pse+0x56>
    4350:	bb 0b       	sbc	r27, r27
    4352:	80 2d       	mov	r24, r0
    4354:	bf 01       	movw	r22, r30
    4356:	ff 27       	eor	r31, r31
    4358:	93 58       	subi	r25, 0x83	; 131
    435a:	5f 4f       	sbci	r21, 0xFF	; 255
    435c:	2a f0       	brmi	.+10     	; 0x4368 <__divsf3_pse+0x6c>
    435e:	9e 3f       	cpi	r25, 0xFE	; 254
    4360:	51 05       	cpc	r21, r1
    4362:	68 f0       	brcs	.+26     	; 0x437e <__divsf3_pse+0x82>
    4364:	50 c0       	rjmp	.+160    	; 0x4406 <__fp_inf>
    4366:	9a c0       	rjmp	.+308    	; 0x449c <__fp_szero>
    4368:	5f 3f       	cpi	r21, 0xFF	; 255
    436a:	ec f3       	brlt	.-6      	; 0x4366 <__divsf3_pse+0x6a>
    436c:	98 3e       	cpi	r25, 0xE8	; 232
    436e:	dc f3       	brlt	.-10     	; 0x4366 <__divsf3_pse+0x6a>
    4370:	86 95       	lsr	r24
    4372:	77 95       	ror	r23
    4374:	67 95       	ror	r22
    4376:	b7 95       	ror	r27
    4378:	f7 95       	ror	r31
    437a:	9f 5f       	subi	r25, 0xFF	; 255
    437c:	c9 f7       	brne	.-14     	; 0x4370 <__divsf3_pse+0x74>
    437e:	88 0f       	add	r24, r24
    4380:	91 1d       	adc	r25, r1
    4382:	96 95       	lsr	r25
    4384:	87 95       	ror	r24
    4386:	97 f9       	bld	r25, 7
    4388:	08 95       	ret
    438a:	e1 e0       	ldi	r30, 0x01	; 1
    438c:	66 0f       	add	r22, r22
    438e:	77 1f       	adc	r23, r23
    4390:	88 1f       	adc	r24, r24
    4392:	bb 1f       	adc	r27, r27
    4394:	62 17       	cp	r22, r18
    4396:	73 07       	cpc	r23, r19
    4398:	84 07       	cpc	r24, r20
    439a:	ba 07       	cpc	r27, r26
    439c:	20 f0       	brcs	.+8      	; 0x43a6 <__divsf3_pse+0xaa>
    439e:	62 1b       	sub	r22, r18
    43a0:	73 0b       	sbc	r23, r19
    43a2:	84 0b       	sbc	r24, r20
    43a4:	ba 0b       	sbc	r27, r26
    43a6:	ee 1f       	adc	r30, r30
    43a8:	88 f7       	brcc	.-30     	; 0x438c <__divsf3_pse+0x90>
    43aa:	e0 95       	com	r30
    43ac:	08 95       	ret

000043ae <__fixunssfsi>:
    43ae:	5b d0       	rcall	.+182    	; 0x4466 <__fp_splitA>
    43b0:	88 f0       	brcs	.+34     	; 0x43d4 <__fixunssfsi+0x26>
    43b2:	9f 57       	subi	r25, 0x7F	; 127
    43b4:	90 f0       	brcs	.+36     	; 0x43da <__fixunssfsi+0x2c>
    43b6:	b9 2f       	mov	r27, r25
    43b8:	99 27       	eor	r25, r25
    43ba:	b7 51       	subi	r27, 0x17	; 23
    43bc:	a0 f0       	brcs	.+40     	; 0x43e6 <__fixunssfsi+0x38>
    43be:	d1 f0       	breq	.+52     	; 0x43f4 <__fixunssfsi+0x46>
    43c0:	66 0f       	add	r22, r22
    43c2:	77 1f       	adc	r23, r23
    43c4:	88 1f       	adc	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	1a f0       	brmi	.+6      	; 0x43d0 <__fixunssfsi+0x22>
    43ca:	ba 95       	dec	r27
    43cc:	c9 f7       	brne	.-14     	; 0x43c0 <__fixunssfsi+0x12>
    43ce:	12 c0       	rjmp	.+36     	; 0x43f4 <__fixunssfsi+0x46>
    43d0:	b1 30       	cpi	r27, 0x01	; 1
    43d2:	81 f0       	breq	.+32     	; 0x43f4 <__fixunssfsi+0x46>
    43d4:	62 d0       	rcall	.+196    	; 0x449a <__fp_zero>
    43d6:	b1 e0       	ldi	r27, 0x01	; 1
    43d8:	08 95       	ret
    43da:	5f c0       	rjmp	.+190    	; 0x449a <__fp_zero>
    43dc:	67 2f       	mov	r22, r23
    43de:	78 2f       	mov	r23, r24
    43e0:	88 27       	eor	r24, r24
    43e2:	b8 5f       	subi	r27, 0xF8	; 248
    43e4:	39 f0       	breq	.+14     	; 0x43f4 <__fixunssfsi+0x46>
    43e6:	b9 3f       	cpi	r27, 0xF9	; 249
    43e8:	cc f3       	brlt	.-14     	; 0x43dc <__fixunssfsi+0x2e>
    43ea:	86 95       	lsr	r24
    43ec:	77 95       	ror	r23
    43ee:	67 95       	ror	r22
    43f0:	b3 95       	inc	r27
    43f2:	d9 f7       	brne	.-10     	; 0x43ea <__fixunssfsi+0x3c>
    43f4:	3e f4       	brtc	.+14     	; 0x4404 <__fixunssfsi+0x56>
    43f6:	90 95       	com	r25
    43f8:	80 95       	com	r24
    43fa:	70 95       	com	r23
    43fc:	61 95       	neg	r22
    43fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4400:	8f 4f       	sbci	r24, 0xFF	; 255
    4402:	9f 4f       	sbci	r25, 0xFF	; 255
    4404:	08 95       	ret

00004406 <__fp_inf>:
    4406:	97 f9       	bld	r25, 7
    4408:	9f 67       	ori	r25, 0x7F	; 127
    440a:	80 e8       	ldi	r24, 0x80	; 128
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	60 e0       	ldi	r22, 0x00	; 0
    4410:	08 95       	ret

00004412 <__fp_nan>:
    4412:	9f ef       	ldi	r25, 0xFF	; 255
    4414:	80 ec       	ldi	r24, 0xC0	; 192
    4416:	08 95       	ret

00004418 <__fp_pscA>:
    4418:	00 24       	eor	r0, r0
    441a:	0a 94       	dec	r0
    441c:	16 16       	cp	r1, r22
    441e:	17 06       	cpc	r1, r23
    4420:	18 06       	cpc	r1, r24
    4422:	09 06       	cpc	r0, r25
    4424:	08 95       	ret

00004426 <__fp_pscB>:
    4426:	00 24       	eor	r0, r0
    4428:	0a 94       	dec	r0
    442a:	12 16       	cp	r1, r18
    442c:	13 06       	cpc	r1, r19
    442e:	14 06       	cpc	r1, r20
    4430:	05 06       	cpc	r0, r21
    4432:	08 95       	ret

00004434 <__fp_round>:
    4434:	09 2e       	mov	r0, r25
    4436:	03 94       	inc	r0
    4438:	00 0c       	add	r0, r0
    443a:	11 f4       	brne	.+4      	; 0x4440 <__fp_round+0xc>
    443c:	88 23       	and	r24, r24
    443e:	52 f0       	brmi	.+20     	; 0x4454 <__fp_round+0x20>
    4440:	bb 0f       	add	r27, r27
    4442:	40 f4       	brcc	.+16     	; 0x4454 <__fp_round+0x20>
    4444:	bf 2b       	or	r27, r31
    4446:	11 f4       	brne	.+4      	; 0x444c <__fp_round+0x18>
    4448:	60 ff       	sbrs	r22, 0
    444a:	04 c0       	rjmp	.+8      	; 0x4454 <__fp_round+0x20>
    444c:	6f 5f       	subi	r22, 0xFF	; 255
    444e:	7f 4f       	sbci	r23, 0xFF	; 255
    4450:	8f 4f       	sbci	r24, 0xFF	; 255
    4452:	9f 4f       	sbci	r25, 0xFF	; 255
    4454:	08 95       	ret

00004456 <__fp_split3>:
    4456:	57 fd       	sbrc	r21, 7
    4458:	90 58       	subi	r25, 0x80	; 128
    445a:	44 0f       	add	r20, r20
    445c:	55 1f       	adc	r21, r21
    445e:	59 f0       	breq	.+22     	; 0x4476 <__fp_splitA+0x10>
    4460:	5f 3f       	cpi	r21, 0xFF	; 255
    4462:	71 f0       	breq	.+28     	; 0x4480 <__fp_splitA+0x1a>
    4464:	47 95       	ror	r20

00004466 <__fp_splitA>:
    4466:	88 0f       	add	r24, r24
    4468:	97 fb       	bst	r25, 7
    446a:	99 1f       	adc	r25, r25
    446c:	61 f0       	breq	.+24     	; 0x4486 <__fp_splitA+0x20>
    446e:	9f 3f       	cpi	r25, 0xFF	; 255
    4470:	79 f0       	breq	.+30     	; 0x4490 <__fp_splitA+0x2a>
    4472:	87 95       	ror	r24
    4474:	08 95       	ret
    4476:	12 16       	cp	r1, r18
    4478:	13 06       	cpc	r1, r19
    447a:	14 06       	cpc	r1, r20
    447c:	55 1f       	adc	r21, r21
    447e:	f2 cf       	rjmp	.-28     	; 0x4464 <__fp_split3+0xe>
    4480:	46 95       	lsr	r20
    4482:	f1 df       	rcall	.-30     	; 0x4466 <__fp_splitA>
    4484:	08 c0       	rjmp	.+16     	; 0x4496 <__fp_splitA+0x30>
    4486:	16 16       	cp	r1, r22
    4488:	17 06       	cpc	r1, r23
    448a:	18 06       	cpc	r1, r24
    448c:	99 1f       	adc	r25, r25
    448e:	f1 cf       	rjmp	.-30     	; 0x4472 <__fp_splitA+0xc>
    4490:	86 95       	lsr	r24
    4492:	71 05       	cpc	r23, r1
    4494:	61 05       	cpc	r22, r1
    4496:	08 94       	sec
    4498:	08 95       	ret

0000449a <__fp_zero>:
    449a:	e8 94       	clt

0000449c <__fp_szero>:
    449c:	bb 27       	eor	r27, r27
    449e:	66 27       	eor	r22, r22
    44a0:	77 27       	eor	r23, r23
    44a2:	cb 01       	movw	r24, r22
    44a4:	97 f9       	bld	r25, 7
    44a6:	08 95       	ret

000044a8 <__mulsf3>:
    44a8:	0b d0       	rcall	.+22     	; 0x44c0 <__mulsf3x>
    44aa:	c4 cf       	rjmp	.-120    	; 0x4434 <__fp_round>
    44ac:	b5 df       	rcall	.-150    	; 0x4418 <__fp_pscA>
    44ae:	28 f0       	brcs	.+10     	; 0x44ba <__mulsf3+0x12>
    44b0:	ba df       	rcall	.-140    	; 0x4426 <__fp_pscB>
    44b2:	18 f0       	brcs	.+6      	; 0x44ba <__mulsf3+0x12>
    44b4:	95 23       	and	r25, r21
    44b6:	09 f0       	breq	.+2      	; 0x44ba <__mulsf3+0x12>
    44b8:	a6 cf       	rjmp	.-180    	; 0x4406 <__fp_inf>
    44ba:	ab cf       	rjmp	.-170    	; 0x4412 <__fp_nan>
    44bc:	11 24       	eor	r1, r1
    44be:	ee cf       	rjmp	.-36     	; 0x449c <__fp_szero>

000044c0 <__mulsf3x>:
    44c0:	ca df       	rcall	.-108    	; 0x4456 <__fp_split3>
    44c2:	a0 f3       	brcs	.-24     	; 0x44ac <__mulsf3+0x4>

000044c4 <__mulsf3_pse>:
    44c4:	95 9f       	mul	r25, r21
    44c6:	d1 f3       	breq	.-12     	; 0x44bc <__mulsf3+0x14>
    44c8:	95 0f       	add	r25, r21
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	55 1f       	adc	r21, r21
    44ce:	62 9f       	mul	r22, r18
    44d0:	f0 01       	movw	r30, r0
    44d2:	72 9f       	mul	r23, r18
    44d4:	bb 27       	eor	r27, r27
    44d6:	f0 0d       	add	r31, r0
    44d8:	b1 1d       	adc	r27, r1
    44da:	63 9f       	mul	r22, r19
    44dc:	aa 27       	eor	r26, r26
    44de:	f0 0d       	add	r31, r0
    44e0:	b1 1d       	adc	r27, r1
    44e2:	aa 1f       	adc	r26, r26
    44e4:	64 9f       	mul	r22, r20
    44e6:	66 27       	eor	r22, r22
    44e8:	b0 0d       	add	r27, r0
    44ea:	a1 1d       	adc	r26, r1
    44ec:	66 1f       	adc	r22, r22
    44ee:	82 9f       	mul	r24, r18
    44f0:	22 27       	eor	r18, r18
    44f2:	b0 0d       	add	r27, r0
    44f4:	a1 1d       	adc	r26, r1
    44f6:	62 1f       	adc	r22, r18
    44f8:	73 9f       	mul	r23, r19
    44fa:	b0 0d       	add	r27, r0
    44fc:	a1 1d       	adc	r26, r1
    44fe:	62 1f       	adc	r22, r18
    4500:	83 9f       	mul	r24, r19
    4502:	a0 0d       	add	r26, r0
    4504:	61 1d       	adc	r22, r1
    4506:	22 1f       	adc	r18, r18
    4508:	74 9f       	mul	r23, r20
    450a:	33 27       	eor	r19, r19
    450c:	a0 0d       	add	r26, r0
    450e:	61 1d       	adc	r22, r1
    4510:	23 1f       	adc	r18, r19
    4512:	84 9f       	mul	r24, r20
    4514:	60 0d       	add	r22, r0
    4516:	21 1d       	adc	r18, r1
    4518:	82 2f       	mov	r24, r18
    451a:	76 2f       	mov	r23, r22
    451c:	6a 2f       	mov	r22, r26
    451e:	11 24       	eor	r1, r1
    4520:	9f 57       	subi	r25, 0x7F	; 127
    4522:	50 40       	sbci	r21, 0x00	; 0
    4524:	8a f0       	brmi	.+34     	; 0x4548 <__mulsf3_pse+0x84>
    4526:	e1 f0       	breq	.+56     	; 0x4560 <__mulsf3_pse+0x9c>
    4528:	88 23       	and	r24, r24
    452a:	4a f0       	brmi	.+18     	; 0x453e <__mulsf3_pse+0x7a>
    452c:	ee 0f       	add	r30, r30
    452e:	ff 1f       	adc	r31, r31
    4530:	bb 1f       	adc	r27, r27
    4532:	66 1f       	adc	r22, r22
    4534:	77 1f       	adc	r23, r23
    4536:	88 1f       	adc	r24, r24
    4538:	91 50       	subi	r25, 0x01	; 1
    453a:	50 40       	sbci	r21, 0x00	; 0
    453c:	a9 f7       	brne	.-22     	; 0x4528 <__mulsf3_pse+0x64>
    453e:	9e 3f       	cpi	r25, 0xFE	; 254
    4540:	51 05       	cpc	r21, r1
    4542:	70 f0       	brcs	.+28     	; 0x4560 <__mulsf3_pse+0x9c>
    4544:	60 cf       	rjmp	.-320    	; 0x4406 <__fp_inf>
    4546:	aa cf       	rjmp	.-172    	; 0x449c <__fp_szero>
    4548:	5f 3f       	cpi	r21, 0xFF	; 255
    454a:	ec f3       	brlt	.-6      	; 0x4546 <__mulsf3_pse+0x82>
    454c:	98 3e       	cpi	r25, 0xE8	; 232
    454e:	dc f3       	brlt	.-10     	; 0x4546 <__mulsf3_pse+0x82>
    4550:	86 95       	lsr	r24
    4552:	77 95       	ror	r23
    4554:	67 95       	ror	r22
    4556:	b7 95       	ror	r27
    4558:	f7 95       	ror	r31
    455a:	e7 95       	ror	r30
    455c:	9f 5f       	subi	r25, 0xFF	; 255
    455e:	c1 f7       	brne	.-16     	; 0x4550 <__mulsf3_pse+0x8c>
    4560:	fe 2b       	or	r31, r30
    4562:	88 0f       	add	r24, r24
    4564:	91 1d       	adc	r25, r1
    4566:	96 95       	lsr	r25
    4568:	87 95       	ror	r24
    456a:	97 f9       	bld	r25, 7
    456c:	08 95       	ret

0000456e <__tablejump2__>:
    456e:	ee 0f       	add	r30, r30
    4570:	ff 1f       	adc	r31, r31
    4572:	88 1f       	adc	r24, r24
    4574:	8b bf       	out	0x3b, r24	; 59
    4576:	07 90       	elpm	r0, Z+
    4578:	f6 91       	elpm	r31, Z
    457a:	e0 2d       	mov	r30, r0
    457c:	19 94       	eijmp

0000457e <calloc>:
    457e:	0f 93       	push	r16
    4580:	1f 93       	push	r17
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	86 9f       	mul	r24, r22
    4588:	80 01       	movw	r16, r0
    458a:	87 9f       	mul	r24, r23
    458c:	10 0d       	add	r17, r0
    458e:	96 9f       	mul	r25, r22
    4590:	10 0d       	add	r17, r0
    4592:	11 24       	eor	r1, r1
    4594:	c8 01       	movw	r24, r16
    4596:	0d d0       	rcall	.+26     	; 0x45b2 <malloc>
    4598:	ec 01       	movw	r28, r24
    459a:	00 97       	sbiw	r24, 0x00	; 0
    459c:	21 f0       	breq	.+8      	; 0x45a6 <calloc+0x28>
    459e:	a8 01       	movw	r20, r16
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	70 e0       	ldi	r23, 0x00	; 0
    45a4:	34 d1       	rcall	.+616    	; 0x480e <memset>
    45a6:	ce 01       	movw	r24, r28
    45a8:	df 91       	pop	r29
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	08 95       	ret

000045b2 <malloc>:
    45b2:	0f 93       	push	r16
    45b4:	1f 93       	push	r17
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
    45ba:	82 30       	cpi	r24, 0x02	; 2
    45bc:	91 05       	cpc	r25, r1
    45be:	10 f4       	brcc	.+4      	; 0x45c4 <malloc+0x12>
    45c0:	82 e0       	ldi	r24, 0x02	; 2
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	e0 91 e9 18 	lds	r30, 0x18E9	; 0x8018e9 <__flp>
    45c8:	f0 91 ea 18 	lds	r31, 0x18EA	; 0x8018ea <__flp+0x1>
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	a0 e0       	ldi	r26, 0x00	; 0
    45d2:	b0 e0       	ldi	r27, 0x00	; 0
    45d4:	30 97       	sbiw	r30, 0x00	; 0
    45d6:	19 f1       	breq	.+70     	; 0x461e <malloc+0x6c>
    45d8:	40 81       	ld	r20, Z
    45da:	51 81       	ldd	r21, Z+1	; 0x01
    45dc:	02 81       	ldd	r16, Z+2	; 0x02
    45de:	13 81       	ldd	r17, Z+3	; 0x03
    45e0:	48 17       	cp	r20, r24
    45e2:	59 07       	cpc	r21, r25
    45e4:	c8 f0       	brcs	.+50     	; 0x4618 <malloc+0x66>
    45e6:	84 17       	cp	r24, r20
    45e8:	95 07       	cpc	r25, r21
    45ea:	69 f4       	brne	.+26     	; 0x4606 <malloc+0x54>
    45ec:	10 97       	sbiw	r26, 0x00	; 0
    45ee:	31 f0       	breq	.+12     	; 0x45fc <malloc+0x4a>
    45f0:	12 96       	adiw	r26, 0x02	; 2
    45f2:	0c 93       	st	X, r16
    45f4:	12 97       	sbiw	r26, 0x02	; 2
    45f6:	13 96       	adiw	r26, 0x03	; 3
    45f8:	1c 93       	st	X, r17
    45fa:	27 c0       	rjmp	.+78     	; 0x464a <malloc+0x98>
    45fc:	00 93 e9 18 	sts	0x18E9, r16	; 0x8018e9 <__flp>
    4600:	10 93 ea 18 	sts	0x18EA, r17	; 0x8018ea <__flp+0x1>
    4604:	22 c0       	rjmp	.+68     	; 0x464a <malloc+0x98>
    4606:	21 15       	cp	r18, r1
    4608:	31 05       	cpc	r19, r1
    460a:	19 f0       	breq	.+6      	; 0x4612 <malloc+0x60>
    460c:	42 17       	cp	r20, r18
    460e:	53 07       	cpc	r21, r19
    4610:	18 f4       	brcc	.+6      	; 0x4618 <malloc+0x66>
    4612:	9a 01       	movw	r18, r20
    4614:	bd 01       	movw	r22, r26
    4616:	ef 01       	movw	r28, r30
    4618:	df 01       	movw	r26, r30
    461a:	f8 01       	movw	r30, r16
    461c:	db cf       	rjmp	.-74     	; 0x45d4 <malloc+0x22>
    461e:	21 15       	cp	r18, r1
    4620:	31 05       	cpc	r19, r1
    4622:	f9 f0       	breq	.+62     	; 0x4662 <malloc+0xb0>
    4624:	28 1b       	sub	r18, r24
    4626:	39 0b       	sbc	r19, r25
    4628:	24 30       	cpi	r18, 0x04	; 4
    462a:	31 05       	cpc	r19, r1
    462c:	80 f4       	brcc	.+32     	; 0x464e <malloc+0x9c>
    462e:	8a 81       	ldd	r24, Y+2	; 0x02
    4630:	9b 81       	ldd	r25, Y+3	; 0x03
    4632:	61 15       	cp	r22, r1
    4634:	71 05       	cpc	r23, r1
    4636:	21 f0       	breq	.+8      	; 0x4640 <malloc+0x8e>
    4638:	fb 01       	movw	r30, r22
    463a:	93 83       	std	Z+3, r25	; 0x03
    463c:	82 83       	std	Z+2, r24	; 0x02
    463e:	04 c0       	rjmp	.+8      	; 0x4648 <malloc+0x96>
    4640:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <__flp+0x1>
    4644:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <__flp>
    4648:	fe 01       	movw	r30, r28
    464a:	32 96       	adiw	r30, 0x02	; 2
    464c:	44 c0       	rjmp	.+136    	; 0x46d6 <malloc+0x124>
    464e:	fe 01       	movw	r30, r28
    4650:	e2 0f       	add	r30, r18
    4652:	f3 1f       	adc	r31, r19
    4654:	81 93       	st	Z+, r24
    4656:	91 93       	st	Z+, r25
    4658:	22 50       	subi	r18, 0x02	; 2
    465a:	31 09       	sbc	r19, r1
    465c:	39 83       	std	Y+1, r19	; 0x01
    465e:	28 83       	st	Y, r18
    4660:	3a c0       	rjmp	.+116    	; 0x46d6 <malloc+0x124>
    4662:	20 91 e7 18 	lds	r18, 0x18E7	; 0x8018e7 <__brkval>
    4666:	30 91 e8 18 	lds	r19, 0x18E8	; 0x8018e8 <__brkval+0x1>
    466a:	23 2b       	or	r18, r19
    466c:	41 f4       	brne	.+16     	; 0x467e <malloc+0xcc>
    466e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4672:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4676:	30 93 e8 18 	sts	0x18E8, r19	; 0x8018e8 <__brkval+0x1>
    467a:	20 93 e7 18 	sts	0x18E7, r18	; 0x8018e7 <__brkval>
    467e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4682:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4686:	21 15       	cp	r18, r1
    4688:	31 05       	cpc	r19, r1
    468a:	41 f4       	brne	.+16     	; 0x469c <malloc+0xea>
    468c:	2d b7       	in	r18, 0x3d	; 61
    468e:	3e b7       	in	r19, 0x3e	; 62
    4690:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4694:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4698:	24 1b       	sub	r18, r20
    469a:	35 0b       	sbc	r19, r21
    469c:	e0 91 e7 18 	lds	r30, 0x18E7	; 0x8018e7 <__brkval>
    46a0:	f0 91 e8 18 	lds	r31, 0x18E8	; 0x8018e8 <__brkval+0x1>
    46a4:	e2 17       	cp	r30, r18
    46a6:	f3 07       	cpc	r31, r19
    46a8:	a0 f4       	brcc	.+40     	; 0x46d2 <malloc+0x120>
    46aa:	2e 1b       	sub	r18, r30
    46ac:	3f 0b       	sbc	r19, r31
    46ae:	28 17       	cp	r18, r24
    46b0:	39 07       	cpc	r19, r25
    46b2:	78 f0       	brcs	.+30     	; 0x46d2 <malloc+0x120>
    46b4:	ac 01       	movw	r20, r24
    46b6:	4e 5f       	subi	r20, 0xFE	; 254
    46b8:	5f 4f       	sbci	r21, 0xFF	; 255
    46ba:	24 17       	cp	r18, r20
    46bc:	35 07       	cpc	r19, r21
    46be:	48 f0       	brcs	.+18     	; 0x46d2 <malloc+0x120>
    46c0:	4e 0f       	add	r20, r30
    46c2:	5f 1f       	adc	r21, r31
    46c4:	50 93 e8 18 	sts	0x18E8, r21	; 0x8018e8 <__brkval+0x1>
    46c8:	40 93 e7 18 	sts	0x18E7, r20	; 0x8018e7 <__brkval>
    46cc:	81 93       	st	Z+, r24
    46ce:	91 93       	st	Z+, r25
    46d0:	02 c0       	rjmp	.+4      	; 0x46d6 <malloc+0x124>
    46d2:	e0 e0       	ldi	r30, 0x00	; 0
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	cf 01       	movw	r24, r30
    46d8:	df 91       	pop	r29
    46da:	cf 91       	pop	r28
    46dc:	1f 91       	pop	r17
    46de:	0f 91       	pop	r16
    46e0:	08 95       	ret

000046e2 <free>:
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	00 97       	sbiw	r24, 0x00	; 0
    46e8:	09 f4       	brne	.+2      	; 0x46ec <free+0xa>
    46ea:	81 c0       	rjmp	.+258    	; 0x47ee <free+0x10c>
    46ec:	fc 01       	movw	r30, r24
    46ee:	32 97       	sbiw	r30, 0x02	; 2
    46f0:	13 82       	std	Z+3, r1	; 0x03
    46f2:	12 82       	std	Z+2, r1	; 0x02
    46f4:	a0 91 e9 18 	lds	r26, 0x18E9	; 0x8018e9 <__flp>
    46f8:	b0 91 ea 18 	lds	r27, 0x18EA	; 0x8018ea <__flp+0x1>
    46fc:	10 97       	sbiw	r26, 0x00	; 0
    46fe:	81 f4       	brne	.+32     	; 0x4720 <free+0x3e>
    4700:	20 81       	ld	r18, Z
    4702:	31 81       	ldd	r19, Z+1	; 0x01
    4704:	82 0f       	add	r24, r18
    4706:	93 1f       	adc	r25, r19
    4708:	20 91 e7 18 	lds	r18, 0x18E7	; 0x8018e7 <__brkval>
    470c:	30 91 e8 18 	lds	r19, 0x18E8	; 0x8018e8 <__brkval+0x1>
    4710:	28 17       	cp	r18, r24
    4712:	39 07       	cpc	r19, r25
    4714:	51 f5       	brne	.+84     	; 0x476a <free+0x88>
    4716:	f0 93 e8 18 	sts	0x18E8, r31	; 0x8018e8 <__brkval+0x1>
    471a:	e0 93 e7 18 	sts	0x18E7, r30	; 0x8018e7 <__brkval>
    471e:	67 c0       	rjmp	.+206    	; 0x47ee <free+0x10c>
    4720:	ed 01       	movw	r28, r26
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	ce 17       	cp	r28, r30
    4728:	df 07       	cpc	r29, r31
    472a:	40 f4       	brcc	.+16     	; 0x473c <free+0x5a>
    472c:	4a 81       	ldd	r20, Y+2	; 0x02
    472e:	5b 81       	ldd	r21, Y+3	; 0x03
    4730:	9e 01       	movw	r18, r28
    4732:	41 15       	cp	r20, r1
    4734:	51 05       	cpc	r21, r1
    4736:	f1 f0       	breq	.+60     	; 0x4774 <free+0x92>
    4738:	ea 01       	movw	r28, r20
    473a:	f5 cf       	rjmp	.-22     	; 0x4726 <free+0x44>
    473c:	d3 83       	std	Z+3, r29	; 0x03
    473e:	c2 83       	std	Z+2, r28	; 0x02
    4740:	40 81       	ld	r20, Z
    4742:	51 81       	ldd	r21, Z+1	; 0x01
    4744:	84 0f       	add	r24, r20
    4746:	95 1f       	adc	r25, r21
    4748:	c8 17       	cp	r28, r24
    474a:	d9 07       	cpc	r29, r25
    474c:	59 f4       	brne	.+22     	; 0x4764 <free+0x82>
    474e:	88 81       	ld	r24, Y
    4750:	99 81       	ldd	r25, Y+1	; 0x01
    4752:	84 0f       	add	r24, r20
    4754:	95 1f       	adc	r25, r21
    4756:	02 96       	adiw	r24, 0x02	; 2
    4758:	91 83       	std	Z+1, r25	; 0x01
    475a:	80 83       	st	Z, r24
    475c:	8a 81       	ldd	r24, Y+2	; 0x02
    475e:	9b 81       	ldd	r25, Y+3	; 0x03
    4760:	93 83       	std	Z+3, r25	; 0x03
    4762:	82 83       	std	Z+2, r24	; 0x02
    4764:	21 15       	cp	r18, r1
    4766:	31 05       	cpc	r19, r1
    4768:	29 f4       	brne	.+10     	; 0x4774 <free+0x92>
    476a:	f0 93 ea 18 	sts	0x18EA, r31	; 0x8018ea <__flp+0x1>
    476e:	e0 93 e9 18 	sts	0x18E9, r30	; 0x8018e9 <__flp>
    4772:	3d c0       	rjmp	.+122    	; 0x47ee <free+0x10c>
    4774:	e9 01       	movw	r28, r18
    4776:	fb 83       	std	Y+3, r31	; 0x03
    4778:	ea 83       	std	Y+2, r30	; 0x02
    477a:	49 91       	ld	r20, Y+
    477c:	59 91       	ld	r21, Y+
    477e:	c4 0f       	add	r28, r20
    4780:	d5 1f       	adc	r29, r21
    4782:	ec 17       	cp	r30, r28
    4784:	fd 07       	cpc	r31, r29
    4786:	61 f4       	brne	.+24     	; 0x47a0 <free+0xbe>
    4788:	80 81       	ld	r24, Z
    478a:	91 81       	ldd	r25, Z+1	; 0x01
    478c:	84 0f       	add	r24, r20
    478e:	95 1f       	adc	r25, r21
    4790:	02 96       	adiw	r24, 0x02	; 2
    4792:	e9 01       	movw	r28, r18
    4794:	99 83       	std	Y+1, r25	; 0x01
    4796:	88 83       	st	Y, r24
    4798:	82 81       	ldd	r24, Z+2	; 0x02
    479a:	93 81       	ldd	r25, Z+3	; 0x03
    479c:	9b 83       	std	Y+3, r25	; 0x03
    479e:	8a 83       	std	Y+2, r24	; 0x02
    47a0:	e0 e0       	ldi	r30, 0x00	; 0
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	12 96       	adiw	r26, 0x02	; 2
    47a6:	8d 91       	ld	r24, X+
    47a8:	9c 91       	ld	r25, X
    47aa:	13 97       	sbiw	r26, 0x03	; 3
    47ac:	00 97       	sbiw	r24, 0x00	; 0
    47ae:	19 f0       	breq	.+6      	; 0x47b6 <free+0xd4>
    47b0:	fd 01       	movw	r30, r26
    47b2:	dc 01       	movw	r26, r24
    47b4:	f7 cf       	rjmp	.-18     	; 0x47a4 <free+0xc2>
    47b6:	8d 91       	ld	r24, X+
    47b8:	9c 91       	ld	r25, X
    47ba:	11 97       	sbiw	r26, 0x01	; 1
    47bc:	9d 01       	movw	r18, r26
    47be:	2e 5f       	subi	r18, 0xFE	; 254
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	82 0f       	add	r24, r18
    47c4:	93 1f       	adc	r25, r19
    47c6:	20 91 e7 18 	lds	r18, 0x18E7	; 0x8018e7 <__brkval>
    47ca:	30 91 e8 18 	lds	r19, 0x18E8	; 0x8018e8 <__brkval+0x1>
    47ce:	28 17       	cp	r18, r24
    47d0:	39 07       	cpc	r19, r25
    47d2:	69 f4       	brne	.+26     	; 0x47ee <free+0x10c>
    47d4:	30 97       	sbiw	r30, 0x00	; 0
    47d6:	29 f4       	brne	.+10     	; 0x47e2 <free+0x100>
    47d8:	10 92 ea 18 	sts	0x18EA, r1	; 0x8018ea <__flp+0x1>
    47dc:	10 92 e9 18 	sts	0x18E9, r1	; 0x8018e9 <__flp>
    47e0:	02 c0       	rjmp	.+4      	; 0x47e6 <free+0x104>
    47e2:	13 82       	std	Z+3, r1	; 0x03
    47e4:	12 82       	std	Z+2, r1	; 0x02
    47e6:	b0 93 e8 18 	sts	0x18E8, r27	; 0x8018e8 <__brkval+0x1>
    47ea:	a0 93 e7 18 	sts	0x18E7, r26	; 0x8018e7 <__brkval>
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	08 95       	ret

000047f4 <abort>:
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	f8 94       	cli
    47fa:	7d c3       	rjmp	.+1786   	; 0x4ef6 <_exit>

000047fc <memcpy>:
    47fc:	fb 01       	movw	r30, r22
    47fe:	dc 01       	movw	r26, r24
    4800:	02 c0       	rjmp	.+4      	; 0x4806 <memcpy+0xa>
    4802:	01 90       	ld	r0, Z+
    4804:	0d 92       	st	X+, r0
    4806:	41 50       	subi	r20, 0x01	; 1
    4808:	50 40       	sbci	r21, 0x00	; 0
    480a:	d8 f7       	brcc	.-10     	; 0x4802 <memcpy+0x6>
    480c:	08 95       	ret

0000480e <memset>:
    480e:	dc 01       	movw	r26, r24
    4810:	01 c0       	rjmp	.+2      	; 0x4814 <memset+0x6>
    4812:	6d 93       	st	X+, r22
    4814:	41 50       	subi	r20, 0x01	; 1
    4816:	50 40       	sbci	r21, 0x00	; 0
    4818:	e0 f7       	brcc	.-8      	; 0x4812 <memset+0x4>
    481a:	08 95       	ret

0000481c <strcasestr>:
    481c:	fb 01       	movw	r30, r22
    481e:	51 91       	ld	r21, Z+
    4820:	55 23       	and	r21, r21
    4822:	b1 f0       	breq	.+44     	; 0x4850 <strcasestr+0x34>
    4824:	bf 01       	movw	r22, r30
    4826:	dc 01       	movw	r26, r24
    4828:	05 2e       	mov	r0, r21
    482a:	4d 91       	ld	r20, X+
    482c:	44 23       	and	r20, r20
    482e:	69 f0       	breq	.+26     	; 0x484a <strcasestr+0x2e>
    4830:	10 d0       	rcall	.+32     	; 0x4852 <strcasestr+0x36>
    4832:	d9 f7       	brne	.-10     	; 0x482a <strcasestr+0xe>
    4834:	cd 01       	movw	r24, r26
    4836:	01 90       	ld	r0, Z+
    4838:	00 20       	and	r0, r0
    483a:	49 f0       	breq	.+18     	; 0x484e <strcasestr+0x32>
    483c:	4d 91       	ld	r20, X+
    483e:	41 11       	cpse	r20, r1
    4840:	08 d0       	rcall	.+16     	; 0x4852 <strcasestr+0x36>
    4842:	c9 f3       	breq	.-14     	; 0x4836 <strcasestr+0x1a>
    4844:	fb 01       	movw	r30, r22
    4846:	41 11       	cpse	r20, r1
    4848:	ee cf       	rjmp	.-36     	; 0x4826 <strcasestr+0xa>
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	08 95       	ret
    4852:	40 25       	eor	r20, r0
    4854:	39 f0       	breq	.+14     	; 0x4864 <strcasestr+0x48>
    4856:	40 32       	cpi	r20, 0x20	; 32
    4858:	29 f4       	brne	.+10     	; 0x4864 <strcasestr+0x48>
    485a:	40 29       	or	r20, r0
    485c:	4b 57       	subi	r20, 0x7B	; 123
    485e:	46 5e       	subi	r20, 0xE6	; 230
    4860:	08 f0       	brcs	.+2      	; 0x4864 <strcasestr+0x48>
    4862:	18 94       	sez
    4864:	08 95       	ret

00004866 <strcat>:
    4866:	fb 01       	movw	r30, r22
    4868:	dc 01       	movw	r26, r24
    486a:	0d 90       	ld	r0, X+
    486c:	00 20       	and	r0, r0
    486e:	e9 f7       	brne	.-6      	; 0x486a <strcat+0x4>
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	01 90       	ld	r0, Z+
    4874:	0d 92       	st	X+, r0
    4876:	00 20       	and	r0, r0
    4878:	e1 f7       	brne	.-8      	; 0x4872 <strcat+0xc>
    487a:	08 95       	ret

0000487c <strcpy>:
    487c:	fb 01       	movw	r30, r22
    487e:	dc 01       	movw	r26, r24
    4880:	01 90       	ld	r0, Z+
    4882:	0d 92       	st	X+, r0
    4884:	00 20       	and	r0, r0
    4886:	e1 f7       	brne	.-8      	; 0x4880 <strcpy+0x4>
    4888:	08 95       	ret

0000488a <strncasecmp>:
    488a:	fb 01       	movw	r30, r22
    488c:	dc 01       	movw	r26, r24
    488e:	41 50       	subi	r20, 0x01	; 1
    4890:	50 40       	sbci	r21, 0x00	; 0
    4892:	88 f0       	brcs	.+34     	; 0x48b6 <strncasecmp+0x2c>
    4894:	8d 91       	ld	r24, X+
    4896:	81 34       	cpi	r24, 0x41	; 65
    4898:	1c f0       	brlt	.+6      	; 0x48a0 <strncasecmp+0x16>
    489a:	8b 35       	cpi	r24, 0x5B	; 91
    489c:	0c f4       	brge	.+2      	; 0x48a0 <strncasecmp+0x16>
    489e:	80 5e       	subi	r24, 0xE0	; 224
    48a0:	61 91       	ld	r22, Z+
    48a2:	61 34       	cpi	r22, 0x41	; 65
    48a4:	1c f0       	brlt	.+6      	; 0x48ac <strncasecmp+0x22>
    48a6:	6b 35       	cpi	r22, 0x5B	; 91
    48a8:	0c f4       	brge	.+2      	; 0x48ac <strncasecmp+0x22>
    48aa:	60 5e       	subi	r22, 0xE0	; 224
    48ac:	86 1b       	sub	r24, r22
    48ae:	61 11       	cpse	r22, r1
    48b0:	71 f3       	breq	.-36     	; 0x488e <strncasecmp+0x4>
    48b2:	99 0b       	sbc	r25, r25
    48b4:	08 95       	ret
    48b6:	88 1b       	sub	r24, r24
    48b8:	fc cf       	rjmp	.-8      	; 0x48b2 <strncasecmp+0x28>

000048ba <printf>:
    48ba:	cf 93       	push	r28
    48bc:	df 93       	push	r29
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	ae 01       	movw	r20, r28
    48c4:	4a 5f       	subi	r20, 0xFA	; 250
    48c6:	5f 4f       	sbci	r21, 0xFF	; 255
    48c8:	fa 01       	movw	r30, r20
    48ca:	61 91       	ld	r22, Z+
    48cc:	71 91       	ld	r23, Z+
    48ce:	af 01       	movw	r20, r30
    48d0:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <__iob+0x2>
    48d4:	90 91 ee 18 	lds	r25, 0x18EE	; 0x8018ee <__iob+0x3>
    48d8:	61 d0       	rcall	.+194    	; 0x499c <vfprintf>
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	08 95       	ret

000048e0 <puts>:
    48e0:	0f 93       	push	r16
    48e2:	1f 93       	push	r17
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
    48e8:	e0 91 ed 18 	lds	r30, 0x18ED	; 0x8018ed <__iob+0x2>
    48ec:	f0 91 ee 18 	lds	r31, 0x18EE	; 0x8018ee <__iob+0x3>
    48f0:	23 81       	ldd	r18, Z+3	; 0x03
    48f2:	21 ff       	sbrs	r18, 1
    48f4:	1b c0       	rjmp	.+54     	; 0x492c <puts+0x4c>
    48f6:	8c 01       	movw	r16, r24
    48f8:	d0 e0       	ldi	r29, 0x00	; 0
    48fa:	c0 e0       	ldi	r28, 0x00	; 0
    48fc:	f8 01       	movw	r30, r16
    48fe:	81 91       	ld	r24, Z+
    4900:	8f 01       	movw	r16, r30
    4902:	60 91 ed 18 	lds	r22, 0x18ED	; 0x8018ed <__iob+0x2>
    4906:	70 91 ee 18 	lds	r23, 0x18EE	; 0x8018ee <__iob+0x3>
    490a:	db 01       	movw	r26, r22
    490c:	18 96       	adiw	r26, 0x08	; 8
    490e:	ed 91       	ld	r30, X+
    4910:	fc 91       	ld	r31, X
    4912:	19 97       	sbiw	r26, 0x09	; 9
    4914:	88 23       	and	r24, r24
    4916:	31 f0       	breq	.+12     	; 0x4924 <puts+0x44>
    4918:	19 95       	eicall
    491a:	89 2b       	or	r24, r25
    491c:	79 f3       	breq	.-34     	; 0x48fc <puts+0x1c>
    491e:	df ef       	ldi	r29, 0xFF	; 255
    4920:	cf ef       	ldi	r28, 0xFF	; 255
    4922:	ec cf       	rjmp	.-40     	; 0x48fc <puts+0x1c>
    4924:	8a e0       	ldi	r24, 0x0A	; 10
    4926:	19 95       	eicall
    4928:	89 2b       	or	r24, r25
    492a:	19 f0       	breq	.+6      	; 0x4932 <puts+0x52>
    492c:	8f ef       	ldi	r24, 0xFF	; 255
    492e:	9f ef       	ldi	r25, 0xFF	; 255
    4930:	02 c0       	rjmp	.+4      	; 0x4936 <puts+0x56>
    4932:	8d 2f       	mov	r24, r29
    4934:	9c 2f       	mov	r25, r28
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	08 95       	ret

00004940 <sprintf>:
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	cd b7       	in	r28, 0x3d	; 61
    494a:	de b7       	in	r29, 0x3e	; 62
    494c:	2e 97       	sbiw	r28, 0x0e	; 14
    494e:	0f b6       	in	r0, 0x3f	; 63
    4950:	f8 94       	cli
    4952:	de bf       	out	0x3e, r29	; 62
    4954:	0f be       	out	0x3f, r0	; 63
    4956:	cd bf       	out	0x3d, r28	; 61
    4958:	0e 89       	ldd	r16, Y+22	; 0x16
    495a:	1f 89       	ldd	r17, Y+23	; 0x17
    495c:	86 e0       	ldi	r24, 0x06	; 6
    495e:	8c 83       	std	Y+4, r24	; 0x04
    4960:	1a 83       	std	Y+2, r17	; 0x02
    4962:	09 83       	std	Y+1, r16	; 0x01
    4964:	8f ef       	ldi	r24, 0xFF	; 255
    4966:	9f e7       	ldi	r25, 0x7F	; 127
    4968:	9e 83       	std	Y+6, r25	; 0x06
    496a:	8d 83       	std	Y+5, r24	; 0x05
    496c:	ae 01       	movw	r20, r28
    496e:	46 5e       	subi	r20, 0xE6	; 230
    4970:	5f 4f       	sbci	r21, 0xFF	; 255
    4972:	68 8d       	ldd	r22, Y+24	; 0x18
    4974:	79 8d       	ldd	r23, Y+25	; 0x19
    4976:	ce 01       	movw	r24, r28
    4978:	01 96       	adiw	r24, 0x01	; 1
    497a:	10 d0       	rcall	.+32     	; 0x499c <vfprintf>
    497c:	ef 81       	ldd	r30, Y+7	; 0x07
    497e:	f8 85       	ldd	r31, Y+8	; 0x08
    4980:	e0 0f       	add	r30, r16
    4982:	f1 1f       	adc	r31, r17
    4984:	10 82       	st	Z, r1
    4986:	2e 96       	adiw	r28, 0x0e	; 14
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	08 95       	ret

0000499c <vfprintf>:
    499c:	2f 92       	push	r2
    499e:	3f 92       	push	r3
    49a0:	4f 92       	push	r4
    49a2:	5f 92       	push	r5
    49a4:	6f 92       	push	r6
    49a6:	7f 92       	push	r7
    49a8:	8f 92       	push	r8
    49aa:	9f 92       	push	r9
    49ac:	af 92       	push	r10
    49ae:	bf 92       	push	r11
    49b0:	cf 92       	push	r12
    49b2:	df 92       	push	r13
    49b4:	ef 92       	push	r14
    49b6:	ff 92       	push	r15
    49b8:	0f 93       	push	r16
    49ba:	1f 93       	push	r17
    49bc:	cf 93       	push	r28
    49be:	df 93       	push	r29
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	2b 97       	sbiw	r28, 0x0b	; 11
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	f8 94       	cli
    49ca:	de bf       	out	0x3e, r29	; 62
    49cc:	0f be       	out	0x3f, r0	; 63
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	6c 01       	movw	r12, r24
    49d2:	7b 01       	movw	r14, r22
    49d4:	8a 01       	movw	r16, r20
    49d6:	fc 01       	movw	r30, r24
    49d8:	17 82       	std	Z+7, r1	; 0x07
    49da:	16 82       	std	Z+6, r1	; 0x06
    49dc:	83 81       	ldd	r24, Z+3	; 0x03
    49de:	81 ff       	sbrs	r24, 1
    49e0:	bf c1       	rjmp	.+894    	; 0x4d60 <vfprintf+0x3c4>
    49e2:	ce 01       	movw	r24, r28
    49e4:	01 96       	adiw	r24, 0x01	; 1
    49e6:	3c 01       	movw	r6, r24
    49e8:	f6 01       	movw	r30, r12
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	f7 01       	movw	r30, r14
    49ee:	93 fd       	sbrc	r25, 3
    49f0:	85 91       	lpm	r24, Z+
    49f2:	93 ff       	sbrs	r25, 3
    49f4:	81 91       	ld	r24, Z+
    49f6:	7f 01       	movw	r14, r30
    49f8:	88 23       	and	r24, r24
    49fa:	09 f4       	brne	.+2      	; 0x49fe <vfprintf+0x62>
    49fc:	ad c1       	rjmp	.+858    	; 0x4d58 <vfprintf+0x3bc>
    49fe:	85 32       	cpi	r24, 0x25	; 37
    4a00:	39 f4       	brne	.+14     	; 0x4a10 <vfprintf+0x74>
    4a02:	93 fd       	sbrc	r25, 3
    4a04:	85 91       	lpm	r24, Z+
    4a06:	93 ff       	sbrs	r25, 3
    4a08:	81 91       	ld	r24, Z+
    4a0a:	7f 01       	movw	r14, r30
    4a0c:	85 32       	cpi	r24, 0x25	; 37
    4a0e:	21 f4       	brne	.+8      	; 0x4a18 <vfprintf+0x7c>
    4a10:	b6 01       	movw	r22, r12
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	d6 d1       	rcall	.+940    	; 0x4dc2 <fputc>
    4a16:	e8 cf       	rjmp	.-48     	; 0x49e8 <vfprintf+0x4c>
    4a18:	91 2c       	mov	r9, r1
    4a1a:	21 2c       	mov	r2, r1
    4a1c:	31 2c       	mov	r3, r1
    4a1e:	ff e1       	ldi	r31, 0x1F	; 31
    4a20:	f3 15       	cp	r31, r3
    4a22:	d8 f0       	brcs	.+54     	; 0x4a5a <vfprintf+0xbe>
    4a24:	8b 32       	cpi	r24, 0x2B	; 43
    4a26:	79 f0       	breq	.+30     	; 0x4a46 <vfprintf+0xaa>
    4a28:	38 f4       	brcc	.+14     	; 0x4a38 <vfprintf+0x9c>
    4a2a:	80 32       	cpi	r24, 0x20	; 32
    4a2c:	79 f0       	breq	.+30     	; 0x4a4c <vfprintf+0xb0>
    4a2e:	83 32       	cpi	r24, 0x23	; 35
    4a30:	a1 f4       	brne	.+40     	; 0x4a5a <vfprintf+0xbe>
    4a32:	23 2d       	mov	r18, r3
    4a34:	20 61       	ori	r18, 0x10	; 16
    4a36:	1d c0       	rjmp	.+58     	; 0x4a72 <vfprintf+0xd6>
    4a38:	8d 32       	cpi	r24, 0x2D	; 45
    4a3a:	61 f0       	breq	.+24     	; 0x4a54 <vfprintf+0xb8>
    4a3c:	80 33       	cpi	r24, 0x30	; 48
    4a3e:	69 f4       	brne	.+26     	; 0x4a5a <vfprintf+0xbe>
    4a40:	23 2d       	mov	r18, r3
    4a42:	21 60       	ori	r18, 0x01	; 1
    4a44:	16 c0       	rjmp	.+44     	; 0x4a72 <vfprintf+0xd6>
    4a46:	83 2d       	mov	r24, r3
    4a48:	82 60       	ori	r24, 0x02	; 2
    4a4a:	38 2e       	mov	r3, r24
    4a4c:	e3 2d       	mov	r30, r3
    4a4e:	e4 60       	ori	r30, 0x04	; 4
    4a50:	3e 2e       	mov	r3, r30
    4a52:	2a c0       	rjmp	.+84     	; 0x4aa8 <vfprintf+0x10c>
    4a54:	f3 2d       	mov	r31, r3
    4a56:	f8 60       	ori	r31, 0x08	; 8
    4a58:	1d c0       	rjmp	.+58     	; 0x4a94 <vfprintf+0xf8>
    4a5a:	37 fc       	sbrc	r3, 7
    4a5c:	2d c0       	rjmp	.+90     	; 0x4ab8 <vfprintf+0x11c>
    4a5e:	20 ed       	ldi	r18, 0xD0	; 208
    4a60:	28 0f       	add	r18, r24
    4a62:	2a 30       	cpi	r18, 0x0A	; 10
    4a64:	40 f0       	brcs	.+16     	; 0x4a76 <vfprintf+0xda>
    4a66:	8e 32       	cpi	r24, 0x2E	; 46
    4a68:	b9 f4       	brne	.+46     	; 0x4a98 <vfprintf+0xfc>
    4a6a:	36 fc       	sbrc	r3, 6
    4a6c:	75 c1       	rjmp	.+746    	; 0x4d58 <vfprintf+0x3bc>
    4a6e:	23 2d       	mov	r18, r3
    4a70:	20 64       	ori	r18, 0x40	; 64
    4a72:	32 2e       	mov	r3, r18
    4a74:	19 c0       	rjmp	.+50     	; 0x4aa8 <vfprintf+0x10c>
    4a76:	36 fe       	sbrs	r3, 6
    4a78:	06 c0       	rjmp	.+12     	; 0x4a86 <vfprintf+0xea>
    4a7a:	8a e0       	ldi	r24, 0x0A	; 10
    4a7c:	98 9e       	mul	r9, r24
    4a7e:	20 0d       	add	r18, r0
    4a80:	11 24       	eor	r1, r1
    4a82:	92 2e       	mov	r9, r18
    4a84:	11 c0       	rjmp	.+34     	; 0x4aa8 <vfprintf+0x10c>
    4a86:	ea e0       	ldi	r30, 0x0A	; 10
    4a88:	2e 9e       	mul	r2, r30
    4a8a:	20 0d       	add	r18, r0
    4a8c:	11 24       	eor	r1, r1
    4a8e:	22 2e       	mov	r2, r18
    4a90:	f3 2d       	mov	r31, r3
    4a92:	f0 62       	ori	r31, 0x20	; 32
    4a94:	3f 2e       	mov	r3, r31
    4a96:	08 c0       	rjmp	.+16     	; 0x4aa8 <vfprintf+0x10c>
    4a98:	8c 36       	cpi	r24, 0x6C	; 108
    4a9a:	21 f4       	brne	.+8      	; 0x4aa4 <vfprintf+0x108>
    4a9c:	83 2d       	mov	r24, r3
    4a9e:	80 68       	ori	r24, 0x80	; 128
    4aa0:	38 2e       	mov	r3, r24
    4aa2:	02 c0       	rjmp	.+4      	; 0x4aa8 <vfprintf+0x10c>
    4aa4:	88 36       	cpi	r24, 0x68	; 104
    4aa6:	41 f4       	brne	.+16     	; 0x4ab8 <vfprintf+0x11c>
    4aa8:	f7 01       	movw	r30, r14
    4aaa:	93 fd       	sbrc	r25, 3
    4aac:	85 91       	lpm	r24, Z+
    4aae:	93 ff       	sbrs	r25, 3
    4ab0:	81 91       	ld	r24, Z+
    4ab2:	7f 01       	movw	r14, r30
    4ab4:	81 11       	cpse	r24, r1
    4ab6:	b3 cf       	rjmp	.-154    	; 0x4a1e <vfprintf+0x82>
    4ab8:	98 2f       	mov	r25, r24
    4aba:	9f 7d       	andi	r25, 0xDF	; 223
    4abc:	95 54       	subi	r25, 0x45	; 69
    4abe:	93 30       	cpi	r25, 0x03	; 3
    4ac0:	28 f4       	brcc	.+10     	; 0x4acc <vfprintf+0x130>
    4ac2:	0c 5f       	subi	r16, 0xFC	; 252
    4ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac6:	9f e3       	ldi	r25, 0x3F	; 63
    4ac8:	99 83       	std	Y+1, r25	; 0x01
    4aca:	0d c0       	rjmp	.+26     	; 0x4ae6 <vfprintf+0x14a>
    4acc:	83 36       	cpi	r24, 0x63	; 99
    4ace:	31 f0       	breq	.+12     	; 0x4adc <vfprintf+0x140>
    4ad0:	83 37       	cpi	r24, 0x73	; 115
    4ad2:	71 f0       	breq	.+28     	; 0x4af0 <vfprintf+0x154>
    4ad4:	83 35       	cpi	r24, 0x53	; 83
    4ad6:	09 f0       	breq	.+2      	; 0x4ada <vfprintf+0x13e>
    4ad8:	55 c0       	rjmp	.+170    	; 0x4b84 <vfprintf+0x1e8>
    4ada:	20 c0       	rjmp	.+64     	; 0x4b1c <vfprintf+0x180>
    4adc:	f8 01       	movw	r30, r16
    4ade:	80 81       	ld	r24, Z
    4ae0:	89 83       	std	Y+1, r24	; 0x01
    4ae2:	0e 5f       	subi	r16, 0xFE	; 254
    4ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae6:	88 24       	eor	r8, r8
    4ae8:	83 94       	inc	r8
    4aea:	91 2c       	mov	r9, r1
    4aec:	53 01       	movw	r10, r6
    4aee:	12 c0       	rjmp	.+36     	; 0x4b14 <vfprintf+0x178>
    4af0:	28 01       	movw	r4, r16
    4af2:	f2 e0       	ldi	r31, 0x02	; 2
    4af4:	4f 0e       	add	r4, r31
    4af6:	51 1c       	adc	r5, r1
    4af8:	f8 01       	movw	r30, r16
    4afa:	a0 80       	ld	r10, Z
    4afc:	b1 80       	ldd	r11, Z+1	; 0x01
    4afe:	36 fe       	sbrs	r3, 6
    4b00:	03 c0       	rjmp	.+6      	; 0x4b08 <vfprintf+0x16c>
    4b02:	69 2d       	mov	r22, r9
    4b04:	70 e0       	ldi	r23, 0x00	; 0
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <vfprintf+0x170>
    4b08:	6f ef       	ldi	r22, 0xFF	; 255
    4b0a:	7f ef       	ldi	r23, 0xFF	; 255
    4b0c:	c5 01       	movw	r24, r10
    4b0e:	4e d1       	rcall	.+668    	; 0x4dac <strnlen>
    4b10:	4c 01       	movw	r8, r24
    4b12:	82 01       	movw	r16, r4
    4b14:	f3 2d       	mov	r31, r3
    4b16:	ff 77       	andi	r31, 0x7F	; 127
    4b18:	3f 2e       	mov	r3, r31
    4b1a:	15 c0       	rjmp	.+42     	; 0x4b46 <vfprintf+0x1aa>
    4b1c:	28 01       	movw	r4, r16
    4b1e:	22 e0       	ldi	r18, 0x02	; 2
    4b20:	42 0e       	add	r4, r18
    4b22:	51 1c       	adc	r5, r1
    4b24:	f8 01       	movw	r30, r16
    4b26:	a0 80       	ld	r10, Z
    4b28:	b1 80       	ldd	r11, Z+1	; 0x01
    4b2a:	36 fe       	sbrs	r3, 6
    4b2c:	03 c0       	rjmp	.+6      	; 0x4b34 <vfprintf+0x198>
    4b2e:	69 2d       	mov	r22, r9
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	02 c0       	rjmp	.+4      	; 0x4b38 <vfprintf+0x19c>
    4b34:	6f ef       	ldi	r22, 0xFF	; 255
    4b36:	7f ef       	ldi	r23, 0xFF	; 255
    4b38:	c5 01       	movw	r24, r10
    4b3a:	2d d1       	rcall	.+602    	; 0x4d96 <strnlen_P>
    4b3c:	4c 01       	movw	r8, r24
    4b3e:	f3 2d       	mov	r31, r3
    4b40:	f0 68       	ori	r31, 0x80	; 128
    4b42:	3f 2e       	mov	r3, r31
    4b44:	82 01       	movw	r16, r4
    4b46:	33 fc       	sbrc	r3, 3
    4b48:	19 c0       	rjmp	.+50     	; 0x4b7c <vfprintf+0x1e0>
    4b4a:	82 2d       	mov	r24, r2
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	88 16       	cp	r8, r24
    4b50:	99 06       	cpc	r9, r25
    4b52:	a0 f4       	brcc	.+40     	; 0x4b7c <vfprintf+0x1e0>
    4b54:	b6 01       	movw	r22, r12
    4b56:	80 e2       	ldi	r24, 0x20	; 32
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	33 d1       	rcall	.+614    	; 0x4dc2 <fputc>
    4b5c:	2a 94       	dec	r2
    4b5e:	f5 cf       	rjmp	.-22     	; 0x4b4a <vfprintf+0x1ae>
    4b60:	f5 01       	movw	r30, r10
    4b62:	37 fc       	sbrc	r3, 7
    4b64:	85 91       	lpm	r24, Z+
    4b66:	37 fe       	sbrs	r3, 7
    4b68:	81 91       	ld	r24, Z+
    4b6a:	5f 01       	movw	r10, r30
    4b6c:	b6 01       	movw	r22, r12
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	28 d1       	rcall	.+592    	; 0x4dc2 <fputc>
    4b72:	21 10       	cpse	r2, r1
    4b74:	2a 94       	dec	r2
    4b76:	21 e0       	ldi	r18, 0x01	; 1
    4b78:	82 1a       	sub	r8, r18
    4b7a:	91 08       	sbc	r9, r1
    4b7c:	81 14       	cp	r8, r1
    4b7e:	91 04       	cpc	r9, r1
    4b80:	79 f7       	brne	.-34     	; 0x4b60 <vfprintf+0x1c4>
    4b82:	e1 c0       	rjmp	.+450    	; 0x4d46 <vfprintf+0x3aa>
    4b84:	84 36       	cpi	r24, 0x64	; 100
    4b86:	11 f0       	breq	.+4      	; 0x4b8c <vfprintf+0x1f0>
    4b88:	89 36       	cpi	r24, 0x69	; 105
    4b8a:	39 f5       	brne	.+78     	; 0x4bda <vfprintf+0x23e>
    4b8c:	f8 01       	movw	r30, r16
    4b8e:	37 fe       	sbrs	r3, 7
    4b90:	07 c0       	rjmp	.+14     	; 0x4ba0 <vfprintf+0x204>
    4b92:	60 81       	ld	r22, Z
    4b94:	71 81       	ldd	r23, Z+1	; 0x01
    4b96:	82 81       	ldd	r24, Z+2	; 0x02
    4b98:	93 81       	ldd	r25, Z+3	; 0x03
    4b9a:	0c 5f       	subi	r16, 0xFC	; 252
    4b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b9e:	08 c0       	rjmp	.+16     	; 0x4bb0 <vfprintf+0x214>
    4ba0:	60 81       	ld	r22, Z
    4ba2:	71 81       	ldd	r23, Z+1	; 0x01
    4ba4:	07 2e       	mov	r0, r23
    4ba6:	00 0c       	add	r0, r0
    4ba8:	88 0b       	sbc	r24, r24
    4baa:	99 0b       	sbc	r25, r25
    4bac:	0e 5f       	subi	r16, 0xFE	; 254
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	f3 2d       	mov	r31, r3
    4bb2:	ff 76       	andi	r31, 0x6F	; 111
    4bb4:	3f 2e       	mov	r3, r31
    4bb6:	97 ff       	sbrs	r25, 7
    4bb8:	09 c0       	rjmp	.+18     	; 0x4bcc <vfprintf+0x230>
    4bba:	90 95       	com	r25
    4bbc:	80 95       	com	r24
    4bbe:	70 95       	com	r23
    4bc0:	61 95       	neg	r22
    4bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc8:	f0 68       	ori	r31, 0x80	; 128
    4bca:	3f 2e       	mov	r3, r31
    4bcc:	2a e0       	ldi	r18, 0x0A	; 10
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	a3 01       	movw	r20, r6
    4bd2:	33 d1       	rcall	.+614    	; 0x4e3a <__ultoa_invert>
    4bd4:	88 2e       	mov	r8, r24
    4bd6:	86 18       	sub	r8, r6
    4bd8:	44 c0       	rjmp	.+136    	; 0x4c62 <vfprintf+0x2c6>
    4bda:	85 37       	cpi	r24, 0x75	; 117
    4bdc:	31 f4       	brne	.+12     	; 0x4bea <vfprintf+0x24e>
    4bde:	23 2d       	mov	r18, r3
    4be0:	2f 7e       	andi	r18, 0xEF	; 239
    4be2:	b2 2e       	mov	r11, r18
    4be4:	2a e0       	ldi	r18, 0x0A	; 10
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	25 c0       	rjmp	.+74     	; 0x4c34 <vfprintf+0x298>
    4bea:	93 2d       	mov	r25, r3
    4bec:	99 7f       	andi	r25, 0xF9	; 249
    4bee:	b9 2e       	mov	r11, r25
    4bf0:	8f 36       	cpi	r24, 0x6F	; 111
    4bf2:	c1 f0       	breq	.+48     	; 0x4c24 <vfprintf+0x288>
    4bf4:	18 f4       	brcc	.+6      	; 0x4bfc <vfprintf+0x260>
    4bf6:	88 35       	cpi	r24, 0x58	; 88
    4bf8:	79 f0       	breq	.+30     	; 0x4c18 <vfprintf+0x27c>
    4bfa:	ae c0       	rjmp	.+348    	; 0x4d58 <vfprintf+0x3bc>
    4bfc:	80 37       	cpi	r24, 0x70	; 112
    4bfe:	19 f0       	breq	.+6      	; 0x4c06 <vfprintf+0x26a>
    4c00:	88 37       	cpi	r24, 0x78	; 120
    4c02:	21 f0       	breq	.+8      	; 0x4c0c <vfprintf+0x270>
    4c04:	a9 c0       	rjmp	.+338    	; 0x4d58 <vfprintf+0x3bc>
    4c06:	e9 2f       	mov	r30, r25
    4c08:	e0 61       	ori	r30, 0x10	; 16
    4c0a:	be 2e       	mov	r11, r30
    4c0c:	b4 fe       	sbrs	r11, 4
    4c0e:	0d c0       	rjmp	.+26     	; 0x4c2a <vfprintf+0x28e>
    4c10:	fb 2d       	mov	r31, r11
    4c12:	f4 60       	ori	r31, 0x04	; 4
    4c14:	bf 2e       	mov	r11, r31
    4c16:	09 c0       	rjmp	.+18     	; 0x4c2a <vfprintf+0x28e>
    4c18:	34 fe       	sbrs	r3, 4
    4c1a:	0a c0       	rjmp	.+20     	; 0x4c30 <vfprintf+0x294>
    4c1c:	29 2f       	mov	r18, r25
    4c1e:	26 60       	ori	r18, 0x06	; 6
    4c20:	b2 2e       	mov	r11, r18
    4c22:	06 c0       	rjmp	.+12     	; 0x4c30 <vfprintf+0x294>
    4c24:	28 e0       	ldi	r18, 0x08	; 8
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	05 c0       	rjmp	.+10     	; 0x4c34 <vfprintf+0x298>
    4c2a:	20 e1       	ldi	r18, 0x10	; 16
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    4c2e:	02 c0       	rjmp	.+4      	; 0x4c34 <vfprintf+0x298>
    4c30:	20 e1       	ldi	r18, 0x10	; 16
    4c32:	32 e0       	ldi	r19, 0x02	; 2
    4c34:	f8 01       	movw	r30, r16
    4c36:	b7 fe       	sbrs	r11, 7
    4c38:	07 c0       	rjmp	.+14     	; 0x4c48 <vfprintf+0x2ac>
    4c3a:	60 81       	ld	r22, Z
    4c3c:	71 81       	ldd	r23, Z+1	; 0x01
    4c3e:	82 81       	ldd	r24, Z+2	; 0x02
    4c40:	93 81       	ldd	r25, Z+3	; 0x03
    4c42:	0c 5f       	subi	r16, 0xFC	; 252
    4c44:	1f 4f       	sbci	r17, 0xFF	; 255
    4c46:	06 c0       	rjmp	.+12     	; 0x4c54 <vfprintf+0x2b8>
    4c48:	60 81       	ld	r22, Z
    4c4a:	71 81       	ldd	r23, Z+1	; 0x01
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	0e 5f       	subi	r16, 0xFE	; 254
    4c52:	1f 4f       	sbci	r17, 0xFF	; 255
    4c54:	a3 01       	movw	r20, r6
    4c56:	f1 d0       	rcall	.+482    	; 0x4e3a <__ultoa_invert>
    4c58:	88 2e       	mov	r8, r24
    4c5a:	86 18       	sub	r8, r6
    4c5c:	fb 2d       	mov	r31, r11
    4c5e:	ff 77       	andi	r31, 0x7F	; 127
    4c60:	3f 2e       	mov	r3, r31
    4c62:	36 fe       	sbrs	r3, 6
    4c64:	0d c0       	rjmp	.+26     	; 0x4c80 <vfprintf+0x2e4>
    4c66:	23 2d       	mov	r18, r3
    4c68:	2e 7f       	andi	r18, 0xFE	; 254
    4c6a:	a2 2e       	mov	r10, r18
    4c6c:	89 14       	cp	r8, r9
    4c6e:	58 f4       	brcc	.+22     	; 0x4c86 <vfprintf+0x2ea>
    4c70:	34 fe       	sbrs	r3, 4
    4c72:	0b c0       	rjmp	.+22     	; 0x4c8a <vfprintf+0x2ee>
    4c74:	32 fc       	sbrc	r3, 2
    4c76:	09 c0       	rjmp	.+18     	; 0x4c8a <vfprintf+0x2ee>
    4c78:	83 2d       	mov	r24, r3
    4c7a:	8e 7e       	andi	r24, 0xEE	; 238
    4c7c:	a8 2e       	mov	r10, r24
    4c7e:	05 c0       	rjmp	.+10     	; 0x4c8a <vfprintf+0x2ee>
    4c80:	b8 2c       	mov	r11, r8
    4c82:	a3 2c       	mov	r10, r3
    4c84:	03 c0       	rjmp	.+6      	; 0x4c8c <vfprintf+0x2f0>
    4c86:	b8 2c       	mov	r11, r8
    4c88:	01 c0       	rjmp	.+2      	; 0x4c8c <vfprintf+0x2f0>
    4c8a:	b9 2c       	mov	r11, r9
    4c8c:	a4 fe       	sbrs	r10, 4
    4c8e:	0f c0       	rjmp	.+30     	; 0x4cae <vfprintf+0x312>
    4c90:	fe 01       	movw	r30, r28
    4c92:	e8 0d       	add	r30, r8
    4c94:	f1 1d       	adc	r31, r1
    4c96:	80 81       	ld	r24, Z
    4c98:	80 33       	cpi	r24, 0x30	; 48
    4c9a:	21 f4       	brne	.+8      	; 0x4ca4 <vfprintf+0x308>
    4c9c:	9a 2d       	mov	r25, r10
    4c9e:	99 7e       	andi	r25, 0xE9	; 233
    4ca0:	a9 2e       	mov	r10, r25
    4ca2:	09 c0       	rjmp	.+18     	; 0x4cb6 <vfprintf+0x31a>
    4ca4:	a2 fe       	sbrs	r10, 2
    4ca6:	06 c0       	rjmp	.+12     	; 0x4cb4 <vfprintf+0x318>
    4ca8:	b3 94       	inc	r11
    4caa:	b3 94       	inc	r11
    4cac:	04 c0       	rjmp	.+8      	; 0x4cb6 <vfprintf+0x31a>
    4cae:	8a 2d       	mov	r24, r10
    4cb0:	86 78       	andi	r24, 0x86	; 134
    4cb2:	09 f0       	breq	.+2      	; 0x4cb6 <vfprintf+0x31a>
    4cb4:	b3 94       	inc	r11
    4cb6:	a3 fc       	sbrc	r10, 3
    4cb8:	10 c0       	rjmp	.+32     	; 0x4cda <vfprintf+0x33e>
    4cba:	a0 fe       	sbrs	r10, 0
    4cbc:	06 c0       	rjmp	.+12     	; 0x4cca <vfprintf+0x32e>
    4cbe:	b2 14       	cp	r11, r2
    4cc0:	80 f4       	brcc	.+32     	; 0x4ce2 <vfprintf+0x346>
    4cc2:	28 0c       	add	r2, r8
    4cc4:	92 2c       	mov	r9, r2
    4cc6:	9b 18       	sub	r9, r11
    4cc8:	0d c0       	rjmp	.+26     	; 0x4ce4 <vfprintf+0x348>
    4cca:	b2 14       	cp	r11, r2
    4ccc:	58 f4       	brcc	.+22     	; 0x4ce4 <vfprintf+0x348>
    4cce:	b6 01       	movw	r22, r12
    4cd0:	80 e2       	ldi	r24, 0x20	; 32
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	76 d0       	rcall	.+236    	; 0x4dc2 <fputc>
    4cd6:	b3 94       	inc	r11
    4cd8:	f8 cf       	rjmp	.-16     	; 0x4cca <vfprintf+0x32e>
    4cda:	b2 14       	cp	r11, r2
    4cdc:	18 f4       	brcc	.+6      	; 0x4ce4 <vfprintf+0x348>
    4cde:	2b 18       	sub	r2, r11
    4ce0:	02 c0       	rjmp	.+4      	; 0x4ce6 <vfprintf+0x34a>
    4ce2:	98 2c       	mov	r9, r8
    4ce4:	21 2c       	mov	r2, r1
    4ce6:	a4 fe       	sbrs	r10, 4
    4ce8:	0f c0       	rjmp	.+30     	; 0x4d08 <vfprintf+0x36c>
    4cea:	b6 01       	movw	r22, r12
    4cec:	80 e3       	ldi	r24, 0x30	; 48
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	68 d0       	rcall	.+208    	; 0x4dc2 <fputc>
    4cf2:	a2 fe       	sbrs	r10, 2
    4cf4:	16 c0       	rjmp	.+44     	; 0x4d22 <vfprintf+0x386>
    4cf6:	a1 fc       	sbrc	r10, 1
    4cf8:	03 c0       	rjmp	.+6      	; 0x4d00 <vfprintf+0x364>
    4cfa:	88 e7       	ldi	r24, 0x78	; 120
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	02 c0       	rjmp	.+4      	; 0x4d04 <vfprintf+0x368>
    4d00:	88 e5       	ldi	r24, 0x58	; 88
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	b6 01       	movw	r22, r12
    4d06:	0c c0       	rjmp	.+24     	; 0x4d20 <vfprintf+0x384>
    4d08:	8a 2d       	mov	r24, r10
    4d0a:	86 78       	andi	r24, 0x86	; 134
    4d0c:	51 f0       	breq	.+20     	; 0x4d22 <vfprintf+0x386>
    4d0e:	a1 fe       	sbrs	r10, 1
    4d10:	02 c0       	rjmp	.+4      	; 0x4d16 <vfprintf+0x37a>
    4d12:	8b e2       	ldi	r24, 0x2B	; 43
    4d14:	01 c0       	rjmp	.+2      	; 0x4d18 <vfprintf+0x37c>
    4d16:	80 e2       	ldi	r24, 0x20	; 32
    4d18:	a7 fc       	sbrc	r10, 7
    4d1a:	8d e2       	ldi	r24, 0x2D	; 45
    4d1c:	b6 01       	movw	r22, r12
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	50 d0       	rcall	.+160    	; 0x4dc2 <fputc>
    4d22:	89 14       	cp	r8, r9
    4d24:	30 f4       	brcc	.+12     	; 0x4d32 <vfprintf+0x396>
    4d26:	b6 01       	movw	r22, r12
    4d28:	80 e3       	ldi	r24, 0x30	; 48
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	4a d0       	rcall	.+148    	; 0x4dc2 <fputc>
    4d2e:	9a 94       	dec	r9
    4d30:	f8 cf       	rjmp	.-16     	; 0x4d22 <vfprintf+0x386>
    4d32:	8a 94       	dec	r8
    4d34:	f3 01       	movw	r30, r6
    4d36:	e8 0d       	add	r30, r8
    4d38:	f1 1d       	adc	r31, r1
    4d3a:	80 81       	ld	r24, Z
    4d3c:	b6 01       	movw	r22, r12
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	40 d0       	rcall	.+128    	; 0x4dc2 <fputc>
    4d42:	81 10       	cpse	r8, r1
    4d44:	f6 cf       	rjmp	.-20     	; 0x4d32 <vfprintf+0x396>
    4d46:	22 20       	and	r2, r2
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <vfprintf+0x3b0>
    4d4a:	4e ce       	rjmp	.-868    	; 0x49e8 <vfprintf+0x4c>
    4d4c:	b6 01       	movw	r22, r12
    4d4e:	80 e2       	ldi	r24, 0x20	; 32
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	37 d0       	rcall	.+110    	; 0x4dc2 <fputc>
    4d54:	2a 94       	dec	r2
    4d56:	f7 cf       	rjmp	.-18     	; 0x4d46 <vfprintf+0x3aa>
    4d58:	f6 01       	movw	r30, r12
    4d5a:	86 81       	ldd	r24, Z+6	; 0x06
    4d5c:	97 81       	ldd	r25, Z+7	; 0x07
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <vfprintf+0x3c8>
    4d60:	8f ef       	ldi	r24, 0xFF	; 255
    4d62:	9f ef       	ldi	r25, 0xFF	; 255
    4d64:	2b 96       	adiw	r28, 0x0b	; 11
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	f8 94       	cli
    4d6a:	de bf       	out	0x3e, r29	; 62
    4d6c:	0f be       	out	0x3f, r0	; 63
    4d6e:	cd bf       	out	0x3d, r28	; 61
    4d70:	df 91       	pop	r29
    4d72:	cf 91       	pop	r28
    4d74:	1f 91       	pop	r17
    4d76:	0f 91       	pop	r16
    4d78:	ff 90       	pop	r15
    4d7a:	ef 90       	pop	r14
    4d7c:	df 90       	pop	r13
    4d7e:	cf 90       	pop	r12
    4d80:	bf 90       	pop	r11
    4d82:	af 90       	pop	r10
    4d84:	9f 90       	pop	r9
    4d86:	8f 90       	pop	r8
    4d88:	7f 90       	pop	r7
    4d8a:	6f 90       	pop	r6
    4d8c:	5f 90       	pop	r5
    4d8e:	4f 90       	pop	r4
    4d90:	3f 90       	pop	r3
    4d92:	2f 90       	pop	r2
    4d94:	08 95       	ret

00004d96 <strnlen_P>:
    4d96:	fc 01       	movw	r30, r24
    4d98:	05 90       	lpm	r0, Z+
    4d9a:	61 50       	subi	r22, 0x01	; 1
    4d9c:	70 40       	sbci	r23, 0x00	; 0
    4d9e:	01 10       	cpse	r0, r1
    4da0:	d8 f7       	brcc	.-10     	; 0x4d98 <strnlen_P+0x2>
    4da2:	80 95       	com	r24
    4da4:	90 95       	com	r25
    4da6:	8e 0f       	add	r24, r30
    4da8:	9f 1f       	adc	r25, r31
    4daa:	08 95       	ret

00004dac <strnlen>:
    4dac:	fc 01       	movw	r30, r24
    4dae:	61 50       	subi	r22, 0x01	; 1
    4db0:	70 40       	sbci	r23, 0x00	; 0
    4db2:	01 90       	ld	r0, Z+
    4db4:	01 10       	cpse	r0, r1
    4db6:	d8 f7       	brcc	.-10     	; 0x4dae <strnlen+0x2>
    4db8:	80 95       	com	r24
    4dba:	90 95       	com	r25
    4dbc:	8e 0f       	add	r24, r30
    4dbe:	9f 1f       	adc	r25, r31
    4dc0:	08 95       	ret

00004dc2 <fputc>:
    4dc2:	0f 93       	push	r16
    4dc4:	1f 93       	push	r17
    4dc6:	cf 93       	push	r28
    4dc8:	df 93       	push	r29
    4dca:	fb 01       	movw	r30, r22
    4dcc:	23 81       	ldd	r18, Z+3	; 0x03
    4dce:	21 fd       	sbrc	r18, 1
    4dd0:	03 c0       	rjmp	.+6      	; 0x4dd8 <fputc+0x16>
    4dd2:	8f ef       	ldi	r24, 0xFF	; 255
    4dd4:	9f ef       	ldi	r25, 0xFF	; 255
    4dd6:	2c c0       	rjmp	.+88     	; 0x4e30 <fputc+0x6e>
    4dd8:	22 ff       	sbrs	r18, 2
    4dda:	16 c0       	rjmp	.+44     	; 0x4e08 <fputc+0x46>
    4ddc:	46 81       	ldd	r20, Z+6	; 0x06
    4dde:	57 81       	ldd	r21, Z+7	; 0x07
    4de0:	24 81       	ldd	r18, Z+4	; 0x04
    4de2:	35 81       	ldd	r19, Z+5	; 0x05
    4de4:	42 17       	cp	r20, r18
    4de6:	53 07       	cpc	r21, r19
    4de8:	44 f4       	brge	.+16     	; 0x4dfa <fputc+0x38>
    4dea:	a0 81       	ld	r26, Z
    4dec:	b1 81       	ldd	r27, Z+1	; 0x01
    4dee:	9d 01       	movw	r18, r26
    4df0:	2f 5f       	subi	r18, 0xFF	; 255
    4df2:	3f 4f       	sbci	r19, 0xFF	; 255
    4df4:	31 83       	std	Z+1, r19	; 0x01
    4df6:	20 83       	st	Z, r18
    4df8:	8c 93       	st	X, r24
    4dfa:	26 81       	ldd	r18, Z+6	; 0x06
    4dfc:	37 81       	ldd	r19, Z+7	; 0x07
    4dfe:	2f 5f       	subi	r18, 0xFF	; 255
    4e00:	3f 4f       	sbci	r19, 0xFF	; 255
    4e02:	37 83       	std	Z+7, r19	; 0x07
    4e04:	26 83       	std	Z+6, r18	; 0x06
    4e06:	14 c0       	rjmp	.+40     	; 0x4e30 <fputc+0x6e>
    4e08:	8b 01       	movw	r16, r22
    4e0a:	ec 01       	movw	r28, r24
    4e0c:	fb 01       	movw	r30, r22
    4e0e:	00 84       	ldd	r0, Z+8	; 0x08
    4e10:	f1 85       	ldd	r31, Z+9	; 0x09
    4e12:	e0 2d       	mov	r30, r0
    4e14:	19 95       	eicall
    4e16:	89 2b       	or	r24, r25
    4e18:	e1 f6       	brne	.-72     	; 0x4dd2 <fputc+0x10>
    4e1a:	d8 01       	movw	r26, r16
    4e1c:	16 96       	adiw	r26, 0x06	; 6
    4e1e:	8d 91       	ld	r24, X+
    4e20:	9c 91       	ld	r25, X
    4e22:	17 97       	sbiw	r26, 0x07	; 7
    4e24:	01 96       	adiw	r24, 0x01	; 1
    4e26:	17 96       	adiw	r26, 0x07	; 7
    4e28:	9c 93       	st	X, r25
    4e2a:	8e 93       	st	-X, r24
    4e2c:	16 97       	sbiw	r26, 0x06	; 6
    4e2e:	ce 01       	movw	r24, r28
    4e30:	df 91       	pop	r29
    4e32:	cf 91       	pop	r28
    4e34:	1f 91       	pop	r17
    4e36:	0f 91       	pop	r16
    4e38:	08 95       	ret

00004e3a <__ultoa_invert>:
    4e3a:	fa 01       	movw	r30, r20
    4e3c:	aa 27       	eor	r26, r26
    4e3e:	28 30       	cpi	r18, 0x08	; 8
    4e40:	51 f1       	breq	.+84     	; 0x4e96 <__ultoa_invert+0x5c>
    4e42:	20 31       	cpi	r18, 0x10	; 16
    4e44:	81 f1       	breq	.+96     	; 0x4ea6 <__ultoa_invert+0x6c>
    4e46:	e8 94       	clt
    4e48:	6f 93       	push	r22
    4e4a:	6e 7f       	andi	r22, 0xFE	; 254
    4e4c:	6e 5f       	subi	r22, 0xFE	; 254
    4e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e50:	8f 4f       	sbci	r24, 0xFF	; 255
    4e52:	9f 4f       	sbci	r25, 0xFF	; 255
    4e54:	af 4f       	sbci	r26, 0xFF	; 255
    4e56:	b1 e0       	ldi	r27, 0x01	; 1
    4e58:	3e d0       	rcall	.+124    	; 0x4ed6 <__ultoa_invert+0x9c>
    4e5a:	b4 e0       	ldi	r27, 0x04	; 4
    4e5c:	3c d0       	rcall	.+120    	; 0x4ed6 <__ultoa_invert+0x9c>
    4e5e:	67 0f       	add	r22, r23
    4e60:	78 1f       	adc	r23, r24
    4e62:	89 1f       	adc	r24, r25
    4e64:	9a 1f       	adc	r25, r26
    4e66:	a1 1d       	adc	r26, r1
    4e68:	68 0f       	add	r22, r24
    4e6a:	79 1f       	adc	r23, r25
    4e6c:	8a 1f       	adc	r24, r26
    4e6e:	91 1d       	adc	r25, r1
    4e70:	a1 1d       	adc	r26, r1
    4e72:	6a 0f       	add	r22, r26
    4e74:	71 1d       	adc	r23, r1
    4e76:	81 1d       	adc	r24, r1
    4e78:	91 1d       	adc	r25, r1
    4e7a:	a1 1d       	adc	r26, r1
    4e7c:	20 d0       	rcall	.+64     	; 0x4ebe <__ultoa_invert+0x84>
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <__ultoa_invert+0x48>
    4e80:	68 94       	set
    4e82:	3f 91       	pop	r19
    4e84:	2a e0       	ldi	r18, 0x0A	; 10
    4e86:	26 9f       	mul	r18, r22
    4e88:	11 24       	eor	r1, r1
    4e8a:	30 19       	sub	r19, r0
    4e8c:	30 5d       	subi	r19, 0xD0	; 208
    4e8e:	31 93       	st	Z+, r19
    4e90:	de f6       	brtc	.-74     	; 0x4e48 <__ultoa_invert+0xe>
    4e92:	cf 01       	movw	r24, r30
    4e94:	08 95       	ret
    4e96:	46 2f       	mov	r20, r22
    4e98:	47 70       	andi	r20, 0x07	; 7
    4e9a:	40 5d       	subi	r20, 0xD0	; 208
    4e9c:	41 93       	st	Z+, r20
    4e9e:	b3 e0       	ldi	r27, 0x03	; 3
    4ea0:	0f d0       	rcall	.+30     	; 0x4ec0 <__ultoa_invert+0x86>
    4ea2:	c9 f7       	brne	.-14     	; 0x4e96 <__ultoa_invert+0x5c>
    4ea4:	f6 cf       	rjmp	.-20     	; 0x4e92 <__ultoa_invert+0x58>
    4ea6:	46 2f       	mov	r20, r22
    4ea8:	4f 70       	andi	r20, 0x0F	; 15
    4eaa:	40 5d       	subi	r20, 0xD0	; 208
    4eac:	4a 33       	cpi	r20, 0x3A	; 58
    4eae:	18 f0       	brcs	.+6      	; 0x4eb6 <__ultoa_invert+0x7c>
    4eb0:	49 5d       	subi	r20, 0xD9	; 217
    4eb2:	31 fd       	sbrc	r19, 1
    4eb4:	40 52       	subi	r20, 0x20	; 32
    4eb6:	41 93       	st	Z+, r20
    4eb8:	02 d0       	rcall	.+4      	; 0x4ebe <__ultoa_invert+0x84>
    4eba:	a9 f7       	brne	.-22     	; 0x4ea6 <__ultoa_invert+0x6c>
    4ebc:	ea cf       	rjmp	.-44     	; 0x4e92 <__ultoa_invert+0x58>
    4ebe:	b4 e0       	ldi	r27, 0x04	; 4
    4ec0:	a6 95       	lsr	r26
    4ec2:	97 95       	ror	r25
    4ec4:	87 95       	ror	r24
    4ec6:	77 95       	ror	r23
    4ec8:	67 95       	ror	r22
    4eca:	ba 95       	dec	r27
    4ecc:	c9 f7       	brne	.-14     	; 0x4ec0 <__ultoa_invert+0x86>
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	61 05       	cpc	r22, r1
    4ed2:	71 05       	cpc	r23, r1
    4ed4:	08 95       	ret
    4ed6:	9b 01       	movw	r18, r22
    4ed8:	ac 01       	movw	r20, r24
    4eda:	0a 2e       	mov	r0, r26
    4edc:	06 94       	lsr	r0
    4ede:	57 95       	ror	r21
    4ee0:	47 95       	ror	r20
    4ee2:	37 95       	ror	r19
    4ee4:	27 95       	ror	r18
    4ee6:	ba 95       	dec	r27
    4ee8:	c9 f7       	brne	.-14     	; 0x4edc <__ultoa_invert+0xa2>
    4eea:	62 0f       	add	r22, r18
    4eec:	73 1f       	adc	r23, r19
    4eee:	84 1f       	adc	r24, r20
    4ef0:	95 1f       	adc	r25, r21
    4ef2:	a0 1d       	adc	r26, r0
    4ef4:	08 95       	ret

00004ef6 <_exit>:
    4ef6:	f8 94       	cli

00004ef8 <__stop_program>:
    4ef8:	ff cf       	rjmp	.-2      	; 0x4ef8 <__stop_program>
