
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000058e  00800200  00005be0  00005c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001277  0080078e  0080078e  00006202  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b68  00000000  00000000  000062a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ea83  00000000  00000000  00006e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b56  00000000  00000000  0001588b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c99  00000000  00000000  000193e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000281c  00000000  00000000  0002007c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004451  00000000  00000000  00022898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d54a  00000000  00000000  00026ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b70  00000000  00000000  00034233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c2       	rjmp	.+1176   	; 0x49a <__ctors_end>
       2:	00 00       	nop
       4:	6b c2       	rjmp	.+1238   	; 0x4dc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c2       	rjmp	.+1234   	; 0x4dc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c2       	rjmp	.+1230   	; 0x4dc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c2       	rjmp	.+1226   	; 0x4dc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c2       	rjmp	.+1222   	; 0x4dc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c2       	rjmp	.+1218   	; 0x4dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c2       	rjmp	.+1214   	; 0x4dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c2       	rjmp	.+1210   	; 0x4dc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c2       	rjmp	.+1206   	; 0x4dc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c2       	rjmp	.+1202   	; 0x4dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c2       	rjmp	.+1198   	; 0x4dc <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_12>
      34:	53 c2       	rjmp	.+1190   	; 0x4dc <__bad_interrupt>
      36:	00 00       	nop
      38:	51 c2       	rjmp	.+1186   	; 0x4dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c2       	rjmp	.+1182   	; 0x4dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c2       	rjmp	.+1178   	; 0x4dc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c2       	rjmp	.+1174   	; 0x4dc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c2       	rjmp	.+1170   	; 0x4dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c2       	rjmp	.+1166   	; 0x4dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c2       	rjmp	.+1162   	; 0x4dc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c2       	rjmp	.+1158   	; 0x4dc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c2       	rjmp	.+1154   	; 0x4dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c2       	rjmp	.+1150   	; 0x4dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c2       	rjmp	.+1146   	; 0x4dc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__vector_25>
      68:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__vector_26>
      6c:	37 c2       	rjmp	.+1134   	; 0x4dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c2       	rjmp	.+1130   	; 0x4dc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c2       	rjmp	.+1126   	; 0x4dc <__bad_interrupt>
      76:	00 00       	nop
      78:	31 c2       	rjmp	.+1122   	; 0x4dc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2f c2       	rjmp	.+1118   	; 0x4dc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c2       	rjmp	.+1114   	; 0x4dc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c2       	rjmp	.+1110   	; 0x4dc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c2       	rjmp	.+1106   	; 0x4dc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 c2       	rjmp	.+1102   	; 0x4dc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__vector_36>
      94:	0c 94 36 24 	jmp	0x486c	; 0x486c <__vector_37>
      98:	21 c2       	rjmp	.+1090   	; 0x4dc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__vector_39>
      a0:	1d c2       	rjmp	.+1082   	; 0x4dc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1b c2       	rjmp	.+1078   	; 0x4dc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	19 c2       	rjmp	.+1074   	; 0x4dc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	17 c2       	rjmp	.+1070   	; 0x4dc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	15 c2       	rjmp	.+1066   	; 0x4dc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	13 c2       	rjmp	.+1062   	; 0x4dc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	11 c2       	rjmp	.+1058   	; 0x4dc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0f c2       	rjmp	.+1054   	; 0x4dc <__bad_interrupt>
      be:	00 00       	nop
      c0:	0d c2       	rjmp	.+1050   	; 0x4dc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0b c2       	rjmp	.+1046   	; 0x4dc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	09 c2       	rjmp	.+1042   	; 0x4dc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__vector_51>
      d0:	0c 94 cc 24 	jmp	0x4998	; 0x4998 <__vector_52>
      d4:	03 c2       	rjmp	.+1030   	; 0x4dc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__vector_54>
      dc:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <__vector_55>
      e0:	fd c1       	rjmp	.+1018   	; 0x4dc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c3 01       	movw	r24, r6
      e6:	c3 01       	movw	r24, r6
      e8:	c3 01       	movw	r24, r6
      ea:	fd 01       	movw	r30, r26
      ec:	05 02       	muls	r16, r21
      ee:	1b 02       	muls	r17, r27
      f0:	c3 01       	movw	r24, r6
      f2:	c3 01       	movw	r24, r6
      f4:	fd 01       	movw	r30, r26
      f6:	05 02       	muls	r16, r21
      f8:	a4 26       	eor	r10, r20
      fa:	14 27       	eor	r17, r20
      fc:	14 27       	eor	r17, r20
      fe:	14 27       	eor	r17, r20
     100:	14 27       	eor	r17, r20
     102:	14 27       	eor	r17, r20
     104:	14 27       	eor	r17, r20
     106:	14 27       	eor	r17, r20
     108:	a4 26       	eor	r10, r20
     10a:	14 27       	eor	r17, r20
     10c:	14 27       	eor	r17, r20
     10e:	14 27       	eor	r17, r20
     110:	14 27       	eor	r17, r20
     112:	14 27       	eor	r17, r20
     114:	14 27       	eor	r17, r20
     116:	14 27       	eor	r17, r20
     118:	a6 26       	eor	r10, r22
     11a:	14 27       	eor	r17, r20
     11c:	14 27       	eor	r17, r20
     11e:	14 27       	eor	r17, r20
     120:	14 27       	eor	r17, r20
     122:	14 27       	eor	r17, r20
     124:	14 27       	eor	r17, r20
     126:	14 27       	eor	r17, r20
     128:	14 27       	eor	r17, r20
     12a:	14 27       	eor	r17, r20
     12c:	14 27       	eor	r17, r20
     12e:	14 27       	eor	r17, r20
     130:	14 27       	eor	r17, r20
     132:	14 27       	eor	r17, r20
     134:	14 27       	eor	r17, r20
     136:	14 27       	eor	r17, r20
     138:	a6 26       	eor	r10, r22
     13a:	14 27       	eor	r17, r20
     13c:	14 27       	eor	r17, r20
     13e:	14 27       	eor	r17, r20
     140:	14 27       	eor	r17, r20
     142:	14 27       	eor	r17, r20
     144:	14 27       	eor	r17, r20
     146:	14 27       	eor	r17, r20
     148:	14 27       	eor	r17, r20
     14a:	14 27       	eor	r17, r20
     14c:	14 27       	eor	r17, r20
     14e:	14 27       	eor	r17, r20
     150:	14 27       	eor	r17, r20
     152:	14 27       	eor	r17, r20
     154:	14 27       	eor	r17, r20
     156:	14 27       	eor	r17, r20
     158:	10 27       	eor	r17, r16
     15a:	14 27       	eor	r17, r20
     15c:	14 27       	eor	r17, r20
     15e:	14 27       	eor	r17, r20
     160:	14 27       	eor	r17, r20
     162:	14 27       	eor	r17, r20
     164:	14 27       	eor	r17, r20
     166:	14 27       	eor	r17, r20
     168:	db 26       	eor	r13, r27
     16a:	14 27       	eor	r17, r20
     16c:	14 27       	eor	r17, r20
     16e:	14 27       	eor	r17, r20
     170:	14 27       	eor	r17, r20
     172:	14 27       	eor	r17, r20
     174:	14 27       	eor	r17, r20
     176:	14 27       	eor	r17, r20
     178:	14 27       	eor	r17, r20
     17a:	14 27       	eor	r17, r20
     17c:	14 27       	eor	r17, r20
     17e:	14 27       	eor	r17, r20
     180:	14 27       	eor	r17, r20
     182:	14 27       	eor	r17, r20
     184:	14 27       	eor	r17, r20
     186:	14 27       	eor	r17, r20
     188:	cf 26       	eor	r12, r31
     18a:	14 27       	eor	r17, r20
     18c:	14 27       	eor	r17, r20
     18e:	14 27       	eor	r17, r20
     190:	14 27       	eor	r17, r20
     192:	14 27       	eor	r17, r20
     194:	14 27       	eor	r17, r20
     196:	14 27       	eor	r17, r20
     198:	f3 26       	eor	r15, r19

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	06 ef       	ldi	r16, 0xF6	; 246
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	f6 e2       	ldi	r31, 0x26	; 38
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	19 f1       	breq	.+70     	; 0x1f8 <prvIdleTask+0x5e>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
     1ce:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <uxCurrentNumberOfTasks>
     1d8:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	fc d7       	rcall	.+4088   	; 0x11e4 <vPortFree>
     1ec:	ce 01       	movw	r24, r28
     1ee:	fa d7       	rcall	.+4084   	; 0x11e4 <vPortFree>
     1f0:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <uxDeletedTasksWaitingCleanUp>
     1f4:	81 11       	cpse	r24, r1
     1f6:	dd cf       	rjmp	.-70     	; 0x1b2 <prvIdleTask+0x18>
     1f8:	f7 01       	movw	r30, r14
     1fa:	80 81       	ld	r24, Z
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	10 f0       	brcs	.+4      	; 0x204 <prvIdleTask+0x6a>
     200:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
     204:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vApplicationIdleHook>
     208:	d0 cf       	rjmp	.-96     	; 0x1aa <prvIdleTask+0x10>

0000020a <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	60 97       	sbiw	r28, 0x10	; 16
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	ce 01       	movw	r24, r28
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	9a 87       	std	Y+10, r25	; 0x0a
     224:	89 87       	std	Y+9, r24	; 0x09
     226:	81 2c       	mov	r8, r1
     228:	91 2c       	mov	r9, r1
     22a:	a1 2c       	mov	r10, r1
     22c:	b1 2c       	mov	r11, r1
     22e:	69 84       	ldd	r6, Y+9	; 0x09
     230:	7a 84       	ldd	r7, Y+10	; 0x0a
     232:	e0 91 5e 18 	lds	r30, 0x185E	; 0x80185e <pxCurrentTimerList>
     236:	f0 91 5f 18 	lds	r31, 0x185F	; 0x80185f <pxCurrentTimerList+0x1>
     23a:	80 81       	ld	r24, Z
     23c:	88 23       	and	r24, r24
     23e:	09 f4       	brne	.+2      	; 0x242 <prvTimerTask+0x38>
     240:	12 c1       	rjmp	.+548    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     242:	07 80       	ldd	r0, Z+7	; 0x07
     244:	f0 85       	ldd	r31, Z+8	; 0x08
     246:	e0 2d       	mov	r30, r0
     248:	20 80       	ld	r2, Z
     24a:	31 80       	ldd	r3, Z+1	; 0x01
     24c:	42 80       	ldd	r4, Z+2	; 0x02
     24e:	53 80       	ldd	r5, Z+3	; 0x03
     250:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vTaskSuspendAll>
     254:	ce 01       	movw	r24, r28
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	0e 94 4f 19 	call	0x329e	; 0x329e <prvSampleTimeNow>
     25c:	6b 87       	std	Y+11, r22	; 0x0b
     25e:	7c 87       	std	Y+12, r23	; 0x0c
     260:	8d 87       	std	Y+13, r24	; 0x0d
     262:	9e 87       	std	Y+14, r25	; 0x0e
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	81 11       	cpse	r24, r1
     268:	67 c0       	rjmp	.+206    	; 0x338 <prvTimerTask+0x12e>
     26a:	8b 85       	ldd	r24, Y+11	; 0x0b
     26c:	9c 85       	ldd	r25, Y+12	; 0x0c
     26e:	ad 85       	ldd	r26, Y+13	; 0x0d
     270:	be 85       	ldd	r27, Y+14	; 0x0e
     272:	82 15       	cp	r24, r2
     274:	93 05       	cpc	r25, r3
     276:	a4 05       	cpc	r26, r4
     278:	b5 05       	cpc	r27, r5
     27a:	08 f4       	brcc	.+2      	; 0x27e <prvTimerTask+0x74>
     27c:	45 c0       	rjmp	.+138    	; 0x308 <prvTimerTask+0xfe>
     27e:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
     282:	e0 91 5e 18 	lds	r30, 0x185E	; 0x80185e <pxCurrentTimerList>
     286:	f0 91 5f 18 	lds	r31, 0x185F	; 0x80185f <pxCurrentTimerList+0x1>
     28a:	07 80       	ldd	r0, Z+7	; 0x07
     28c:	f0 85       	ldd	r31, Z+8	; 0x08
     28e:	e0 2d       	mov	r30, r0
     290:	a0 85       	ldd	r26, Z+8	; 0x08
     292:	b1 85       	ldd	r27, Z+9	; 0x09
     294:	b8 8b       	std	Y+16, r27	; 0x10
     296:	af 87       	std	Y+15, r26	; 0x0f
     298:	cd 01       	movw	r24, r26
     29a:	02 96       	adiw	r24, 0x02	; 2
     29c:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
     2a0:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a2:	f8 89       	ldd	r31, Y+16	; 0x10
     2a4:	87 89       	ldd	r24, Z+23	; 0x17
     2a6:	82 ff       	sbrs	r24, 2
     2a8:	21 c0       	rjmp	.+66     	; 0x2ec <prvTimerTask+0xe2>
     2aa:	46 85       	ldd	r20, Z+14	; 0x0e
     2ac:	57 85       	ldd	r21, Z+15	; 0x0f
     2ae:	60 89       	ldd	r22, Z+16	; 0x10
     2b0:	71 89       	ldd	r23, Z+17	; 0x11
     2b2:	42 0d       	add	r20, r2
     2b4:	53 1d       	adc	r21, r3
     2b6:	64 1d       	adc	r22, r4
     2b8:	75 1d       	adc	r23, r5
     2ba:	72 01       	movw	r14, r4
     2bc:	61 01       	movw	r12, r2
     2be:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c0:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c2:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c4:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c6:	cf 01       	movw	r24, r30
     2c8:	0e 94 5f 18 	call	0x30be	; 0x30be <prvInsertTimerInActiveList>
     2cc:	88 23       	and	r24, r24
     2ce:	99 f0       	breq	.+38     	; 0x2f6 <prvTimerTask+0xec>
     2d0:	c8 2c       	mov	r12, r8
     2d2:	d9 2c       	mov	r13, r9
     2d4:	ea 2c       	mov	r14, r10
     2d6:	fb 2c       	mov	r15, r11
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	a2 01       	movw	r20, r4
     2de:	91 01       	movw	r18, r2
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e4:	98 89       	ldd	r25, Y+16	; 0x10
     2e6:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <xTimerGenericCommand>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <prvTimerTask+0xec>
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	af 85       	ldd	r26, Y+15	; 0x0f
     2f0:	b8 89       	ldd	r27, Y+16	; 0x10
     2f2:	57 96       	adiw	r26, 0x17	; 23
     2f4:	8c 93       	st	X, r24
     2f6:	af 85       	ldd	r26, Y+15	; 0x0f
     2f8:	b8 89       	ldd	r27, Y+16	; 0x10
     2fa:	54 96       	adiw	r26, 0x14	; 20
     2fc:	ed 91       	ld	r30, X+
     2fe:	fc 91       	ld	r31, X
     300:	55 97       	sbiw	r26, 0x15	; 21
     302:	cd 01       	movw	r24, r26
     304:	19 95       	eicall
     306:	a0 c0       	rjmp	.+320    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	b2 01       	movw	r22, r4
     30c:	a1 01       	movw	r20, r2
     30e:	8b 85       	ldd	r24, Y+11	; 0x0b
     310:	9c 85       	ldd	r25, Y+12	; 0x0c
     312:	ad 85       	ldd	r26, Y+13	; 0x0d
     314:	be 85       	ldd	r27, Y+14	; 0x0e
     316:	48 1b       	sub	r20, r24
     318:	59 0b       	sbc	r21, r25
     31a:	6a 0b       	sbc	r22, r26
     31c:	7b 0b       	sbc	r23, r27
     31e:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTimerQueue>
     322:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTimerQueue+0x1>
     326:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vQueueWaitForMessageRestricted>
     32a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
     32e:	81 11       	cpse	r24, r1
     330:	8b c0       	rjmp	.+278    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     332:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
     336:	88 c0       	rjmp	.+272    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     338:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
     33c:	85 c0       	rjmp	.+266    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	88 23       	and	r24, r24
     342:	0c f4       	brge	.+2      	; 0x346 <prvTimerTask+0x13c>
     344:	81 c0       	rjmp	.+258    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     346:	4e 80       	ldd	r4, Y+6	; 0x06
     348:	5f 80       	ldd	r5, Y+7	; 0x07
     34a:	d2 01       	movw	r26, r4
     34c:	1c 96       	adiw	r26, 0x0c	; 12
     34e:	8d 91       	ld	r24, X+
     350:	9c 91       	ld	r25, X
     352:	1d 97       	sbiw	r26, 0x0d	; 13
     354:	89 2b       	or	r24, r25
     356:	19 f0       	breq	.+6      	; 0x35e <prvTimerTask+0x154>
     358:	c2 01       	movw	r24, r4
     35a:	02 96       	adiw	r24, 0x02	; 2
     35c:	e7 d7       	rcall	.+4046   	; 0x132c <uxListRemove>
     35e:	ce 01       	movw	r24, r28
     360:	08 96       	adiw	r24, 0x08	; 8
     362:	0e 94 4f 19 	call	0x329e	; 0x329e <prvSampleTimeNow>
     366:	8b 01       	movw	r16, r22
     368:	9c 01       	movw	r18, r24
     36a:	e9 81       	ldd	r30, Y+1	; 0x01
     36c:	0e 2e       	mov	r0, r30
     36e:	00 0c       	add	r0, r0
     370:	ff 0b       	sbc	r31, r31
     372:	ea 30       	cpi	r30, 0x0A	; 10
     374:	f1 05       	cpc	r31, r1
     376:	08 f0       	brcs	.+2      	; 0x37a <prvTimerTask+0x170>
     378:	67 c0       	rjmp	.+206    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     37a:	88 27       	eor	r24, r24
     37c:	ee 58       	subi	r30, 0x8E	; 142
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	8f 4f       	sbci	r24, 0xFF	; 255
     382:	0c 94 2a 29 	jmp	0x5254	; 0x5254 <__tablejump2__>
     386:	f2 01       	movw	r30, r4
     388:	87 89       	ldd	r24, Z+23	; 0x17
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	87 8b       	std	Z+23, r24	; 0x17
     38e:	ca 80       	ldd	r12, Y+2	; 0x02
     390:	db 80       	ldd	r13, Y+3	; 0x03
     392:	ec 80       	ldd	r14, Y+4	; 0x04
     394:	fd 80       	ldd	r15, Y+5	; 0x05
     396:	46 85       	ldd	r20, Z+14	; 0x0e
     398:	57 85       	ldd	r21, Z+15	; 0x0f
     39a:	60 89       	ldd	r22, Z+16	; 0x10
     39c:	71 89       	ldd	r23, Z+17	; 0x11
     39e:	4c 0d       	add	r20, r12
     3a0:	5d 1d       	adc	r21, r13
     3a2:	6e 1d       	adc	r22, r14
     3a4:	7f 1d       	adc	r23, r15
     3a6:	c2 01       	movw	r24, r4
     3a8:	0e 94 5f 18 	call	0x30be	; 0x30be <prvInsertTimerInActiveList>
     3ac:	88 23       	and	r24, r24
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <prvTimerTask+0x1a8>
     3b0:	4b c0       	rjmp	.+150    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3b2:	d2 01       	movw	r26, r4
     3b4:	54 96       	adiw	r26, 0x14	; 20
     3b6:	ed 91       	ld	r30, X+
     3b8:	fc 91       	ld	r31, X
     3ba:	55 97       	sbiw	r26, 0x15	; 21
     3bc:	c2 01       	movw	r24, r4
     3be:	19 95       	eicall
     3c0:	f2 01       	movw	r30, r4
     3c2:	87 89       	ldd	r24, Z+23	; 0x17
     3c4:	82 ff       	sbrs	r24, 2
     3c6:	40 c0       	rjmp	.+128    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3c8:	4a 81       	ldd	r20, Y+2	; 0x02
     3ca:	5b 81       	ldd	r21, Y+3	; 0x03
     3cc:	6c 81       	ldd	r22, Y+4	; 0x04
     3ce:	7d 81       	ldd	r23, Y+5	; 0x05
     3d0:	86 85       	ldd	r24, Z+14	; 0x0e
     3d2:	97 85       	ldd	r25, Z+15	; 0x0f
     3d4:	a0 89       	ldd	r26, Z+16	; 0x10
     3d6:	b1 89       	ldd	r27, Z+17	; 0x11
     3d8:	9a 01       	movw	r18, r20
     3da:	ab 01       	movw	r20, r22
     3dc:	28 0f       	add	r18, r24
     3de:	39 1f       	adc	r19, r25
     3e0:	4a 1f       	adc	r20, r26
     3e2:	5b 1f       	adc	r21, r27
     3e4:	c8 2c       	mov	r12, r8
     3e6:	d9 2c       	mov	r13, r9
     3e8:	ea 2c       	mov	r14, r10
     3ea:	fb 2c       	mov	r15, r11
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	10 e0       	ldi	r17, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	c2 01       	movw	r24, r4
     3f4:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <xTimerGenericCommand>
     3f8:	27 c0       	rjmp	.+78     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3fa:	d2 01       	movw	r26, r4
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 91       	ld	r24, X
     400:	57 97       	sbiw	r26, 0x17	; 23
     402:	8e 7f       	andi	r24, 0xFE	; 254
     404:	57 96       	adiw	r26, 0x17	; 23
     406:	8c 93       	st	X, r24
     408:	1f c0       	rjmp	.+62     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     40a:	f2 01       	movw	r30, r4
     40c:	87 89       	ldd	r24, Z+23	; 0x17
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	87 8b       	std	Z+23, r24	; 0x17
     412:	4a 81       	ldd	r20, Y+2	; 0x02
     414:	5b 81       	ldd	r21, Y+3	; 0x03
     416:	6c 81       	ldd	r22, Y+4	; 0x04
     418:	7d 81       	ldd	r23, Y+5	; 0x05
     41a:	46 87       	std	Z+14, r20	; 0x0e
     41c:	57 87       	std	Z+15, r21	; 0x0f
     41e:	60 8b       	std	Z+16, r22	; 0x10
     420:	71 8b       	std	Z+17, r23	; 0x11
     422:	40 0f       	add	r20, r16
     424:	51 1f       	adc	r21, r17
     426:	62 1f       	adc	r22, r18
     428:	73 1f       	adc	r23, r19
     42a:	68 01       	movw	r12, r16
     42c:	79 01       	movw	r14, r18
     42e:	c2 01       	movw	r24, r4
     430:	0e 94 5f 18 	call	0x30be	; 0x30be <prvInsertTimerInActiveList>
     434:	09 c0       	rjmp	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     436:	f2 01       	movw	r30, r4
     438:	87 89       	ldd	r24, Z+23	; 0x17
     43a:	81 fd       	sbrc	r24, 1
     43c:	03 c0       	rjmp	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43e:	c2 01       	movw	r24, r4
     440:	d1 d6       	rcall	.+3490   	; 0x11e4 <vPortFree>
     442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     444:	8e 7f       	andi	r24, 0xFE	; 254
     446:	87 8b       	std	Z+23, r24	; 0x17
     448:	28 2d       	mov	r18, r8
     44a:	39 2d       	mov	r19, r9
     44c:	4a 2d       	mov	r20, r10
     44e:	5b 2d       	mov	r21, r11
     450:	66 2d       	mov	r22, r6
     452:	77 2d       	mov	r23, r7
     454:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTimerQueue>
     458:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTimerQueue+0x1>
     45c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <xQueueReceive>
     460:	81 11       	cpse	r24, r1
     462:	6d cf       	rjmp	.-294    	; 0x33e <prvTimerTask+0x134>
     464:	e6 ce       	rjmp	.-564    	; 0x232 <prvTimerTask+0x28>
     466:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vTaskSuspendAll>
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	0e 94 4f 19 	call	0x329e	; 0x329e <prvSampleTimeNow>
     472:	6b 87       	std	Y+11, r22	; 0x0b
     474:	7c 87       	std	Y+12, r23	; 0x0c
     476:	8d 87       	std	Y+13, r24	; 0x0d
     478:	9e 87       	std	Y+14, r25	; 0x0e
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	81 11       	cpse	r24, r1
     47e:	5c cf       	rjmp	.-328    	; 0x338 <prvTimerTask+0x12e>
     480:	e0 91 5c 18 	lds	r30, 0x185C	; 0x80185c <pxOverflowTimerList>
     484:	f0 91 5d 18 	lds	r31, 0x185D	; 0x80185d <pxOverflowTimerList+0x1>
     488:	80 81       	ld	r24, Z
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	81 11       	cpse	r24, r1
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	28 2c       	mov	r2, r8
     492:	39 2c       	mov	r3, r9
     494:	4a 2c       	mov	r4, r10
     496:	5b 2c       	mov	r5, r11
     498:	38 cf       	rjmp	.-400    	; 0x30a <prvTimerTask+0x100>

0000049a <__ctors_end>:
     49a:	11 24       	eor	r1, r1
     49c:	1f be       	out	0x3f, r1	; 63
     49e:	cf ef       	ldi	r28, 0xFF	; 255
     4a0:	d1 e2       	ldi	r29, 0x21	; 33
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	0c bf       	out	0x3c, r16	; 60

000004aa <__do_copy_data>:
     4aa:	17 e0       	ldi	r17, 0x07	; 7
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b2 e0       	ldi	r27, 0x02	; 2
     4b0:	e0 ee       	ldi	r30, 0xE0	; 224
     4b2:	fb e5       	ldi	r31, 0x5B	; 91
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	0b bf       	out	0x3b, r16	; 59
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__do_copy_data+0x14>
     4ba:	07 90       	elpm	r0, Z+
     4bc:	0d 92       	st	X+, r0
     4be:	ae 38       	cpi	r26, 0x8E	; 142
     4c0:	b1 07       	cpc	r27, r17
     4c2:	d9 f7       	brne	.-10     	; 0x4ba <__do_copy_data+0x10>

000004c4 <__do_clear_bss>:
     4c4:	2a e1       	ldi	r18, 0x1A	; 26
     4c6:	ae e8       	ldi	r26, 0x8E	; 142
     4c8:	b7 e0       	ldi	r27, 0x07	; 7
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <.do_clear_bss_start>

000004cc <.do_clear_bss_loop>:
     4cc:	1d 92       	st	X+, r1

000004ce <.do_clear_bss_start>:
     4ce:	a5 30       	cpi	r26, 0x05	; 5
     4d0:	b2 07       	cpc	r27, r18
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <.do_clear_bss_loop>
     4d4:	0e 94 b5 1a 	call	0x356a	; 0x356a <main>
     4d8:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <_exit>

000004dc <__bad_interrupt>:
     4dc:	91 cd       	rjmp	.-1246   	; 0x0 <__vectors>

000004de <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4de:	2f 92       	push	r2
     4e0:	3f 92       	push	r3
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	88 2e       	mov	r8, r24
     504:	96 2e       	mov	r9, r22
     506:	1a 01       	movw	r2, r20
     508:	28 01       	movw	r4, r16
     50a:	39 01       	movw	r6, r18
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 32 29 	call	0x5264	; 0x5264 <calloc>
     518:	ec 01       	movw	r28, r24
     51a:	00 97       	sbiw	r24, 0x00	; 0
     51c:	69 f1       	breq	.+90     	; 0x578 <co2Reader_create+0x9a>
     51e:	fc 01       	movw	r30, r24
     520:	11 92       	st	Z+, r1
     522:	30 92 99 07 	sts	0x0799, r3	; 0x800799 <_startMeasureEventGroup+0x1>
     526:	20 92 98 07 	sts	0x0798, r2	; 0x800798 <_startMeasureEventGroup>
     52a:	40 92 94 07 	sts	0x0794, r4	; 0x800794 <_startMeasureBit>
     52e:	50 92 95 07 	sts	0x0795, r5	; 0x800795 <_startMeasureBit+0x1>
     532:	60 92 96 07 	sts	0x0796, r6	; 0x800796 <_startMeasureBit+0x2>
     536:	70 92 97 07 	sts	0x0797, r7	; 0x800797 <_startMeasureBit+0x3>
     53a:	f0 92 93 07 	sts	0x0793, r15	; 0x800793 <_readyEventGroup+0x1>
     53e:	e0 92 92 07 	sts	0x0792, r14	; 0x800792 <_readyEventGroup>
     542:	a0 92 8e 07 	sts	0x078E, r10	; 0x80078e <__data_end>
     546:	b0 92 8f 07 	sts	0x078F, r11	; 0x80078f <__data_end+0x1>
     54a:	c0 92 90 07 	sts	0x0790, r12	; 0x800790 <__data_end+0x2>
     54e:	d0 92 91 07 	sts	0x0791, r13	; 0x800791 <__data_end+0x3>
     552:	49 2d       	mov	r20, r9
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	7f 01       	movw	r14, r30
     558:	08 2d       	mov	r16, r8
     55a:	9c 01       	movw	r18, r24
     55c:	63 e4       	ldi	r22, 0x43	; 67
     55e:	72 e0       	ldi	r23, 0x02	; 2
     560:	86 e2       	ldi	r24, 0x26	; 38
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
     568:	8d e4       	ldi	r24, 0x4D	; 77
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	ce 01       	movw	r24, r28
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	9f 90       	pop	r9
     590:	8f 90       	pop	r8
     592:	7f 90       	pop	r7
     594:	6f 90       	pop	r6
     596:	5f 90       	pop	r5
     598:	4f 90       	pop	r4
     59a:	3f 90       	pop	r3
     59c:	2f 90       	pop	r2
     59e:	08 95       	ret

000005a0 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b2:	40 91 94 07 	lds	r20, 0x0794	; 0x800794 <_startMeasureBit>
     5b6:	50 91 95 07 	lds	r21, 0x0795	; 0x800795 <_startMeasureBit+0x1>
     5ba:	60 91 96 07 	lds	r22, 0x0796	; 0x800796 <_startMeasureBit+0x2>
     5be:	70 91 97 07 	lds	r23, 0x0797	; 0x800797 <_startMeasureBit+0x3>
     5c2:	cc 24       	eor	r12, r12
     5c4:	ca 94       	dec	r12
     5c6:	dc 2c       	mov	r13, r12
     5c8:	76 01       	movw	r14, r12
     5ca:	01 e0       	ldi	r16, 0x01	; 1
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <_startMeasureEventGroup>
     5d2:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <_startMeasureEventGroup+0x1>
     5d6:	a7 d3       	rcall	.+1870   	; 0xd26 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5d8:	00 91 94 07 	lds	r16, 0x0794	; 0x800794 <_startMeasureBit>
     5dc:	10 91 95 07 	lds	r17, 0x0795	; 0x800795 <_startMeasureBit+0x1>
     5e0:	20 91 96 07 	lds	r18, 0x0796	; 0x800796 <_startMeasureBit+0x2>
     5e4:	30 91 97 07 	lds	r19, 0x0797	; 0x800797 <_startMeasureBit+0x3>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	80 23       	and	r24, r16
     5ee:	91 23       	and	r25, r17
     5f0:	a2 23       	and	r26, r18
     5f2:	b3 23       	and	r27, r19
     5f4:	08 17       	cp	r16, r24
     5f6:	19 07       	cpc	r17, r25
     5f8:	2a 07       	cpc	r18, r26
     5fa:	3b 07       	cpc	r19, r27
     5fc:	f1 f4       	brne	.+60     	; 0x63a <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     5fe:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	88 83       	st	Y, r24
		printf("co2 done bit set");
     604:	84 e5       	ldi	r24, 0x54	; 84
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

		vTaskDelay(2500); //pretend it takes some time
     610:	64 ec       	ldi	r22, 0xC4	; 196
     612:	79 e0       	ldi	r23, 0x09	; 9
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     61c:	40 91 8e 07 	lds	r20, 0x078E	; 0x80078e <__data_end>
     620:	50 91 8f 07 	lds	r21, 0x078F	; 0x80078f <__data_end+0x1>
     624:	60 91 90 07 	lds	r22, 0x0790	; 0x800790 <__data_end+0x2>
     628:	70 91 91 07 	lds	r23, 0x0791	; 0x800791 <__data_end+0x3>
     62c:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <_readyEventGroup>
     630:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <_readyEventGroup+0x1>
     634:	38 d4       	rcall	.+2160   	; 0xea6 <xEventGroupSetBits>
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
	}
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	08 95       	ret

0000064c <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     64c:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     64e:	ce 01       	movw	r24, r28
     650:	a7 df       	rcall	.-178    	; 0x5a0 <co2Reader_measure>
     652:	fd cf       	rjmp	.-6      	; 0x64e <co2Reader_executeTask+0x2>

00000654 <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	08 95       	ret

0000065a <currentCondition_create>:
	float temperatureData;
	float humidityData;
	uint16_t soundData;
}currentCondition;

currentCondition_t currentCondition_create(int deviceId) {
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	ec 01       	movw	r28, r24
	currentCondition_t _new_con = calloc(sizeof(currentCondition), 1);
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	8e e0       	ldi	r24, 0x0E	; 14
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 32 29 	call	0x5264	; 0x5264 <calloc>
	if (_new_con == NULL)
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	19 f0       	breq	.+6      	; 0x676 <currentCondition_create+0x1c>
	return NULL;

	_new_con->deviceId = deviceId;
     670:	fc 01       	movw	r30, r24
     672:	d1 83       	std	Z+1, r29	; 0x01
     674:	c0 83       	st	Z, r28

	return _new_con;
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <currentCondition_setCO2>:


void currentCondition_setCO2(currentCondition_t self, uint16_t value) {
	if(self!=NULL)
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	19 f0       	breq	.+6      	; 0x686 <currentCondition_setCO2+0xa>
	self->co2Data = value;
     680:	fc 01       	movw	r30, r24
     682:	73 83       	std	Z+3, r23	; 0x03
     684:	62 83       	std	Z+2, r22	; 0x02
     686:	08 95       	ret

00000688 <device_create>:
	free(self);*/
}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     688:	2f 92       	push	r2
     68a:	3f 92       	push	r3
     68c:	4f 92       	push	r4
     68e:	5f 92       	push	r5
     690:	6f 92       	push	r6
     692:	7f 92       	push	r7
     694:	8f 92       	push	r8
     696:	9f 92       	push	r9
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <device_create+0x26>
     6ae:	1f 92       	push	r1
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	28 2e       	mov	r2, r24
     6b6:	36 2e       	mov	r3, r22
     6b8:	5c 83       	std	Y+4, r21	; 0x04
     6ba:	4b 83       	std	Y+3, r20	; 0x03
     6bc:	28 01       	movw	r4, r16
     6be:	39 01       	movw	r6, r18
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	88 e0       	ldi	r24, 0x08	; 8
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 32 29 	call	0x5264	; 0x5264 <calloc>
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <device_create+0x4e>
     6d4:	40 c0       	rjmp	.+128    	; 0x756 <device_create+0xce>
     6d6:	fc 01       	movw	r30, r24
     6d8:	91 82       	std	Z+1, r9	; 0x01
     6da:	80 82       	st	Z, r8
     6dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6de:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6e0:	93 83       	std	Z+3, r25	; 0x03
     6e2:	82 83       	std	Z+2, r24	; 0x02
     6e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deviceId>
     6e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deviceId+0x1>
     6ec:	b6 df       	rcall	.-148    	; 0x65a <currentCondition_create>
     6ee:	e9 81       	ldd	r30, Y+1	; 0x01
     6f0:	fa 81       	ldd	r31, Y+2	; 0x02
     6f2:	95 83       	std	Z+5, r25	; 0x05
     6f4:	84 83       	std	Z+4, r24	; 0x04
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	9c 81       	ldd	r25, Y+4	; 0x04
     6fa:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <_startMeasureEventGroup+0x1>
     6fe:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <_startMeasureEventGroup>
     702:	40 92 a0 07 	sts	0x07A0, r4	; 0x8007a0 <_startMeasureBit>
     706:	50 92 a1 07 	sts	0x07A1, r5	; 0x8007a1 <_startMeasureBit+0x1>
     70a:	60 92 a2 07 	sts	0x07A2, r6	; 0x8007a2 <_startMeasureBit+0x2>
     70e:	70 92 a3 07 	sts	0x07A3, r7	; 0x8007a3 <_startMeasureBit+0x3>
     712:	f0 92 9f 07 	sts	0x079F, r15	; 0x80079f <_readyEventGroup+0x1>
     716:	e0 92 9e 07 	sts	0x079E, r14	; 0x80079e <_readyEventGroup>
     71a:	a0 92 9a 07 	sts	0x079A, r10	; 0x80079a <_readyBit>
     71e:	b0 92 9b 07 	sts	0x079B, r11	; 0x80079b <_readyBit+0x1>
     722:	c0 92 9c 07 	sts	0x079C, r12	; 0x80079c <_readyBit+0x2>
     726:	d0 92 9d 07 	sts	0x079D, r13	; 0x80079d <_readyBit+0x3>
     72a:	43 2d       	mov	r20, r3
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	7f 01       	movw	r14, r30
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	e9 0e       	add	r14, r25
     734:	f1 1c       	adc	r15, r1
     736:	02 2d       	mov	r16, r2
     738:	9f 01       	movw	r18, r30
     73a:	65 e6       	ldi	r22, 0x65	; 101
     73c:	72 e0       	ldi	r23, 0x02	; 2
     73e:	87 e5       	ldi	r24, 0x57	; 87
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
     746:	8c e6       	ldi	r24, 0x6C	; 108
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	9a 81       	ldd	r25, Y+2	; 0x02
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	08 95       	ret

00000788 <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     788:	fc 01       	movw	r30, r24
     78a:	84 81       	ldd	r24, Z+4	; 0x04
     78c:	95 81       	ldd	r25, Z+5	; 0x05
     78e:	76 cf       	rjmp	.-276    	; 0x67c <currentCondition_setCO2>
     790:	08 95       	ret

00000792 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     792:	fc 01       	movw	r30, r24
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	19 f0       	breq	.+6      	; 0x7a2 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     79c:	5b df       	rcall	.-330    	; 0x654 <co2Reader_getCO2>
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	08 95       	ret
	else return -1;
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	9f ef       	ldi	r25, 0xFF	; 255
     7a6:	08 95       	ret

000007a8 <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	ec 01       	movw	r28, r24
	//we should first check if device is on, get that from lora and add new eventBit 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     7ba:	40 91 a0 07 	lds	r20, 0x07A0	; 0x8007a0 <_startMeasureBit>
     7be:	50 91 a1 07 	lds	r21, 0x07A1	; 0x8007a1 <_startMeasureBit+0x1>
     7c2:	60 91 a2 07 	lds	r22, 0x07A2	; 0x8007a2 <_startMeasureBit+0x2>
     7c6:	70 91 a3 07 	lds	r23, 0x07A3	; 0x8007a3 <_startMeasureBit+0x3>
     7ca:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <_startMeasureEventGroup>
     7ce:	90 91 a5 07 	lds	r25, 0x07A5	; 0x8007a5 <_startMeasureEventGroup+0x1>
     7d2:	69 d3       	rcall	.+1746   	; 0xea6 <xEventGroupSetBits>
	printf("device has set bits");
     7d4:	86 e7       	ldi	r24, 0x76	; 118
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     7e0:	40 91 9a 07 	lds	r20, 0x079A	; 0x80079a <_readyBit>
     7e4:	50 91 9b 07 	lds	r21, 0x079B	; 0x80079b <_readyBit+0x1>
     7e8:	60 91 9c 07 	lds	r22, 0x079C	; 0x80079c <_readyBit+0x2>
     7ec:	70 91 9d 07 	lds	r23, 0x079D	; 0x80079d <_readyBit+0x3>
     7f0:	cc 24       	eor	r12, r12
     7f2:	ca 94       	dec	r12
     7f4:	dc 2c       	mov	r13, r12
     7f6:	76 01       	movw	r14, r12
     7f8:	01 e0       	ldi	r16, 0x01	; 1
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <_readyEventGroup>
     800:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <_readyEventGroup+0x1>
     804:	90 d2       	rcall	.+1312   	; 0xd26 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     806:	00 91 9a 07 	lds	r16, 0x079A	; 0x80079a <_readyBit>
     80a:	10 91 9b 07 	lds	r17, 0x079B	; 0x80079b <_readyBit+0x1>
     80e:	20 91 9c 07 	lds	r18, 0x079C	; 0x80079c <_readyBit+0x2>
     812:	30 91 9d 07 	lds	r19, 0x079D	; 0x80079d <_readyBit+0x3>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	80 23       	and	r24, r16
     81c:	91 23       	and	r25, r17
     81e:	a2 23       	and	r26, r18
     820:	b3 23       	and	r27, r19
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	08 17       	cp	r16, r24
     828:	19 07       	cpc	r17, r25
     82a:	2a 07       	cpc	r18, r26
     82c:	3b 07       	cpc	r19, r27
     82e:	b1 f5       	brne	.+108    	; 0x89c <device_startMeasuring+0xf4>
		printf("device got done bit\n");
     830:	8a e8       	ldi	r24, 0x8A	; 138
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <puts>
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	0b df       	rcall	.-490    	; 0x654 <co2Reader_getCO2>
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	8e e9       	ldi	r24, 0x9E	; 158
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
		printf("Temperature is: %f\n", humAndTempReader_getTemperature(self->humAndTempReader));
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	9b 81       	ldd	r25, Y+3	; 0x03
     852:	14 d1       	rcall	.+552    	; 0xa7c <humAndTempReader_getTemperature>
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	7f 93       	push	r23
     85a:	6f 93       	push	r22
     85c:	8a ea       	ldi	r24, 0xAA	; 170
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
		printf("Humidity is: %f\n", humAndTempReader_getHumidity(self->humAndTempReader));
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	01 d1       	rcall	.+514    	; 0xa70 <humAndTempReader_getHumidity>
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	7f 93       	push	r23
     874:	6f 93       	push	r22
     876:	8e eb       	ldi	r24, 0xBE	; 190
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     882:	ce 01       	movw	r24, r28
     884:	86 df       	rcall	.-244    	; 0x792 <device_getCO2Data>
     886:	bc 01       	movw	r22, r24
     888:	ce 01       	movw	r24, r28
     88a:	7e df       	rcall	.-260    	; 0x788 <device_setCO2ToCurrent>
     88c:	8d b7       	in	r24, 0x3d	; 61
     88e:	9e b7       	in	r25, 0x3e	; 62
     890:	40 96       	adiw	r24, 0x10	; 16
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	9e bf       	out	0x3e, r25	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	8d bf       	out	0x3d, r24	; 61
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
		//add the rest
	}
}
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	08 95       	ret

000008ae <device_executeTask>:
     8ae:	ec 01       	movw	r28, r24
     8b0:	ce 01       	movw	r24, r28
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     8b2:	7a df       	rcall	.-268    	; 0x7a8 <device_startMeasuring>
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <device_executeTask+0x2>

000008b6 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     8b6:	2f 92       	push	r2
     8b8:	3f 92       	push	r3
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	88 2e       	mov	r8, r24
     8dc:	96 2e       	mov	r9, r22
     8de:	1a 01       	movw	r2, r20
     8e0:	28 01       	movw	r4, r16
     8e2:	39 01       	movw	r6, r18
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	8a e0       	ldi	r24, 0x0A	; 10
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 32 29 	call	0x5264	; 0x5264 <calloc>
     8f0:	ec 01       	movw	r28, r24
     8f2:	89 2b       	or	r24, r25
     8f4:	c1 f1       	breq	.+112    	; 0x966 <humAndTempReader_create+0xb0>
     8f6:	18 82       	st	Y, r1
     8f8:	19 82       	std	Y+1, r1	; 0x01
     8fa:	1a 82       	std	Y+2, r1	; 0x02
     8fc:	1b 82       	std	Y+3, r1	; 0x03
     8fe:	1c 82       	std	Y+4, r1	; 0x04
     900:	1d 82       	std	Y+5, r1	; 0x05
     902:	1e 82       	std	Y+6, r1	; 0x06
     904:	1f 82       	std	Y+7, r1	; 0x07
     906:	30 92 b1 07 	sts	0x07B1, r3	; 0x8007b1 <_startMeasureEventGroup+0x1>
     90a:	20 92 b0 07 	sts	0x07B0, r2	; 0x8007b0 <_startMeasureEventGroup>
     90e:	40 92 ac 07 	sts	0x07AC, r4	; 0x8007ac <_startMeasureBit>
     912:	50 92 ad 07 	sts	0x07AD, r5	; 0x8007ad <_startMeasureBit+0x1>
     916:	60 92 ae 07 	sts	0x07AE, r6	; 0x8007ae <_startMeasureBit+0x2>
     91a:	70 92 af 07 	sts	0x07AF, r7	; 0x8007af <_startMeasureBit+0x3>
     91e:	f0 92 ab 07 	sts	0x07AB, r15	; 0x8007ab <_readyEventGroup+0x1>
     922:	e0 92 aa 07 	sts	0x07AA, r14	; 0x8007aa <_readyEventGroup>
     926:	a0 92 a6 07 	sts	0x07A6, r10	; 0x8007a6 <_readyBit>
     92a:	b0 92 a7 07 	sts	0x07A7, r11	; 0x8007a7 <_readyBit+0x1>
     92e:	c0 92 a8 07 	sts	0x07A8, r12	; 0x8007a8 <_readyBit+0x2>
     932:	d0 92 a9 07 	sts	0x07A9, r13	; 0x8007a9 <_readyBit+0x3>
     936:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <hih8120Create>
     93a:	49 2d       	mov	r20, r9
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	7e 01       	movw	r14, r28
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	e8 0e       	add	r14, r24
     944:	f1 1c       	adc	r15, r1
     946:	08 2d       	mov	r16, r8
     948:	9e 01       	movw	r18, r28
     94a:	6f ec       	ldi	r22, 0xCF	; 207
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	84 e3       	ldi	r24, 0x34	; 52
     950:	95 e0       	ldi	r25, 0x05	; 5
     952:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
     956:	80 ee       	ldi	r24, 0xE0	; 224
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	9f 93       	push	r25
     95c:	8f 93       	push	r24
     95e:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	ce 01       	movw	r24, r28
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     9a0:	40 91 ac 07 	lds	r20, 0x07AC	; 0x8007ac <_startMeasureBit>
     9a4:	50 91 ad 07 	lds	r21, 0x07AD	; 0x8007ad <_startMeasureBit+0x1>
     9a8:	60 91 ae 07 	lds	r22, 0x07AE	; 0x8007ae <_startMeasureBit+0x2>
     9ac:	70 91 af 07 	lds	r23, 0x07AF	; 0x8007af <_startMeasureBit+0x3>
     9b0:	cc 24       	eor	r12, r12
     9b2:	ca 94       	dec	r12
     9b4:	dc 2c       	mov	r13, r12
     9b6:	76 01       	movw	r14, r12
     9b8:	01 e0       	ldi	r16, 0x01	; 1
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <_startMeasureEventGroup>
     9c0:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <_startMeasureEventGroup+0x1>
     9c4:	b0 d1       	rcall	.+864    	; 0xd26 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     9c6:	00 91 ac 07 	lds	r16, 0x07AC	; 0x8007ac <_startMeasureBit>
     9ca:	10 91 ad 07 	lds	r17, 0x07AD	; 0x8007ad <_startMeasureBit+0x1>
     9ce:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <_startMeasureBit+0x2>
     9d2:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <_startMeasureBit+0x3>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	80 23       	and	r24, r16
     9dc:	91 23       	and	r25, r17
     9de:	a2 23       	and	r26, r18
     9e0:	b3 23       	and	r27, r19
     9e2:	08 17       	cp	r16, r24
     9e4:	19 07       	cpc	r17, r25
     9e6:	2a 07       	cpc	r18, r26
     9e8:	3b 07       	cpc	r19, r27
     9ea:	a9 f5       	brne	.+106    	; 0xa56 <humAndTempReader_measure+0xc8>
		hih8120Meassure();
     9ec:	0e 94 75 1b 	call	0x36ea	; 0x36ea <hih8120Meassure>
		if(hih8120IsReady())
     9f0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <hih8120IsReady>
     9f4:	89 2b       	or	r24, r25
     9f6:	e1 f0       	breq	.+56     	; 0xa30 <humAndTempReader_measure+0xa2>
		{
			self->humidity = hih8120GetHumidity();
     9f8:	0e 94 86 1b 	call	0x370c	; 0x370c <hih8120GetHumidity>
     9fc:	bc 01       	movw	r22, r24
     9fe:	99 0f       	add	r25, r25
     a00:	88 0b       	sbc	r24, r24
     a02:	99 0b       	sbc	r25, r25
     a04:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__floatsisf>
     a08:	68 83       	st	Y, r22
     a0a:	79 83       	std	Y+1, r23	; 0x01
     a0c:	8a 83       	std	Y+2, r24	; 0x02
     a0e:	9b 83       	std	Y+3, r25	; 0x03
			self->temperature = hih8120GetTemperature();
     a10:	0e 94 9a 1b 	call	0x3734	; 0x3734 <hih8120GetTemperature>
     a14:	bc 01       	movw	r22, r24
     a16:	99 0f       	add	r25, r25
     a18:	88 0b       	sbc	r24, r24
     a1a:	99 0b       	sbc	r25, r25
     a1c:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__floatsisf>
     a20:	6c 83       	std	Y+4, r22	; 0x04
     a22:	7d 83       	std	Y+5, r23	; 0x05
     a24:	8e 83       	std	Y+6, r24	; 0x06
     a26:	9f 83       	std	Y+7, r25	; 0x07
			printf("humidity and temperature done bit set\n");
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <puts>
		}
		vTaskDelay(2500); //pretend it takes some time
     a30:	64 ec       	ldi	r22, 0xC4	; 196
     a32:	79 e0       	ldi	r23, 0x09	; 9
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     a3c:	40 91 a6 07 	lds	r20, 0x07A6	; 0x8007a6 <_readyBit>
     a40:	50 91 a7 07 	lds	r21, 0x07A7	; 0x8007a7 <_readyBit+0x1>
     a44:	60 91 a8 07 	lds	r22, 0x07A8	; 0x8007a8 <_readyBit+0x2>
     a48:	70 91 a9 07 	lds	r23, 0x07A9	; 0x8007a9 <_readyBit+0x3>
     a4c:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_readyEventGroup>
     a50:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_readyEventGroup+0x1>
     a54:	28 d2       	rcall	.+1104   	; 0xea6 <xEventGroupSetBits>
	}
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	08 95       	ret

00000a68 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     a68:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     a6a:	ce 01       	movw	r24, r28
     a6c:	90 df       	rcall	.-224    	; 0x98e <humAndTempReader_measure>
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <humAndTempReader_executeTask+0x2>

00000a70 <humAndTempReader_getHumidity>:
		xEventGroupSetBits(_readyEventGroup, _readyBit);
	}
}

float humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
     a70:	fc 01       	movw	r30, r24
     a72:	60 81       	ld	r22, Z
     a74:	71 81       	ldd	r23, Z+1	; 0x01
     a76:	82 81       	ldd	r24, Z+2	; 0x02
     a78:	93 81       	ldd	r25, Z+3	; 0x03
}
     a7a:	08 95       	ret

00000a7c <humAndTempReader_getTemperature>:

float humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
     a7c:	fc 01       	movw	r30, r24
     a7e:	64 81       	ldd	r22, Z+4	; 0x04
     a80:	75 81       	ldd	r23, Z+5	; 0x05
     a82:	86 81       	ldd	r24, Z+6	; 0x06
     a84:	97 81       	ldd	r25, Z+7	; 0x07
}
     a86:	08 95       	ret

00000a88 <lora_UpLinkHandler_create>:


/*Check for the parameters*/

void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	xTaskCreate(
     a90:	e1 2c       	mov	r14, r1
     a92:	f1 2c       	mov	r15, r1
     a94:	08 2f       	mov	r16, r24
     a96:	48 e8       	ldi	r20, 0x88	; 136
     a98:	51 e0       	ldi	r21, 0x01	; 1
     a9a:	65 e2       	ldi	r22, 0x25	; 37
     a9c:	73 e0       	ldi	r23, 0x03	; 3
     a9e:	80 e6       	ldi	r24, 0x60	; 96
     aa0:	96 e0       	ldi	r25, 0x06	; 6
     aa2:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	08 95       	ret

00000aae <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <lora_driver_reset_rn2483>
		vTaskDelay(2);
     ac4:	62 e0       	ldi	r22, 0x02	; 2
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     ad6:	66 e9       	ldi	r22, 0x96	; 150
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     ae2:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     aec:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <lora_driver_rn2483_factory_reset>
     af0:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	8e e2       	ldi	r24, 0x2E	; 46
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     b04:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <lora_driver_configure_to_eu868>
     b08:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     b0c:	9f 93       	push	r25
     b0e:	8f 93       	push	r24
     b10:	81 e4       	ldi	r24, 0x41	; 65
     b12:	93 e0       	ldi	r25, 0x03	; 3
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     b1c:	88 ec       	ldi	r24, 0xC8	; 200
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     b24:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     b28:	c8 ec       	ldi	r28, 0xC8	; 200
     b2a:	d7 e0       	ldi	r29, 0x07	; 7
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	8a e5       	ldi	r24, 0x5A	; 90
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <lora_driver_set_device_identifier>
     b46:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	8e e6       	ldi	r24, 0x6E	; 110
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	9f 93       	push	r25
     b58:	8f 93       	push	r24
     b5a:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     b5e:	ae 01       	movw	r20, r28
     b60:	63 e8       	ldi	r22, 0x83	; 131
     b62:	73 e0       	ldi	r23, 0x03	; 3
     b64:	84 ea       	ldi	r24, 0xA4	; 164
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	0e 94 38 21 	call	0x4270	; 0x4270 <lora_driver_set_otaa_identity>
     b6c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	83 e8       	ldi	r24, 0x83	; 131
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	84 ea       	ldi	r24, 0xA4	; 164
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	85 eb       	ldi	r24, 0xB5	; 181
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	9f 93       	push	r25
     b8e:	8f 93       	push	r24
     b90:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     b94:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <lora_driver_save_mac>
     b98:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	8b ee       	ldi	r24, 0xEB	; 235
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     bac:	8d b7       	in	r24, 0x3d	; 61
     bae:	9e b7       	in	r25, 0x3e	; 62
     bb0:	82 96       	adiw	r24, 0x22	; 34
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	9e bf       	out	0x3e, r25	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	8d bf       	out	0x3d, r24	; 61
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 37 20 	call	0x406e	; 0x406e <lora_driver_set_adaptive_data_rate>
     bc2:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	8a ef       	ldi	r24, 0xFA	; 250
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     bd6:	84 ef       	ldi	r24, 0xF4	; 244
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 42 20 	call	0x4084	; 0x4084 <lora_driver_set_receive_delay>
     bde:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	8f 93       	push	r24
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	8f 93       	push	r24
     bee:	8b e1       	ldi	r24, 0x1B	; 27
     bf0:	94 e0       	ldi	r25, 0x04	; 4
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
     bfa:	8d b7       	in	r24, 0x3d	; 61
     bfc:	9e b7       	in	r25, 0x3e	; 62
     bfe:	0a 96       	adiw	r24, 0x0a	; 10
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	9e bf       	out	0x3e, r25	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	8d bf       	out	0x3d, r24	; 61
     c0a:	ca e0       	ldi	r28, 0x0A	; 10
     c0c:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     c0e:	0b e3       	ldi	r16, 0x3B	; 59
     c10:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <lora_driver_join>
     c18:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     c1a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     c1e:	9f 93       	push	r25
     c20:	8f 93       	push	r24
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	1f 93       	push	r17
     c28:	0f 93       	push	r16
     c2a:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

		if ( rc != LoRa_ACCEPTED)
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	88 e0       	ldi	r24, 0x08	; 8
     c3c:	d8 16       	cp	r13, r24
     c3e:	a9 f0       	breq	.+42     	; 0xc6a <lora_UpLinkHandler_task+0x1bc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     c46:	66 e3       	ldi	r22, 0x36	; 54
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <vTaskDelay>
     c52:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     c54:	f1 f6       	brne	.-68     	; 0xc12 <lora_UpLinkHandler_task+0x164>
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <lora_UpLinkHandler_task+0x1ae>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     c58:	3e d4       	rcall	.+2172   	; 0x14d6 <vPortYield>
     c5a:	fe cf       	rjmp	.-4      	; 0xc58 <lora_UpLinkHandler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <led_fast_blink>
     c68:	f7 cf       	rjmp	.-18     	; 0xc58 <lora_UpLinkHandler_task+0x1aa>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <led_led_on>
		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	98 01       	movw	r18, r16
     c76:	42 e3       	ldi	r20, 0x32	; 50
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	62 eb       	ldi	r22, 0xB2	; 178
     c7c:	77 e0       	ldi	r23, 0x07	; 7
     c7e:	c7 01       	movw	r24, r14
     c80:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <xStreamBufferReceive>
		
		//_uplink_payload = (_uplink_payload) &rxData;
		
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     c8a:	62 eb       	ldi	r22, 0xB2	; 178
     c8c:	77 e0       	ldi	r23, 0x07	; 7
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <lora_driver_sent_upload_message>
     c94:	0e 94 59 21 	call	0x42b2	; 0x42b2 <lora_driver_map_return_code_to_text>
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	8b e5       	ldi	r24, 0x5B	; 91
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>
	}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	08 95       	ret

00000cc0 <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     cc0:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     cc2:	ce 01       	movw	r24, r28
     cc4:	f4 de       	rcall	.-536    	; 0xaae <lora_UpLinkHandler_task>
			vTaskDelay(300000);
     cc6:	60 ee       	ldi	r22, 0xE0	; 224
     cc8:	73 e9       	ldi	r23, 0x93	; 147
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <vTaskDelay>
     cd2:	f7 cf       	rjmp	.-18     	; 0xcc2 <lora_UpLinkHandler_startTask+0x2>

00000cd4 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     cd4:	e7 e0       	ldi	r30, 0x07	; 7
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	80 81       	ld	r24, Z
     cda:	8f 60       	ori	r24, 0x0F	; 15
     cdc:	80 83       	st	Z, r24
     cde:	08 95       	ret

00000ce0 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     ce0:	e8 e0       	ldi	r30, 0x08	; 8
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	90 81       	ld	r25, Z
     ce6:	90 7f       	andi	r25, 0xF0	; 240
     ce8:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     cea:	90 81       	ld	r25, Z
     cec:	8f 70       	andi	r24, 0x0F	; 15
     cee:	98 2b       	or	r25, r24
     cf0:	90 83       	st	Z, r25
     cf2:	08 95       	ret

00000cf4 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     cf4:	e8 e0       	ldi	r30, 0x08	; 8
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	80 81       	ld	r24, Z
     cfa:	80 7f       	andi	r24, 0xF0	; 240
     cfc:	80 83       	st	Z, r24
     cfe:	08 95       	ret

00000d00 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	80 e1       	ldi	r24, 0x10	; 16
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	b4 d1       	rcall	.+872    	; 0x1072 <pvPortMalloc>
     d0a:	ec 01       	movw	r28, r24
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	39 f0       	breq	.+14     	; 0xd1e <xEventGroupCreate+0x1e>
     d10:	fc 01       	movw	r30, r24
     d12:	11 92       	st	Z+, r1
     d14:	11 92       	st	Z+, r1
     d16:	11 92       	st	Z+, r1
     d18:	11 92       	st	Z+, r1
     d1a:	cf 01       	movw	r24, r30
     d1c:	94 d2       	rcall	.+1320   	; 0x1246 <vListInitialise>
     d1e:	ce 01       	movw	r24, r28
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <xEventGroupWaitBits>:
     d26:	2f 92       	push	r2
     d28:	3f 92       	push	r3
     d2a:	4f 92       	push	r4
     d2c:	5f 92       	push	r5
     d2e:	6f 92       	push	r6
     d30:	7f 92       	push	r7
     d32:	8f 92       	push	r8
     d34:	9f 92       	push	r9
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
     d4c:	4a 01       	movw	r8, r20
     d4e:	5b 01       	movw	r10, r22
     d50:	62 2e       	mov	r6, r18
     d52:	70 2e       	mov	r7, r16
     d54:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vTaskSuspendAll>
     d58:	28 80       	ld	r2, Y
     d5a:	39 80       	ldd	r3, Y+1	; 0x01
     d5c:	4a 80       	ldd	r4, Y+2	; 0x02
     d5e:	5b 80       	ldd	r5, Y+3	; 0x03
     d60:	01 11       	cpse	r16, r1
     d62:	0d c0       	rjmp	.+26     	; 0xd7e <xEventGroupWaitBits+0x58>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	b2 01       	movw	r22, r4
     d68:	a1 01       	movw	r20, r2
     d6a:	48 21       	and	r20, r8
     d6c:	59 21       	and	r21, r9
     d6e:	6a 21       	and	r22, r10
     d70:	7b 21       	and	r23, r11
     d72:	45 2b       	or	r20, r21
     d74:	46 2b       	or	r20, r22
     d76:	47 2b       	or	r20, r23
     d78:	79 f4       	brne	.+30     	; 0xd98 <xEventGroupWaitBits+0x72>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <xEventGroupWaitBits+0x72>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	b2 01       	movw	r22, r4
     d82:	a1 01       	movw	r20, r2
     d84:	48 21       	and	r20, r8
     d86:	59 21       	and	r21, r9
     d88:	6a 21       	and	r22, r10
     d8a:	7b 21       	and	r23, r11
     d8c:	48 15       	cp	r20, r8
     d8e:	59 05       	cpc	r21, r9
     d90:	6a 05       	cpc	r22, r10
     d92:	7b 05       	cpc	r23, r11
     d94:	09 f0       	breq	.+2      	; 0xd98 <xEventGroupWaitBits+0x72>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	88 23       	and	r24, r24
     d9a:	81 f0       	breq	.+32     	; 0xdbc <xEventGroupWaitBits+0x96>
     d9c:	66 20       	and	r6, r6
     d9e:	09 f4       	brne	.+2      	; 0xda2 <xEventGroupWaitBits+0x7c>
     da0:	6b c0       	rjmp	.+214    	; 0xe78 <xEventGroupWaitBits+0x152>
     da2:	80 94       	com	r8
     da4:	90 94       	com	r9
     da6:	a0 94       	com	r10
     da8:	b0 94       	com	r11
     daa:	82 20       	and	r8, r2
     dac:	93 20       	and	r9, r3
     dae:	a4 20       	and	r10, r4
     db0:	b5 20       	and	r11, r5
     db2:	88 82       	st	Y, r8
     db4:	99 82       	std	Y+1, r9	; 0x01
     db6:	aa 82       	std	Y+2, r10	; 0x02
     db8:	bb 82       	std	Y+3, r11	; 0x03
     dba:	5e c0       	rjmp	.+188    	; 0xe78 <xEventGroupWaitBits+0x152>
     dbc:	c1 14       	cp	r12, r1
     dbe:	d1 04       	cpc	r13, r1
     dc0:	e1 04       	cpc	r14, r1
     dc2:	f1 04       	cpc	r15, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <xEventGroupWaitBits+0xa2>
     dc6:	58 c0       	rjmp	.+176    	; 0xe78 <xEventGroupWaitBits+0x152>
     dc8:	66 20       	and	r6, r6
     dca:	29 f0       	breq	.+10     	; 0xdd6 <xEventGroupWaitBits+0xb0>
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <xEventGroupWaitBits+0xb6>
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	ba 01       	movw	r22, r20
     ddc:	71 10       	cpse	r7, r1
     dde:	74 60       	ori	r23, 0x04	; 4
     de0:	48 29       	or	r20, r8
     de2:	59 29       	or	r21, r9
     de4:	6a 29       	or	r22, r10
     de6:	7b 29       	or	r23, r11
     de8:	97 01       	movw	r18, r14
     dea:	86 01       	movw	r16, r12
     dec:	ce 01       	movw	r24, r28
     dee:	04 96       	adiw	r24, 0x04	; 4
     df0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <vTaskPlaceOnUnorderedEventList>
     df4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
     df8:	81 11       	cpse	r24, r1
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <xEventGroupWaitBits+0xd8>
     dfc:	6c d3       	rcall	.+1752   	; 0x14d6 <vPortYield>
     dfe:	0e 94 98 16 	call	0x2d30	; 0x2d30 <uxTaskResetEventItemValue>
     e02:	91 fd       	sbrc	r25, 1
     e04:	35 c0       	rjmp	.+106    	; 0xe70 <xEventGroupWaitBits+0x14a>
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	0f 92       	push	r0
     e0c:	68 81       	ld	r22, Y
     e0e:	79 81       	ldd	r23, Y+1	; 0x01
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	71 10       	cpse	r7, r1
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <xEventGroupWaitBits+0x10c>
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	75 01       	movw	r14, r10
     e1c:	64 01       	movw	r12, r8
     e1e:	c6 22       	and	r12, r22
     e20:	d7 22       	and	r13, r23
     e22:	e8 22       	and	r14, r24
     e24:	f9 22       	and	r15, r25
     e26:	cd 28       	or	r12, r13
     e28:	ce 28       	or	r12, r14
     e2a:	cf 28       	or	r12, r15
     e2c:	79 f4       	brne	.+30     	; 0xe4c <xEventGroupWaitBits+0x126>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	0d c0       	rjmp	.+26     	; 0xe4c <xEventGroupWaitBits+0x126>
     e32:	21 e0       	ldi	r18, 0x01	; 1
     e34:	75 01       	movw	r14, r10
     e36:	64 01       	movw	r12, r8
     e38:	c6 22       	and	r12, r22
     e3a:	d7 22       	and	r13, r23
     e3c:	e8 22       	and	r14, r24
     e3e:	f9 22       	and	r15, r25
     e40:	c8 14       	cp	r12, r8
     e42:	d9 04       	cpc	r13, r9
     e44:	ea 04       	cpc	r14, r10
     e46:	fb 04       	cpc	r15, r11
     e48:	09 f0       	breq	.+2      	; 0xe4c <xEventGroupWaitBits+0x126>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	22 23       	and	r18, r18
     e4e:	71 f0       	breq	.+28     	; 0xe6c <xEventGroupWaitBits+0x146>
     e50:	66 20       	and	r6, r6
     e52:	61 f0       	breq	.+24     	; 0xe6c <xEventGroupWaitBits+0x146>
     e54:	80 94       	com	r8
     e56:	90 94       	com	r9
     e58:	a0 94       	com	r10
     e5a:	b0 94       	com	r11
     e5c:	86 22       	and	r8, r22
     e5e:	97 22       	and	r9, r23
     e60:	a8 22       	and	r10, r24
     e62:	b9 22       	and	r11, r25
     e64:	88 82       	st	Y, r8
     e66:	99 82       	std	Y+1, r9	; 0x01
     e68:	aa 82       	std	Y+2, r10	; 0x02
     e6a:	bb 82       	std	Y+3, r11	; 0x03
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	1b 01       	movw	r2, r22
     e72:	2c 01       	movw	r4, r24
     e74:	55 24       	eor	r5, r5
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <xEventGroupWaitBits+0x156>
     e78:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
     e7c:	c2 01       	movw	r24, r4
     e7e:	b1 01       	movw	r22, r2
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	7f 90       	pop	r7
     e9a:	6f 90       	pop	r6
     e9c:	5f 90       	pop	r5
     e9e:	4f 90       	pop	r4
     ea0:	3f 90       	pop	r3
     ea2:	2f 90       	pop	r2
     ea4:	08 95       	ret

00000ea6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     ea6:	4f 92       	push	r4
     ea8:	5f 92       	push	r5
     eaa:	6f 92       	push	r6
     eac:	7f 92       	push	r7
     eae:	8f 92       	push	r8
     eb0:	9f 92       	push	r9
     eb2:	af 92       	push	r10
     eb4:	bf 92       	push	r11
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
     ec8:	6a 01       	movw	r12, r20
     eca:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ecc:	8c 01       	movw	r16, r24
     ece:	09 5f       	subi	r16, 0xF9	; 249
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     ed2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     ed6:	eb 85       	ldd	r30, Y+11	; 0x0b
     ed8:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     eda:	88 81       	ld	r24, Y
     edc:	99 81       	ldd	r25, Y+1	; 0x01
     ede:	aa 81       	ldd	r26, Y+2	; 0x02
     ee0:	bb 81       	ldd	r27, Y+3	; 0x03
     ee2:	c8 2a       	or	r12, r24
     ee4:	d9 2a       	or	r13, r25
     ee6:	ea 2a       	or	r14, r26
     ee8:	fb 2a       	or	r15, r27
     eea:	c8 82       	st	Y, r12
     eec:	d9 82       	std	Y+1, r13	; 0x01
     eee:	ea 82       	std	Y+2, r14	; 0x02
     ef0:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     ef2:	0e 17       	cp	r16, r30
     ef4:	1f 07       	cpc	r17, r31
     ef6:	09 f4       	brne	.+2      	; 0xefa <xEventGroupSetBits+0x54>
     ef8:	45 c0       	rjmp	.+138    	; 0xf84 <xEventGroupSetBits+0xde>
     efa:	c1 2c       	mov	r12, r1
     efc:	d1 2c       	mov	r13, r1
     efe:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     f00:	99 24       	eor	r9, r9
     f02:	93 94       	inc	r9
     f04:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     f06:	a4 80       	ldd	r10, Z+4	; 0x04
     f08:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	a2 81       	ldd	r26, Z+2	; 0x02
     f10:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     f12:	ac 01       	movw	r20, r24
     f14:	bd 01       	movw	r22, r26
     f16:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     f18:	b2 fd       	sbrc	r27, 2
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     f1c:	48 80       	ld	r4, Y
     f1e:	59 80       	ldd	r5, Y+1	; 0x01
     f20:	6a 80       	ldd	r6, Y+2	; 0x02
     f22:	7b 80       	ldd	r7, Y+3	; 0x03
     f24:	44 22       	and	r4, r20
     f26:	55 22       	and	r5, r21
     f28:	66 22       	and	r6, r22
     f2a:	77 22       	and	r7, r23
     f2c:	29 2d       	mov	r18, r9
     f2e:	45 28       	or	r4, r5
     f30:	46 28       	or	r4, r6
     f32:	47 28       	or	r4, r7
     f34:	89 f4       	brne	.+34     	; 0xf58 <xEventGroupSetBits+0xb2>
     f36:	28 2d       	mov	r18, r8
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <xEventGroupSetBits+0xb2>
     f3a:	48 80       	ld	r4, Y
     f3c:	59 80       	ldd	r5, Y+1	; 0x01
     f3e:	6a 80       	ldd	r6, Y+2	; 0x02
     f40:	7b 80       	ldd	r7, Y+3	; 0x03
     f42:	44 22       	and	r4, r20
     f44:	55 22       	and	r5, r21
     f46:	66 22       	and	r6, r22
     f48:	77 22       	and	r7, r23
     f4a:	29 2d       	mov	r18, r9
     f4c:	44 16       	cp	r4, r20
     f4e:	55 06       	cpc	r5, r21
     f50:	66 06       	cpc	r6, r22
     f52:	77 06       	cpc	r7, r23
     f54:	09 f0       	breq	.+2      	; 0xf58 <xEventGroupSetBits+0xb2>
     f56:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     f58:	22 23       	and	r18, r18
     f5a:	71 f0       	breq	.+28     	; 0xf78 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     f5c:	b0 ff       	sbrs	r27, 0
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     f60:	c4 2a       	or	r12, r20
     f62:	d5 2a       	or	r13, r21
     f64:	e6 2a       	or	r14, r22
     f66:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     f68:	48 81       	ld	r20, Y
     f6a:	59 81       	ldd	r21, Y+1	; 0x01
     f6c:	6a 81       	ldd	r22, Y+2	; 0x02
     f6e:	7b 81       	ldd	r23, Y+3	; 0x03
     f70:	72 60       	ori	r23, 0x02	; 2
     f72:	cf 01       	movw	r24, r30
     f74:	0e 94 91 15 	call	0x2b22	; 0x2b22 <vTaskRemoveFromUnorderedEventList>
     f78:	ea 2d       	mov	r30, r10
     f7a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     f7c:	0e 17       	cp	r16, r30
     f7e:	1f 07       	cpc	r17, r31
     f80:	11 f6       	brne	.-124    	; 0xf06 <xEventGroupSetBits+0x60>
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     f84:	c1 2c       	mov	r12, r1
     f86:	d1 2c       	mov	r13, r1
     f88:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     f8a:	c0 94       	com	r12
     f8c:	d0 94       	com	r13
     f8e:	e0 94       	com	r14
     f90:	f0 94       	com	r15
     f92:	88 81       	ld	r24, Y
     f94:	99 81       	ldd	r25, Y+1	; 0x01
     f96:	aa 81       	ldd	r26, Y+2	; 0x02
     f98:	bb 81       	ldd	r27, Y+3	; 0x03
     f9a:	c8 22       	and	r12, r24
     f9c:	d9 22       	and	r13, r25
     f9e:	ea 22       	and	r14, r26
     fa0:	fb 22       	and	r15, r27
     fa2:	c8 82       	st	Y, r12
     fa4:	d9 82       	std	Y+1, r13	; 0x01
     fa6:	ea 82       	std	Y+2, r14	; 0x02
     fa8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     faa:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     fae:	68 81       	ld	r22, Y
     fb0:	79 81       	ldd	r23, Y+1	; 0x01
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	9f 90       	pop	r9
     fcc:	8f 90       	pop	r8
     fce:	7f 90       	pop	r7
     fd0:	6f 90       	pop	r6
     fd2:	5f 90       	pop	r5
     fd4:	4f 90       	pop	r4
     fd6:	08 95       	ret

00000fd8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     fde:	e4 e3       	ldi	r30, 0x34	; 52
     fe0:	f8 e0       	ldi	r31, 0x08	; 8
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <prvInsertBlockIntoFreeList+0xe>
     fe4:	f9 01       	movw	r30, r18
     fe6:	20 81       	ld	r18, Z
     fe8:	31 81       	ldd	r19, Z+1	; 0x01
     fea:	2a 17       	cp	r18, r26
     fec:	3b 07       	cpc	r19, r27
     fee:	d0 f3       	brcs	.-12     	; 0xfe4 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	af 01       	movw	r20, r30
     ff6:	48 0f       	add	r20, r24
     ff8:	59 1f       	adc	r21, r25
     ffa:	a4 17       	cp	r26, r20
     ffc:	b5 07       	cpc	r27, r21
     ffe:	49 f4       	brne	.+18     	; 0x1012 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	4d 91       	ld	r20, X+
    1004:	5c 91       	ld	r21, X
    1006:	13 97       	sbiw	r26, 0x03	; 3
    1008:	84 0f       	add	r24, r20
    100a:	95 1f       	adc	r25, r21
    100c:	93 83       	std	Z+3, r25	; 0x03
    100e:	82 83       	std	Z+2, r24	; 0x02
    1010:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	13 97       	sbiw	r26, 0x03	; 3
    101a:	ed 01       	movw	r28, r26
    101c:	c8 0f       	add	r28, r24
    101e:	d9 1f       	adc	r29, r25
    1020:	2c 17       	cp	r18, r28
    1022:	3d 07       	cpc	r19, r29
    1024:	d9 f4       	brne	.+54     	; 0x105c <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1026:	20 91 32 08 	lds	r18, 0x0832	; 0x800832 <pxEnd>
    102a:	30 91 33 08 	lds	r19, 0x0833	; 0x800833 <pxEnd+0x1>
    102e:	c2 17       	cp	r28, r18
    1030:	d3 07       	cpc	r29, r19
    1032:	81 f0       	breq	.+32     	; 0x1054 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1034:	2a 81       	ldd	r18, Y+2	; 0x02
    1036:	3b 81       	ldd	r19, Y+3	; 0x03
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	13 96       	adiw	r26, 0x03	; 3
    103e:	9c 93       	st	X, r25
    1040:	8e 93       	st	-X, r24
    1042:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1044:	c0 81       	ld	r28, Z
    1046:	d1 81       	ldd	r29, Z+1	; 0x01
    1048:	88 81       	ld	r24, Y
    104a:	99 81       	ldd	r25, Y+1	; 0x01
    104c:	11 96       	adiw	r26, 0x01	; 1
    104e:	9c 93       	st	X, r25
    1050:	8e 93       	st	-X, r24
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1054:	11 96       	adiw	r26, 0x01	; 1
    1056:	dc 93       	st	X, r29
    1058:	ce 93       	st	-X, r28
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    105c:	11 96       	adiw	r26, 0x01	; 1
    105e:	3c 93       	st	X, r19
    1060:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1062:	ae 17       	cp	r26, r30
    1064:	bf 07       	cpc	r27, r31
    1066:	11 f0       	breq	.+4      	; 0x106c <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1068:	b1 83       	std	Z+1, r27	; 0x01
    106a:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1084:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1088:	80 91 32 08 	lds	r24, 0x0832	; 0x800832 <pxEnd>
    108c:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <pxEnd+0x1>
    1090:	89 2b       	or	r24, r25
    1092:	41 f5       	brne	.+80     	; 0x10e4 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1094:	e4 e3       	ldi	r30, 0x34	; 52
    1096:	f8 e0       	ldi	r31, 0x08	; 8
    1098:	a8 e3       	ldi	r26, 0x38	; 56
    109a:	b8 e0       	ldi	r27, 0x08	; 8
    109c:	b1 83       	std	Z+1, r27	; 0x01
    109e:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    10a0:	13 82       	std	Z+3, r1	; 0x03
    10a2:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    10a4:	e4 ed       	ldi	r30, 0xD4	; 212
    10a6:	f7 e1       	ldi	r31, 0x17	; 23
    10a8:	f0 93 33 08 	sts	0x0833, r31	; 0x800833 <pxEnd+0x1>
    10ac:	e0 93 32 08 	sts	0x0832, r30	; 0x800832 <pxEnd>
	pxEnd->xBlockSize = 0;
    10b0:	13 82       	std	Z+3, r1	; 0x03
    10b2:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    10b4:	11 82       	std	Z+1, r1	; 0x01
    10b6:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    10b8:	8c e9       	ldi	r24, 0x9C	; 156
    10ba:	9f e0       	ldi	r25, 0x0F	; 15
    10bc:	13 96       	adiw	r26, 0x03	; 3
    10be:	9c 93       	st	X, r25
    10c0:	8e 93       	st	-X, r24
    10c2:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    10c4:	ed 93       	st	X+, r30
    10c6:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10c8:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xMinimumEverFreeBytesRemaining+0x1>
    10cc:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10d0:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <xFreeBytesRemaining+0x1>
    10d4:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e8       	ldi	r25, 0x80	; 128
    10dc:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <xBlockAllocatedBit+0x1>
    10e0:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10e4:	e0 90 2c 08 	lds	r14, 0x082C	; 0x80082c <xBlockAllocatedBit>
    10e8:	f0 90 2d 08 	lds	r15, 0x082D	; 0x80082d <xBlockAllocatedBit+0x1>
    10ec:	c7 01       	movw	r24, r14
    10ee:	8c 23       	and	r24, r28
    10f0:	9d 23       	and	r25, r29
    10f2:	89 2b       	or	r24, r25
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <pvPortMalloc+0x86>
    10f6:	66 c0       	rjmp	.+204    	; 0x11c4 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    10f8:	20 97       	sbiw	r28, 0x00	; 0
    10fa:	09 f4       	brne	.+2      	; 0x10fe <pvPortMalloc+0x8c>
    10fc:	66 c0       	rjmp	.+204    	; 0x11ca <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    10fe:	ae 01       	movw	r20, r28
    1100:	4c 5f       	subi	r20, 0xFC	; 252
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1104:	09 f4       	brne	.+2      	; 0x1108 <pvPortMalloc+0x96>
    1106:	5e c0       	rjmp	.+188    	; 0x11c4 <pvPortMalloc+0x152>
    1108:	00 91 30 08 	lds	r16, 0x0830	; 0x800830 <xFreeBytesRemaining>
    110c:	10 91 31 08 	lds	r17, 0x0831	; 0x800831 <xFreeBytesRemaining+0x1>
    1110:	04 17       	cp	r16, r20
    1112:	15 07       	cpc	r17, r21
    1114:	08 f4       	brcc	.+2      	; 0x1118 <pvPortMalloc+0xa6>
    1116:	56 c0       	rjmp	.+172    	; 0x11c4 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1118:	c0 91 34 08 	lds	r28, 0x0834	; 0x800834 <xStart>
    111c:	d0 91 35 08 	lds	r29, 0x0835	; 0x800835 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    1120:	e4 e3       	ldi	r30, 0x34	; 52
    1122:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1124:	02 c0       	rjmp	.+4      	; 0x112a <pvPortMalloc+0xb8>
    1126:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1128:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    112a:	2a 81       	ldd	r18, Y+2	; 0x02
    112c:	3b 81       	ldd	r19, Y+3	; 0x03
    112e:	24 17       	cp	r18, r20
    1130:	35 07       	cpc	r19, r21
    1132:	28 f4       	brcc	.+10     	; 0x113e <pvPortMalloc+0xcc>
    1134:	28 81       	ld	r18, Y
    1136:	39 81       	ldd	r19, Y+1	; 0x01
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	a1 f7       	brne	.-24     	; 0x1126 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    113e:	80 91 32 08 	lds	r24, 0x0832	; 0x800832 <pxEnd>
    1142:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <pxEnd+0x1>
    1146:	c8 17       	cp	r28, r24
    1148:	d9 07       	cpc	r29, r25
    114a:	e1 f1       	breq	.+120    	; 0x11c4 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    114c:	c0 80       	ld	r12, Z
    114e:	d1 80       	ldd	r13, Z+1	; 0x01
    1150:	84 e0       	ldi	r24, 0x04	; 4
    1152:	c8 0e       	add	r12, r24
    1154:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1156:	88 81       	ld	r24, Y
    1158:	99 81       	ldd	r25, Y+1	; 0x01
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    115e:	2a 81       	ldd	r18, Y+2	; 0x02
    1160:	3b 81       	ldd	r19, Y+3	; 0x03
    1162:	24 1b       	sub	r18, r20
    1164:	35 0b       	sbc	r19, r21
    1166:	29 30       	cpi	r18, 0x09	; 9
    1168:	31 05       	cpc	r19, r1
    116a:	48 f0       	brcs	.+18     	; 0x117e <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    116c:	ce 01       	movw	r24, r28
    116e:	84 0f       	add	r24, r20
    1170:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1172:	fc 01       	movw	r30, r24
    1174:	33 83       	std	Z+3, r19	; 0x03
    1176:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1178:	5b 83       	std	Y+3, r21	; 0x03
    117a:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    117c:	2d df       	rcall	.-422    	; 0xfd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	08 1b       	sub	r16, r24
    1184:	19 0b       	sbc	r17, r25
    1186:	10 93 31 08 	sts	0x0831, r17	; 0x800831 <xFreeBytesRemaining+0x1>
    118a:	00 93 30 08 	sts	0x0830, r16	; 0x800830 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    118e:	20 91 2e 08 	lds	r18, 0x082E	; 0x80082e <xMinimumEverFreeBytesRemaining>
    1192:	30 91 2f 08 	lds	r19, 0x082F	; 0x80082f <xMinimumEverFreeBytesRemaining+0x1>
    1196:	02 17       	cp	r16, r18
    1198:	13 07       	cpc	r17, r19
    119a:	20 f4       	brcc	.+8      	; 0x11a4 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    119c:	10 93 2f 08 	sts	0x082F, r17	; 0x80082f <xMinimumEverFreeBytesRemaining+0x1>
    11a0:	00 93 2e 08 	sts	0x082E, r16	; 0x80082e <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    11a4:	e8 2a       	or	r14, r24
    11a6:	f9 2a       	or	r15, r25
    11a8:	fb 82       	std	Y+3, r15	; 0x03
    11aa:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    11ac:	19 82       	std	Y+1, r1	; 0x01
    11ae:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    11b0:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    11b4:	c1 14       	cp	r12, r1
    11b6:	d1 04       	cpc	r13, r1
    11b8:	59 f4       	brne	.+22     	; 0x11d0 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    11ba:	0e 94 e6 19 	call	0x33cc	; 0x33cc <vApplicationMallocFailedHook>
    11be:	c1 2c       	mov	r12, r1
    11c0:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    11c4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
    11c8:	f8 cf       	rjmp	.-16     	; 0x11ba <pvPortMalloc+0x148>
    11ca:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
    11ce:	f5 cf       	rjmp	.-22     	; 0x11ba <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    11d0:	c6 01       	movw	r24, r12
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	08 95       	ret

000011e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	51 f1       	breq	.+84     	; 0x1240 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    11ec:	fc 01       	movw	r30, r24
    11ee:	34 97       	sbiw	r30, 0x04	; 4
    11f0:	22 81       	ldd	r18, Z+2	; 0x02
    11f2:	33 81       	ldd	r19, Z+3	; 0x03
    11f4:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <xBlockAllocatedBit>
    11f8:	50 91 2d 08 	lds	r21, 0x082D	; 0x80082d <xBlockAllocatedBit+0x1>
    11fc:	b9 01       	movw	r22, r18
    11fe:	64 23       	and	r22, r20
    1200:	75 23       	and	r23, r21
    1202:	67 2b       	or	r22, r23
    1204:	e9 f0       	breq	.+58     	; 0x1240 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1206:	60 81       	ld	r22, Z
    1208:	71 81       	ldd	r23, Z+1	; 0x01
    120a:	67 2b       	or	r22, r23
    120c:	c9 f4       	brne	.+50     	; 0x1240 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    120e:	ef 01       	movw	r28, r30
    1210:	40 95       	com	r20
    1212:	50 95       	com	r21
    1214:	24 23       	and	r18, r20
    1216:	35 23       	and	r19, r21
    1218:	33 83       	std	Z+3, r19	; 0x03
    121a:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    121c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1220:	20 91 30 08 	lds	r18, 0x0830	; 0x800830 <xFreeBytesRemaining>
    1224:	30 91 31 08 	lds	r19, 0x0831	; 0x800831 <xFreeBytesRemaining+0x1>
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	82 0f       	add	r24, r18
    122e:	93 1f       	adc	r25, r19
    1230:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <xFreeBytesRemaining+0x1>
    1234:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1238:	ce 01       	movw	r24, r28
    123a:	ce de       	rcall	.-612    	; 0xfd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    123c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1246:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1248:	03 96       	adiw	r24, 0x03	; 3
    124a:	92 83       	std	Z+2, r25	; 0x02
    124c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    124e:	4f ef       	ldi	r20, 0xFF	; 255
    1250:	5f ef       	ldi	r21, 0xFF	; 255
    1252:	ba 01       	movw	r22, r20
    1254:	43 83       	std	Z+3, r20	; 0x03
    1256:	54 83       	std	Z+4, r21	; 0x04
    1258:	65 83       	std	Z+5, r22	; 0x05
    125a:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    125c:	90 87       	std	Z+8, r25	; 0x08
    125e:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1260:	92 87       	std	Z+10, r25	; 0x0a
    1262:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1264:	10 82       	st	Z, r1
    1266:	08 95       	ret

00001268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1268:	fc 01       	movw	r30, r24
    126a:	13 86       	std	Z+11, r1	; 0x0b
    126c:	12 86       	std	Z+10, r1	; 0x0a
    126e:	08 95       	ret

00001270 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	9c 01       	movw	r18, r24
    1276:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1278:	dc 01       	movw	r26, r24
    127a:	11 96       	adiw	r26, 0x01	; 1
    127c:	cd 91       	ld	r28, X+
    127e:	dc 91       	ld	r29, X
    1280:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1282:	d5 83       	std	Z+5, r29	; 0x05
    1284:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1286:	8e 81       	ldd	r24, Y+6	; 0x06
    1288:	9f 81       	ldd	r25, Y+7	; 0x07
    128a:	97 83       	std	Z+7, r25	; 0x07
    128c:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	9f 81       	ldd	r25, Y+7	; 0x07
    1292:	dc 01       	movw	r26, r24
    1294:	15 96       	adiw	r26, 0x05	; 5
    1296:	7c 93       	st	X, r23
    1298:	6e 93       	st	-X, r22
    129a:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    129c:	7f 83       	std	Y+7, r23	; 0x07
    129e:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    12a0:	33 87       	std	Z+11, r19	; 0x0b
    12a2:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    12a4:	f9 01       	movw	r30, r18
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	80 83       	st	Z, r24
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    12bc:	08 81       	ld	r16, Y
    12be:	19 81       	ldd	r17, Y+1	; 0x01
    12c0:	2a 81       	ldd	r18, Y+2	; 0x02
    12c2:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    12c4:	0f 3f       	cpi	r16, 0xFF	; 255
    12c6:	4f ef       	ldi	r20, 0xFF	; 255
    12c8:	14 07       	cpc	r17, r20
    12ca:	24 07       	cpc	r18, r20
    12cc:	34 07       	cpc	r19, r20
    12ce:	21 f4       	brne	.+8      	; 0x12d8 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    12d0:	fc 01       	movw	r30, r24
    12d2:	a1 85       	ldd	r26, Z+9	; 0x09
    12d4:	b2 85       	ldd	r27, Z+10	; 0x0a
    12d6:	11 c0       	rjmp	.+34     	; 0x12fa <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    12d8:	dc 01       	movw	r26, r24
    12da:	13 96       	adiw	r26, 0x03	; 3
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <vListInsert+0x2e>
    12de:	df 01       	movw	r26, r30
    12e0:	14 96       	adiw	r26, 0x04	; 4
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	15 97       	sbiw	r26, 0x05	; 5
    12e8:	40 81       	ld	r20, Z
    12ea:	51 81       	ldd	r21, Z+1	; 0x01
    12ec:	62 81       	ldd	r22, Z+2	; 0x02
    12ee:	73 81       	ldd	r23, Z+3	; 0x03
    12f0:	04 17       	cp	r16, r20
    12f2:	15 07       	cpc	r17, r21
    12f4:	26 07       	cpc	r18, r22
    12f6:	37 07       	cpc	r19, r23
    12f8:	90 f7       	brcc	.-28     	; 0x12de <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    12fa:	14 96       	adiw	r26, 0x04	; 4
    12fc:	ed 91       	ld	r30, X+
    12fe:	fc 91       	ld	r31, X
    1300:	15 97       	sbiw	r26, 0x05	; 5
    1302:	fd 83       	std	Y+5, r31	; 0x05
    1304:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1306:	d7 83       	std	Z+7, r29	; 0x07
    1308:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    130a:	bf 83       	std	Y+7, r27	; 0x07
    130c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    130e:	15 96       	adiw	r26, 0x05	; 5
    1310:	dc 93       	st	X, r29
    1312:	ce 93       	st	-X, r28
    1314:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1316:	9b 87       	std	Y+11, r25	; 0x0b
    1318:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    131a:	fc 01       	movw	r30, r24
    131c:	20 81       	ld	r18, Z
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	20 83       	st	Z, r18
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1332:	a2 85       	ldd	r26, Z+10	; 0x0a
    1334:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1336:	c4 81       	ldd	r28, Z+4	; 0x04
    1338:	d5 81       	ldd	r29, Z+5	; 0x05
    133a:	86 81       	ldd	r24, Z+6	; 0x06
    133c:	97 81       	ldd	r25, Z+7	; 0x07
    133e:	9f 83       	std	Y+7, r25	; 0x07
    1340:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1342:	c6 81       	ldd	r28, Z+6	; 0x06
    1344:	d7 81       	ldd	r29, Z+7	; 0x07
    1346:	84 81       	ldd	r24, Z+4	; 0x04
    1348:	95 81       	ldd	r25, Z+5	; 0x05
    134a:	9d 83       	std	Y+5, r25	; 0x05
    134c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	8d 91       	ld	r24, X+
    1352:	9c 91       	ld	r25, X
    1354:	12 97       	sbiw	r26, 0x02	; 2
    1356:	e8 17       	cp	r30, r24
    1358:	f9 07       	cpc	r31, r25
    135a:	31 f4       	brne	.+12     	; 0x1368 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    135c:	86 81       	ldd	r24, Z+6	; 0x06
    135e:	97 81       	ldd	r25, Z+7	; 0x07
    1360:	12 96       	adiw	r26, 0x02	; 2
    1362:	9c 93       	st	X, r25
    1364:	8e 93       	st	-X, r24
    1366:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1368:	13 86       	std	Z+11, r1	; 0x0b
    136a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    136c:	8c 91       	ld	r24, X
    136e:	81 50       	subi	r24, 0x01	; 1
    1370:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1372:	8c 91       	ld	r24, X
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    137a:	31 e1       	ldi	r19, 0x11	; 17
    137c:	fc 01       	movw	r30, r24
    137e:	30 83       	st	Z, r19
    1380:	31 97       	sbiw	r30, 0x01	; 1
    1382:	22 e2       	ldi	r18, 0x22	; 34
    1384:	20 83       	st	Z, r18
    1386:	31 97       	sbiw	r30, 0x01	; 1
    1388:	a3 e3       	ldi	r26, 0x33	; 51
    138a:	a0 83       	st	Z, r26
    138c:	31 97       	sbiw	r30, 0x01	; 1
    138e:	60 83       	st	Z, r22
    1390:	31 97       	sbiw	r30, 0x01	; 1
    1392:	70 83       	st	Z, r23
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	10 82       	st	Z, r1
    1398:	31 97       	sbiw	r30, 0x01	; 1
    139a:	10 82       	st	Z, r1
    139c:	31 97       	sbiw	r30, 0x01	; 1
    139e:	60 e8       	ldi	r22, 0x80	; 128
    13a0:	60 83       	st	Z, r22
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	10 82       	st	Z, r1
    13a6:	31 97       	sbiw	r30, 0x01	; 1
    13a8:	10 82       	st	Z, r1
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	10 82       	st	Z, r1
    13ae:	31 97       	sbiw	r30, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	60 83       	st	Z, r22
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	63 e0       	ldi	r22, 0x03	; 3
    13b8:	60 83       	st	Z, r22
    13ba:	31 97       	sbiw	r30, 0x01	; 1
    13bc:	64 e0       	ldi	r22, 0x04	; 4
    13be:	60 83       	st	Z, r22
    13c0:	31 97       	sbiw	r30, 0x01	; 1
    13c2:	65 e0       	ldi	r22, 0x05	; 5
    13c4:	60 83       	st	Z, r22
    13c6:	31 97       	sbiw	r30, 0x01	; 1
    13c8:	66 e0       	ldi	r22, 0x06	; 6
    13ca:	60 83       	st	Z, r22
    13cc:	31 97       	sbiw	r30, 0x01	; 1
    13ce:	67 e0       	ldi	r22, 0x07	; 7
    13d0:	60 83       	st	Z, r22
    13d2:	31 97       	sbiw	r30, 0x01	; 1
    13d4:	68 e0       	ldi	r22, 0x08	; 8
    13d6:	60 83       	st	Z, r22
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	69 e0       	ldi	r22, 0x09	; 9
    13dc:	60 83       	st	Z, r22
    13de:	31 97       	sbiw	r30, 0x01	; 1
    13e0:	60 e1       	ldi	r22, 0x10	; 16
    13e2:	60 83       	st	Z, r22
    13e4:	31 97       	sbiw	r30, 0x01	; 1
    13e6:	30 83       	st	Z, r19
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	32 e1       	ldi	r19, 0x12	; 18
    13ec:	30 83       	st	Z, r19
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	33 e1       	ldi	r19, 0x13	; 19
    13f2:	30 83       	st	Z, r19
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	34 e1       	ldi	r19, 0x14	; 20
    13f8:	30 83       	st	Z, r19
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	35 e1       	ldi	r19, 0x15	; 21
    13fe:	30 83       	st	Z, r19
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	36 e1       	ldi	r19, 0x16	; 22
    1404:	30 83       	st	Z, r19
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	37 e1       	ldi	r19, 0x17	; 23
    140a:	30 83       	st	Z, r19
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	38 e1       	ldi	r19, 0x18	; 24
    1410:	30 83       	st	Z, r19
    1412:	31 97       	sbiw	r30, 0x01	; 1
    1414:	39 e1       	ldi	r19, 0x19	; 25
    1416:	30 83       	st	Z, r19
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	30 e2       	ldi	r19, 0x20	; 32
    141c:	30 83       	st	Z, r19
    141e:	31 97       	sbiw	r30, 0x01	; 1
    1420:	31 e2       	ldi	r19, 0x21	; 33
    1422:	30 83       	st	Z, r19
    1424:	31 97       	sbiw	r30, 0x01	; 1
    1426:	20 83       	st	Z, r18
    1428:	31 97       	sbiw	r30, 0x01	; 1
    142a:	23 e2       	ldi	r18, 0x23	; 35
    142c:	20 83       	st	Z, r18
    142e:	31 97       	sbiw	r30, 0x01	; 1
    1430:	40 83       	st	Z, r20
    1432:	31 97       	sbiw	r30, 0x01	; 1
    1434:	50 83       	st	Z, r21
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	26 e2       	ldi	r18, 0x26	; 38
    143a:	20 83       	st	Z, r18
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	27 e2       	ldi	r18, 0x27	; 39
    1440:	20 83       	st	Z, r18
    1442:	31 97       	sbiw	r30, 0x01	; 1
    1444:	28 e2       	ldi	r18, 0x28	; 40
    1446:	20 83       	st	Z, r18
    1448:	31 97       	sbiw	r30, 0x01	; 1
    144a:	29 e2       	ldi	r18, 0x29	; 41
    144c:	20 83       	st	Z, r18
    144e:	31 97       	sbiw	r30, 0x01	; 1
    1450:	20 e3       	ldi	r18, 0x30	; 48
    1452:	20 83       	st	Z, r18
    1454:	31 97       	sbiw	r30, 0x01	; 1
    1456:	21 e3       	ldi	r18, 0x31	; 49
    1458:	20 83       	st	Z, r18
    145a:	89 97       	sbiw	r24, 0x29	; 41
    145c:	08 95       	ret

0000145e <xPortStartScheduler>:
    145e:	a8 95       	wdr
    1460:	90 ec       	ldi	r25, 0xC0	; 192
    1462:	88 e1       	ldi	r24, 0x18	; 24
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	a8 95       	wdr
    146a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1474:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    1478:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    147c:	cd 91       	ld	r28, X+
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	dd 91       	ld	r29, X+
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	4f 90       	pop	r4
    14bc:	3f 90       	pop	r3
    14be:	2f 90       	pop	r2
    14c0:	1f 90       	pop	r1
    14c2:	0f 90       	pop	r0
    14c4:	0c be       	out	0x3c, r0	; 60
    14c6:	0f 90       	pop	r0
    14c8:	0b be       	out	0x3b, r0	; 59
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	08 95       	ret
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	08 95       	ret

000014d6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	0f 92       	push	r0
    14de:	0b b6       	in	r0, 0x3b	; 59
    14e0:	0f 92       	push	r0
    14e2:	0c b6       	in	r0, 0x3c	; 60
    14e4:	0f 92       	push	r0
    14e6:	1f 92       	push	r1
    14e8:	11 24       	eor	r1, r1
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ef 93       	push	r30
    1524:	ff 93       	push	r31
    1526:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    152a:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    152e:	0d b6       	in	r0, 0x3d	; 61
    1530:	0d 92       	st	X+, r0
    1532:	0e b6       	in	r0, 0x3e	; 62
    1534:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1536:	0e 94 75 14 	call	0x28ea	; 0x28ea <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    153a:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    153e:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    1542:	cd 91       	ld	r28, X+
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	dd 91       	ld	r29, X+
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	bf 91       	pop	r27
    1554:	af 91       	pop	r26
    1556:	9f 91       	pop	r25
    1558:	8f 91       	pop	r24
    155a:	7f 91       	pop	r23
    155c:	6f 91       	pop	r22
    155e:	5f 91       	pop	r21
    1560:	4f 91       	pop	r20
    1562:	3f 91       	pop	r19
    1564:	2f 91       	pop	r18
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	9f 90       	pop	r9
    1578:	8f 90       	pop	r8
    157a:	7f 90       	pop	r7
    157c:	6f 90       	pop	r6
    157e:	5f 90       	pop	r5
    1580:	4f 90       	pop	r4
    1582:	3f 90       	pop	r3
    1584:	2f 90       	pop	r2
    1586:	1f 90       	pop	r1
    1588:	0f 90       	pop	r0
    158a:	0c be       	out	0x3c, r0	; 60
    158c:	0f 90       	pop	r0
    158e:	0b be       	out	0x3b, r0	; 59
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1596:	08 95       	ret

00001598 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	0f 92       	push	r0
    15a0:	0b b6       	in	r0, 0x3b	; 59
    15a2:	0f 92       	push	r0
    15a4:	0c b6       	in	r0, 0x3c	; 60
    15a6:	0f 92       	push	r0
    15a8:	1f 92       	push	r1
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 92       	push	r2
    15ae:	3f 92       	push	r3
    15b0:	4f 92       	push	r4
    15b2:	5f 92       	push	r5
    15b4:	6f 92       	push	r6
    15b6:	7f 92       	push	r7
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	2f 93       	push	r18
    15ce:	3f 93       	push	r19
    15d0:	4f 93       	push	r20
    15d2:	5f 93       	push	r21
    15d4:	6f 93       	push	r22
    15d6:	7f 93       	push	r23
    15d8:	8f 93       	push	r24
    15da:	9f 93       	push	r25
    15dc:	af 93       	push	r26
    15de:	bf 93       	push	r27
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    15ec:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    15f0:	0d b6       	in	r0, 0x3d	; 61
    15f2:	0d 92       	st	X+, r0
    15f4:	0e b6       	in	r0, 0x3e	; 62
    15f6:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    15f8:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    15fa:	0e 94 0b 13 	call	0x2616	; 0x2616 <xTaskIncrementTick>
    15fe:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1600:	0e 94 75 14 	call	0x28ea	; 0x28ea <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1604:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    1608:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    160c:	cd 91       	ld	r28, X+
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	dd 91       	ld	r29, X+
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	ff 90       	pop	r15
    1636:	ef 90       	pop	r14
    1638:	df 90       	pop	r13
    163a:	cf 90       	pop	r12
    163c:	bf 90       	pop	r11
    163e:	af 90       	pop	r10
    1640:	9f 90       	pop	r9
    1642:	8f 90       	pop	r8
    1644:	7f 90       	pop	r7
    1646:	6f 90       	pop	r6
    1648:	5f 90       	pop	r5
    164a:	4f 90       	pop	r4
    164c:	3f 90       	pop	r3
    164e:	2f 90       	pop	r2
    1650:	1f 90       	pop	r1
    1652:	0f 90       	pop	r0
    1654:	0c be       	out	0x3c, r0	; 60
    1656:	0f 90       	pop	r0
    1658:	0b be       	out	0x3b, r0	; 59
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1660:	08 95       	ret

00001662 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1662:	9a df       	rcall	.-204    	; 0x1598 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1664:	18 95       	reti

00001666 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	0f 92       	push	r0
    166c:	fc 01       	movw	r30, r24
    166e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	91 11       	cpse	r25, r1
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	08 95       	ret

0000167c <prvCopyDataToQueue>:
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	ec 01       	movw	r28, r24
    1686:	04 2f       	mov	r16, r20
    1688:	1e 8d       	ldd	r17, Y+30	; 0x1e
    168a:	48 a1       	ldd	r20, Y+32	; 0x20
    168c:	41 11       	cpse	r20, r1
    168e:	0c c0       	rjmp	.+24     	; 0x16a8 <prvCopyDataToQueue+0x2c>
    1690:	88 81       	ld	r24, Y
    1692:	99 81       	ldd	r25, Y+1	; 0x01
    1694:	89 2b       	or	r24, r25
    1696:	09 f0       	breq	.+2      	; 0x169a <prvCopyDataToQueue+0x1e>
    1698:	42 c0       	rjmp	.+132    	; 0x171e <prvCopyDataToQueue+0xa2>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <xTaskPriorityDisinherit>
    16a2:	1d 82       	std	Y+5, r1	; 0x05
    16a4:	1c 82       	std	Y+4, r1	; 0x04
    16a6:	42 c0       	rjmp	.+132    	; 0x172c <prvCopyDataToQueue+0xb0>
    16a8:	01 11       	cpse	r16, r1
    16aa:	17 c0       	rjmp	.+46     	; 0x16da <prvCopyDataToQueue+0x5e>
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <memcpy>
    16b6:	28 a1       	ldd	r18, Y+32	; 0x20
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	82 0f       	add	r24, r18
    16be:	91 1d       	adc	r25, r1
    16c0:	9b 83       	std	Y+3, r25	; 0x03
    16c2:	8a 83       	std	Y+2, r24	; 0x02
    16c4:	2c 81       	ldd	r18, Y+4	; 0x04
    16c6:	3d 81       	ldd	r19, Y+5	; 0x05
    16c8:	82 17       	cp	r24, r18
    16ca:	93 07       	cpc	r25, r19
    16cc:	50 f1       	brcs	.+84     	; 0x1722 <prvCopyDataToQueue+0xa6>
    16ce:	88 81       	ld	r24, Y
    16d0:	99 81       	ldd	r25, Y+1	; 0x01
    16d2:	9b 83       	std	Y+3, r25	; 0x03
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	29 c0       	rjmp	.+82     	; 0x172c <prvCopyDataToQueue+0xb0>
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	8e 81       	ldd	r24, Y+6	; 0x06
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <memcpy>
    16e4:	88 a1       	ldd	r24, Y+32	; 0x20
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	91 95       	neg	r25
    16ea:	81 95       	neg	r24
    16ec:	91 09       	sbc	r25, r1
    16ee:	2e 81       	ldd	r18, Y+6	; 0x06
    16f0:	3f 81       	ldd	r19, Y+7	; 0x07
    16f2:	28 0f       	add	r18, r24
    16f4:	39 1f       	adc	r19, r25
    16f6:	3f 83       	std	Y+7, r19	; 0x07
    16f8:	2e 83       	std	Y+6, r18	; 0x06
    16fa:	48 81       	ld	r20, Y
    16fc:	59 81       	ldd	r21, Y+1	; 0x01
    16fe:	24 17       	cp	r18, r20
    1700:	35 07       	cpc	r19, r21
    1702:	30 f4       	brcc	.+12     	; 0x1710 <prvCopyDataToQueue+0x94>
    1704:	2c 81       	ldd	r18, Y+4	; 0x04
    1706:	3d 81       	ldd	r19, Y+5	; 0x05
    1708:	82 0f       	add	r24, r18
    170a:	93 1f       	adc	r25, r19
    170c:	9f 83       	std	Y+7, r25	; 0x07
    170e:	8e 83       	std	Y+6, r24	; 0x06
    1710:	02 30       	cpi	r16, 0x02	; 2
    1712:	49 f4       	brne	.+18     	; 0x1726 <prvCopyDataToQueue+0xaa>
    1714:	11 23       	and	r17, r17
    1716:	49 f0       	breq	.+18     	; 0x172a <prvCopyDataToQueue+0xae>
    1718:	11 50       	subi	r17, 0x01	; 1
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	07 c0       	rjmp	.+14     	; 0x172c <prvCopyDataToQueue+0xb0>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	05 c0       	rjmp	.+10     	; 0x172c <prvCopyDataToQueue+0xb0>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	03 c0       	rjmp	.+6      	; 0x172c <prvCopyDataToQueue+0xb0>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	01 c0       	rjmp	.+2      	; 0x172c <prvCopyDataToQueue+0xb0>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	1f 5f       	subi	r17, 0xFF	; 255
    172e:	1e 8f       	std	Y+30, r17	; 0x1e
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <prvCopyDataFromQueue>:
    173a:	fc 01       	movw	r30, r24
    173c:	40 a1       	ldd	r20, Z+32	; 0x20
    173e:	44 23       	and	r20, r20
    1740:	a9 f0       	breq	.+42     	; 0x176c <prvCopyDataFromQueue+0x32>
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	26 81       	ldd	r18, Z+6	; 0x06
    1746:	37 81       	ldd	r19, Z+7	; 0x07
    1748:	24 0f       	add	r18, r20
    174a:	35 1f       	adc	r19, r21
    174c:	37 83       	std	Z+7, r19	; 0x07
    174e:	26 83       	std	Z+6, r18	; 0x06
    1750:	84 81       	ldd	r24, Z+4	; 0x04
    1752:	95 81       	ldd	r25, Z+5	; 0x05
    1754:	28 17       	cp	r18, r24
    1756:	39 07       	cpc	r19, r25
    1758:	20 f0       	brcs	.+8      	; 0x1762 <prvCopyDataFromQueue+0x28>
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	97 83       	std	Z+7, r25	; 0x07
    1760:	86 83       	std	Z+6, r24	; 0x06
    1762:	cb 01       	movw	r24, r22
    1764:	66 81       	ldd	r22, Z+6	; 0x06
    1766:	77 81       	ldd	r23, Z+7	; 0x07
    1768:	0c 94 71 2a 	jmp	0x54e2	; 0x54e2 <memcpy>
    176c:	08 95       	ret

0000176e <prvUnlockQueue>:
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	8c 01       	movw	r16, r24
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	0f 92       	push	r0
    1780:	fc 01       	movw	r30, r24
    1782:	c2 a1       	ldd	r28, Z+34	; 0x22
    1784:	1c 16       	cp	r1, r28
    1786:	ac f4       	brge	.+42     	; 0x17b2 <prvUnlockQueue+0x44>
    1788:	83 89       	ldd	r24, Z+19	; 0x13
    178a:	81 11       	cpse	r24, r1
    178c:	06 c0       	rjmp	.+12     	; 0x179a <prvUnlockQueue+0x2c>
    178e:	11 c0       	rjmp	.+34     	; 0x17b2 <prvUnlockQueue+0x44>
    1790:	f8 01       	movw	r30, r16
    1792:	83 89       	ldd	r24, Z+19	; 0x13
    1794:	81 11       	cpse	r24, r1
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <prvUnlockQueue+0x34>
    1798:	0c c0       	rjmp	.+24     	; 0x17b2 <prvUnlockQueue+0x44>
    179a:	78 01       	movw	r14, r16
    179c:	f3 e1       	ldi	r31, 0x13	; 19
    179e:	ef 0e       	add	r14, r31
    17a0:	f1 1c       	adc	r15, r1
    17a2:	c7 01       	movw	r24, r14
    17a4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskRemoveFromEventList>
    17a8:	81 11       	cpse	r24, r1
    17aa:	0e 94 41 16 	call	0x2c82	; 0x2c82 <vTaskMissedYield>
    17ae:	c1 50       	subi	r28, 0x01	; 1
    17b0:	79 f7       	brne	.-34     	; 0x1790 <prvUnlockQueue+0x22>
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	f8 01       	movw	r30, r16
    17b6:	82 a3       	std	Z+34, r24	; 0x22
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	0f 92       	push	r0
    17c2:	c1 a1       	ldd	r28, Z+33	; 0x21
    17c4:	1c 16       	cp	r1, r28
    17c6:	ac f4       	brge	.+42     	; 0x17f2 <prvUnlockQueue+0x84>
    17c8:	80 85       	ldd	r24, Z+8	; 0x08
    17ca:	81 11       	cpse	r24, r1
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <prvUnlockQueue+0x6c>
    17ce:	11 c0       	rjmp	.+34     	; 0x17f2 <prvUnlockQueue+0x84>
    17d0:	f8 01       	movw	r30, r16
    17d2:	80 85       	ldd	r24, Z+8	; 0x08
    17d4:	81 11       	cpse	r24, r1
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <prvUnlockQueue+0x74>
    17d8:	0c c0       	rjmp	.+24     	; 0x17f2 <prvUnlockQueue+0x84>
    17da:	78 01       	movw	r14, r16
    17dc:	f8 e0       	ldi	r31, 0x08	; 8
    17de:	ef 0e       	add	r14, r31
    17e0:	f1 1c       	adc	r15, r1
    17e2:	c7 01       	movw	r24, r14
    17e4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskRemoveFromEventList>
    17e8:	81 11       	cpse	r24, r1
    17ea:	0e 94 41 16 	call	0x2c82	; 0x2c82 <vTaskMissedYield>
    17ee:	c1 50       	subi	r28, 0x01	; 1
    17f0:	79 f7       	brne	.-34     	; 0x17d0 <prvUnlockQueue+0x62>
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	f8 01       	movw	r30, r16
    17f6:	81 a3       	std	Z+33, r24	; 0x21
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	08 95       	ret

00001808 <xQueueGenericReset>:
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	ec 01       	movw	r28, r24
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	0f 92       	push	r0
    1814:	e8 81       	ld	r30, Y
    1816:	f9 81       	ldd	r31, Y+1	; 0x01
    1818:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181a:	28 a1       	ldd	r18, Y+32	; 0x20
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	82 9f       	mul	r24, r18
    1822:	a0 01       	movw	r20, r0
    1824:	83 9f       	mul	r24, r19
    1826:	50 0d       	add	r21, r0
    1828:	92 9f       	mul	r25, r18
    182a:	50 0d       	add	r21, r0
    182c:	11 24       	eor	r1, r1
    182e:	4e 0f       	add	r20, r30
    1830:	5f 1f       	adc	r21, r31
    1832:	5d 83       	std	Y+5, r21	; 0x05
    1834:	4c 83       	std	Y+4, r20	; 0x04
    1836:	1e 8e       	std	Y+30, r1	; 0x1e
    1838:	fb 83       	std	Y+3, r31	; 0x03
    183a:	ea 83       	std	Y+2, r30	; 0x02
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	82 9f       	mul	r24, r18
    1840:	a0 01       	movw	r20, r0
    1842:	83 9f       	mul	r24, r19
    1844:	50 0d       	add	r21, r0
    1846:	92 9f       	mul	r25, r18
    1848:	50 0d       	add	r21, r0
    184a:	11 24       	eor	r1, r1
    184c:	cf 01       	movw	r24, r30
    184e:	84 0f       	add	r24, r20
    1850:	95 1f       	adc	r25, r21
    1852:	9f 83       	std	Y+7, r25	; 0x07
    1854:	8e 83       	std	Y+6, r24	; 0x06
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	89 a3       	std	Y+33, r24	; 0x21
    185a:	8a a3       	std	Y+34, r24	; 0x22
    185c:	61 11       	cpse	r22, r1
    185e:	0b c0       	rjmp	.+22     	; 0x1876 <xQueueGenericReset+0x6e>
    1860:	88 85       	ldd	r24, Y+8	; 0x08
    1862:	88 23       	and	r24, r24
    1864:	71 f0       	breq	.+28     	; 0x1882 <xQueueGenericReset+0x7a>
    1866:	ce 01       	movw	r24, r28
    1868:	08 96       	adiw	r24, 0x08	; 8
    186a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskRemoveFromEventList>
    186e:	88 23       	and	r24, r24
    1870:	41 f0       	breq	.+16     	; 0x1882 <xQueueGenericReset+0x7a>
    1872:	31 de       	rcall	.-926    	; 0x14d6 <vPortYield>
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <xQueueGenericReset+0x7a>
    1876:	ce 01       	movw	r24, r28
    1878:	08 96       	adiw	r24, 0x08	; 8
    187a:	e5 dc       	rcall	.-1590   	; 0x1246 <vListInitialise>
    187c:	ce 01       	movw	r24, r28
    187e:	43 96       	adiw	r24, 0x13	; 19
    1880:	e2 dc       	rcall	.-1596   	; 0x1246 <vListInitialise>
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <xQueueGenericCreate>:
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	08 2f       	mov	r16, r24
    189a:	16 2f       	mov	r17, r22
    189c:	f4 2e       	mov	r15, r20
    189e:	66 23       	and	r22, r22
    18a0:	b9 f0       	breq	.+46     	; 0x18d0 <xQueueGenericCreate+0x42>
    18a2:	86 9f       	mul	r24, r22
    18a4:	c0 01       	movw	r24, r0
    18a6:	11 24       	eor	r1, r1
    18a8:	85 96       	adiw	r24, 0x25	; 37
    18aa:	e3 db       	rcall	.-2106   	; 0x1072 <pvPortMalloc>
    18ac:	ec 01       	movw	r28, r24
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	41 f4       	brne	.+16     	; 0x18c2 <xQueueGenericCreate+0x34>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <xQueueGenericCreate+0x4e>
    18b4:	0f 8f       	std	Y+31, r16	; 0x1f
    18b6:	18 a3       	std	Y+32, r17	; 0x20
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	ce 01       	movw	r24, r28
    18bc:	a5 df       	rcall	.-182    	; 0x1808 <xQueueGenericReset>
    18be:	fc a2       	std	Y+36, r15	; 0x24
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <xQueueGenericCreate+0x4e>
    18c2:	85 96       	adiw	r24, 0x25	; 37
    18c4:	99 83       	std	Y+1, r25	; 0x01
    18c6:	88 83       	st	Y, r24
    18c8:	f5 cf       	rjmp	.-22     	; 0x18b4 <xQueueGenericCreate+0x26>
    18ca:	d9 83       	std	Y+1, r29	; 0x01
    18cc:	c8 83       	st	Y, r28
    18ce:	f2 cf       	rjmp	.-28     	; 0x18b4 <xQueueGenericCreate+0x26>
    18d0:	85 e2       	ldi	r24, 0x25	; 37
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	ce db       	rcall	.-2148   	; 0x1072 <pvPortMalloc>
    18d6:	ec 01       	movw	r28, r24
    18d8:	89 2b       	or	r24, r25
    18da:	b9 f7       	brne	.-18     	; 0x18ca <xQueueGenericCreate+0x3c>
    18dc:	ce 01       	movw	r24, r28
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	08 95       	ret

000018ea <xQueueGenericSend>:
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	29 97       	sbiw	r28, 0x09	; 9
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	7c 01       	movw	r14, r24
    1912:	5b 01       	movw	r10, r22
    1914:	2e 83       	std	Y+6, r18	; 0x06
    1916:	3f 83       	std	Y+7, r19	; 0x07
    1918:	48 87       	std	Y+8, r20	; 0x08
    191a:	59 87       	std	Y+9, r21	; 0x09
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	99 24       	eor	r9, r9
    1920:	93 94       	inc	r9
    1922:	6c 01       	movw	r12, r24
    1924:	88 e0       	ldi	r24, 0x08	; 8
    1926:	c8 0e       	add	r12, r24
    1928:	d1 1c       	adc	r13, r1
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	0f 92       	push	r0
    1930:	f7 01       	movw	r30, r14
    1932:	96 8d       	ldd	r25, Z+30	; 0x1e
    1934:	87 8d       	ldd	r24, Z+31	; 0x1f
    1936:	98 17       	cp	r25, r24
    1938:	10 f0       	brcs	.+4      	; 0x193e <xQueueGenericSend+0x54>
    193a:	02 30       	cpi	r16, 0x02	; 2
    193c:	b1 f4       	brne	.+44     	; 0x196a <xQueueGenericSend+0x80>
    193e:	40 2f       	mov	r20, r16
    1940:	b5 01       	movw	r22, r10
    1942:	c7 01       	movw	r24, r14
    1944:	9b de       	rcall	.-714    	; 0x167c <prvCopyDataToQueue>
    1946:	f7 01       	movw	r30, r14
    1948:	93 89       	ldd	r25, Z+19	; 0x13
    194a:	99 23       	and	r25, r25
    194c:	41 f0       	breq	.+16     	; 0x195e <xQueueGenericSend+0x74>
    194e:	c7 01       	movw	r24, r14
    1950:	43 96       	adiw	r24, 0x13	; 19
    1952:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskRemoveFromEventList>
    1956:	88 23       	and	r24, r24
    1958:	21 f0       	breq	.+8      	; 0x1962 <xQueueGenericSend+0x78>
    195a:	bd dd       	rcall	.-1158   	; 0x14d6 <vPortYield>
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <xQueueGenericSend+0x78>
    195e:	81 11       	cpse	r24, r1
    1960:	ba dd       	rcall	.-1164   	; 0x14d6 <vPortYield>
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	4e c0       	rjmp	.+156    	; 0x1a06 <xQueueGenericSend+0x11c>
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	a8 85       	ldd	r26, Y+8	; 0x08
    1970:	b9 85       	ldd	r27, Y+9	; 0x09
    1972:	89 2b       	or	r24, r25
    1974:	8a 2b       	or	r24, r26
    1976:	8b 2b       	or	r24, r27
    1978:	21 f4       	brne	.+8      	; 0x1982 <xQueueGenericSend+0x98>
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	42 c0       	rjmp	.+132    	; 0x1a06 <xQueueGenericSend+0x11c>
    1982:	11 11       	cpse	r17, r1
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <xQueueGenericSend+0xa6>
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskInternalSetTimeOutState>
    198e:	19 2d       	mov	r17, r9
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	2c d6       	rcall	.+3160   	; 0x25ee <vTaskSuspendAll>
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	0f 92       	push	r0
    199c:	f7 01       	movw	r30, r14
    199e:	81 a1       	ldd	r24, Z+33	; 0x21
    19a0:	8f 3f       	cpi	r24, 0xFF	; 255
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <xQueueGenericSend+0xbc>
    19a4:	11 a2       	std	Z+33, r1	; 0x21
    19a6:	f7 01       	movw	r30, r14
    19a8:	82 a1       	ldd	r24, Z+34	; 0x22
    19aa:	8f 3f       	cpi	r24, 0xFF	; 255
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <xQueueGenericSend+0xc6>
    19ae:	12 a2       	std	Z+34, r1	; 0x22
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	be 01       	movw	r22, r28
    19b6:	6a 5f       	subi	r22, 0xFA	; 250
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <xTaskCheckForTimeOut>
    19c2:	81 11       	cpse	r24, r1
    19c4:	1c c0       	rjmp	.+56     	; 0x19fe <xQueueGenericSend+0x114>
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	0f 92       	push	r0
    19cc:	f7 01       	movw	r30, r14
    19ce:	96 8d       	ldd	r25, Z+30	; 0x1e
    19d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	98 13       	cpse	r25, r24
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <xQueueGenericSend+0x10c>
    19da:	4e 81       	ldd	r20, Y+6	; 0x06
    19dc:	5f 81       	ldd	r21, Y+7	; 0x07
    19de:	68 85       	ldd	r22, Y+8	; 0x08
    19e0:	79 85       	ldd	r23, Y+9	; 0x09
    19e2:	c6 01       	movw	r24, r12
    19e4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskPlaceOnEventList>
    19e8:	c7 01       	movw	r24, r14
    19ea:	c1 de       	rcall	.-638    	; 0x176e <prvUnlockQueue>
    19ec:	e9 d6       	rcall	.+3538   	; 0x27c0 <xTaskResumeAll>
    19ee:	81 11       	cpse	r24, r1
    19f0:	9c cf       	rjmp	.-200    	; 0x192a <xQueueGenericSend+0x40>
    19f2:	71 dd       	rcall	.-1310   	; 0x14d6 <vPortYield>
    19f4:	9a cf       	rjmp	.-204    	; 0x192a <xQueueGenericSend+0x40>
    19f6:	c7 01       	movw	r24, r14
    19f8:	ba de       	rcall	.-652    	; 0x176e <prvUnlockQueue>
    19fa:	e2 d6       	rcall	.+3524   	; 0x27c0 <xTaskResumeAll>
    19fc:	96 cf       	rjmp	.-212    	; 0x192a <xQueueGenericSend+0x40>
    19fe:	c7 01       	movw	r24, r14
    1a00:	b6 de       	rcall	.-660    	; 0x176e <prvUnlockQueue>
    1a02:	de d6       	rcall	.+3516   	; 0x27c0 <xTaskResumeAll>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	29 96       	adiw	r28, 0x09	; 9
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	bf 90       	pop	r11
    1a24:	af 90       	pop	r10
    1a26:	9f 90       	pop	r9
    1a28:	08 95       	ret

00001a2a <xQueueCreateMutex>:
    1a2a:	0f 93       	push	r16
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	48 2f       	mov	r20, r24
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	2b df       	rcall	.-426    	; 0x188e <xQueueGenericCreate>
    1a38:	ec 01       	movw	r28, r24
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	61 f0       	breq	.+24     	; 0x1a56 <xQueueCreateMutex+0x2c>
    1a3e:	1d 82       	std	Y+5, r1	; 0x05
    1a40:	1c 82       	std	Y+4, r1	; 0x04
    1a42:	19 82       	std	Y+1, r1	; 0x01
    1a44:	18 82       	st	Y, r1
    1a46:	1e 82       	std	Y+6, r1	; 0x06
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	a9 01       	movw	r20, r18
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	4a df       	rcall	.-364    	; 0x18ea <xQueueGenericSend>
    1a56:	ce 01       	movw	r24, r28
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <xQueueGenericSendFromISR>:
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	8a 01       	movw	r16, r20
    1a6e:	fc 01       	movw	r30, r24
    1a70:	56 8d       	ldd	r21, Z+30	; 0x1e
    1a72:	37 8d       	ldd	r19, Z+31	; 0x1f
    1a74:	53 17       	cp	r21, r19
    1a76:	10 f0       	brcs	.+4      	; 0x1a7c <xQueueGenericSendFromISR+0x1c>
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	e9 f4       	brne	.+58     	; 0x1ab6 <xQueueGenericSendFromISR+0x56>
    1a7c:	42 2f       	mov	r20, r18
    1a7e:	78 01       	movw	r14, r16
    1a80:	ec 01       	movw	r28, r24
    1a82:	1a a1       	ldd	r17, Y+34	; 0x22
    1a84:	fb dd       	rcall	.-1034   	; 0x167c <prvCopyDataToQueue>
    1a86:	1f 3f       	cpi	r17, 0xFF	; 255
    1a88:	81 f4       	brne	.+32     	; 0x1aaa <xQueueGenericSendFromISR+0x4a>
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	88 23       	and	r24, r24
    1a8e:	a9 f0       	breq	.+42     	; 0x1aba <xQueueGenericSendFromISR+0x5a>
    1a90:	ce 01       	movw	r24, r28
    1a92:	43 96       	adiw	r24, 0x13	; 19
    1a94:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskRemoveFromEventList>
    1a98:	88 23       	and	r24, r24
    1a9a:	89 f0       	breq	.+34     	; 0x1abe <xQueueGenericSendFromISR+0x5e>
    1a9c:	e1 14       	cp	r14, r1
    1a9e:	f1 04       	cpc	r15, r1
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <xQueueGenericSendFromISR+0x62>
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	80 83       	st	Z, r24
    1aa8:	0d c0       	rjmp	.+26     	; 0x1ac4 <xQueueGenericSendFromISR+0x64>
    1aaa:	ff 24       	eor	r15, r15
    1aac:	f3 94       	inc	r15
    1aae:	f1 0e       	add	r15, r17
    1ab0:	fa a2       	std	Y+34, r15	; 0x22
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	07 c0       	rjmp	.+14     	; 0x1ac4 <xQueueGenericSendFromISR+0x64>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <xQueueGenericSendFromISR+0x64>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <xQueueGenericSendFromISR+0x64>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <xQueueGenericSendFromISR+0x64>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	08 95       	ret

00001ad2 <xQueueReceive>:
    1ad2:	9f 92       	push	r9
    1ad4:	af 92       	push	r10
    1ad6:	bf 92       	push	r11
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	29 97       	sbiw	r28, 0x09	; 9
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	8c 01       	movw	r16, r24
    1afa:	5b 01       	movw	r10, r22
    1afc:	2e 83       	std	Y+6, r18	; 0x06
    1afe:	3f 83       	std	Y+7, r19	; 0x07
    1b00:	48 87       	std	Y+8, r20	; 0x08
    1b02:	59 87       	std	Y+9, r21	; 0x09
    1b04:	e1 2c       	mov	r14, r1
    1b06:	99 24       	eor	r9, r9
    1b08:	93 94       	inc	r9
    1b0a:	6c 01       	movw	r12, r24
    1b0c:	83 e1       	ldi	r24, 0x13	; 19
    1b0e:	c8 0e       	add	r12, r24
    1b10:	d1 1c       	adc	r13, r1
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	0f 92       	push	r0
    1b18:	f8 01       	movw	r30, r16
    1b1a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1b1c:	ff 20       	and	r15, r15
    1b1e:	91 f0       	breq	.+36     	; 0x1b44 <xQueueReceive+0x72>
    1b20:	b5 01       	movw	r22, r10
    1b22:	c8 01       	movw	r24, r16
    1b24:	0a de       	rcall	.-1004   	; 0x173a <prvCopyDataFromQueue>
    1b26:	fa 94       	dec	r15
    1b28:	f8 01       	movw	r30, r16
    1b2a:	f6 8e       	std	Z+30, r15	; 0x1e
    1b2c:	80 85       	ldd	r24, Z+8	; 0x08
    1b2e:	88 23       	and	r24, r24
    1b30:	29 f0       	breq	.+10     	; 0x1b3c <xQueueReceive+0x6a>
    1b32:	c8 01       	movw	r24, r16
    1b34:	08 96       	adiw	r24, 0x08	; 8
    1b36:	b3 d7       	rcall	.+3942   	; 0x2a9e <xTaskRemoveFromEventList>
    1b38:	81 11       	cpse	r24, r1
    1b3a:	cd dc       	rcall	.-1638   	; 0x14d6 <vPortYield>
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	4c c0       	rjmp	.+152    	; 0x1bdc <xQueueReceive+0x10a>
    1b44:	8e 81       	ldd	r24, Y+6	; 0x06
    1b46:	9f 81       	ldd	r25, Y+7	; 0x07
    1b48:	a8 85       	ldd	r26, Y+8	; 0x08
    1b4a:	b9 85       	ldd	r27, Y+9	; 0x09
    1b4c:	89 2b       	or	r24, r25
    1b4e:	8a 2b       	or	r24, r26
    1b50:	8b 2b       	or	r24, r27
    1b52:	21 f4       	brne	.+8      	; 0x1b5c <xQueueReceive+0x8a>
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	40 c0       	rjmp	.+128    	; 0x1bdc <xQueueReceive+0x10a>
    1b5c:	e1 10       	cpse	r14, r1
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <xQueueReceive+0x98>
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskInternalSetTimeOutState>
    1b68:	e9 2c       	mov	r14, r9
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	3f d5       	rcall	.+2686   	; 0x25ee <vTaskSuspendAll>
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	0f 92       	push	r0
    1b76:	f8 01       	movw	r30, r16
    1b78:	81 a1       	ldd	r24, Z+33	; 0x21
    1b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <xQueueReceive+0xae>
    1b7e:	11 a2       	std	Z+33, r1	; 0x21
    1b80:	f8 01       	movw	r30, r16
    1b82:	82 a1       	ldd	r24, Z+34	; 0x22
    1b84:	8f 3f       	cpi	r24, 0xFF	; 255
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <xQueueReceive+0xb8>
    1b88:	12 a2       	std	Z+34, r1	; 0x22
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	be 01       	movw	r22, r28
    1b90:	6a 5f       	subi	r22, 0xFA	; 250
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <xTaskCheckForTimeOut>
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	15 c0       	rjmp	.+42     	; 0x1bca <xQueueReceive+0xf8>
    1ba0:	c8 01       	movw	r24, r16
    1ba2:	61 dd       	rcall	.-1342   	; 0x1666 <prvIsQueueEmpty>
    1ba4:	88 23       	and	r24, r24
    1ba6:	69 f0       	breq	.+26     	; 0x1bc2 <xQueueReceive+0xf0>
    1ba8:	4e 81       	ldd	r20, Y+6	; 0x06
    1baa:	5f 81       	ldd	r21, Y+7	; 0x07
    1bac:	68 85       	ldd	r22, Y+8	; 0x08
    1bae:	79 85       	ldd	r23, Y+9	; 0x09
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	1a d7       	rcall	.+3636   	; 0x29e8 <vTaskPlaceOnEventList>
    1bb4:	c8 01       	movw	r24, r16
    1bb6:	db dd       	rcall	.-1098   	; 0x176e <prvUnlockQueue>
    1bb8:	03 d6       	rcall	.+3078   	; 0x27c0 <xTaskResumeAll>
    1bba:	81 11       	cpse	r24, r1
    1bbc:	aa cf       	rjmp	.-172    	; 0x1b12 <xQueueReceive+0x40>
    1bbe:	8b dc       	rcall	.-1770   	; 0x14d6 <vPortYield>
    1bc0:	a8 cf       	rjmp	.-176    	; 0x1b12 <xQueueReceive+0x40>
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	d4 dd       	rcall	.-1112   	; 0x176e <prvUnlockQueue>
    1bc6:	fc d5       	rcall	.+3064   	; 0x27c0 <xTaskResumeAll>
    1bc8:	a4 cf       	rjmp	.-184    	; 0x1b12 <xQueueReceive+0x40>
    1bca:	c8 01       	movw	r24, r16
    1bcc:	d0 dd       	rcall	.-1120   	; 0x176e <prvUnlockQueue>
    1bce:	f8 d5       	rcall	.+3056   	; 0x27c0 <xTaskResumeAll>
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	49 dd       	rcall	.-1390   	; 0x1666 <prvIsQueueEmpty>
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <xQueueReceive+0x108>
    1bd8:	9c cf       	rjmp	.-200    	; 0x1b12 <xQueueReceive+0x40>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	29 96       	adiw	r28, 0x09	; 9
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	08 95       	ret

00001c00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	0f 92       	push	r0
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <vQueueWaitForMessageRestricted+0x14>
    1c12:	19 a2       	std	Y+33, r1	; 0x21
    1c14:	8a a1       	ldd	r24, Y+34	; 0x22
    1c16:	8f 3f       	cpi	r24, 0xFF	; 255
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <vQueueWaitForMessageRestricted+0x1c>
    1c1a:	1a a2       	std	Y+34, r1	; 0x22
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c22:	81 11       	cpse	r24, r1
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1c26:	ce 01       	movw	r24, r28
    1c28:	43 96       	adiw	r24, 0x13	; 19
    1c2a:	19 d7       	rcall	.+3634   	; 0x2a5e <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	9f dd       	rcall	.-1218   	; 0x176e <prvUnlockQueue>
    }
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1c36:	fc 01       	movw	r30, r24
    1c38:	44 81       	ldd	r20, Z+4	; 0x04
    1c3a:	55 81       	ldd	r21, Z+5	; 0x05
    1c3c:	22 81       	ldd	r18, Z+2	; 0x02
    1c3e:	33 81       	ldd	r19, Z+3	; 0x03
    1c40:	24 0f       	add	r18, r20
    1c42:	35 1f       	adc	r19, r21
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	b9 01       	movw	r22, r18
    1c4a:	68 1b       	sub	r22, r24
    1c4c:	79 0b       	sbc	r23, r25
    1c4e:	cb 01       	movw	r24, r22
    1c50:	64 17       	cp	r22, r20
    1c52:	75 07       	cpc	r23, r21
    1c54:	10 f0       	brcs	.+4      	; 0x1c5a <prvBytesInBuffer+0x24>
    1c56:	84 1b       	sub	r24, r20
    1c58:	95 0b       	sbc	r25, r21
    1c5a:	08 95       	ret

00001c5c <prvWriteBytesToBuffer>:
    1c5c:	af 92       	push	r10
    1c5e:	bf 92       	push	r11
    1c60:	cf 92       	push	r12
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	6c 01       	movw	r12, r24
    1c72:	5b 01       	movw	r10, r22
    1c74:	7a 01       	movw	r14, r20
    1c76:	fc 01       	movw	r30, r24
    1c78:	c2 81       	ldd	r28, Z+2	; 0x02
    1c7a:	d3 81       	ldd	r29, Z+3	; 0x03
    1c7c:	04 81       	ldd	r16, Z+4	; 0x04
    1c7e:	15 81       	ldd	r17, Z+5	; 0x05
    1c80:	0c 1b       	sub	r16, r28
    1c82:	1d 0b       	sbc	r17, r29
    1c84:	40 17       	cp	r20, r16
    1c86:	51 07       	cpc	r21, r17
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <prvWriteBytesToBuffer+0x30>
    1c8a:	8a 01       	movw	r16, r20
    1c8c:	f6 01       	movw	r30, r12
    1c8e:	84 85       	ldd	r24, Z+12	; 0x0c
    1c90:	95 85       	ldd	r25, Z+13	; 0x0d
    1c92:	a8 01       	movw	r20, r16
    1c94:	b5 01       	movw	r22, r10
    1c96:	8c 0f       	add	r24, r28
    1c98:	9d 1f       	adc	r25, r29
    1c9a:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <memcpy>
    1c9e:	0e 15       	cp	r16, r14
    1ca0:	1f 05       	cpc	r17, r15
    1ca2:	58 f4       	brcc	.+22     	; 0x1cba <prvWriteBytesToBuffer+0x5e>
    1ca4:	a7 01       	movw	r20, r14
    1ca6:	40 1b       	sub	r20, r16
    1ca8:	51 0b       	sbc	r21, r17
    1caa:	b5 01       	movw	r22, r10
    1cac:	60 0f       	add	r22, r16
    1cae:	71 1f       	adc	r23, r17
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	84 85       	ldd	r24, Z+12	; 0x0c
    1cb4:	95 85       	ldd	r25, Z+13	; 0x0d
    1cb6:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <memcpy>
    1cba:	ce 01       	movw	r24, r28
    1cbc:	8e 0d       	add	r24, r14
    1cbe:	9f 1d       	adc	r25, r15
    1cc0:	f6 01       	movw	r30, r12
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	82 17       	cp	r24, r18
    1cc8:	93 07       	cpc	r25, r19
    1cca:	10 f0       	brcs	.+4      	; 0x1cd0 <prvWriteBytesToBuffer+0x74>
    1ccc:	82 1b       	sub	r24, r18
    1cce:	93 0b       	sbc	r25, r19
    1cd0:	f6 01       	movw	r30, r12
    1cd2:	93 83       	std	Z+3, r25	; 0x03
    1cd4:	82 83       	std	Z+2, r24	; 0x02
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	bf 90       	pop	r11
    1cea:	af 90       	pop	r10
    1cec:	08 95       	ret

00001cee <prvWriteMessageToBuffer>:
    1cee:	cf 92       	push	r12
    1cf0:	df 92       	push	r13
    1cf2:	ef 92       	push	r14
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	1f 92       	push	r1
    1d00:	1f 92       	push	r1
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	5a 83       	std	Y+2, r21	; 0x02
    1d08:	49 83       	std	Y+1, r20	; 0x01
    1d0a:	21 15       	cp	r18, r1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	c9 f0       	breq	.+50     	; 0x1d42 <prvWriteMessageToBuffer+0x54>
    1d10:	6b 01       	movw	r12, r22
    1d12:	7c 01       	movw	r14, r24
    1d14:	fc 01       	movw	r30, r24
    1d16:	86 85       	ldd	r24, Z+14	; 0x0e
    1d18:	80 fd       	sbrc	r24, 0
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <prvWriteMessageToBuffer+0x3e>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	24 17       	cp	r18, r20
    1d20:	35 07       	cpc	r19, r21
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <prvWriteMessageToBuffer+0x38>
    1d24:	c9 01       	movw	r24, r18
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <prvWriteMessageToBuffer+0x60>
    1d2c:	20 17       	cp	r18, r16
    1d2e:	31 07       	cpc	r19, r17
    1d30:	58 f0       	brcs	.+22     	; 0x1d48 <prvWriteMessageToBuffer+0x5a>
    1d32:	42 e0       	ldi	r20, 0x02	; 2
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	be 01       	movw	r22, r28
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	8e df       	rcall	.-228    	; 0x1c5c <prvWriteBytesToBuffer>
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <prvWriteMessageToBuffer+0x60>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	08 c0       	rjmp	.+16     	; 0x1d58 <prvWriteMessageToBuffer+0x6a>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <prvWriteMessageToBuffer+0x6a>
    1d4e:	49 81       	ldd	r20, Y+1	; 0x01
    1d50:	5a 81       	ldd	r21, Y+2	; 0x02
    1d52:	b6 01       	movw	r22, r12
    1d54:	c7 01       	movw	r24, r14
    1d56:	82 df       	rcall	.-252    	; 0x1c5c <prvWriteBytesToBuffer>
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	08 95       	ret

00001d6e <prvReadBytesFromBuffer>:
    1d6e:	af 92       	push	r10
    1d70:	bf 92       	push	r11
    1d72:	cf 92       	push	r12
    1d74:	df 92       	push	r13
    1d76:	ef 92       	push	r14
    1d78:	ff 92       	push	r15
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	7c 01       	movw	r14, r24
    1d84:	5b 01       	movw	r10, r22
    1d86:	e9 01       	movw	r28, r18
    1d88:	42 17       	cp	r20, r18
    1d8a:	53 07       	cpc	r21, r19
    1d8c:	08 f4       	brcc	.+2      	; 0x1d90 <prvReadBytesFromBuffer+0x22>
    1d8e:	ea 01       	movw	r28, r20
    1d90:	20 97       	sbiw	r28, 0x00	; 0
    1d92:	79 f1       	breq	.+94     	; 0x1df2 <prvReadBytesFromBuffer+0x84>
    1d94:	f7 01       	movw	r30, r14
    1d96:	00 81       	ld	r16, Z
    1d98:	11 81       	ldd	r17, Z+1	; 0x01
    1d9a:	c4 80       	ldd	r12, Z+4	; 0x04
    1d9c:	d5 80       	ldd	r13, Z+5	; 0x05
    1d9e:	c0 1a       	sub	r12, r16
    1da0:	d1 0a       	sbc	r13, r17
    1da2:	cc 15       	cp	r28, r12
    1da4:	dd 05       	cpc	r29, r13
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <prvReadBytesFromBuffer+0x3c>
    1da8:	6e 01       	movw	r12, r28
    1daa:	f7 01       	movw	r30, r14
    1dac:	64 85       	ldd	r22, Z+12	; 0x0c
    1dae:	75 85       	ldd	r23, Z+13	; 0x0d
    1db0:	60 0f       	add	r22, r16
    1db2:	71 1f       	adc	r23, r17
    1db4:	a6 01       	movw	r20, r12
    1db6:	c5 01       	movw	r24, r10
    1db8:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <memcpy>
    1dbc:	cc 16       	cp	r12, r28
    1dbe:	dd 06       	cpc	r13, r29
    1dc0:	58 f4       	brcc	.+22     	; 0x1dd8 <prvReadBytesFromBuffer+0x6a>
    1dc2:	ae 01       	movw	r20, r28
    1dc4:	4c 19       	sub	r20, r12
    1dc6:	5d 09       	sbc	r21, r13
    1dc8:	f7 01       	movw	r30, r14
    1dca:	64 85       	ldd	r22, Z+12	; 0x0c
    1dcc:	75 85       	ldd	r23, Z+13	; 0x0d
    1dce:	c5 01       	movw	r24, r10
    1dd0:	8c 0d       	add	r24, r12
    1dd2:	9d 1d       	adc	r25, r13
    1dd4:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <memcpy>
    1dd8:	0c 0f       	add	r16, r28
    1dda:	1d 1f       	adc	r17, r29
    1ddc:	f7 01       	movw	r30, r14
    1dde:	84 81       	ldd	r24, Z+4	; 0x04
    1de0:	95 81       	ldd	r25, Z+5	; 0x05
    1de2:	08 17       	cp	r16, r24
    1de4:	19 07       	cpc	r17, r25
    1de6:	10 f0       	brcs	.+4      	; 0x1dec <prvReadBytesFromBuffer+0x7e>
    1de8:	08 1b       	sub	r16, r24
    1dea:	19 0b       	sbc	r17, r25
    1dec:	f7 01       	movw	r30, r14
    1dee:	11 83       	std	Z+1, r17	; 0x01
    1df0:	00 83       	st	Z, r16
    1df2:	ce 01       	movw	r24, r28
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	df 90       	pop	r13
    1e02:	cf 90       	pop	r12
    1e04:	bf 90       	pop	r11
    1e06:	af 90       	pop	r10
    1e08:	08 95       	ret

00001e0a <xStreamBufferGenericCreate>:
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	eb 01       	movw	r28, r22
    1e16:	11 e0       	ldi	r17, 0x01	; 1
    1e18:	41 30       	cpi	r20, 0x01	; 1
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <xStreamBufferGenericCreate+0x14>
    1e1c:	10 e0       	ldi	r17, 0x00	; 0
    1e1e:	20 97       	sbiw	r28, 0x00	; 0
    1e20:	11 f4       	brne	.+4      	; 0x1e26 <xStreamBufferGenericCreate+0x1c>
    1e22:	c1 e0       	ldi	r28, 0x01	; 1
    1e24:	d0 e0       	ldi	r29, 0x00	; 0
    1e26:	7c 01       	movw	r14, r24
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	e2 1a       	sub	r14, r18
    1e2c:	f2 0a       	sbc	r15, r18
    1e2e:	41 96       	adiw	r24, 0x11	; 17
    1e30:	20 d9       	rcall	.-3520   	; 0x1072 <pvPortMalloc>
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	81 f0       	breq	.+32     	; 0x1e56 <xStreamBufferGenericCreate+0x4c>
    1e36:	20 e1       	ldi	r18, 0x10	; 16
    1e38:	fc 01       	movw	r30, r24
    1e3a:	11 92       	st	Z+, r1
    1e3c:	2a 95       	dec	r18
    1e3e:	e9 f7       	brne	.-6      	; 0x1e3a <xStreamBufferGenericCreate+0x30>
    1e40:	9c 01       	movw	r18, r24
    1e42:	20 5f       	subi	r18, 0xF0	; 240
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	fc 01       	movw	r30, r24
    1e48:	35 87       	std	Z+13, r19	; 0x0d
    1e4a:	24 87       	std	Z+12, r18	; 0x0c
    1e4c:	f5 82       	std	Z+5, r15	; 0x05
    1e4e:	e4 82       	std	Z+4, r14	; 0x04
    1e50:	d7 83       	std	Z+7, r29	; 0x07
    1e52:	c6 83       	std	Z+6, r28	; 0x06
    1e54:	16 87       	std	Z+14, r17	; 0x0e
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <xStreamBufferReset>:
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	fc 01       	movw	r30, r24
    1e68:	27 85       	ldd	r18, Z+15	; 0x0f
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	0f 92       	push	r0
    1e70:	80 85       	ldd	r24, Z+8	; 0x08
    1e72:	91 85       	ldd	r25, Z+9	; 0x09
    1e74:	89 2b       	or	r24, r25
    1e76:	d1 f4       	brne	.+52     	; 0x1eac <xStreamBufferReset+0x4a>
    1e78:	82 85       	ldd	r24, Z+10	; 0x0a
    1e7a:	93 85       	ldd	r25, Z+11	; 0x0b
    1e7c:	89 2b       	or	r24, r25
    1e7e:	c1 f4       	brne	.+48     	; 0x1eb0 <xStreamBufferReset+0x4e>
    1e80:	86 85       	ldd	r24, Z+14	; 0x0e
    1e82:	46 81       	ldd	r20, Z+6	; 0x06
    1e84:	57 81       	ldd	r21, Z+7	; 0x07
    1e86:	64 81       	ldd	r22, Z+4	; 0x04
    1e88:	75 81       	ldd	r23, Z+5	; 0x05
    1e8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e8c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e8e:	90 e1       	ldi	r25, 0x10	; 16
    1e90:	ef 01       	movw	r28, r30
    1e92:	19 92       	st	Y+, r1
    1e94:	9a 95       	dec	r25
    1e96:	e9 f7       	brne	.-6      	; 0x1e92 <xStreamBufferReset+0x30>
    1e98:	b5 87       	std	Z+13, r27	; 0x0d
    1e9a:	a4 87       	std	Z+12, r26	; 0x0c
    1e9c:	75 83       	std	Z+5, r23	; 0x05
    1e9e:	64 83       	std	Z+4, r22	; 0x04
    1ea0:	57 83       	std	Z+7, r21	; 0x07
    1ea2:	46 83       	std	Z+6, r20	; 0x06
    1ea4:	86 87       	std	Z+14, r24	; 0x0e
    1ea6:	27 87       	std	Z+15, r18	; 0x0f
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <xStreamBufferReset+0x50>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <xStreamBufferReset+0x50>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <xStreamBufferSpacesAvailable>:
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	24 81       	ldd	r18, Z+4	; 0x04
    1ec0:	35 81       	ldd	r19, Z+5	; 0x05
    1ec2:	80 81       	ld	r24, Z
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
    1ec6:	42 81       	ldd	r20, Z+2	; 0x02
    1ec8:	53 81       	ldd	r21, Z+3	; 0x03
    1eca:	82 0f       	add	r24, r18
    1ecc:	93 1f       	adc	r25, r19
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	84 1b       	sub	r24, r20
    1ed2:	95 0b       	sbc	r25, r21
    1ed4:	82 17       	cp	r24, r18
    1ed6:	93 07       	cpc	r25, r19
    1ed8:	10 f0       	brcs	.+4      	; 0x1ede <xStreamBufferSpacesAvailable+0x22>
    1eda:	82 1b       	sub	r24, r18
    1edc:	93 0b       	sbc	r25, r19
    1ede:	08 95       	ret

00001ee0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1ee0:	2f 92       	push	r2
    1ee2:	3f 92       	push	r3
    1ee4:	4f 92       	push	r4
    1ee6:	5f 92       	push	r5
    1ee8:	6f 92       	push	r6
    1eea:	7f 92       	push	r7
    1eec:	8f 92       	push	r8
    1eee:	9f 92       	push	r9
    1ef0:	af 92       	push	r10
    1ef2:	bf 92       	push	r11
    1ef4:	cf 92       	push	r12
    1ef6:	df 92       	push	r13
    1ef8:	ef 92       	push	r14
    1efa:	ff 92       	push	r15
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	29 97       	sbiw	r28, 0x09	; 9
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	5c 01       	movw	r10, r24
    1f16:	1b 01       	movw	r2, r22
    1f18:	2a 01       	movw	r4, r20
    1f1a:	0e 83       	std	Y+6, r16	; 0x06
    1f1c:	1f 83       	std	Y+7, r17	; 0x07
    1f1e:	28 87       	std	Y+8, r18	; 0x08
    1f20:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f22:	fc 01       	movw	r30, r24
    1f24:	86 85       	ldd	r24, Z+14	; 0x0e
    1f26:	80 ff       	sbrs	r24, 0
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1f2a:	3a 01       	movw	r6, r20
    1f2c:	f2 e0       	ldi	r31, 0x02	; 2
    1f2e:	6f 0e       	add	r6, r31
    1f30:	71 1c       	adc	r7, r1
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1f34:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1f36:	8e 81       	ldd	r24, Y+6	; 0x06
    1f38:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3a:	a8 85       	ldd	r26, Y+8	; 0x08
    1f3c:	b9 85       	ldd	r27, Y+9	; 0x09
    1f3e:	89 2b       	or	r24, r25
    1f40:	8a 2b       	or	r24, r26
    1f42:	8b 2b       	or	r24, r27
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <xStreamBufferSend+0x68>
    1f46:	34 c0       	rjmp	.+104    	; 0x1fb0 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1f48:	ce 01       	movw	r24, r28
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	1e d6       	rcall	.+3132   	; 0x2b8a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f54:	c5 01       	movw	r24, r10
    1f56:	b2 df       	rcall	.-156    	; 0x1ebc <xStreamBufferSpacesAvailable>
    1f58:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1f5a:	86 15       	cp	r24, r6
    1f5c:	97 05       	cpc	r25, r7
    1f5e:	18 f5       	brcc	.+70     	; 0x1fa6 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 4b 18 	call	0x3096	; 0x3096 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1f68:	90 d6       	rcall	.+3360   	; 0x2c8a <xTaskGetCurrentTaskHandle>
    1f6a:	f5 01       	movw	r30, r10
    1f6c:	93 87       	std	Z+11, r25	; 0x0b
    1f6e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1f74:	ce 80       	ldd	r12, Y+6	; 0x06
    1f76:	df 80       	ldd	r13, Y+7	; 0x07
    1f78:	e8 84       	ldd	r14, Y+8	; 0x08
    1f7a:	f9 84       	ldd	r15, Y+9	; 0x09
    1f7c:	00 e0       	ldi	r16, 0x00	; 0
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	a9 01       	movw	r20, r18
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f9 d6       	rcall	.+3570   	; 0x2d80 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1f8e:	f5 01       	movw	r30, r10
    1f90:	13 86       	std	Z+11, r1	; 0x0b
    1f92:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1f94:	be 01       	movw	r22, r28
    1f96:	6a 5f       	subi	r22, 0xFA	; 250
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	1c d6       	rcall	.+3128   	; 0x2bd8 <xTaskCheckForTimeOut>
    1fa0:	88 23       	and	r24, r24
    1fa2:	a9 f2       	breq	.-86     	; 0x1f4e <xStreamBufferSend+0x6e>
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1fa6:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	81 14       	cp	r8, r1
    1fac:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1fae:	19 f4       	brne	.+6      	; 0x1fb6 <xStreamBufferSend+0xd6>
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	84 df       	rcall	.-248    	; 0x1ebc <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1fb4:	4c 01       	movw	r8, r24
    1fb6:	83 01       	movw	r16, r6
    1fb8:	94 01       	movw	r18, r8
    1fba:	a2 01       	movw	r20, r4
    1fbc:	b1 01       	movw	r22, r2
    1fbe:	c5 01       	movw	r24, r10
    1fc0:	96 de       	rcall	.-724    	; 0x1cee <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1fc2:	7c 01       	movw	r14, r24
    1fc4:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1fc6:	d9 f0       	breq	.+54     	; 0x1ffe <xStreamBufferSend+0x11e>
    1fc8:	c5 01       	movw	r24, r10
    1fca:	35 de       	rcall	.-918    	; 0x1c36 <prvBytesInBuffer>
    1fcc:	f5 01       	movw	r30, r10
    1fce:	26 81       	ldd	r18, Z+6	; 0x06
    1fd0:	37 81       	ldd	r19, Z+7	; 0x07
    1fd2:	82 17       	cp	r24, r18
    1fd4:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1fd6:	98 f0       	brcs	.+38     	; 0x1ffe <xStreamBufferSend+0x11e>
    1fd8:	0a d3       	rcall	.+1556   	; 0x25ee <vTaskSuspendAll>
    1fda:	f5 01       	movw	r30, r10
    1fdc:	80 85       	ldd	r24, Z+8	; 0x08
    1fde:	91 85       	ldd	r25, Z+9	; 0x09
    1fe0:	89 2b       	or	r24, r25
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <xStreamBufferSend+0x11c>
    1fe4:	80 85       	ldd	r24, Z+8	; 0x08
    1fe6:	91 85       	ldd	r25, Z+9	; 0x09
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	ba 01       	movw	r22, r20
    1ff4:	4f d7       	rcall	.+3742   	; 0x2e94 <xTaskGenericNotify>
    1ff6:	f5 01       	movw	r30, r10
    1ff8:	11 86       	std	Z+9, r1	; 0x09
    1ffa:	10 86       	std	Z+8, r1	; 0x08
    1ffc:	e1 d3       	rcall	.+1986   	; 0x27c0 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1ffe:	c7 01       	movw	r24, r14
    2000:	29 96       	adiw	r28, 0x09	; 9
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	bf 90       	pop	r11
    201e:	af 90       	pop	r10
    2020:	9f 90       	pop	r9
    2022:	8f 90       	pop	r8
    2024:	7f 90       	pop	r7
    2026:	6f 90       	pop	r6
    2028:	5f 90       	pop	r5
    202a:	4f 90       	pop	r4
    202c:	3f 90       	pop	r3
    202e:	2f 90       	pop	r2
    2030:	08 95       	ret

00002032 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	ec 01       	movw	r28, r24
    2048:	5b 01       	movw	r10, r22
    204a:	6a 01       	movw	r12, r20
    204c:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    204e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2050:	80 ff       	sbrs	r24, 0
    2052:	04 c0       	rjmp	.+8      	; 0x205c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2054:	8a 01       	movw	r16, r20
    2056:	0e 5f       	subi	r16, 0xFE	; 254
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	01 c0       	rjmp	.+2      	; 0x205e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    205c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    205e:	ce 01       	movw	r24, r28
    2060:	2d df       	rcall	.-422    	; 0x1ebc <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2062:	9c 01       	movw	r18, r24
    2064:	a6 01       	movw	r20, r12
    2066:	b5 01       	movw	r22, r10
    2068:	ce 01       	movw	r24, r28
    206a:	41 de       	rcall	.-894    	; 0x1cee <prvWriteMessageToBuffer>
    206c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    206e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2070:	b1 f0       	breq	.+44     	; 0x209e <xStreamBufferSendFromISR+0x6c>
    2072:	ce 01       	movw	r24, r28
    2074:	e0 dd       	rcall	.-1088   	; 0x1c36 <prvBytesInBuffer>
    2076:	2e 81       	ldd	r18, Y+6	; 0x06
    2078:	3f 81       	ldd	r19, Y+7	; 0x07
    207a:	82 17       	cp	r24, r18
    207c:	93 07       	cpc	r25, r19
    207e:	78 f0       	brcs	.+30     	; 0x209e <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2080:	88 85       	ldd	r24, Y+8	; 0x08
    2082:	99 85       	ldd	r25, Y+9	; 0x09
    2084:	89 2b       	or	r24, r25
    2086:	59 f0       	breq	.+22     	; 0x209e <xStreamBufferSendFromISR+0x6c>
    2088:	88 85       	ldd	r24, Y+8	; 0x08
    208a:	99 85       	ldd	r25, Y+9	; 0x09
    208c:	00 e0       	ldi	r16, 0x00	; 0
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	ba 01       	movw	r22, r20
    2098:	75 d7       	rcall	.+3818   	; 0x2f84 <xTaskGenericNotifyFromISR>
    209a:	19 86       	std	Y+9, r1	; 0x09
    209c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    209e:	c6 01       	movw	r24, r12
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	bf 90       	pop	r11
    20b2:	af 90       	pop	r10
    20b4:	08 95       	ret

000020b6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    20b6:	4f 92       	push	r4
    20b8:	5f 92       	push	r5
    20ba:	6f 92       	push	r6
    20bc:	7f 92       	push	r7
    20be:	8f 92       	push	r8
    20c0:	9f 92       	push	r9
    20c2:	af 92       	push	r10
    20c4:	bf 92       	push	r11
    20c6:	cf 92       	push	r12
    20c8:	df 92       	push	r13
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	1f 92       	push	r1
    20d8:	1f 92       	push	r1
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	5c 01       	movw	r10, r24
    20e0:	2b 01       	movw	r4, r22
    20e2:	3a 01       	movw	r6, r20
    20e4:	68 01       	movw	r12, r16
    20e6:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    20e8:	fc 01       	movw	r30, r24
    20ea:	86 85       	ldd	r24, Z+14	; 0x0e
    20ec:	80 fd       	sbrc	r24, 0
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    20f0:	81 2c       	mov	r8, r1
    20f2:	91 2c       	mov	r9, r1
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    20f6:	68 94       	set
    20f8:	88 24       	eor	r8, r8
    20fa:	81 f8       	bld	r8, 1
    20fc:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    20fe:	c1 14       	cp	r12, r1
    2100:	d1 04       	cpc	r13, r1
    2102:	e1 04       	cpc	r14, r1
    2104:	f1 04       	cpc	r15, r1
    2106:	29 f1       	breq	.+74     	; 0x2152 <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    210e:	c5 01       	movw	r24, r10
    2110:	92 dd       	rcall	.-1244   	; 0x1c36 <prvBytesInBuffer>
    2112:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2114:	88 16       	cp	r8, r24
    2116:	99 06       	cpc	r9, r25
    2118:	38 f0       	brcs	.+14     	; 0x2128 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    211e:	bb d7       	rcall	.+3958   	; 0x3096 <xTaskNotifyStateClear>
    2120:	b4 d5       	rcall	.+2920   	; 0x2c8a <xTaskGetCurrentTaskHandle>
    2122:	f5 01       	movw	r30, r10
    2124:	91 87       	std	Z+9, r25	; 0x09
    2126:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2128:	0f 90       	pop	r0
    212a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    212c:	80 16       	cp	r8, r16
    212e:	91 06       	cpc	r9, r17
    2130:	b0 f0       	brcs	.+44     	; 0x215e <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2132:	00 e0       	ldi	r16, 0x00	; 0
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	a9 01       	movw	r20, r18
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	cb 01       	movw	r24, r22
    2142:	1e d6       	rcall	.+3132   	; 0x2d80 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2144:	f5 01       	movw	r30, r10
    2146:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2148:	10 86       	std	Z+8, r1	; 0x08
    214a:	c5 01       	movw	r24, r10
    214c:	74 dd       	rcall	.-1304   	; 0x1c36 <prvBytesInBuffer>
    214e:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <xStreamBufferReceive+0xa2>
    2152:	c5 01       	movw	r24, r10
    2154:	70 dd       	rcall	.-1312   	; 0x1c36 <prvBytesInBuffer>
    2156:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2158:	80 16       	cp	r8, r16
    215a:	91 06       	cpc	r9, r17
    215c:	b8 f5       	brcc	.+110    	; 0x21cc <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    215e:	81 14       	cp	r8, r1
    2160:	91 04       	cpc	r9, r1
    2162:	c1 f0       	breq	.+48     	; 0x2194 <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2164:	f5 01       	movw	r30, r10
    2166:	e0 80       	ld	r14, Z
    2168:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    216a:	98 01       	movw	r18, r16
    216c:	a4 01       	movw	r20, r8
    216e:	be 01       	movw	r22, r28
    2170:	6f 5f       	subi	r22, 0xFF	; 255
    2172:	7f 4f       	sbci	r23, 0xFF	; 255
    2174:	c5 01       	movw	r24, r10
    2176:	fb dd       	rcall	.-1034   	; 0x1d6e <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    217c:	08 19       	sub	r16, r8
    217e:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2180:	68 16       	cp	r6, r24
    2182:	79 06       	cpc	r7, r25
    2184:	30 f4       	brcc	.+12     	; 0x2192 <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2186:	f5 01       	movw	r30, r10
    2188:	f1 82       	std	Z+1, r15	; 0x01
    218a:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    218c:	61 2c       	mov	r6, r1
    218e:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2192:	3c 01       	movw	r6, r24
    2194:	98 01       	movw	r18, r16
    2196:	a3 01       	movw	r20, r6
    2198:	b2 01       	movw	r22, r4
    219a:	c5 01       	movw	r24, r10
    219c:	e8 dd       	rcall	.-1072   	; 0x1d6e <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    219e:	7c 01       	movw	r14, r24
    21a0:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    21a2:	b1 f0       	breq	.+44     	; 0x21d0 <xStreamBufferReceive+0x11a>
    21a4:	24 d2       	rcall	.+1096   	; 0x25ee <vTaskSuspendAll>
    21a6:	f5 01       	movw	r30, r10
    21a8:	82 85       	ldd	r24, Z+10	; 0x0a
    21aa:	93 85       	ldd	r25, Z+11	; 0x0b
    21ac:	89 2b       	or	r24, r25
    21ae:	61 f0       	breq	.+24     	; 0x21c8 <xStreamBufferReceive+0x112>
    21b0:	82 85       	ldd	r24, Z+10	; 0x0a
    21b2:	93 85       	ldd	r25, Z+11	; 0x0b
    21b4:	00 e0       	ldi	r16, 0x00	; 0
    21b6:	10 e0       	ldi	r17, 0x00	; 0
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	ba 01       	movw	r22, r20
    21c0:	69 d6       	rcall	.+3282   	; 0x2e94 <xTaskGenericNotify>
    21c2:	f5 01       	movw	r30, r10
    21c4:	13 86       	std	Z+11, r1	; 0x0b
    21c6:	12 86       	std	Z+10, r1	; 0x0a
    21c8:	fb d2       	rcall	.+1526   	; 0x27c0 <xTaskResumeAll>
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    21cc:	e1 2c       	mov	r14, r1
    21ce:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    21d0:	c7 01       	movw	r24, r14
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	bf 90       	pop	r11
    21e8:	af 90       	pop	r10
    21ea:	9f 90       	pop	r9
    21ec:	8f 90       	pop	r8
    21ee:	7f 90       	pop	r7
    21f0:	6f 90       	pop	r6
    21f2:	5f 90       	pop	r5
    21f4:	4f 90       	pop	r4
    21f6:	08 95       	ret

000021f8 <prvResetNextTaskUnblockTime>:
    21f8:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxDelayedTaskList>
    21fc:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxDelayedTaskList+0x1>
    2200:	80 81       	ld	r24, Z
    2202:	81 11       	cpse	r24, r1
    2204:	0c c0       	rjmp	.+24     	; 0x221e <__stack+0x1f>
    2206:	8f ef       	ldi	r24, 0xFF	; 255
    2208:	9f ef       	ldi	r25, 0xFF	; 255
    220a:	dc 01       	movw	r26, r24
    220c:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xNextTaskUnblockTime>
    2210:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xNextTaskUnblockTime+0x1>
    2214:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xNextTaskUnblockTime+0x2>
    2218:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xNextTaskUnblockTime+0x3>
    221c:	08 95       	ret
    221e:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxDelayedTaskList>
    2222:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxDelayedTaskList+0x1>
    2226:	07 80       	ldd	r0, Z+7	; 0x07
    2228:	f0 85       	ldd	r31, Z+8	; 0x08
    222a:	e0 2d       	mov	r30, r0
    222c:	00 84       	ldd	r0, Z+8	; 0x08
    222e:	f1 85       	ldd	r31, Z+9	; 0x09
    2230:	e0 2d       	mov	r30, r0
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	a4 81       	ldd	r26, Z+4	; 0x04
    2238:	b5 81       	ldd	r27, Z+5	; 0x05
    223a:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xNextTaskUnblockTime>
    223e:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xNextTaskUnblockTime+0x1>
    2242:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xNextTaskUnblockTime+0x2>
    2246:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xNextTaskUnblockTime+0x3>
    224a:	08 95       	ret

0000224c <prvAddCurrentTaskToDelayedList>:
    224c:	8f 92       	push	r8
    224e:	9f 92       	push	r9
    2250:	af 92       	push	r10
    2252:	bf 92       	push	r11
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	cf 93       	push	r28
    225e:	6b 01       	movw	r12, r22
    2260:	7c 01       	movw	r14, r24
    2262:	c4 2f       	mov	r28, r20
    2264:	80 90 e5 17 	lds	r8, 0x17E5	; 0x8017e5 <xTickCount>
    2268:	90 90 e6 17 	lds	r9, 0x17E6	; 0x8017e6 <xTickCount+0x1>
    226c:	a0 90 e7 17 	lds	r10, 0x17E7	; 0x8017e7 <xTickCount+0x2>
    2270:	b0 90 e8 17 	lds	r11, 0x17E8	; 0x8017e8 <xTickCount+0x3>
    2274:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <pxCurrentTCB>
    2278:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    227c:	02 96       	adiw	r24, 0x02	; 2
    227e:	56 d8       	rcall	.-3924   	; 0x132c <uxListRemove>
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	c8 16       	cp	r12, r24
    2284:	d8 06       	cpc	r13, r24
    2286:	e8 06       	cpc	r14, r24
    2288:	f8 06       	cpc	r15, r24
    228a:	69 f4       	brne	.+26     	; 0x22a6 <prvAddCurrentTaskToDelayedList+0x5a>
    228c:	cc 23       	and	r28, r28
    228e:	59 f0       	breq	.+22     	; 0x22a6 <prvAddCurrentTaskToDelayedList+0x5a>
    2290:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    2294:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2298:	6e 5f       	subi	r22, 0xFE	; 254
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	8a ee       	ldi	r24, 0xEA	; 234
    229e:	97 e1       	ldi	r25, 0x17	; 23
    22a0:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <prvAddCurrentTaskToDelayedList+0xd8>
    22a6:	c8 0c       	add	r12, r8
    22a8:	d9 1c       	adc	r13, r9
    22aa:	ea 1c       	adc	r14, r10
    22ac:	fb 1c       	adc	r15, r11
    22ae:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    22b2:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    22b6:	c2 82       	std	Z+2, r12	; 0x02
    22b8:	d3 82       	std	Z+3, r13	; 0x03
    22ba:	e4 82       	std	Z+4, r14	; 0x04
    22bc:	f5 82       	std	Z+5, r15	; 0x05
    22be:	c8 14       	cp	r12, r8
    22c0:	d9 04       	cpc	r13, r9
    22c2:	ea 04       	cpc	r14, r10
    22c4:	fb 04       	cpc	r15, r11
    22c6:	68 f4       	brcc	.+26     	; 0x22e2 <prvAddCurrentTaskToDelayedList+0x96>
    22c8:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    22cc:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    22d0:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <pxOverflowDelayedTaskList>
    22d4:	90 91 0d 18 	lds	r25, 0x180D	; 0x80180d <pxOverflowDelayedTaskList+0x1>
    22d8:	6e 5f       	subi	r22, 0xFE	; 254
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vListInsert>
    22e0:	21 c0       	rjmp	.+66     	; 0x2324 <prvAddCurrentTaskToDelayedList+0xd8>
    22e2:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    22e6:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    22ea:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxDelayedTaskList>
    22ee:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxDelayedTaskList+0x1>
    22f2:	6e 5f       	subi	r22, 0xFE	; 254
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vListInsert>
    22fa:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xNextTaskUnblockTime>
    22fe:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xNextTaskUnblockTime+0x1>
    2302:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xNextTaskUnblockTime+0x2>
    2306:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xNextTaskUnblockTime+0x3>
    230a:	c8 16       	cp	r12, r24
    230c:	d9 06       	cpc	r13, r25
    230e:	ea 06       	cpc	r14, r26
    2310:	fb 06       	cpc	r15, r27
    2312:	40 f4       	brcc	.+16     	; 0x2324 <prvAddCurrentTaskToDelayedList+0xd8>
    2314:	c0 92 db 17 	sts	0x17DB, r12	; 0x8017db <xNextTaskUnblockTime>
    2318:	d0 92 dc 17 	sts	0x17DC, r13	; 0x8017dc <xNextTaskUnblockTime+0x1>
    231c:	e0 92 dd 17 	sts	0x17DD, r14	; 0x8017dd <xNextTaskUnblockTime+0x2>
    2320:	f0 92 de 17 	sts	0x17DE, r15	; 0x8017de <xNextTaskUnblockTime+0x3>
    2324:	cf 91       	pop	r28
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	08 95       	ret

00002338 <xTaskCreate>:
    2338:	4f 92       	push	r4
    233a:	5f 92       	push	r5
    233c:	6f 92       	push	r6
    233e:	7f 92       	push	r7
    2340:	8f 92       	push	r8
    2342:	9f 92       	push	r9
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	4c 01       	movw	r8, r24
    2358:	6b 01       	movw	r12, r22
    235a:	5a 01       	movw	r10, r20
    235c:	29 01       	movw	r4, r18
    235e:	ca 01       	movw	r24, r20
    2360:	0e 94 39 08 	call	0x1072	; 0x1072 <pvPortMalloc>
    2364:	3c 01       	movw	r6, r24
    2366:	89 2b       	or	r24, r25
    2368:	09 f4       	brne	.+2      	; 0x236c <xTaskCreate+0x34>
    236a:	f4 c0       	rjmp	.+488    	; 0x2554 <xTaskCreate+0x21c>
    236c:	80 e3       	ldi	r24, 0x30	; 48
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 39 08 	call	0x1072	; 0x1072 <pvPortMalloc>
    2374:	ec 01       	movw	r28, r24
    2376:	89 2b       	or	r24, r25
    2378:	99 f0       	breq	.+38     	; 0x23a0 <xTaskCreate+0x68>
    237a:	7c 8e       	std	Y+28, r7	; 0x1c
    237c:	6b 8e       	std	Y+27, r6	; 0x1b
    237e:	a5 01       	movw	r20, r10
    2380:	65 ea       	ldi	r22, 0xA5	; 165
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	c3 01       	movw	r24, r6
    2386:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <memset>
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	a2 1a       	sub	r10, r18
    238e:	b1 08       	sbc	r11, r1
    2390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2394:	a8 0e       	add	r10, r24
    2396:	b9 1e       	adc	r11, r25
    2398:	c1 14       	cp	r12, r1
    239a:	d1 04       	cpc	r13, r1
    239c:	29 f4       	brne	.+10     	; 0x23a8 <xTaskCreate+0x70>
    239e:	20 c0       	rjmp	.+64     	; 0x23e0 <xTaskCreate+0xa8>
    23a0:	c3 01       	movw	r24, r6
    23a2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <vPortFree>
    23a6:	d6 c0       	rjmp	.+428    	; 0x2554 <xTaskCreate+0x21c>
    23a8:	d6 01       	movw	r26, r12
    23aa:	8c 91       	ld	r24, X
    23ac:	8d 8f       	std	Y+29, r24	; 0x1d
    23ae:	8c 91       	ld	r24, X
    23b0:	88 23       	and	r24, r24
    23b2:	a1 f0       	breq	.+40     	; 0x23dc <xTaskCreate+0xa4>
    23b4:	ae 01       	movw	r20, r28
    23b6:	42 5e       	subi	r20, 0xE2	; 226
    23b8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ba:	f6 01       	movw	r30, r12
    23bc:	31 96       	adiw	r30, 0x01	; 1
    23be:	b8 e0       	ldi	r27, 0x08	; 8
    23c0:	cb 0e       	add	r12, r27
    23c2:	d1 1c       	adc	r13, r1
    23c4:	cf 01       	movw	r24, r30
    23c6:	21 91       	ld	r18, Z+
    23c8:	da 01       	movw	r26, r20
    23ca:	2d 93       	st	X+, r18
    23cc:	ad 01       	movw	r20, r26
    23ce:	dc 01       	movw	r26, r24
    23d0:	8c 91       	ld	r24, X
    23d2:	88 23       	and	r24, r24
    23d4:	19 f0       	breq	.+6      	; 0x23dc <xTaskCreate+0xa4>
    23d6:	ec 15       	cp	r30, r12
    23d8:	fd 05       	cpc	r31, r13
    23da:	a1 f7       	brne	.-24     	; 0x23c4 <xTaskCreate+0x8c>
    23dc:	1c a2       	std	Y+36, r1	; 0x24
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <xTaskCreate+0xaa>
    23e0:	1d 8e       	std	Y+29, r1	; 0x1d
    23e2:	04 30       	cpi	r16, 0x04	; 4
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <xTaskCreate+0xb0>
    23e6:	03 e0       	ldi	r16, 0x03	; 3
    23e8:	0a 8f       	std	Y+26, r16	; 0x1a
    23ea:	0f a3       	std	Y+39, r16	; 0x27
    23ec:	18 a6       	std	Y+40, r1	; 0x28
    23ee:	6e 01       	movw	r12, r28
    23f0:	b2 e0       	ldi	r27, 0x02	; 2
    23f2:	cb 0e       	add	r12, r27
    23f4:	d1 1c       	adc	r13, r1
    23f6:	c6 01       	movw	r24, r12
    23f8:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialiseItem>
    23fc:	ce 01       	movw	r24, r28
    23fe:	0e 96       	adiw	r24, 0x0e	; 14
    2400:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialiseItem>
    2404:	db 87       	std	Y+11, r29	; 0x0b
    2406:	ca 87       	std	Y+10, r28	; 0x0a
    2408:	84 e0       	ldi	r24, 0x04	; 4
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	80 1b       	sub	r24, r16
    2412:	91 09       	sbc	r25, r1
    2414:	a1 09       	sbc	r26, r1
    2416:	b1 09       	sbc	r27, r1
    2418:	8e 87       	std	Y+14, r24	; 0x0e
    241a:	9f 87       	std	Y+15, r25	; 0x0f
    241c:	a8 8b       	std	Y+16, r26	; 0x10
    241e:	b9 8b       	std	Y+17, r27	; 0x11
    2420:	df 8b       	std	Y+23, r29	; 0x17
    2422:	ce 8b       	std	Y+22, r28	; 0x16
    2424:	1a a6       	std	Y+42, r1	; 0x2a
    2426:	19 a6       	std	Y+41, r1	; 0x29
    2428:	1b a6       	std	Y+43, r1	; 0x2b
    242a:	1c a6       	std	Y+44, r1	; 0x2c
    242c:	1d a6       	std	Y+45, r1	; 0x2d
    242e:	1e a6       	std	Y+46, r1	; 0x2e
    2430:	1f a6       	std	Y+47, r1	; 0x2f
    2432:	a2 01       	movw	r20, r4
    2434:	b4 01       	movw	r22, r8
    2436:	c5 01       	movw	r24, r10
    2438:	0e 94 bd 09 	call	0x137a	; 0x137a <pxPortInitialiseStack>
    243c:	99 83       	std	Y+1, r25	; 0x01
    243e:	88 83       	st	Y, r24
    2440:	e1 14       	cp	r14, r1
    2442:	f1 04       	cpc	r15, r1
    2444:	19 f0       	breq	.+6      	; 0x244c <xTaskCreate+0x114>
    2446:	f7 01       	movw	r30, r14
    2448:	d1 83       	std	Z+1, r29	; 0x01
    244a:	c0 83       	st	Z, r28
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	0f 92       	push	r0
    2452:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <uxCurrentNumberOfTasks>
    2456:	8f 5f       	subi	r24, 0xFF	; 255
    2458:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <uxCurrentNumberOfTasks>
    245c:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <pxCurrentTCB>
    2460:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2464:	89 2b       	or	r24, r25
    2466:	d1 f5       	brne	.+116    	; 0x24dc <xTaskCreate+0x1a4>
    2468:	d0 93 53 18 	sts	0x1853, r29	; 0x801853 <pxCurrentTCB+0x1>
    246c:	c0 93 52 18 	sts	0x1852, r28	; 0x801852 <pxCurrentTCB>
    2470:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <uxCurrentNumberOfTasks>
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	09 f0       	breq	.+2      	; 0x247a <xTaskCreate+0x142>
    2478:	41 c0       	rjmp	.+130    	; 0x24fc <xTaskCreate+0x1c4>
    247a:	86 e2       	ldi	r24, 0x26	; 38
    247c:	98 e1       	ldi	r25, 0x18	; 24
    247e:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    2482:	81 e3       	ldi	r24, 0x31	; 49
    2484:	98 e1       	ldi	r25, 0x18	; 24
    2486:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    248a:	8c e3       	ldi	r24, 0x3C	; 60
    248c:	98 e1       	ldi	r25, 0x18	; 24
    248e:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    2492:	87 e4       	ldi	r24, 0x47	; 71
    2494:	98 e1       	ldi	r25, 0x18	; 24
    2496:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    249a:	8b e1       	ldi	r24, 0x1B	; 27
    249c:	98 e1       	ldi	r25, 0x18	; 24
    249e:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24a2:	80 e1       	ldi	r24, 0x10	; 16
    24a4:	98 e1       	ldi	r25, 0x18	; 24
    24a6:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	98 e1       	ldi	r25, 0x18	; 24
    24ae:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24b2:	86 ef       	ldi	r24, 0xF6	; 246
    24b4:	97 e1       	ldi	r25, 0x17	; 23
    24b6:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24ba:	8a ee       	ldi	r24, 0xEA	; 234
    24bc:	97 e1       	ldi	r25, 0x17	; 23
    24be:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24c2:	8b e1       	ldi	r24, 0x1B	; 27
    24c4:	98 e1       	ldi	r25, 0x18	; 24
    24c6:	90 93 0f 18 	sts	0x180F, r25	; 0x80180f <pxDelayedTaskList+0x1>
    24ca:	80 93 0e 18 	sts	0x180E, r24	; 0x80180e <pxDelayedTaskList>
    24ce:	80 e1       	ldi	r24, 0x10	; 16
    24d0:	98 e1       	ldi	r25, 0x18	; 24
    24d2:	90 93 0d 18 	sts	0x180D, r25	; 0x80180d <pxOverflowDelayedTaskList+0x1>
    24d6:	80 93 0c 18 	sts	0x180C, r24	; 0x80180c <pxOverflowDelayedTaskList>
    24da:	10 c0       	rjmp	.+32     	; 0x24fc <xTaskCreate+0x1c4>
    24dc:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <xSchedulerRunning>
    24e0:	81 11       	cpse	r24, r1
    24e2:	0c c0       	rjmp	.+24     	; 0x24fc <xTaskCreate+0x1c4>
    24e4:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    24e8:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    24ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    24ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24f0:	89 17       	cp	r24, r25
    24f2:	20 f0       	brcs	.+8      	; 0x24fc <xTaskCreate+0x1c4>
    24f4:	d0 93 53 18 	sts	0x1853, r29	; 0x801853 <pxCurrentTCB+0x1>
    24f8:	c0 93 52 18 	sts	0x1852, r28	; 0x801852 <pxCurrentTCB>
    24fc:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTaskNumber>
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTaskNumber>
    2506:	8d a3       	std	Y+37, r24	; 0x25
    2508:	8a 8d       	ldd	r24, Y+26	; 0x1a
    250a:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    250e:	98 17       	cp	r25, r24
    2510:	10 f4       	brcc	.+4      	; 0x2516 <xTaskCreate+0x1de>
    2512:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2516:	fb e0       	ldi	r31, 0x0B	; 11
    2518:	8f 9f       	mul	r24, r31
    251a:	c0 01       	movw	r24, r0
    251c:	11 24       	eor	r1, r1
    251e:	b6 01       	movw	r22, r12
    2520:	8a 5d       	subi	r24, 0xDA	; 218
    2522:	97 4e       	sbci	r25, 0xE7	; 231
    2524:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2528:	0f 90       	pop	r0
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <xSchedulerRunning>
    2530:	88 23       	and	r24, r24
    2532:	61 f0       	breq	.+24     	; 0x254c <xTaskCreate+0x214>
    2534:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2538:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    253c:	92 8d       	ldd	r25, Z+26	; 0x1a
    253e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2540:	98 17       	cp	r25, r24
    2542:	30 f4       	brcc	.+12     	; 0x2550 <xTaskCreate+0x218>
    2544:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <xTaskCreate+0x21e>
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <xTaskCreate+0x21e>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	01 c0       	rjmp	.+2      	; 0x2556 <xTaskCreate+0x21e>
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	0f 91       	pop	r16
    255c:	ff 90       	pop	r15
    255e:	ef 90       	pop	r14
    2560:	df 90       	pop	r13
    2562:	cf 90       	pop	r12
    2564:	bf 90       	pop	r11
    2566:	af 90       	pop	r10
    2568:	9f 90       	pop	r9
    256a:	8f 90       	pop	r8
    256c:	7f 90       	pop	r7
    256e:	6f 90       	pop	r6
    2570:	5f 90       	pop	r5
    2572:	4f 90       	pop	r4
    2574:	08 95       	ret

00002576 <vTaskStartScheduler>:
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	0f 2e       	mov	r0, r31
    257e:	f9 ed       	ldi	r31, 0xD9	; 217
    2580:	ef 2e       	mov	r14, r31
    2582:	f7 e1       	ldi	r31, 0x17	; 23
    2584:	ff 2e       	mov	r15, r31
    2586:	f0 2d       	mov	r31, r0
    2588:	00 e0       	ldi	r16, 0x00	; 0
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 ec       	ldi	r20, 0xC0	; 192
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	60 e7       	ldi	r22, 0x70	; 112
    2594:	74 e0       	ldi	r23, 0x04	; 4
    2596:	8d ec       	ldi	r24, 0xCD	; 205
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	ce de       	rcall	.-612    	; 0x2338 <xTaskCreate>
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	19 f5       	brne	.+70     	; 0x25e6 <vTaskStartScheduler+0x70>
    25a0:	00 d6       	rcall	.+3072   	; 0x31a2 <xTimerCreateTimerTask>
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	01 f5       	brne	.+64     	; 0x25e6 <vTaskStartScheduler+0x70>
    25a6:	f8 94       	cli
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
    25aa:	9f ef       	ldi	r25, 0xFF	; 255
    25ac:	dc 01       	movw	r26, r24
    25ae:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xNextTaskUnblockTime>
    25b2:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xNextTaskUnblockTime+0x1>
    25b6:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xNextTaskUnblockTime+0x2>
    25ba:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xNextTaskUnblockTime+0x3>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <xSchedulerRunning>
    25c4:	10 92 e5 17 	sts	0x17E5, r1	; 0x8017e5 <xTickCount>
    25c8:	10 92 e6 17 	sts	0x17E6, r1	; 0x8017e6 <xTickCount+0x1>
    25cc:	10 92 e7 17 	sts	0x17E7, r1	; 0x8017e7 <xTickCount+0x2>
    25d0:	10 92 e8 17 	sts	0x17E8, r1	; 0x8017e8 <xTickCount+0x3>
    25d4:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    25d8:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    25dc:	81 a5       	ldd	r24, Z+41	; 0x29
    25de:	0e 94 70 06 	call	0xce0	; 0xce0 <task_switch_in>
    25e2:	0e 94 2f 0a 	call	0x145e	; 0x145e <xPortStartScheduler>
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	08 95       	ret

000025ee <vTaskSuspendAll>:
    25ee:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <uxSchedulerSuspended>
    25f8:	08 95       	ret

000025fa <xTaskGetTickCount>:
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	0f 92       	push	r0
    2600:	60 91 e5 17 	lds	r22, 0x17E5	; 0x8017e5 <xTickCount>
    2604:	70 91 e6 17 	lds	r23, 0x17E6	; 0x8017e6 <xTickCount+0x1>
    2608:	80 91 e7 17 	lds	r24, 0x17E7	; 0x8017e7 <xTickCount+0x2>
    260c:	90 91 e8 17 	lds	r25, 0x17E8	; 0x8017e8 <xTickCount+0x3>
    2610:	0f 90       	pop	r0
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	08 95       	ret

00002616 <xTaskIncrementTick>:
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    2630:	81 11       	cpse	r24, r1
    2632:	ad c0       	rjmp	.+346    	; 0x278e <xTaskIncrementTick+0x178>
    2634:	c0 90 e5 17 	lds	r12, 0x17E5	; 0x8017e5 <xTickCount>
    2638:	d0 90 e6 17 	lds	r13, 0x17E6	; 0x8017e6 <xTickCount+0x1>
    263c:	e0 90 e7 17 	lds	r14, 0x17E7	; 0x8017e7 <xTickCount+0x2>
    2640:	f0 90 e8 17 	lds	r15, 0x17E8	; 0x8017e8 <xTickCount+0x3>
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	c8 1a       	sub	r12, r24
    2648:	d8 0a       	sbc	r13, r24
    264a:	e8 0a       	sbc	r14, r24
    264c:	f8 0a       	sbc	r15, r24
    264e:	c0 92 e5 17 	sts	0x17E5, r12	; 0x8017e5 <xTickCount>
    2652:	d0 92 e6 17 	sts	0x17E6, r13	; 0x8017e6 <xTickCount+0x1>
    2656:	e0 92 e7 17 	sts	0x17E7, r14	; 0x8017e7 <xTickCount+0x2>
    265a:	f0 92 e8 17 	sts	0x17E8, r15	; 0x8017e8 <xTickCount+0x3>
    265e:	c1 14       	cp	r12, r1
    2660:	d1 04       	cpc	r13, r1
    2662:	e1 04       	cpc	r14, r1
    2664:	f1 04       	cpc	r15, r1
    2666:	b1 f4       	brne	.+44     	; 0x2694 <xTaskIncrementTick+0x7e>
    2668:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxDelayedTaskList>
    266c:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxDelayedTaskList+0x1>
    2670:	20 91 0c 18 	lds	r18, 0x180C	; 0x80180c <pxOverflowDelayedTaskList>
    2674:	30 91 0d 18 	lds	r19, 0x180D	; 0x80180d <pxOverflowDelayedTaskList+0x1>
    2678:	30 93 0f 18 	sts	0x180F, r19	; 0x80180f <pxDelayedTaskList+0x1>
    267c:	20 93 0e 18 	sts	0x180E, r18	; 0x80180e <pxDelayedTaskList>
    2680:	90 93 0d 18 	sts	0x180D, r25	; 0x80180d <pxOverflowDelayedTaskList+0x1>
    2684:	80 93 0c 18 	sts	0x180C, r24	; 0x80180c <pxOverflowDelayedTaskList>
    2688:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <xNumOfOverflows>
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <xNumOfOverflows>
    2692:	b2 dd       	rcall	.-1180   	; 0x21f8 <prvResetNextTaskUnblockTime>
    2694:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xNextTaskUnblockTime>
    2698:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xNextTaskUnblockTime+0x1>
    269c:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xNextTaskUnblockTime+0x2>
    26a0:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xNextTaskUnblockTime+0x3>
    26a4:	c8 16       	cp	r12, r24
    26a6:	d9 06       	cpc	r13, r25
    26a8:	ea 06       	cpc	r14, r26
    26aa:	fb 06       	cpc	r15, r27
    26ac:	10 f4       	brcc	.+4      	; 0x26b2 <xTaskIncrementTick+0x9c>
    26ae:	b1 2c       	mov	r11, r1
    26b0:	5d c0       	rjmp	.+186    	; 0x276c <xTaskIncrementTick+0x156>
    26b2:	b1 2c       	mov	r11, r1
    26b4:	0f 2e       	mov	r0, r31
    26b6:	fb e0       	ldi	r31, 0x0B	; 11
    26b8:	af 2e       	mov	r10, r31
    26ba:	f0 2d       	mov	r31, r0
    26bc:	99 24       	eor	r9, r9
    26be:	93 94       	inc	r9
    26c0:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxDelayedTaskList>
    26c4:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxDelayedTaskList+0x1>
    26c8:	80 81       	ld	r24, Z
    26ca:	81 11       	cpse	r24, r1
    26cc:	0c c0       	rjmp	.+24     	; 0x26e6 <xTaskIncrementTick+0xd0>
    26ce:	8f ef       	ldi	r24, 0xFF	; 255
    26d0:	9f ef       	ldi	r25, 0xFF	; 255
    26d2:	dc 01       	movw	r26, r24
    26d4:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xNextTaskUnblockTime>
    26d8:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xNextTaskUnblockTime+0x1>
    26dc:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xNextTaskUnblockTime+0x2>
    26e0:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xNextTaskUnblockTime+0x3>
    26e4:	43 c0       	rjmp	.+134    	; 0x276c <xTaskIncrementTick+0x156>
    26e6:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxDelayedTaskList>
    26ea:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxDelayedTaskList+0x1>
    26ee:	07 80       	ldd	r0, Z+7	; 0x07
    26f0:	f0 85       	ldd	r31, Z+8	; 0x08
    26f2:	e0 2d       	mov	r30, r0
    26f4:	c0 85       	ldd	r28, Z+8	; 0x08
    26f6:	d1 85       	ldd	r29, Z+9	; 0x09
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	ac 81       	ldd	r26, Y+4	; 0x04
    26fe:	bd 81       	ldd	r27, Y+5	; 0x05
    2700:	c8 16       	cp	r12, r24
    2702:	d9 06       	cpc	r13, r25
    2704:	ea 06       	cpc	r14, r26
    2706:	fb 06       	cpc	r15, r27
    2708:	48 f4       	brcc	.+18     	; 0x271c <xTaskIncrementTick+0x106>
    270a:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xNextTaskUnblockTime>
    270e:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xNextTaskUnblockTime+0x1>
    2712:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xNextTaskUnblockTime+0x2>
    2716:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xNextTaskUnblockTime+0x3>
    271a:	28 c0       	rjmp	.+80     	; 0x276c <xTaskIncrementTick+0x156>
    271c:	8e 01       	movw	r16, r28
    271e:	0e 5f       	subi	r16, 0xFE	; 254
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	c8 01       	movw	r24, r16
    2724:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2728:	88 8d       	ldd	r24, Y+24	; 0x18
    272a:	99 8d       	ldd	r25, Y+25	; 0x19
    272c:	89 2b       	or	r24, r25
    272e:	21 f0       	breq	.+8      	; 0x2738 <xTaskIncrementTick+0x122>
    2730:	ce 01       	movw	r24, r28
    2732:	0e 96       	adiw	r24, 0x0e	; 14
    2734:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2738:	8a 8d       	ldd	r24, Y+26	; 0x1a
    273a:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    273e:	98 17       	cp	r25, r24
    2740:	10 f4       	brcc	.+4      	; 0x2746 <xTaskIncrementTick+0x130>
    2742:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2746:	a8 9e       	mul	r10, r24
    2748:	c0 01       	movw	r24, r0
    274a:	11 24       	eor	r1, r1
    274c:	b8 01       	movw	r22, r16
    274e:	8a 5d       	subi	r24, 0xDA	; 218
    2750:	97 4e       	sbci	r25, 0xE7	; 231
    2752:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2756:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    275a:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    275e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2760:	82 8d       	ldd	r24, Z+26	; 0x1a
    2762:	98 17       	cp	r25, r24
    2764:	08 f4       	brcc	.+2      	; 0x2768 <xTaskIncrementTick+0x152>
    2766:	ac cf       	rjmp	.-168    	; 0x26c0 <xTaskIncrementTick+0xaa>
    2768:	b9 2c       	mov	r11, r9
    276a:	aa cf       	rjmp	.-172    	; 0x26c0 <xTaskIncrementTick+0xaa>
    276c:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2770:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2774:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2776:	8b e0       	ldi	r24, 0x0B	; 11
    2778:	e8 9f       	mul	r30, r24
    277a:	f0 01       	movw	r30, r0
    277c:	11 24       	eor	r1, r1
    277e:	ea 5d       	subi	r30, 0xDA	; 218
    2780:	f7 4e       	sbci	r31, 0xE7	; 231
    2782:	80 81       	ld	r24, Z
    2784:	82 30       	cpi	r24, 0x02	; 2
    2786:	48 f0       	brcs	.+18     	; 0x279a <xTaskIncrementTick+0x184>
    2788:	bb 24       	eor	r11, r11
    278a:	b3 94       	inc	r11
    278c:	06 c0       	rjmp	.+12     	; 0x279a <xTaskIncrementTick+0x184>
    278e:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <uxPendedTicks>
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <uxPendedTicks>
    2798:	b1 2c       	mov	r11, r1
    279a:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <xYieldPending>
    279e:	88 23       	and	r24, r24
    27a0:	11 f0       	breq	.+4      	; 0x27a6 <xTaskIncrementTick+0x190>
    27a2:	bb 24       	eor	r11, r11
    27a4:	b3 94       	inc	r11
    27a6:	8b 2d       	mov	r24, r11
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	df 90       	pop	r13
    27b6:	cf 90       	pop	r12
    27b8:	bf 90       	pop	r11
    27ba:	af 90       	pop	r10
    27bc:	9f 90       	pop	r9
    27be:	08 95       	ret

000027c0 <xTaskResumeAll>:
    27c0:	cf 92       	push	r12
    27c2:	df 92       	push	r13
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	0f 92       	push	r0
    27d6:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    27da:	81 50       	subi	r24, 0x01	; 1
    27dc:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <uxSchedulerSuspended>
    27e0:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    27e4:	81 11       	cpse	r24, r1
    27e6:	5a c0       	rjmp	.+180    	; 0x289c <xTaskResumeAll+0xdc>
    27e8:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <uxCurrentNumberOfTasks>
    27ec:	81 11       	cpse	r24, r1
    27ee:	2c c0       	rjmp	.+88     	; 0x2848 <xTaskResumeAll+0x88>
    27f0:	58 c0       	rjmp	.+176    	; 0x28a2 <xTaskResumeAll+0xe2>
    27f2:	d7 01       	movw	r26, r14
    27f4:	17 96       	adiw	r26, 0x07	; 7
    27f6:	ed 91       	ld	r30, X+
    27f8:	fc 91       	ld	r31, X
    27fa:	18 97       	sbiw	r26, 0x08	; 8
    27fc:	c0 85       	ldd	r28, Z+8	; 0x08
    27fe:	d1 85       	ldd	r29, Z+9	; 0x09
    2800:	ce 01       	movw	r24, r28
    2802:	0e 96       	adiw	r24, 0x0e	; 14
    2804:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2808:	8e 01       	movw	r16, r28
    280a:	0e 5f       	subi	r16, 0xFE	; 254
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	c8 01       	movw	r24, r16
    2810:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2814:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2816:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    281a:	98 17       	cp	r25, r24
    281c:	10 f4       	brcc	.+4      	; 0x2822 <xTaskResumeAll+0x62>
    281e:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2822:	d8 9e       	mul	r13, r24
    2824:	c0 01       	movw	r24, r0
    2826:	11 24       	eor	r1, r1
    2828:	b8 01       	movw	r22, r16
    282a:	8a 5d       	subi	r24, 0xDA	; 218
    282c:	97 4e       	sbci	r25, 0xE7	; 231
    282e:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2832:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2836:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    283a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    283c:	82 8d       	ldd	r24, Z+26	; 0x1a
    283e:	98 17       	cp	r25, r24
    2840:	88 f0       	brcs	.+34     	; 0x2864 <xTaskResumeAll+0xa4>
    2842:	c0 92 e1 17 	sts	0x17E1, r12	; 0x8017e1 <xYieldPending>
    2846:	0e c0       	rjmp	.+28     	; 0x2864 <xTaskResumeAll+0xa4>
    2848:	c0 e0       	ldi	r28, 0x00	; 0
    284a:	d0 e0       	ldi	r29, 0x00	; 0
    284c:	0f 2e       	mov	r0, r31
    284e:	f1 e0       	ldi	r31, 0x01	; 1
    2850:	ef 2e       	mov	r14, r31
    2852:	f8 e1       	ldi	r31, 0x18	; 24
    2854:	ff 2e       	mov	r15, r31
    2856:	f0 2d       	mov	r31, r0
    2858:	0f 2e       	mov	r0, r31
    285a:	fb e0       	ldi	r31, 0x0B	; 11
    285c:	df 2e       	mov	r13, r31
    285e:	f0 2d       	mov	r31, r0
    2860:	cc 24       	eor	r12, r12
    2862:	c3 94       	inc	r12
    2864:	f7 01       	movw	r30, r14
    2866:	80 81       	ld	r24, Z
    2868:	81 11       	cpse	r24, r1
    286a:	c3 cf       	rjmp	.-122    	; 0x27f2 <xTaskResumeAll+0x32>
    286c:	cd 2b       	or	r28, r29
    286e:	09 f0       	breq	.+2      	; 0x2872 <xTaskResumeAll+0xb2>
    2870:	c3 dc       	rcall	.-1658   	; 0x21f8 <prvResetNextTaskUnblockTime>
    2872:	c0 91 e2 17 	lds	r28, 0x17E2	; 0x8017e2 <uxPendedTicks>
    2876:	cc 23       	and	r28, r28
    2878:	49 f0       	breq	.+18     	; 0x288c <xTaskResumeAll+0xcc>
    287a:	d1 e0       	ldi	r29, 0x01	; 1
    287c:	cc de       	rcall	.-616    	; 0x2616 <xTaskIncrementTick>
    287e:	81 11       	cpse	r24, r1
    2880:	d0 93 e1 17 	sts	0x17E1, r29	; 0x8017e1 <xYieldPending>
    2884:	c1 50       	subi	r28, 0x01	; 1
    2886:	d1 f7       	brne	.-12     	; 0x287c <xTaskResumeAll+0xbc>
    2888:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <uxPendedTicks>
    288c:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <xYieldPending>
    2890:	88 23       	and	r24, r24
    2892:	31 f0       	breq	.+12     	; 0x28a0 <xTaskResumeAll+0xe0>
    2894:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	03 c0       	rjmp	.+6      	; 0x28a2 <xTaskResumeAll+0xe2>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	01 c0       	rjmp	.+2      	; 0x28a2 <xTaskResumeAll+0xe2>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	0f 90       	pop	r0
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	ff 90       	pop	r15
    28b0:	ef 90       	pop	r14
    28b2:	df 90       	pop	r13
    28b4:	cf 90       	pop	r12
    28b6:	08 95       	ret

000028b8 <vTaskDelay>:
    28b8:	cf 92       	push	r12
    28ba:	df 92       	push	r13
    28bc:	ef 92       	push	r14
    28be:	ff 92       	push	r15
    28c0:	6b 01       	movw	r12, r22
    28c2:	7c 01       	movw	r14, r24
    28c4:	67 2b       	or	r22, r23
    28c6:	68 2b       	or	r22, r24
    28c8:	69 2b       	or	r22, r25
    28ca:	41 f0       	breq	.+16     	; 0x28dc <vTaskDelay+0x24>
    28cc:	90 de       	rcall	.-736    	; 0x25ee <vTaskSuspendAll>
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	c7 01       	movw	r24, r14
    28d2:	b6 01       	movw	r22, r12
    28d4:	bb dc       	rcall	.-1674   	; 0x224c <prvAddCurrentTaskToDelayedList>
    28d6:	74 df       	rcall	.-280    	; 0x27c0 <xTaskResumeAll>
    28d8:	81 11       	cpse	r24, r1
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <vTaskDelay+0x28>
    28dc:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
    28e0:	ff 90       	pop	r15
    28e2:	ef 90       	pop	r14
    28e4:	df 90       	pop	r13
    28e6:	cf 90       	pop	r12
    28e8:	08 95       	ret

000028ea <vTaskSwitchContext>:
    28ea:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    28ee:	88 23       	and	r24, r24
    28f0:	21 f0       	breq	.+8      	; 0x28fa <vTaskSwitchContext+0x10>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <xYieldPending>
    28f8:	08 95       	ret
    28fa:	10 92 e1 17 	sts	0x17E1, r1	; 0x8017e1 <xYieldPending>
    28fe:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2902:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2906:	81 a5       	ldd	r24, Z+41	; 0x29
    2908:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <task_switch_out>
    290c:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    2910:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2914:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2918:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    291c:	2d 91       	ld	r18, X+
    291e:	3c 91       	ld	r19, X
    2920:	83 8d       	ldd	r24, Z+27	; 0x1b
    2922:	94 8d       	ldd	r25, Z+28	; 0x1c
    2924:	82 17       	cp	r24, r18
    2926:	93 07       	cpc	r25, r19
    2928:	58 f0       	brcs	.+22     	; 0x2940 <vTaskSwitchContext+0x56>
    292a:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    292e:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2932:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <pxCurrentTCB>
    2936:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    293a:	63 5e       	subi	r22, 0xE3	; 227
    293c:	7f 4f       	sbci	r23, 0xFF	; 255
    293e:	53 d5       	rcall	.+2726   	; 0x33e6 <vApplicationStackOverflowHook>
    2940:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	9b e0       	ldi	r25, 0x0B	; 11
    294a:	89 9f       	mul	r24, r25
    294c:	f0 01       	movw	r30, r0
    294e:	11 24       	eor	r1, r1
    2950:	ea 5d       	subi	r30, 0xDA	; 218
    2952:	f7 4e       	sbci	r31, 0xE7	; 231
    2954:	90 81       	ld	r25, Z
    2956:	91 11       	cpse	r25, r1
    2958:	0e c0       	rjmp	.+28     	; 0x2976 <vTaskSwitchContext+0x8c>
    295a:	4b e0       	ldi	r20, 0x0B	; 11
    295c:	81 50       	subi	r24, 0x01	; 1
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	42 9f       	mul	r20, r18
    2964:	f0 01       	movw	r30, r0
    2966:	43 9f       	mul	r20, r19
    2968:	f0 0d       	add	r31, r0
    296a:	11 24       	eor	r1, r1
    296c:	ea 5d       	subi	r30, 0xDA	; 218
    296e:	f7 4e       	sbci	r31, 0xE7	; 231
    2970:	90 81       	ld	r25, Z
    2972:	99 23       	and	r25, r25
    2974:	99 f3       	breq	.-26     	; 0x295c <vTaskSwitchContext+0x72>
    2976:	9b e0       	ldi	r25, 0x0B	; 11
    2978:	92 9f       	mul	r25, r18
    297a:	a0 01       	movw	r20, r0
    297c:	93 9f       	mul	r25, r19
    297e:	50 0d       	add	r21, r0
    2980:	11 24       	eor	r1, r1
    2982:	da 01       	movw	r26, r20
    2984:	aa 5d       	subi	r26, 0xDA	; 218
    2986:	b7 4e       	sbci	r27, 0xE7	; 231
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	ed 91       	ld	r30, X+
    298c:	fc 91       	ld	r31, X
    298e:	12 97       	sbiw	r26, 0x02	; 2
    2990:	04 80       	ldd	r0, Z+4	; 0x04
    2992:	f5 81       	ldd	r31, Z+5	; 0x05
    2994:	e0 2d       	mov	r30, r0
    2996:	12 96       	adiw	r26, 0x02	; 2
    2998:	fc 93       	st	X, r31
    299a:	ee 93       	st	-X, r30
    299c:	11 97       	sbiw	r26, 0x01	; 1
    299e:	47 5d       	subi	r20, 0xD7	; 215
    29a0:	57 4e       	sbci	r21, 0xE7	; 231
    29a2:	e4 17       	cp	r30, r20
    29a4:	f5 07       	cpc	r31, r21
    29a6:	29 f4       	brne	.+10     	; 0x29b2 <vTaskSwitchContext+0xc8>
    29a8:	44 81       	ldd	r20, Z+4	; 0x04
    29aa:	55 81       	ldd	r21, Z+5	; 0x05
    29ac:	fd 01       	movw	r30, r26
    29ae:	52 83       	std	Z+2, r21	; 0x02
    29b0:	41 83       	std	Z+1, r20	; 0x01
    29b2:	9b e0       	ldi	r25, 0x0B	; 11
    29b4:	92 9f       	mul	r25, r18
    29b6:	f0 01       	movw	r30, r0
    29b8:	93 9f       	mul	r25, r19
    29ba:	f0 0d       	add	r31, r0
    29bc:	11 24       	eor	r1, r1
    29be:	ea 5d       	subi	r30, 0xDA	; 218
    29c0:	f7 4e       	sbci	r31, 0xE7	; 231
    29c2:	01 80       	ldd	r0, Z+1	; 0x01
    29c4:	f2 81       	ldd	r31, Z+2	; 0x02
    29c6:	e0 2d       	mov	r30, r0
    29c8:	20 85       	ldd	r18, Z+8	; 0x08
    29ca:	31 85       	ldd	r19, Z+9	; 0x09
    29cc:	30 93 53 18 	sts	0x1853, r19	; 0x801853 <pxCurrentTCB+0x1>
    29d0:	20 93 52 18 	sts	0x1852, r18	; 0x801852 <pxCurrentTCB>
    29d4:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    29d8:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    29dc:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    29e0:	81 a5       	ldd	r24, Z+41	; 0x29
    29e2:	0c 94 70 06 	jmp	0xce0	; 0xce0 <task_switch_in>
    29e6:	08 95       	ret

000029e8 <vTaskPlaceOnEventList>:
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	6a 01       	movw	r12, r20
    29f2:	7b 01       	movw	r14, r22
    29f4:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    29f8:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    29fc:	62 5f       	subi	r22, 0xF2	; 242
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vListInsert>
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	c7 01       	movw	r24, r14
    2a08:	b6 01       	movw	r22, r12
    2a0a:	20 dc       	rcall	.-1984   	; 0x224c <prvAddCurrentTaskToDelayedList>
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	08 95       	ret

00002a16 <vTaskPlaceOnUnorderedEventList>:
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	68 01       	movw	r12, r16
    2a24:	79 01       	movw	r14, r18
    2a26:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2a2a:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2a2e:	70 68       	ori	r23, 0x80	; 128
    2a30:	46 87       	std	Z+14, r20	; 0x0e
    2a32:	57 87       	std	Z+15, r21	; 0x0f
    2a34:	60 8b       	std	Z+16, r22	; 0x10
    2a36:	71 8b       	std	Z+17, r23	; 0x11
    2a38:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    2a3c:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2a40:	62 5f       	subi	r22, 0xF2	; 242
    2a42:	7f 4f       	sbci	r23, 0xFF	; 255
    2a44:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	c7 01       	movw	r24, r14
    2a4c:	b6 01       	movw	r22, r12
    2a4e:	fe db       	rcall	.-2052   	; 0x224c <prvAddCurrentTaskToDelayedList>
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	ff 90       	pop	r15
    2a56:	ef 90       	pop	r14
    2a58:	df 90       	pop	r13
    2a5a:	cf 90       	pop	r12
    2a5c:	08 95       	ret

00002a5e <vTaskPlaceOnEventListRestricted>:
    2a5e:	cf 92       	push	r12
    2a60:	df 92       	push	r13
    2a62:	ef 92       	push	r14
    2a64:	ff 92       	push	r15
    2a66:	cf 93       	push	r28
    2a68:	6a 01       	movw	r12, r20
    2a6a:	7b 01       	movw	r14, r22
    2a6c:	c2 2f       	mov	r28, r18
    2a6e:	60 91 52 18 	lds	r22, 0x1852	; 0x801852 <pxCurrentTCB>
    2a72:	70 91 53 18 	lds	r23, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2a76:	62 5f       	subi	r22, 0xF2	; 242
    2a78:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7a:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2a7e:	cc 23       	and	r28, r28
    2a80:	21 f0       	breq	.+8      	; 0x2a8a <vTaskPlaceOnEventListRestricted+0x2c>
    2a82:	cc 24       	eor	r12, r12
    2a84:	ca 94       	dec	r12
    2a86:	dc 2c       	mov	r13, r12
    2a88:	76 01       	movw	r14, r12
    2a8a:	4c 2f       	mov	r20, r28
    2a8c:	c7 01       	movw	r24, r14
    2a8e:	b6 01       	movw	r22, r12
    2a90:	dd db       	rcall	.-2118   	; 0x224c <prvAddCurrentTaskToDelayedList>
    2a92:	cf 91       	pop	r28
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	08 95       	ret

00002a9e <xTaskRemoveFromEventList>:
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	17 96       	adiw	r26, 0x07	; 7
    2aaa:	ed 91       	ld	r30, X+
    2aac:	fc 91       	ld	r31, X
    2aae:	18 97       	sbiw	r26, 0x08	; 8
    2ab0:	c0 85       	ldd	r28, Z+8	; 0x08
    2ab2:	d1 85       	ldd	r29, Z+9	; 0x09
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	02 5f       	subi	r16, 0xF2	; 242
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	c8 01       	movw	r24, r16
    2abc:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2ac0:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	16 c0       	rjmp	.+44     	; 0x2af4 <xTaskRemoveFromEventList+0x56>
    2ac8:	0c 50       	subi	r16, 0x0C	; 12
    2aca:	11 09       	sbc	r17, r1
    2acc:	c8 01       	movw	r24, r16
    2ace:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2ad2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ad4:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    2ad8:	98 17       	cp	r25, r24
    2ada:	10 f4       	brcc	.+4      	; 0x2ae0 <xTaskRemoveFromEventList+0x42>
    2adc:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2ae0:	bb e0       	ldi	r27, 0x0B	; 11
    2ae2:	8b 9f       	mul	r24, r27
    2ae4:	c0 01       	movw	r24, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	b8 01       	movw	r22, r16
    2aea:	8a 5d       	subi	r24, 0xDA	; 218
    2aec:	97 4e       	sbci	r25, 0xE7	; 231
    2aee:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2af2:	05 c0       	rjmp	.+10     	; 0x2afe <xTaskRemoveFromEventList+0x60>
    2af4:	b8 01       	movw	r22, r16
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	98 e1       	ldi	r25, 0x18	; 24
    2afa:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2afe:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2b02:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2b06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b08:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b0a:	89 17       	cp	r24, r25
    2b0c:	20 f4       	brcc	.+8      	; 0x2b16 <xTaskRemoveFromEventList+0x78>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <xYieldPending>
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <xTaskRemoveFromEventList+0x7a>
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <vTaskRemoveFromUnorderedEventList>:
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	70 68       	ori	r23, 0x80	; 128
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	40 83       	st	Z, r20
    2b30:	51 83       	std	Z+1, r21	; 0x01
    2b32:	62 83       	std	Z+2, r22	; 0x02
    2b34:	73 83       	std	Z+3, r23	; 0x03
    2b36:	c0 85       	ldd	r28, Z+8	; 0x08
    2b38:	d1 85       	ldd	r29, Z+9	; 0x09
    2b3a:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2b3e:	8e 01       	movw	r16, r28
    2b40:	0e 5f       	subi	r16, 0xFE	; 254
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	c8 01       	movw	r24, r16
    2b46:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2b4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b4c:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    2b50:	98 17       	cp	r25, r24
    2b52:	10 f4       	brcc	.+4      	; 0x2b58 <vTaskRemoveFromUnorderedEventList+0x36>
    2b54:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2b58:	fb e0       	ldi	r31, 0x0B	; 11
    2b5a:	8f 9f       	mul	r24, r31
    2b5c:	c0 01       	movw	r24, r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	b8 01       	movw	r22, r16
    2b62:	8a 5d       	subi	r24, 0xDA	; 218
    2b64:	97 4e       	sbci	r25, 0xE7	; 231
    2b66:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2b6a:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2b6e:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2b72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b74:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b76:	89 17       	cp	r24, r25
    2b78:	18 f4       	brcc	.+6      	; 0x2b80 <vTaskRemoveFromUnorderedEventList+0x5e>
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <xYieldPending>
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	08 95       	ret

00002b8a <vTaskSetTimeOutState>:
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	0f 92       	push	r0
    2b90:	20 91 e0 17 	lds	r18, 0x17E0	; 0x8017e0 <xNumOfOverflows>
    2b94:	fc 01       	movw	r30, r24
    2b96:	20 83       	st	Z, r18
    2b98:	40 91 e5 17 	lds	r20, 0x17E5	; 0x8017e5 <xTickCount>
    2b9c:	50 91 e6 17 	lds	r21, 0x17E6	; 0x8017e6 <xTickCount+0x1>
    2ba0:	60 91 e7 17 	lds	r22, 0x17E7	; 0x8017e7 <xTickCount+0x2>
    2ba4:	70 91 e8 17 	lds	r23, 0x17E8	; 0x8017e8 <xTickCount+0x3>
    2ba8:	41 83       	std	Z+1, r20	; 0x01
    2baa:	52 83       	std	Z+2, r21	; 0x02
    2bac:	63 83       	std	Z+3, r22	; 0x03
    2bae:	74 83       	std	Z+4, r23	; 0x04
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	08 95       	ret

00002bb6 <vTaskInternalSetTimeOutState>:
    2bb6:	20 91 e0 17 	lds	r18, 0x17E0	; 0x8017e0 <xNumOfOverflows>
    2bba:	fc 01       	movw	r30, r24
    2bbc:	20 83       	st	Z, r18
    2bbe:	40 91 e5 17 	lds	r20, 0x17E5	; 0x8017e5 <xTickCount>
    2bc2:	50 91 e6 17 	lds	r21, 0x17E6	; 0x8017e6 <xTickCount+0x1>
    2bc6:	60 91 e7 17 	lds	r22, 0x17E7	; 0x8017e7 <xTickCount+0x2>
    2bca:	70 91 e8 17 	lds	r23, 0x17E8	; 0x8017e8 <xTickCount+0x3>
    2bce:	41 83       	std	Z+1, r20	; 0x01
    2bd0:	52 83       	std	Z+2, r21	; 0x02
    2bd2:	63 83       	std	Z+3, r22	; 0x03
    2bd4:	74 83       	std	Z+4, r23	; 0x04
    2bd6:	08 95       	ret

00002bd8 <xTaskCheckForTimeOut>:
    2bd8:	cf 92       	push	r12
    2bda:	df 92       	push	r13
    2bdc:	ef 92       	push	r14
    2bde:	ff 92       	push	r15
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	fb 01       	movw	r30, r22
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	0f 92       	push	r0
    2bf0:	40 91 e5 17 	lds	r20, 0x17E5	; 0x8017e5 <xTickCount>
    2bf4:	50 91 e6 17 	lds	r21, 0x17E6	; 0x8017e6 <xTickCount+0x1>
    2bf8:	60 91 e7 17 	lds	r22, 0x17E7	; 0x8017e7 <xTickCount+0x2>
    2bfc:	70 91 e8 17 	lds	r23, 0x17E8	; 0x8017e8 <xTickCount+0x3>
    2c00:	00 81       	ld	r16, Z
    2c02:	11 81       	ldd	r17, Z+1	; 0x01
    2c04:	22 81       	ldd	r18, Z+2	; 0x02
    2c06:	33 81       	ldd	r19, Z+3	; 0x03
    2c08:	0f 3f       	cpi	r16, 0xFF	; 255
    2c0a:	af ef       	ldi	r26, 0xFF	; 255
    2c0c:	1a 07       	cpc	r17, r26
    2c0e:	2a 07       	cpc	r18, r26
    2c10:	3a 07       	cpc	r19, r26
    2c12:	49 f1       	breq	.+82     	; 0x2c66 <xTaskCheckForTimeOut+0x8e>
    2c14:	ec 01       	movw	r28, r24
    2c16:	c9 80       	ldd	r12, Y+1	; 0x01
    2c18:	da 80       	ldd	r13, Y+2	; 0x02
    2c1a:	eb 80       	ldd	r14, Y+3	; 0x03
    2c1c:	fc 80       	ldd	r15, Y+4	; 0x04
    2c1e:	a0 91 e0 17 	lds	r26, 0x17E0	; 0x8017e0 <xNumOfOverflows>
    2c22:	b8 81       	ld	r27, Y
    2c24:	ba 17       	cp	r27, r26
    2c26:	29 f0       	breq	.+10     	; 0x2c32 <xTaskCheckForTimeOut+0x5a>
    2c28:	4c 15       	cp	r20, r12
    2c2a:	5d 05       	cpc	r21, r13
    2c2c:	6e 05       	cpc	r22, r14
    2c2e:	7f 05       	cpc	r23, r15
    2c30:	e0 f4       	brcc	.+56     	; 0x2c6a <xTaskCheckForTimeOut+0x92>
    2c32:	4c 19       	sub	r20, r12
    2c34:	5d 09       	sbc	r21, r13
    2c36:	6e 09       	sbc	r22, r14
    2c38:	7f 09       	sbc	r23, r15
    2c3a:	40 17       	cp	r20, r16
    2c3c:	51 07       	cpc	r21, r17
    2c3e:	62 07       	cpc	r22, r18
    2c40:	73 07       	cpc	r23, r19
    2c42:	58 f4       	brcc	.+22     	; 0x2c5a <xTaskCheckForTimeOut+0x82>
    2c44:	04 1b       	sub	r16, r20
    2c46:	15 0b       	sbc	r17, r21
    2c48:	26 0b       	sbc	r18, r22
    2c4a:	37 0b       	sbc	r19, r23
    2c4c:	00 83       	st	Z, r16
    2c4e:	11 83       	std	Z+1, r17	; 0x01
    2c50:	22 83       	std	Z+2, r18	; 0x02
    2c52:	33 83       	std	Z+3, r19	; 0x03
    2c54:	b0 df       	rcall	.-160    	; 0x2bb6 <vTaskInternalSetTimeOutState>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	09 c0       	rjmp	.+18     	; 0x2c6c <xTaskCheckForTimeOut+0x94>
    2c5a:	10 82       	st	Z, r1
    2c5c:	11 82       	std	Z+1, r1	; 0x01
    2c5e:	12 82       	std	Z+2, r1	; 0x02
    2c60:	13 82       	std	Z+3, r1	; 0x03
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <xTaskCheckForTimeOut+0x94>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <xTaskCheckForTimeOut+0x94>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    2c80:	08 95       	ret

00002c82 <vTaskMissedYield>:
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <xYieldPending>
    2c88:	08 95       	ret

00002c8a <xTaskGetCurrentTaskHandle>:
    2c8a:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <pxCurrentTCB>
    2c8e:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2c92:	08 95       	ret

00002c94 <xTaskGetSchedulerState>:
    2c94:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <xSchedulerRunning>
    2c98:	88 23       	and	r24, r24
    2c9a:	31 f0       	breq	.+12     	; 0x2ca8 <xTaskGetSchedulerState+0x14>
    2c9c:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    2ca0:	88 23       	and	r24, r24
    2ca2:	21 f0       	breq	.+8      	; 0x2cac <xTaskGetSchedulerState+0x18>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	08 95       	ret
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	08 95       	ret
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	08 95       	ret

00002cb0 <xTaskPriorityDisinherit>:
    2cb0:	0f 93       	push	r16
    2cb2:	1f 93       	push	r17
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	fc 01       	movw	r30, r24
    2cba:	89 2b       	or	r24, r25
    2cbc:	79 f1       	breq	.+94     	; 0x2d1c <xTaskPriorityDisinherit+0x6c>
    2cbe:	80 a5       	ldd	r24, Z+40	; 0x28
    2cc0:	81 50       	subi	r24, 0x01	; 1
    2cc2:	80 a7       	std	Z+40, r24	; 0x28
    2cc4:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cc6:	97 a1       	ldd	r25, Z+39	; 0x27
    2cc8:	29 17       	cp	r18, r25
    2cca:	51 f1       	breq	.+84     	; 0x2d20 <xTaskPriorityDisinherit+0x70>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	2a c0       	rjmp	.+84     	; 0x2d24 <xTaskPriorityDisinherit+0x74>
    2cd0:	ef 01       	movw	r28, r30
    2cd2:	8f 01       	movw	r16, r30
    2cd4:	0e 5f       	subi	r16, 0xFE	; 254
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	c8 01       	movw	r24, r16
    2cda:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2cde:	8f a1       	ldd	r24, Y+39	; 0x27
    2ce0:	8a 8f       	std	Y+26, r24	; 0x1a
    2ce2:	44 e0       	ldi	r20, 0x04	; 4
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	48 1b       	sub	r20, r24
    2cec:	51 09       	sbc	r21, r1
    2cee:	61 09       	sbc	r22, r1
    2cf0:	71 09       	sbc	r23, r1
    2cf2:	4e 87       	std	Y+14, r20	; 0x0e
    2cf4:	5f 87       	std	Y+15, r21	; 0x0f
    2cf6:	68 8b       	std	Y+16, r22	; 0x10
    2cf8:	79 8b       	std	Y+17, r23	; 0x11
    2cfa:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    2cfe:	98 17       	cp	r25, r24
    2d00:	10 f4       	brcc	.+4      	; 0x2d06 <xTaskPriorityDisinherit+0x56>
    2d02:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2d06:	2b e0       	ldi	r18, 0x0B	; 11
    2d08:	82 9f       	mul	r24, r18
    2d0a:	c0 01       	movw	r24, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	b8 01       	movw	r22, r16
    2d10:	8a 5d       	subi	r24, 0xDA	; 218
    2d12:	97 4e       	sbci	r25, 0xE7	; 231
    2d14:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	05 c0       	rjmp	.+10     	; 0x2d26 <xTaskPriorityDisinherit+0x76>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	03 c0       	rjmp	.+6      	; 0x2d26 <xTaskPriorityDisinherit+0x76>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	01 c0       	rjmp	.+2      	; 0x2d26 <xTaskPriorityDisinherit+0x76>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	08 95       	ret

00002d30 <uxTaskResetEventItemValue>:
    2d30:	cf 92       	push	r12
    2d32:	df 92       	push	r13
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2d3c:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2d40:	66 85       	ldd	r22, Z+14	; 0x0e
    2d42:	77 85       	ldd	r23, Z+15	; 0x0f
    2d44:	80 89       	ldd	r24, Z+16	; 0x10
    2d46:	91 89       	ldd	r25, Z+17	; 0x11
    2d48:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2d4c:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2d50:	a0 91 52 18 	lds	r26, 0x1852	; 0x801852 <pxCurrentTCB>
    2d54:	b0 91 53 18 	lds	r27, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2d58:	5a 96       	adiw	r26, 0x1a	; 26
    2d5a:	2c 91       	ld	r18, X
    2d5c:	c1 2c       	mov	r12, r1
    2d5e:	d1 2c       	mov	r13, r1
    2d60:	76 01       	movw	r14, r12
    2d62:	68 94       	set
    2d64:	c2 f8       	bld	r12, 2
    2d66:	c2 1a       	sub	r12, r18
    2d68:	d1 08       	sbc	r13, r1
    2d6a:	e1 08       	sbc	r14, r1
    2d6c:	f1 08       	sbc	r15, r1
    2d6e:	c6 86       	std	Z+14, r12	; 0x0e
    2d70:	d7 86       	std	Z+15, r13	; 0x0f
    2d72:	e0 8a       	std	Z+16, r14	; 0x10
    2d74:	f1 8a       	std	Z+17, r15	; 0x11
    2d76:	ff 90       	pop	r15
    2d78:	ef 90       	pop	r14
    2d7a:	df 90       	pop	r13
    2d7c:	cf 90       	pop	r12
    2d7e:	08 95       	ret

00002d80 <xTaskNotifyWait>:
    2d80:	4f 92       	push	r4
    2d82:	5f 92       	push	r5
    2d84:	6f 92       	push	r6
    2d86:	7f 92       	push	r7
    2d88:	8f 92       	push	r8
    2d8a:	9f 92       	push	r9
    2d8c:	af 92       	push	r10
    2d8e:	bf 92       	push	r11
    2d90:	cf 92       	push	r12
    2d92:	df 92       	push	r13
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	49 01       	movw	r8, r18
    2d9e:	5a 01       	movw	r10, r20
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	0f 92       	push	r0
    2da6:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2daa:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2dae:	27 a5       	ldd	r18, Z+47	; 0x2f
    2db0:	22 30       	cpi	r18, 0x02	; 2
    2db2:	39 f1       	breq	.+78     	; 0x2e02 <xTaskNotifyWait+0x82>
    2db4:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2db8:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2dbc:	43 a4       	ldd	r4, Z+43	; 0x2b
    2dbe:	54 a4       	ldd	r5, Z+44	; 0x2c
    2dc0:	65 a4       	ldd	r6, Z+45	; 0x2d
    2dc2:	76 a4       	ldd	r7, Z+46	; 0x2e
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	80 95       	com	r24
    2dca:	90 95       	com	r25
    2dcc:	a0 95       	com	r26
    2dce:	b0 95       	com	r27
    2dd0:	84 21       	and	r24, r4
    2dd2:	95 21       	and	r25, r5
    2dd4:	a6 21       	and	r26, r6
    2dd6:	b7 21       	and	r27, r7
    2dd8:	83 a7       	std	Z+43, r24	; 0x2b
    2dda:	94 a7       	std	Z+44, r25	; 0x2c
    2ddc:	a5 a7       	std	Z+45, r26	; 0x2d
    2dde:	b6 a7       	std	Z+46, r27	; 0x2e
    2de0:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2de4:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	87 a7       	std	Z+47, r24	; 0x2f
    2dec:	c1 14       	cp	r12, r1
    2dee:	d1 04       	cpc	r13, r1
    2df0:	e1 04       	cpc	r14, r1
    2df2:	f1 04       	cpc	r15, r1
    2df4:	31 f0       	breq	.+12     	; 0x2e02 <xTaskNotifyWait+0x82>
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	c7 01       	movw	r24, r14
    2dfa:	b6 01       	movw	r22, r12
    2dfc:	27 da       	rcall	.-2994   	; 0x224c <prvAddCurrentTaskToDelayedList>
    2dfe:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
    2e02:	0f 90       	pop	r0
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	0f 92       	push	r0
    2e0c:	01 15       	cp	r16, r1
    2e0e:	11 05       	cpc	r17, r1
    2e10:	69 f0       	breq	.+26     	; 0x2e2c <xTaskNotifyWait+0xac>
    2e12:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2e16:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2e1a:	83 a5       	ldd	r24, Z+43	; 0x2b
    2e1c:	94 a5       	ldd	r25, Z+44	; 0x2c
    2e1e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2e20:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2e22:	f8 01       	movw	r30, r16
    2e24:	80 83       	st	Z, r24
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	a2 83       	std	Z+2, r26	; 0x02
    2e2a:	b3 83       	std	Z+3, r27	; 0x03
    2e2c:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2e30:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2e34:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e36:	82 30       	cpi	r24, 0x02	; 2
    2e38:	b1 f4       	brne	.+44     	; 0x2e66 <xTaskNotifyWait+0xe6>
    2e3a:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2e3e:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2e42:	83 a5       	ldd	r24, Z+43	; 0x2b
    2e44:	94 a5       	ldd	r25, Z+44	; 0x2c
    2e46:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2e48:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2e4a:	80 94       	com	r8
    2e4c:	90 94       	com	r9
    2e4e:	a0 94       	com	r10
    2e50:	b0 94       	com	r11
    2e52:	88 22       	and	r8, r24
    2e54:	99 22       	and	r9, r25
    2e56:	aa 22       	and	r10, r26
    2e58:	bb 22       	and	r11, r27
    2e5a:	83 a6       	std	Z+43, r8	; 0x2b
    2e5c:	94 a6       	std	Z+44, r9	; 0x2c
    2e5e:	a5 a6       	std	Z+45, r10	; 0x2d
    2e60:	b6 a6       	std	Z+46, r11	; 0x2e
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <xTaskNotifyWait+0xe8>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2e6c:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2e70:	17 a6       	std	Z+47, r1	; 0x2f
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	ff 90       	pop	r15
    2e7c:	ef 90       	pop	r14
    2e7e:	df 90       	pop	r13
    2e80:	cf 90       	pop	r12
    2e82:	bf 90       	pop	r11
    2e84:	af 90       	pop	r10
    2e86:	9f 90       	pop	r9
    2e88:	8f 90       	pop	r8
    2e8a:	7f 90       	pop	r7
    2e8c:	6f 90       	pop	r6
    2e8e:	5f 90       	pop	r5
    2e90:	4f 90       	pop	r4
    2e92:	08 95       	ret

00002e94 <xTaskGenericNotify>:
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	0f 92       	push	r0
    2ea4:	01 15       	cp	r16, r1
    2ea6:	11 05       	cpc	r17, r1
    2ea8:	49 f0       	breq	.+18     	; 0x2ebc <xTaskGenericNotify+0x28>
    2eaa:	83 a5       	ldd	r24, Z+43	; 0x2b
    2eac:	94 a5       	ldd	r25, Z+44	; 0x2c
    2eae:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2eb0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2eb2:	e8 01       	movw	r28, r16
    2eb4:	88 83       	st	Y, r24
    2eb6:	99 83       	std	Y+1, r25	; 0x01
    2eb8:	aa 83       	std	Y+2, r26	; 0x02
    2eba:	bb 83       	std	Y+3, r27	; 0x03
    2ebc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ebe:	92 e0       	ldi	r25, 0x02	; 2
    2ec0:	97 a7       	std	Z+47, r25	; 0x2f
    2ec2:	22 30       	cpi	r18, 0x02	; 2
    2ec4:	b1 f0       	breq	.+44     	; 0x2ef2 <xTaskGenericNotify+0x5e>
    2ec6:	18 f4       	brcc	.+6      	; 0x2ece <xTaskGenericNotify+0x3a>
    2ec8:	21 30       	cpi	r18, 0x01	; 1
    2eca:	31 f0       	breq	.+12     	; 0x2ed8 <xTaskGenericNotify+0x44>
    2ecc:	2a c0       	rjmp	.+84     	; 0x2f22 <xTaskGenericNotify+0x8e>
    2ece:	23 30       	cpi	r18, 0x03	; 3
    2ed0:	e9 f0       	breq	.+58     	; 0x2f0c <xTaskGenericNotify+0x78>
    2ed2:	24 30       	cpi	r18, 0x04	; 4
    2ed4:	01 f1       	breq	.+64     	; 0x2f16 <xTaskGenericNotify+0x82>
    2ed6:	25 c0       	rjmp	.+74     	; 0x2f22 <xTaskGenericNotify+0x8e>
    2ed8:	03 a5       	ldd	r16, Z+43	; 0x2b
    2eda:	14 a5       	ldd	r17, Z+44	; 0x2c
    2edc:	25 a5       	ldd	r18, Z+45	; 0x2d
    2ede:	36 a5       	ldd	r19, Z+46	; 0x2e
    2ee0:	40 2b       	or	r20, r16
    2ee2:	51 2b       	or	r21, r17
    2ee4:	62 2b       	or	r22, r18
    2ee6:	73 2b       	or	r23, r19
    2ee8:	43 a7       	std	Z+43, r20	; 0x2b
    2eea:	54 a7       	std	Z+44, r21	; 0x2c
    2eec:	65 a7       	std	Z+45, r22	; 0x2d
    2eee:	76 a7       	std	Z+46, r23	; 0x2e
    2ef0:	18 c0       	rjmp	.+48     	; 0x2f22 <xTaskGenericNotify+0x8e>
    2ef2:	43 a5       	ldd	r20, Z+43	; 0x2b
    2ef4:	54 a5       	ldd	r21, Z+44	; 0x2c
    2ef6:	65 a5       	ldd	r22, Z+45	; 0x2d
    2ef8:	76 a5       	ldd	r23, Z+46	; 0x2e
    2efa:	4f 5f       	subi	r20, 0xFF	; 255
    2efc:	5f 4f       	sbci	r21, 0xFF	; 255
    2efe:	6f 4f       	sbci	r22, 0xFF	; 255
    2f00:	7f 4f       	sbci	r23, 0xFF	; 255
    2f02:	43 a7       	std	Z+43, r20	; 0x2b
    2f04:	54 a7       	std	Z+44, r21	; 0x2c
    2f06:	65 a7       	std	Z+45, r22	; 0x2d
    2f08:	76 a7       	std	Z+46, r23	; 0x2e
    2f0a:	0b c0       	rjmp	.+22     	; 0x2f22 <xTaskGenericNotify+0x8e>
    2f0c:	43 a7       	std	Z+43, r20	; 0x2b
    2f0e:	54 a7       	std	Z+44, r21	; 0x2c
    2f10:	65 a7       	std	Z+45, r22	; 0x2d
    2f12:	76 a7       	std	Z+46, r23	; 0x2e
    2f14:	06 c0       	rjmp	.+12     	; 0x2f22 <xTaskGenericNotify+0x8e>
    2f16:	82 30       	cpi	r24, 0x02	; 2
    2f18:	49 f1       	breq	.+82     	; 0x2f6c <xTaskGenericNotify+0xd8>
    2f1a:	43 a7       	std	Z+43, r20	; 0x2b
    2f1c:	54 a7       	std	Z+44, r21	; 0x2c
    2f1e:	65 a7       	std	Z+45, r22	; 0x2d
    2f20:	76 a7       	std	Z+46, r23	; 0x2e
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	29 f5       	brne	.+74     	; 0x2f70 <xTaskGenericNotify+0xdc>
    2f26:	ef 01       	movw	r28, r30
    2f28:	8f 01       	movw	r16, r30
    2f2a:	0e 5f       	subi	r16, 0xFE	; 254
    2f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2e:	c8 01       	movw	r24, r16
    2f30:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    2f34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f36:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    2f3a:	98 17       	cp	r25, r24
    2f3c:	10 f4       	brcc	.+4      	; 0x2f42 <xTaskGenericNotify+0xae>
    2f3e:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    2f42:	2b e0       	ldi	r18, 0x0B	; 11
    2f44:	82 9f       	mul	r24, r18
    2f46:	c0 01       	movw	r24, r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	b8 01       	movw	r22, r16
    2f4c:	8a 5d       	subi	r24, 0xDA	; 218
    2f4e:	97 4e       	sbci	r25, 0xE7	; 231
    2f50:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    2f54:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    2f58:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    2f5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f60:	89 17       	cp	r24, r25
    2f62:	40 f4       	brcc	.+16     	; 0x2f74 <xTaskGenericNotify+0xe0>
    2f64:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	05 c0       	rjmp	.+10     	; 0x2f76 <xTaskGenericNotify+0xe2>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	03 c0       	rjmp	.+6      	; 0x2f76 <xTaskGenericNotify+0xe2>
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	01 c0       	rjmp	.+2      	; 0x2f76 <xTaskGenericNotify+0xe2>
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	0f 90       	pop	r0
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	08 95       	ret

00002f84 <xTaskGenericNotifyFromISR>:
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	fc 01       	movw	r30, r24
    2f92:	01 15       	cp	r16, r1
    2f94:	11 05       	cpc	r17, r1
    2f96:	49 f0       	breq	.+18     	; 0x2faa <xTaskGenericNotifyFromISR+0x26>
    2f98:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f9a:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f9c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f9e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fa0:	e8 01       	movw	r28, r16
    2fa2:	88 83       	st	Y, r24
    2fa4:	99 83       	std	Y+1, r25	; 0x01
    2fa6:	aa 83       	std	Y+2, r26	; 0x02
    2fa8:	bb 83       	std	Y+3, r27	; 0x03
    2faa:	87 a5       	ldd	r24, Z+47	; 0x2f
    2fac:	92 e0       	ldi	r25, 0x02	; 2
    2fae:	97 a7       	std	Z+47, r25	; 0x2f
    2fb0:	22 30       	cpi	r18, 0x02	; 2
    2fb2:	b1 f0       	breq	.+44     	; 0x2fe0 <xTaskGenericNotifyFromISR+0x5c>
    2fb4:	18 f4       	brcc	.+6      	; 0x2fbc <xTaskGenericNotifyFromISR+0x38>
    2fb6:	21 30       	cpi	r18, 0x01	; 1
    2fb8:	31 f0       	breq	.+12     	; 0x2fc6 <xTaskGenericNotifyFromISR+0x42>
    2fba:	2a c0       	rjmp	.+84     	; 0x3010 <xTaskGenericNotifyFromISR+0x8c>
    2fbc:	23 30       	cpi	r18, 0x03	; 3
    2fbe:	e9 f0       	breq	.+58     	; 0x2ffa <xTaskGenericNotifyFromISR+0x76>
    2fc0:	24 30       	cpi	r18, 0x04	; 4
    2fc2:	01 f1       	breq	.+64     	; 0x3004 <xTaskGenericNotifyFromISR+0x80>
    2fc4:	25 c0       	rjmp	.+74     	; 0x3010 <xTaskGenericNotifyFromISR+0x8c>
    2fc6:	03 a5       	ldd	r16, Z+43	; 0x2b
    2fc8:	14 a5       	ldd	r17, Z+44	; 0x2c
    2fca:	25 a5       	ldd	r18, Z+45	; 0x2d
    2fcc:	36 a5       	ldd	r19, Z+46	; 0x2e
    2fce:	40 2b       	or	r20, r16
    2fd0:	51 2b       	or	r21, r17
    2fd2:	62 2b       	or	r22, r18
    2fd4:	73 2b       	or	r23, r19
    2fd6:	43 a7       	std	Z+43, r20	; 0x2b
    2fd8:	54 a7       	std	Z+44, r21	; 0x2c
    2fda:	65 a7       	std	Z+45, r22	; 0x2d
    2fdc:	76 a7       	std	Z+46, r23	; 0x2e
    2fde:	18 c0       	rjmp	.+48     	; 0x3010 <xTaskGenericNotifyFromISR+0x8c>
    2fe0:	43 a5       	ldd	r20, Z+43	; 0x2b
    2fe2:	54 a5       	ldd	r21, Z+44	; 0x2c
    2fe4:	65 a5       	ldd	r22, Z+45	; 0x2d
    2fe6:	76 a5       	ldd	r23, Z+46	; 0x2e
    2fe8:	4f 5f       	subi	r20, 0xFF	; 255
    2fea:	5f 4f       	sbci	r21, 0xFF	; 255
    2fec:	6f 4f       	sbci	r22, 0xFF	; 255
    2fee:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff0:	43 a7       	std	Z+43, r20	; 0x2b
    2ff2:	54 a7       	std	Z+44, r21	; 0x2c
    2ff4:	65 a7       	std	Z+45, r22	; 0x2d
    2ff6:	76 a7       	std	Z+46, r23	; 0x2e
    2ff8:	0b c0       	rjmp	.+22     	; 0x3010 <xTaskGenericNotifyFromISR+0x8c>
    2ffa:	43 a7       	std	Z+43, r20	; 0x2b
    2ffc:	54 a7       	std	Z+44, r21	; 0x2c
    2ffe:	65 a7       	std	Z+45, r22	; 0x2d
    3000:	76 a7       	std	Z+46, r23	; 0x2e
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <xTaskGenericNotifyFromISR+0x8c>
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	d9 f1       	breq	.+118    	; 0x307e <xTaskGenericNotifyFromISR+0xfa>
    3008:	43 a7       	std	Z+43, r20	; 0x2b
    300a:	54 a7       	std	Z+44, r21	; 0x2c
    300c:	65 a7       	std	Z+45, r22	; 0x2d
    300e:	76 a7       	std	Z+46, r23	; 0x2e
    3010:	81 30       	cpi	r24, 0x01	; 1
    3012:	b9 f5       	brne	.+110    	; 0x3082 <xTaskGenericNotifyFromISR+0xfe>
    3014:	ef 01       	movw	r28, r30
    3016:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxSchedulerSuspended>
    301a:	81 11       	cpse	r24, r1
    301c:	17 c0       	rjmp	.+46     	; 0x304c <xTaskGenericNotifyFromISR+0xc8>
    301e:	8f 01       	movw	r16, r30
    3020:	0e 5f       	subi	r16, 0xFE	; 254
    3022:	1f 4f       	sbci	r17, 0xFF	; 255
    3024:	c8 01       	movw	r24, r16
    3026:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
    302a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    302c:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <uxTopReadyPriority>
    3030:	98 17       	cp	r25, r24
    3032:	10 f4       	brcc	.+4      	; 0x3038 <xTaskGenericNotifyFromISR+0xb4>
    3034:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTopReadyPriority>
    3038:	eb e0       	ldi	r30, 0x0B	; 11
    303a:	8e 9f       	mul	r24, r30
    303c:	c0 01       	movw	r24, r0
    303e:	11 24       	eor	r1, r1
    3040:	b8 01       	movw	r22, r16
    3042:	8a 5d       	subi	r24, 0xDA	; 218
    3044:	97 4e       	sbci	r25, 0xE7	; 231
    3046:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    304a:	07 c0       	rjmp	.+14     	; 0x305a <xTaskGenericNotifyFromISR+0xd6>
    304c:	bf 01       	movw	r22, r30
    304e:	62 5f       	subi	r22, 0xF2	; 242
    3050:	7f 4f       	sbci	r23, 0xFF	; 255
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	98 e1       	ldi	r25, 0x18	; 24
    3056:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsertEnd>
    305a:	e0 91 52 18 	lds	r30, 0x1852	; 0x801852 <pxCurrentTCB>
    305e:	f0 91 53 18 	lds	r31, 0x1853	; 0x801853 <pxCurrentTCB+0x1>
    3062:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3064:	82 8d       	ldd	r24, Z+26	; 0x1a
    3066:	89 17       	cp	r24, r25
    3068:	70 f4       	brcc	.+28     	; 0x3086 <xTaskGenericNotifyFromISR+0x102>
    306a:	e1 14       	cp	r14, r1
    306c:	f1 04       	cpc	r15, r1
    306e:	19 f0       	breq	.+6      	; 0x3076 <xTaskGenericNotifyFromISR+0xf2>
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	e7 01       	movw	r28, r14
    3074:	88 83       	st	Y, r24
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <xYieldPending>
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <xTaskGenericNotifyFromISR+0x104>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	03 c0       	rjmp	.+6      	; 0x3088 <xTaskGenericNotifyFromISR+0x104>
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <xTaskGenericNotifyFromISR+0x104>
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	08 95       	ret

00003096 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	21 f4       	brne	.+8      	; 0x30a2 <xTaskNotifyStateClear+0xc>
    309a:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <pxCurrentTCB>
    309e:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    30a8:	fc 01       	movw	r30, r24
    30aa:	27 a5       	ldd	r18, Z+47	; 0x2f
    30ac:	22 30       	cpi	r18, 0x02	; 2
    30ae:	19 f4       	brne	.+6      	; 0x30b6 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    30b0:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    30b6:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    30bc:	08 95       	ret

000030be <prvInsertTimerInActiveList>:
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	fc 01       	movw	r30, r24
    30cc:	42 83       	std	Z+2, r20	; 0x02
    30ce:	53 83       	std	Z+3, r21	; 0x03
    30d0:	64 83       	std	Z+4, r22	; 0x04
    30d2:	75 83       	std	Z+5, r23	; 0x05
    30d4:	93 87       	std	Z+11, r25	; 0x0b
    30d6:	82 87       	std	Z+10, r24	; 0x0a
    30d8:	04 17       	cp	r16, r20
    30da:	15 07       	cpc	r17, r21
    30dc:	26 07       	cpc	r18, r22
    30de:	37 07       	cpc	r19, r23
    30e0:	c0 f0       	brcs	.+48     	; 0x3112 <prvInsertTimerInActiveList+0x54>
    30e2:	0c 19       	sub	r16, r12
    30e4:	1d 09       	sbc	r17, r13
    30e6:	2e 09       	sbc	r18, r14
    30e8:	3f 09       	sbc	r19, r15
    30ea:	86 85       	ldd	r24, Z+14	; 0x0e
    30ec:	97 85       	ldd	r25, Z+15	; 0x0f
    30ee:	a0 89       	ldd	r26, Z+16	; 0x10
    30f0:	b1 89       	ldd	r27, Z+17	; 0x11
    30f2:	08 17       	cp	r16, r24
    30f4:	19 07       	cpc	r17, r25
    30f6:	2a 07       	cpc	r18, r26
    30f8:	3b 07       	cpc	r19, r27
    30fa:	00 f5       	brcc	.+64     	; 0x313c <prvInsertTimerInActiveList+0x7e>
    30fc:	bf 01       	movw	r22, r30
    30fe:	6e 5f       	subi	r22, 0xFE	; 254
    3100:	7f 4f       	sbci	r23, 0xFF	; 255
    3102:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <pxOverflowTimerList>
    3106:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <pxOverflowTimerList+0x1>
    310a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vListInsert>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	18 c0       	rjmp	.+48     	; 0x3142 <prvInsertTimerInActiveList+0x84>
    3112:	0c 15       	cp	r16, r12
    3114:	1d 05       	cpc	r17, r13
    3116:	2e 05       	cpc	r18, r14
    3118:	3f 05       	cpc	r19, r15
    311a:	28 f4       	brcc	.+10     	; 0x3126 <prvInsertTimerInActiveList+0x68>
    311c:	4c 15       	cp	r20, r12
    311e:	5d 05       	cpc	r21, r13
    3120:	6e 05       	cpc	r22, r14
    3122:	7f 05       	cpc	r23, r15
    3124:	68 f4       	brcc	.+26     	; 0x3140 <prvInsertTimerInActiveList+0x82>
    3126:	bf 01       	movw	r22, r30
    3128:	6e 5f       	subi	r22, 0xFE	; 254
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <pxCurrentTimerList>
    3130:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <pxCurrentTimerList+0x1>
    3134:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vListInsert>
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <prvInsertTimerInActiveList+0x84>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	01 c0       	rjmp	.+2      	; 0x3142 <prvInsertTimerInActiveList+0x84>
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	ff 90       	pop	r15
    3148:	ef 90       	pop	r14
    314a:	df 90       	pop	r13
    314c:	cf 90       	pop	r12
    314e:	08 95       	ret

00003150 <prvCheckForValidListAndQueue>:
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	0f 92       	push	r0
    3156:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTimerQueue>
    315a:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTimerQueue+0x1>
    315e:	89 2b       	or	r24, r25
    3160:	e9 f4       	brne	.+58     	; 0x319c <prvCheckForValidListAndQueue+0x4c>
    3162:	8b e6       	ldi	r24, 0x6B	; 107
    3164:	98 e1       	ldi	r25, 0x18	; 24
    3166:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    316a:	80 e6       	ldi	r24, 0x60	; 96
    316c:	98 e1       	ldi	r25, 0x18	; 24
    316e:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    3172:	8b e6       	ldi	r24, 0x6B	; 107
    3174:	98 e1       	ldi	r25, 0x18	; 24
    3176:	90 93 5f 18 	sts	0x185F, r25	; 0x80185f <pxCurrentTimerList+0x1>
    317a:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <pxCurrentTimerList>
    317e:	80 e6       	ldi	r24, 0x60	; 96
    3180:	98 e1       	ldi	r25, 0x18	; 24
    3182:	90 93 5d 18 	sts	0x185D, r25	; 0x80185d <pxOverflowTimerList+0x1>
    3186:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <pxOverflowTimerList>
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	67 e0       	ldi	r22, 0x07	; 7
    318e:	8a e0       	ldi	r24, 0x0A	; 10
    3190:	0e 94 47 0c 	call	0x188e	; 0x188e <xQueueGenericCreate>
    3194:	90 93 5b 18 	sts	0x185B, r25	; 0x80185b <xTimerQueue+0x1>
    3198:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <xTimerQueue>
    319c:	0f 90       	pop	r0
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	08 95       	ret

000031a2 <xTimerCreateTimerTask>:
    31a2:	ef 92       	push	r14
    31a4:	ff 92       	push	r15
    31a6:	0f 93       	push	r16
    31a8:	d3 df       	rcall	.-90     	; 0x3150 <prvCheckForValidListAndQueue>
    31aa:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTimerQueue>
    31ae:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTimerQueue+0x1>
    31b2:	89 2b       	or	r24, r25
    31b4:	89 f0       	breq	.+34     	; 0x31d8 <xTimerCreateTimerTask+0x36>
    31b6:	0f 2e       	mov	r0, r31
    31b8:	f8 e5       	ldi	r31, 0x58	; 88
    31ba:	ef 2e       	mov	r14, r31
    31bc:	f8 e1       	ldi	r31, 0x18	; 24
    31be:	ff 2e       	mov	r15, r31
    31c0:	f0 2d       	mov	r31, r0
    31c2:	03 e0       	ldi	r16, 0x03	; 3
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	45 e5       	ldi	r20, 0x55	; 85
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	65 e7       	ldi	r22, 0x75	; 117
    31ce:	74 e0       	ldi	r23, 0x04	; 4
    31d0:	85 e0       	ldi	r24, 0x05	; 5
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	b1 d8       	rcall	.-3742   	; 0x2338 <xTaskCreate>
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <xTimerCreateTimerTask+0x38>
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	08 95       	ret

000031e2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    31e2:	8f 92       	push	r8
    31e4:	9f 92       	push	r9
    31e6:	af 92       	push	r10
    31e8:	bf 92       	push	r11
    31ea:	cf 92       	push	r12
    31ec:	df 92       	push	r13
    31ee:	ef 92       	push	r14
    31f0:	ff 92       	push	r15
    31f2:	0f 93       	push	r16
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	27 97       	sbiw	r28, 0x07	; 7
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    320a:	e0 91 5a 18 	lds	r30, 0x185A	; 0x80185a <xTimerQueue>
    320e:	f0 91 5b 18 	lds	r31, 0x185B	; 0x80185b <xTimerQueue+0x1>
    3212:	30 97       	sbiw	r30, 0x00	; 0
    3214:	81 f1       	breq	.+96     	; 0x3276 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3216:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3218:	2a 83       	std	Y+2, r18	; 0x02
    321a:	3b 83       	std	Y+3, r19	; 0x03
    321c:	4c 83       	std	Y+4, r20	; 0x04
    321e:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3220:	9f 83       	std	Y+7, r25	; 0x07
    3222:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3224:	66 30       	cpi	r22, 0x06	; 6
    3226:	f4 f4       	brge	.+60     	; 0x3264 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3228:	35 dd       	rcall	.-1430   	; 0x2c94 <xTaskGetSchedulerState>
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	69 f4       	brne	.+26     	; 0x3248 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    322e:	00 e0       	ldi	r16, 0x00	; 0
    3230:	a7 01       	movw	r20, r14
    3232:	96 01       	movw	r18, r12
    3234:	be 01       	movw	r22, r28
    3236:	6f 5f       	subi	r22, 0xFF	; 255
    3238:	7f 4f       	sbci	r23, 0xFF	; 255
    323a:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTimerQueue>
    323e:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTimerQueue+0x1>
    3242:	0e 94 75 0c 	call	0x18ea	; 0x18ea <xQueueGenericSend>
    3246:	18 c0       	rjmp	.+48     	; 0x3278 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3248:	00 e0       	ldi	r16, 0x00	; 0
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	a9 01       	movw	r20, r18
    3250:	be 01       	movw	r22, r28
    3252:	6f 5f       	subi	r22, 0xFF	; 255
    3254:	7f 4f       	sbci	r23, 0xFF	; 255
    3256:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <xTimerQueue>
    325a:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <xTimerQueue+0x1>
    325e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <xQueueGenericSend>
    3262:	0a c0       	rjmp	.+20     	; 0x3278 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	a8 01       	movw	r20, r16
    3268:	be 01       	movw	r22, r28
    326a:	6f 5f       	subi	r22, 0xFF	; 255
    326c:	7f 4f       	sbci	r23, 0xFF	; 255
    326e:	cf 01       	movw	r24, r30
    3270:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueGenericSendFromISR>
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3276:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3278:	27 96       	adiw	r28, 0x07	; 7
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	ff 90       	pop	r15
    328e:	ef 90       	pop	r14
    3290:	df 90       	pop	r13
    3292:	cf 90       	pop	r12
    3294:	bf 90       	pop	r11
    3296:	af 90       	pop	r10
    3298:	9f 90       	pop	r9
    329a:	8f 90       	pop	r8
    329c:	08 95       	ret

0000329e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    329e:	2f 92       	push	r2
    32a0:	3f 92       	push	r3
    32a2:	4f 92       	push	r4
    32a4:	5f 92       	push	r5
    32a6:	6f 92       	push	r6
    32a8:	7f 92       	push	r7
    32aa:	8f 92       	push	r8
    32ac:	9f 92       	push	r9
    32ae:	af 92       	push	r10
    32b0:	bf 92       	push	r11
    32b2:	cf 92       	push	r12
    32b4:	df 92       	push	r13
    32b6:	ef 92       	push	r14
    32b8:	ff 92       	push	r15
    32ba:	0f 93       	push	r16
    32bc:	1f 93       	push	r17
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    32c4:	9a d9       	rcall	.-3276   	; 0x25fa <xTaskGetTickCount>
    32c6:	2b 01       	movw	r4, r22
    32c8:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    32ca:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <xLastTime.2432>
    32ce:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <xLastTime.2432+0x1>
    32d2:	a0 91 56 18 	lds	r26, 0x1856	; 0x801856 <xLastTime.2432+0x2>
    32d6:	b0 91 57 18 	lds	r27, 0x1857	; 0x801857 <xLastTime.2432+0x3>
    32da:	48 16       	cp	r4, r24
    32dc:	59 06       	cpc	r5, r25
    32de:	6a 06       	cpc	r6, r26
    32e0:	7b 06       	cpc	r7, r27
    32e2:	08 f0       	brcs	.+2      	; 0x32e6 <prvSampleTimeNow+0x48>
    32e4:	53 c0       	rjmp	.+166    	; 0x338c <prvSampleTimeNow+0xee>
    32e6:	3b c0       	rjmp	.+118    	; 0x335e <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    32e8:	07 80       	ldd	r0, Z+7	; 0x07
    32ea:	f0 85       	ldd	r31, Z+8	; 0x08
    32ec:	e0 2d       	mov	r30, r0
    32ee:	80 80       	ld	r8, Z
    32f0:	91 80       	ldd	r9, Z+1	; 0x01
    32f2:	a2 80       	ldd	r10, Z+2	; 0x02
    32f4:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    32f6:	c0 85       	ldd	r28, Z+8	; 0x08
    32f8:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32fa:	8e 01       	movw	r16, r28
    32fc:	0e 5f       	subi	r16, 0xFE	; 254
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	c8 01       	movw	r24, r16
    3302:	0e 94 96 09 	call	0x132c	; 0x132c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3306:	ec 89       	ldd	r30, Y+20	; 0x14
    3308:	fd 89       	ldd	r31, Y+21	; 0x15
    330a:	ce 01       	movw	r24, r28
    330c:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    330e:	8f 89       	ldd	r24, Y+23	; 0x17
    3310:	82 ff       	sbrs	r24, 2
    3312:	25 c0       	rjmp	.+74     	; 0x335e <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3314:	8e 85       	ldd	r24, Y+14	; 0x0e
    3316:	9f 85       	ldd	r25, Y+15	; 0x0f
    3318:	a8 89       	ldd	r26, Y+16	; 0x10
    331a:	b9 89       	ldd	r27, Y+17	; 0x11
    331c:	88 0d       	add	r24, r8
    331e:	99 1d       	adc	r25, r9
    3320:	aa 1d       	adc	r26, r10
    3322:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3324:	88 16       	cp	r8, r24
    3326:	99 06       	cpc	r9, r25
    3328:	aa 06       	cpc	r10, r26
    332a:	bb 06       	cpc	r11, r27
    332c:	70 f4       	brcc	.+28     	; 0x334a <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	9b 83       	std	Y+3, r25	; 0x03
    3332:	ac 83       	std	Y+4, r26	; 0x04
    3334:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3336:	db 87       	std	Y+11, r29	; 0x0b
    3338:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    333a:	b8 01       	movw	r22, r16
    333c:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <pxCurrentTimerList>
    3340:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <pxCurrentTimerList+0x1>
    3344:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vListInsert>
    3348:	0a c0       	rjmp	.+20     	; 0x335e <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    334a:	c1 2c       	mov	r12, r1
    334c:	d1 2c       	mov	r13, r1
    334e:	76 01       	movw	r14, r12
    3350:	00 e0       	ldi	r16, 0x00	; 0
    3352:	10 e0       	ldi	r17, 0x00	; 0
    3354:	a5 01       	movw	r20, r10
    3356:	94 01       	movw	r18, r8
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	ce 01       	movw	r24, r28
    335c:	42 df       	rcall	.-380    	; 0x31e2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    335e:	e0 91 5e 18 	lds	r30, 0x185E	; 0x80185e <pxCurrentTimerList>
    3362:	f0 91 5f 18 	lds	r31, 0x185F	; 0x80185f <pxCurrentTimerList+0x1>
    3366:	80 81       	ld	r24, Z
    3368:	81 11       	cpse	r24, r1
    336a:	be cf       	rjmp	.-132    	; 0x32e8 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    336c:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <pxOverflowTimerList>
    3370:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <pxOverflowTimerList+0x1>
    3374:	90 93 5f 18 	sts	0x185F, r25	; 0x80185f <pxCurrentTimerList+0x1>
    3378:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    337c:	f0 93 5d 18 	sts	0x185D, r31	; 0x80185d <pxOverflowTimerList+0x1>
    3380:	e0 93 5c 18 	sts	0x185C, r30	; 0x80185c <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	f1 01       	movw	r30, r2
    3388:	80 83       	st	Z, r24
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    338c:	f1 01       	movw	r30, r2
    338e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3390:	40 92 54 18 	sts	0x1854, r4	; 0x801854 <xLastTime.2432>
    3394:	50 92 55 18 	sts	0x1855, r5	; 0x801855 <xLastTime.2432+0x1>
    3398:	60 92 56 18 	sts	0x1856, r6	; 0x801856 <xLastTime.2432+0x2>
    339c:	70 92 57 18 	sts	0x1857, r7	; 0x801857 <xLastTime.2432+0x3>

    return xTimeNow;
}
    33a0:	c3 01       	movw	r24, r6
    33a2:	b2 01       	movw	r22, r4
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	bf 90       	pop	r11
    33b6:	af 90       	pop	r10
    33b8:	9f 90       	pop	r9
    33ba:	8f 90       	pop	r8
    33bc:	7f 90       	pop	r7
    33be:	6f 90       	pop	r6
    33c0:	5f 90       	pop	r5
    33c2:	4f 90       	pop	r4
    33c4:	3f 90       	pop	r3
    33c6:	2f 90       	pop	r2
    33c8:	08 95       	ret

000033ca <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    33ca:	08 95       	ret

000033cc <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    33cc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33ce:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33d0:	2f ef       	ldi	r18, 0xFF	; 255
    33d2:	80 e7       	ldi	r24, 0x70	; 112
    33d4:	92 e0       	ldi	r25, 0x02	; 2
    33d6:	21 50       	subi	r18, 0x01	; 1
    33d8:	80 40       	sbci	r24, 0x00	; 0
    33da:	90 40       	sbci	r25, 0x00	; 0
    33dc:	e1 f7       	brne	.-8      	; 0x33d6 <vApplicationMallocFailedHook+0xa>
    33de:	00 c0       	rjmp	.+0      	; 0x33e0 <vApplicationMallocFailedHook+0x14>
    33e0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    33e2:	1f 9a       	sbi	0x03, 7	; 3
    33e4:	f5 cf       	rjmp	.-22     	; 0x33d0 <vApplicationMallocFailedHook+0x4>

000033e6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    33e6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33e8:	2f 9a       	sbi	0x05, 7	; 5
    33ea:	2f ef       	ldi	r18, 0xFF	; 255
    33ec:	87 ea       	ldi	r24, 0xA7	; 167
    33ee:	91 e6       	ldi	r25, 0x61	; 97
    33f0:	21 50       	subi	r18, 0x01	; 1
    33f2:	80 40       	sbci	r24, 0x00	; 0
    33f4:	90 40       	sbci	r25, 0x00	; 0
    33f6:	e1 f7       	brne	.-8      	; 0x33f0 <vApplicationStackOverflowHook+0xa>
    33f8:	00 c0       	rjmp	.+0      	; 0x33fa <vApplicationStackOverflowHook+0x14>
    33fa:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    33fc:	1f 9a       	sbi	0x03, 7	; 3
    33fe:	f5 cf       	rjmp	.-22     	; 0x33ea <vApplicationStackOverflowHook+0x4>

00003400 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3400:	81 b1       	in	r24, 0x01	; 1
    3402:	81 68       	ori	r24, 0x81	; 129
    3404:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    3406:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <stdioCreate>
	// Let's create some tasks
	
	printf("Yabababababaduuuuuuuuuuuuuuuu");
    3410:	89 e8       	ldi	r24, 0x89	; 137
    3412:	94 e0       	ldi	r25, 0x04	; 4
    3414:	9f 93       	push	r25
    3416:	8f 93       	push	r24
    3418:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <printf>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    341c:	85 e0       	ldi	r24, 0x05	; 5
    341e:	eb d0       	rcall	.+470    	; 0x35f6 <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	71 d4       	rcall	.+2274   	; 0x3d0a <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3 
}
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	08 95       	ret

0000342e <doStuff>:
{
	uint16_t hum = 1234;
	uint16_t temp = 5678;


	payload.bytes[0] = hum >> 8;
    342e:	ed ec       	ldi	r30, 0xCD	; 205
    3430:	f9 e1       	ldi	r31, 0x19	; 25
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	82 83       	std	Z+2, r24	; 0x02
	payload.bytes[1] = hum & 0xFF;
    3436:	82 ed       	ldi	r24, 0xD2	; 210
    3438:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = temp >> 8;
    343a:	96 e1       	ldi	r25, 0x16	; 22
    343c:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = hum & 0xFF;
    343e:	85 83       	std	Z+5, r24	; 0x05
    3440:	08 95       	ret

00003442 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3442:	8f 92       	push	r8
    3444:	9f 92       	push	r9
    3446:	af 92       	push	r10
    3448:	bf 92       	push	r11
    344a:	cf 92       	push	r12
    344c:	df 92       	push	r13
    344e:	ef 92       	push	r14
    3450:	ff 92       	push	r15
    3452:	0f 93       	push	r16
    3454:	1f 93       	push	r17
    3456:	cf 93       	push	r28
    3458:	df 93       	push	r29
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    345a:	80 91 cb 19 	lds	r24, 0x19CB	; 0x8019cb <xTestSemaphore>
    345e:	90 91 cc 19 	lds	r25, 0x19CC	; 0x8019cc <xTestSemaphore+0x1>
    3462:	89 2b       	or	r24, r25
    3464:	89 f4       	brne	.+34     	; 0x3488 <create_tasks_and_semaphores+0x46>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <xQueueCreateMutex>
    346c:	90 93 cc 19 	sts	0x19CC, r25	; 0x8019cc <xTestSemaphore+0x1>
    3470:	80 93 cb 19 	sts	0x19CB, r24	; 0x8019cb <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	41 f0       	breq	.+16     	; 0x3488 <create_tasks_and_semaphores+0x46>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3478:	00 e0       	ldi	r16, 0x00	; 0
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	a9 01       	movw	r20, r18
    3480:	60 e0       	ldi	r22, 0x00	; 0
    3482:	70 e0       	ldi	r23, 0x00	; 0
    3484:	0e 94 75 0c 	call	0x18ea	; 0x18ea <xQueueGenericSend>
		}
	}
	
	startMeasureEventGroup = xEventGroupCreate();
    3488:	0e 94 80 06 	call	0xd00	; 0xd00 <xEventGroupCreate>
    348c:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <startMeasureEventGroup+0x1>
    3490:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3494:	0e 94 80 06 	call	0xd00	; 0xd00 <xEventGroupCreate>
    3498:	90 93 ca 19 	sts	0x19CA, r25	; 0x8019ca <readyEventGroup+0x1>
    349c:	80 93 c9 19 	sts	0x19C9, r24	; 0x8019c9 <readyEventGroup>

	xMessageBuffer = xMessageBufferCreate(100);
    34a0:	41 e0       	ldi	r20, 0x01	; 1
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	70 e0       	ldi	r23, 0x00	; 0
    34a6:	84 e6       	ldi	r24, 0x64	; 100
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xStreamBufferGenericCreate>
    34ae:	90 93 c8 19 	sts	0x19C8, r25	; 0x8019c8 <xMessageBuffer+0x1>
    34b2:	80 93 c7 19 	sts	0x19C7, r24	; 0x8019c7 <xMessageBuffer>
	lora_UpLinkHandler_create(TASK_LORA_DRIVER_PRIORITY,xMessageBuffer);
    34b6:	bc 01       	movw	r22, r24
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	0e 94 44 05 	call	0xa88	; 0xa88 <lora_UpLinkHandler_create>

	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    34be:	e0 90 c9 19 	lds	r14, 0x19C9	; 0x8019c9 <readyEventGroup>
    34c2:	f0 90 ca 19 	lds	r15, 0x19CA	; 0x8019ca <readyEventGroup+0x1>
    34c6:	40 91 e3 19 	lds	r20, 0x19E3	; 0x8019e3 <startMeasureEventGroup>
    34ca:	50 91 e4 19 	lds	r21, 0x19E4	; 0x8019e4 <startMeasureEventGroup+0x1>
    34ce:	a1 2c       	mov	r10, r1
    34d0:	b1 2c       	mov	r11, r1
    34d2:	65 01       	movw	r12, r10
    34d4:	68 94       	set
    34d6:	a4 f8       	bld	r10, 4
    34d8:	01 e0       	ldi	r16, 0x01	; 1
    34da:	10 e0       	ldi	r17, 0x00	; 0
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	60 ec       	ldi	r22, 0xC0	; 192
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <humAndTempReader_create>
    34e8:	c8 2f       	mov	r28, r24
    34ea:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    34ec:	e0 90 c9 19 	lds	r14, 0x19C9	; 0x8019c9 <readyEventGroup>
    34f0:	f0 90 ca 19 	lds	r15, 0x19CA	; 0x8019ca <readyEventGroup+0x1>
    34f4:	40 91 e3 19 	lds	r20, 0x19E3	; 0x8019e3 <startMeasureEventGroup>
    34f8:	50 91 e4 19 	lds	r21, 0x19E4	; 0x8019e4 <startMeasureEventGroup+0x1>
    34fc:	a1 2c       	mov	r10, r1
    34fe:	b1 2c       	mov	r11, r1
    3500:	65 01       	movw	r12, r10
    3502:	68 94       	set
    3504:	a5 f8       	bld	r10, 5
    3506:	02 e0       	ldi	r16, 0x02	; 2
    3508:	10 e0       	ldi	r17, 0x00	; 0
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	60 ec       	ldi	r22, 0xC0	; 192
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	0e 94 6f 02 	call	0x4de	; 0x4de <co2Reader_create>
	readyEventGroup, BIT_DONE_MEASURE_CO2);

	device_t device = device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3516:	e0 90 c9 19 	lds	r14, 0x19C9	; 0x8019c9 <readyEventGroup>
    351a:	f0 90 ca 19 	lds	r15, 0x19CA	; 0x8019ca <readyEventGroup+0x1>
    351e:	40 91 e3 19 	lds	r20, 0x19E3	; 0x8019e3 <startMeasureEventGroup>
    3522:	50 91 e4 19 	lds	r21, 0x19E4	; 0x8019e4 <startMeasureEventGroup+0x1>
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	4c 01       	movw	r8, r24
    352c:	0f 2e       	mov	r0, r31
    352e:	f0 e3       	ldi	r31, 0x30	; 48
    3530:	af 2e       	mov	r10, r31
    3532:	b1 2c       	mov	r11, r1
    3534:	c1 2c       	mov	r12, r1
    3536:	d1 2c       	mov	r13, r1
    3538:	f0 2d       	mov	r31, r0
    353a:	03 e0       	ldi	r16, 0x03	; 3
    353c:	10 e0       	ldi	r17, 0x00	; 0
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	60 ec       	ldi	r22, 0xC0	; 192
    3544:	82 e0       	ldi	r24, 0x02	; 2
    3546:	0e 94 44 03 	call	0x688	; 0x688 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature);
	
	doStuff();
    354a:	71 df       	rcall	.-286    	; 0x342e <doStuff>
	//,  (const portCHAR *)"Task2"  // A name just for humans
	//,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	//,  NULL
	//,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	//,  NULL );
}
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	0f 91       	pop	r16
    3558:	ff 90       	pop	r15
    355a:	ef 90       	pop	r14
    355c:	df 90       	pop	r13
    355e:	cf 90       	pop	r12
    3560:	bf 90       	pop	r11
    3562:	af 90       	pop	r10
    3564:	9f 90       	pop	r9
    3566:	8f 90       	pop	r8
    3568:	08 95       	ret

0000356a <main>:
	payload.bytes[3] = hum & 0xFF;
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    356a:	4a df       	rcall	.-364    	; 0x3400 <initialiseSystem>
	printf("Program Started!!\n");
    356c:	87 ea       	ldi	r24, 0xA7	; 167
    356e:	94 e0       	ldi	r25, 0x04	; 4
    3570:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <puts>
	create_tasks_and_semaphores();
    3574:	66 df       	rcall	.-308    	; 0x3442 <create_tasks_and_semaphores>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3576:	0e 94 bb 12 	call	0x2576	; 0x2576 <vTaskStartScheduler>
    357a:	ff cf       	rjmp	.-2      	; 0x357a <main+0x10>

0000357c <__floatunsisf>:
    357c:	e8 94       	clt
    357e:	09 c0       	rjmp	.+18     	; 0x3592 <__floatsisf+0x12>

00003580 <__floatsisf>:
    3580:	97 fb       	bst	r25, 7
    3582:	3e f4       	brtc	.+14     	; 0x3592 <__floatsisf+0x12>
    3584:	90 95       	com	r25
    3586:	80 95       	com	r24
    3588:	70 95       	com	r23
    358a:	61 95       	neg	r22
    358c:	7f 4f       	sbci	r23, 0xFF	; 255
    358e:	8f 4f       	sbci	r24, 0xFF	; 255
    3590:	9f 4f       	sbci	r25, 0xFF	; 255
    3592:	99 23       	and	r25, r25
    3594:	a9 f0       	breq	.+42     	; 0x35c0 <__floatsisf+0x40>
    3596:	f9 2f       	mov	r31, r25
    3598:	96 e9       	ldi	r25, 0x96	; 150
    359a:	bb 27       	eor	r27, r27
    359c:	93 95       	inc	r25
    359e:	f6 95       	lsr	r31
    35a0:	87 95       	ror	r24
    35a2:	77 95       	ror	r23
    35a4:	67 95       	ror	r22
    35a6:	b7 95       	ror	r27
    35a8:	f1 11       	cpse	r31, r1
    35aa:	f8 cf       	rjmp	.-16     	; 0x359c <__floatsisf+0x1c>
    35ac:	fa f4       	brpl	.+62     	; 0x35ec <__floatsisf+0x6c>
    35ae:	bb 0f       	add	r27, r27
    35b0:	11 f4       	brne	.+4      	; 0x35b6 <__floatsisf+0x36>
    35b2:	60 ff       	sbrs	r22, 0
    35b4:	1b c0       	rjmp	.+54     	; 0x35ec <__floatsisf+0x6c>
    35b6:	6f 5f       	subi	r22, 0xFF	; 255
    35b8:	7f 4f       	sbci	r23, 0xFF	; 255
    35ba:	8f 4f       	sbci	r24, 0xFF	; 255
    35bc:	9f 4f       	sbci	r25, 0xFF	; 255
    35be:	16 c0       	rjmp	.+44     	; 0x35ec <__floatsisf+0x6c>
    35c0:	88 23       	and	r24, r24
    35c2:	11 f0       	breq	.+4      	; 0x35c8 <__floatsisf+0x48>
    35c4:	96 e9       	ldi	r25, 0x96	; 150
    35c6:	11 c0       	rjmp	.+34     	; 0x35ea <__floatsisf+0x6a>
    35c8:	77 23       	and	r23, r23
    35ca:	21 f0       	breq	.+8      	; 0x35d4 <__floatsisf+0x54>
    35cc:	9e e8       	ldi	r25, 0x8E	; 142
    35ce:	87 2f       	mov	r24, r23
    35d0:	76 2f       	mov	r23, r22
    35d2:	05 c0       	rjmp	.+10     	; 0x35de <__floatsisf+0x5e>
    35d4:	66 23       	and	r22, r22
    35d6:	71 f0       	breq	.+28     	; 0x35f4 <__floatsisf+0x74>
    35d8:	96 e8       	ldi	r25, 0x86	; 134
    35da:	86 2f       	mov	r24, r22
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	2a f0       	brmi	.+10     	; 0x35ec <__floatsisf+0x6c>
    35e2:	9a 95       	dec	r25
    35e4:	66 0f       	add	r22, r22
    35e6:	77 1f       	adc	r23, r23
    35e8:	88 1f       	adc	r24, r24
    35ea:	da f7       	brpl	.-10     	; 0x35e2 <__floatsisf+0x62>
    35ec:	88 0f       	add	r24, r24
    35ee:	96 95       	lsr	r25
    35f0:	87 95       	ror	r24
    35f2:	97 f9       	bld	r25, 7
    35f4:	08 95       	ret

000035f6 <hal_create>:
    35f6:	e5 ee       	ldi	r30, 0xE5	; 229
    35f8:	f9 e1       	ldi	r31, 0x19	; 25
    35fa:	2a ed       	ldi	r18, 0xDA	; 218
    35fc:	31 e2       	ldi	r19, 0x21	; 33
    35fe:	31 83       	std	Z+1, r19	; 0x01
    3600:	20 83       	st	Z, r18
    3602:	2d ed       	ldi	r18, 0xDD	; 221
    3604:	31 e2       	ldi	r19, 0x21	; 33
    3606:	33 83       	std	Z+3, r19	; 0x03
    3608:	22 83       	std	Z+2, r18	; 0x02
    360a:	28 ee       	ldi	r18, 0xE8	; 232
    360c:	31 e2       	ldi	r19, 0x21	; 33
    360e:	35 83       	std	Z+5, r19	; 0x05
    3610:	24 83       	std	Z+4, r18	; 0x04
    3612:	2c ee       	ldi	r18, 0xEC	; 236
    3614:	31 e2       	ldi	r19, 0x21	; 33
    3616:	37 83       	std	Z+7, r19	; 0x07
    3618:	26 83       	std	Z+6, r18	; 0x06
    361a:	22 ef       	ldi	r18, 0xF2	; 242
    361c:	31 e2       	ldi	r19, 0x21	; 33
    361e:	31 87       	std	Z+9, r19	; 0x09
    3620:	20 87       	std	Z+8, r18	; 0x08
    3622:	2e ef       	ldi	r18, 0xFE	; 254
    3624:	31 e2       	ldi	r19, 0x21	; 33
    3626:	33 87       	std	Z+11, r19	; 0x0b
    3628:	22 87       	std	Z+10, r18	; 0x0a
    362a:	23 e0       	ldi	r18, 0x03	; 3
    362c:	32 e2       	ldi	r19, 0x22	; 34
    362e:	35 87       	std	Z+13, r19	; 0x0d
    3630:	24 87       	std	Z+12, r18	; 0x0c
    3632:	2f e0       	ldi	r18, 0x0F	; 15
    3634:	32 e2       	ldi	r19, 0x22	; 34
    3636:	37 87       	std	Z+15, r19	; 0x0f
    3638:	26 87       	std	Z+14, r18	; 0x0e
    363a:	2f ee       	ldi	r18, 0xEF	; 239
    363c:	31 e2       	ldi	r19, 0x21	; 33
    363e:	31 8b       	std	Z+17, r19	; 0x11
    3640:	20 8b       	std	Z+16, r18	; 0x10
    3642:	24 e1       	ldi	r18, 0x14	; 20
    3644:	32 e2       	ldi	r19, 0x22	; 34
    3646:	33 8b       	std	Z+19, r19	; 0x13
    3648:	22 8b       	std	Z+18, r18	; 0x12
    364a:	21 e2       	ldi	r18, 0x21	; 33
    364c:	32 e2       	ldi	r19, 0x22	; 34
    364e:	35 8b       	std	Z+21, r19	; 0x15
    3650:	24 8b       	std	Z+20, r18	; 0x14
    3652:	68 2f       	mov	r22, r24
    3654:	cf 01       	movw	r24, r30
    3656:	25 c1       	rjmp	.+586    	; 0x38a2 <led_create>
    3658:	08 95       	ret

0000365a <_hihTwiCallback>:
    365a:	65 30       	cpi	r22, 0x05	; 5
    365c:	f1 f4       	brne	.+60     	; 0x369a <_hihTwiCallback+0x40>
    365e:	fa 01       	movw	r30, r20
    3660:	80 81       	ld	r24, Z
    3662:	8f 73       	andi	r24, 0x3F	; 63
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	98 2f       	mov	r25, r24
    3668:	88 27       	eor	r24, r24
    366a:	21 81       	ldd	r18, Z+1	; 0x01
    366c:	82 2b       	or	r24, r18
    366e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    3672:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	f0 e4       	ldi	r31, 0x40	; 64
    367a:	8f 9f       	mul	r24, r31
    367c:	c0 01       	movw	r24, r0
    367e:	11 24       	eor	r1, r1
    3680:	fa 01       	movw	r30, r20
    3682:	23 81       	ldd	r18, Z+3	; 0x03
    3684:	26 95       	lsr	r18
    3686:	26 95       	lsr	r18
    3688:	82 2b       	or	r24, r18
    368a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    368e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <_measuringIsReady>
    3698:	08 95       	ret
    369a:	64 30       	cpi	r22, 0x04	; 4
    369c:	51 f0       	breq	.+20     	; 0x36b2 <_hihTwiCallback+0x58>
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e4       	ldi	r25, 0x40	; 64
    36a2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    36a6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    36aa:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    36ae:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    36b2:	08 95       	ret

000036b4 <hih8120Create>:
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	0d e2       	ldi	r16, 0x2D	; 45
    36ba:	1b e1       	ldi	r17, 0x1B	; 27
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	34 e2       	ldi	r19, 0x24	; 36
    36c0:	44 ef       	ldi	r20, 0xF4	; 244
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	60 e0       	ldi	r22, 0x00	; 0
    36c6:	87 e2       	ldi	r24, 0x27	; 39
    36c8:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <twiCreate>
    36cc:	90 93 78 18 	sts	0x1878, r25	; 0x801878 <_hih8120Handler+0x1>
    36d0:	80 93 77 18 	sts	0x1877, r24	; 0x801877 <_hih8120Handler>
    36d4:	21 e0       	ldi	r18, 0x01	; 1
    36d6:	89 2b       	or	r24, r25
    36d8:	09 f0       	breq	.+2      	; 0x36dc <hih8120Create+0x28>
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	82 2f       	mov	r24, r18
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

000036e4 <hih8120IsReady>:
    36e4:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <_measuringIsReady>
    36e8:	08 95       	ret

000036ea <hih8120Meassure>:
    36ea:	80 91 77 18 	lds	r24, 0x1877	; 0x801877 <_hih8120Handler>
    36ee:	90 91 78 18 	lds	r25, 0x1878	; 0x801878 <_hih8120Handler+0x1>
    36f2:	00 97       	sbiw	r24, 0x00	; 0
    36f4:	39 f0       	breq	.+14     	; 0x3704 <hih8120Meassure+0x1a>
    36f6:	64 e0       	ldi	r22, 0x04	; 4
    36f8:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twiReceive>
    36fc:	85 30       	cpi	r24, 0x05	; 5
    36fe:	21 f0       	breq	.+8      	; 0x3708 <hih8120Meassure+0x1e>
    3700:	83 e0       	ldi	r24, 0x03	; 3
    3702:	08 95       	ret
    3704:	82 e0       	ldi	r24, 0x02	; 2
    3706:	08 95       	ret
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	08 95       	ret

0000370c <hih8120GetHumidity>:
    370c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    3710:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	31 df       	rcall	.-414    	; 0x357c <__floatunsisf>
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	48 ec       	ldi	r20, 0xC8	; 200
    3720:	52 e4       	ldi	r21, 0x42	; 66
    3722:	0e 94 a5 28 	call	0x514a	; 0x514a <__mulsf3>
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	38 ef       	ldi	r19, 0xF8	; 248
    372a:	4f e7       	ldi	r20, 0x7F	; 127
    372c:	56 e4       	ldi	r21, 0x46	; 70
    372e:	0c 94 c0 27 	jmp	0x4f80	; 0x4f80 <__divsf3>
    3732:	08 95       	ret

00003734 <hih8120GetTemperature>:
    3734:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    3738:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	1d df       	rcall	.-454    	; 0x357c <__floatunsisf>
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	45 e2       	ldi	r20, 0x25	; 37
    3748:	53 e4       	ldi	r21, 0x43	; 67
    374a:	0e 94 a5 28 	call	0x514a	; 0x514a <__mulsf3>
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	38 ef       	ldi	r19, 0xF8	; 248
    3752:	4f e7       	ldi	r20, 0x7F	; 127
    3754:	56 e4       	ldi	r21, 0x46	; 70
    3756:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__divsf3>
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	52 e4       	ldi	r21, 0x42	; 66
    3762:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__subsf3>
    3766:	08 95       	ret

00003768 <_turn_off>:
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	fc 01       	movw	r30, r24
    3770:	ee 0f       	add	r30, r30
    3772:	ff 1f       	adc	r31, r31
    3774:	e8 0f       	add	r30, r24
    3776:	f9 1f       	adc	r31, r25
    3778:	ee 0f       	add	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	e7 58       	subi	r30, 0x87	; 135
    377e:	f7 4e       	sbci	r31, 0xE7	; 231
    3780:	23 81       	ldd	r18, Z+3	; 0x03
    3782:	21 11       	cpse	r18, r1
    3784:	0a c0       	rjmp	.+20     	; 0x379a <_turn_off+0x32>
    3786:	ef 01       	movw	r28, r30
    3788:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <register_access+0x8>
    378c:	f0 91 ee 19 	lds	r31, 0x19EE	; 0x8019ee <register_access+0x9>
    3790:	6a 81       	ldd	r22, Y+2	; 0x02
    3792:	88 81       	ld	r24, Y
    3794:	99 81       	ldd	r25, Y+1	; 0x01
    3796:	19 95       	eicall
    3798:	12 c0       	rjmp	.+36     	; 0x37be <_turn_off+0x56>
    379a:	dc 01       	movw	r26, r24
    379c:	aa 0f       	add	r26, r26
    379e:	bb 1f       	adc	r27, r27
    37a0:	ed 01       	movw	r28, r26
    37a2:	c8 0f       	add	r28, r24
    37a4:	d9 1f       	adc	r29, r25
    37a6:	cc 0f       	add	r28, r28
    37a8:	dd 1f       	adc	r29, r29
    37aa:	c7 58       	subi	r28, 0x87	; 135
    37ac:	d7 4e       	sbci	r29, 0xE7	; 231
    37ae:	e0 91 f7 19 	lds	r30, 0x19F7	; 0x8019f7 <register_access+0x12>
    37b2:	f0 91 f8 19 	lds	r31, 0x19F8	; 0x8019f8 <register_access+0x13>
    37b6:	6a 81       	ldd	r22, Y+2	; 0x02
    37b8:	88 81       	ld	r24, Y
    37ba:	99 81       	ldd	r25, Y+1	; 0x01
    37bc:	19 95       	eicall
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	08 95       	ret

000037c4 <_turn_on>:
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	fc 01       	movw	r30, r24
    37cc:	ee 0f       	add	r30, r30
    37ce:	ff 1f       	adc	r31, r31
    37d0:	e8 0f       	add	r30, r24
    37d2:	f9 1f       	adc	r31, r25
    37d4:	ee 0f       	add	r30, r30
    37d6:	ff 1f       	adc	r31, r31
    37d8:	e7 58       	subi	r30, 0x87	; 135
    37da:	f7 4e       	sbci	r31, 0xE7	; 231
    37dc:	23 81       	ldd	r18, Z+3	; 0x03
    37de:	21 11       	cpse	r18, r1
    37e0:	0a c0       	rjmp	.+20     	; 0x37f6 <_turn_on+0x32>
    37e2:	ef 01       	movw	r28, r30
    37e4:	e0 91 f7 19 	lds	r30, 0x19F7	; 0x8019f7 <register_access+0x12>
    37e8:	f0 91 f8 19 	lds	r31, 0x19F8	; 0x8019f8 <register_access+0x13>
    37ec:	6a 81       	ldd	r22, Y+2	; 0x02
    37ee:	88 81       	ld	r24, Y
    37f0:	99 81       	ldd	r25, Y+1	; 0x01
    37f2:	19 95       	eicall
    37f4:	12 c0       	rjmp	.+36     	; 0x381a <_turn_on+0x56>
    37f6:	dc 01       	movw	r26, r24
    37f8:	aa 0f       	add	r26, r26
    37fa:	bb 1f       	adc	r27, r27
    37fc:	ed 01       	movw	r28, r26
    37fe:	c8 0f       	add	r28, r24
    3800:	d9 1f       	adc	r29, r25
    3802:	cc 0f       	add	r28, r28
    3804:	dd 1f       	adc	r29, r29
    3806:	c7 58       	subi	r28, 0x87	; 135
    3808:	d7 4e       	sbci	r29, 0xE7	; 231
    380a:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <register_access+0x8>
    380e:	f0 91 ee 19 	lds	r31, 0x19EE	; 0x8019ee <register_access+0x9>
    3812:	6a 81       	ldd	r22, Y+2	; 0x02
    3814:	88 81       	ld	r24, Y
    3816:	99 81       	ldd	r25, Y+1	; 0x01
    3818:	19 95       	eicall
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	08 95       	ret

00003820 <_hal_led_task>:
    3820:	0f 2e       	mov	r0, r31
    3822:	f5 ee       	ldi	r31, 0xE5	; 229
    3824:	cf 2e       	mov	r12, r31
    3826:	f9 e1       	ldi	r31, 0x19	; 25
    3828:	df 2e       	mov	r13, r31
    382a:	f0 2d       	mov	r31, r0
    382c:	04 e0       	ldi	r16, 0x04	; 4
    382e:	c9 e7       	ldi	r28, 0x79	; 121
    3830:	d8 e1       	ldi	r29, 0x18	; 24
    3832:	10 e0       	ldi	r17, 0x00	; 0
    3834:	8c 81       	ldd	r24, Y+4	; 0x04
    3836:	81 30       	cpi	r24, 0x01	; 1
    3838:	69 f0       	breq	.+26     	; 0x3854 <_hal_led_task+0x34>
    383a:	e8 f0       	brcs	.+58     	; 0x3876 <_hal_led_task+0x56>
    383c:	82 30       	cpi	r24, 0x02	; 2
    383e:	39 f5       	brne	.+78     	; 0x388e <_hal_led_task+0x6e>
    3840:	d6 01       	movw	r26, r12
    3842:	1c 96       	adiw	r26, 0x0c	; 12
    3844:	ed 91       	ld	r30, X+
    3846:	fc 91       	ld	r31, X
    3848:	1d 97       	sbiw	r26, 0x0d	; 13
    384a:	6a 81       	ldd	r22, Y+2	; 0x02
    384c:	88 81       	ld	r24, Y
    384e:	99 81       	ldd	r25, Y+1	; 0x01
    3850:	19 95       	eicall
    3852:	1d c0       	rjmp	.+58     	; 0x388e <_hal_led_task+0x6e>
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	8f 5f       	subi	r24, 0xFF	; 255
    3858:	8a 30       	cpi	r24, 0x0A	; 10
    385a:	10 f4       	brcc	.+4      	; 0x3860 <_hal_led_task+0x40>
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	17 c0       	rjmp	.+46     	; 0x388e <_hal_led_task+0x6e>
    3860:	1d 82       	std	Y+5, r1	; 0x05
    3862:	d6 01       	movw	r26, r12
    3864:	1c 96       	adiw	r26, 0x0c	; 12
    3866:	ed 91       	ld	r30, X+
    3868:	fc 91       	ld	r31, X
    386a:	1d 97       	sbiw	r26, 0x0d	; 13
    386c:	6a 81       	ldd	r22, Y+2	; 0x02
    386e:	88 81       	ld	r24, Y
    3870:	99 81       	ldd	r25, Y+1	; 0x01
    3872:	19 95       	eicall
    3874:	0c c0       	rjmp	.+24     	; 0x388e <_hal_led_task+0x6e>
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	88 23       	and	r24, r24
    387a:	31 f0       	breq	.+12     	; 0x3888 <_hal_led_task+0x68>
    387c:	81 2f       	mov	r24, r17
    387e:	a2 df       	rcall	.-188    	; 0x37c4 <_turn_on>
    3880:	8d 81       	ldd	r24, Y+5	; 0x05
    3882:	81 50       	subi	r24, 0x01	; 1
    3884:	8d 83       	std	Y+5, r24	; 0x05
    3886:	03 c0       	rjmp	.+6      	; 0x388e <_hal_led_task+0x6e>
    3888:	0c 83       	std	Y+4, r16	; 0x04
    388a:	81 2f       	mov	r24, r17
    388c:	6d df       	rcall	.-294    	; 0x3768 <_turn_off>
    388e:	1f 5f       	subi	r17, 0xFF	; 255
    3890:	26 96       	adiw	r28, 0x06	; 6
    3892:	14 30       	cpi	r17, 0x04	; 4
    3894:	79 f6       	brne	.-98     	; 0x3834 <_hal_led_task+0x14>
    3896:	65 e0       	ldi	r22, 0x05	; 5
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0c d8       	rcall	.-4072   	; 0x28b8 <vTaskDelay>
    38a0:	c6 cf       	rjmp	.-116    	; 0x382e <_hal_led_task+0xe>

000038a2 <led_create>:
    38a2:	cf 92       	push	r12
    38a4:	df 92       	push	r13
    38a6:	ef 92       	push	r14
    38a8:	ff 92       	push	r15
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	06 2f       	mov	r16, r22
    38b4:	0f 2e       	mov	r0, r31
    38b6:	f5 ee       	ldi	r31, 0xE5	; 229
    38b8:	ef 2e       	mov	r14, r31
    38ba:	f9 e1       	ldi	r31, 0x19	; 25
    38bc:	ff 2e       	mov	r15, r31
    38be:	f0 2d       	mov	r31, r0
    38c0:	d7 01       	movw	r26, r14
    38c2:	18 96       	adiw	r26, 0x08	; 8
    38c4:	ed 91       	ld	r30, X+
    38c6:	fc 91       	ld	r31, X
    38c8:	19 97       	sbiw	r26, 0x09	; 9
    38ca:	66 e0       	ldi	r22, 0x06	; 6
    38cc:	87 e2       	ldi	r24, 0x27	; 39
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	19 95       	eicall
    38d2:	c9 e7       	ldi	r28, 0x79	; 121
    38d4:	d8 e1       	ldi	r29, 0x18	; 24
    38d6:	0f 2e       	mov	r0, r31
    38d8:	f8 e2       	ldi	r31, 0x28	; 40
    38da:	cf 2e       	mov	r12, r31
    38dc:	d1 2c       	mov	r13, r1
    38de:	f0 2d       	mov	r31, r0
    38e0:	d9 82       	std	Y+1, r13	; 0x01
    38e2:	c8 82       	st	Y, r12
    38e4:	86 e0       	ldi	r24, 0x06	; 6
    38e6:	8a 83       	std	Y+2, r24	; 0x02
    38e8:	1b 82       	std	Y+3, r1	; 0x03
    38ea:	14 e0       	ldi	r17, 0x04	; 4
    38ec:	1c 83       	std	Y+4, r17	; 0x04
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	3b df       	rcall	.-394    	; 0x3768 <_turn_off>
    38f2:	d7 01       	movw	r26, r14
    38f4:	18 96       	adiw	r26, 0x08	; 8
    38f6:	ed 91       	ld	r30, X+
    38f8:	fc 91       	ld	r31, X
    38fa:	19 97       	sbiw	r26, 0x09	; 9
    38fc:	67 e0       	ldi	r22, 0x07	; 7
    38fe:	87 e2       	ldi	r24, 0x27	; 39
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	19 95       	eicall
    3904:	df 82       	std	Y+7, r13	; 0x07
    3906:	ce 82       	std	Y+6, r12	; 0x06
    3908:	87 e0       	ldi	r24, 0x07	; 7
    390a:	88 87       	std	Y+8, r24	; 0x08
    390c:	19 86       	std	Y+9, r1	; 0x09
    390e:	1a 87       	std	Y+10, r17	; 0x0a
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	2a df       	rcall	.-428    	; 0x3768 <_turn_off>
    3914:	d7 01       	movw	r26, r14
    3916:	18 96       	adiw	r26, 0x08	; 8
    3918:	ed 91       	ld	r30, X+
    391a:	fc 91       	ld	r31, X
    391c:	19 97       	sbiw	r26, 0x09	; 9
    391e:	65 e0       	ldi	r22, 0x05	; 5
    3920:	83 e3       	ldi	r24, 0x33	; 51
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	19 95       	eicall
    3926:	d7 01       	movw	r26, r14
    3928:	18 96       	adiw	r26, 0x08	; 8
    392a:	ed 91       	ld	r30, X+
    392c:	fc 91       	ld	r31, X
    392e:	19 97       	sbiw	r26, 0x09	; 9
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	84 e3       	ldi	r24, 0x34	; 52
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	19 95       	eicall
    3938:	84 e3       	ldi	r24, 0x34	; 52
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	9d 87       	std	Y+13, r25	; 0x0d
    393e:	8c 87       	std	Y+12, r24	; 0x0c
    3940:	85 e0       	ldi	r24, 0x05	; 5
    3942:	8e 87       	std	Y+14, r24	; 0x0e
    3944:	1f 86       	std	Y+15, r1	; 0x0f
    3946:	18 8b       	std	Y+16, r17	; 0x10
    3948:	82 e0       	ldi	r24, 0x02	; 2
    394a:	0e df       	rcall	.-484    	; 0x3768 <_turn_off>
    394c:	d7 01       	movw	r26, r14
    394e:	18 96       	adiw	r26, 0x08	; 8
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	19 97       	sbiw	r26, 0x09	; 9
    3956:	64 e0       	ldi	r22, 0x04	; 4
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	91 e0       	ldi	r25, 0x01	; 1
    395c:	19 95       	eicall
    395e:	d7 01       	movw	r26, r14
    3960:	18 96       	adiw	r26, 0x08	; 8
    3962:	ed 91       	ld	r30, X+
    3964:	fc 91       	ld	r31, X
    3966:	19 97       	sbiw	r26, 0x09	; 9
    3968:	61 e0       	ldi	r22, 0x01	; 1
    396a:	82 e0       	ldi	r24, 0x02	; 2
    396c:	91 e0       	ldi	r25, 0x01	; 1
    396e:	19 95       	eicall
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	91 e0       	ldi	r25, 0x01	; 1
    3974:	9b 8b       	std	Y+19, r25	; 0x13
    3976:	8a 8b       	std	Y+18, r24	; 0x12
    3978:	1c 8b       	std	Y+20, r17	; 0x14
    397a:	1d 8a       	std	Y+21, r1	; 0x15
    397c:	1e 8b       	std	Y+22, r17	; 0x16
    397e:	83 e0       	ldi	r24, 0x03	; 3
    3980:	f3 de       	rcall	.-538    	; 0x3768 <_turn_off>
    3982:	e1 2c       	mov	r14, r1
    3984:	f1 2c       	mov	r15, r1
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 ec       	ldi	r20, 0xC0	; 192
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	69 eb       	ldi	r22, 0xB9	; 185
    3990:	74 e0       	ldi	r23, 0x04	; 4
    3992:	80 e1       	ldi	r24, 0x10	; 16
    3994:	9c e1       	ldi	r25, 0x1C	; 28
    3996:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	df 90       	pop	r13
    39a8:	cf 90       	pop	r12
    39aa:	08 95       	ret

000039ac <led_slow_blink>:
    39ac:	0f 93       	push	r16
    39ae:	1f 93       	push	r17
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	c8 2f       	mov	r28, r24
    39b6:	d0 e0       	ldi	r29, 0x00	; 0
    39b8:	8e 01       	movw	r16, r28
    39ba:	00 0f       	add	r16, r16
    39bc:	11 1f       	adc	r17, r17
    39be:	d8 01       	movw	r26, r16
    39c0:	ac 0f       	add	r26, r28
    39c2:	bd 1f       	adc	r27, r29
    39c4:	aa 0f       	add	r26, r26
    39c6:	bb 1f       	adc	r27, r27
    39c8:	a7 58       	subi	r26, 0x87	; 135
    39ca:	b7 4e       	sbci	r27, 0xE7	; 231
    39cc:	e0 91 f1 19 	lds	r30, 0x19F1	; 0x8019f1 <register_access+0xc>
    39d0:	f0 91 f2 19 	lds	r31, 0x19F2	; 0x8019f2 <register_access+0xd>
    39d4:	12 96       	adiw	r26, 0x02	; 2
    39d6:	6c 91       	ld	r22, X
    39d8:	12 97       	sbiw	r26, 0x02	; 2
    39da:	8d 91       	ld	r24, X+
    39dc:	9c 91       	ld	r25, X
    39de:	19 95       	eicall
    39e0:	c0 0f       	add	r28, r16
    39e2:	d1 1f       	adc	r29, r17
    39e4:	cc 0f       	add	r28, r28
    39e6:	dd 1f       	adc	r29, r29
    39e8:	c7 58       	subi	r28, 0x87	; 135
    39ea:	d7 4e       	sbci	r29, 0xE7	; 231
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	8c 83       	std	Y+4, r24	; 0x04
    39f0:	df 91       	pop	r29
    39f2:	cf 91       	pop	r28
    39f4:	1f 91       	pop	r17
    39f6:	0f 91       	pop	r16
    39f8:	08 95       	ret

000039fa <led_fast_blink>:
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	c8 2f       	mov	r28, r24
    3a04:	d0 e0       	ldi	r29, 0x00	; 0
    3a06:	8e 01       	movw	r16, r28
    3a08:	00 0f       	add	r16, r16
    3a0a:	11 1f       	adc	r17, r17
    3a0c:	d8 01       	movw	r26, r16
    3a0e:	ac 0f       	add	r26, r28
    3a10:	bd 1f       	adc	r27, r29
    3a12:	aa 0f       	add	r26, r26
    3a14:	bb 1f       	adc	r27, r27
    3a16:	a7 58       	subi	r26, 0x87	; 135
    3a18:	b7 4e       	sbci	r27, 0xE7	; 231
    3a1a:	e0 91 f1 19 	lds	r30, 0x19F1	; 0x8019f1 <register_access+0xc>
    3a1e:	f0 91 f2 19 	lds	r31, 0x19F2	; 0x8019f2 <register_access+0xd>
    3a22:	12 96       	adiw	r26, 0x02	; 2
    3a24:	6c 91       	ld	r22, X
    3a26:	12 97       	sbiw	r26, 0x02	; 2
    3a28:	8d 91       	ld	r24, X+
    3a2a:	9c 91       	ld	r25, X
    3a2c:	19 95       	eicall
    3a2e:	c0 0f       	add	r28, r16
    3a30:	d1 1f       	adc	r29, r17
    3a32:	cc 0f       	add	r28, r28
    3a34:	dd 1f       	adc	r29, r29
    3a36:	c7 58       	subi	r28, 0x87	; 135
    3a38:	d7 4e       	sbci	r29, 0xE7	; 231
    3a3a:	82 e0       	ldi	r24, 0x02	; 2
    3a3c:	8c 83       	std	Y+4, r24	; 0x04
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	08 95       	ret

00003a48 <led_led_on>:
    3a48:	28 2f       	mov	r18, r24
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	f9 01       	movw	r30, r18
    3a4e:	ee 0f       	add	r30, r30
    3a50:	ff 1f       	adc	r31, r31
    3a52:	e2 0f       	add	r30, r18
    3a54:	f3 1f       	adc	r31, r19
    3a56:	ee 0f       	add	r30, r30
    3a58:	ff 1f       	adc	r31, r31
    3a5a:	e7 58       	subi	r30, 0x87	; 135
    3a5c:	f7 4e       	sbci	r31, 0xE7	; 231
    3a5e:	93 e0       	ldi	r25, 0x03	; 3
    3a60:	94 83       	std	Z+4, r25	; 0x04
    3a62:	b0 ce       	rjmp	.-672    	; 0x37c4 <_turn_on>
    3a64:	08 95       	ret

00003a66 <led_led_off>:
    3a66:	28 2f       	mov	r18, r24
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	f9 01       	movw	r30, r18
    3a6c:	ee 0f       	add	r30, r30
    3a6e:	ff 1f       	adc	r31, r31
    3a70:	e2 0f       	add	r30, r18
    3a72:	f3 1f       	adc	r31, r19
    3a74:	ee 0f       	add	r30, r30
    3a76:	ff 1f       	adc	r31, r31
    3a78:	e7 58       	subi	r30, 0x87	; 135
    3a7a:	f7 4e       	sbci	r31, 0xE7	; 231
    3a7c:	94 e0       	ldi	r25, 0x04	; 4
    3a7e:	94 83       	std	Z+4, r25	; 0x04
    3a80:	73 ce       	rjmp	.-794    	; 0x3768 <_turn_off>
    3a82:	08 95       	ret

00003a84 <led_long_puls>:
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	fc 01       	movw	r30, r24
    3a88:	ee 0f       	add	r30, r30
    3a8a:	ff 1f       	adc	r31, r31
    3a8c:	df 01       	movw	r26, r30
    3a8e:	a8 0f       	add	r26, r24
    3a90:	b9 1f       	adc	r27, r25
    3a92:	aa 0f       	add	r26, r26
    3a94:	bb 1f       	adc	r27, r27
    3a96:	a7 58       	subi	r26, 0x87	; 135
    3a98:	b7 4e       	sbci	r27, 0xE7	; 231
    3a9a:	24 e0       	ldi	r18, 0x04	; 4
    3a9c:	15 96       	adiw	r26, 0x05	; 5
    3a9e:	2c 93       	st	X, r18
    3aa0:	15 97       	sbiw	r26, 0x05	; 5
    3aa2:	fd 01       	movw	r30, r26
    3aa4:	14 82       	std	Z+4, r1	; 0x04
    3aa6:	08 95       	ret

00003aa8 <led_short_puls>:
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	fc 01       	movw	r30, r24
    3aac:	ee 0f       	add	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	df 01       	movw	r26, r30
    3ab2:	a8 0f       	add	r26, r24
    3ab4:	b9 1f       	adc	r27, r25
    3ab6:	aa 0f       	add	r26, r26
    3ab8:	bb 1f       	adc	r27, r27
    3aba:	a7 58       	subi	r26, 0x87	; 135
    3abc:	b7 4e       	sbci	r27, 0xE7	; 231
    3abe:	21 e0       	ldi	r18, 0x01	; 1
    3ac0:	15 96       	adiw	r26, 0x05	; 5
    3ac2:	2c 93       	st	X, r18
    3ac4:	15 97       	sbiw	r26, 0x05	; 5
    3ac6:	fd 01       	movw	r30, r26
    3ac8:	14 82       	std	Z+4, r1	; 0x04
    3aca:	08 95       	ret

00003acc <_serial_call_back>:
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	1f 92       	push	r1
    3ad6:	1f 92       	push	r1
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	8c 01       	movw	r16, r24
    3ade:	19 82       	std	Y+1, r1	; 0x01
    3ae0:	2d c0       	rjmp	.+90     	; 0x3b3c <_serial_call_back+0x70>
    3ae2:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <rec_buf_inp.2947>
    3ae6:	ec 32       	cpi	r30, 0x2C	; 44
    3ae8:	50 f4       	brcc	.+20     	; 0x3afe <_serial_call_back+0x32>
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	8e 0f       	add	r24, r30
    3aee:	80 93 f5 18 	sts	0x18F5, r24	; 0x8018f5 <rec_buf_inp.2947>
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	e9 5d       	subi	r30, 0xD9	; 217
    3af6:	f6 4e       	sbci	r31, 0xE6	; 230
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	80 83       	st	Z, r24
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <_serial_call_back+0x36>
    3afe:	10 92 f5 18 	sts	0x18F5, r1	; 0x8018f5 <rec_buf_inp.2947>
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
    3b04:	8a 30       	cpi	r24, 0x0A	; 10
    3b06:	d1 f4       	brne	.+52     	; 0x3b3c <_serial_call_back+0x70>
    3b08:	40 91 f5 18 	lds	r20, 0x18F5	; 0x8018f5 <rec_buf_inp.2947>
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	fa 01       	movw	r30, r20
    3b10:	eb 5d       	subi	r30, 0xDB	; 219
    3b12:	f6 4e       	sbci	r31, 0xE6	; 230
    3b14:	10 82       	st	Z, r1
    3b16:	41 50       	subi	r20, 0x01	; 1
    3b18:	51 09       	sbc	r21, r1
    3b1a:	9e 01       	movw	r18, r28
    3b1c:	2f 5f       	subi	r18, 0xFF	; 255
    3b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b20:	67 e2       	ldi	r22, 0x27	; 39
    3b22:	79 e1       	ldi	r23, 0x19	; 25
    3b24:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <_serial_reply_buffer_handle>
    3b28:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3b2c:	0e 94 19 10 	call	0x2032	; 0x2032 <xStreamBufferSendFromISR>
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	81 11       	cpse	r24, r1
    3b34:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <vPortYield>
    3b38:	10 92 f5 18 	sts	0x18F5, r1	; 0x8018f5 <rec_buf_inp.2947>
    3b3c:	be 01       	movw	r22, r28
    3b3e:	6e 5f       	subi	r22, 0xFE	; 254
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	c8 01       	movw	r24, r16
    3b44:	8f d5       	rcall	.+2846   	; 0x4664 <serial_get_byte>
    3b46:	88 23       	and	r24, r24
    3b48:	61 f2       	breq	.-104    	; 0x3ae2 <_serial_call_back+0x16>
    3b4a:	0f 90       	pop	r0
    3b4c:	0f 90       	pop	r0
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	08 95       	ret

00003b58 <_upload_message>:
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	8c 01       	movw	r16, r24
    3b62:	eb 01       	movw	r28, r22
    3b64:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <_serial_reply_buffer_handle>
    3b68:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3b6c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xStreamBufferReset>
    3b70:	b8 01       	movw	r22, r16
    3b72:	81 e9       	ldi	r24, 0x91	; 145
    3b74:	98 e1       	ldi	r25, 0x18	; 24
    3b76:	0e 94 b1 2a 	call	0x5562	; 0x5562 <strcpy>
    3b7a:	20 97       	sbiw	r28, 0x00	; 0
    3b7c:	79 f0       	breq	.+30     	; 0x3b9c <_upload_message+0x44>
    3b7e:	e1 e9       	ldi	r30, 0x91	; 145
    3b80:	f8 e1       	ldi	r31, 0x18	; 24
    3b82:	01 90       	ld	r0, Z+
    3b84:	00 20       	and	r0, r0
    3b86:	e9 f7       	brne	.-6      	; 0x3b82 <_upload_message+0x2a>
    3b88:	31 97       	sbiw	r30, 0x01	; 1
    3b8a:	80 e2       	ldi	r24, 0x20	; 32
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	91 83       	std	Z+1, r25	; 0x01
    3b90:	80 83       	st	Z, r24
    3b92:	be 01       	movw	r22, r28
    3b94:	81 e9       	ldi	r24, 0x91	; 145
    3b96:	98 e1       	ldi	r25, 0x18	; 24
    3b98:	0e 94 a6 2a 	call	0x554c	; 0x554c <strcat>
    3b9c:	e1 e9       	ldi	r30, 0x91	; 145
    3b9e:	f8 e1       	ldi	r31, 0x18	; 24
    3ba0:	df 01       	movw	r26, r30
    3ba2:	0d 90       	ld	r0, X+
    3ba4:	00 20       	and	r0, r0
    3ba6:	e9 f7       	brne	.-6      	; 0x3ba2 <_upload_message+0x4a>
    3ba8:	11 97       	sbiw	r26, 0x01	; 1
    3baa:	8d e0       	ldi	r24, 0x0D	; 13
    3bac:	9a e0       	ldi	r25, 0x0A	; 10
    3bae:	11 96       	adiw	r26, 0x01	; 1
    3bb0:	9c 93       	st	X, r25
    3bb2:	8e 93       	st	-X, r24
    3bb4:	12 96       	adiw	r26, 0x02	; 2
    3bb6:	1c 92       	st	X, r1
    3bb8:	01 90       	ld	r0, Z+
    3bba:	00 20       	and	r0, r0
    3bbc:	e9 f7       	brne	.-6      	; 0x3bb8 <_upload_message+0x60>
    3bbe:	31 97       	sbiw	r30, 0x01	; 1
    3bc0:	e1 59       	subi	r30, 0x91	; 145
    3bc2:	f8 41       	sbci	r31, 0x18	; 24
    3bc4:	ae 2f       	mov	r26, r30
    3bc6:	81 e9       	ldi	r24, 0x91	; 145
    3bc8:	98 e1       	ldi	r25, 0x18	; 24
    3bca:	ac 01       	movw	r20, r24
    3bcc:	6a 2f       	mov	r22, r26
    3bce:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <_rn2483_serial>
    3bd2:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <_rn2483_serial+0x1>
    3bd6:	f6 d4       	rcall	.+2540   	; 0x45c4 <serial_send_bytes>
    3bd8:	81 11       	cpse	r24, r1
    3bda:	11 c0       	rjmp	.+34     	; 0x3bfe <_upload_message+0xa6>
    3bdc:	08 e2       	ldi	r16, 0x28	; 40
    3bde:	15 e0       	ldi	r17, 0x05	; 5
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	4d e2       	ldi	r20, 0x2D	; 45
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	61 e8       	ldi	r22, 0x81	; 129
    3bea:	79 e1       	ldi	r23, 0x19	; 25
    3bec:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <_serial_reply_buffer_handle>
    3bf0:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3bf4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <xStreamBufferReceive>
    3bf8:	81 e8       	ldi	r24, 0x81	; 129
    3bfa:	99 e1       	ldi	r25, 0x19	; 25
    3bfc:	02 c0       	rjmp	.+4      	; 0x3c02 <_upload_message+0xaa>
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	08 95       	ret

00003c0c <_reply2return_code>:
    3c0c:	2f 92       	push	r2
    3c0e:	3f 92       	push	r3
    3c10:	4f 92       	push	r4
    3c12:	5f 92       	push	r5
    3c14:	6f 92       	push	r6
    3c16:	7f 92       	push	r7
    3c18:	8f 92       	push	r8
    3c1a:	9f 92       	push	r9
    3c1c:	af 92       	push	r10
    3c1e:	bf 92       	push	r11
    3c20:	cf 92       	push	r12
    3c22:	df 92       	push	r13
    3c24:	ef 92       	push	r14
    3c26:	ff 92       	push	r15
    3c28:	0f 93       	push	r16
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	5c 01       	movw	r10, r24
    3c32:	fc 01       	movw	r30, r24
    3c34:	01 90       	ld	r0, Z+
    3c36:	00 20       	and	r0, r0
    3c38:	e9 f7       	brne	.-6      	; 0x3c34 <_reply2return_code+0x28>
    3c3a:	31 97       	sbiw	r30, 0x01	; 1
    3c3c:	6f 01       	movw	r12, r30
    3c3e:	c8 1a       	sub	r12, r24
    3c40:	d9 0a       	sbc	r13, r25
    3c42:	5c 2c       	mov	r5, r12
    3c44:	0f 2e       	mov	r0, r31
    3c46:	fa e5       	ldi	r31, 0x5A	; 90
    3c48:	8f 2e       	mov	r8, r31
    3c4a:	f7 e0       	ldi	r31, 0x07	; 7
    3c4c:	9f 2e       	mov	r9, r31
    3c4e:	f0 2d       	mov	r31, r0
    3c50:	e1 2c       	mov	r14, r1
    3c52:	f1 2c       	mov	r15, r1
    3c54:	4c 2c       	mov	r4, r12
    3c56:	37 01       	movw	r6, r14
    3c58:	f4 01       	movw	r30, r8
    3c5a:	01 81       	ldd	r16, Z+1	; 0x01
    3c5c:	12 81       	ldd	r17, Z+2	; 0x02
    3c5e:	e8 01       	movw	r28, r16
    3c60:	09 90       	ld	r0, Y+
    3c62:	00 20       	and	r0, r0
    3c64:	e9 f7       	brne	.-6      	; 0x3c60 <_reply2return_code+0x54>
    3c66:	21 97       	sbiw	r28, 0x01	; 1
    3c68:	c0 1b       	sub	r28, r16
    3c6a:	d1 0b       	sbc	r29, r17
    3c6c:	3c 2e       	mov	r3, r28
    3c6e:	f9 e0       	ldi	r31, 0x09	; 9
    3c70:	cf 16       	cp	r12, r31
    3c72:	d1 04       	cpc	r13, r1
    3c74:	58 f0       	brcs	.+22     	; 0x3c8c <_reply2return_code+0x80>
    3c76:	f4 01       	movw	r30, r8
    3c78:	20 80       	ld	r2, Z
    3c7a:	fe e0       	ldi	r31, 0x0E	; 14
    3c7c:	2f 12       	cpse	r2, r31
    3c7e:	06 c0       	rjmp	.+12     	; 0x3c8c <_reply2return_code+0x80>
    3c80:	b8 01       	movw	r22, r16
    3c82:	c5 01       	movw	r24, r10
    3c84:	0e 94 81 2a 	call	0x5502	; 0x5502 <strcasestr>
    3c88:	89 2b       	or	r24, r25
    3c8a:	09 f5       	brne	.+66     	; 0x3cce <_reply2return_code+0xc2>
    3c8c:	44 2d       	mov	r20, r4
    3c8e:	35 14       	cp	r3, r5
    3c90:	08 f4       	brcc	.+2      	; 0x3c94 <_reply2return_code+0x88>
    3c92:	4c 2f       	mov	r20, r28
    3c94:	50 e0       	ldi	r21, 0x00	; 0
    3c96:	b8 01       	movw	r22, r16
    3c98:	c5 01       	movw	r24, r10
    3c9a:	0e 94 b8 2a 	call	0x5570	; 0x5570 <strncasecmp>
    3c9e:	89 2b       	or	r24, r25
    3ca0:	49 f4       	brne	.+18     	; 0x3cb4 <_reply2return_code+0xa8>
    3ca2:	f3 01       	movw	r30, r6
    3ca4:	ee 0f       	add	r30, r30
    3ca6:	ff 1f       	adc	r31, r31
    3ca8:	e6 0d       	add	r30, r6
    3caa:	f7 1d       	adc	r31, r7
    3cac:	e6 5a       	subi	r30, 0xA6	; 166
    3cae:	f8 4f       	sbci	r31, 0xF8	; 248
    3cb0:	20 80       	ld	r2, Z
    3cb2:	0d c0       	rjmp	.+26     	; 0x3cce <_reply2return_code+0xc2>
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	e8 1a       	sub	r14, r24
    3cb8:	f8 0a       	sbc	r15, r24
    3cba:	e3 e0       	ldi	r30, 0x03	; 3
    3cbc:	8e 0e       	add	r8, r30
    3cbe:	91 1c       	adc	r9, r1
    3cc0:	f1 e1       	ldi	r31, 0x11	; 17
    3cc2:	ef 16       	cp	r14, r31
    3cc4:	f1 04       	cpc	r15, r1
    3cc6:	39 f6       	brne	.-114    	; 0x3c56 <_reply2return_code+0x4a>
    3cc8:	68 94       	set
    3cca:	22 24       	eor	r2, r2
    3ccc:	24 f8       	bld	r2, 4
    3cce:	82 2d       	mov	r24, r2
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	1f 91       	pop	r17
    3cd6:	0f 91       	pop	r16
    3cd8:	ff 90       	pop	r15
    3cda:	ef 90       	pop	r14
    3cdc:	df 90       	pop	r13
    3cde:	cf 90       	pop	r12
    3ce0:	bf 90       	pop	r11
    3ce2:	af 90       	pop	r10
    3ce4:	9f 90       	pop	r9
    3ce6:	8f 90       	pop	r8
    3ce8:	7f 90       	pop	r7
    3cea:	6f 90       	pop	r6
    3cec:	5f 90       	pop	r5
    3cee:	4f 90       	pop	r4
    3cf0:	3f 90       	pop	r3
    3cf2:	2f 90       	pop	r2
    3cf4:	08 95       	ret

00003cf6 <_upload_message_rc>:
    3cf6:	30 df       	rcall	.-416    	; 0x3b58 <_upload_message>
    3cf8:	89 cf       	rjmp	.-238    	; 0x3c0c <_reply2return_code>
    3cfa:	08 95       	ret

00003cfc <lora_driver_flush_buffers>:
    3cfc:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <_serial_reply_buffer_handle>
    3d00:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3d04:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <xStreamBufferReset>
    3d08:	08 95       	ret

00003d0a <lora_driver_create>:
    3d0a:	8f 92       	push	r8
    3d0c:	9f 92       	push	r9
    3d0e:	af 92       	push	r10
    3d10:	cf 92       	push	r12
    3d12:	ef 92       	push	r14
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	c8 2f       	mov	r28, r24
    3d1c:	8b 01       	movw	r16, r22
    3d1e:	41 e0       	ldi	r20, 0x01	; 1
    3d20:	60 e0       	ldi	r22, 0x00	; 0
    3d22:	70 e0       	ldi	r23, 0x00	; 0
    3d24:	88 ec       	ldi	r24, 0xC8	; 200
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xStreamBufferGenericCreate>
    3d2c:	90 93 f9 18 	sts	0x18F9, r25	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3d30:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <_serial_reply_buffer_handle>
    3d34:	10 93 f7 18 	sts	0x18F7, r17	; 0x8018f7 <_downlinkMessageBuffer+0x1>
    3d38:	00 93 f6 18 	sts	0x18F6, r16	; 0x8018f6 <_downlinkMessageBuffer>
    3d3c:	0f 2e       	mov	r0, r31
    3d3e:	f6 e6       	ldi	r31, 0x66	; 102
    3d40:	8f 2e       	mov	r8, r31
    3d42:	fd e1       	ldi	r31, 0x1D	; 29
    3d44:	9f 2e       	mov	r9, r31
    3d46:	f0 2d       	mov	r31, r0
    3d48:	68 94       	set
    3d4a:	aa 24       	eor	r10, r10
    3d4c:	a6 f8       	bld	r10, 6
    3d4e:	68 94       	set
    3d50:	cc 24       	eor	r12, r12
    3d52:	c6 f8       	bld	r12, 6
    3d54:	e1 2c       	mov	r14, r1
    3d56:	00 e0       	ldi	r16, 0x00	; 0
    3d58:	23 e0       	ldi	r18, 0x03	; 3
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	51 ee       	ldi	r21, 0xE1	; 225
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	8c 2f       	mov	r24, r28
    3d64:	74 d3       	rcall	.+1768   	; 0x444e <serial_new_instance>
    3d66:	90 93 fb 18 	sts	0x18FB, r25	; 0x8018fb <_rn2483_serial+0x1>
    3d6a:	80 93 fa 18 	sts	0x18FA, r24	; 0x8018fa <_rn2483_serial>
    3d6e:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <register_access+0x8>
    3d72:	f0 91 ee 19 	lds	r31, 0x19EE	; 0x8019ee <register_access+0x9>
    3d76:	64 e0       	ldi	r22, 0x04	; 4
    3d78:	87 e0       	ldi	r24, 0x07	; 7
    3d7a:	91 e0       	ldi	r25, 0x01	; 1
    3d7c:	19 95       	eicall
    3d7e:	cf 91       	pop	r28
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	ef 90       	pop	r14
    3d86:	cf 90       	pop	r12
    3d88:	af 90       	pop	r10
    3d8a:	9f 90       	pop	r9
    3d8c:	8f 90       	pop	r8
    3d8e:	08 95       	ret

00003d90 <lora_driver_reset_rn2483>:
    3d90:	88 23       	and	r24, r24
    3d92:	49 f0       	breq	.+18     	; 0x3da6 <lora_driver_reset_rn2483+0x16>
    3d94:	e0 91 f7 19 	lds	r30, 0x19F7	; 0x8019f7 <register_access+0x12>
    3d98:	f0 91 f8 19 	lds	r31, 0x19F8	; 0x8019f8 <register_access+0x13>
    3d9c:	64 e0       	ldi	r22, 0x04	; 4
    3d9e:	88 e0       	ldi	r24, 0x08	; 8
    3da0:	91 e0       	ldi	r25, 0x01	; 1
    3da2:	19 95       	eicall
    3da4:	08 95       	ret
    3da6:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <register_access+0x8>
    3daa:	f0 91 ee 19 	lds	r31, 0x19EE	; 0x8019ee <register_access+0x9>
    3dae:	64 e0       	ldi	r22, 0x04	; 4
    3db0:	88 e0       	ldi	r24, 0x08	; 8
    3db2:	91 e0       	ldi	r25, 0x01	; 1
    3db4:	19 95       	eicall
    3db6:	08 95       	ret

00003db8 <lora_driver_rn2483_factory_reset>:
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	80 ee       	ldi	r24, 0xE0	; 224
    3dbe:	94 e0       	ldi	r25, 0x04	; 4
    3dc0:	cb de       	rcall	.-618    	; 0x3b58 <_upload_message>
    3dc2:	e1 e8       	ldi	r30, 0x81	; 129
    3dc4:	f9 e1       	ldi	r31, 0x19	; 25
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	00 20       	and	r0, r0
    3dca:	e9 f7       	brne	.-6      	; 0x3dc6 <lora_driver_rn2483_factory_reset+0xe>
    3dcc:	31 97       	sbiw	r30, 0x01	; 1
    3dce:	e1 58       	subi	r30, 0x81	; 129
    3dd0:	f9 41       	sbci	r31, 0x19	; 25
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	75 97       	sbiw	r30, 0x15	; 21
    3dd6:	08 f0       	brcs	.+2      	; 0x3dda <lora_driver_rn2483_factory_reset+0x22>
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	08 95       	ret

00003ddc <lora_driver_get_rn2483_hweui>:
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	ec 01       	movw	r28, r24
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	81 ef       	ldi	r24, 0xF1	; 241
    3de8:	94 e0       	ldi	r25, 0x04	; 4
    3dea:	b6 de       	rcall	.-660    	; 0x3b58 <_upload_message>
    3dec:	e1 e8       	ldi	r30, 0x81	; 129
    3dee:	f9 e1       	ldi	r31, 0x19	; 25
    3df0:	01 90       	ld	r0, Z+
    3df2:	00 20       	and	r0, r0
    3df4:	e9 f7       	brne	.-6      	; 0x3df0 <lora_driver_get_rn2483_hweui+0x14>
    3df6:	e2 59       	subi	r30, 0x92	; 146
    3df8:	f9 41       	sbci	r31, 0x19	; 25
    3dfa:	39 f4       	brne	.+14     	; 0x3e0a <lora_driver_get_rn2483_hweui+0x2e>
    3dfc:	61 e8       	ldi	r22, 0x81	; 129
    3dfe:	79 e1       	ldi	r23, 0x19	; 25
    3e00:	ce 01       	movw	r24, r28
    3e02:	0e 94 b1 2a 	call	0x5562	; 0x5562 <strcpy>
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <lora_driver_get_rn2483_hweui+0x32>
    3e0a:	18 82       	st	Y, r1
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	08 95       	ret

00003e14 <lora_driver_set_device_identifier>:
    3e14:	fc 01       	movw	r30, r24
    3e16:	01 90       	ld	r0, Z+
    3e18:	00 20       	and	r0, r0
    3e1a:	e9 f7       	brne	.-6      	; 0x3e16 <lora_driver_set_device_identifier+0x2>
    3e1c:	9f 01       	movw	r18, r30
    3e1e:	21 51       	subi	r18, 0x11	; 17
    3e20:	31 09       	sbc	r19, r1
    3e22:	28 17       	cp	r18, r24
    3e24:	39 07       	cpc	r19, r25
    3e26:	29 f4       	brne	.+10     	; 0x3e32 <lora_driver_set_device_identifier+0x1e>
    3e28:	bc 01       	movw	r22, r24
    3e2a:	8f e1       	ldi	r24, 0x1F	; 31
    3e2c:	95 e0       	ldi	r25, 0x05	; 5
    3e2e:	63 cf       	rjmp	.-314    	; 0x3cf6 <_upload_message_rc>
    3e30:	08 95       	ret
    3e32:	89 e0       	ldi	r24, 0x09	; 9
    3e34:	08 95       	ret

00003e36 <lora_driver_set_application_identifier>:
    3e36:	fc 01       	movw	r30, r24
    3e38:	01 90       	ld	r0, Z+
    3e3a:	00 20       	and	r0, r0
    3e3c:	e9 f7       	brne	.-6      	; 0x3e38 <lora_driver_set_application_identifier+0x2>
    3e3e:	9f 01       	movw	r18, r30
    3e40:	21 51       	subi	r18, 0x11	; 17
    3e42:	31 09       	sbc	r19, r1
    3e44:	28 17       	cp	r18, r24
    3e46:	39 07       	cpc	r19, r25
    3e48:	29 f4       	brne	.+10     	; 0x3e54 <lora_driver_set_application_identifier+0x1e>
    3e4a:	bc 01       	movw	r22, r24
    3e4c:	8e e2       	ldi	r24, 0x2E	; 46
    3e4e:	95 e0       	ldi	r25, 0x05	; 5
    3e50:	52 cf       	rjmp	.-348    	; 0x3cf6 <_upload_message_rc>
    3e52:	08 95       	ret
    3e54:	89 e0       	ldi	r24, 0x09	; 9
    3e56:	08 95       	ret

00003e58 <lora_driver_set_application_key>:
    3e58:	fc 01       	movw	r30, r24
    3e5a:	01 90       	ld	r0, Z+
    3e5c:	00 20       	and	r0, r0
    3e5e:	e9 f7       	brne	.-6      	; 0x3e5a <lora_driver_set_application_key+0x2>
    3e60:	9f 01       	movw	r18, r30
    3e62:	21 52       	subi	r18, 0x21	; 33
    3e64:	31 09       	sbc	r19, r1
    3e66:	28 17       	cp	r18, r24
    3e68:	39 07       	cpc	r19, r25
    3e6a:	29 f4       	brne	.+10     	; 0x3e76 <lora_driver_set_application_key+0x1e>
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	8d e3       	ldi	r24, 0x3D	; 61
    3e70:	95 e0       	ldi	r25, 0x05	; 5
    3e72:	41 cf       	rjmp	.-382    	; 0x3cf6 <_upload_message_rc>
    3e74:	08 95       	ret
    3e76:	89 e0       	ldi	r24, 0x09	; 9
    3e78:	08 95       	ret

00003e7a <lora_driver_save_mac>:
    3e7a:	60 e0       	ldi	r22, 0x00	; 0
    3e7c:	70 e0       	ldi	r23, 0x00	; 0
    3e7e:	8c e7       	ldi	r24, 0x7C	; 124
    3e80:	95 e0       	ldi	r25, 0x05	; 5
    3e82:	39 cf       	rjmp	.-398    	; 0x3cf6 <_upload_message_rc>
    3e84:	08 95       	ret

00003e86 <lora_driver_join>:
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	e8 2f       	mov	r30, r24
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	ee 0f       	add	r30, r30
    3e90:	ff 1f       	adc	r31, r31
    3e92:	ea 5a       	subi	r30, 0xAA	; 170
    3e94:	f8 4f       	sbci	r31, 0xF8	; 248
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	85 e8       	ldi	r24, 0x85	; 133
    3e9c:	95 e0       	ldi	r25, 0x05	; 5
    3e9e:	2b df       	rcall	.-426    	; 0x3cf6 <_upload_message_rc>
    3ea0:	81 11       	cpse	r24, r1
    3ea2:	14 c0       	rjmp	.+40     	; 0x3ecc <lora_driver_join+0x46>
    3ea4:	08 e2       	ldi	r16, 0x28	; 40
    3ea6:	15 e0       	ldi	r17, 0x05	; 5
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	4d e2       	ldi	r20, 0x2D	; 45
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	61 e8       	ldi	r22, 0x81	; 129
    3eb2:	79 e1       	ldi	r23, 0x19	; 25
    3eb4:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <_serial_reply_buffer_handle>
    3eb8:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3ebc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <xStreamBufferReceive>
    3ec0:	88 23       	and	r24, r24
    3ec2:	21 f0       	breq	.+8      	; 0x3ecc <lora_driver_join+0x46>
    3ec4:	81 e8       	ldi	r24, 0x81	; 129
    3ec6:	99 e1       	ldi	r25, 0x19	; 25
    3ec8:	a1 de       	rcall	.-702    	; 0x3c0c <_reply2return_code>
    3eca:	03 c0       	rjmp	.+6      	; 0x3ed2 <lora_driver_join+0x4c>
    3ecc:	81 e8       	ldi	r24, 0x81	; 129
    3ece:	99 e1       	ldi	r25, 0x19	; 25
    3ed0:	9d de       	rcall	.-710    	; 0x3c0c <_reply2return_code>
    3ed2:	1f 91       	pop	r17
    3ed4:	0f 91       	pop	r16
    3ed6:	08 95       	ret

00003ed8 <lora_driver_sent_upload_message>:
    3ed8:	0f 93       	push	r16
    3eda:	1f 93       	push	r17
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
    3ee0:	1f 92       	push	r1
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
    3ee6:	db 01       	movw	r26, r22
    3ee8:	11 96       	adiw	r26, 0x01	; 1
    3eea:	9c 91       	ld	r25, X
    3eec:	11 97       	sbiw	r26, 0x01	; 1
    3eee:	95 31       	cpi	r25, 0x15	; 21
    3ef0:	08 f0       	brcs	.+2      	; 0x3ef4 <lora_driver_sent_upload_message+0x1c>
    3ef2:	b4 c0       	rjmp	.+360    	; 0x405c <lora_driver_sent_upload_message+0x184>
    3ef4:	99 23       	and	r25, r25
    3ef6:	81 f1       	breq	.+96     	; 0x3f58 <lora_driver_sent_upload_message+0x80>
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	27 2f       	mov	r18, r23
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	46 2f       	mov	r20, r22
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	fd 01       	movw	r30, r26
    3f06:	e4 0f       	add	r30, r20
    3f08:	f5 1f       	adc	r31, r21
    3f0a:	92 81       	ldd	r25, Z+2	; 0x02
    3f0c:	92 95       	swap	r25
    3f0e:	9f 70       	andi	r25, 0x0F	; 15
    3f10:	9a 30       	cpi	r25, 0x0A	; 10
    3f12:	10 f0       	brcs	.+4      	; 0x3f18 <lora_driver_sent_upload_message+0x40>
    3f14:	99 5c       	subi	r25, 0xC9	; 201
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <lora_driver_sent_upload_message+0x42>
    3f18:	90 5d       	subi	r25, 0xD0	; 208
    3f1a:	f9 01       	movw	r30, r18
    3f1c:	ee 5e       	subi	r30, 0xEE	; 238
    3f1e:	f6 4e       	sbci	r31, 0xE6	; 230
    3f20:	90 83       	st	Z, r25
    3f22:	2f 5f       	subi	r18, 0xFF	; 255
    3f24:	3f 4f       	sbci	r19, 0xFF	; 255
    3f26:	fd 01       	movw	r30, r26
    3f28:	e4 0f       	add	r30, r20
    3f2a:	f5 1f       	adc	r31, r21
    3f2c:	92 81       	ldd	r25, Z+2	; 0x02
    3f2e:	9f 70       	andi	r25, 0x0F	; 15
    3f30:	49 2f       	mov	r20, r25
    3f32:	50 e0       	ldi	r21, 0x00	; 0
    3f34:	4a 30       	cpi	r20, 0x0A	; 10
    3f36:	51 05       	cpc	r21, r1
    3f38:	14 f0       	brlt	.+4      	; 0x3f3e <lora_driver_sent_upload_message+0x66>
    3f3a:	99 5c       	subi	r25, 0xC9	; 201
    3f3c:	01 c0       	rjmp	.+2      	; 0x3f40 <lora_driver_sent_upload_message+0x68>
    3f3e:	90 5d       	subi	r25, 0xD0	; 208
    3f40:	f9 01       	movw	r30, r18
    3f42:	ee 5e       	subi	r30, 0xEE	; 238
    3f44:	f6 4e       	sbci	r31, 0xE6	; 230
    3f46:	90 83       	st	Z, r25
    3f48:	7e 5f       	subi	r23, 0xFE	; 254
    3f4a:	6f 5f       	subi	r22, 0xFF	; 255
    3f4c:	11 96       	adiw	r26, 0x01	; 1
    3f4e:	9c 91       	ld	r25, X
    3f50:	11 97       	sbiw	r26, 0x01	; 1
    3f52:	69 17       	cp	r22, r25
    3f54:	98 f2       	brcs	.-90     	; 0x3efc <lora_driver_sent_upload_message+0x24>
    3f56:	01 c0       	rjmp	.+2      	; 0x3f5a <lora_driver_sent_upload_message+0x82>
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	e7 2f       	mov	r30, r23
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	ee 5e       	subi	r30, 0xEE	; 238
    3f60:	f6 4e       	sbci	r31, 0xE6	; 230
    3f62:	10 82       	st	Z, r1
    3f64:	4c 91       	ld	r20, X
    3f66:	81 11       	cpse	r24, r1
    3f68:	03 c0       	rjmp	.+6      	; 0x3f70 <lora_driver_sent_upload_message+0x98>
    3f6a:	8e e8       	ldi	r24, 0x8E	; 142
    3f6c:	95 e0       	ldi	r25, 0x05	; 5
    3f6e:	02 c0       	rjmp	.+4      	; 0x3f74 <lora_driver_sent_upload_message+0x9c>
    3f70:	80 e9       	ldi	r24, 0x90	; 144
    3f72:	95 e0       	ldi	r25, 0x05	; 5
    3f74:	22 e1       	ldi	r18, 0x12	; 18
    3f76:	39 e1       	ldi	r19, 0x19	; 25
    3f78:	3f 93       	push	r19
    3f7a:	2f 93       	push	r18
    3f7c:	1f 92       	push	r1
    3f7e:	4f 93       	push	r20
    3f80:	9f 93       	push	r25
    3f82:	8f 93       	push	r24
    3f84:	84 e9       	ldi	r24, 0x94	; 148
    3f86:	95 e0       	ldi	r25, 0x05	; 5
    3f88:	9f 93       	push	r25
    3f8a:	8f 93       	push	r24
    3f8c:	84 e5       	ldi	r24, 0x54	; 84
    3f8e:	99 e1       	ldi	r25, 0x19	; 25
    3f90:	9f 93       	push	r25
    3f92:	8f 93       	push	r24
    3f94:	0e 94 13 2b 	call	0x5626	; 0x5626 <sprintf>
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	84 e5       	ldi	r24, 0x54	; 84
    3f9e:	99 e1       	ldi	r25, 0x19	; 25
    3fa0:	aa de       	rcall	.-684    	; 0x3cf6 <_upload_message_rc>
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	81 11       	cpse	r24, r1
    3fae:	59 c0       	rjmp	.+178    	; 0x4062 <lora_driver_sent_upload_message+0x18a>
    3fb0:	08 e2       	ldi	r16, 0x28	; 40
    3fb2:	15 e0       	ldi	r17, 0x05	; 5
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	4d e2       	ldi	r20, 0x2D	; 45
    3fba:	50 e0       	ldi	r21, 0x00	; 0
    3fbc:	61 e8       	ldi	r22, 0x81	; 129
    3fbe:	79 e1       	ldi	r23, 0x19	; 25
    3fc0:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <_serial_reply_buffer_handle>
    3fc4:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <_serial_reply_buffer_handle+0x1>
    3fc8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <xStreamBufferReceive>
    3fcc:	88 23       	and	r24, r24
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <lora_driver_sent_upload_message+0xfa>
    3fd0:	47 c0       	rjmp	.+142    	; 0x4060 <lora_driver_sent_upload_message+0x188>
    3fd2:	81 e8       	ldi	r24, 0x81	; 129
    3fd4:	99 e1       	ldi	r25, 0x19	; 25
    3fd6:	1a de       	rcall	.-972    	; 0x3c0c <_reply2return_code>
    3fd8:	8e 30       	cpi	r24, 0x0E	; 14
    3fda:	09 f0       	breq	.+2      	; 0x3fde <lora_driver_sent_upload_message+0x106>
    3fdc:	42 c0       	rjmp	.+132    	; 0x4062 <lora_driver_sent_upload_message+0x18a>
    3fde:	87 e0       	ldi	r24, 0x07	; 7
    3fe0:	89 83       	std	Y+1, r24	; 0x01
    3fe2:	80 91 f6 18 	lds	r24, 0x18F6	; 0x8018f6 <_downlinkMessageBuffer>
    3fe6:	90 91 f7 18 	lds	r25, 0x18F7	; 0x8018f7 <_downlinkMessageBuffer+0x1>
    3fea:	89 2b       	or	r24, r25
    3fec:	a9 f1       	breq	.+106    	; 0x4058 <lora_driver_sent_upload_message+0x180>
    3fee:	be 01       	movw	r22, r28
    3ff0:	6f 5f       	subi	r22, 0xFF	; 255
    3ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff4:	81 e8       	ldi	r24, 0x81	; 129
    3ff6:	99 e1       	ldi	r25, 0x19	; 25
    3ff8:	68 d1       	rcall	.+720    	; 0x42ca <decode_port_no>
    3ffa:	80 93 fc 18 	sts	0x18FC, r24	; 0x8018fc <_downlink_payload>
    3ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	ef 57       	subi	r30, 0x7F	; 127
    4004:	f6 4e       	sbci	r31, 0xE6	; 230
    4006:	df 01       	movw	r26, r30
    4008:	0d 90       	ld	r0, X+
    400a:	00 20       	and	r0, r0
    400c:	e9 f7       	brne	.-6      	; 0x4008 <lora_driver_sent_upload_message+0x130>
    400e:	11 97       	sbiw	r26, 0x01	; 1
    4010:	ae 1b       	sub	r26, r30
    4012:	bf 0b       	sbc	r27, r31
    4014:	aa 23       	and	r26, r26
    4016:	91 f0       	breq	.+36     	; 0x403c <lora_driver_sent_upload_message+0x164>
    4018:	bb 27       	eor	r27, r27
    401a:	cd 01       	movw	r24, r26
    401c:	01 97       	sbiw	r24, 0x01	; 1
    401e:	9c 01       	movw	r18, r24
    4020:	12 f4       	brpl	.+4      	; 0x4026 <lora_driver_sent_upload_message+0x14e>
    4022:	2f 5f       	subi	r18, 0xFF	; 255
    4024:	3f 4f       	sbci	r19, 0xFF	; 255
    4026:	35 95       	asr	r19
    4028:	27 95       	ror	r18
    402a:	20 93 fd 18 	sts	0x18FD, r18	; 0x8018fd <_downlink_payload+0x1>
    402e:	af 01       	movw	r20, r30
    4030:	4f 5f       	subi	r20, 0xFF	; 255
    4032:	5f 4f       	sbci	r21, 0xFF	; 255
    4034:	64 e1       	ldi	r22, 0x14	; 20
    4036:	8e ef       	ldi	r24, 0xFE	; 254
    4038:	98 e1       	ldi	r25, 0x18	; 24
    403a:	73 d1       	rcall	.+742    	; 0x4322 <decode_hexadecimal_string_bytes>
    403c:	01 e0       	ldi	r16, 0x01	; 1
    403e:	10 e0       	ldi	r17, 0x00	; 0
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	46 e1       	ldi	r20, 0x16	; 22
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	6c ef       	ldi	r22, 0xFC	; 252
    404a:	78 e1       	ldi	r23, 0x18	; 24
    404c:	80 91 f6 18 	lds	r24, 0x18F6	; 0x8018f6 <_downlinkMessageBuffer>
    4050:	90 91 f7 18 	lds	r25, 0x18F7	; 0x8018f7 <_downlinkMessageBuffer+0x1>
    4054:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xStreamBufferSend>
    4058:	8e e0       	ldi	r24, 0x0E	; 14
    405a:	03 c0       	rjmp	.+6      	; 0x4062 <lora_driver_sent_upload_message+0x18a>
    405c:	84 e1       	ldi	r24, 0x14	; 20
    405e:	01 c0       	rjmp	.+2      	; 0x4062 <lora_driver_sent_upload_message+0x18a>
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	0f 90       	pop	r0
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	08 95       	ret

0000406e <lora_driver_set_adaptive_data_rate>:
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	19 f0       	breq	.+6      	; 0x4078 <lora_driver_set_adaptive_data_rate+0xa>
    4072:	64 ea       	ldi	r22, 0xA4	; 164
    4074:	75 e0       	ldi	r23, 0x05	; 5
    4076:	02 c0       	rjmp	.+4      	; 0x407c <lora_driver_set_adaptive_data_rate+0xe>
    4078:	6d e7       	ldi	r22, 0x7D	; 125
    407a:	76 e0       	ldi	r23, 0x06	; 6
    407c:	88 ea       	ldi	r24, 0xA8	; 168
    407e:	95 e0       	ldi	r25, 0x05	; 5
    4080:	3a ce       	rjmp	.-908    	; 0x3cf6 <_upload_message_rc>
    4082:	08 95       	ret

00004084 <lora_driver_set_receive_delay>:
    4084:	9f 93       	push	r25
    4086:	8f 93       	push	r24
    4088:	89 ed       	ldi	r24, 0xD9	; 217
    408a:	95 e0       	ldi	r25, 0x05	; 5
    408c:	9f 93       	push	r25
    408e:	8f 93       	push	r24
    4090:	84 e5       	ldi	r24, 0x54	; 84
    4092:	99 e1       	ldi	r25, 0x19	; 25
    4094:	9f 93       	push	r25
    4096:	8f 93       	push	r24
    4098:	0e 94 13 2b 	call	0x5626	; 0x5626 <sprintf>
    409c:	60 e0       	ldi	r22, 0x00	; 0
    409e:	70 e0       	ldi	r23, 0x00	; 0
    40a0:	84 e5       	ldi	r24, 0x54	; 84
    40a2:	99 e1       	ldi	r25, 0x19	; 25
    40a4:	28 de       	rcall	.-944    	; 0x3cf6 <_upload_message_rc>
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	08 95       	ret

000040b4 <lora_driver_configure_to_eu868>:
    40b4:	2f 92       	push	r2
    40b6:	3f 92       	push	r3
    40b8:	4f 92       	push	r4
    40ba:	5f 92       	push	r5
    40bc:	6f 92       	push	r6
    40be:	7f 92       	push	r7
    40c0:	8f 92       	push	r8
    40c2:	9f 92       	push	r9
    40c4:	af 92       	push	r10
    40c6:	bf 92       	push	r11
    40c8:	cf 92       	push	r12
    40ca:	df 92       	push	r13
    40cc:	ef 92       	push	r14
    40ce:	ff 92       	push	r15
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
    40dc:	a0 97       	sbiw	r28, 0x20	; 32
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	66 e0       	ldi	r22, 0x06	; 6
    40ea:	76 e0       	ldi	r23, 0x06	; 6
    40ec:	82 e1       	ldi	r24, 0x12	; 18
    40ee:	96 e0       	ldi	r25, 0x06	; 6
    40f0:	33 dd       	rcall	.-1434   	; 0x3b58 <_upload_message>
    40f2:	8c dd       	rcall	.-1256   	; 0x3c0c <_reply2return_code>
    40f4:	81 11       	cpse	r24, r1
    40f6:	a3 c0       	rjmp	.+326    	; 0x423e <lora_driver_configure_to_eu868+0x18a>
    40f8:	80 e2       	ldi	r24, 0x20	; 32
    40fa:	e3 e2       	ldi	r30, 0x23	; 35
    40fc:	f2 e0       	ldi	r31, 0x02	; 2
    40fe:	de 01       	movw	r26, r28
    4100:	11 96       	adiw	r26, 0x01	; 1
    4102:	01 90       	ld	r0, Z+
    4104:	0d 92       	st	X+, r0
    4106:	8a 95       	dec	r24
    4108:	e1 f7       	brne	.-8      	; 0x4102 <lora_driver_configure_to_eu868+0x4e>
    410a:	9e 01       	movw	r18, r28
    410c:	2f 5f       	subi	r18, 0xFF	; 255
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	69 01       	movw	r12, r18
    4112:	e1 2c       	mov	r14, r1
    4114:	f1 2c       	mov	r15, r1
    4116:	0f 2e       	mov	r0, r31
    4118:	fe e1       	ldi	r31, 0x1E	; 30
    411a:	af 2e       	mov	r10, r31
    411c:	f6 e0       	ldi	r31, 0x06	; 6
    411e:	bf 2e       	mov	r11, r31
    4120:	f0 2d       	mov	r31, r0
    4122:	04 e5       	ldi	r16, 0x54	; 84
    4124:	19 e1       	ldi	r17, 0x19	; 25
    4126:	0f 2e       	mov	r0, r31
    4128:	f7 e3       	ldi	r31, 0x37	; 55
    412a:	4f 2e       	mov	r4, r31
    412c:	f6 e0       	ldi	r31, 0x06	; 6
    412e:	5f 2e       	mov	r5, r31
    4130:	f0 2d       	mov	r31, r0
    4132:	0f 2e       	mov	r0, r31
    4134:	fe e4       	ldi	r31, 0x4E	; 78
    4136:	8f 2e       	mov	r8, r31
    4138:	f6 e0       	ldi	r31, 0x06	; 6
    413a:	9f 2e       	mov	r9, r31
    413c:	f0 2d       	mov	r31, r0
    413e:	0f 2e       	mov	r0, r31
    4140:	f8 e6       	ldi	r31, 0x68	; 104
    4142:	6f 2e       	mov	r6, r31
    4144:	f6 e0       	ldi	r31, 0x06	; 6
    4146:	7f 2e       	mov	r7, r31
    4148:	f0 2d       	mov	r31, r0
    414a:	3e 2c       	mov	r3, r14
    414c:	2f 2c       	mov	r2, r15
    414e:	ff 92       	push	r15
    4150:	ef 92       	push	r14
    4152:	bf 92       	push	r11
    4154:	af 92       	push	r10
    4156:	1f 93       	push	r17
    4158:	0f 93       	push	r16
    415a:	0e 94 13 2b 	call	0x5626	; 0x5626 <sprintf>
    415e:	60 e0       	ldi	r22, 0x00	; 0
    4160:	70 e0       	ldi	r23, 0x00	; 0
    4162:	c8 01       	movw	r24, r16
    4164:	f9 dc       	rcall	.-1550   	; 0x3b58 <_upload_message>
    4166:	52 dd       	rcall	.-1372   	; 0x3c0c <_reply2return_code>
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	0f 90       	pop	r0
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	81 11       	cpse	r24, r1
    4176:	63 c0       	rjmp	.+198    	; 0x423e <lora_driver_configure_to_eu868+0x18a>
    4178:	32 e0       	ldi	r19, 0x02	; 2
    417a:	3e 15       	cp	r19, r14
    417c:	e8 f4       	brcc	.+58     	; 0x41b8 <lora_driver_configure_to_eu868+0x104>
    417e:	f6 01       	movw	r30, r12
    4180:	83 81       	ldd	r24, Z+3	; 0x03
    4182:	8f 93       	push	r24
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	8f 93       	push	r24
    4188:	81 81       	ldd	r24, Z+1	; 0x01
    418a:	8f 93       	push	r24
    418c:	80 81       	ld	r24, Z
    418e:	8f 93       	push	r24
    4190:	ff 92       	push	r15
    4192:	ef 92       	push	r14
    4194:	5f 92       	push	r5
    4196:	4f 92       	push	r4
    4198:	1f 93       	push	r17
    419a:	0f 93       	push	r16
    419c:	0e 94 13 2b 	call	0x5626	; 0x5626 <sprintf>
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	c8 01       	movw	r24, r16
    41a6:	d8 dc       	rcall	.-1616   	; 0x3b58 <_upload_message>
    41a8:	31 dd       	rcall	.-1438   	; 0x3c0c <_reply2return_code>
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
    41b4:	81 11       	cpse	r24, r1
    41b6:	43 c0       	rjmp	.+134    	; 0x423e <lora_driver_configure_to_eu868+0x18a>
    41b8:	2f 92       	push	r2
    41ba:	3f 92       	push	r3
    41bc:	9f 92       	push	r9
    41be:	8f 92       	push	r8
    41c0:	1f 93       	push	r17
    41c2:	0f 93       	push	r16
    41c4:	0e 94 13 2b 	call	0x5626	; 0x5626 <sprintf>
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	c8 01       	movw	r24, r16
    41ce:	c4 dc       	rcall	.-1656   	; 0x3b58 <_upload_message>
    41d0:	1d dd       	rcall	.-1478   	; 0x3c0c <_reply2return_code>
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	81 11       	cpse	r24, r1
    41e0:	2e c0       	rjmp	.+92     	; 0x423e <lora_driver_configure_to_eu868+0x18a>
    41e2:	2f 92       	push	r2
    41e4:	3f 92       	push	r3
    41e6:	7f 92       	push	r7
    41e8:	6f 92       	push	r6
    41ea:	1f 93       	push	r17
    41ec:	0f 93       	push	r16
    41ee:	0e 94 13 2b 	call	0x5626	; 0x5626 <sprintf>
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	c8 01       	movw	r24, r16
    41f8:	af dc       	rcall	.-1698   	; 0x3b58 <_upload_message>
    41fa:	08 dd       	rcall	.-1520   	; 0x3c0c <_reply2return_code>
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	81 11       	cpse	r24, r1
    420a:	19 c0       	rjmp	.+50     	; 0x423e <lora_driver_configure_to_eu868+0x18a>
    420c:	3f ef       	ldi	r19, 0xFF	; 255
    420e:	e3 1a       	sub	r14, r19
    4210:	f3 0a       	sbc	r15, r19
    4212:	84 e0       	ldi	r24, 0x04	; 4
    4214:	c8 0e       	add	r12, r24
    4216:	d1 1c       	adc	r13, r1
    4218:	98 e0       	ldi	r25, 0x08	; 8
    421a:	e9 16       	cp	r14, r25
    421c:	f1 04       	cpc	r15, r1
    421e:	09 f0       	breq	.+2      	; 0x4222 <lora_driver_configure_to_eu868+0x16e>
    4220:	94 cf       	rjmp	.-216    	; 0x414a <lora_driver_configure_to_eu868+0x96>
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	80 e8       	ldi	r24, 0x80	; 128
    4228:	96 e0       	ldi	r25, 0x06	; 6
    422a:	96 dc       	rcall	.-1748   	; 0x3b58 <_upload_message>
    422c:	ef dc       	rcall	.-1570   	; 0x3c0c <_reply2return_code>
    422e:	81 11       	cpse	r24, r1
    4230:	06 c0       	rjmp	.+12     	; 0x423e <lora_driver_configure_to_eu868+0x18a>
    4232:	60 e0       	ldi	r22, 0x00	; 0
    4234:	70 e0       	ldi	r23, 0x00	; 0
    4236:	81 e9       	ldi	r24, 0x91	; 145
    4238:	96 e0       	ldi	r25, 0x06	; 6
    423a:	8e dc       	rcall	.-1764   	; 0x3b58 <_upload_message>
    423c:	e7 dc       	rcall	.-1586   	; 0x3c0c <_reply2return_code>
    423e:	a0 96       	adiw	r28, 0x20	; 32
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	de bf       	out	0x3e, r29	; 62
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	cd bf       	out	0x3d, r28	; 61
    424a:	df 91       	pop	r29
    424c:	cf 91       	pop	r28
    424e:	1f 91       	pop	r17
    4250:	0f 91       	pop	r16
    4252:	ff 90       	pop	r15
    4254:	ef 90       	pop	r14
    4256:	df 90       	pop	r13
    4258:	cf 90       	pop	r12
    425a:	bf 90       	pop	r11
    425c:	af 90       	pop	r10
    425e:	9f 90       	pop	r9
    4260:	8f 90       	pop	r8
    4262:	7f 90       	pop	r7
    4264:	6f 90       	pop	r6
    4266:	5f 90       	pop	r5
    4268:	4f 90       	pop	r4
    426a:	3f 90       	pop	r3
    426c:	2f 90       	pop	r2
    426e:	08 95       	ret

00004270 <lora_driver_set_otaa_identity>:
    4270:	ef 92       	push	r14
    4272:	ff 92       	push	r15
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	ec 01       	movw	r28, r24
    427e:	8b 01       	movw	r16, r22
    4280:	7a 01       	movw	r14, r20
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	f4 de       	rcall	.-536    	; 0x406e <lora_driver_set_adaptive_data_rate>
    4286:	81 11       	cpse	r24, r1
    4288:	0d c0       	rjmp	.+26     	; 0x42a4 <lora_driver_set_otaa_identity+0x34>
    428a:	ce 01       	movw	r24, r28
    428c:	d4 dd       	rcall	.-1112   	; 0x3e36 <lora_driver_set_application_identifier>
    428e:	81 11       	cpse	r24, r1
    4290:	09 c0       	rjmp	.+18     	; 0x42a4 <lora_driver_set_otaa_identity+0x34>
    4292:	c8 01       	movw	r24, r16
    4294:	e1 dd       	rcall	.-1086   	; 0x3e58 <lora_driver_set_application_key>
    4296:	81 11       	cpse	r24, r1
    4298:	05 c0       	rjmp	.+10     	; 0x42a4 <lora_driver_set_otaa_identity+0x34>
    429a:	c7 01       	movw	r24, r14
    429c:	bb dd       	rcall	.-1162   	; 0x3e14 <lora_driver_set_device_identifier>
    429e:	81 11       	cpse	r24, r1
    42a0:	01 c0       	rjmp	.+2      	; 0x42a4 <lora_driver_set_otaa_identity+0x34>
    42a2:	eb dd       	rcall	.-1066   	; 0x3e7a <lora_driver_save_mac>
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	08 95       	ret

000042b2 <lora_driver_map_return_code_to_text>:
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	fc 01       	movw	r30, r24
    42b6:	ee 0f       	add	r30, r30
    42b8:	ff 1f       	adc	r31, r31
    42ba:	8e 0f       	add	r24, r30
    42bc:	9f 1f       	adc	r25, r31
    42be:	fc 01       	movw	r30, r24
    42c0:	e6 5a       	subi	r30, 0xA6	; 166
    42c2:	f8 4f       	sbci	r31, 0xF8	; 248
    42c4:	81 81       	ldd	r24, Z+1	; 0x01
    42c6:	92 81       	ldd	r25, Z+2	; 0x02
    42c8:	08 95       	ret

000042ca <decode_port_no>:
    42ca:	dc 01       	movw	r26, r24
    42cc:	00 97       	sbiw	r24, 0x00	; 0
    42ce:	29 f1       	breq	.+74     	; 0x431a <decode_port_no+0x50>
    42d0:	fb 01       	movw	r30, r22
    42d2:	20 81       	ld	r18, Z
    42d4:	fc 01       	movw	r30, r24
    42d6:	01 90       	ld	r0, Z+
    42d8:	00 20       	and	r0, r0
    42da:	e9 f7       	brne	.-6      	; 0x42d6 <decode_port_no+0xc>
    42dc:	31 97       	sbiw	r30, 0x01	; 1
    42de:	e8 1b       	sub	r30, r24
    42e0:	f9 0b       	sbc	r31, r25
    42e2:	82 2f       	mov	r24, r18
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	e8 17       	cp	r30, r24
    42e8:	f9 07       	cpc	r31, r25
    42ea:	c8 f0       	brcs	.+50     	; 0x431e <decode_port_no+0x54>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	08 c0       	rjmp	.+16     	; 0x4300 <decode_port_no+0x36>
    42f0:	88 0f       	add	r24, r24
    42f2:	38 2f       	mov	r19, r24
    42f4:	33 0f       	add	r19, r19
    42f6:	33 0f       	add	r19, r19
    42f8:	83 0f       	add	r24, r19
    42fa:	80 53       	subi	r24, 0x30	; 48
    42fc:	89 0f       	add	r24, r25
    42fe:	2f 5f       	subi	r18, 0xFF	; 255
    4300:	fd 01       	movw	r30, r26
    4302:	e2 0f       	add	r30, r18
    4304:	f1 1d       	adc	r31, r1
    4306:	90 81       	ld	r25, Z
    4308:	30 ed       	ldi	r19, 0xD0	; 208
    430a:	39 0f       	add	r19, r25
    430c:	3a 30       	cpi	r19, 0x0A	; 10
    430e:	10 f4       	brcc	.+4      	; 0x4314 <decode_port_no+0x4a>
    4310:	91 11       	cpse	r25, r1
    4312:	ee cf       	rjmp	.-36     	; 0x42f0 <decode_port_no+0x26>
    4314:	fb 01       	movw	r30, r22
    4316:	20 83       	st	Z, r18
    4318:	08 95       	ret
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	08 95       	ret
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	08 95       	ret

00004322 <decode_hexadecimal_string_bytes>:
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	dc 01       	movw	r26, r24
    432c:	ea 01       	movw	r28, r20
    432e:	20 97       	sbiw	r28, 0x00	; 0
    4330:	e1 f1       	breq	.+120    	; 0x43aa <decode_hexadecimal_string_bytes+0x88>
    4332:	fa 01       	movw	r30, r20
    4334:	01 90       	ld	r0, Z+
    4336:	00 20       	and	r0, r0
    4338:	e9 f7       	brne	.-6      	; 0x4334 <decode_hexadecimal_string_bytes+0x12>
    433a:	31 97       	sbiw	r30, 0x01	; 1
    433c:	e4 1b       	sub	r30, r20
    433e:	f5 0b       	sbc	r31, r21
    4340:	32 97       	sbiw	r30, 0x02	; 2
    4342:	10 f5       	brcc	.+68     	; 0x4388 <decode_hexadecimal_string_bytes+0x66>
    4344:	32 c0       	rjmp	.+100    	; 0x43aa <decode_hexadecimal_string_bytes+0x88>
    4346:	8d 01       	movw	r16, r26
    4348:	04 0f       	add	r16, r20
    434a:	15 1f       	adc	r17, r21
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	ae 01       	movw	r20, r28
    4350:	42 0f       	add	r20, r18
    4352:	53 1f       	adc	r21, r19
    4354:	fa 01       	movw	r30, r20
    4356:	90 81       	ld	r25, Z
    4358:	91 34       	cpi	r25, 0x41	; 65
    435a:	28 f0       	brcs	.+10     	; 0x4366 <decode_hexadecimal_string_bytes+0x44>
    435c:	97 53       	subi	r25, 0x37	; 55
    435e:	59 2f       	mov	r21, r25
    4360:	52 95       	swap	r21
    4362:	50 7f       	andi	r21, 0xF0	; 240
    4364:	03 c0       	rjmp	.+6      	; 0x436c <decode_hexadecimal_string_bytes+0x4a>
    4366:	59 2f       	mov	r21, r25
    4368:	52 95       	swap	r21
    436a:	50 7f       	andi	r21, 0xF0	; 240
    436c:	2c 0f       	add	r18, r28
    436e:	3d 1f       	adc	r19, r29
    4370:	f9 01       	movw	r30, r18
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	91 34       	cpi	r25, 0x41	; 65
    4376:	10 f0       	brcs	.+4      	; 0x437c <decode_hexadecimal_string_bytes+0x5a>
    4378:	97 53       	subi	r25, 0x37	; 55
    437a:	01 c0       	rjmp	.+2      	; 0x437e <decode_hexadecimal_string_bytes+0x5c>
    437c:	90 53       	subi	r25, 0x30	; 48
    437e:	95 0f       	add	r25, r21
    4380:	f8 01       	movw	r30, r16
    4382:	90 83       	st	Z, r25
    4384:	8f 5f       	subi	r24, 0xFF	; 255
    4386:	01 c0       	rjmp	.+2      	; 0x438a <decode_hexadecimal_string_bytes+0x68>
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	28 2f       	mov	r18, r24
    438c:	22 0f       	add	r18, r18
    438e:	48 2f       	mov	r20, r24
    4390:	50 e0       	ldi	r21, 0x00	; 0
    4392:	fe 01       	movw	r30, r28
    4394:	01 90       	ld	r0, Z+
    4396:	00 20       	and	r0, r0
    4398:	e9 f7       	brne	.-6      	; 0x4394 <decode_hexadecimal_string_bytes+0x72>
    439a:	31 97       	sbiw	r30, 0x01	; 1
    439c:	ec 1b       	sub	r30, r28
    439e:	fd 0b       	sbc	r31, r29
    43a0:	4e 17       	cp	r20, r30
    43a2:	5f 07       	cpc	r21, r31
    43a4:	10 f4       	brcc	.+4      	; 0x43aa <decode_hexadecimal_string_bytes+0x88>
    43a6:	86 13       	cpse	r24, r22
    43a8:	ce cf       	rjmp	.-100    	; 0x4346 <decode_hexadecimal_string_bytes+0x24>
    43aa:	df 91       	pop	r29
    43ac:	cf 91       	pop	r28
    43ae:	1f 91       	pop	r17
    43b0:	0f 91       	pop	r16
    43b2:	08 95       	ret

000043b4 <reg_read_register>:
    43b4:	fc 01       	movw	r30, r24
    43b6:	80 81       	ld	r24, Z
    43b8:	08 95       	ret

000043ba <reg_read_bit>:
    43ba:	fc 01       	movw	r30, r24
    43bc:	20 81       	ld	r18, Z
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <reg_read_bit+0xe>
    43c4:	88 0f       	add	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	6a 95       	dec	r22
    43ca:	e2 f7       	brpl	.-8      	; 0x43c4 <reg_read_bit+0xa>
    43cc:	82 23       	and	r24, r18
    43ce:	08 95       	ret

000043d0 <reg_read_bits>:
    43d0:	fc 01       	movw	r30, r24
    43d2:	80 81       	ld	r24, Z
    43d4:	86 23       	and	r24, r22
    43d6:	08 95       	ret

000043d8 <reg_set_register>:
    43d8:	fc 01       	movw	r30, r24
    43da:	60 83       	st	Z, r22
    43dc:	08 95       	ret

000043de <reg_clear_register>:
    43de:	fc 01       	movw	r30, r24
    43e0:	10 82       	st	Z, r1
    43e2:	08 95       	ret

000043e4 <reg_set_bit>:
    43e4:	fc 01       	movw	r30, r24
    43e6:	40 81       	ld	r20, Z
    43e8:	21 e0       	ldi	r18, 0x01	; 1
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	02 c0       	rjmp	.+4      	; 0x43f2 <reg_set_bit+0xe>
    43ee:	22 0f       	add	r18, r18
    43f0:	33 1f       	adc	r19, r19
    43f2:	6a 95       	dec	r22
    43f4:	e2 f7       	brpl	.-8      	; 0x43ee <reg_set_bit+0xa>
    43f6:	24 2b       	or	r18, r20
    43f8:	20 83       	st	Z, r18
    43fa:	08 95       	ret

000043fc <reg_set_bits>:
    43fc:	fc 01       	movw	r30, r24
    43fe:	20 81       	ld	r18, Z
    4400:	62 2b       	or	r22, r18
    4402:	60 83       	st	Z, r22
    4404:	08 95       	ret

00004406 <reg_toggle_bit>:
    4406:	fc 01       	movw	r30, r24
    4408:	40 81       	ld	r20, Z
    440a:	21 e0       	ldi	r18, 0x01	; 1
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <reg_toggle_bit+0xe>
    4410:	22 0f       	add	r18, r18
    4412:	33 1f       	adc	r19, r19
    4414:	6a 95       	dec	r22
    4416:	e2 f7       	brpl	.-8      	; 0x4410 <reg_toggle_bit+0xa>
    4418:	24 27       	eor	r18, r20
    441a:	20 83       	st	Z, r18
    441c:	08 95       	ret

0000441e <reg_toggle_bits>:
    441e:	fc 01       	movw	r30, r24
    4420:	20 81       	ld	r18, Z
    4422:	62 27       	eor	r22, r18
    4424:	60 83       	st	Z, r22
    4426:	08 95       	ret

00004428 <reg_clear_bit>:
    4428:	fc 01       	movw	r30, r24
    442a:	90 81       	ld	r25, Z
    442c:	21 e0       	ldi	r18, 0x01	; 1
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	02 c0       	rjmp	.+4      	; 0x4436 <reg_clear_bit+0xe>
    4432:	22 0f       	add	r18, r18
    4434:	33 1f       	adc	r19, r19
    4436:	6a 95       	dec	r22
    4438:	e2 f7       	brpl	.-8      	; 0x4432 <reg_clear_bit+0xa>
    443a:	20 95       	com	r18
    443c:	29 23       	and	r18, r25
    443e:	20 83       	st	Z, r18
    4440:	08 95       	ret

00004442 <reg_clear_bits>:
    4442:	fc 01       	movw	r30, r24
    4444:	90 81       	ld	r25, Z
    4446:	60 95       	com	r22
    4448:	69 23       	and	r22, r25
    444a:	60 83       	st	Z, r22
    444c:	08 95       	ret

0000444e <serial_new_instance>:
    444e:	2f 92       	push	r2
    4450:	3f 92       	push	r3
    4452:	4f 92       	push	r4
    4454:	5f 92       	push	r5
    4456:	6f 92       	push	r6
    4458:	7f 92       	push	r7
    445a:	8f 92       	push	r8
    445c:	9f 92       	push	r9
    445e:	af 92       	push	r10
    4460:	cf 92       	push	r12
    4462:	ef 92       	push	r14
    4464:	ff 92       	push	r15
    4466:	0f 93       	push	r16
    4468:	1f 93       	push	r17
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    4472:	f8 2e       	mov	r15, r24
    4474:	2a 01       	movw	r4, r20
    4476:	3b 01       	movw	r6, r22
    4478:	88 e0       	ldi	r24, 0x08	; 8
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	0d d7       	rcall	.+3610   	; 0x5298 <malloc>
    447e:	8c 01       	movw	r16, r24
    4480:	8f 2d       	mov	r24, r15
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	fc 01       	movw	r30, r24
    448a:	e2 55       	subi	r30, 0x52	; 82
    448c:	f6 4e       	sbci	r31, 0xE6	; 230
    448e:	11 83       	std	Z+1, r17	; 0x01
    4490:	00 83       	st	Z, r16
    4492:	fc 01       	movw	r30, r24
    4494:	e4 5f       	subi	r30, 0xF4	; 244
    4496:	fd 4f       	sbci	r31, 0xFD	; 253
    4498:	80 81       	ld	r24, Z
    449a:	91 81       	ldd	r25, Z+1	; 0x01
    449c:	d8 01       	movw	r26, r16
    449e:	8d 93       	st	X+, r24
    44a0:	9c 93       	st	X, r25
    44a2:	6c 2d       	mov	r22, r12
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	84 e0       	ldi	r24, 0x04	; 4
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	dc d6       	rcall	.+3512   	; 0x5264 <calloc>
    44ac:	1c 01       	movw	r2, r24
    44ae:	61 e0       	ldi	r22, 0x01	; 1
    44b0:	70 e0       	ldi	r23, 0x00	; 0
    44b2:	86 e0       	ldi	r24, 0x06	; 6
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	d6 d6       	rcall	.+3500   	; 0x5264 <calloc>
    44b8:	7c 01       	movw	r14, r24
    44ba:	4c 2d       	mov	r20, r12
    44bc:	b1 01       	movw	r22, r2
    44be:	df d4       	rcall	.+2494   	; 0x4e7e <fifo_init>
    44c0:	f8 01       	movw	r30, r16
    44c2:	f5 82       	std	Z+5, r15	; 0x05
    44c4:	e4 82       	std	Z+4, r14	; 0x04
    44c6:	6a 2d       	mov	r22, r10
    44c8:	70 e0       	ldi	r23, 0x00	; 0
    44ca:	84 e0       	ldi	r24, 0x04	; 4
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	ca d6       	rcall	.+3476   	; 0x5264 <calloc>
    44d0:	1c 01       	movw	r2, r24
    44d2:	61 e0       	ldi	r22, 0x01	; 1
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	86 e0       	ldi	r24, 0x06	; 6
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	c4 d6       	rcall	.+3464   	; 0x5264 <calloc>
    44dc:	7c 01       	movw	r14, r24
    44de:	4a 2d       	mov	r20, r10
    44e0:	b1 01       	movw	r22, r2
    44e2:	cd d4       	rcall	.+2458   	; 0x4e7e <fifo_init>
    44e4:	d8 01       	movw	r26, r16
    44e6:	13 96       	adiw	r26, 0x03	; 3
    44e8:	fc 92       	st	X, r15
    44ea:	ee 92       	st	-X, r14
    44ec:	12 97       	sbiw	r26, 0x02	; 2
    44ee:	17 96       	adiw	r26, 0x07	; 7
    44f0:	9c 92       	st	X, r9
    44f2:	8e 92       	st	-X, r8
    44f4:	16 97       	sbiw	r26, 0x06	; 6
    44f6:	ff b6       	in	r15, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	ed 91       	ld	r30, X+
    44fc:	fc 91       	ld	r31, X
    44fe:	11 97       	sbiw	r26, 0x01	; 1
    4500:	36 97       	sbiw	r30, 0x06	; 6
    4502:	80 81       	ld	r24, Z
    4504:	82 60       	ori	r24, 0x02	; 2
    4506:	80 83       	st	Z, r24
    4508:	8d 90       	ld	r8, X+
    450a:	9c 90       	ld	r9, X
    450c:	c3 01       	movw	r24, r6
    450e:	b2 01       	movw	r22, r4
    4510:	35 d8       	rcall	.-3990   	; 0x357c <__floatunsisf>
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	51 e4       	ldi	r21, 0x41	; 65
    451a:	17 d6       	rcall	.+3118   	; 0x514a <__mulsf3>
    451c:	9b 01       	movw	r18, r22
    451e:	ac 01       	movw	r20, r24
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	74 e2       	ldi	r23, 0x24	; 36
    4524:	84 e7       	ldi	r24, 0x74	; 116
    4526:	9b e4       	ldi	r25, 0x4B	; 75
    4528:	2b d5       	rcall	.+2646   	; 0x4f80 <__divsf3>
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	40 e8       	ldi	r20, 0x80	; 128
    4530:	5f e3       	ldi	r21, 0x3F	; 63
    4532:	c1 d4       	rcall	.+2434   	; 0x4eb6 <__subsf3>
    4534:	8d d5       	rcall	.+2842   	; 0x5050 <__fixunssfsi>
    4536:	f4 01       	movw	r30, r8
    4538:	32 97       	sbiw	r30, 0x02	; 2
    453a:	60 83       	st	Z, r22
    453c:	d8 01       	movw	r26, r16
    453e:	ed 91       	ld	r30, X+
    4540:	fc 91       	ld	r31, X
    4542:	11 97       	sbiw	r26, 0x01	; 1
    4544:	35 97       	sbiw	r30, 0x05	; 5
    4546:	88 e9       	ldi	r24, 0x98	; 152
    4548:	80 83       	st	Z, r24
    454a:	ed 91       	ld	r30, X+
    454c:	fc 91       	ld	r31, X
    454e:	34 97       	sbiw	r30, 0x04	; 4
    4550:	86 e0       	ldi	r24, 0x06	; 6
    4552:	80 83       	st	Z, r24
    4554:	ff be       	out	0x3f, r15	; 63
    4556:	c8 01       	movw	r24, r16
    4558:	df 91       	pop	r29
    455a:	cf 91       	pop	r28
    455c:	1f 91       	pop	r17
    455e:	0f 91       	pop	r16
    4560:	ff 90       	pop	r15
    4562:	ef 90       	pop	r14
    4564:	cf 90       	pop	r12
    4566:	af 90       	pop	r10
    4568:	9f 90       	pop	r9
    456a:	8f 90       	pop	r8
    456c:	7f 90       	pop	r7
    456e:	6f 90       	pop	r6
    4570:	5f 90       	pop	r5
    4572:	4f 90       	pop	r4
    4574:	3f 90       	pop	r3
    4576:	2f 90       	pop	r2
    4578:	08 95       	ret

0000457a <serial_send_byte>:
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	ec 01       	movw	r28, r24
    4580:	ea 81       	ldd	r30, Y+2	; 0x02
    4582:	fb 81       	ldd	r31, Y+3	; 0x03
    4584:	93 81       	ldd	r25, Z+3	; 0x03
    4586:	82 81       	ldd	r24, Z+2	; 0x02
    4588:	25 81       	ldd	r18, Z+5	; 0x05
    458a:	98 1b       	sub	r25, r24
    458c:	92 23       	and	r25, r18
    458e:	84 81       	ldd	r24, Z+4	; 0x04
    4590:	98 17       	cp	r25, r24
    4592:	a1 f0       	breq	.+40     	; 0x45bc <serial_send_byte+0x42>
    4594:	93 81       	ldd	r25, Z+3	; 0x03
    4596:	26 95       	lsr	r18
    4598:	29 23       	and	r18, r25
    459a:	a0 81       	ld	r26, Z
    459c:	b1 81       	ldd	r27, Z+1	; 0x01
    459e:	a2 0f       	add	r26, r18
    45a0:	b1 1d       	adc	r27, r1
    45a2:	6c 93       	st	X, r22
    45a4:	9f 5f       	subi	r25, 0xFF	; 255
    45a6:	25 81       	ldd	r18, Z+5	; 0x05
    45a8:	92 23       	and	r25, r18
    45aa:	93 83       	std	Z+3, r25	; 0x03
    45ac:	e8 81       	ld	r30, Y
    45ae:	f9 81       	ldd	r31, Y+1	; 0x01
    45b0:	35 97       	sbiw	r30, 0x05	; 5
    45b2:	80 81       	ld	r24, Z
    45b4:	80 62       	ori	r24, 0x20	; 32
    45b6:	80 83       	st	Z, r24
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	01 c0       	rjmp	.+2      	; 0x45be <serial_send_byte+0x44>
    45bc:	82 e0       	ldi	r24, 0x02	; 2
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	08 95       	ret

000045c4 <serial_send_bytes>:
    45c4:	ef 92       	push	r14
    45c6:	ff 92       	push	r15
    45c8:	0f 93       	push	r16
    45ca:	1f 93       	push	r17
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    45d0:	7c 01       	movw	r14, r24
    45d2:	dc 01       	movw	r26, r24
    45d4:	12 96       	adiw	r26, 0x02	; 2
    45d6:	ed 91       	ld	r30, X+
    45d8:	fc 91       	ld	r31, X
    45da:	13 97       	sbiw	r26, 0x03	; 3
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	82 81       	ldd	r24, Z+2	; 0x02
    45e0:	98 1b       	sub	r25, r24
    45e2:	85 81       	ldd	r24, Z+5	; 0x05
    45e4:	98 23       	and	r25, r24
    45e6:	84 81       	ldd	r24, Z+4	; 0x04
    45e8:	89 1b       	sub	r24, r25
    45ea:	86 17       	cp	r24, r22
    45ec:	98 f1       	brcs	.+102    	; 0x4654 <serial_send_bytes+0x90>
    45ee:	66 23       	and	r22, r22
    45f0:	41 f1       	breq	.+80     	; 0x4642 <serial_send_bytes+0x7e>
    45f2:	84 2f       	mov	r24, r20
    45f4:	95 2f       	mov	r25, r21
    45f6:	dc 01       	movw	r26, r24
    45f8:	61 50       	subi	r22, 0x01	; 1
    45fa:	46 2f       	mov	r20, r22
    45fc:	50 e0       	ldi	r21, 0x00	; 0
    45fe:	4f 5f       	subi	r20, 0xFF	; 255
    4600:	5f 4f       	sbci	r21, 0xFF	; 255
    4602:	48 0f       	add	r20, r24
    4604:	59 1f       	adc	r21, r25
    4606:	e7 01       	movw	r28, r14
    4608:	ea 81       	ldd	r30, Y+2	; 0x02
    460a:	fb 81       	ldd	r31, Y+3	; 0x03
    460c:	93 81       	ldd	r25, Z+3	; 0x03
    460e:	82 81       	ldd	r24, Z+2	; 0x02
    4610:	25 81       	ldd	r18, Z+5	; 0x05
    4612:	98 1b       	sub	r25, r24
    4614:	92 23       	and	r25, r18
    4616:	84 81       	ldd	r24, Z+4	; 0x04
    4618:	98 17       	cp	r25, r24
    461a:	79 f0       	breq	.+30     	; 0x463a <serial_send_bytes+0x76>
    461c:	8c 91       	ld	r24, X
    461e:	93 81       	ldd	r25, Z+3	; 0x03
    4620:	26 95       	lsr	r18
    4622:	29 23       	and	r18, r25
    4624:	60 81       	ld	r22, Z
    4626:	71 81       	ldd	r23, Z+1	; 0x01
    4628:	8b 01       	movw	r16, r22
    462a:	02 0f       	add	r16, r18
    462c:	11 1d       	adc	r17, r1
    462e:	e8 01       	movw	r28, r16
    4630:	88 83       	st	Y, r24
    4632:	9f 5f       	subi	r25, 0xFF	; 255
    4634:	85 81       	ldd	r24, Z+5	; 0x05
    4636:	98 23       	and	r25, r24
    4638:	93 83       	std	Z+3, r25	; 0x03
    463a:	11 96       	adiw	r26, 0x01	; 1
    463c:	a4 17       	cp	r26, r20
    463e:	b5 07       	cpc	r27, r21
    4640:	11 f7       	brne	.-60     	; 0x4606 <serial_send_bytes+0x42>
    4642:	d7 01       	movw	r26, r14
    4644:	ed 91       	ld	r30, X+
    4646:	fc 91       	ld	r31, X
    4648:	35 97       	sbiw	r30, 0x05	; 5
    464a:	80 81       	ld	r24, Z
    464c:	80 62       	ori	r24, 0x20	; 32
    464e:	80 83       	st	Z, r24
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	01 c0       	rjmp	.+2      	; 0x4656 <serial_send_bytes+0x92>
    4654:	82 e0       	ldi	r24, 0x02	; 2
    4656:	df 91       	pop	r29
    4658:	cf 91       	pop	r28
    465a:	1f 91       	pop	r17
    465c:	0f 91       	pop	r16
    465e:	ff 90       	pop	r15
    4660:	ef 90       	pop	r14
    4662:	08 95       	ret

00004664 <serial_get_byte>:
    4664:	dc 01       	movw	r26, r24
    4666:	14 96       	adiw	r26, 0x04	; 4
    4668:	ed 91       	ld	r30, X+
    466a:	fc 91       	ld	r31, X
    466c:	15 97       	sbiw	r26, 0x05	; 5
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	82 81       	ldd	r24, Z+2	; 0x02
    4672:	98 17       	cp	r25, r24
    4674:	89 f0       	breq	.+34     	; 0x4698 <serial_get_byte+0x34>
    4676:	92 81       	ldd	r25, Z+2	; 0x02
    4678:	85 81       	ldd	r24, Z+5	; 0x05
    467a:	86 95       	lsr	r24
    467c:	89 23       	and	r24, r25
    467e:	a0 81       	ld	r26, Z
    4680:	b1 81       	ldd	r27, Z+1	; 0x01
    4682:	a8 0f       	add	r26, r24
    4684:	b1 1d       	adc	r27, r1
    4686:	8c 91       	ld	r24, X
    4688:	db 01       	movw	r26, r22
    468a:	8c 93       	st	X, r24
    468c:	9f 5f       	subi	r25, 0xFF	; 255
    468e:	85 81       	ldd	r24, Z+5	; 0x05
    4690:	98 23       	and	r25, r24
    4692:	92 83       	std	Z+2, r25	; 0x02
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	08 95       	ret
    4698:	83 e0       	ldi	r24, 0x03	; 3
    469a:	08 95       	ret

0000469c <__vector_25>:
    469c:	1f 92       	push	r1
    469e:	0f 92       	push	r0
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	0f 92       	push	r0
    46a4:	11 24       	eor	r1, r1
    46a6:	0b b6       	in	r0, 0x3b	; 59
    46a8:	0f 92       	push	r0
    46aa:	2f 93       	push	r18
    46ac:	3f 93       	push	r19
    46ae:	4f 93       	push	r20
    46b0:	5f 93       	push	r21
    46b2:	6f 93       	push	r22
    46b4:	7f 93       	push	r23
    46b6:	8f 93       	push	r24
    46b8:	9f 93       	push	r25
    46ba:	af 93       	push	r26
    46bc:	bf 93       	push	r27
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	ef 93       	push	r30
    46c4:	ff 93       	push	r31
    46c6:	a0 91 ae 19 	lds	r26, 0x19AE	; 0x8019ae <_ser_handle>
    46ca:	b0 91 af 19 	lds	r27, 0x19AF	; 0x8019af <_ser_handle+0x1>
    46ce:	10 97       	sbiw	r26, 0x00	; 0
    46d0:	11 f1       	breq	.+68     	; 0x4716 <__vector_25+0x7a>
    46d2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    46d6:	14 96       	adiw	r26, 0x04	; 4
    46d8:	ed 91       	ld	r30, X+
    46da:	fc 91       	ld	r31, X
    46dc:	15 97       	sbiw	r26, 0x05	; 5
    46de:	93 81       	ldd	r25, Z+3	; 0x03
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	25 81       	ldd	r18, Z+5	; 0x05
    46e4:	98 1b       	sub	r25, r24
    46e6:	92 23       	and	r25, r18
    46e8:	84 81       	ldd	r24, Z+4	; 0x04
    46ea:	98 17       	cp	r25, r24
    46ec:	61 f0       	breq	.+24     	; 0x4706 <__vector_25+0x6a>
    46ee:	83 81       	ldd	r24, Z+3	; 0x03
    46f0:	26 95       	lsr	r18
    46f2:	28 23       	and	r18, r24
    46f4:	c0 81       	ld	r28, Z
    46f6:	d1 81       	ldd	r29, Z+1	; 0x01
    46f8:	c2 0f       	add	r28, r18
    46fa:	d1 1d       	adc	r29, r1
    46fc:	68 83       	st	Y, r22
    46fe:	8f 5f       	subi	r24, 0xFF	; 255
    4700:	95 81       	ldd	r25, Z+5	; 0x05
    4702:	89 23       	and	r24, r25
    4704:	83 83       	std	Z+3, r24	; 0x03
    4706:	16 96       	adiw	r26, 0x06	; 6
    4708:	ed 91       	ld	r30, X+
    470a:	fc 91       	ld	r31, X
    470c:	17 97       	sbiw	r26, 0x07	; 7
    470e:	30 97       	sbiw	r30, 0x00	; 0
    4710:	11 f0       	breq	.+4      	; 0x4716 <__vector_25+0x7a>
    4712:	cd 01       	movw	r24, r26
    4714:	19 95       	eicall
    4716:	ff 91       	pop	r31
    4718:	ef 91       	pop	r30
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	bf 91       	pop	r27
    4720:	af 91       	pop	r26
    4722:	9f 91       	pop	r25
    4724:	8f 91       	pop	r24
    4726:	7f 91       	pop	r23
    4728:	6f 91       	pop	r22
    472a:	5f 91       	pop	r21
    472c:	4f 91       	pop	r20
    472e:	3f 91       	pop	r19
    4730:	2f 91       	pop	r18
    4732:	0f 90       	pop	r0
    4734:	0b be       	out	0x3b, r0	; 59
    4736:	0f 90       	pop	r0
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	0f 90       	pop	r0
    473c:	1f 90       	pop	r1
    473e:	18 95       	reti

00004740 <__vector_26>:
    4740:	1f 92       	push	r1
    4742:	0f 92       	push	r0
    4744:	0f b6       	in	r0, 0x3f	; 63
    4746:	0f 92       	push	r0
    4748:	11 24       	eor	r1, r1
    474a:	0b b6       	in	r0, 0x3b	; 59
    474c:	0f 92       	push	r0
    474e:	2f 93       	push	r18
    4750:	8f 93       	push	r24
    4752:	9f 93       	push	r25
    4754:	af 93       	push	r26
    4756:	bf 93       	push	r27
    4758:	ef 93       	push	r30
    475a:	ff 93       	push	r31
    475c:	e0 91 ae 19 	lds	r30, 0x19AE	; 0x8019ae <_ser_handle>
    4760:	f0 91 af 19 	lds	r31, 0x19AF	; 0x8019af <_ser_handle+0x1>
    4764:	30 97       	sbiw	r30, 0x00	; 0
    4766:	b9 f0       	breq	.+46     	; 0x4796 <__vector_26+0x56>
    4768:	02 80       	ldd	r0, Z+2	; 0x02
    476a:	f3 81       	ldd	r31, Z+3	; 0x03
    476c:	e0 2d       	mov	r30, r0
    476e:	93 81       	ldd	r25, Z+3	; 0x03
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	98 17       	cp	r25, r24
    4774:	b1 f0       	breq	.+44     	; 0x47a2 <__vector_26+0x62>
    4776:	92 81       	ldd	r25, Z+2	; 0x02
    4778:	85 81       	ldd	r24, Z+5	; 0x05
    477a:	28 2f       	mov	r18, r24
    477c:	26 95       	lsr	r18
    477e:	29 23       	and	r18, r25
    4780:	a0 81       	ld	r26, Z
    4782:	b1 81       	ldd	r27, Z+1	; 0x01
    4784:	a2 0f       	add	r26, r18
    4786:	b1 1d       	adc	r27, r1
    4788:	2c 91       	ld	r18, X
    478a:	9f 5f       	subi	r25, 0xFF	; 255
    478c:	89 23       	and	r24, r25
    478e:	82 83       	std	Z+2, r24	; 0x02
    4790:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4794:	0b c0       	rjmp	.+22     	; 0x47ac <__vector_26+0x6c>
    4796:	e1 ec       	ldi	r30, 0xC1	; 193
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	80 81       	ld	r24, Z
    479c:	8f 7d       	andi	r24, 0xDF	; 223
    479e:	80 83       	st	Z, r24
    47a0:	05 c0       	rjmp	.+10     	; 0x47ac <__vector_26+0x6c>
    47a2:	e1 ec       	ldi	r30, 0xC1	; 193
    47a4:	f0 e0       	ldi	r31, 0x00	; 0
    47a6:	80 81       	ld	r24, Z
    47a8:	8f 7d       	andi	r24, 0xDF	; 223
    47aa:	80 83       	st	Z, r24
    47ac:	ff 91       	pop	r31
    47ae:	ef 91       	pop	r30
    47b0:	bf 91       	pop	r27
    47b2:	af 91       	pop	r26
    47b4:	9f 91       	pop	r25
    47b6:	8f 91       	pop	r24
    47b8:	2f 91       	pop	r18
    47ba:	0f 90       	pop	r0
    47bc:	0b be       	out	0x3b, r0	; 59
    47be:	0f 90       	pop	r0
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <__vector_36>:
    47c8:	1f 92       	push	r1
    47ca:	0f 92       	push	r0
    47cc:	0f b6       	in	r0, 0x3f	; 63
    47ce:	0f 92       	push	r0
    47d0:	11 24       	eor	r1, r1
    47d2:	0b b6       	in	r0, 0x3b	; 59
    47d4:	0f 92       	push	r0
    47d6:	2f 93       	push	r18
    47d8:	3f 93       	push	r19
    47da:	4f 93       	push	r20
    47dc:	5f 93       	push	r21
    47de:	6f 93       	push	r22
    47e0:	7f 93       	push	r23
    47e2:	8f 93       	push	r24
    47e4:	9f 93       	push	r25
    47e6:	af 93       	push	r26
    47e8:	bf 93       	push	r27
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	ef 93       	push	r30
    47f0:	ff 93       	push	r31
    47f2:	a0 91 b0 19 	lds	r26, 0x19B0	; 0x8019b0 <_ser_handle+0x2>
    47f6:	b0 91 b1 19 	lds	r27, 0x19B1	; 0x8019b1 <_ser_handle+0x3>
    47fa:	10 97       	sbiw	r26, 0x00	; 0
    47fc:	11 f1       	breq	.+68     	; 0x4842 <__vector_36+0x7a>
    47fe:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4802:	14 96       	adiw	r26, 0x04	; 4
    4804:	ed 91       	ld	r30, X+
    4806:	fc 91       	ld	r31, X
    4808:	15 97       	sbiw	r26, 0x05	; 5
    480a:	93 81       	ldd	r25, Z+3	; 0x03
    480c:	82 81       	ldd	r24, Z+2	; 0x02
    480e:	25 81       	ldd	r18, Z+5	; 0x05
    4810:	98 1b       	sub	r25, r24
    4812:	92 23       	and	r25, r18
    4814:	84 81       	ldd	r24, Z+4	; 0x04
    4816:	98 17       	cp	r25, r24
    4818:	61 f0       	breq	.+24     	; 0x4832 <__vector_36+0x6a>
    481a:	83 81       	ldd	r24, Z+3	; 0x03
    481c:	26 95       	lsr	r18
    481e:	28 23       	and	r18, r24
    4820:	c0 81       	ld	r28, Z
    4822:	d1 81       	ldd	r29, Z+1	; 0x01
    4824:	c2 0f       	add	r28, r18
    4826:	d1 1d       	adc	r29, r1
    4828:	68 83       	st	Y, r22
    482a:	8f 5f       	subi	r24, 0xFF	; 255
    482c:	95 81       	ldd	r25, Z+5	; 0x05
    482e:	89 23       	and	r24, r25
    4830:	83 83       	std	Z+3, r24	; 0x03
    4832:	16 96       	adiw	r26, 0x06	; 6
    4834:	ed 91       	ld	r30, X+
    4836:	fc 91       	ld	r31, X
    4838:	17 97       	sbiw	r26, 0x07	; 7
    483a:	30 97       	sbiw	r30, 0x00	; 0
    483c:	11 f0       	breq	.+4      	; 0x4842 <__vector_36+0x7a>
    483e:	cd 01       	movw	r24, r26
    4840:	19 95       	eicall
    4842:	ff 91       	pop	r31
    4844:	ef 91       	pop	r30
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	bf 91       	pop	r27
    484c:	af 91       	pop	r26
    484e:	9f 91       	pop	r25
    4850:	8f 91       	pop	r24
    4852:	7f 91       	pop	r23
    4854:	6f 91       	pop	r22
    4856:	5f 91       	pop	r21
    4858:	4f 91       	pop	r20
    485a:	3f 91       	pop	r19
    485c:	2f 91       	pop	r18
    485e:	0f 90       	pop	r0
    4860:	0b be       	out	0x3b, r0	; 59
    4862:	0f 90       	pop	r0
    4864:	0f be       	out	0x3f, r0	; 63
    4866:	0f 90       	pop	r0
    4868:	1f 90       	pop	r1
    486a:	18 95       	reti

0000486c <__vector_37>:
    486c:	1f 92       	push	r1
    486e:	0f 92       	push	r0
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	0f 92       	push	r0
    4874:	11 24       	eor	r1, r1
    4876:	0b b6       	in	r0, 0x3b	; 59
    4878:	0f 92       	push	r0
    487a:	2f 93       	push	r18
    487c:	8f 93       	push	r24
    487e:	9f 93       	push	r25
    4880:	af 93       	push	r26
    4882:	bf 93       	push	r27
    4884:	ef 93       	push	r30
    4886:	ff 93       	push	r31
    4888:	e0 91 b0 19 	lds	r30, 0x19B0	; 0x8019b0 <_ser_handle+0x2>
    488c:	f0 91 b1 19 	lds	r31, 0x19B1	; 0x8019b1 <_ser_handle+0x3>
    4890:	30 97       	sbiw	r30, 0x00	; 0
    4892:	b9 f0       	breq	.+46     	; 0x48c2 <__vector_37+0x56>
    4894:	02 80       	ldd	r0, Z+2	; 0x02
    4896:	f3 81       	ldd	r31, Z+3	; 0x03
    4898:	e0 2d       	mov	r30, r0
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	82 81       	ldd	r24, Z+2	; 0x02
    489e:	98 17       	cp	r25, r24
    48a0:	b1 f0       	breq	.+44     	; 0x48ce <__vector_37+0x62>
    48a2:	92 81       	ldd	r25, Z+2	; 0x02
    48a4:	85 81       	ldd	r24, Z+5	; 0x05
    48a6:	28 2f       	mov	r18, r24
    48a8:	26 95       	lsr	r18
    48aa:	29 23       	and	r18, r25
    48ac:	a0 81       	ld	r26, Z
    48ae:	b1 81       	ldd	r27, Z+1	; 0x01
    48b0:	a2 0f       	add	r26, r18
    48b2:	b1 1d       	adc	r27, r1
    48b4:	2c 91       	ld	r18, X
    48b6:	9f 5f       	subi	r25, 0xFF	; 255
    48b8:	89 23       	and	r24, r25
    48ba:	82 83       	std	Z+2, r24	; 0x02
    48bc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    48c0:	0b c0       	rjmp	.+22     	; 0x48d8 <__vector_37+0x6c>
    48c2:	e9 ec       	ldi	r30, 0xC9	; 201
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	80 81       	ld	r24, Z
    48c8:	8f 7d       	andi	r24, 0xDF	; 223
    48ca:	80 83       	st	Z, r24
    48cc:	05 c0       	rjmp	.+10     	; 0x48d8 <__vector_37+0x6c>
    48ce:	e9 ec       	ldi	r30, 0xC9	; 201
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	8f 7d       	andi	r24, 0xDF	; 223
    48d6:	80 83       	st	Z, r24
    48d8:	ff 91       	pop	r31
    48da:	ef 91       	pop	r30
    48dc:	bf 91       	pop	r27
    48de:	af 91       	pop	r26
    48e0:	9f 91       	pop	r25
    48e2:	8f 91       	pop	r24
    48e4:	2f 91       	pop	r18
    48e6:	0f 90       	pop	r0
    48e8:	0b be       	out	0x3b, r0	; 59
    48ea:	0f 90       	pop	r0
    48ec:	0f be       	out	0x3f, r0	; 63
    48ee:	0f 90       	pop	r0
    48f0:	1f 90       	pop	r1
    48f2:	18 95       	reti

000048f4 <__vector_51>:
    48f4:	1f 92       	push	r1
    48f6:	0f 92       	push	r0
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	0f 92       	push	r0
    48fc:	11 24       	eor	r1, r1
    48fe:	0b b6       	in	r0, 0x3b	; 59
    4900:	0f 92       	push	r0
    4902:	2f 93       	push	r18
    4904:	3f 93       	push	r19
    4906:	4f 93       	push	r20
    4908:	5f 93       	push	r21
    490a:	6f 93       	push	r22
    490c:	7f 93       	push	r23
    490e:	8f 93       	push	r24
    4910:	9f 93       	push	r25
    4912:	af 93       	push	r26
    4914:	bf 93       	push	r27
    4916:	cf 93       	push	r28
    4918:	df 93       	push	r29
    491a:	ef 93       	push	r30
    491c:	ff 93       	push	r31
    491e:	a0 91 b2 19 	lds	r26, 0x19B2	; 0x8019b2 <_ser_handle+0x4>
    4922:	b0 91 b3 19 	lds	r27, 0x19B3	; 0x8019b3 <_ser_handle+0x5>
    4926:	10 97       	sbiw	r26, 0x00	; 0
    4928:	11 f1       	breq	.+68     	; 0x496e <__vector_51+0x7a>
    492a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    492e:	14 96       	adiw	r26, 0x04	; 4
    4930:	ed 91       	ld	r30, X+
    4932:	fc 91       	ld	r31, X
    4934:	15 97       	sbiw	r26, 0x05	; 5
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	25 81       	ldd	r18, Z+5	; 0x05
    493c:	98 1b       	sub	r25, r24
    493e:	92 23       	and	r25, r18
    4940:	84 81       	ldd	r24, Z+4	; 0x04
    4942:	98 17       	cp	r25, r24
    4944:	61 f0       	breq	.+24     	; 0x495e <__vector_51+0x6a>
    4946:	83 81       	ldd	r24, Z+3	; 0x03
    4948:	26 95       	lsr	r18
    494a:	28 23       	and	r18, r24
    494c:	c0 81       	ld	r28, Z
    494e:	d1 81       	ldd	r29, Z+1	; 0x01
    4950:	c2 0f       	add	r28, r18
    4952:	d1 1d       	adc	r29, r1
    4954:	68 83       	st	Y, r22
    4956:	8f 5f       	subi	r24, 0xFF	; 255
    4958:	95 81       	ldd	r25, Z+5	; 0x05
    495a:	89 23       	and	r24, r25
    495c:	83 83       	std	Z+3, r24	; 0x03
    495e:	16 96       	adiw	r26, 0x06	; 6
    4960:	ed 91       	ld	r30, X+
    4962:	fc 91       	ld	r31, X
    4964:	17 97       	sbiw	r26, 0x07	; 7
    4966:	30 97       	sbiw	r30, 0x00	; 0
    4968:	11 f0       	breq	.+4      	; 0x496e <__vector_51+0x7a>
    496a:	cd 01       	movw	r24, r26
    496c:	19 95       	eicall
    496e:	ff 91       	pop	r31
    4970:	ef 91       	pop	r30
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	bf 91       	pop	r27
    4978:	af 91       	pop	r26
    497a:	9f 91       	pop	r25
    497c:	8f 91       	pop	r24
    497e:	7f 91       	pop	r23
    4980:	6f 91       	pop	r22
    4982:	5f 91       	pop	r21
    4984:	4f 91       	pop	r20
    4986:	3f 91       	pop	r19
    4988:	2f 91       	pop	r18
    498a:	0f 90       	pop	r0
    498c:	0b be       	out	0x3b, r0	; 59
    498e:	0f 90       	pop	r0
    4990:	0f be       	out	0x3f, r0	; 63
    4992:	0f 90       	pop	r0
    4994:	1f 90       	pop	r1
    4996:	18 95       	reti

00004998 <__vector_52>:
    4998:	1f 92       	push	r1
    499a:	0f 92       	push	r0
    499c:	0f b6       	in	r0, 0x3f	; 63
    499e:	0f 92       	push	r0
    49a0:	11 24       	eor	r1, r1
    49a2:	0b b6       	in	r0, 0x3b	; 59
    49a4:	0f 92       	push	r0
    49a6:	2f 93       	push	r18
    49a8:	8f 93       	push	r24
    49aa:	9f 93       	push	r25
    49ac:	af 93       	push	r26
    49ae:	bf 93       	push	r27
    49b0:	ef 93       	push	r30
    49b2:	ff 93       	push	r31
    49b4:	e0 91 b2 19 	lds	r30, 0x19B2	; 0x8019b2 <_ser_handle+0x4>
    49b8:	f0 91 b3 19 	lds	r31, 0x19B3	; 0x8019b3 <_ser_handle+0x5>
    49bc:	30 97       	sbiw	r30, 0x00	; 0
    49be:	b9 f0       	breq	.+46     	; 0x49ee <__vector_52+0x56>
    49c0:	02 80       	ldd	r0, Z+2	; 0x02
    49c2:	f3 81       	ldd	r31, Z+3	; 0x03
    49c4:	e0 2d       	mov	r30, r0
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	82 81       	ldd	r24, Z+2	; 0x02
    49ca:	98 17       	cp	r25, r24
    49cc:	b1 f0       	breq	.+44     	; 0x49fa <__vector_52+0x62>
    49ce:	92 81       	ldd	r25, Z+2	; 0x02
    49d0:	85 81       	ldd	r24, Z+5	; 0x05
    49d2:	28 2f       	mov	r18, r24
    49d4:	26 95       	lsr	r18
    49d6:	29 23       	and	r18, r25
    49d8:	a0 81       	ld	r26, Z
    49da:	b1 81       	ldd	r27, Z+1	; 0x01
    49dc:	a2 0f       	add	r26, r18
    49de:	b1 1d       	adc	r27, r1
    49e0:	2c 91       	ld	r18, X
    49e2:	9f 5f       	subi	r25, 0xFF	; 255
    49e4:	89 23       	and	r24, r25
    49e6:	82 83       	std	Z+2, r24	; 0x02
    49e8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    49ec:	0b c0       	rjmp	.+22     	; 0x4a04 <__vector_52+0x6c>
    49ee:	e1 ed       	ldi	r30, 0xD1	; 209
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	8f 7d       	andi	r24, 0xDF	; 223
    49f6:	80 83       	st	Z, r24
    49f8:	05 c0       	rjmp	.+10     	; 0x4a04 <__vector_52+0x6c>
    49fa:	e1 ed       	ldi	r30, 0xD1	; 209
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	8f 7d       	andi	r24, 0xDF	; 223
    4a02:	80 83       	st	Z, r24
    4a04:	ff 91       	pop	r31
    4a06:	ef 91       	pop	r30
    4a08:	bf 91       	pop	r27
    4a0a:	af 91       	pop	r26
    4a0c:	9f 91       	pop	r25
    4a0e:	8f 91       	pop	r24
    4a10:	2f 91       	pop	r18
    4a12:	0f 90       	pop	r0
    4a14:	0b be       	out	0x3b, r0	; 59
    4a16:	0f 90       	pop	r0
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	0f 90       	pop	r0
    4a1c:	1f 90       	pop	r1
    4a1e:	18 95       	reti

00004a20 <__vector_54>:
    4a20:	1f 92       	push	r1
    4a22:	0f 92       	push	r0
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	0f 92       	push	r0
    4a28:	11 24       	eor	r1, r1
    4a2a:	0b b6       	in	r0, 0x3b	; 59
    4a2c:	0f 92       	push	r0
    4a2e:	2f 93       	push	r18
    4a30:	3f 93       	push	r19
    4a32:	4f 93       	push	r20
    4a34:	5f 93       	push	r21
    4a36:	6f 93       	push	r22
    4a38:	7f 93       	push	r23
    4a3a:	8f 93       	push	r24
    4a3c:	9f 93       	push	r25
    4a3e:	af 93       	push	r26
    4a40:	bf 93       	push	r27
    4a42:	cf 93       	push	r28
    4a44:	df 93       	push	r29
    4a46:	ef 93       	push	r30
    4a48:	ff 93       	push	r31
    4a4a:	a0 91 b4 19 	lds	r26, 0x19B4	; 0x8019b4 <_ser_handle+0x6>
    4a4e:	b0 91 b5 19 	lds	r27, 0x19B5	; 0x8019b5 <_ser_handle+0x7>
    4a52:	10 97       	sbiw	r26, 0x00	; 0
    4a54:	11 f1       	breq	.+68     	; 0x4a9a <__vector_54+0x7a>
    4a56:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4a5a:	14 96       	adiw	r26, 0x04	; 4
    4a5c:	ed 91       	ld	r30, X+
    4a5e:	fc 91       	ld	r31, X
    4a60:	15 97       	sbiw	r26, 0x05	; 5
    4a62:	93 81       	ldd	r25, Z+3	; 0x03
    4a64:	82 81       	ldd	r24, Z+2	; 0x02
    4a66:	25 81       	ldd	r18, Z+5	; 0x05
    4a68:	98 1b       	sub	r25, r24
    4a6a:	92 23       	and	r25, r18
    4a6c:	84 81       	ldd	r24, Z+4	; 0x04
    4a6e:	98 17       	cp	r25, r24
    4a70:	61 f0       	breq	.+24     	; 0x4a8a <__vector_54+0x6a>
    4a72:	83 81       	ldd	r24, Z+3	; 0x03
    4a74:	26 95       	lsr	r18
    4a76:	28 23       	and	r18, r24
    4a78:	c0 81       	ld	r28, Z
    4a7a:	d1 81       	ldd	r29, Z+1	; 0x01
    4a7c:	c2 0f       	add	r28, r18
    4a7e:	d1 1d       	adc	r29, r1
    4a80:	68 83       	st	Y, r22
    4a82:	8f 5f       	subi	r24, 0xFF	; 255
    4a84:	95 81       	ldd	r25, Z+5	; 0x05
    4a86:	89 23       	and	r24, r25
    4a88:	83 83       	std	Z+3, r24	; 0x03
    4a8a:	16 96       	adiw	r26, 0x06	; 6
    4a8c:	ed 91       	ld	r30, X+
    4a8e:	fc 91       	ld	r31, X
    4a90:	17 97       	sbiw	r26, 0x07	; 7
    4a92:	30 97       	sbiw	r30, 0x00	; 0
    4a94:	11 f0       	breq	.+4      	; 0x4a9a <__vector_54+0x7a>
    4a96:	cd 01       	movw	r24, r26
    4a98:	19 95       	eicall
    4a9a:	ff 91       	pop	r31
    4a9c:	ef 91       	pop	r30
    4a9e:	df 91       	pop	r29
    4aa0:	cf 91       	pop	r28
    4aa2:	bf 91       	pop	r27
    4aa4:	af 91       	pop	r26
    4aa6:	9f 91       	pop	r25
    4aa8:	8f 91       	pop	r24
    4aaa:	7f 91       	pop	r23
    4aac:	6f 91       	pop	r22
    4aae:	5f 91       	pop	r21
    4ab0:	4f 91       	pop	r20
    4ab2:	3f 91       	pop	r19
    4ab4:	2f 91       	pop	r18
    4ab6:	0f 90       	pop	r0
    4ab8:	0b be       	out	0x3b, r0	; 59
    4aba:	0f 90       	pop	r0
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	0f 90       	pop	r0
    4ac0:	1f 90       	pop	r1
    4ac2:	18 95       	reti

00004ac4 <__vector_55>:
    4ac4:	1f 92       	push	r1
    4ac6:	0f 92       	push	r0
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	0f 92       	push	r0
    4acc:	11 24       	eor	r1, r1
    4ace:	0b b6       	in	r0, 0x3b	; 59
    4ad0:	0f 92       	push	r0
    4ad2:	2f 93       	push	r18
    4ad4:	8f 93       	push	r24
    4ad6:	9f 93       	push	r25
    4ad8:	af 93       	push	r26
    4ada:	bf 93       	push	r27
    4adc:	ef 93       	push	r30
    4ade:	ff 93       	push	r31
    4ae0:	e0 91 b4 19 	lds	r30, 0x19B4	; 0x8019b4 <_ser_handle+0x6>
    4ae4:	f0 91 b5 19 	lds	r31, 0x19B5	; 0x8019b5 <_ser_handle+0x7>
    4ae8:	30 97       	sbiw	r30, 0x00	; 0
    4aea:	b9 f0       	breq	.+46     	; 0x4b1a <__vector_55+0x56>
    4aec:	02 80       	ldd	r0, Z+2	; 0x02
    4aee:	f3 81       	ldd	r31, Z+3	; 0x03
    4af0:	e0 2d       	mov	r30, r0
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	82 81       	ldd	r24, Z+2	; 0x02
    4af6:	98 17       	cp	r25, r24
    4af8:	b1 f0       	breq	.+44     	; 0x4b26 <__vector_55+0x62>
    4afa:	92 81       	ldd	r25, Z+2	; 0x02
    4afc:	85 81       	ldd	r24, Z+5	; 0x05
    4afe:	28 2f       	mov	r18, r24
    4b00:	26 95       	lsr	r18
    4b02:	29 23       	and	r18, r25
    4b04:	a0 81       	ld	r26, Z
    4b06:	b1 81       	ldd	r27, Z+1	; 0x01
    4b08:	a2 0f       	add	r26, r18
    4b0a:	b1 1d       	adc	r27, r1
    4b0c:	2c 91       	ld	r18, X
    4b0e:	9f 5f       	subi	r25, 0xFF	; 255
    4b10:	89 23       	and	r24, r25
    4b12:	82 83       	std	Z+2, r24	; 0x02
    4b14:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4b18:	0b c0       	rjmp	.+22     	; 0x4b30 <__vector_55+0x6c>
    4b1a:	e1 e3       	ldi	r30, 0x31	; 49
    4b1c:	f1 e0       	ldi	r31, 0x01	; 1
    4b1e:	80 81       	ld	r24, Z
    4b20:	8f 7d       	andi	r24, 0xDF	; 223
    4b22:	80 83       	st	Z, r24
    4b24:	05 c0       	rjmp	.+10     	; 0x4b30 <__vector_55+0x6c>
    4b26:	e1 e3       	ldi	r30, 0x31	; 49
    4b28:	f1 e0       	ldi	r31, 0x01	; 1
    4b2a:	80 81       	ld	r24, Z
    4b2c:	8f 7d       	andi	r24, 0xDF	; 223
    4b2e:	80 83       	st	Z, r24
    4b30:	ff 91       	pop	r31
    4b32:	ef 91       	pop	r30
    4b34:	bf 91       	pop	r27
    4b36:	af 91       	pop	r26
    4b38:	9f 91       	pop	r25
    4b3a:	8f 91       	pop	r24
    4b3c:	2f 91       	pop	r18
    4b3e:	0f 90       	pop	r0
    4b40:	0b be       	out	0x3b, r0	; 59
    4b42:	0f 90       	pop	r0
    4b44:	0f be       	out	0x3f, r0	; 63
    4b46:	0f 90       	pop	r0
    4b48:	1f 90       	pop	r1
    4b4a:	18 95       	reti

00004b4c <usart_getchar>:
    4b4c:	cf 93       	push	r28
    4b4e:	df 93       	push	r29
    4b50:	1f 92       	push	r1
    4b52:	cd b7       	in	r28, 0x3d	; 61
    4b54:	de b7       	in	r29, 0x3e	; 62
    4b56:	be 01       	movw	r22, r28
    4b58:	6f 5f       	subi	r22, 0xFF	; 255
    4b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b5c:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <_com_serial_instance>
    4b60:	90 91 b7 19 	lds	r25, 0x19B7	; 0x8019b7 <_com_serial_instance+0x1>
    4b64:	7f dd       	rcall	.-1282   	; 0x4664 <serial_get_byte>
    4b66:	81 11       	cpse	r24, r1
    4b68:	f6 cf       	rjmp	.-20     	; 0x4b56 <usart_getchar+0xa>
    4b6a:	89 81       	ldd	r24, Y+1	; 0x01
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	0f 90       	pop	r0
    4b70:	df 91       	pop	r29
    4b72:	cf 91       	pop	r28
    4b74:	08 95       	ret

00004b76 <usart_putchar>:
    4b76:	68 2f       	mov	r22, r24
    4b78:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <_com_serial_instance>
    4b7c:	90 91 b7 19 	lds	r25, 0x19B7	; 0x8019b7 <_com_serial_instance+0x1>
    4b80:	fc dc       	rcall	.-1544   	; 0x457a <serial_send_byte>
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	08 95       	ret

00004b88 <stdioCreate>:
    4b88:	8f 92       	push	r8
    4b8a:	9f 92       	push	r9
    4b8c:	af 92       	push	r10
    4b8e:	cf 92       	push	r12
    4b90:	ef 92       	push	r14
    4b92:	0f 93       	push	r16
    4b94:	81 2c       	mov	r8, r1
    4b96:	91 2c       	mov	r9, r1
    4b98:	68 94       	set
    4b9a:	aa 24       	eor	r10, r10
    4b9c:	a7 f8       	bld	r10, 7
    4b9e:	68 94       	set
    4ba0:	cc 24       	eor	r12, r12
    4ba2:	c7 f8       	bld	r12, 7
    4ba4:	e1 2c       	mov	r14, r1
    4ba6:	00 e0       	ldi	r16, 0x00	; 0
    4ba8:	23 e0       	ldi	r18, 0x03	; 3
    4baa:	40 e0       	ldi	r20, 0x00	; 0
    4bac:	51 ee       	ldi	r21, 0xE1	; 225
    4bae:	60 e0       	ldi	r22, 0x00	; 0
    4bb0:	70 e0       	ldi	r23, 0x00	; 0
    4bb2:	4d dc       	rcall	.-1894   	; 0x444e <serial_new_instance>
    4bb4:	90 93 b7 19 	sts	0x19B7, r25	; 0x8019b7 <_com_serial_instance+0x1>
    4bb8:	80 93 b6 19 	sts	0x19B6, r24	; 0x8019b6 <_com_serial_instance>
    4bbc:	ef ef       	ldi	r30, 0xFF	; 255
    4bbe:	f9 e1       	ldi	r31, 0x19	; 25
    4bc0:	84 e1       	ldi	r24, 0x14	; 20
    4bc2:	92 e0       	ldi	r25, 0x02	; 2
    4bc4:	91 83       	std	Z+1, r25	; 0x01
    4bc6:	80 83       	st	Z, r24
    4bc8:	93 83       	std	Z+3, r25	; 0x03
    4bca:	82 83       	std	Z+2, r24	; 0x02
    4bcc:	0f 91       	pop	r16
    4bce:	ef 90       	pop	r14
    4bd0:	cf 90       	pop	r12
    4bd2:	af 90       	pop	r10
    4bd4:	9f 90       	pop	r9
    4bd6:	8f 90       	pop	r8
    4bd8:	08 95       	ret

00004bda <_initTwiInterface>:
    4bda:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <_twiIsInitiated>
    4bde:	81 11       	cpse	r24, r1
    4be0:	0c c0       	rjmp	.+24     	; 0x4bfa <_initTwiInterface+0x20>
    4be2:	8c e0       	ldi	r24, 0x0C	; 12
    4be4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4bee:	84 e0       	ldi	r24, 0x04	; 4
    4bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	80 93 c6 19 	sts	0x19C6, r24	; 0x8019c6 <_twiIsInitiated>
    4bfa:	08 95       	ret

00004bfc <twiCreate>:
    4bfc:	af 92       	push	r10
    4bfe:	bf 92       	push	r11
    4c00:	cf 92       	push	r12
    4c02:	df 92       	push	r13
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	a8 2e       	mov	r10, r24
    4c12:	b6 2e       	mov	r11, r22
    4c14:	69 01       	movw	r12, r18
    4c16:	7a 01       	movw	r14, r20
    4c18:	84 e0       	ldi	r24, 0x04	; 4
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	3d d3       	rcall	.+1658   	; 0x5298 <malloc>
    4c1e:	ec 01       	movw	r28, r24
    4c20:	89 2b       	or	r24, r25
    4c22:	61 f1       	breq	.+88     	; 0x4c7c <twiCreate+0x80>
    4c24:	a8 82       	st	Y, r10
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	b8 12       	cpse	r11, r24
    4c2a:	12 c0       	rjmp	.+36     	; 0x4c50 <twiCreate+0x54>
    4c2c:	c7 01       	movw	r24, r14
    4c2e:	b6 01       	movw	r22, r12
    4c30:	20 ea       	ldi	r18, 0xA0	; 160
    4c32:	36 e8       	ldi	r19, 0x86	; 134
    4c34:	41 e0       	ldi	r20, 0x01	; 1
    4c36:	50 e0       	ldi	r21, 0x00	; 0
    4c38:	eb d2       	rcall	.+1494   	; 0x5210 <__udivmodsi4>
    4c3a:	da 01       	movw	r26, r20
    4c3c:	c9 01       	movw	r24, r18
    4c3e:	40 97       	sbiw	r24, 0x10	; 16
    4c40:	a1 09       	sbc	r26, r1
    4c42:	b1 09       	sbc	r27, r1
    4c44:	b6 95       	lsr	r27
    4c46:	a7 95       	ror	r26
    4c48:	97 95       	ror	r25
    4c4a:	87 95       	ror	r24
    4c4c:	89 83       	std	Y+1, r24	; 0x01
    4c4e:	11 c0       	rjmp	.+34     	; 0x4c72 <twiCreate+0x76>
    4c50:	c7 01       	movw	r24, r14
    4c52:	b6 01       	movw	r22, r12
    4c54:	20 e8       	ldi	r18, 0x80	; 128
    4c56:	3a e1       	ldi	r19, 0x1A	; 26
    4c58:	46 e0       	ldi	r20, 0x06	; 6
    4c5a:	50 e0       	ldi	r21, 0x00	; 0
    4c5c:	d9 d2       	rcall	.+1458   	; 0x5210 <__udivmodsi4>
    4c5e:	da 01       	movw	r26, r20
    4c60:	c9 01       	movw	r24, r18
    4c62:	40 97       	sbiw	r24, 0x10	; 16
    4c64:	a1 09       	sbc	r26, r1
    4c66:	b1 09       	sbc	r27, r1
    4c68:	b6 95       	lsr	r27
    4c6a:	a7 95       	ror	r26
    4c6c:	97 95       	ror	r25
    4c6e:	87 95       	ror	r24
    4c70:	89 83       	std	Y+1, r24	; 0x01
    4c72:	1b 83       	std	Y+3, r17	; 0x03
    4c74:	0a 83       	std	Y+2, r16	; 0x02
    4c76:	8c 2f       	mov	r24, r28
    4c78:	9d 2f       	mov	r25, r29
    4c7a:	02 c0       	rjmp	.+4      	; 0x4c80 <twiCreate+0x84>
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	df 91       	pop	r29
    4c82:	cf 91       	pop	r28
    4c84:	1f 91       	pop	r17
    4c86:	0f 91       	pop	r16
    4c88:	ff 90       	pop	r15
    4c8a:	ef 90       	pop	r14
    4c8c:	df 90       	pop	r13
    4c8e:	cf 90       	pop	r12
    4c90:	bf 90       	pop	r11
    4c92:	af 90       	pop	r10
    4c94:	08 95       	ret

00004c96 <twiIsBusy>:
    4c96:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c9a:	81 70       	andi	r24, 0x01	; 1
    4c9c:	08 95       	ret

00004c9e <twiReceive>:
    4c9e:	1f 93       	push	r17
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	29 f1       	breq	.+74     	; 0x4cf2 <twiReceive+0x54>
    4ca8:	6b 30       	cpi	r22, 0x0B	; 11
    4caa:	28 f5       	brcc	.+74     	; 0x4cf6 <twiReceive+0x58>
    4cac:	16 2f       	mov	r17, r22
    4cae:	ec 01       	movw	r28, r24
    4cb0:	f2 df       	rcall	.-28     	; 0x4c96 <twiIsBusy>
    4cb2:	81 11       	cpse	r24, r1
    4cb4:	22 c0       	rjmp	.+68     	; 0x4cfa <twiReceive+0x5c>
    4cb6:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <_twiCurrentHandler>
    4cba:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <_twiCurrentHandler+0x1>
    4cbe:	c8 17       	cp	r28, r24
    4cc0:	d9 07       	cpc	r29, r25
    4cc2:	41 f0       	breq	.+16     	; 0x4cd4 <twiReceive+0x36>
    4cc4:	8a df       	rcall	.-236    	; 0x4bda <_initTwiInterface>
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
    4cc8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4ccc:	d0 93 ba 19 	sts	0x19BA, r29	; 0x8019ba <_twiCurrentHandler+0x1>
    4cd0:	c0 93 b9 19 	sts	0x19B9, r28	; 0x8019b9 <_twiCurrentHandler>
    4cd4:	10 93 bb 19 	sts	0x19BB, r17	; 0x8019bb <_twiMessageLen>
    4cd8:	88 81       	ld	r24, Y
    4cda:	88 0f       	add	r24, r24
    4cdc:	81 60       	ori	r24, 0x01	; 1
    4cde:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <_twiMessageBuffer>
    4ce2:	88 ef       	ldi	r24, 0xF8	; 248
    4ce4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4ce8:	85 ea       	ldi	r24, 0xA5	; 165
    4cea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4cee:	85 e0       	ldi	r24, 0x05	; 5
    4cf0:	05 c0       	rjmp	.+10     	; 0x4cfc <twiReceive+0x5e>
    4cf2:	86 e0       	ldi	r24, 0x06	; 6
    4cf4:	03 c0       	rjmp	.+6      	; 0x4cfc <twiReceive+0x5e>
    4cf6:	87 e0       	ldi	r24, 0x07	; 7
    4cf8:	01 c0       	rjmp	.+2      	; 0x4cfc <twiReceive+0x5e>
    4cfa:	82 e0       	ldi	r24, 0x02	; 2
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	1f 91       	pop	r17
    4d02:	08 95       	ret

00004d04 <__vector_39>:
    4d04:	1f 92       	push	r1
    4d06:	0f 92       	push	r0
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	0f 92       	push	r0
    4d0c:	11 24       	eor	r1, r1
    4d0e:	0b b6       	in	r0, 0x3b	; 59
    4d10:	0f 92       	push	r0
    4d12:	2f 93       	push	r18
    4d14:	3f 93       	push	r19
    4d16:	4f 93       	push	r20
    4d18:	5f 93       	push	r21
    4d1a:	6f 93       	push	r22
    4d1c:	7f 93       	push	r23
    4d1e:	8f 93       	push	r24
    4d20:	9f 93       	push	r25
    4d22:	af 93       	push	r26
    4d24:	bf 93       	push	r27
    4d26:	ef 93       	push	r30
    4d28:	ff 93       	push	r31
    4d2a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4d2e:	8e 2f       	mov	r24, r30
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	fc 01       	movw	r30, r24
    4d34:	38 97       	sbiw	r30, 0x08	; 8
    4d36:	e1 35       	cpi	r30, 0x51	; 81
    4d38:	f1 05       	cpc	r31, r1
    4d3a:	08 f0       	brcs	.+2      	; 0x4d3e <__vector_39+0x3a>
    4d3c:	75 c0       	rjmp	.+234    	; 0x4e28 <__vector_39+0x124>
    4d3e:	88 27       	eor	r24, r24
    4d40:	e4 58       	subi	r30, 0x84	; 132
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	8f 4f       	sbci	r24, 0xFF	; 255
    4d46:	86 c2       	rjmp	.+1292   	; 0x5254 <__tablejump2__>
    4d48:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <_index.1885>
    4d4c:	e0 91 b8 19 	lds	r30, 0x19B8	; 0x8019b8 <_index.1885>
    4d50:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <_twiMessageLen>
    4d54:	e8 17       	cp	r30, r24
    4d56:	70 f4       	brcc	.+28     	; 0x4d74 <__vector_39+0x70>
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	8e 0f       	add	r24, r30
    4d5c:	80 93 b8 19 	sts	0x19B8, r24	; 0x8019b8 <_index.1885>
    4d60:	f0 e0       	ldi	r31, 0x00	; 0
    4d62:	e4 54       	subi	r30, 0x44	; 68
    4d64:	f6 4e       	sbci	r31, 0xE6	; 230
    4d66:	80 81       	ld	r24, Z
    4d68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d6c:	85 e8       	ldi	r24, 0x85	; 133
    4d6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d72:	72 c0       	rjmp	.+228    	; 0x4e58 <__vector_39+0x154>
    4d74:	84 e9       	ldi	r24, 0x94	; 148
    4d76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d7a:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <_twiCurrentHandler>
    4d7e:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <_twiCurrentHandler+0x1>
    4d82:	dc 01       	movw	r26, r24
    4d84:	12 96       	adiw	r26, 0x02	; 2
    4d86:	ed 91       	ld	r30, X+
    4d88:	fc 91       	ld	r31, X
    4d8a:	13 97       	sbiw	r26, 0x03	; 3
    4d8c:	30 97       	sbiw	r30, 0x00	; 0
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <__vector_39+0x8e>
    4d90:	63 c0       	rjmp	.+198    	; 0x4e58 <__vector_39+0x154>
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	40 e0       	ldi	r20, 0x00	; 0
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	64 e0       	ldi	r22, 0x04	; 4
    4d9a:	19 95       	eicall
    4d9c:	5d c0       	rjmp	.+186    	; 0x4e58 <__vector_39+0x154>
    4d9e:	e0 91 b8 19 	lds	r30, 0x19B8	; 0x8019b8 <_index.1885>
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	8e 0f       	add	r24, r30
    4da6:	80 93 b8 19 	sts	0x19B8, r24	; 0x8019b8 <_index.1885>
    4daa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	e4 54       	subi	r30, 0x44	; 68
    4db2:	f6 4e       	sbci	r31, 0xE6	; 230
    4db4:	80 83       	st	Z, r24
    4db6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4dba:	80 34       	cpi	r24, 0x40	; 64
    4dbc:	11 f4       	brne	.+4      	; 0x4dc2 <__vector_39+0xbe>
    4dbe:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <_index.1885>
    4dc2:	20 91 b8 19 	lds	r18, 0x19B8	; 0x8019b8 <_index.1885>
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <_twiMessageLen>
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	28 17       	cp	r18, r24
    4dd2:	39 07       	cpc	r19, r25
    4dd4:	24 f4       	brge	.+8      	; 0x4dde <__vector_39+0xda>
    4dd6:	85 ec       	ldi	r24, 0xC5	; 197
    4dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ddc:	3d c0       	rjmp	.+122    	; 0x4e58 <__vector_39+0x154>
    4dde:	85 e8       	ldi	r24, 0x85	; 133
    4de0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4de4:	39 c0       	rjmp	.+114    	; 0x4e58 <__vector_39+0x154>
    4de6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4dea:	e0 91 b8 19 	lds	r30, 0x19B8	; 0x8019b8 <_index.1885>
    4dee:	f0 e0       	ldi	r31, 0x00	; 0
    4df0:	e4 54       	subi	r30, 0x44	; 68
    4df2:	f6 4e       	sbci	r31, 0xE6	; 230
    4df4:	80 83       	st	Z, r24
    4df6:	84 e9       	ldi	r24, 0x94	; 148
    4df8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4dfc:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <_twiCurrentHandler>
    4e00:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <_twiCurrentHandler+0x1>
    4e04:	dc 01       	movw	r26, r24
    4e06:	12 96       	adiw	r26, 0x02	; 2
    4e08:	ed 91       	ld	r30, X+
    4e0a:	fc 91       	ld	r31, X
    4e0c:	13 97       	sbiw	r26, 0x03	; 3
    4e0e:	30 97       	sbiw	r30, 0x00	; 0
    4e10:	19 f1       	breq	.+70     	; 0x4e58 <__vector_39+0x154>
    4e12:	20 91 bb 19 	lds	r18, 0x19BB	; 0x8019bb <_twiMessageLen>
    4e16:	4c eb       	ldi	r20, 0xBC	; 188
    4e18:	59 e1       	ldi	r21, 0x19	; 25
    4e1a:	65 e0       	ldi	r22, 0x05	; 5
    4e1c:	19 95       	eicall
    4e1e:	1c c0       	rjmp	.+56     	; 0x4e58 <__vector_39+0x154>
    4e20:	85 ea       	ldi	r24, 0xA5	; 165
    4e22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e26:	18 c0       	rjmp	.+48     	; 0x4e58 <__vector_39+0x154>
    4e28:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e2c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4e30:	84 e0       	ldi	r24, 0x04	; 4
    4e32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e36:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <_twiCurrentHandler>
    4e3a:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <_twiCurrentHandler+0x1>
    4e3e:	dc 01       	movw	r26, r24
    4e40:	12 96       	adiw	r26, 0x02	; 2
    4e42:	ed 91       	ld	r30, X+
    4e44:	fc 91       	ld	r31, X
    4e46:	13 97       	sbiw	r26, 0x03	; 3
    4e48:	30 97       	sbiw	r30, 0x00	; 0
    4e4a:	31 f0       	breq	.+12     	; 0x4e58 <__vector_39+0x154>
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	50 e0       	ldi	r21, 0x00	; 0
    4e52:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    4e56:	19 95       	eicall
    4e58:	ff 91       	pop	r31
    4e5a:	ef 91       	pop	r30
    4e5c:	bf 91       	pop	r27
    4e5e:	af 91       	pop	r26
    4e60:	9f 91       	pop	r25
    4e62:	8f 91       	pop	r24
    4e64:	7f 91       	pop	r23
    4e66:	6f 91       	pop	r22
    4e68:	5f 91       	pop	r21
    4e6a:	4f 91       	pop	r20
    4e6c:	3f 91       	pop	r19
    4e6e:	2f 91       	pop	r18
    4e70:	0f 90       	pop	r0
    4e72:	0b be       	out	0x3b, r0	; 59
    4e74:	0f 90       	pop	r0
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	0f 90       	pop	r0
    4e7a:	1f 90       	pop	r1
    4e7c:	18 95       	reti

00004e7e <fifo_init>:
    4e7e:	fc 01       	movw	r30, r24
    4e80:	41 11       	cpse	r20, r1
    4e82:	01 c0       	rjmp	.+2      	; 0x4e86 <fifo_init+0x8>
    4e84:	2a d3       	rcall	.+1620   	; 0x54da <abort>
    4e86:	84 2f       	mov	r24, r20
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	9c 01       	movw	r18, r24
    4e8c:	21 50       	subi	r18, 0x01	; 1
    4e8e:	31 09       	sbc	r19, r1
    4e90:	82 23       	and	r24, r18
    4e92:	93 23       	and	r25, r19
    4e94:	89 2b       	or	r24, r25
    4e96:	09 f0       	breq	.+2      	; 0x4e9a <fifo_init+0x1c>
    4e98:	20 d3       	rcall	.+1600   	; 0x54da <abort>
    4e9a:	41 38       	cpi	r20, 0x81	; 129
    4e9c:	08 f0       	brcs	.+2      	; 0x4ea0 <fifo_init+0x22>
    4e9e:	1d d3       	rcall	.+1594   	; 0x54da <abort>
    4ea0:	12 82       	std	Z+2, r1	; 0x02
    4ea2:	13 82       	std	Z+3, r1	; 0x03
    4ea4:	44 83       	std	Z+4, r20	; 0x04
    4ea6:	44 0f       	add	r20, r20
    4ea8:	41 50       	subi	r20, 0x01	; 1
    4eaa:	45 83       	std	Z+5, r20	; 0x05
    4eac:	71 83       	std	Z+1, r23	; 0x01
    4eae:	60 83       	st	Z, r22
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	08 95       	ret

00004eb6 <__subsf3>:
    4eb6:	50 58       	subi	r21, 0x80	; 128

00004eb8 <__addsf3>:
    4eb8:	bb 27       	eor	r27, r27
    4eba:	aa 27       	eor	r26, r26
    4ebc:	0e d0       	rcall	.+28     	; 0x4eda <__addsf3x>
    4ebe:	0b c1       	rjmp	.+534    	; 0x50d6 <__fp_round>
    4ec0:	fc d0       	rcall	.+504    	; 0x50ba <__fp_pscA>
    4ec2:	30 f0       	brcs	.+12     	; 0x4ed0 <__addsf3+0x18>
    4ec4:	01 d1       	rcall	.+514    	; 0x50c8 <__fp_pscB>
    4ec6:	20 f0       	brcs	.+8      	; 0x4ed0 <__addsf3+0x18>
    4ec8:	31 f4       	brne	.+12     	; 0x4ed6 <__addsf3+0x1e>
    4eca:	9f 3f       	cpi	r25, 0xFF	; 255
    4ecc:	11 f4       	brne	.+4      	; 0x4ed2 <__addsf3+0x1a>
    4ece:	1e f4       	brtc	.+6      	; 0x4ed6 <__addsf3+0x1e>
    4ed0:	f1 c0       	rjmp	.+482    	; 0x50b4 <__fp_nan>
    4ed2:	0e f4       	brtc	.+2      	; 0x4ed6 <__addsf3+0x1e>
    4ed4:	e0 95       	com	r30
    4ed6:	e7 fb       	bst	r30, 7
    4ed8:	e7 c0       	rjmp	.+462    	; 0x50a8 <__fp_inf>

00004eda <__addsf3x>:
    4eda:	e9 2f       	mov	r30, r25
    4edc:	0d d1       	rcall	.+538    	; 0x50f8 <__fp_split3>
    4ede:	80 f3       	brcs	.-32     	; 0x4ec0 <__addsf3+0x8>
    4ee0:	ba 17       	cp	r27, r26
    4ee2:	62 07       	cpc	r22, r18
    4ee4:	73 07       	cpc	r23, r19
    4ee6:	84 07       	cpc	r24, r20
    4ee8:	95 07       	cpc	r25, r21
    4eea:	18 f0       	brcs	.+6      	; 0x4ef2 <__addsf3x+0x18>
    4eec:	71 f4       	brne	.+28     	; 0x4f0a <__addsf3x+0x30>
    4eee:	9e f5       	brtc	.+102    	; 0x4f56 <__addsf3x+0x7c>
    4ef0:	25 c1       	rjmp	.+586    	; 0x513c <__fp_zero>
    4ef2:	0e f4       	brtc	.+2      	; 0x4ef6 <__addsf3x+0x1c>
    4ef4:	e0 95       	com	r30
    4ef6:	0b 2e       	mov	r0, r27
    4ef8:	ba 2f       	mov	r27, r26
    4efa:	a0 2d       	mov	r26, r0
    4efc:	0b 01       	movw	r0, r22
    4efe:	b9 01       	movw	r22, r18
    4f00:	90 01       	movw	r18, r0
    4f02:	0c 01       	movw	r0, r24
    4f04:	ca 01       	movw	r24, r20
    4f06:	a0 01       	movw	r20, r0
    4f08:	11 24       	eor	r1, r1
    4f0a:	ff 27       	eor	r31, r31
    4f0c:	59 1b       	sub	r21, r25
    4f0e:	99 f0       	breq	.+38     	; 0x4f36 <__addsf3x+0x5c>
    4f10:	59 3f       	cpi	r21, 0xF9	; 249
    4f12:	50 f4       	brcc	.+20     	; 0x4f28 <__addsf3x+0x4e>
    4f14:	50 3e       	cpi	r21, 0xE0	; 224
    4f16:	68 f1       	brcs	.+90     	; 0x4f72 <__addsf3x+0x98>
    4f18:	1a 16       	cp	r1, r26
    4f1a:	f0 40       	sbci	r31, 0x00	; 0
    4f1c:	a2 2f       	mov	r26, r18
    4f1e:	23 2f       	mov	r18, r19
    4f20:	34 2f       	mov	r19, r20
    4f22:	44 27       	eor	r20, r20
    4f24:	58 5f       	subi	r21, 0xF8	; 248
    4f26:	f3 cf       	rjmp	.-26     	; 0x4f0e <__addsf3x+0x34>
    4f28:	46 95       	lsr	r20
    4f2a:	37 95       	ror	r19
    4f2c:	27 95       	ror	r18
    4f2e:	a7 95       	ror	r26
    4f30:	f0 40       	sbci	r31, 0x00	; 0
    4f32:	53 95       	inc	r21
    4f34:	c9 f7       	brne	.-14     	; 0x4f28 <__addsf3x+0x4e>
    4f36:	7e f4       	brtc	.+30     	; 0x4f56 <__addsf3x+0x7c>
    4f38:	1f 16       	cp	r1, r31
    4f3a:	ba 0b       	sbc	r27, r26
    4f3c:	62 0b       	sbc	r22, r18
    4f3e:	73 0b       	sbc	r23, r19
    4f40:	84 0b       	sbc	r24, r20
    4f42:	ba f0       	brmi	.+46     	; 0x4f72 <__addsf3x+0x98>
    4f44:	91 50       	subi	r25, 0x01	; 1
    4f46:	a1 f0       	breq	.+40     	; 0x4f70 <__addsf3x+0x96>
    4f48:	ff 0f       	add	r31, r31
    4f4a:	bb 1f       	adc	r27, r27
    4f4c:	66 1f       	adc	r22, r22
    4f4e:	77 1f       	adc	r23, r23
    4f50:	88 1f       	adc	r24, r24
    4f52:	c2 f7       	brpl	.-16     	; 0x4f44 <__addsf3x+0x6a>
    4f54:	0e c0       	rjmp	.+28     	; 0x4f72 <__addsf3x+0x98>
    4f56:	ba 0f       	add	r27, r26
    4f58:	62 1f       	adc	r22, r18
    4f5a:	73 1f       	adc	r23, r19
    4f5c:	84 1f       	adc	r24, r20
    4f5e:	48 f4       	brcc	.+18     	; 0x4f72 <__addsf3x+0x98>
    4f60:	87 95       	ror	r24
    4f62:	77 95       	ror	r23
    4f64:	67 95       	ror	r22
    4f66:	b7 95       	ror	r27
    4f68:	f7 95       	ror	r31
    4f6a:	9e 3f       	cpi	r25, 0xFE	; 254
    4f6c:	08 f0       	brcs	.+2      	; 0x4f70 <__addsf3x+0x96>
    4f6e:	b3 cf       	rjmp	.-154    	; 0x4ed6 <__addsf3+0x1e>
    4f70:	93 95       	inc	r25
    4f72:	88 0f       	add	r24, r24
    4f74:	08 f0       	brcs	.+2      	; 0x4f78 <__addsf3x+0x9e>
    4f76:	99 27       	eor	r25, r25
    4f78:	ee 0f       	add	r30, r30
    4f7a:	97 95       	ror	r25
    4f7c:	87 95       	ror	r24
    4f7e:	08 95       	ret

00004f80 <__divsf3>:
    4f80:	0c d0       	rcall	.+24     	; 0x4f9a <__divsf3x>
    4f82:	a9 c0       	rjmp	.+338    	; 0x50d6 <__fp_round>
    4f84:	a1 d0       	rcall	.+322    	; 0x50c8 <__fp_pscB>
    4f86:	40 f0       	brcs	.+16     	; 0x4f98 <__divsf3+0x18>
    4f88:	98 d0       	rcall	.+304    	; 0x50ba <__fp_pscA>
    4f8a:	30 f0       	brcs	.+12     	; 0x4f98 <__divsf3+0x18>
    4f8c:	21 f4       	brne	.+8      	; 0x4f96 <__divsf3+0x16>
    4f8e:	5f 3f       	cpi	r21, 0xFF	; 255
    4f90:	19 f0       	breq	.+6      	; 0x4f98 <__divsf3+0x18>
    4f92:	8a c0       	rjmp	.+276    	; 0x50a8 <__fp_inf>
    4f94:	51 11       	cpse	r21, r1
    4f96:	d3 c0       	rjmp	.+422    	; 0x513e <__fp_szero>
    4f98:	8d c0       	rjmp	.+282    	; 0x50b4 <__fp_nan>

00004f9a <__divsf3x>:
    4f9a:	ae d0       	rcall	.+348    	; 0x50f8 <__fp_split3>
    4f9c:	98 f3       	brcs	.-26     	; 0x4f84 <__divsf3+0x4>

00004f9e <__divsf3_pse>:
    4f9e:	99 23       	and	r25, r25
    4fa0:	c9 f3       	breq	.-14     	; 0x4f94 <__divsf3+0x14>
    4fa2:	55 23       	and	r21, r21
    4fa4:	b1 f3       	breq	.-20     	; 0x4f92 <__divsf3+0x12>
    4fa6:	95 1b       	sub	r25, r21
    4fa8:	55 0b       	sbc	r21, r21
    4faa:	bb 27       	eor	r27, r27
    4fac:	aa 27       	eor	r26, r26
    4fae:	62 17       	cp	r22, r18
    4fb0:	73 07       	cpc	r23, r19
    4fb2:	84 07       	cpc	r24, r20
    4fb4:	38 f0       	brcs	.+14     	; 0x4fc4 <__divsf3_pse+0x26>
    4fb6:	9f 5f       	subi	r25, 0xFF	; 255
    4fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fba:	22 0f       	add	r18, r18
    4fbc:	33 1f       	adc	r19, r19
    4fbe:	44 1f       	adc	r20, r20
    4fc0:	aa 1f       	adc	r26, r26
    4fc2:	a9 f3       	breq	.-22     	; 0x4fae <__divsf3_pse+0x10>
    4fc4:	33 d0       	rcall	.+102    	; 0x502c <__divsf3_pse+0x8e>
    4fc6:	0e 2e       	mov	r0, r30
    4fc8:	3a f0       	brmi	.+14     	; 0x4fd8 <__divsf3_pse+0x3a>
    4fca:	e0 e8       	ldi	r30, 0x80	; 128
    4fcc:	30 d0       	rcall	.+96     	; 0x502e <__divsf3_pse+0x90>
    4fce:	91 50       	subi	r25, 0x01	; 1
    4fd0:	50 40       	sbci	r21, 0x00	; 0
    4fd2:	e6 95       	lsr	r30
    4fd4:	00 1c       	adc	r0, r0
    4fd6:	ca f7       	brpl	.-14     	; 0x4fca <__divsf3_pse+0x2c>
    4fd8:	29 d0       	rcall	.+82     	; 0x502c <__divsf3_pse+0x8e>
    4fda:	fe 2f       	mov	r31, r30
    4fdc:	27 d0       	rcall	.+78     	; 0x502c <__divsf3_pse+0x8e>
    4fde:	66 0f       	add	r22, r22
    4fe0:	77 1f       	adc	r23, r23
    4fe2:	88 1f       	adc	r24, r24
    4fe4:	bb 1f       	adc	r27, r27
    4fe6:	26 17       	cp	r18, r22
    4fe8:	37 07       	cpc	r19, r23
    4fea:	48 07       	cpc	r20, r24
    4fec:	ab 07       	cpc	r26, r27
    4fee:	b0 e8       	ldi	r27, 0x80	; 128
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <__divsf3_pse+0x56>
    4ff2:	bb 0b       	sbc	r27, r27
    4ff4:	80 2d       	mov	r24, r0
    4ff6:	bf 01       	movw	r22, r30
    4ff8:	ff 27       	eor	r31, r31
    4ffa:	93 58       	subi	r25, 0x83	; 131
    4ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ffe:	2a f0       	brmi	.+10     	; 0x500a <__divsf3_pse+0x6c>
    5000:	9e 3f       	cpi	r25, 0xFE	; 254
    5002:	51 05       	cpc	r21, r1
    5004:	68 f0       	brcs	.+26     	; 0x5020 <__divsf3_pse+0x82>
    5006:	50 c0       	rjmp	.+160    	; 0x50a8 <__fp_inf>
    5008:	9a c0       	rjmp	.+308    	; 0x513e <__fp_szero>
    500a:	5f 3f       	cpi	r21, 0xFF	; 255
    500c:	ec f3       	brlt	.-6      	; 0x5008 <__divsf3_pse+0x6a>
    500e:	98 3e       	cpi	r25, 0xE8	; 232
    5010:	dc f3       	brlt	.-10     	; 0x5008 <__divsf3_pse+0x6a>
    5012:	86 95       	lsr	r24
    5014:	77 95       	ror	r23
    5016:	67 95       	ror	r22
    5018:	b7 95       	ror	r27
    501a:	f7 95       	ror	r31
    501c:	9f 5f       	subi	r25, 0xFF	; 255
    501e:	c9 f7       	brne	.-14     	; 0x5012 <__divsf3_pse+0x74>
    5020:	88 0f       	add	r24, r24
    5022:	91 1d       	adc	r25, r1
    5024:	96 95       	lsr	r25
    5026:	87 95       	ror	r24
    5028:	97 f9       	bld	r25, 7
    502a:	08 95       	ret
    502c:	e1 e0       	ldi	r30, 0x01	; 1
    502e:	66 0f       	add	r22, r22
    5030:	77 1f       	adc	r23, r23
    5032:	88 1f       	adc	r24, r24
    5034:	bb 1f       	adc	r27, r27
    5036:	62 17       	cp	r22, r18
    5038:	73 07       	cpc	r23, r19
    503a:	84 07       	cpc	r24, r20
    503c:	ba 07       	cpc	r27, r26
    503e:	20 f0       	brcs	.+8      	; 0x5048 <__divsf3_pse+0xaa>
    5040:	62 1b       	sub	r22, r18
    5042:	73 0b       	sbc	r23, r19
    5044:	84 0b       	sbc	r24, r20
    5046:	ba 0b       	sbc	r27, r26
    5048:	ee 1f       	adc	r30, r30
    504a:	88 f7       	brcc	.-30     	; 0x502e <__divsf3_pse+0x90>
    504c:	e0 95       	com	r30
    504e:	08 95       	ret

00005050 <__fixunssfsi>:
    5050:	5b d0       	rcall	.+182    	; 0x5108 <__fp_splitA>
    5052:	88 f0       	brcs	.+34     	; 0x5076 <__fixunssfsi+0x26>
    5054:	9f 57       	subi	r25, 0x7F	; 127
    5056:	90 f0       	brcs	.+36     	; 0x507c <__fixunssfsi+0x2c>
    5058:	b9 2f       	mov	r27, r25
    505a:	99 27       	eor	r25, r25
    505c:	b7 51       	subi	r27, 0x17	; 23
    505e:	a0 f0       	brcs	.+40     	; 0x5088 <__fixunssfsi+0x38>
    5060:	d1 f0       	breq	.+52     	; 0x5096 <__fixunssfsi+0x46>
    5062:	66 0f       	add	r22, r22
    5064:	77 1f       	adc	r23, r23
    5066:	88 1f       	adc	r24, r24
    5068:	99 1f       	adc	r25, r25
    506a:	1a f0       	brmi	.+6      	; 0x5072 <__fixunssfsi+0x22>
    506c:	ba 95       	dec	r27
    506e:	c9 f7       	brne	.-14     	; 0x5062 <__fixunssfsi+0x12>
    5070:	12 c0       	rjmp	.+36     	; 0x5096 <__fixunssfsi+0x46>
    5072:	b1 30       	cpi	r27, 0x01	; 1
    5074:	81 f0       	breq	.+32     	; 0x5096 <__fixunssfsi+0x46>
    5076:	62 d0       	rcall	.+196    	; 0x513c <__fp_zero>
    5078:	b1 e0       	ldi	r27, 0x01	; 1
    507a:	08 95       	ret
    507c:	5f c0       	rjmp	.+190    	; 0x513c <__fp_zero>
    507e:	67 2f       	mov	r22, r23
    5080:	78 2f       	mov	r23, r24
    5082:	88 27       	eor	r24, r24
    5084:	b8 5f       	subi	r27, 0xF8	; 248
    5086:	39 f0       	breq	.+14     	; 0x5096 <__fixunssfsi+0x46>
    5088:	b9 3f       	cpi	r27, 0xF9	; 249
    508a:	cc f3       	brlt	.-14     	; 0x507e <__fixunssfsi+0x2e>
    508c:	86 95       	lsr	r24
    508e:	77 95       	ror	r23
    5090:	67 95       	ror	r22
    5092:	b3 95       	inc	r27
    5094:	d9 f7       	brne	.-10     	; 0x508c <__fixunssfsi+0x3c>
    5096:	3e f4       	brtc	.+14     	; 0x50a6 <__fixunssfsi+0x56>
    5098:	90 95       	com	r25
    509a:	80 95       	com	r24
    509c:	70 95       	com	r23
    509e:	61 95       	neg	r22
    50a0:	7f 4f       	sbci	r23, 0xFF	; 255
    50a2:	8f 4f       	sbci	r24, 0xFF	; 255
    50a4:	9f 4f       	sbci	r25, 0xFF	; 255
    50a6:	08 95       	ret

000050a8 <__fp_inf>:
    50a8:	97 f9       	bld	r25, 7
    50aa:	9f 67       	ori	r25, 0x7F	; 127
    50ac:	80 e8       	ldi	r24, 0x80	; 128
    50ae:	70 e0       	ldi	r23, 0x00	; 0
    50b0:	60 e0       	ldi	r22, 0x00	; 0
    50b2:	08 95       	ret

000050b4 <__fp_nan>:
    50b4:	9f ef       	ldi	r25, 0xFF	; 255
    50b6:	80 ec       	ldi	r24, 0xC0	; 192
    50b8:	08 95       	ret

000050ba <__fp_pscA>:
    50ba:	00 24       	eor	r0, r0
    50bc:	0a 94       	dec	r0
    50be:	16 16       	cp	r1, r22
    50c0:	17 06       	cpc	r1, r23
    50c2:	18 06       	cpc	r1, r24
    50c4:	09 06       	cpc	r0, r25
    50c6:	08 95       	ret

000050c8 <__fp_pscB>:
    50c8:	00 24       	eor	r0, r0
    50ca:	0a 94       	dec	r0
    50cc:	12 16       	cp	r1, r18
    50ce:	13 06       	cpc	r1, r19
    50d0:	14 06       	cpc	r1, r20
    50d2:	05 06       	cpc	r0, r21
    50d4:	08 95       	ret

000050d6 <__fp_round>:
    50d6:	09 2e       	mov	r0, r25
    50d8:	03 94       	inc	r0
    50da:	00 0c       	add	r0, r0
    50dc:	11 f4       	brne	.+4      	; 0x50e2 <__fp_round+0xc>
    50de:	88 23       	and	r24, r24
    50e0:	52 f0       	brmi	.+20     	; 0x50f6 <__fp_round+0x20>
    50e2:	bb 0f       	add	r27, r27
    50e4:	40 f4       	brcc	.+16     	; 0x50f6 <__fp_round+0x20>
    50e6:	bf 2b       	or	r27, r31
    50e8:	11 f4       	brne	.+4      	; 0x50ee <__fp_round+0x18>
    50ea:	60 ff       	sbrs	r22, 0
    50ec:	04 c0       	rjmp	.+8      	; 0x50f6 <__fp_round+0x20>
    50ee:	6f 5f       	subi	r22, 0xFF	; 255
    50f0:	7f 4f       	sbci	r23, 0xFF	; 255
    50f2:	8f 4f       	sbci	r24, 0xFF	; 255
    50f4:	9f 4f       	sbci	r25, 0xFF	; 255
    50f6:	08 95       	ret

000050f8 <__fp_split3>:
    50f8:	57 fd       	sbrc	r21, 7
    50fa:	90 58       	subi	r25, 0x80	; 128
    50fc:	44 0f       	add	r20, r20
    50fe:	55 1f       	adc	r21, r21
    5100:	59 f0       	breq	.+22     	; 0x5118 <__fp_splitA+0x10>
    5102:	5f 3f       	cpi	r21, 0xFF	; 255
    5104:	71 f0       	breq	.+28     	; 0x5122 <__fp_splitA+0x1a>
    5106:	47 95       	ror	r20

00005108 <__fp_splitA>:
    5108:	88 0f       	add	r24, r24
    510a:	97 fb       	bst	r25, 7
    510c:	99 1f       	adc	r25, r25
    510e:	61 f0       	breq	.+24     	; 0x5128 <__fp_splitA+0x20>
    5110:	9f 3f       	cpi	r25, 0xFF	; 255
    5112:	79 f0       	breq	.+30     	; 0x5132 <__fp_splitA+0x2a>
    5114:	87 95       	ror	r24
    5116:	08 95       	ret
    5118:	12 16       	cp	r1, r18
    511a:	13 06       	cpc	r1, r19
    511c:	14 06       	cpc	r1, r20
    511e:	55 1f       	adc	r21, r21
    5120:	f2 cf       	rjmp	.-28     	; 0x5106 <__fp_split3+0xe>
    5122:	46 95       	lsr	r20
    5124:	f1 df       	rcall	.-30     	; 0x5108 <__fp_splitA>
    5126:	08 c0       	rjmp	.+16     	; 0x5138 <__fp_splitA+0x30>
    5128:	16 16       	cp	r1, r22
    512a:	17 06       	cpc	r1, r23
    512c:	18 06       	cpc	r1, r24
    512e:	99 1f       	adc	r25, r25
    5130:	f1 cf       	rjmp	.-30     	; 0x5114 <__fp_splitA+0xc>
    5132:	86 95       	lsr	r24
    5134:	71 05       	cpc	r23, r1
    5136:	61 05       	cpc	r22, r1
    5138:	08 94       	sec
    513a:	08 95       	ret

0000513c <__fp_zero>:
    513c:	e8 94       	clt

0000513e <__fp_szero>:
    513e:	bb 27       	eor	r27, r27
    5140:	66 27       	eor	r22, r22
    5142:	77 27       	eor	r23, r23
    5144:	cb 01       	movw	r24, r22
    5146:	97 f9       	bld	r25, 7
    5148:	08 95       	ret

0000514a <__mulsf3>:
    514a:	0b d0       	rcall	.+22     	; 0x5162 <__mulsf3x>
    514c:	c4 cf       	rjmp	.-120    	; 0x50d6 <__fp_round>
    514e:	b5 df       	rcall	.-150    	; 0x50ba <__fp_pscA>
    5150:	28 f0       	brcs	.+10     	; 0x515c <__mulsf3+0x12>
    5152:	ba df       	rcall	.-140    	; 0x50c8 <__fp_pscB>
    5154:	18 f0       	brcs	.+6      	; 0x515c <__mulsf3+0x12>
    5156:	95 23       	and	r25, r21
    5158:	09 f0       	breq	.+2      	; 0x515c <__mulsf3+0x12>
    515a:	a6 cf       	rjmp	.-180    	; 0x50a8 <__fp_inf>
    515c:	ab cf       	rjmp	.-170    	; 0x50b4 <__fp_nan>
    515e:	11 24       	eor	r1, r1
    5160:	ee cf       	rjmp	.-36     	; 0x513e <__fp_szero>

00005162 <__mulsf3x>:
    5162:	ca df       	rcall	.-108    	; 0x50f8 <__fp_split3>
    5164:	a0 f3       	brcs	.-24     	; 0x514e <__mulsf3+0x4>

00005166 <__mulsf3_pse>:
    5166:	95 9f       	mul	r25, r21
    5168:	d1 f3       	breq	.-12     	; 0x515e <__mulsf3+0x14>
    516a:	95 0f       	add	r25, r21
    516c:	50 e0       	ldi	r21, 0x00	; 0
    516e:	55 1f       	adc	r21, r21
    5170:	62 9f       	mul	r22, r18
    5172:	f0 01       	movw	r30, r0
    5174:	72 9f       	mul	r23, r18
    5176:	bb 27       	eor	r27, r27
    5178:	f0 0d       	add	r31, r0
    517a:	b1 1d       	adc	r27, r1
    517c:	63 9f       	mul	r22, r19
    517e:	aa 27       	eor	r26, r26
    5180:	f0 0d       	add	r31, r0
    5182:	b1 1d       	adc	r27, r1
    5184:	aa 1f       	adc	r26, r26
    5186:	64 9f       	mul	r22, r20
    5188:	66 27       	eor	r22, r22
    518a:	b0 0d       	add	r27, r0
    518c:	a1 1d       	adc	r26, r1
    518e:	66 1f       	adc	r22, r22
    5190:	82 9f       	mul	r24, r18
    5192:	22 27       	eor	r18, r18
    5194:	b0 0d       	add	r27, r0
    5196:	a1 1d       	adc	r26, r1
    5198:	62 1f       	adc	r22, r18
    519a:	73 9f       	mul	r23, r19
    519c:	b0 0d       	add	r27, r0
    519e:	a1 1d       	adc	r26, r1
    51a0:	62 1f       	adc	r22, r18
    51a2:	83 9f       	mul	r24, r19
    51a4:	a0 0d       	add	r26, r0
    51a6:	61 1d       	adc	r22, r1
    51a8:	22 1f       	adc	r18, r18
    51aa:	74 9f       	mul	r23, r20
    51ac:	33 27       	eor	r19, r19
    51ae:	a0 0d       	add	r26, r0
    51b0:	61 1d       	adc	r22, r1
    51b2:	23 1f       	adc	r18, r19
    51b4:	84 9f       	mul	r24, r20
    51b6:	60 0d       	add	r22, r0
    51b8:	21 1d       	adc	r18, r1
    51ba:	82 2f       	mov	r24, r18
    51bc:	76 2f       	mov	r23, r22
    51be:	6a 2f       	mov	r22, r26
    51c0:	11 24       	eor	r1, r1
    51c2:	9f 57       	subi	r25, 0x7F	; 127
    51c4:	50 40       	sbci	r21, 0x00	; 0
    51c6:	8a f0       	brmi	.+34     	; 0x51ea <__mulsf3_pse+0x84>
    51c8:	e1 f0       	breq	.+56     	; 0x5202 <__mulsf3_pse+0x9c>
    51ca:	88 23       	and	r24, r24
    51cc:	4a f0       	brmi	.+18     	; 0x51e0 <__mulsf3_pse+0x7a>
    51ce:	ee 0f       	add	r30, r30
    51d0:	ff 1f       	adc	r31, r31
    51d2:	bb 1f       	adc	r27, r27
    51d4:	66 1f       	adc	r22, r22
    51d6:	77 1f       	adc	r23, r23
    51d8:	88 1f       	adc	r24, r24
    51da:	91 50       	subi	r25, 0x01	; 1
    51dc:	50 40       	sbci	r21, 0x00	; 0
    51de:	a9 f7       	brne	.-22     	; 0x51ca <__mulsf3_pse+0x64>
    51e0:	9e 3f       	cpi	r25, 0xFE	; 254
    51e2:	51 05       	cpc	r21, r1
    51e4:	70 f0       	brcs	.+28     	; 0x5202 <__mulsf3_pse+0x9c>
    51e6:	60 cf       	rjmp	.-320    	; 0x50a8 <__fp_inf>
    51e8:	aa cf       	rjmp	.-172    	; 0x513e <__fp_szero>
    51ea:	5f 3f       	cpi	r21, 0xFF	; 255
    51ec:	ec f3       	brlt	.-6      	; 0x51e8 <__mulsf3_pse+0x82>
    51ee:	98 3e       	cpi	r25, 0xE8	; 232
    51f0:	dc f3       	brlt	.-10     	; 0x51e8 <__mulsf3_pse+0x82>
    51f2:	86 95       	lsr	r24
    51f4:	77 95       	ror	r23
    51f6:	67 95       	ror	r22
    51f8:	b7 95       	ror	r27
    51fa:	f7 95       	ror	r31
    51fc:	e7 95       	ror	r30
    51fe:	9f 5f       	subi	r25, 0xFF	; 255
    5200:	c1 f7       	brne	.-16     	; 0x51f2 <__mulsf3_pse+0x8c>
    5202:	fe 2b       	or	r31, r30
    5204:	88 0f       	add	r24, r24
    5206:	91 1d       	adc	r25, r1
    5208:	96 95       	lsr	r25
    520a:	87 95       	ror	r24
    520c:	97 f9       	bld	r25, 7
    520e:	08 95       	ret

00005210 <__udivmodsi4>:
    5210:	a1 e2       	ldi	r26, 0x21	; 33
    5212:	1a 2e       	mov	r1, r26
    5214:	aa 1b       	sub	r26, r26
    5216:	bb 1b       	sub	r27, r27
    5218:	fd 01       	movw	r30, r26
    521a:	0d c0       	rjmp	.+26     	; 0x5236 <__udivmodsi4_ep>

0000521c <__udivmodsi4_loop>:
    521c:	aa 1f       	adc	r26, r26
    521e:	bb 1f       	adc	r27, r27
    5220:	ee 1f       	adc	r30, r30
    5222:	ff 1f       	adc	r31, r31
    5224:	a2 17       	cp	r26, r18
    5226:	b3 07       	cpc	r27, r19
    5228:	e4 07       	cpc	r30, r20
    522a:	f5 07       	cpc	r31, r21
    522c:	20 f0       	brcs	.+8      	; 0x5236 <__udivmodsi4_ep>
    522e:	a2 1b       	sub	r26, r18
    5230:	b3 0b       	sbc	r27, r19
    5232:	e4 0b       	sbc	r30, r20
    5234:	f5 0b       	sbc	r31, r21

00005236 <__udivmodsi4_ep>:
    5236:	66 1f       	adc	r22, r22
    5238:	77 1f       	adc	r23, r23
    523a:	88 1f       	adc	r24, r24
    523c:	99 1f       	adc	r25, r25
    523e:	1a 94       	dec	r1
    5240:	69 f7       	brne	.-38     	; 0x521c <__udivmodsi4_loop>
    5242:	60 95       	com	r22
    5244:	70 95       	com	r23
    5246:	80 95       	com	r24
    5248:	90 95       	com	r25
    524a:	9b 01       	movw	r18, r22
    524c:	ac 01       	movw	r20, r24
    524e:	bd 01       	movw	r22, r26
    5250:	cf 01       	movw	r24, r30
    5252:	08 95       	ret

00005254 <__tablejump2__>:
    5254:	ee 0f       	add	r30, r30
    5256:	ff 1f       	adc	r31, r31
    5258:	88 1f       	adc	r24, r24
    525a:	8b bf       	out	0x3b, r24	; 59
    525c:	07 90       	elpm	r0, Z+
    525e:	f6 91       	elpm	r31, Z
    5260:	e0 2d       	mov	r30, r0
    5262:	19 94       	eijmp

00005264 <calloc>:
    5264:	0f 93       	push	r16
    5266:	1f 93       	push	r17
    5268:	cf 93       	push	r28
    526a:	df 93       	push	r29
    526c:	86 9f       	mul	r24, r22
    526e:	80 01       	movw	r16, r0
    5270:	87 9f       	mul	r24, r23
    5272:	10 0d       	add	r17, r0
    5274:	96 9f       	mul	r25, r22
    5276:	10 0d       	add	r17, r0
    5278:	11 24       	eor	r1, r1
    527a:	c8 01       	movw	r24, r16
    527c:	0d d0       	rcall	.+26     	; 0x5298 <malloc>
    527e:	ec 01       	movw	r28, r24
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	21 f0       	breq	.+8      	; 0x528c <calloc+0x28>
    5284:	a8 01       	movw	r20, r16
    5286:	60 e0       	ldi	r22, 0x00	; 0
    5288:	70 e0       	ldi	r23, 0x00	; 0
    528a:	34 d1       	rcall	.+616    	; 0x54f4 <memset>
    528c:	ce 01       	movw	r24, r28
    528e:	df 91       	pop	r29
    5290:	cf 91       	pop	r28
    5292:	1f 91       	pop	r17
    5294:	0f 91       	pop	r16
    5296:	08 95       	ret

00005298 <malloc>:
    5298:	0f 93       	push	r16
    529a:	1f 93       	push	r17
    529c:	cf 93       	push	r28
    529e:	df 93       	push	r29
    52a0:	82 30       	cpi	r24, 0x02	; 2
    52a2:	91 05       	cpc	r25, r1
    52a4:	10 f4       	brcc	.+4      	; 0x52aa <malloc+0x12>
    52a6:	82 e0       	ldi	r24, 0x02	; 2
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	e0 91 fd 19 	lds	r30, 0x19FD	; 0x8019fd <__flp>
    52ae:	f0 91 fe 19 	lds	r31, 0x19FE	; 0x8019fe <__flp+0x1>
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	a0 e0       	ldi	r26, 0x00	; 0
    52b8:	b0 e0       	ldi	r27, 0x00	; 0
    52ba:	30 97       	sbiw	r30, 0x00	; 0
    52bc:	19 f1       	breq	.+70     	; 0x5304 <malloc+0x6c>
    52be:	40 81       	ld	r20, Z
    52c0:	51 81       	ldd	r21, Z+1	; 0x01
    52c2:	02 81       	ldd	r16, Z+2	; 0x02
    52c4:	13 81       	ldd	r17, Z+3	; 0x03
    52c6:	48 17       	cp	r20, r24
    52c8:	59 07       	cpc	r21, r25
    52ca:	c8 f0       	brcs	.+50     	; 0x52fe <malloc+0x66>
    52cc:	84 17       	cp	r24, r20
    52ce:	95 07       	cpc	r25, r21
    52d0:	69 f4       	brne	.+26     	; 0x52ec <malloc+0x54>
    52d2:	10 97       	sbiw	r26, 0x00	; 0
    52d4:	31 f0       	breq	.+12     	; 0x52e2 <malloc+0x4a>
    52d6:	12 96       	adiw	r26, 0x02	; 2
    52d8:	0c 93       	st	X, r16
    52da:	12 97       	sbiw	r26, 0x02	; 2
    52dc:	13 96       	adiw	r26, 0x03	; 3
    52de:	1c 93       	st	X, r17
    52e0:	27 c0       	rjmp	.+78     	; 0x5330 <malloc+0x98>
    52e2:	00 93 fd 19 	sts	0x19FD, r16	; 0x8019fd <__flp>
    52e6:	10 93 fe 19 	sts	0x19FE, r17	; 0x8019fe <__flp+0x1>
    52ea:	22 c0       	rjmp	.+68     	; 0x5330 <malloc+0x98>
    52ec:	21 15       	cp	r18, r1
    52ee:	31 05       	cpc	r19, r1
    52f0:	19 f0       	breq	.+6      	; 0x52f8 <malloc+0x60>
    52f2:	42 17       	cp	r20, r18
    52f4:	53 07       	cpc	r21, r19
    52f6:	18 f4       	brcc	.+6      	; 0x52fe <malloc+0x66>
    52f8:	9a 01       	movw	r18, r20
    52fa:	bd 01       	movw	r22, r26
    52fc:	ef 01       	movw	r28, r30
    52fe:	df 01       	movw	r26, r30
    5300:	f8 01       	movw	r30, r16
    5302:	db cf       	rjmp	.-74     	; 0x52ba <malloc+0x22>
    5304:	21 15       	cp	r18, r1
    5306:	31 05       	cpc	r19, r1
    5308:	f9 f0       	breq	.+62     	; 0x5348 <malloc+0xb0>
    530a:	28 1b       	sub	r18, r24
    530c:	39 0b       	sbc	r19, r25
    530e:	24 30       	cpi	r18, 0x04	; 4
    5310:	31 05       	cpc	r19, r1
    5312:	80 f4       	brcc	.+32     	; 0x5334 <malloc+0x9c>
    5314:	8a 81       	ldd	r24, Y+2	; 0x02
    5316:	9b 81       	ldd	r25, Y+3	; 0x03
    5318:	61 15       	cp	r22, r1
    531a:	71 05       	cpc	r23, r1
    531c:	21 f0       	breq	.+8      	; 0x5326 <malloc+0x8e>
    531e:	fb 01       	movw	r30, r22
    5320:	93 83       	std	Z+3, r25	; 0x03
    5322:	82 83       	std	Z+2, r24	; 0x02
    5324:	04 c0       	rjmp	.+8      	; 0x532e <malloc+0x96>
    5326:	90 93 fe 19 	sts	0x19FE, r25	; 0x8019fe <__flp+0x1>
    532a:	80 93 fd 19 	sts	0x19FD, r24	; 0x8019fd <__flp>
    532e:	fe 01       	movw	r30, r28
    5330:	32 96       	adiw	r30, 0x02	; 2
    5332:	44 c0       	rjmp	.+136    	; 0x53bc <malloc+0x124>
    5334:	fe 01       	movw	r30, r28
    5336:	e2 0f       	add	r30, r18
    5338:	f3 1f       	adc	r31, r19
    533a:	81 93       	st	Z+, r24
    533c:	91 93       	st	Z+, r25
    533e:	22 50       	subi	r18, 0x02	; 2
    5340:	31 09       	sbc	r19, r1
    5342:	39 83       	std	Y+1, r19	; 0x01
    5344:	28 83       	st	Y, r18
    5346:	3a c0       	rjmp	.+116    	; 0x53bc <malloc+0x124>
    5348:	20 91 fb 19 	lds	r18, 0x19FB	; 0x8019fb <__brkval>
    534c:	30 91 fc 19 	lds	r19, 0x19FC	; 0x8019fc <__brkval+0x1>
    5350:	23 2b       	or	r18, r19
    5352:	41 f4       	brne	.+16     	; 0x5364 <malloc+0xcc>
    5354:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5358:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    535c:	30 93 fc 19 	sts	0x19FC, r19	; 0x8019fc <__brkval+0x1>
    5360:	20 93 fb 19 	sts	0x19FB, r18	; 0x8019fb <__brkval>
    5364:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5368:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    536c:	21 15       	cp	r18, r1
    536e:	31 05       	cpc	r19, r1
    5370:	41 f4       	brne	.+16     	; 0x5382 <malloc+0xea>
    5372:	2d b7       	in	r18, 0x3d	; 61
    5374:	3e b7       	in	r19, 0x3e	; 62
    5376:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    537a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    537e:	24 1b       	sub	r18, r20
    5380:	35 0b       	sbc	r19, r21
    5382:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <__brkval>
    5386:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <__brkval+0x1>
    538a:	e2 17       	cp	r30, r18
    538c:	f3 07       	cpc	r31, r19
    538e:	a0 f4       	brcc	.+40     	; 0x53b8 <malloc+0x120>
    5390:	2e 1b       	sub	r18, r30
    5392:	3f 0b       	sbc	r19, r31
    5394:	28 17       	cp	r18, r24
    5396:	39 07       	cpc	r19, r25
    5398:	78 f0       	brcs	.+30     	; 0x53b8 <malloc+0x120>
    539a:	ac 01       	movw	r20, r24
    539c:	4e 5f       	subi	r20, 0xFE	; 254
    539e:	5f 4f       	sbci	r21, 0xFF	; 255
    53a0:	24 17       	cp	r18, r20
    53a2:	35 07       	cpc	r19, r21
    53a4:	48 f0       	brcs	.+18     	; 0x53b8 <malloc+0x120>
    53a6:	4e 0f       	add	r20, r30
    53a8:	5f 1f       	adc	r21, r31
    53aa:	50 93 fc 19 	sts	0x19FC, r21	; 0x8019fc <__brkval+0x1>
    53ae:	40 93 fb 19 	sts	0x19FB, r20	; 0x8019fb <__brkval>
    53b2:	81 93       	st	Z+, r24
    53b4:	91 93       	st	Z+, r25
    53b6:	02 c0       	rjmp	.+4      	; 0x53bc <malloc+0x124>
    53b8:	e0 e0       	ldi	r30, 0x00	; 0
    53ba:	f0 e0       	ldi	r31, 0x00	; 0
    53bc:	cf 01       	movw	r24, r30
    53be:	df 91       	pop	r29
    53c0:	cf 91       	pop	r28
    53c2:	1f 91       	pop	r17
    53c4:	0f 91       	pop	r16
    53c6:	08 95       	ret

000053c8 <free>:
    53c8:	cf 93       	push	r28
    53ca:	df 93       	push	r29
    53cc:	00 97       	sbiw	r24, 0x00	; 0
    53ce:	09 f4       	brne	.+2      	; 0x53d2 <free+0xa>
    53d0:	81 c0       	rjmp	.+258    	; 0x54d4 <free+0x10c>
    53d2:	fc 01       	movw	r30, r24
    53d4:	32 97       	sbiw	r30, 0x02	; 2
    53d6:	13 82       	std	Z+3, r1	; 0x03
    53d8:	12 82       	std	Z+2, r1	; 0x02
    53da:	a0 91 fd 19 	lds	r26, 0x19FD	; 0x8019fd <__flp>
    53de:	b0 91 fe 19 	lds	r27, 0x19FE	; 0x8019fe <__flp+0x1>
    53e2:	10 97       	sbiw	r26, 0x00	; 0
    53e4:	81 f4       	brne	.+32     	; 0x5406 <free+0x3e>
    53e6:	20 81       	ld	r18, Z
    53e8:	31 81       	ldd	r19, Z+1	; 0x01
    53ea:	82 0f       	add	r24, r18
    53ec:	93 1f       	adc	r25, r19
    53ee:	20 91 fb 19 	lds	r18, 0x19FB	; 0x8019fb <__brkval>
    53f2:	30 91 fc 19 	lds	r19, 0x19FC	; 0x8019fc <__brkval+0x1>
    53f6:	28 17       	cp	r18, r24
    53f8:	39 07       	cpc	r19, r25
    53fa:	51 f5       	brne	.+84     	; 0x5450 <free+0x88>
    53fc:	f0 93 fc 19 	sts	0x19FC, r31	; 0x8019fc <__brkval+0x1>
    5400:	e0 93 fb 19 	sts	0x19FB, r30	; 0x8019fb <__brkval>
    5404:	67 c0       	rjmp	.+206    	; 0x54d4 <free+0x10c>
    5406:	ed 01       	movw	r28, r26
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	ce 17       	cp	r28, r30
    540e:	df 07       	cpc	r29, r31
    5410:	40 f4       	brcc	.+16     	; 0x5422 <free+0x5a>
    5412:	4a 81       	ldd	r20, Y+2	; 0x02
    5414:	5b 81       	ldd	r21, Y+3	; 0x03
    5416:	9e 01       	movw	r18, r28
    5418:	41 15       	cp	r20, r1
    541a:	51 05       	cpc	r21, r1
    541c:	f1 f0       	breq	.+60     	; 0x545a <free+0x92>
    541e:	ea 01       	movw	r28, r20
    5420:	f5 cf       	rjmp	.-22     	; 0x540c <free+0x44>
    5422:	d3 83       	std	Z+3, r29	; 0x03
    5424:	c2 83       	std	Z+2, r28	; 0x02
    5426:	40 81       	ld	r20, Z
    5428:	51 81       	ldd	r21, Z+1	; 0x01
    542a:	84 0f       	add	r24, r20
    542c:	95 1f       	adc	r25, r21
    542e:	c8 17       	cp	r28, r24
    5430:	d9 07       	cpc	r29, r25
    5432:	59 f4       	brne	.+22     	; 0x544a <free+0x82>
    5434:	88 81       	ld	r24, Y
    5436:	99 81       	ldd	r25, Y+1	; 0x01
    5438:	84 0f       	add	r24, r20
    543a:	95 1f       	adc	r25, r21
    543c:	02 96       	adiw	r24, 0x02	; 2
    543e:	91 83       	std	Z+1, r25	; 0x01
    5440:	80 83       	st	Z, r24
    5442:	8a 81       	ldd	r24, Y+2	; 0x02
    5444:	9b 81       	ldd	r25, Y+3	; 0x03
    5446:	93 83       	std	Z+3, r25	; 0x03
    5448:	82 83       	std	Z+2, r24	; 0x02
    544a:	21 15       	cp	r18, r1
    544c:	31 05       	cpc	r19, r1
    544e:	29 f4       	brne	.+10     	; 0x545a <free+0x92>
    5450:	f0 93 fe 19 	sts	0x19FE, r31	; 0x8019fe <__flp+0x1>
    5454:	e0 93 fd 19 	sts	0x19FD, r30	; 0x8019fd <__flp>
    5458:	3d c0       	rjmp	.+122    	; 0x54d4 <free+0x10c>
    545a:	e9 01       	movw	r28, r18
    545c:	fb 83       	std	Y+3, r31	; 0x03
    545e:	ea 83       	std	Y+2, r30	; 0x02
    5460:	49 91       	ld	r20, Y+
    5462:	59 91       	ld	r21, Y+
    5464:	c4 0f       	add	r28, r20
    5466:	d5 1f       	adc	r29, r21
    5468:	ec 17       	cp	r30, r28
    546a:	fd 07       	cpc	r31, r29
    546c:	61 f4       	brne	.+24     	; 0x5486 <free+0xbe>
    546e:	80 81       	ld	r24, Z
    5470:	91 81       	ldd	r25, Z+1	; 0x01
    5472:	84 0f       	add	r24, r20
    5474:	95 1f       	adc	r25, r21
    5476:	02 96       	adiw	r24, 0x02	; 2
    5478:	e9 01       	movw	r28, r18
    547a:	99 83       	std	Y+1, r25	; 0x01
    547c:	88 83       	st	Y, r24
    547e:	82 81       	ldd	r24, Z+2	; 0x02
    5480:	93 81       	ldd	r25, Z+3	; 0x03
    5482:	9b 83       	std	Y+3, r25	; 0x03
    5484:	8a 83       	std	Y+2, r24	; 0x02
    5486:	e0 e0       	ldi	r30, 0x00	; 0
    5488:	f0 e0       	ldi	r31, 0x00	; 0
    548a:	12 96       	adiw	r26, 0x02	; 2
    548c:	8d 91       	ld	r24, X+
    548e:	9c 91       	ld	r25, X
    5490:	13 97       	sbiw	r26, 0x03	; 3
    5492:	00 97       	sbiw	r24, 0x00	; 0
    5494:	19 f0       	breq	.+6      	; 0x549c <free+0xd4>
    5496:	fd 01       	movw	r30, r26
    5498:	dc 01       	movw	r26, r24
    549a:	f7 cf       	rjmp	.-18     	; 0x548a <free+0xc2>
    549c:	8d 91       	ld	r24, X+
    549e:	9c 91       	ld	r25, X
    54a0:	11 97       	sbiw	r26, 0x01	; 1
    54a2:	9d 01       	movw	r18, r26
    54a4:	2e 5f       	subi	r18, 0xFE	; 254
    54a6:	3f 4f       	sbci	r19, 0xFF	; 255
    54a8:	82 0f       	add	r24, r18
    54aa:	93 1f       	adc	r25, r19
    54ac:	20 91 fb 19 	lds	r18, 0x19FB	; 0x8019fb <__brkval>
    54b0:	30 91 fc 19 	lds	r19, 0x19FC	; 0x8019fc <__brkval+0x1>
    54b4:	28 17       	cp	r18, r24
    54b6:	39 07       	cpc	r19, r25
    54b8:	69 f4       	brne	.+26     	; 0x54d4 <free+0x10c>
    54ba:	30 97       	sbiw	r30, 0x00	; 0
    54bc:	29 f4       	brne	.+10     	; 0x54c8 <free+0x100>
    54be:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <__flp+0x1>
    54c2:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <__flp>
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <free+0x104>
    54c8:	13 82       	std	Z+3, r1	; 0x03
    54ca:	12 82       	std	Z+2, r1	; 0x02
    54cc:	b0 93 fc 19 	sts	0x19FC, r27	; 0x8019fc <__brkval+0x1>
    54d0:	a0 93 fb 19 	sts	0x19FB, r26	; 0x8019fb <__brkval>
    54d4:	df 91       	pop	r29
    54d6:	cf 91       	pop	r28
    54d8:	08 95       	ret

000054da <abort>:
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	f8 94       	cli
    54e0:	7d c3       	rjmp	.+1786   	; 0x5bdc <_exit>

000054e2 <memcpy>:
    54e2:	fb 01       	movw	r30, r22
    54e4:	dc 01       	movw	r26, r24
    54e6:	02 c0       	rjmp	.+4      	; 0x54ec <memcpy+0xa>
    54e8:	01 90       	ld	r0, Z+
    54ea:	0d 92       	st	X+, r0
    54ec:	41 50       	subi	r20, 0x01	; 1
    54ee:	50 40       	sbci	r21, 0x00	; 0
    54f0:	d8 f7       	brcc	.-10     	; 0x54e8 <memcpy+0x6>
    54f2:	08 95       	ret

000054f4 <memset>:
    54f4:	dc 01       	movw	r26, r24
    54f6:	01 c0       	rjmp	.+2      	; 0x54fa <memset+0x6>
    54f8:	6d 93       	st	X+, r22
    54fa:	41 50       	subi	r20, 0x01	; 1
    54fc:	50 40       	sbci	r21, 0x00	; 0
    54fe:	e0 f7       	brcc	.-8      	; 0x54f8 <memset+0x4>
    5500:	08 95       	ret

00005502 <strcasestr>:
    5502:	fb 01       	movw	r30, r22
    5504:	51 91       	ld	r21, Z+
    5506:	55 23       	and	r21, r21
    5508:	b1 f0       	breq	.+44     	; 0x5536 <strcasestr+0x34>
    550a:	bf 01       	movw	r22, r30
    550c:	dc 01       	movw	r26, r24
    550e:	05 2e       	mov	r0, r21
    5510:	4d 91       	ld	r20, X+
    5512:	44 23       	and	r20, r20
    5514:	69 f0       	breq	.+26     	; 0x5530 <strcasestr+0x2e>
    5516:	10 d0       	rcall	.+32     	; 0x5538 <strcasestr+0x36>
    5518:	d9 f7       	brne	.-10     	; 0x5510 <strcasestr+0xe>
    551a:	cd 01       	movw	r24, r26
    551c:	01 90       	ld	r0, Z+
    551e:	00 20       	and	r0, r0
    5520:	49 f0       	breq	.+18     	; 0x5534 <strcasestr+0x32>
    5522:	4d 91       	ld	r20, X+
    5524:	41 11       	cpse	r20, r1
    5526:	08 d0       	rcall	.+16     	; 0x5538 <strcasestr+0x36>
    5528:	c9 f3       	breq	.-14     	; 0x551c <strcasestr+0x1a>
    552a:	fb 01       	movw	r30, r22
    552c:	41 11       	cpse	r20, r1
    552e:	ee cf       	rjmp	.-36     	; 0x550c <strcasestr+0xa>
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	01 97       	sbiw	r24, 0x01	; 1
    5536:	08 95       	ret
    5538:	40 25       	eor	r20, r0
    553a:	39 f0       	breq	.+14     	; 0x554a <strcasestr+0x48>
    553c:	40 32       	cpi	r20, 0x20	; 32
    553e:	29 f4       	brne	.+10     	; 0x554a <strcasestr+0x48>
    5540:	40 29       	or	r20, r0
    5542:	4b 57       	subi	r20, 0x7B	; 123
    5544:	46 5e       	subi	r20, 0xE6	; 230
    5546:	08 f0       	brcs	.+2      	; 0x554a <strcasestr+0x48>
    5548:	18 94       	sez
    554a:	08 95       	ret

0000554c <strcat>:
    554c:	fb 01       	movw	r30, r22
    554e:	dc 01       	movw	r26, r24
    5550:	0d 90       	ld	r0, X+
    5552:	00 20       	and	r0, r0
    5554:	e9 f7       	brne	.-6      	; 0x5550 <strcat+0x4>
    5556:	11 97       	sbiw	r26, 0x01	; 1
    5558:	01 90       	ld	r0, Z+
    555a:	0d 92       	st	X+, r0
    555c:	00 20       	and	r0, r0
    555e:	e1 f7       	brne	.-8      	; 0x5558 <strcat+0xc>
    5560:	08 95       	ret

00005562 <strcpy>:
    5562:	fb 01       	movw	r30, r22
    5564:	dc 01       	movw	r26, r24
    5566:	01 90       	ld	r0, Z+
    5568:	0d 92       	st	X+, r0
    556a:	00 20       	and	r0, r0
    556c:	e1 f7       	brne	.-8      	; 0x5566 <strcpy+0x4>
    556e:	08 95       	ret

00005570 <strncasecmp>:
    5570:	fb 01       	movw	r30, r22
    5572:	dc 01       	movw	r26, r24
    5574:	41 50       	subi	r20, 0x01	; 1
    5576:	50 40       	sbci	r21, 0x00	; 0
    5578:	88 f0       	brcs	.+34     	; 0x559c <strncasecmp+0x2c>
    557a:	8d 91       	ld	r24, X+
    557c:	81 34       	cpi	r24, 0x41	; 65
    557e:	1c f0       	brlt	.+6      	; 0x5586 <strncasecmp+0x16>
    5580:	8b 35       	cpi	r24, 0x5B	; 91
    5582:	0c f4       	brge	.+2      	; 0x5586 <strncasecmp+0x16>
    5584:	80 5e       	subi	r24, 0xE0	; 224
    5586:	61 91       	ld	r22, Z+
    5588:	61 34       	cpi	r22, 0x41	; 65
    558a:	1c f0       	brlt	.+6      	; 0x5592 <strncasecmp+0x22>
    558c:	6b 35       	cpi	r22, 0x5B	; 91
    558e:	0c f4       	brge	.+2      	; 0x5592 <strncasecmp+0x22>
    5590:	60 5e       	subi	r22, 0xE0	; 224
    5592:	86 1b       	sub	r24, r22
    5594:	61 11       	cpse	r22, r1
    5596:	71 f3       	breq	.-36     	; 0x5574 <strncasecmp+0x4>
    5598:	99 0b       	sbc	r25, r25
    559a:	08 95       	ret
    559c:	88 1b       	sub	r24, r24
    559e:	fc cf       	rjmp	.-8      	; 0x5598 <strncasecmp+0x28>

000055a0 <printf>:
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
    55a4:	cd b7       	in	r28, 0x3d	; 61
    55a6:	de b7       	in	r29, 0x3e	; 62
    55a8:	ae 01       	movw	r20, r28
    55aa:	4a 5f       	subi	r20, 0xFA	; 250
    55ac:	5f 4f       	sbci	r21, 0xFF	; 255
    55ae:	fa 01       	movw	r30, r20
    55b0:	61 91       	ld	r22, Z+
    55b2:	71 91       	ld	r23, Z+
    55b4:	af 01       	movw	r20, r30
    55b6:	80 91 01 1a 	lds	r24, 0x1A01	; 0x801a01 <__iob+0x2>
    55ba:	90 91 02 1a 	lds	r25, 0x1A02	; 0x801a02 <__iob+0x3>
    55be:	61 d0       	rcall	.+194    	; 0x5682 <vfprintf>
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	08 95       	ret

000055c6 <puts>:
    55c6:	0f 93       	push	r16
    55c8:	1f 93       	push	r17
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	e0 91 01 1a 	lds	r30, 0x1A01	; 0x801a01 <__iob+0x2>
    55d2:	f0 91 02 1a 	lds	r31, 0x1A02	; 0x801a02 <__iob+0x3>
    55d6:	23 81       	ldd	r18, Z+3	; 0x03
    55d8:	21 ff       	sbrs	r18, 1
    55da:	1b c0       	rjmp	.+54     	; 0x5612 <puts+0x4c>
    55dc:	8c 01       	movw	r16, r24
    55de:	d0 e0       	ldi	r29, 0x00	; 0
    55e0:	c0 e0       	ldi	r28, 0x00	; 0
    55e2:	f8 01       	movw	r30, r16
    55e4:	81 91       	ld	r24, Z+
    55e6:	8f 01       	movw	r16, r30
    55e8:	60 91 01 1a 	lds	r22, 0x1A01	; 0x801a01 <__iob+0x2>
    55ec:	70 91 02 1a 	lds	r23, 0x1A02	; 0x801a02 <__iob+0x3>
    55f0:	db 01       	movw	r26, r22
    55f2:	18 96       	adiw	r26, 0x08	; 8
    55f4:	ed 91       	ld	r30, X+
    55f6:	fc 91       	ld	r31, X
    55f8:	19 97       	sbiw	r26, 0x09	; 9
    55fa:	88 23       	and	r24, r24
    55fc:	31 f0       	breq	.+12     	; 0x560a <puts+0x44>
    55fe:	19 95       	eicall
    5600:	89 2b       	or	r24, r25
    5602:	79 f3       	breq	.-34     	; 0x55e2 <puts+0x1c>
    5604:	df ef       	ldi	r29, 0xFF	; 255
    5606:	cf ef       	ldi	r28, 0xFF	; 255
    5608:	ec cf       	rjmp	.-40     	; 0x55e2 <puts+0x1c>
    560a:	8a e0       	ldi	r24, 0x0A	; 10
    560c:	19 95       	eicall
    560e:	89 2b       	or	r24, r25
    5610:	19 f0       	breq	.+6      	; 0x5618 <puts+0x52>
    5612:	8f ef       	ldi	r24, 0xFF	; 255
    5614:	9f ef       	ldi	r25, 0xFF	; 255
    5616:	02 c0       	rjmp	.+4      	; 0x561c <puts+0x56>
    5618:	8d 2f       	mov	r24, r29
    561a:	9c 2f       	mov	r25, r28
    561c:	df 91       	pop	r29
    561e:	cf 91       	pop	r28
    5620:	1f 91       	pop	r17
    5622:	0f 91       	pop	r16
    5624:	08 95       	ret

00005626 <sprintf>:
    5626:	0f 93       	push	r16
    5628:	1f 93       	push	r17
    562a:	cf 93       	push	r28
    562c:	df 93       	push	r29
    562e:	cd b7       	in	r28, 0x3d	; 61
    5630:	de b7       	in	r29, 0x3e	; 62
    5632:	2e 97       	sbiw	r28, 0x0e	; 14
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	de bf       	out	0x3e, r29	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	cd bf       	out	0x3d, r28	; 61
    563e:	0e 89       	ldd	r16, Y+22	; 0x16
    5640:	1f 89       	ldd	r17, Y+23	; 0x17
    5642:	86 e0       	ldi	r24, 0x06	; 6
    5644:	8c 83       	std	Y+4, r24	; 0x04
    5646:	1a 83       	std	Y+2, r17	; 0x02
    5648:	09 83       	std	Y+1, r16	; 0x01
    564a:	8f ef       	ldi	r24, 0xFF	; 255
    564c:	9f e7       	ldi	r25, 0x7F	; 127
    564e:	9e 83       	std	Y+6, r25	; 0x06
    5650:	8d 83       	std	Y+5, r24	; 0x05
    5652:	ae 01       	movw	r20, r28
    5654:	46 5e       	subi	r20, 0xE6	; 230
    5656:	5f 4f       	sbci	r21, 0xFF	; 255
    5658:	68 8d       	ldd	r22, Y+24	; 0x18
    565a:	79 8d       	ldd	r23, Y+25	; 0x19
    565c:	ce 01       	movw	r24, r28
    565e:	01 96       	adiw	r24, 0x01	; 1
    5660:	10 d0       	rcall	.+32     	; 0x5682 <vfprintf>
    5662:	ef 81       	ldd	r30, Y+7	; 0x07
    5664:	f8 85       	ldd	r31, Y+8	; 0x08
    5666:	e0 0f       	add	r30, r16
    5668:	f1 1f       	adc	r31, r17
    566a:	10 82       	st	Z, r1
    566c:	2e 96       	adiw	r28, 0x0e	; 14
    566e:	0f b6       	in	r0, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	de bf       	out	0x3e, r29	; 62
    5674:	0f be       	out	0x3f, r0	; 63
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	df 91       	pop	r29
    567a:	cf 91       	pop	r28
    567c:	1f 91       	pop	r17
    567e:	0f 91       	pop	r16
    5680:	08 95       	ret

00005682 <vfprintf>:
    5682:	2f 92       	push	r2
    5684:	3f 92       	push	r3
    5686:	4f 92       	push	r4
    5688:	5f 92       	push	r5
    568a:	6f 92       	push	r6
    568c:	7f 92       	push	r7
    568e:	8f 92       	push	r8
    5690:	9f 92       	push	r9
    5692:	af 92       	push	r10
    5694:	bf 92       	push	r11
    5696:	cf 92       	push	r12
    5698:	df 92       	push	r13
    569a:	ef 92       	push	r14
    569c:	ff 92       	push	r15
    569e:	0f 93       	push	r16
    56a0:	1f 93       	push	r17
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	cd b7       	in	r28, 0x3d	; 61
    56a8:	de b7       	in	r29, 0x3e	; 62
    56aa:	2b 97       	sbiw	r28, 0x0b	; 11
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	6c 01       	movw	r12, r24
    56b8:	7b 01       	movw	r14, r22
    56ba:	8a 01       	movw	r16, r20
    56bc:	fc 01       	movw	r30, r24
    56be:	17 82       	std	Z+7, r1	; 0x07
    56c0:	16 82       	std	Z+6, r1	; 0x06
    56c2:	83 81       	ldd	r24, Z+3	; 0x03
    56c4:	81 ff       	sbrs	r24, 1
    56c6:	bf c1       	rjmp	.+894    	; 0x5a46 <vfprintf+0x3c4>
    56c8:	ce 01       	movw	r24, r28
    56ca:	01 96       	adiw	r24, 0x01	; 1
    56cc:	3c 01       	movw	r6, r24
    56ce:	f6 01       	movw	r30, r12
    56d0:	93 81       	ldd	r25, Z+3	; 0x03
    56d2:	f7 01       	movw	r30, r14
    56d4:	93 fd       	sbrc	r25, 3
    56d6:	85 91       	lpm	r24, Z+
    56d8:	93 ff       	sbrs	r25, 3
    56da:	81 91       	ld	r24, Z+
    56dc:	7f 01       	movw	r14, r30
    56de:	88 23       	and	r24, r24
    56e0:	09 f4       	brne	.+2      	; 0x56e4 <vfprintf+0x62>
    56e2:	ad c1       	rjmp	.+858    	; 0x5a3e <vfprintf+0x3bc>
    56e4:	85 32       	cpi	r24, 0x25	; 37
    56e6:	39 f4       	brne	.+14     	; 0x56f6 <vfprintf+0x74>
    56e8:	93 fd       	sbrc	r25, 3
    56ea:	85 91       	lpm	r24, Z+
    56ec:	93 ff       	sbrs	r25, 3
    56ee:	81 91       	ld	r24, Z+
    56f0:	7f 01       	movw	r14, r30
    56f2:	85 32       	cpi	r24, 0x25	; 37
    56f4:	21 f4       	brne	.+8      	; 0x56fe <vfprintf+0x7c>
    56f6:	b6 01       	movw	r22, r12
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	d6 d1       	rcall	.+940    	; 0x5aa8 <fputc>
    56fc:	e8 cf       	rjmp	.-48     	; 0x56ce <vfprintf+0x4c>
    56fe:	91 2c       	mov	r9, r1
    5700:	21 2c       	mov	r2, r1
    5702:	31 2c       	mov	r3, r1
    5704:	ff e1       	ldi	r31, 0x1F	; 31
    5706:	f3 15       	cp	r31, r3
    5708:	d8 f0       	brcs	.+54     	; 0x5740 <vfprintf+0xbe>
    570a:	8b 32       	cpi	r24, 0x2B	; 43
    570c:	79 f0       	breq	.+30     	; 0x572c <vfprintf+0xaa>
    570e:	38 f4       	brcc	.+14     	; 0x571e <vfprintf+0x9c>
    5710:	80 32       	cpi	r24, 0x20	; 32
    5712:	79 f0       	breq	.+30     	; 0x5732 <vfprintf+0xb0>
    5714:	83 32       	cpi	r24, 0x23	; 35
    5716:	a1 f4       	brne	.+40     	; 0x5740 <vfprintf+0xbe>
    5718:	23 2d       	mov	r18, r3
    571a:	20 61       	ori	r18, 0x10	; 16
    571c:	1d c0       	rjmp	.+58     	; 0x5758 <vfprintf+0xd6>
    571e:	8d 32       	cpi	r24, 0x2D	; 45
    5720:	61 f0       	breq	.+24     	; 0x573a <vfprintf+0xb8>
    5722:	80 33       	cpi	r24, 0x30	; 48
    5724:	69 f4       	brne	.+26     	; 0x5740 <vfprintf+0xbe>
    5726:	23 2d       	mov	r18, r3
    5728:	21 60       	ori	r18, 0x01	; 1
    572a:	16 c0       	rjmp	.+44     	; 0x5758 <vfprintf+0xd6>
    572c:	83 2d       	mov	r24, r3
    572e:	82 60       	ori	r24, 0x02	; 2
    5730:	38 2e       	mov	r3, r24
    5732:	e3 2d       	mov	r30, r3
    5734:	e4 60       	ori	r30, 0x04	; 4
    5736:	3e 2e       	mov	r3, r30
    5738:	2a c0       	rjmp	.+84     	; 0x578e <vfprintf+0x10c>
    573a:	f3 2d       	mov	r31, r3
    573c:	f8 60       	ori	r31, 0x08	; 8
    573e:	1d c0       	rjmp	.+58     	; 0x577a <vfprintf+0xf8>
    5740:	37 fc       	sbrc	r3, 7
    5742:	2d c0       	rjmp	.+90     	; 0x579e <vfprintf+0x11c>
    5744:	20 ed       	ldi	r18, 0xD0	; 208
    5746:	28 0f       	add	r18, r24
    5748:	2a 30       	cpi	r18, 0x0A	; 10
    574a:	40 f0       	brcs	.+16     	; 0x575c <vfprintf+0xda>
    574c:	8e 32       	cpi	r24, 0x2E	; 46
    574e:	b9 f4       	brne	.+46     	; 0x577e <vfprintf+0xfc>
    5750:	36 fc       	sbrc	r3, 6
    5752:	75 c1       	rjmp	.+746    	; 0x5a3e <vfprintf+0x3bc>
    5754:	23 2d       	mov	r18, r3
    5756:	20 64       	ori	r18, 0x40	; 64
    5758:	32 2e       	mov	r3, r18
    575a:	19 c0       	rjmp	.+50     	; 0x578e <vfprintf+0x10c>
    575c:	36 fe       	sbrs	r3, 6
    575e:	06 c0       	rjmp	.+12     	; 0x576c <vfprintf+0xea>
    5760:	8a e0       	ldi	r24, 0x0A	; 10
    5762:	98 9e       	mul	r9, r24
    5764:	20 0d       	add	r18, r0
    5766:	11 24       	eor	r1, r1
    5768:	92 2e       	mov	r9, r18
    576a:	11 c0       	rjmp	.+34     	; 0x578e <vfprintf+0x10c>
    576c:	ea e0       	ldi	r30, 0x0A	; 10
    576e:	2e 9e       	mul	r2, r30
    5770:	20 0d       	add	r18, r0
    5772:	11 24       	eor	r1, r1
    5774:	22 2e       	mov	r2, r18
    5776:	f3 2d       	mov	r31, r3
    5778:	f0 62       	ori	r31, 0x20	; 32
    577a:	3f 2e       	mov	r3, r31
    577c:	08 c0       	rjmp	.+16     	; 0x578e <vfprintf+0x10c>
    577e:	8c 36       	cpi	r24, 0x6C	; 108
    5780:	21 f4       	brne	.+8      	; 0x578a <vfprintf+0x108>
    5782:	83 2d       	mov	r24, r3
    5784:	80 68       	ori	r24, 0x80	; 128
    5786:	38 2e       	mov	r3, r24
    5788:	02 c0       	rjmp	.+4      	; 0x578e <vfprintf+0x10c>
    578a:	88 36       	cpi	r24, 0x68	; 104
    578c:	41 f4       	brne	.+16     	; 0x579e <vfprintf+0x11c>
    578e:	f7 01       	movw	r30, r14
    5790:	93 fd       	sbrc	r25, 3
    5792:	85 91       	lpm	r24, Z+
    5794:	93 ff       	sbrs	r25, 3
    5796:	81 91       	ld	r24, Z+
    5798:	7f 01       	movw	r14, r30
    579a:	81 11       	cpse	r24, r1
    579c:	b3 cf       	rjmp	.-154    	; 0x5704 <vfprintf+0x82>
    579e:	98 2f       	mov	r25, r24
    57a0:	9f 7d       	andi	r25, 0xDF	; 223
    57a2:	95 54       	subi	r25, 0x45	; 69
    57a4:	93 30       	cpi	r25, 0x03	; 3
    57a6:	28 f4       	brcc	.+10     	; 0x57b2 <vfprintf+0x130>
    57a8:	0c 5f       	subi	r16, 0xFC	; 252
    57aa:	1f 4f       	sbci	r17, 0xFF	; 255
    57ac:	9f e3       	ldi	r25, 0x3F	; 63
    57ae:	99 83       	std	Y+1, r25	; 0x01
    57b0:	0d c0       	rjmp	.+26     	; 0x57cc <vfprintf+0x14a>
    57b2:	83 36       	cpi	r24, 0x63	; 99
    57b4:	31 f0       	breq	.+12     	; 0x57c2 <vfprintf+0x140>
    57b6:	83 37       	cpi	r24, 0x73	; 115
    57b8:	71 f0       	breq	.+28     	; 0x57d6 <vfprintf+0x154>
    57ba:	83 35       	cpi	r24, 0x53	; 83
    57bc:	09 f0       	breq	.+2      	; 0x57c0 <vfprintf+0x13e>
    57be:	55 c0       	rjmp	.+170    	; 0x586a <vfprintf+0x1e8>
    57c0:	20 c0       	rjmp	.+64     	; 0x5802 <vfprintf+0x180>
    57c2:	f8 01       	movw	r30, r16
    57c4:	80 81       	ld	r24, Z
    57c6:	89 83       	std	Y+1, r24	; 0x01
    57c8:	0e 5f       	subi	r16, 0xFE	; 254
    57ca:	1f 4f       	sbci	r17, 0xFF	; 255
    57cc:	88 24       	eor	r8, r8
    57ce:	83 94       	inc	r8
    57d0:	91 2c       	mov	r9, r1
    57d2:	53 01       	movw	r10, r6
    57d4:	12 c0       	rjmp	.+36     	; 0x57fa <vfprintf+0x178>
    57d6:	28 01       	movw	r4, r16
    57d8:	f2 e0       	ldi	r31, 0x02	; 2
    57da:	4f 0e       	add	r4, r31
    57dc:	51 1c       	adc	r5, r1
    57de:	f8 01       	movw	r30, r16
    57e0:	a0 80       	ld	r10, Z
    57e2:	b1 80       	ldd	r11, Z+1	; 0x01
    57e4:	36 fe       	sbrs	r3, 6
    57e6:	03 c0       	rjmp	.+6      	; 0x57ee <vfprintf+0x16c>
    57e8:	69 2d       	mov	r22, r9
    57ea:	70 e0       	ldi	r23, 0x00	; 0
    57ec:	02 c0       	rjmp	.+4      	; 0x57f2 <vfprintf+0x170>
    57ee:	6f ef       	ldi	r22, 0xFF	; 255
    57f0:	7f ef       	ldi	r23, 0xFF	; 255
    57f2:	c5 01       	movw	r24, r10
    57f4:	4e d1       	rcall	.+668    	; 0x5a92 <strnlen>
    57f6:	4c 01       	movw	r8, r24
    57f8:	82 01       	movw	r16, r4
    57fa:	f3 2d       	mov	r31, r3
    57fc:	ff 77       	andi	r31, 0x7F	; 127
    57fe:	3f 2e       	mov	r3, r31
    5800:	15 c0       	rjmp	.+42     	; 0x582c <vfprintf+0x1aa>
    5802:	28 01       	movw	r4, r16
    5804:	22 e0       	ldi	r18, 0x02	; 2
    5806:	42 0e       	add	r4, r18
    5808:	51 1c       	adc	r5, r1
    580a:	f8 01       	movw	r30, r16
    580c:	a0 80       	ld	r10, Z
    580e:	b1 80       	ldd	r11, Z+1	; 0x01
    5810:	36 fe       	sbrs	r3, 6
    5812:	03 c0       	rjmp	.+6      	; 0x581a <vfprintf+0x198>
    5814:	69 2d       	mov	r22, r9
    5816:	70 e0       	ldi	r23, 0x00	; 0
    5818:	02 c0       	rjmp	.+4      	; 0x581e <vfprintf+0x19c>
    581a:	6f ef       	ldi	r22, 0xFF	; 255
    581c:	7f ef       	ldi	r23, 0xFF	; 255
    581e:	c5 01       	movw	r24, r10
    5820:	2d d1       	rcall	.+602    	; 0x5a7c <strnlen_P>
    5822:	4c 01       	movw	r8, r24
    5824:	f3 2d       	mov	r31, r3
    5826:	f0 68       	ori	r31, 0x80	; 128
    5828:	3f 2e       	mov	r3, r31
    582a:	82 01       	movw	r16, r4
    582c:	33 fc       	sbrc	r3, 3
    582e:	19 c0       	rjmp	.+50     	; 0x5862 <vfprintf+0x1e0>
    5830:	82 2d       	mov	r24, r2
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	88 16       	cp	r8, r24
    5836:	99 06       	cpc	r9, r25
    5838:	a0 f4       	brcc	.+40     	; 0x5862 <vfprintf+0x1e0>
    583a:	b6 01       	movw	r22, r12
    583c:	80 e2       	ldi	r24, 0x20	; 32
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	33 d1       	rcall	.+614    	; 0x5aa8 <fputc>
    5842:	2a 94       	dec	r2
    5844:	f5 cf       	rjmp	.-22     	; 0x5830 <vfprintf+0x1ae>
    5846:	f5 01       	movw	r30, r10
    5848:	37 fc       	sbrc	r3, 7
    584a:	85 91       	lpm	r24, Z+
    584c:	37 fe       	sbrs	r3, 7
    584e:	81 91       	ld	r24, Z+
    5850:	5f 01       	movw	r10, r30
    5852:	b6 01       	movw	r22, r12
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	28 d1       	rcall	.+592    	; 0x5aa8 <fputc>
    5858:	21 10       	cpse	r2, r1
    585a:	2a 94       	dec	r2
    585c:	21 e0       	ldi	r18, 0x01	; 1
    585e:	82 1a       	sub	r8, r18
    5860:	91 08       	sbc	r9, r1
    5862:	81 14       	cp	r8, r1
    5864:	91 04       	cpc	r9, r1
    5866:	79 f7       	brne	.-34     	; 0x5846 <vfprintf+0x1c4>
    5868:	e1 c0       	rjmp	.+450    	; 0x5a2c <vfprintf+0x3aa>
    586a:	84 36       	cpi	r24, 0x64	; 100
    586c:	11 f0       	breq	.+4      	; 0x5872 <vfprintf+0x1f0>
    586e:	89 36       	cpi	r24, 0x69	; 105
    5870:	39 f5       	brne	.+78     	; 0x58c0 <vfprintf+0x23e>
    5872:	f8 01       	movw	r30, r16
    5874:	37 fe       	sbrs	r3, 7
    5876:	07 c0       	rjmp	.+14     	; 0x5886 <vfprintf+0x204>
    5878:	60 81       	ld	r22, Z
    587a:	71 81       	ldd	r23, Z+1	; 0x01
    587c:	82 81       	ldd	r24, Z+2	; 0x02
    587e:	93 81       	ldd	r25, Z+3	; 0x03
    5880:	0c 5f       	subi	r16, 0xFC	; 252
    5882:	1f 4f       	sbci	r17, 0xFF	; 255
    5884:	08 c0       	rjmp	.+16     	; 0x5896 <vfprintf+0x214>
    5886:	60 81       	ld	r22, Z
    5888:	71 81       	ldd	r23, Z+1	; 0x01
    588a:	07 2e       	mov	r0, r23
    588c:	00 0c       	add	r0, r0
    588e:	88 0b       	sbc	r24, r24
    5890:	99 0b       	sbc	r25, r25
    5892:	0e 5f       	subi	r16, 0xFE	; 254
    5894:	1f 4f       	sbci	r17, 0xFF	; 255
    5896:	f3 2d       	mov	r31, r3
    5898:	ff 76       	andi	r31, 0x6F	; 111
    589a:	3f 2e       	mov	r3, r31
    589c:	97 ff       	sbrs	r25, 7
    589e:	09 c0       	rjmp	.+18     	; 0x58b2 <vfprintf+0x230>
    58a0:	90 95       	com	r25
    58a2:	80 95       	com	r24
    58a4:	70 95       	com	r23
    58a6:	61 95       	neg	r22
    58a8:	7f 4f       	sbci	r23, 0xFF	; 255
    58aa:	8f 4f       	sbci	r24, 0xFF	; 255
    58ac:	9f 4f       	sbci	r25, 0xFF	; 255
    58ae:	f0 68       	ori	r31, 0x80	; 128
    58b0:	3f 2e       	mov	r3, r31
    58b2:	2a e0       	ldi	r18, 0x0A	; 10
    58b4:	30 e0       	ldi	r19, 0x00	; 0
    58b6:	a3 01       	movw	r20, r6
    58b8:	33 d1       	rcall	.+614    	; 0x5b20 <__ultoa_invert>
    58ba:	88 2e       	mov	r8, r24
    58bc:	86 18       	sub	r8, r6
    58be:	44 c0       	rjmp	.+136    	; 0x5948 <vfprintf+0x2c6>
    58c0:	85 37       	cpi	r24, 0x75	; 117
    58c2:	31 f4       	brne	.+12     	; 0x58d0 <vfprintf+0x24e>
    58c4:	23 2d       	mov	r18, r3
    58c6:	2f 7e       	andi	r18, 0xEF	; 239
    58c8:	b2 2e       	mov	r11, r18
    58ca:	2a e0       	ldi	r18, 0x0A	; 10
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	25 c0       	rjmp	.+74     	; 0x591a <vfprintf+0x298>
    58d0:	93 2d       	mov	r25, r3
    58d2:	99 7f       	andi	r25, 0xF9	; 249
    58d4:	b9 2e       	mov	r11, r25
    58d6:	8f 36       	cpi	r24, 0x6F	; 111
    58d8:	c1 f0       	breq	.+48     	; 0x590a <vfprintf+0x288>
    58da:	18 f4       	brcc	.+6      	; 0x58e2 <vfprintf+0x260>
    58dc:	88 35       	cpi	r24, 0x58	; 88
    58de:	79 f0       	breq	.+30     	; 0x58fe <vfprintf+0x27c>
    58e0:	ae c0       	rjmp	.+348    	; 0x5a3e <vfprintf+0x3bc>
    58e2:	80 37       	cpi	r24, 0x70	; 112
    58e4:	19 f0       	breq	.+6      	; 0x58ec <vfprintf+0x26a>
    58e6:	88 37       	cpi	r24, 0x78	; 120
    58e8:	21 f0       	breq	.+8      	; 0x58f2 <vfprintf+0x270>
    58ea:	a9 c0       	rjmp	.+338    	; 0x5a3e <vfprintf+0x3bc>
    58ec:	e9 2f       	mov	r30, r25
    58ee:	e0 61       	ori	r30, 0x10	; 16
    58f0:	be 2e       	mov	r11, r30
    58f2:	b4 fe       	sbrs	r11, 4
    58f4:	0d c0       	rjmp	.+26     	; 0x5910 <vfprintf+0x28e>
    58f6:	fb 2d       	mov	r31, r11
    58f8:	f4 60       	ori	r31, 0x04	; 4
    58fa:	bf 2e       	mov	r11, r31
    58fc:	09 c0       	rjmp	.+18     	; 0x5910 <vfprintf+0x28e>
    58fe:	34 fe       	sbrs	r3, 4
    5900:	0a c0       	rjmp	.+20     	; 0x5916 <vfprintf+0x294>
    5902:	29 2f       	mov	r18, r25
    5904:	26 60       	ori	r18, 0x06	; 6
    5906:	b2 2e       	mov	r11, r18
    5908:	06 c0       	rjmp	.+12     	; 0x5916 <vfprintf+0x294>
    590a:	28 e0       	ldi	r18, 0x08	; 8
    590c:	30 e0       	ldi	r19, 0x00	; 0
    590e:	05 c0       	rjmp	.+10     	; 0x591a <vfprintf+0x298>
    5910:	20 e1       	ldi	r18, 0x10	; 16
    5912:	30 e0       	ldi	r19, 0x00	; 0
    5914:	02 c0       	rjmp	.+4      	; 0x591a <vfprintf+0x298>
    5916:	20 e1       	ldi	r18, 0x10	; 16
    5918:	32 e0       	ldi	r19, 0x02	; 2
    591a:	f8 01       	movw	r30, r16
    591c:	b7 fe       	sbrs	r11, 7
    591e:	07 c0       	rjmp	.+14     	; 0x592e <vfprintf+0x2ac>
    5920:	60 81       	ld	r22, Z
    5922:	71 81       	ldd	r23, Z+1	; 0x01
    5924:	82 81       	ldd	r24, Z+2	; 0x02
    5926:	93 81       	ldd	r25, Z+3	; 0x03
    5928:	0c 5f       	subi	r16, 0xFC	; 252
    592a:	1f 4f       	sbci	r17, 0xFF	; 255
    592c:	06 c0       	rjmp	.+12     	; 0x593a <vfprintf+0x2b8>
    592e:	60 81       	ld	r22, Z
    5930:	71 81       	ldd	r23, Z+1	; 0x01
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	90 e0       	ldi	r25, 0x00	; 0
    5936:	0e 5f       	subi	r16, 0xFE	; 254
    5938:	1f 4f       	sbci	r17, 0xFF	; 255
    593a:	a3 01       	movw	r20, r6
    593c:	f1 d0       	rcall	.+482    	; 0x5b20 <__ultoa_invert>
    593e:	88 2e       	mov	r8, r24
    5940:	86 18       	sub	r8, r6
    5942:	fb 2d       	mov	r31, r11
    5944:	ff 77       	andi	r31, 0x7F	; 127
    5946:	3f 2e       	mov	r3, r31
    5948:	36 fe       	sbrs	r3, 6
    594a:	0d c0       	rjmp	.+26     	; 0x5966 <vfprintf+0x2e4>
    594c:	23 2d       	mov	r18, r3
    594e:	2e 7f       	andi	r18, 0xFE	; 254
    5950:	a2 2e       	mov	r10, r18
    5952:	89 14       	cp	r8, r9
    5954:	58 f4       	brcc	.+22     	; 0x596c <vfprintf+0x2ea>
    5956:	34 fe       	sbrs	r3, 4
    5958:	0b c0       	rjmp	.+22     	; 0x5970 <vfprintf+0x2ee>
    595a:	32 fc       	sbrc	r3, 2
    595c:	09 c0       	rjmp	.+18     	; 0x5970 <vfprintf+0x2ee>
    595e:	83 2d       	mov	r24, r3
    5960:	8e 7e       	andi	r24, 0xEE	; 238
    5962:	a8 2e       	mov	r10, r24
    5964:	05 c0       	rjmp	.+10     	; 0x5970 <vfprintf+0x2ee>
    5966:	b8 2c       	mov	r11, r8
    5968:	a3 2c       	mov	r10, r3
    596a:	03 c0       	rjmp	.+6      	; 0x5972 <vfprintf+0x2f0>
    596c:	b8 2c       	mov	r11, r8
    596e:	01 c0       	rjmp	.+2      	; 0x5972 <vfprintf+0x2f0>
    5970:	b9 2c       	mov	r11, r9
    5972:	a4 fe       	sbrs	r10, 4
    5974:	0f c0       	rjmp	.+30     	; 0x5994 <vfprintf+0x312>
    5976:	fe 01       	movw	r30, r28
    5978:	e8 0d       	add	r30, r8
    597a:	f1 1d       	adc	r31, r1
    597c:	80 81       	ld	r24, Z
    597e:	80 33       	cpi	r24, 0x30	; 48
    5980:	21 f4       	brne	.+8      	; 0x598a <vfprintf+0x308>
    5982:	9a 2d       	mov	r25, r10
    5984:	99 7e       	andi	r25, 0xE9	; 233
    5986:	a9 2e       	mov	r10, r25
    5988:	09 c0       	rjmp	.+18     	; 0x599c <vfprintf+0x31a>
    598a:	a2 fe       	sbrs	r10, 2
    598c:	06 c0       	rjmp	.+12     	; 0x599a <vfprintf+0x318>
    598e:	b3 94       	inc	r11
    5990:	b3 94       	inc	r11
    5992:	04 c0       	rjmp	.+8      	; 0x599c <vfprintf+0x31a>
    5994:	8a 2d       	mov	r24, r10
    5996:	86 78       	andi	r24, 0x86	; 134
    5998:	09 f0       	breq	.+2      	; 0x599c <vfprintf+0x31a>
    599a:	b3 94       	inc	r11
    599c:	a3 fc       	sbrc	r10, 3
    599e:	10 c0       	rjmp	.+32     	; 0x59c0 <vfprintf+0x33e>
    59a0:	a0 fe       	sbrs	r10, 0
    59a2:	06 c0       	rjmp	.+12     	; 0x59b0 <vfprintf+0x32e>
    59a4:	b2 14       	cp	r11, r2
    59a6:	80 f4       	brcc	.+32     	; 0x59c8 <vfprintf+0x346>
    59a8:	28 0c       	add	r2, r8
    59aa:	92 2c       	mov	r9, r2
    59ac:	9b 18       	sub	r9, r11
    59ae:	0d c0       	rjmp	.+26     	; 0x59ca <vfprintf+0x348>
    59b0:	b2 14       	cp	r11, r2
    59b2:	58 f4       	brcc	.+22     	; 0x59ca <vfprintf+0x348>
    59b4:	b6 01       	movw	r22, r12
    59b6:	80 e2       	ldi	r24, 0x20	; 32
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	76 d0       	rcall	.+236    	; 0x5aa8 <fputc>
    59bc:	b3 94       	inc	r11
    59be:	f8 cf       	rjmp	.-16     	; 0x59b0 <vfprintf+0x32e>
    59c0:	b2 14       	cp	r11, r2
    59c2:	18 f4       	brcc	.+6      	; 0x59ca <vfprintf+0x348>
    59c4:	2b 18       	sub	r2, r11
    59c6:	02 c0       	rjmp	.+4      	; 0x59cc <vfprintf+0x34a>
    59c8:	98 2c       	mov	r9, r8
    59ca:	21 2c       	mov	r2, r1
    59cc:	a4 fe       	sbrs	r10, 4
    59ce:	0f c0       	rjmp	.+30     	; 0x59ee <vfprintf+0x36c>
    59d0:	b6 01       	movw	r22, r12
    59d2:	80 e3       	ldi	r24, 0x30	; 48
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	68 d0       	rcall	.+208    	; 0x5aa8 <fputc>
    59d8:	a2 fe       	sbrs	r10, 2
    59da:	16 c0       	rjmp	.+44     	; 0x5a08 <vfprintf+0x386>
    59dc:	a1 fc       	sbrc	r10, 1
    59de:	03 c0       	rjmp	.+6      	; 0x59e6 <vfprintf+0x364>
    59e0:	88 e7       	ldi	r24, 0x78	; 120
    59e2:	90 e0       	ldi	r25, 0x00	; 0
    59e4:	02 c0       	rjmp	.+4      	; 0x59ea <vfprintf+0x368>
    59e6:	88 e5       	ldi	r24, 0x58	; 88
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	b6 01       	movw	r22, r12
    59ec:	0c c0       	rjmp	.+24     	; 0x5a06 <vfprintf+0x384>
    59ee:	8a 2d       	mov	r24, r10
    59f0:	86 78       	andi	r24, 0x86	; 134
    59f2:	51 f0       	breq	.+20     	; 0x5a08 <vfprintf+0x386>
    59f4:	a1 fe       	sbrs	r10, 1
    59f6:	02 c0       	rjmp	.+4      	; 0x59fc <vfprintf+0x37a>
    59f8:	8b e2       	ldi	r24, 0x2B	; 43
    59fa:	01 c0       	rjmp	.+2      	; 0x59fe <vfprintf+0x37c>
    59fc:	80 e2       	ldi	r24, 0x20	; 32
    59fe:	a7 fc       	sbrc	r10, 7
    5a00:	8d e2       	ldi	r24, 0x2D	; 45
    5a02:	b6 01       	movw	r22, r12
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	50 d0       	rcall	.+160    	; 0x5aa8 <fputc>
    5a08:	89 14       	cp	r8, r9
    5a0a:	30 f4       	brcc	.+12     	; 0x5a18 <vfprintf+0x396>
    5a0c:	b6 01       	movw	r22, r12
    5a0e:	80 e3       	ldi	r24, 0x30	; 48
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	4a d0       	rcall	.+148    	; 0x5aa8 <fputc>
    5a14:	9a 94       	dec	r9
    5a16:	f8 cf       	rjmp	.-16     	; 0x5a08 <vfprintf+0x386>
    5a18:	8a 94       	dec	r8
    5a1a:	f3 01       	movw	r30, r6
    5a1c:	e8 0d       	add	r30, r8
    5a1e:	f1 1d       	adc	r31, r1
    5a20:	80 81       	ld	r24, Z
    5a22:	b6 01       	movw	r22, r12
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	40 d0       	rcall	.+128    	; 0x5aa8 <fputc>
    5a28:	81 10       	cpse	r8, r1
    5a2a:	f6 cf       	rjmp	.-20     	; 0x5a18 <vfprintf+0x396>
    5a2c:	22 20       	and	r2, r2
    5a2e:	09 f4       	brne	.+2      	; 0x5a32 <vfprintf+0x3b0>
    5a30:	4e ce       	rjmp	.-868    	; 0x56ce <vfprintf+0x4c>
    5a32:	b6 01       	movw	r22, r12
    5a34:	80 e2       	ldi	r24, 0x20	; 32
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	37 d0       	rcall	.+110    	; 0x5aa8 <fputc>
    5a3a:	2a 94       	dec	r2
    5a3c:	f7 cf       	rjmp	.-18     	; 0x5a2c <vfprintf+0x3aa>
    5a3e:	f6 01       	movw	r30, r12
    5a40:	86 81       	ldd	r24, Z+6	; 0x06
    5a42:	97 81       	ldd	r25, Z+7	; 0x07
    5a44:	02 c0       	rjmp	.+4      	; 0x5a4a <vfprintf+0x3c8>
    5a46:	8f ef       	ldi	r24, 0xFF	; 255
    5a48:	9f ef       	ldi	r25, 0xFF	; 255
    5a4a:	2b 96       	adiw	r28, 0x0b	; 11
    5a4c:	0f b6       	in	r0, 0x3f	; 63
    5a4e:	f8 94       	cli
    5a50:	de bf       	out	0x3e, r29	; 62
    5a52:	0f be       	out	0x3f, r0	; 63
    5a54:	cd bf       	out	0x3d, r28	; 61
    5a56:	df 91       	pop	r29
    5a58:	cf 91       	pop	r28
    5a5a:	1f 91       	pop	r17
    5a5c:	0f 91       	pop	r16
    5a5e:	ff 90       	pop	r15
    5a60:	ef 90       	pop	r14
    5a62:	df 90       	pop	r13
    5a64:	cf 90       	pop	r12
    5a66:	bf 90       	pop	r11
    5a68:	af 90       	pop	r10
    5a6a:	9f 90       	pop	r9
    5a6c:	8f 90       	pop	r8
    5a6e:	7f 90       	pop	r7
    5a70:	6f 90       	pop	r6
    5a72:	5f 90       	pop	r5
    5a74:	4f 90       	pop	r4
    5a76:	3f 90       	pop	r3
    5a78:	2f 90       	pop	r2
    5a7a:	08 95       	ret

00005a7c <strnlen_P>:
    5a7c:	fc 01       	movw	r30, r24
    5a7e:	05 90       	lpm	r0, Z+
    5a80:	61 50       	subi	r22, 0x01	; 1
    5a82:	70 40       	sbci	r23, 0x00	; 0
    5a84:	01 10       	cpse	r0, r1
    5a86:	d8 f7       	brcc	.-10     	; 0x5a7e <strnlen_P+0x2>
    5a88:	80 95       	com	r24
    5a8a:	90 95       	com	r25
    5a8c:	8e 0f       	add	r24, r30
    5a8e:	9f 1f       	adc	r25, r31
    5a90:	08 95       	ret

00005a92 <strnlen>:
    5a92:	fc 01       	movw	r30, r24
    5a94:	61 50       	subi	r22, 0x01	; 1
    5a96:	70 40       	sbci	r23, 0x00	; 0
    5a98:	01 90       	ld	r0, Z+
    5a9a:	01 10       	cpse	r0, r1
    5a9c:	d8 f7       	brcc	.-10     	; 0x5a94 <strnlen+0x2>
    5a9e:	80 95       	com	r24
    5aa0:	90 95       	com	r25
    5aa2:	8e 0f       	add	r24, r30
    5aa4:	9f 1f       	adc	r25, r31
    5aa6:	08 95       	ret

00005aa8 <fputc>:
    5aa8:	0f 93       	push	r16
    5aaa:	1f 93       	push	r17
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	fb 01       	movw	r30, r22
    5ab2:	23 81       	ldd	r18, Z+3	; 0x03
    5ab4:	21 fd       	sbrc	r18, 1
    5ab6:	03 c0       	rjmp	.+6      	; 0x5abe <fputc+0x16>
    5ab8:	8f ef       	ldi	r24, 0xFF	; 255
    5aba:	9f ef       	ldi	r25, 0xFF	; 255
    5abc:	2c c0       	rjmp	.+88     	; 0x5b16 <fputc+0x6e>
    5abe:	22 ff       	sbrs	r18, 2
    5ac0:	16 c0       	rjmp	.+44     	; 0x5aee <fputc+0x46>
    5ac2:	46 81       	ldd	r20, Z+6	; 0x06
    5ac4:	57 81       	ldd	r21, Z+7	; 0x07
    5ac6:	24 81       	ldd	r18, Z+4	; 0x04
    5ac8:	35 81       	ldd	r19, Z+5	; 0x05
    5aca:	42 17       	cp	r20, r18
    5acc:	53 07       	cpc	r21, r19
    5ace:	44 f4       	brge	.+16     	; 0x5ae0 <fputc+0x38>
    5ad0:	a0 81       	ld	r26, Z
    5ad2:	b1 81       	ldd	r27, Z+1	; 0x01
    5ad4:	9d 01       	movw	r18, r26
    5ad6:	2f 5f       	subi	r18, 0xFF	; 255
    5ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    5ada:	31 83       	std	Z+1, r19	; 0x01
    5adc:	20 83       	st	Z, r18
    5ade:	8c 93       	st	X, r24
    5ae0:	26 81       	ldd	r18, Z+6	; 0x06
    5ae2:	37 81       	ldd	r19, Z+7	; 0x07
    5ae4:	2f 5f       	subi	r18, 0xFF	; 255
    5ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ae8:	37 83       	std	Z+7, r19	; 0x07
    5aea:	26 83       	std	Z+6, r18	; 0x06
    5aec:	14 c0       	rjmp	.+40     	; 0x5b16 <fputc+0x6e>
    5aee:	8b 01       	movw	r16, r22
    5af0:	ec 01       	movw	r28, r24
    5af2:	fb 01       	movw	r30, r22
    5af4:	00 84       	ldd	r0, Z+8	; 0x08
    5af6:	f1 85       	ldd	r31, Z+9	; 0x09
    5af8:	e0 2d       	mov	r30, r0
    5afa:	19 95       	eicall
    5afc:	89 2b       	or	r24, r25
    5afe:	e1 f6       	brne	.-72     	; 0x5ab8 <fputc+0x10>
    5b00:	d8 01       	movw	r26, r16
    5b02:	16 96       	adiw	r26, 0x06	; 6
    5b04:	8d 91       	ld	r24, X+
    5b06:	9c 91       	ld	r25, X
    5b08:	17 97       	sbiw	r26, 0x07	; 7
    5b0a:	01 96       	adiw	r24, 0x01	; 1
    5b0c:	17 96       	adiw	r26, 0x07	; 7
    5b0e:	9c 93       	st	X, r25
    5b10:	8e 93       	st	-X, r24
    5b12:	16 97       	sbiw	r26, 0x06	; 6
    5b14:	ce 01       	movw	r24, r28
    5b16:	df 91       	pop	r29
    5b18:	cf 91       	pop	r28
    5b1a:	1f 91       	pop	r17
    5b1c:	0f 91       	pop	r16
    5b1e:	08 95       	ret

00005b20 <__ultoa_invert>:
    5b20:	fa 01       	movw	r30, r20
    5b22:	aa 27       	eor	r26, r26
    5b24:	28 30       	cpi	r18, 0x08	; 8
    5b26:	51 f1       	breq	.+84     	; 0x5b7c <__ultoa_invert+0x5c>
    5b28:	20 31       	cpi	r18, 0x10	; 16
    5b2a:	81 f1       	breq	.+96     	; 0x5b8c <__ultoa_invert+0x6c>
    5b2c:	e8 94       	clt
    5b2e:	6f 93       	push	r22
    5b30:	6e 7f       	andi	r22, 0xFE	; 254
    5b32:	6e 5f       	subi	r22, 0xFE	; 254
    5b34:	7f 4f       	sbci	r23, 0xFF	; 255
    5b36:	8f 4f       	sbci	r24, 0xFF	; 255
    5b38:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3a:	af 4f       	sbci	r26, 0xFF	; 255
    5b3c:	b1 e0       	ldi	r27, 0x01	; 1
    5b3e:	3e d0       	rcall	.+124    	; 0x5bbc <__ultoa_invert+0x9c>
    5b40:	b4 e0       	ldi	r27, 0x04	; 4
    5b42:	3c d0       	rcall	.+120    	; 0x5bbc <__ultoa_invert+0x9c>
    5b44:	67 0f       	add	r22, r23
    5b46:	78 1f       	adc	r23, r24
    5b48:	89 1f       	adc	r24, r25
    5b4a:	9a 1f       	adc	r25, r26
    5b4c:	a1 1d       	adc	r26, r1
    5b4e:	68 0f       	add	r22, r24
    5b50:	79 1f       	adc	r23, r25
    5b52:	8a 1f       	adc	r24, r26
    5b54:	91 1d       	adc	r25, r1
    5b56:	a1 1d       	adc	r26, r1
    5b58:	6a 0f       	add	r22, r26
    5b5a:	71 1d       	adc	r23, r1
    5b5c:	81 1d       	adc	r24, r1
    5b5e:	91 1d       	adc	r25, r1
    5b60:	a1 1d       	adc	r26, r1
    5b62:	20 d0       	rcall	.+64     	; 0x5ba4 <__ultoa_invert+0x84>
    5b64:	09 f4       	brne	.+2      	; 0x5b68 <__ultoa_invert+0x48>
    5b66:	68 94       	set
    5b68:	3f 91       	pop	r19
    5b6a:	2a e0       	ldi	r18, 0x0A	; 10
    5b6c:	26 9f       	mul	r18, r22
    5b6e:	11 24       	eor	r1, r1
    5b70:	30 19       	sub	r19, r0
    5b72:	30 5d       	subi	r19, 0xD0	; 208
    5b74:	31 93       	st	Z+, r19
    5b76:	de f6       	brtc	.-74     	; 0x5b2e <__ultoa_invert+0xe>
    5b78:	cf 01       	movw	r24, r30
    5b7a:	08 95       	ret
    5b7c:	46 2f       	mov	r20, r22
    5b7e:	47 70       	andi	r20, 0x07	; 7
    5b80:	40 5d       	subi	r20, 0xD0	; 208
    5b82:	41 93       	st	Z+, r20
    5b84:	b3 e0       	ldi	r27, 0x03	; 3
    5b86:	0f d0       	rcall	.+30     	; 0x5ba6 <__ultoa_invert+0x86>
    5b88:	c9 f7       	brne	.-14     	; 0x5b7c <__ultoa_invert+0x5c>
    5b8a:	f6 cf       	rjmp	.-20     	; 0x5b78 <__ultoa_invert+0x58>
    5b8c:	46 2f       	mov	r20, r22
    5b8e:	4f 70       	andi	r20, 0x0F	; 15
    5b90:	40 5d       	subi	r20, 0xD0	; 208
    5b92:	4a 33       	cpi	r20, 0x3A	; 58
    5b94:	18 f0       	brcs	.+6      	; 0x5b9c <__ultoa_invert+0x7c>
    5b96:	49 5d       	subi	r20, 0xD9	; 217
    5b98:	31 fd       	sbrc	r19, 1
    5b9a:	40 52       	subi	r20, 0x20	; 32
    5b9c:	41 93       	st	Z+, r20
    5b9e:	02 d0       	rcall	.+4      	; 0x5ba4 <__ultoa_invert+0x84>
    5ba0:	a9 f7       	brne	.-22     	; 0x5b8c <__ultoa_invert+0x6c>
    5ba2:	ea cf       	rjmp	.-44     	; 0x5b78 <__ultoa_invert+0x58>
    5ba4:	b4 e0       	ldi	r27, 0x04	; 4
    5ba6:	a6 95       	lsr	r26
    5ba8:	97 95       	ror	r25
    5baa:	87 95       	ror	r24
    5bac:	77 95       	ror	r23
    5bae:	67 95       	ror	r22
    5bb0:	ba 95       	dec	r27
    5bb2:	c9 f7       	brne	.-14     	; 0x5ba6 <__ultoa_invert+0x86>
    5bb4:	00 97       	sbiw	r24, 0x00	; 0
    5bb6:	61 05       	cpc	r22, r1
    5bb8:	71 05       	cpc	r23, r1
    5bba:	08 95       	ret
    5bbc:	9b 01       	movw	r18, r22
    5bbe:	ac 01       	movw	r20, r24
    5bc0:	0a 2e       	mov	r0, r26
    5bc2:	06 94       	lsr	r0
    5bc4:	57 95       	ror	r21
    5bc6:	47 95       	ror	r20
    5bc8:	37 95       	ror	r19
    5bca:	27 95       	ror	r18
    5bcc:	ba 95       	dec	r27
    5bce:	c9 f7       	brne	.-14     	; 0x5bc2 <__ultoa_invert+0xa2>
    5bd0:	62 0f       	add	r22, r18
    5bd2:	73 1f       	adc	r23, r19
    5bd4:	84 1f       	adc	r24, r20
    5bd6:	95 1f       	adc	r25, r21
    5bd8:	a0 1d       	adc	r26, r0
    5bda:	08 95       	ret

00005bdc <_exit>:
    5bdc:	f8 94       	cli

00005bde <__stop_program>:
    5bde:	ff cf       	rjmp	.-2      	; 0x5bde <__stop_program>
