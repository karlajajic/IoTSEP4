
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  0000697e  00006a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000697e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012db  008007b0  008007b0  00006fc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cb8  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fb28  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040af  00000000  00000000  00017840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077d0  00000000  00000000  0001b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b74  00000000  00000000  000230c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048af  00000000  00000000  00025c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e196  00000000  00000000  0002a4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c80  00000000  00000000  00038679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__vector_12>
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c2       	rjmp	.+1194   	; 0x4e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d8 28 	jmp	0x51b0	; 0x51b0 <__vector_25>
      68:	0c 94 2a 29 	jmp	0x5254	; 0x5254 <__vector_26>
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <__vector_36>
      94:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <__vector_37>
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 58 2c 	jmp	0x58b0	; 0x58b0 <__vector_39>
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__vector_51>
      d0:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <__vector_52>
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__vector_54>
      dc:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <__vector_55>
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	7a 2c       	mov	r7, r10
      fa:	ea 2c       	mov	r14, r10
      fc:	ea 2c       	mov	r14, r10
      fe:	ea 2c       	mov	r14, r10
     100:	ea 2c       	mov	r14, r10
     102:	ea 2c       	mov	r14, r10
     104:	ea 2c       	mov	r14, r10
     106:	ea 2c       	mov	r14, r10
     108:	7a 2c       	mov	r7, r10
     10a:	ea 2c       	mov	r14, r10
     10c:	ea 2c       	mov	r14, r10
     10e:	ea 2c       	mov	r14, r10
     110:	ea 2c       	mov	r14, r10
     112:	ea 2c       	mov	r14, r10
     114:	ea 2c       	mov	r14, r10
     116:	ea 2c       	mov	r14, r10
     118:	7c 2c       	mov	r7, r12
     11a:	ea 2c       	mov	r14, r10
     11c:	ea 2c       	mov	r14, r10
     11e:	ea 2c       	mov	r14, r10
     120:	ea 2c       	mov	r14, r10
     122:	ea 2c       	mov	r14, r10
     124:	ea 2c       	mov	r14, r10
     126:	ea 2c       	mov	r14, r10
     128:	ea 2c       	mov	r14, r10
     12a:	ea 2c       	mov	r14, r10
     12c:	ea 2c       	mov	r14, r10
     12e:	ea 2c       	mov	r14, r10
     130:	ea 2c       	mov	r14, r10
     132:	ea 2c       	mov	r14, r10
     134:	ea 2c       	mov	r14, r10
     136:	ea 2c       	mov	r14, r10
     138:	7c 2c       	mov	r7, r12
     13a:	ea 2c       	mov	r14, r10
     13c:	ea 2c       	mov	r14, r10
     13e:	ea 2c       	mov	r14, r10
     140:	ea 2c       	mov	r14, r10
     142:	ea 2c       	mov	r14, r10
     144:	ea 2c       	mov	r14, r10
     146:	ea 2c       	mov	r14, r10
     148:	ea 2c       	mov	r14, r10
     14a:	ea 2c       	mov	r14, r10
     14c:	ea 2c       	mov	r14, r10
     14e:	ea 2c       	mov	r14, r10
     150:	ea 2c       	mov	r14, r10
     152:	ea 2c       	mov	r14, r10
     154:	ea 2c       	mov	r14, r10
     156:	ea 2c       	mov	r14, r10
     158:	e6 2c       	mov	r14, r6
     15a:	ea 2c       	mov	r14, r10
     15c:	ea 2c       	mov	r14, r10
     15e:	ea 2c       	mov	r14, r10
     160:	ea 2c       	mov	r14, r10
     162:	ea 2c       	mov	r14, r10
     164:	ea 2c       	mov	r14, r10
     166:	ea 2c       	mov	r14, r10
     168:	b1 2c       	mov	r11, r1
     16a:	ea 2c       	mov	r14, r10
     16c:	ea 2c       	mov	r14, r10
     16e:	ea 2c       	mov	r14, r10
     170:	ea 2c       	mov	r14, r10
     172:	ea 2c       	mov	r14, r10
     174:	ea 2c       	mov	r14, r10
     176:	ea 2c       	mov	r14, r10
     178:	ea 2c       	mov	r14, r10
     17a:	ea 2c       	mov	r14, r10
     17c:	ea 2c       	mov	r14, r10
     17e:	ea 2c       	mov	r14, r10
     180:	ea 2c       	mov	r14, r10
     182:	ea 2c       	mov	r14, r10
     184:	ea 2c       	mov	r14, r10
     186:	ea 2c       	mov	r14, r10
     188:	a5 2c       	mov	r10, r5
     18a:	ea 2c       	mov	r14, r10
     18c:	ea 2c       	mov	r14, r10
     18e:	ea 2c       	mov	r14, r10
     190:	ea 2c       	mov	r14, r10
     192:	ea 2c       	mov	r14, r10
     194:	ea 2c       	mov	r14, r10
     196:	ea 2c       	mov	r14, r10
     198:	c9 2c       	mov	r12, r9

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	07 e5       	ldi	r16, 0x57	; 87
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f7 e8       	ldi	r31, 0x87	; 135
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     1ce:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
     1d8:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     1f4:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
     208:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
     23a:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	14 c1       	rjmp	.+552    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
     286:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
     28a:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a2 c0       	rjmp	.+324    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
     326:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
     32a:	0e 94 b3 11 	call	0x2366	; 0x2366 <vQueueWaitForMessageRestricted>
     32e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8d c0       	rjmp	.+282    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     336:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
     33a:	8a c0       	rjmp	.+276    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     33c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
     340:	87 c0       	rjmp	.+270    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	83 c0       	rjmp	.+262    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	68 c0       	rjmp	.+208    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 55 2f 	jmp	0x5eaa	; 0x5eaa <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4c c0       	rjmp	.+152    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	41 c0       	rjmp	.+130    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTimerGenericCommand>
     3fe:	28 c0       	rjmp	.+80     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <prvInsertTimerInActiveList>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	c2 01       	movw	r24, r4
     446:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	28 2d       	mov	r18, r8
     452:	39 2d       	mov	r19, r9
     454:	4a 2d       	mov	r20, r10
     456:	5b 2d       	mov	r21, r11
     458:	66 2d       	mov	r22, r6
     45a:	77 2d       	mov	r23, r7
     45c:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
     460:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
     464:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueReceive>
     468:	81 11       	cpse	r24, r1
     46a:	6b cf       	rjmp	.-298    	; 0x342 <prvTimerTask+0x134>
     46c:	e4 ce       	rjmp	.-568    	; 0x236 <prvTimerTask+0x28>
     46e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <prvSampleTimeNow>
     47a:	6b 87       	std	Y+11, r22	; 0x0b
     47c:	7c 87       	std	Y+12, r23	; 0x0c
     47e:	8d 87       	std	Y+13, r24	; 0x0d
     480:	9e 87       	std	Y+14, r25	; 0x0e
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	81 11       	cpse	r24, r1
     486:	5a cf       	rjmp	.-332    	; 0x33c <prvTimerTask+0x12e>
     488:	e0 91 d3 18 	lds	r30, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
     48c:	f0 91 d4 18 	lds	r31, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
     490:	80 81       	ld	r24, Z
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	28 2c       	mov	r2, r8
     49a:	39 2c       	mov	r3, r9
     49c:	4a 2c       	mov	r4, r10
     49e:	5b 2c       	mov	r5, r11
     4a0:	36 cf       	rjmp	.-404    	; 0x30e <prvTimerTask+0x100>

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	d1 e2       	ldi	r29, 0x21	; 33
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	17 e0       	ldi	r17, 0x07	; 7
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	ee e7       	ldi	r30, 0x7E	; 126
     4ba:	f9 e6       	ldi	r31, 0x69	; 105
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 3b       	cpi	r26, 0xB0	; 176
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	2a e1       	ldi	r18, 0x1A	; 26
     4ce:	a0 eb       	ldi	r26, 0xB0	; 176
     4d0:	b7 e0       	ldi	r27, 0x07	; 7
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	ab 38       	cpi	r26, 0x8B	; 139
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <main>
     4e0:	0c 94 bd 34 	jmp	0x697a	; 0x697a <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <time>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	60 91 87 1a 	lds	r22, 0x1A87	; 0x801a87 <__system_time>
     4f0:	70 91 88 1a 	lds	r23, 0x1A88	; 0x801a88 <__system_time+0x1>
     4f4:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <__system_time+0x2>
     4f8:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <__system_time+0x3>
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	21 f0       	breq	.+8      	; 0x50a <time+0x24>
     502:	60 83       	st	Z, r22
     504:	71 83       	std	Z+1, r23	; 0x01
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	08 95       	ret

0000050c <co2Reader_create>:
void co2Reader_destroy(co2reader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
     534:	1a 01       	movw	r2, r20
     536:	28 01       	movw	r4, r16
     538:	39 01       	movw	r6, r18
     53a:	87 01       	movw	r16, r14
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <calloc>
     548:	4c 01       	movw	r8, r24
     54a:	89 2b       	or	r24, r25
     54c:	69 f1       	breq	.+90     	; 0x5a8 <co2Reader_create+0x9c>
     54e:	f4 01       	movw	r30, r8
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	7f 01       	movw	r14, r30
     556:	30 92 bb 07 	sts	0x07BB, r3	; 0x8007bb <_startMeasureEventGroup+0x1>
     55a:	20 92 ba 07 	sts	0x07BA, r2	; 0x8007ba <_startMeasureEventGroup>
     55e:	40 92 b6 07 	sts	0x07B6, r4	; 0x8007b6 <_startMeasureBit>
     562:	50 92 b7 07 	sts	0x07B7, r5	; 0x8007b7 <_startMeasureBit+0x1>
     566:	60 92 b8 07 	sts	0x07B8, r6	; 0x8007b8 <_startMeasureBit+0x2>
     56a:	70 92 b9 07 	sts	0x07B9, r7	; 0x8007b9 <_startMeasureBit+0x3>
     56e:	10 93 b5 07 	sts	0x07B5, r17	; 0x8007b5 <_readyMeasuringEventGroup+0x1>
     572:	00 93 b4 07 	sts	0x07B4, r16	; 0x8007b4 <_readyMeasuringEventGroup>
     576:	a0 92 b0 07 	sts	0x07B0, r10	; 0x8007b0 <__data_end>
     57a:	b0 92 b1 07 	sts	0x07B1, r11	; 0x8007b1 <__data_end+0x1>
     57e:	c0 92 b2 07 	sts	0x07B2, r12	; 0x8007b2 <__data_end+0x2>
     582:	d0 92 b3 07 	sts	0x07B3, r13	; 0x8007b3 <__data_end+0x3>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <mh_z19_create>
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	48 53       	subi	r20, 0x38	; 56
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0d 2f       	mov	r16, r29
     59a:	94 01       	movw	r18, r8
     59c:	62 e7       	ldi	r22, 0x72	; 114
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     5a8:	c4 01       	movw	r24, r8
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	08 95       	ret

000005d0 <co2Reader_measure>:


void co2Reader_measure(co2reader_t self) {
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup,
     5e2:	40 91 b6 07 	lds	r20, 0x07B6	; 0x8007b6 <_startMeasureBit>
     5e6:	50 91 b7 07 	lds	r21, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     5ea:	60 91 b8 07 	lds	r22, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     5ee:	70 91 b9 07 	lds	r23, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     5f2:	cc 24       	eor	r12, r12
     5f4:	ca 94       	dec	r12
     5f6:	dc 2c       	mov	r13, r12
     5f8:	76 01       	movw	r14, r12
     5fa:	01 e0       	ldi	r16, 0x01	; 1
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <_startMeasureEventGroup>
     602:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <_startMeasureEventGroup+0x1>
     606:	75 d6       	rcall	.+3306   	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit,
	pdTRUE,
	pdTRUE, 
	portMAX_DELAY);
	
	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     608:	00 91 b6 07 	lds	r16, 0x07B6	; 0x8007b6 <_startMeasureBit>
     60c:	10 91 b7 07 	lds	r17, 0x07B7	; 0x8007b7 <_startMeasureBit+0x1>
     610:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <_startMeasureBit+0x2>
     614:	30 91 b9 07 	lds	r19, 0x07B9	; 0x8007b9 <_startMeasureBit+0x3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	80 23       	and	r24, r16
     61e:	91 23       	and	r25, r17
     620:	a2 23       	and	r26, r18
     622:	b3 23       	and	r27, r19
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	2a 07       	cpc	r18, r26
     62a:	3b 07       	cpc	r19, r27
     62c:	d9 f4       	brne	.+54     	; 0x664 <co2Reader_measure+0x94>
				
		mh_z19_return_code_t return_code_co2_measurement = mh_z19_take_meassuring();
     62e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <mh_z19_take_meassuring>
     632:	18 2f       	mov	r17, r24
		vTaskDelay(300);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		if(return_code_co2_measurement == MHZ19_OK) {
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <co2Reader_measure+0x7a>
			mh_z19_get_co2_ppm(&self->value);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <mh_z19_get_co2_ppm>
		}
		xEventGroupSetBits(_readyMeasuringEventGroup, _readyBit);
     64a:	40 91 b0 07 	lds	r20, 0x07B0	; 0x8007b0 <__data_end>
     64e:	50 91 b1 07 	lds	r21, 0x07B1	; 0x8007b1 <__data_end+0x1>
     652:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <__data_end+0x2>
     656:	70 91 b3 07 	lds	r23, 0x07B3	; 0x8007b3 <__data_end+0x3>
     65a:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <_readyMeasuringEventGroup>
     65e:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <_readyMeasuringEventGroup+0x1>
     662:	07 d7       	rcall	.+3598   	; 0x1472 <xEventGroupSetBits>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <co2Reader_executeTask>:
typedef struct co2reader {
	uint16_t value;
	TaskHandle_t handleTask;
}co2reader;

void co2Reader_executeTask(void* self) {
     676:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure((co2reader_t)self);
     678:	ce 01       	movw	r24, r28
     67a:	aa df       	rcall	.-172    	; 0x5d0 <co2Reader_measure>
     67c:	fd cf       	rjmp	.-6      	; 0x678 <co2Reader_executeTask+0x2>

0000067e <co2Reader_getCO2>:
	}
}

uint16_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
}
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	08 95       	ret

00000686 <configuration_create>:

void configuration_create() {
	_working = calloc(1, sizeof(bool));
	_ventilation = calloc(1, sizeof(bool));

	_working = true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_working>
	_ventilation = false;
     68c:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <_ventilation>

	_semaphore = xSemaphoreCreateMutex();
     690:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <xQueueCreateMutex>
     694:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <_semaphore+0x1>
     698:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <_semaphore>
     69c:	08 95       	ret

0000069e <configuration_setWorking>:
}

void configuration_setWorking(bool value) {
     69e:	0f 93       	push	r16
     6a0:	cf 93       	push	r28
	if (_semaphore != NULL) {
     6a2:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6a6:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6aa:	21 15       	cp	r18, r1
     6ac:	31 05       	cpc	r19, r1
     6ae:	b1 f0       	breq	.+44     	; 0x6dc <configuration_setWorking+0x3e>
     6b0:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6b2:	4f ef       	ldi	r20, 0xFF	; 255
     6b4:	5f ef       	ldi	r21, 0xFF	; 255
     6b6:	ba 01       	movw	r22, r20
     6b8:	c9 01       	movw	r24, r18
     6ba:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		_working = value;
     6be:	c0 93 bf 07 	sts	0x07BF, r28	; 0x8007bf <_working>
		xSemaphoreGive(_semaphore);
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     6d2:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6d6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <configuration_setWorking+0x42>
	}
	else _working = value;
     6dc:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_working>
}
     6e0:	cf 91       	pop	r28
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <configuration_getWorking>:

void configuration_getWorking(bool* working) {
     6e6:	0f 93       	push	r16
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	if (_semaphore != NULL) {
     6ec:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     6f0:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     6f4:	21 15       	cp	r18, r1
     6f6:	31 05       	cpc	r19, r1
     6f8:	b9 f0       	breq	.+46     	; 0x728 <configuration_getWorking+0x42>
     6fa:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     6fc:	4f ef       	ldi	r20, 0xFF	; 255
     6fe:	5f ef       	ldi	r21, 0xFF	; 255
     700:	ba 01       	movw	r22, r20
     702:	c9 01       	movw	r24, r18
     704:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		*working = _working;
     708:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <_working>
     70c:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     71e:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     722:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     726:	04 c0       	rjmp	.+8      	; 0x730 <configuration_getWorking+0x4a>
	}
	else *working = _working;
     728:	20 91 bf 07 	lds	r18, 0x07BF	; 0x8007bf <_working>
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <configuration_setVentilation>:

void configuration_setVentilation(bool value) {
     738:	0f 93       	push	r16
     73a:	cf 93       	push	r28
	if (_semaphore != NULL) {
     73c:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     740:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     744:	21 15       	cp	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	b1 f0       	breq	.+44     	; 0x776 <configuration_setVentilation+0x3e>
     74a:	c8 2f       	mov	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     74c:	4f ef       	ldi	r20, 0xFF	; 255
     74e:	5f ef       	ldi	r21, 0xFF	; 255
     750:	ba 01       	movw	r22, r20
     752:	c9 01       	movw	r24, r18
     754:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		_ventilation = value;
     758:	c0 93 be 07 	sts	0x07BE, r28	; 0x8007be <_ventilation>
		xSemaphoreGive(_semaphore);
     75c:	00 e0       	ldi	r16, 0x00	; 0
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     76c:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     770:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     774:	02 c0       	rjmp	.+4      	; 0x77a <configuration_setVentilation+0x42>
	}
	else _ventilation = value;
     776:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <_ventilation>
}
     77a:	cf 91       	pop	r28
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <configuration_getVentilation>:

void configuration_getVentilation(bool* ventilation) {
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	if (_semaphore != NULL) {
     786:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <_semaphore>
     78a:	30 91 bd 07 	lds	r19, 0x07BD	; 0x8007bd <_semaphore+0x1>
     78e:	21 15       	cp	r18, r1
     790:	31 05       	cpc	r19, r1
     792:	b9 f0       	breq	.+46     	; 0x7c2 <configuration_getVentilation+0x42>
     794:	ec 01       	movw	r28, r24
		xSemaphoreTake(_semaphore, portMAX_DELAY);
     796:	4f ef       	ldi	r20, 0xFF	; 255
     798:	5f ef       	ldi	r21, 0xFF	; 255
     79a:	ba 01       	movw	r22, r20
     79c:	c9 01       	movw	r24, r18
     79e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xQueueSemaphoreTake>
		*ventilation = _ventilation;
     7a2:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <_ventilation>
     7a6:	88 83       	st	Y, r24
		xSemaphoreGive(_semaphore);
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	a9 01       	movw	r20, r18
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <_semaphore>
     7b8:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <_semaphore+0x1>
     7bc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <configuration_getVentilation+0x4a>
	}
	else *ventilation = _ventilation;
     7c2:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <_ventilation>
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <currentCondition_create>:
}

uint16_t currentCondition_getSound(currentCondition_t self)
{
	return self->soundData;
}
     7d2:	68 e0       	ldi	r22, 0x08	; 8
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <calloc>
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	49 f0       	breq	.+18     	; 0x7f4 <currentCondition_create+0x22>
     7e2:	fc 01       	movw	r30, r24
     7e4:	13 82       	std	Z+3, r1	; 0x03
     7e6:	12 82       	std	Z+2, r1	; 0x02
     7e8:	15 82       	std	Z+5, r1	; 0x05
     7ea:	14 82       	std	Z+4, r1	; 0x04
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	17 82       	std	Z+7, r1	; 0x07
     7f2:	16 82       	std	Z+6, r1	; 0x06
     7f4:	08 95       	ret

000007f6 <currentCondition_setCO2>:
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	49 f0       	breq	.+18     	; 0x80c <currentCondition_setCO2+0x16>
     7fa:	9b 01       	movw	r18, r22
     7fc:	28 5c       	subi	r18, 0xC8	; 200
     7fe:	31 09       	sbc	r19, r1
     800:	29 34       	cpi	r18, 0x49	; 73
     802:	36 42       	sbci	r19, 0x26	; 38
     804:	18 f4       	brcc	.+6      	; 0x80c <currentCondition_setCO2+0x16>
     806:	fc 01       	movw	r30, r24
     808:	71 83       	std	Z+1, r23	; 0x01
     80a:	60 83       	st	Z, r22
     80c:	08 95       	ret

0000080e <currentCondition_setHumidity>:
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	39 f0       	breq	.+14     	; 0x820 <currentCondition_setHumidity+0x12>
     812:	69 3e       	cpi	r22, 0xE9	; 233
     814:	23 e0       	ldi	r18, 0x03	; 3
     816:	72 07       	cpc	r23, r18
     818:	18 f4       	brcc	.+6      	; 0x820 <currentCondition_setHumidity+0x12>
     81a:	fc 01       	movw	r30, r24
     81c:	75 83       	std	Z+5, r23	; 0x05
     81e:	64 83       	std	Z+4, r22	; 0x04
     820:	08 95       	ret

00000822 <currentCondition_setTemperature>:
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	49 f0       	breq	.+18     	; 0x838 <currentCondition_setTemperature+0x16>
     826:	9b 01       	movw	r18, r22
     828:	20 57       	subi	r18, 0x70	; 112
     82a:	3e 4f       	sbci	r19, 0xFE	; 254
     82c:	27 3b       	cpi	r18, 0xB7	; 183
     82e:	33 40       	sbci	r19, 0x03	; 3
     830:	18 f4       	brcc	.+6      	; 0x838 <currentCondition_setTemperature+0x16>
     832:	fc 01       	movw	r30, r24
     834:	73 83       	std	Z+3, r23	; 0x03
     836:	62 83       	std	Z+2, r22	; 0x02
     838:	08 95       	ret

0000083a <currentCondition_setSound>:
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	31 f0       	breq	.+12     	; 0x84a <currentCondition_setSound+0x10>
     83e:	67 39       	cpi	r22, 0x97	; 151
     840:	71 05       	cpc	r23, r1
     842:	18 f4       	brcc	.+6      	; 0x84a <currentCondition_setSound+0x10>
     844:	fc 01       	movw	r30, r24
     846:	77 83       	std	Z+7, r23	; 0x07
     848:	66 83       	std	Z+6, r22	; 0x06
     84a:	08 95       	ret

0000084c <getcurrentConditionPayload>:

// in order for test to work, the two methods below should be commented out
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     84c:	fc 01       	movw	r30, r24
     84e:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 8;
	
	int16_t tempData = self->temperatureData;
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	6c 91       	ld	r22, X
     854:	12 97       	sbiw	r26, 0x02	; 2
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	7c 91       	ld	r23, X
     85a:	13 97       	sbiw	r26, 0x03	; 3
	
	payload.bytes[0] = tempData >> 8;
	payload.bytes[1] = tempData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     85c:	14 96       	adiw	r26, 0x04	; 4
     85e:	4c 91       	ld	r20, X
     860:	14 97       	sbiw	r26, 0x04	; 4
     862:	15 96       	adiw	r26, 0x05	; 5
     864:	5c 91       	ld	r21, X
     866:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[3] = self->humidityData & 0xFF;
	
	payload.bytes[4] = self->co2Data >> 8;
     868:	2c 91       	ld	r18, X
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	3c 91       	ld	r19, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
	payload.bytes[5] = self->co2Data & 0xFF;
	
	payload.bytes[6] = self->soundData >> 8;
     870:	16 96       	adiw	r26, 0x06	; 6
     872:	8c 91       	ld	r24, X
     874:	16 97       	sbiw	r26, 0x06	; 6
     876:	17 96       	adiw	r26, 0x07	; 7
     878:	9c 91       	ld	r25, X
	payload.bytes[7] = self->soundData & 0xFF;
	
	return payload;
     87a:	a1 e0       	ldi	r26, 0x01	; 1
     87c:	a0 83       	st	Z, r26
     87e:	a8 e0       	ldi	r26, 0x08	; 8
     880:	a1 83       	std	Z+1, r26	; 0x01
     882:	72 83       	std	Z+2, r23	; 0x02
     884:	63 83       	std	Z+3, r22	; 0x03
     886:	54 83       	std	Z+4, r21	; 0x04
     888:	45 83       	std	Z+5, r20	; 0x05
     88a:	36 83       	std	Z+6, r19	; 0x06
     88c:	27 83       	std	Z+7, r18	; 0x07
     88e:	90 87       	std	Z+8, r25	; 0x08
     890:	81 87       	std	Z+9, r24	; 0x09
	
}
     892:	cf 01       	movw	r24, r30
     894:	08 95       	ret

00000896 <getSimplePayload>:
	
	uint16_t one = 0;
	payload.bytes[0] = one >> 8;
	payload.bytes[1] = one & 0xFF;
	
	return payload;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	22 e0       	ldi	r18, 0x02	; 2
     89e:	21 83       	std	Z+1, r18	; 0x01
     8a0:	12 82       	std	Z+2, r1	; 0x02
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	08 95       	ret

000008a6 <device_create>:
		device_startMeasuring((device_t)self);
	}
}

device_t device_create(UBaseType_t priority, UBaseType_t stack, EventGroupHandle_t startMeasureEventGroup, EventBits_t startMeasureBit,
EventGroupHandle_t readyEventGroup, EventBits_t readyBit, co2reader_t co2Reader, humAndTempReader_t humAndTempReader,soundReader_t soundReader, MessageBufferHandle_t uplinkMessageBuffer){
     8a6:	2f 92       	push	r2
     8a8:	3f 92       	push	r3
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <device_create+0x26>
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	28 2e       	mov	r2, r24
     8d4:	36 2e       	mov	r3, r22
     8d6:	5c 83       	std	Y+4, r21	; 0x04
     8d8:	4b 83       	std	Y+3, r20	; 0x03
     8da:	28 01       	movw	r4, r16
     8dc:	39 01       	movw	r6, r18

	device_t _new_device = calloc(1, sizeof(device));
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <calloc>
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
	if (_new_device == NULL)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <device_create+0x4e>
     8f2:	40 c0       	rjmp	.+128    	; 0x974 <device_create+0xce>
		return NULL;

	_new_device->co2reader = co2Reader;
     8f4:	fc 01       	movw	r30, r24
     8f6:	91 82       	std	Z+1, r9	; 0x01
     8f8:	80 82       	st	Z, r8
	_new_device->humAndTempReader = humAndTempReader;
     8fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	93 83       	std	Z+3, r25	; 0x03
     900:	82 83       	std	Z+2, r24	; 0x02
	_new_device->soundReader=soundReader;
     902:	8c 8d       	ldd	r24, Y+28	; 0x1c
     904:	9d 8d       	ldd	r25, Y+29	; 0x1d
     906:	95 83       	std	Z+5, r25	; 0x05
     908:	84 83       	std	Z+4, r24	; 0x04
	currentCondition_t currentCond = currentCondition_create();
     90a:	63 df       	rcall	.-314    	; 0x7d2 <currentCondition_create>
	_new_device->currentCondition = currentCond;
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	97 83       	std	Z+7, r25	; 0x07
     912:	86 83       	std	Z+6, r24	; 0x06

	_startMeasureEventGroup = startMeasureEventGroup;
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <_startMeasureEventGroup+0x1>
     91c:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <_startMeasureEventGroup>
	_startMeasureBit = startMeasureBit;
     920:	40 92 de 07 	sts	0x07DE, r4	; 0x8007de <_startMeasureBit>
     924:	50 92 df 07 	sts	0x07DF, r5	; 0x8007df <_startMeasureBit+0x1>
     928:	60 92 e0 07 	sts	0x07E0, r6	; 0x8007e0 <_startMeasureBit+0x2>
     92c:	70 92 e1 07 	sts	0x07E1, r7	; 0x8007e1 <_startMeasureBit+0x3>

	_readyMeasuringEventGroup = readyEventGroup;
     930:	f0 92 dd 07 	sts	0x07DD, r15	; 0x8007dd <_readyMeasuringEventGroup+0x1>
     934:	e0 92 dc 07 	sts	0x07DC, r14	; 0x8007dc <_readyMeasuringEventGroup>
	_readyBit = readyBit;
     938:	a0 92 d8 07 	sts	0x07D8, r10	; 0x8007d8 <_readyBit>
     93c:	b0 92 d9 07 	sts	0x07D9, r11	; 0x8007d9 <_readyBit+0x1>
     940:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <_readyBit+0x2>
     944:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <_readyBit+0x3>
	
	_uplinkmessageBuffer=uplinkMessageBuffer;
     948:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     94c:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     950:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <_uplinkmessageBuffer>

	xTaskCreate(
     954:	43 2d       	mov	r20, r3
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	48 53       	subi	r20, 0x38	; 56
     95a:	5f 4f       	sbci	r21, 0xFF	; 255
     95c:	7f 01       	movw	r14, r30
     95e:	98 e0       	ldi	r25, 0x08	; 8
     960:	e9 0e       	add	r14, r25
     962:	f1 1c       	adc	r15, r1
     964:	02 2d       	mov	r16, r2
     966:	9f 01       	movw	r18, r30
     968:	6c e7       	ldi	r22, 0x7C	; 124
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	8f ed       	ldi	r24, 0xDF	; 223
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
		priority,
		&_new_device->handleTask
	);

	return _new_device;
}
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	7f 90       	pop	r7
     99a:	6f 90       	pop	r6
     99c:	5f 90       	pop	r5
     99e:	4f 90       	pop	r4
     9a0:	3f 90       	pop	r3
     9a2:	2f 90       	pop	r2
     9a4:	08 95       	ret

000009a6 <device_startMeasuring>:

void device_startMeasuring(device_t self) {
     9a6:	af 92       	push	r10
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	66 97       	sbiw	r28, 0x16	; 22
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 
	
	bool* works = pvPortMalloc(sizeof(bool));
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	36 d6       	rcall	.+3180   	; 0x163e <pvPortMalloc>
     9d2:	8c 01       	movw	r16, r24
	configuration_getWorking(works);
     9d4:	88 de       	rcall	.-752    	; 0x6e6 <configuration_getWorking>
     9d6:	f8 01       	movw	r30, r16
	if (*works == true)
     9d8:	80 81       	ld	r24, Z
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <device_startMeasuring+0x3a>
     9de:	bc c0       	rjmp	.+376    	; 0xb58 <device_startMeasuring+0x1b2>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
	{

		bool* ventilate = pvPortMalloc(sizeof(bool));
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2c d6       	rcall	.+3160   	; 0x163e <pvPortMalloc>
     9e6:	8c 01       	movw	r16, r24
		configuration_getVentilation(ventilate);
     9e8:	cb de       	rcall	.-618    	; 0x780 <configuration_getVentilation>
     9ea:	f8 01       	movw	r30, r16
		if(*ventilate == true)
     9ec:	80 81       	ld	r24, Z
     9ee:	88 23       	and	r24, r24
		{
			servo_open();
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <device_startMeasuring+0x50>
     9f2:	6d d2       	rcall	.+1242   	; 0xece <servo_open>
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <device_startMeasuring+0x52>
		} 
		else
		{
			servo_close();
     9f6:	70 d2       	rcall	.+1248   	; 0xed8 <servo_close>
     9f8:	40 91 de 07 	lds	r20, 0x07DE	; 0x8007de <_startMeasureBit>
		}

	////tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     9fc:	50 91 df 07 	lds	r21, 0x07DF	; 0x8007df <_startMeasureBit+0x1>
     a00:	60 91 e0 07 	lds	r22, 0x07E0	; 0x8007e0 <_startMeasureBit+0x2>
     a04:	70 91 e1 07 	lds	r23, 0x07E1	; 0x8007e1 <_startMeasureBit+0x3>
     a08:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <_startMeasureEventGroup>
     a0c:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <_startMeasureEventGroup+0x1>
     a10:	30 d5       	rcall	.+2656   	; 0x1472 <xEventGroupSetBits>
     a12:	40 91 d8 07 	lds	r20, 0x07D8	; 0x8007d8 <_readyBit>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyMeasuringEventGroup, 
     a16:	50 91 d9 07 	lds	r21, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a1a:	60 91 da 07 	lds	r22, 0x07DA	; 0x8007da <_readyBit+0x2>
     a1e:	70 91 db 07 	lds	r23, 0x07DB	; 0x8007db <_readyBit+0x3>
     a22:	cc 24       	eor	r12, r12
     a24:	ca 94       	dec	r12
     a26:	dc 2c       	mov	r13, r12
     a28:	76 01       	movw	r14, r12
     a2a:	01 e0       	ldi	r16, 0x01	; 1
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <_readyMeasuringEventGroup>
     a32:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <_readyMeasuringEventGroup+0x1>
     a36:	5d d4       	rcall	.+2234   	; 0x12f2 <xEventGroupWaitBits>
     a38:	00 91 d8 07 	lds	r16, 0x07D8	; 0x8007d8 <_readyBit>
		_readyBit, 
		pdTRUE, 
		pdTRUE,
		portMAX_DELAY);
	
	if ((uxBits & (_readyBit)) == (_readyBit)) {
     a3c:	10 91 d9 07 	lds	r17, 0x07D9	; 0x8007d9 <_readyBit+0x1>
     a40:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <_readyBit+0x2>
     a44:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <_readyBit+0x3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	80 23       	and	r24, r16
     a4e:	91 23       	and	r25, r17
     a50:	a2 23       	and	r26, r18
     a52:	b3 23       	and	r27, r19
     a54:	08 17       	cp	r16, r24
     a56:	19 07       	cpc	r17, r25
     a58:	2a 07       	cpc	r18, r26
     a5a:	3b 07       	cpc	r19, r27
     a5c:	09 f0       	breq	.+2      	; 0xa60 <device_startMeasuring+0xba>
     a5e:	9e c0       	rjmp	.+316    	; 0xb9c <device_startMeasuring+0x1f6>
		currentCondition_setCO2(self->currentCondition,co2Reader_getCO2(self->co2reader));
     a60:	f5 01       	movw	r30, r10
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	0b de       	rcall	.-1002   	; 0x67e <co2Reader_getCO2>
     a68:	bc 01       	movw	r22, r24
     a6a:	f5 01       	movw	r30, r10
     a6c:	86 81       	ldd	r24, Z+6	; 0x06
     a6e:	97 81       	ldd	r25, Z+7	; 0x07
     a70:	c2 de       	rcall	.-636    	; 0x7f6 <currentCondition_setCO2>
		
		currentCondition_setSound(self->currentCondition,soundReader_getSound(self->soundReader));
     a72:	f5 01       	movw	r30, r10
     a74:	84 81       	ldd	r24, Z+4	; 0x04
     a76:	95 81       	ldd	r25, Z+5	; 0x05
     a78:	e8 d2       	rcall	.+1488   	; 0x104a <soundReader_getSound>
     a7a:	bc 01       	movw	r22, r24
     a7c:	f5 01       	movw	r30, r10
     a7e:	86 81       	ldd	r24, Z+6	; 0x06
     a80:	97 81       	ldd	r25, Z+7	; 0x07
     a82:	db de       	rcall	.-586    	; 0x83a <currentCondition_setSound>
		
		currentCondition_setTemperature(self->currentCondition,humAndTempReader_getTemperature(self->humAndTempReader));
     a84:	f5 01       	movw	r30, r10
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	93 81       	ldd	r25, Z+3	; 0x03
     a8a:	1a d2       	rcall	.+1076   	; 0xec0 <humAndTempReader_getTemperature>
     a8c:	bc 01       	movw	r22, r24
     a8e:	f5 01       	movw	r30, r10
     a90:	86 81       	ldd	r24, Z+6	; 0x06
     a92:	97 81       	ldd	r25, Z+7	; 0x07
     a94:	c6 de       	rcall	.-628    	; 0x822 <currentCondition_setTemperature>
		
		int16_t humidity = humAndTempReader_getHumidity(self->humAndTempReader);
     a96:	f5 01       	movw	r30, r10
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	93 81       	ldd	r25, Z+3	; 0x03
     a9c:	0d d2       	rcall	.+1050   	; 0xeb8 <humAndTempReader_getHumidity>
     a9e:	bc 01       	movw	r22, r24
		currentCondition_setHumidity(self->currentCondition, humidity);
     aa0:	f5 01       	movw	r30, r10
     aa2:	86 81       	ldd	r24, Z+6	; 0x06
     aa4:	97 81       	ldd	r25, Z+7	; 0x07
     aa6:	b3 de       	rcall	.-666    	; 0x80e <currentCondition_setHumidity>
     aa8:	f5 01       	movw	r30, r10
		
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	e7 dd       	rcall	.-1074   	; 0x67e <co2Reader_getCO2>
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	83 e8       	ldi	r24, 0x83	; 131
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     ac0:	f5 01       	movw	r30, r10
		printf("Temperature is: %d\n", humAndTempReader_getTemperature(self->humAndTempReader));
     ac2:	82 81       	ldd	r24, Z+2	; 0x02
     ac4:	93 81       	ldd	r25, Z+3	; 0x03
     ac6:	fc d1       	rcall	.+1016   	; 0xec0 <humAndTempReader_getTemperature>
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	8f e8       	ldi	r24, 0x8F	; 143
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     ad8:	f5 01       	movw	r30, r10
		printf("Humidity is: %u\n", humAndTempReader_getHumidity(self->humAndTempReader));
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	ec d1       	rcall	.+984    	; 0xeb8 <humAndTempReader_getHumidity>
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	83 ea       	ldi	r24, 0xA3	; 163
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     af0:	f5 01       	movw	r30, r10
		printf("Sound is: %u\n", soundReader_getSound(self->soundReader));
     af2:	84 81       	ldd	r24, Z+4	; 0x04
     af4:	95 81       	ldd	r25, Z+5	; 0x05
     af6:	a9 d2       	rcall	.+1362   	; 0x104a <soundReader_getSound>
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	84 eb       	ldi	r24, 0xB4	; 180
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     b08:	f5 01       	movw	r30, r10
     b0a:	66 81       	ldd	r22, Z+6	; 0x06
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     b0c:	77 81       	ldd	r23, Z+7	; 0x07
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	9c de       	rcall	.-712    	; 0x84c <getcurrentConditionPayload>
     b14:	86 e1       	ldi	r24, 0x16	; 22
     b16:	fe 01       	movw	r30, r28
     b18:	31 96       	adiw	r30, 0x01	; 1
     b1a:	a0 ec       	ldi	r26, 0xC0	; 192
     b1c:	b7 e0       	ldi	r27, 0x07	; 7
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	8a 95       	dec	r24
     b24:	e1 f7       	brne	.-8      	; 0xb1e <device_startMeasuring+0x178>
     b26:	0f ef       	ldi	r16, 0xFF	; 255
     b28:	1f ef       	ldi	r17, 0xFF	; 255
     b2a:	98 01       	movw	r18, r16
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b2c:	46 e1       	ldi	r20, 0x16	; 22
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 ec       	ldi	r22, 0xC0	; 192
     b32:	77 e0       	ldi	r23, 0x07	; 7
     b34:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b38:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b3c:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
     b40:	60 e3       	ldi	r22, 0x30	; 48
     b42:	75 e7       	ldi	r23, 0x75	; 117
		vTaskDelay(30000);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	22 c0       	rjmp	.+68     	; 0xb9c <device_startMeasuring+0x1f6>
     b58:	f5 01       	movw	r30, r10
     b5a:	66 81       	ldd	r22, Z+6	; 0x06
	}
	//if the device is not on, wait a bit and check if anything is changed
	}
	else
	{
		_uplink_payload = getSimplePayload(self->currentCondition);
     b5c:	77 81       	ldd	r23, Z+7	; 0x07
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	99 de       	rcall	.-718    	; 0x896 <getSimplePayload>
     b64:	86 e1       	ldi	r24, 0x16	; 22
     b66:	fe 01       	movw	r30, r28
     b68:	31 96       	adiw	r30, 0x01	; 1
     b6a:	a0 ec       	ldi	r26, 0xC0	; 192
     b6c:	b7 e0       	ldi	r27, 0x07	; 7
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	8a 95       	dec	r24
     b74:	e1 f7       	brne	.-8      	; 0xb6e <device_startMeasuring+0x1c8>
     b76:	0f ef       	ldi	r16, 0xFF	; 255
     b78:	1f ef       	ldi	r17, 0xFF	; 255
     b7a:	98 01       	movw	r18, r16
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     b7c:	46 e1       	ldi	r20, 0x16	; 22
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	60 ec       	ldi	r22, 0xC0	; 192
     b82:	77 e0       	ldi	r23, 0x07	; 7
     b84:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <_uplinkmessageBuffer>
     b88:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <_uplinkmessageBuffer+0x1>
     b8c:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
     b90:	60 e3       	ldi	r22, 0x30	; 48
     b92:	75 e7       	ldi	r23, 0x75	; 117
     b94:	80 e0       	ldi	r24, 0x00	; 0
		vTaskDelay(30000);
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
     b9c:	66 96       	adiw	r28, 0x16	; 22
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
	} 
}
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	08 95       	ret

00000bbe <device_executeTask>:
     bbe:	ec 01       	movw	r28, r24
     bc0:	ce 01       	movw	r24, r28
     bc2:	f1 de       	rcall	.-542    	; 0x9a6 <device_startMeasuring>

//devided so we can test
void device_executeTask(void* self) {
	for (;;)
	{
		device_startMeasuring((device_t)self);
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <device_executeTask+0x2>

00000bc6 <lora_DownLinkHandler_create>:
		lora_DownLinkHandler_task((MessageBufferHandle_t)messageBuffer);
	}
}

void lora_DownLinkHandler_create(UBaseType_t priority, UBaseType_t stack, MessageBufferHandle_t messageBuffer)
{
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	9a 01       	movw	r18, r20
	xTaskCreate(
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	ab 01       	movw	r20, r22
     bd2:	48 53       	subi	r20, 0x38	; 56
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	e1 2c       	mov	r14, r1
     bd8:	f1 2c       	mov	r15, r1
     bda:	08 2f       	mov	r16, r24
     bdc:	62 ec       	ldi	r22, 0xC2	; 194
     bde:	72 e0       	ldi	r23, 0x02	; 2
     be0:	8b e8       	ldi	r24, 0x8B	; 139
     be2:	96 e0       	ldi	r25, 0x06	; 6
     be4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
	,  (const portCHAR *)"LRDHHand"  
	,  stack+200  
	,  (void*)messageBuffer
	,  priority  
	,  NULL );
}
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	08 95       	ret

00000bf0 <lora_DownLinkHandler_task>:


	void lora_DownLinkHandler_task(MessageBufferHandle_t messageBuffer)
	{
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
				
		xMessageBufferReceive(messageBuffer,(void*) &_downlink_payload,sizeof(lora_payload_t),portMAX_DELAY);
     bf8:	0f ef       	ldi	r16, 0xFF	; 255
     bfa:	1f ef       	ldi	r17, 0xFF	; 255
     bfc:	98 01       	movw	r18, r16
     bfe:	46 e1       	ldi	r20, 0x16	; 22
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	64 ee       	ldi	r22, 0xE4	; 228
     c04:	77 e0       	ldi	r23, 0x07	; 7
     c06:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
		printf("PayLoad bytes are: %d, %d\n Payload lenght is %d\n", _downlink_payload.bytes[0] ,_downlink_payload.bytes[1],_downlink_payload.len);
     c0a:	c4 ee       	ldi	r28, 0xE4	; 228
     c0c:	d7 e0       	ldi	r29, 0x07	; 7
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	1f 92       	push	r1
     c12:	8f 93       	push	r24
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	1f 92       	push	r1
     c18:	8f 93       	push	r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	1f 92       	push	r1
     c1e:	8f 93       	push	r24
     c20:	8b ec       	ldi	r24, 0xCB	; 203
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
		

		if(_downlink_payload.len==2)
     c2c:	8d b7       	in	r24, 0x3d	; 61
     c2e:	9e b7       	in	r25, 0x3e	; 62
     c30:	08 96       	adiw	r24, 0x08	; 8
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	9e bf       	out	0x3e, r25	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	8d bf       	out	0x3d, r24	; 61
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	09 f0       	breq	.+2      	; 0xc44 <lora_DownLinkHandler_task+0x54>
     c42:	64 c0       	rjmp	.+200    	; 0xd0c <lora_DownLinkHandler_task+0x11c>
		{
			uint8_t command = _downlink_payload.bytes[0] + _downlink_payload.bytes[1];
     c44:	fe 01       	movw	r30, r28
     c46:	ca 81       	ldd	r28, Y+2	; 0x02
     c48:	83 81       	ldd	r24, Z+3	; 0x03
     c4a:	c8 0f       	add	r28, r24
			bool* value = pvPortMalloc(sizeof(bool));
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	f6 d4       	rcall	.+2540   	; 0x163e <pvPortMalloc>
     c52:	8c 01       	movw	r16, r24
			
			switch(command)
     c54:	c5 37       	cpi	r28, 0x75	; 117
     c56:	e9 f0       	breq	.+58     	; 0xc92 <lora_DownLinkHandler_task+0xa2>
     c58:	18 f4       	brcc	.+6      	; 0xc60 <lora_DownLinkHandler_task+0x70>
     c5a:	c4 37       	cpi	r28, 0x74	; 116
     c5c:	39 f0       	breq	.+14     	; 0xc6c <lora_DownLinkHandler_task+0x7c>
     c5e:	52 c0       	rjmp	.+164    	; 0xd04 <lora_DownLinkHandler_task+0x114>
     c60:	c6 38       	cpi	r28, 0x86	; 134
     c62:	51 f1       	breq	.+84     	; 0xcb8 <lora_DownLinkHandler_task+0xc8>
     c64:	c7 38       	cpi	r28, 0x87	; 135
     c66:	09 f4       	brne	.+2      	; 0xc6a <lora_DownLinkHandler_task+0x7a>
     c68:	3a c0       	rjmp	.+116    	; 0xcde <lora_DownLinkHandler_task+0xee>
     c6a:	4c c0       	rjmp	.+152    	; 0xd04 <lora_DownLinkHandler_task+0x114>
			{
			//D0
			case 0x74:
				configuration_setWorking(false);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	17 dd       	rcall	.-1490   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     c70:	c8 01       	movw	r24, r16
     c72:	39 dd       	rcall	.-1422   	; 0x6e6 <configuration_getWorking>
     c74:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c76:	80 81       	ld	r24, Z
     c78:	1f 92       	push	r1
     c7a:	8f 93       	push	r24
     c7c:	8c ef       	ldi	r24, 0xFC	; 252
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     c88:	0f 90       	pop	r0
				break;
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	3d c0       	rjmp	.+122    	; 0xd0c <lora_DownLinkHandler_task+0x11c>
			//D1
			case 0x75 :
				configuration_setWorking(true);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	04 dd       	rcall	.-1528   	; 0x69e <configuration_setWorking>
				configuration_getWorking(value);
     c96:	c8 01       	movw	r24, r16
     c98:	26 dd       	rcall	.-1460   	; 0x6e6 <configuration_getWorking>
     c9a:	f8 01       	movw	r30, r16
				printf("The bool for device is set to %d\n",*value);
     c9c:	80 81       	ld	r24, Z
     c9e:	1f 92       	push	r1
     ca0:	8f 93       	push	r24
     ca2:	8c ef       	ldi	r24, 0xFC	; 252
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     cae:	0f 90       	pop	r0
				break;
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
			//V0
			case 0x86:
				configuration_setVentilation(false);
     cb6:	2a c0       	rjmp	.+84     	; 0xd0c <lora_DownLinkHandler_task+0x11c>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	3e dd       	rcall	.-1412   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     cbc:	c8 01       	movw	r24, r16
     cbe:	60 dd       	rcall	.-1344   	; 0x780 <configuration_getVentilation>
     cc0:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     cc2:	80 81       	ld	r24, Z
     cc4:	1f 92       	push	r1
     cc6:	8f 93       	push	r24
     cc8:	8e e1       	ldi	r24, 0x1E	; 30
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
			break;
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
			//V1
			case 0x87:
				configuration_setVentilation(true);
     cdc:	17 c0       	rjmp	.+46     	; 0xd0c <lora_DownLinkHandler_task+0x11c>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	2b dd       	rcall	.-1450   	; 0x738 <configuration_setVentilation>
				configuration_getVentilation(value);
     ce2:	c8 01       	movw	r24, r16
     ce4:	4d dd       	rcall	.-1382   	; 0x780 <configuration_getVentilation>
     ce6:	f8 01       	movw	r30, r16
				printf("The bool for ventilation is set to %d\n",*value);
     ce8:	80 81       	ld	r24, Z
     cea:	1f 92       	push	r1
     cec:	8f 93       	push	r24
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
     cfa:	0f 90       	pop	r0
				break;
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <lora_DownLinkHandler_task+0x11c>
     d04:	85 e4       	ldi	r24, 0x45	; 69
			default:
				printf("Invalid command\n");
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0e 94 77 31 	call	0x62ee	; 0x62ee <puts>
     d0c:	df 91       	pop	r29
				break;
		}
	}
						
}
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lora_DownLinkHandler_startTask>:
     d16:	ec 01       	movw	r28, r24
static lora_payload_t _downlink_payload;

void lora_DownLinkHandler_startTask(void* messageBuffer){
	for(;;)
	{
		lora_DownLinkHandler_task((MessageBufferHandle_t)messageBuffer);
     d18:	ce 01       	movw	r24, r28
     d1a:	6a df       	rcall	.-300    	; 0xbf0 <lora_DownLinkHandler_task>
     d1c:	fd cf       	rjmp	.-6      	; 0xd18 <lora_DownLinkHandler_startTask+0x2>

00000d1e <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
		return;
	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     d1e:	2f 92       	push	r2
     d20:	3f 92       	push	r3
     d22:	4f 92       	push	r4
     d24:	5f 92       	push	r5
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	88 2e       	mov	r8, r24
     d44:	96 2e       	mov	r9, r22
     d46:	1a 01       	movw	r2, r20
     d48:	28 01       	movw	r4, r16
     d4a:	39 01       	movw	r6, r18
     d4c:	66 e0       	ldi	r22, 0x06	; 6
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <calloc>
     d58:	ec 01       	movw	r28, r24
     d5a:	89 2b       	or	r24, r25
     d5c:	71 f1       	breq	.+92     	; 0xdba <humAndTempReader_create+0x9c>
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	18 82       	st	Y, r1
     d62:	1b 82       	std	Y+3, r1	; 0x03
     d64:	1a 82       	std	Y+2, r1	; 0x02
     d66:	30 92 05 08 	sts	0x0805, r3	; 0x800805 <_startMeasureEventGroup+0x1>
     d6a:	20 92 04 08 	sts	0x0804, r2	; 0x800804 <_startMeasureEventGroup>
     d6e:	40 92 00 08 	sts	0x0800, r4	; 0x800800 <_startMeasureBit>
     d72:	50 92 01 08 	sts	0x0801, r5	; 0x800801 <_startMeasureBit+0x1>
     d76:	60 92 02 08 	sts	0x0802, r6	; 0x800802 <_startMeasureBit+0x2>
     d7a:	70 92 03 08 	sts	0x0803, r7	; 0x800803 <_startMeasureBit+0x3>
     d7e:	f0 92 ff 07 	sts	0x07FF, r15	; 0x8007ff <_readyMeasuringEventGroup+0x1>
     d82:	e0 92 fe 07 	sts	0x07FE, r14	; 0x8007fe <_readyMeasuringEventGroup>
     d86:	a0 92 fa 07 	sts	0x07FA, r10	; 0x8007fa <_readyBit>
     d8a:	b0 92 fb 07 	sts	0x07FB, r11	; 0x8007fb <_readyBit+0x1>
     d8e:	c0 92 fc 07 	sts	0x07FC, r12	; 0x8007fc <_readyBit+0x2>
     d92:	d0 92 fd 07 	sts	0x07FD, r13	; 0x8007fd <_readyBit+0x3>
     d96:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <hih8120Create>
     d9a:	49 2d       	mov	r20, r9
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	48 53       	subi	r20, 0x38	; 56
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	7e 01       	movw	r14, r28
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	e8 0e       	add	r14, r24
     da8:	f1 1c       	adc	r15, r1
     daa:	08 2d       	mov	r16, r8
     dac:	9e 01       	movw	r18, r28
     dae:	65 e5       	ldi	r22, 0x55	; 85
     db0:	73 e0       	ldi	r23, 0x03	; 3
     db2:	88 e5       	ldi	r24, 0x58	; 88
     db4:	97 e0       	ldi	r25, 0x07	; 7
     db6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     dba:	ce 01       	movw	r24, r28
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	5f 90       	pop	r5
     dda:	4f 90       	pop	r4
     ddc:	3f 90       	pop	r3
     dde:	2f 90       	pop	r2
     de0:	08 95       	ret

00000de2 <humAndTempReader_measure>:

void humAndTempReader_measure(humAndTempReader_t self) {
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     df4:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <_startMeasureBit>
     df8:	50 91 01 08 	lds	r21, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     dfc:	60 91 02 08 	lds	r22, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     e00:	70 91 03 08 	lds	r23, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     e04:	cc 24       	eor	r12, r12
     e06:	ca 94       	dec	r12
     e08:	dc 2c       	mov	r13, r12
     e0a:	76 01       	movw	r14, r12
     e0c:	01 e0       	ldi	r16, 0x01	; 1
     e0e:	21 e0       	ldi	r18, 0x01	; 1
     e10:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <_startMeasureEventGroup>
     e14:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_startMeasureEventGroup+0x1>
     e18:	6c d2       	rcall	.+1240   	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY);

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     e1a:	00 91 00 08 	lds	r16, 0x0800	; 0x800800 <_startMeasureBit>
     e1e:	10 91 01 08 	lds	r17, 0x0801	; 0x800801 <_startMeasureBit+0x1>
     e22:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_startMeasureBit+0x2>
     e26:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_startMeasureBit+0x3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	80 23       	and	r24, r16
     e30:	91 23       	and	r25, r17
     e32:	a2 23       	and	r26, r18
     e34:	b3 23       	and	r27, r19
     e36:	08 17       	cp	r16, r24
     e38:	19 07       	cpc	r17, r25
     e3a:	2a 07       	cpc	r18, r26
     e3c:	3b 07       	cpc	r19, r27
     e3e:	79 f5       	brne	.+94     	; 0xe9e <humAndTempReader_measure+0xbc>
		hih8120Wakeup();
     e40:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <hih8120Wakeup>
		vTaskDelay(50);
     e44:	62 e3       	ldi	r22, 0x32	; 50
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		hih8120Meassure();
     e50:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <hih8120Meassure>
		vTaskDelay(5);
     e54:	65 e0       	ldi	r22, 0x05	; 5
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		if(hih8120IsReady())
     e60:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <hih8120IsReady>
     e64:	88 23       	and	r24, r24
     e66:	41 f0       	breq	.+16     	; 0xe78 <humAndTempReader_measure+0x96>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     e68:	0e 94 0f 20 	call	0x401e	; 0x401e <hih8120GetHumidityPercent_x10>
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     e70:	0e 94 35 20 	call	0x406a	; 0x406a <hih8120GetTemperature_x10>
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
		}
		vTaskDelay(1000);
     e78:	68 ee       	ldi	r22, 0xE8	; 232
     e7a:	73 e0       	ldi	r23, 0x03	; 3
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		xEventGroupSetBits(_readyMeasuringEventGroup, _readyBit);
     e84:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <_readyBit>
     e88:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <_readyBit+0x1>
     e8c:	60 91 fc 07 	lds	r22, 0x07FC	; 0x8007fc <_readyBit+0x2>
     e90:	70 91 fd 07 	lds	r23, 0x07FD	; 0x8007fd <_readyBit+0x3>
     e94:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <_readyMeasuringEventGroup>
     e98:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <_readyMeasuringEventGroup+0x1>
     e9c:	ea d2       	rcall	.+1492   	; 0x1472 <xEventGroupSetBits>
	}
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <humAndTempReader_executeTask>:
	uint16_t humidity;
	int16_t temperature;
	TaskHandle_t handleTask;
}humidityAndTemperature;

void humAndTempReader_executeTask(void* self) {
     eb0:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure((humAndTempReader_t)self);
     eb2:	ce 01       	movw	r24, r28
     eb4:	96 df       	rcall	.-212    	; 0xde2 <humAndTempReader_measure>
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <humAndTempReader_executeTask+0x2>

00000eb8 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	08 95       	ret

00000ec0 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     ec0:	fc 01       	movw	r30, r24
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	08 95       	ret

00000ec8 <servo_initialise>:
#include "Servo.h"


void servo_initialise()
{
	rcServoCreate();		
     ec8:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <rcServoCreate>
     ecc:	08 95       	ret

00000ece <servo_open>:
}

void servo_open()
{
	rcServoSet(0, 100);
     ece:	64 e6       	ldi	r22, 0x64	; 100
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <rcServoSet>
     ed6:	08 95       	ret

00000ed8 <servo_close>:
}
void servo_close()
{
	rcServoSet(0, -100);
     ed8:	6c e9       	ldi	r22, 0x9C	; 156
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <rcServoSet>
     ee0:	08 95       	ret

00000ee2 <soundReader_create>:
	if (self == NULL)
		return;

	vTaskDelete(self->handleTask);
	vPortFree(self);
}
     ee2:	2f 92       	push	r2
     ee4:	3f 92       	push	r3
     ee6:	4f 92       	push	r4
     ee8:	5f 92       	push	r5
     eea:	6f 92       	push	r6
     eec:	7f 92       	push	r7
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	88 2e       	mov	r8, r24
     f08:	96 2e       	mov	r9, r22
     f0a:	1a 01       	movw	r2, r20
     f0c:	28 01       	movw	r4, r16
     f0e:	39 01       	movw	r6, r18
     f10:	64 e0       	ldi	r22, 0x04	; 4
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <calloc>
     f1c:	ec 01       	movw	r28, r24
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	41 f1       	breq	.+80     	; 0xf72 <soundReader_create+0x90>
     f22:	fc 01       	movw	r30, r24
     f24:	11 92       	st	Z+, r1
     f26:	11 92       	st	Z+, r1
     f28:	30 92 11 08 	sts	0x0811, r3	; 0x800811 <_startMeasureEventGroup+0x1>
     f2c:	20 92 10 08 	sts	0x0810, r2	; 0x800810 <_startMeasureEventGroup>
     f30:	40 92 0c 08 	sts	0x080C, r4	; 0x80080c <_startMeasureBit>
     f34:	50 92 0d 08 	sts	0x080D, r5	; 0x80080d <_startMeasureBit+0x1>
     f38:	60 92 0e 08 	sts	0x080E, r6	; 0x80080e <_startMeasureBit+0x2>
     f3c:	70 92 0f 08 	sts	0x080F, r7	; 0x80080f <_startMeasureBit+0x3>
     f40:	f0 92 0b 08 	sts	0x080B, r15	; 0x80080b <_readyMeasuringEventGroup+0x1>
     f44:	e0 92 0a 08 	sts	0x080A, r14	; 0x80080a <_readyMeasuringEventGroup>
     f48:	a0 92 06 08 	sts	0x0806, r10	; 0x800806 <_readyBit>
     f4c:	b0 92 07 08 	sts	0x0807, r11	; 0x800807 <_readyBit+0x1>
     f50:	c0 92 08 08 	sts	0x0808, r12	; 0x800808 <_readyBit+0x2>
     f54:	d0 92 09 08 	sts	0x0809, r13	; 0x800809 <_readyBit+0x3>
     f58:	49 2d       	mov	r20, r9
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	48 53       	subi	r20, 0x38	; 56
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	7f 01       	movw	r14, r30
     f62:	08 2d       	mov	r16, r8
     f64:	9c 01       	movw	r18, r24
     f66:	66 e6       	ldi	r22, 0x66	; 102
     f68:	73 e0       	ldi	r23, 0x03	; 3
     f6a:	81 e2       	ldi	r24, 0x21	; 33
     f6c:	98 e0       	ldi	r25, 0x08	; 8
     f6e:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
     f72:	ce 01       	movw	r24, r28
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	bf 90       	pop	r11
     f86:	af 90       	pop	r10
     f88:	9f 90       	pop	r9
     f8a:	8f 90       	pop	r8
     f8c:	7f 90       	pop	r7
     f8e:	6f 90       	pop	r6
     f90:	5f 90       	pop	r5
     f92:	4f 90       	pop	r4
     f94:	3f 90       	pop	r3
     f96:	2f 90       	pop	r2
     f98:	08 95       	ret

00000f9a <soundReader_measure>:


void soundReader_measure(soundReader_t self) {
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
	
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, 
     fac:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <_startMeasureBit>
     fb0:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fb4:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fb8:	70 91 0f 08 	lds	r23, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fbc:	cc 24       	eor	r12, r12
     fbe:	ca 94       	dec	r12
     fc0:	dc 2c       	mov	r13, r12
     fc2:	76 01       	movw	r14, r12
     fc4:	01 e0       	ldi	r16, 0x01	; 1
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <_startMeasureEventGroup>
     fcc:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <_startMeasureEventGroup+0x1>
     fd0:	90 d1       	rcall	.+800    	; 0x12f2 <xEventGroupWaitBits>
	_startMeasureBit, 
	pdTRUE, 
	pdTRUE, 
	portMAX_DELAY); 

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     fd2:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <_startMeasureBit>
     fd6:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <_startMeasureBit+0x1>
     fda:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <_startMeasureBit+0x2>
     fde:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <_startMeasureBit+0x3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	80 23       	and	r24, r16
     fe8:	91 23       	and	r25, r17
     fea:	a2 23       	and	r26, r18
     fec:	b3 23       	and	r27, r19
     fee:	08 17       	cp	r16, r24
     ff0:	19 07       	cpc	r17, r25
     ff2:	2a 07       	cpc	r18, r26
     ff4:	3b 07       	cpc	r19, r27
     ff6:	e1 f4       	brne	.+56     	; 0x1030 <soundReader_measure+0x96>
		srand(time(NULL));
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	74 da       	rcall	.-2840   	; 0x4e6 <time>
     ffe:	cb 01       	movw	r24, r22
    1000:	0e 94 f6 30 	call	0x61ec	; 0x61ec <srand>
		self->value = rand()%105 + 15;
    1004:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <rand>
    1008:	69 e6       	ldi	r22, 0x69	; 105
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__divmodhi4>
    1010:	0f 96       	adiw	r24, 0x0f	; 15
    1012:	99 83       	std	Y+1, r25	; 0x01
    1014:	88 83       	st	Y, r24
		
		//set done bit so that device knows measurement is done
		xEventGroupSetBits(_readyMeasuringEventGroup, _readyBit);
    1016:	40 91 06 08 	lds	r20, 0x0806	; 0x800806 <_readyBit>
    101a:	50 91 07 08 	lds	r21, 0x0807	; 0x800807 <_readyBit+0x1>
    101e:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <_readyBit+0x2>
    1022:	70 91 09 08 	lds	r23, 0x0809	; 0x800809 <_readyBit+0x3>
    1026:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_readyMeasuringEventGroup>
    102a:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_readyMeasuringEventGroup+0x1>
    102e:	21 d2       	rcall	.+1090   	; 0x1472 <xEventGroupSetBits>
	}
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	08 95       	ret

00001042 <soundReader_executeTask>:
	TaskHandle_t handleTask;
}soundReader;


//actual task, methods devided so that it is possible to test
void soundReader_executeTask(void* self) {
    1042:	ec 01       	movw	r28, r24
	for (;;) {
		soundReader_measure((soundReader_t)self);
    1044:	ce 01       	movw	r24, r28
    1046:	a9 df       	rcall	.-174    	; 0xf9a <soundReader_measure>
    1048:	fd cf       	rjmp	.-6      	; 0x1044 <soundReader_executeTask+0x2>

0000104a <soundReader_getSound>:
	}
}

uint16_t soundReader_getSound(soundReader_t self) {
	return self->value;
}
    104a:	fc 01       	movw	r30, r24
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	08 95       	ret

00001052 <lora_UpLinkHandler_create>:
	}
}


void lora_UpLinkHandler_create(UBaseType_t priority, UBaseType_t stack, MessageBufferHandle_t messageBuffer)
{
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	9a 01       	movw	r18, r20
	_buffer = messageBuffer;
	
	xTaskCreate(
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	ab 01       	movw	r20, r22
    105e:	48 53       	subi	r20, 0x38	; 56
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	e1 2c       	mov	r14, r1
    1064:	f1 2c       	mov	r15, r1
    1066:	08 2f       	mov	r16, r24
    1068:	62 e7       	ldi	r22, 0x72	; 114
    106a:	73 e0       	ldi	r23, 0x03	; 3
    106c:	82 e5       	ldi	r24, 0x52	; 82
    106e:	99 e0       	ldi	r25, 0x09	; 9
    1070:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"
	,  stack+200
	,  (void*)messageBuffer
	,  priority
	,  NULL );
}
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <lora_UpLinkHandler_task>:
		}
	}
}

void lora_UpLinkHandler_task(MessageBufferHandle_t messageBuffer)
{
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	7c 01       	movw	r14, r24
	size_t xBytesToSend;
	char rxData[50];
	if (!isSet)
    108c:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <isSet>
    1090:	81 11       	cpse	r24, r1
    1092:	cf c0       	rjmp	.+414    	; 0x1232 <lora_UpLinkHandler_task+0x1b6>
	{
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	0e 94 55 23 	call	0x46aa	; 0x46aa <lora_driver_reset_rn2483>
		vTaskDelay(2);
    109a:	62 e0       	ldi	r22, 0x02	; 2
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
		lora_driver_reset_rn2483(0);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 55 23 	call	0x46aa	; 0x46aa <lora_driver_reset_rn2483>
		vTaskDelay(150);
    10ac:	66 e9       	ldi	r22, 0x96	; 150
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    10b8:	0e 94 0b 23 	call	0x4616	; 0x4616 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 63 21 	call	0x42c6	; 0x42c6 <led_slow_blink>
	//That being said it runs every time when a device is being started.
	
	//START OF ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    10c2:	0e 94 69 23 	call	0x46d2	; 0x46d2 <lora_driver_rn2483_factory_reset>
    10c6:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	8b e7       	ldi	r24, 0x7B	; 123
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    10da:	0e 94 e7 24 	call	0x49ce	; 0x49ce <lora_driver_configure_to_eu868>
    10de:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	8e e8       	ldi	r24, 0x8E	; 142
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	9f 93       	push	r25
    10ec:	8f 93       	push	r24
    10ee:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    10f2:	89 e2       	ldi	r24, 0x29	; 41
    10f4:	98 e0       	ldi	r25, 0x08	; 8
    10f6:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    10fa:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    10fe:	c9 e2       	ldi	r28, 0x29	; 41
    1100:	d8 e0       	ldi	r29, 0x08	; 8
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	87 ea       	ldi	r24, 0xA7	; 167
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	9f 93       	push	r25
    1110:	8f 93       	push	r24
    1112:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 97 23 	call	0x472e	; 0x472e <lora_driver_set_device_identifier>
    111c:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	8b eb       	ldi	r24, 0xBB	; 187
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    1134:	ae 01       	movw	r20, r28
    1136:	60 ed       	ldi	r22, 0xD0	; 208
    1138:	73 e0       	ldi	r23, 0x03	; 3
    113a:	81 ef       	ldi	r24, 0xF1	; 241
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <lora_driver_set_otaa_identity>
    1142:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	80 ed       	ldi	r24, 0xD0	; 208
    1150:	93 e0       	ldi	r25, 0x03	; 3
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	81 ef       	ldi	r24, 0xF1	; 241
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    116a:	0e 94 ca 23 	call	0x4794	; 0x4794 <lora_driver_save_mac>
    116e:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    1172:	9f 93       	push	r25
    1174:	8f 93       	push	r24
    1176:	88 e3       	ldi	r24, 0x38	; 56
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	9f 93       	push	r25
    117c:	8f 93       	push	r24
    117e:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    1182:	8d b7       	in	r24, 0x3d	; 61
    1184:	9e b7       	in	r25, 0x3e	; 62
    1186:	82 96       	adiw	r24, 0x22	; 34
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	9e bf       	out	0x3e, r25	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	8d bf       	out	0x3d, r24	; 61
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_set_adaptive_data_rate>
    1198:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    119c:	9f 93       	push	r25
    119e:	8f 93       	push	r24
    11a0:	87 e4       	ldi	r24, 0x47	; 71
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
    11ac:	84 ef       	ldi	r24, 0xF4	; 244
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 cf 24 	call	0x499e	; 0x499e <lora_driver_set_receive_delay>
    11b4:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	8f 93       	push	r24
    11c0:	84 ef       	ldi	r24, 0xF4	; 244
    11c2:	8f 93       	push	r24
    11c4:	88 e6       	ldi	r24, 0x68	; 104
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	9f 93       	push	r25
    11ca:	8f 93       	push	r24
    11cc:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
    11d0:	8d b7       	in	r24, 0x3d	; 61
    11d2:	9e b7       	in	r25, 0x3e	; 62
    11d4:	0a 96       	adiw	r24, 0x0a	; 10
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	9e bf       	out	0x3e, r25	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	8d bf       	out	0x3d, r24	; 61
    11e0:	ca e0       	ldi	r28, 0x0A	; 10
    11e2:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11e4:	08 e8       	ldi	r16, 0x88	; 136
    11e6:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <lora_driver_join>
    11ee:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    11f0:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	1f 93       	push	r17
    11fe:	0f 93       	push	r16
    1200:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>

		if ( rc != LoRa_ACCEPTED)
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	d8 16       	cp	r13, r24
    1214:	89 f1       	breq	.+98     	; 0x1278 <lora_UpLinkHandler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 cf 21 	call	0x439e	; 0x439e <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    121c:	66 e3       	ldi	r22, 0x36	; 54
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
    1228:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    122a:	f1 f6       	brne	.-68     	; 0x11e8 <lora_UpLinkHandler_task+0x16c>
    122c:	2c c0       	rjmp	.+88     	; 0x1286 <lora_UpLinkHandler_task+0x20a>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1);

		while (1)
		{
			taskYIELD();
    122e:	39 d4       	rcall	.+2162   	; 0x1aa2 <vPortYield>
    1230:	fe cf       	rjmp	.-4      	; 0x122e <lora_UpLinkHandler_task+0x1b2>

		_lora_setup();
		isSet=true;
	}
	
	xBytesToSend = xMessageBufferReceive(messageBuffer, (void*) &_uplink_payload,
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	98 01       	movw	r18, r16
    1238:	42 e3       	ldi	r20, 0x32	; 50
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	63 e1       	ldi	r22, 0x13	; 19
    123e:	78 e0       	ldi	r23, 0x08	; 8
    1240:	c7 01       	movw	r24, r14
    1242:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
	sizeof(rxData),0);
	if(xBytesToSend >= sizeof(uint8_t)*2)
    1246:	02 97       	sbiw	r24, 0x02	; 2
    1248:	28 f1       	brcs	.+74     	; 0x1294 <lora_UpLinkHandler_task+0x218>
	{
		/**< Status led ST4 (BLUE)*/
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <led_short_puls>
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
    1250:	63 e1       	ldi	r22, 0x13	; 19
    1252:	78 e0       	ldi	r23, 0x08	; 8
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <lora_driver_sent_upload_message>
    125a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <lora_driver_map_return_code_to_text>
    125e:	9f 93       	push	r25
    1260:	8f 93       	push	r24
    1262:	88 ea       	ldi	r24, 0xA8	; 168
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	0e 94 64 31 	call	0x62c8	; 0x62c8 <printf>
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
	}
}
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <lora_UpLinkHandler_task+0x218>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 b1 21 	call	0x4362	; 0x4362 <led_led_on>
		vTaskDelay(150);

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!

		_lora_setup();
		isSet=true;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <isSet>
    1284:	d6 cf       	rjmp	.-84     	; 0x1232 <lora_UpLinkHandler_task+0x1b6>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 c0 21 	call	0x4380	; 0x4380 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 8a 21 	call	0x4314	; 0x4314 <led_fast_blink>
    1292:	cd cf       	rjmp	.-102    	; 0x122e <lora_UpLinkHandler_task+0x1b2>
		//Makes the led light up in a short period.
		led_short_puls(led_ST4);
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
	}
}
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	08 95       	ret

000012a4 <lora_UpLinkHandler_startTask>:

static lora_payload_t _uplink_payload;
static MessageBufferHandle_t _buffer;
static bool isSet=false;

void lora_UpLinkHandler_startTask(void* messageBuffer){
    12a4:	ec 01       	movw	r28, r24
	for(;;)
	{
		lora_UpLinkHandler_task((MessageBufferHandle_t)messageBuffer);
    12a6:	ce 01       	movw	r24, r28
    12a8:	e9 de       	rcall	.-558    	; 0x107c <lora_UpLinkHandler_task>
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <lora_UpLinkHandler_startTask+0x2>

000012ac <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    12ac:	e8 e0       	ldi	r30, 0x08	; 8
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	90 81       	ld	r25, Z
    12b2:	90 7f       	andi	r25, 0xF0	; 240
    12b4:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
    12b6:	90 81       	ld	r25, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	98 2b       	or	r25, r24
    12bc:	90 83       	st	Z, r25
    12be:	08 95       	ret

000012c0 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    12c0:	e8 e0       	ldi	r30, 0x08	; 8
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	80 81       	ld	r24, Z
    12c6:	80 7f       	andi	r24, 0xF0	; 240
    12c8:	80 83       	st	Z, r24
    12ca:	08 95       	ret

000012cc <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	80 e1       	ldi	r24, 0x10	; 16
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	b4 d1       	rcall	.+872    	; 0x163e <pvPortMalloc>
    12d6:	ec 01       	movw	r28, r24
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	39 f0       	breq	.+14     	; 0x12ea <xEventGroupCreate+0x1e>
    12dc:	fc 01       	movw	r30, r24
    12de:	11 92       	st	Z+, r1
    12e0:	11 92       	st	Z+, r1
    12e2:	11 92       	st	Z+, r1
    12e4:	11 92       	st	Z+, r1
    12e6:	cf 01       	movw	r24, r30
    12e8:	94 d2       	rcall	.+1320   	; 0x1812 <vListInitialise>
    12ea:	ce 01       	movw	r24, r28
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <xEventGroupWaitBits>:
    12f2:	2f 92       	push	r2
    12f4:	3f 92       	push	r3
    12f6:	4f 92       	push	r4
    12f8:	5f 92       	push	r5
    12fa:	6f 92       	push	r6
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	ec 01       	movw	r28, r24
    1318:	4a 01       	movw	r8, r20
    131a:	5b 01       	movw	r10, r22
    131c:	62 2e       	mov	r6, r18
    131e:	70 2e       	mov	r7, r16
    1320:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
    1324:	28 80       	ld	r2, Y
    1326:	39 80       	ldd	r3, Y+1	; 0x01
    1328:	4a 80       	ldd	r4, Y+2	; 0x02
    132a:	5b 80       	ldd	r5, Y+3	; 0x03
    132c:	01 11       	cpse	r16, r1
    132e:	0d c0       	rjmp	.+26     	; 0x134a <xEventGroupWaitBits+0x58>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	b2 01       	movw	r22, r4
    1334:	a1 01       	movw	r20, r2
    1336:	48 21       	and	r20, r8
    1338:	59 21       	and	r21, r9
    133a:	6a 21       	and	r22, r10
    133c:	7b 21       	and	r23, r11
    133e:	45 2b       	or	r20, r21
    1340:	46 2b       	or	r20, r22
    1342:	47 2b       	or	r20, r23
    1344:	79 f4       	brne	.+30     	; 0x1364 <xEventGroupWaitBits+0x72>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <xEventGroupWaitBits+0x72>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	b2 01       	movw	r22, r4
    134e:	a1 01       	movw	r20, r2
    1350:	48 21       	and	r20, r8
    1352:	59 21       	and	r21, r9
    1354:	6a 21       	and	r22, r10
    1356:	7b 21       	and	r23, r11
    1358:	48 15       	cp	r20, r8
    135a:	59 05       	cpc	r21, r9
    135c:	6a 05       	cpc	r22, r10
    135e:	7b 05       	cpc	r23, r11
    1360:	09 f0       	breq	.+2      	; 0x1364 <xEventGroupWaitBits+0x72>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	88 23       	and	r24, r24
    1366:	81 f0       	breq	.+32     	; 0x1388 <xEventGroupWaitBits+0x96>
    1368:	66 20       	and	r6, r6
    136a:	09 f4       	brne	.+2      	; 0x136e <xEventGroupWaitBits+0x7c>
    136c:	6b c0       	rjmp	.+214    	; 0x1444 <xEventGroupWaitBits+0x152>
    136e:	80 94       	com	r8
    1370:	90 94       	com	r9
    1372:	a0 94       	com	r10
    1374:	b0 94       	com	r11
    1376:	82 20       	and	r8, r2
    1378:	93 20       	and	r9, r3
    137a:	a4 20       	and	r10, r4
    137c:	b5 20       	and	r11, r5
    137e:	88 82       	st	Y, r8
    1380:	99 82       	std	Y+1, r9	; 0x01
    1382:	aa 82       	std	Y+2, r10	; 0x02
    1384:	bb 82       	std	Y+3, r11	; 0x03
    1386:	5e c0       	rjmp	.+188    	; 0x1444 <xEventGroupWaitBits+0x152>
    1388:	c1 14       	cp	r12, r1
    138a:	d1 04       	cpc	r13, r1
    138c:	e1 04       	cpc	r14, r1
    138e:	f1 04       	cpc	r15, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <xEventGroupWaitBits+0xa2>
    1392:	58 c0       	rjmp	.+176    	; 0x1444 <xEventGroupWaitBits+0x152>
    1394:	66 20       	and	r6, r6
    1396:	29 f0       	breq	.+10     	; 0x13a2 <xEventGroupWaitBits+0xb0>
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <xEventGroupWaitBits+0xb6>
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	ba 01       	movw	r22, r20
    13a8:	71 10       	cpse	r7, r1
    13aa:	74 60       	ori	r23, 0x04	; 4
    13ac:	48 29       	or	r20, r8
    13ae:	59 29       	or	r21, r9
    13b0:	6a 29       	or	r22, r10
    13b2:	7b 29       	or	r23, r11
    13b4:	97 01       	movw	r18, r14
    13b6:	86 01       	movw	r16, r12
    13b8:	ce 01       	movw	r24, r28
    13ba:	04 96       	adiw	r24, 0x04	; 4
    13bc:	0e 94 c4 18 	call	0x3188	; 0x3188 <vTaskPlaceOnUnorderedEventList>
    13c0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    13c4:	81 11       	cpse	r24, r1
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <xEventGroupWaitBits+0xd8>
    13c8:	6c d3       	rcall	.+1752   	; 0x1aa2 <vPortYield>
    13ca:	0e 94 0b 1b 	call	0x3616	; 0x3616 <uxTaskResetEventItemValue>
    13ce:	91 fd       	sbrc	r25, 1
    13d0:	35 c0       	rjmp	.+106    	; 0x143c <xEventGroupWaitBits+0x14a>
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	0f 92       	push	r0
    13d8:	68 81       	ld	r22, Y
    13da:	79 81       	ldd	r23, Y+1	; 0x01
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	71 10       	cpse	r7, r1
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <xEventGroupWaitBits+0x10c>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	75 01       	movw	r14, r10
    13e8:	64 01       	movw	r12, r8
    13ea:	c6 22       	and	r12, r22
    13ec:	d7 22       	and	r13, r23
    13ee:	e8 22       	and	r14, r24
    13f0:	f9 22       	and	r15, r25
    13f2:	cd 28       	or	r12, r13
    13f4:	ce 28       	or	r12, r14
    13f6:	cf 28       	or	r12, r15
    13f8:	79 f4       	brne	.+30     	; 0x1418 <xEventGroupWaitBits+0x126>
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <xEventGroupWaitBits+0x126>
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	75 01       	movw	r14, r10
    1402:	64 01       	movw	r12, r8
    1404:	c6 22       	and	r12, r22
    1406:	d7 22       	and	r13, r23
    1408:	e8 22       	and	r14, r24
    140a:	f9 22       	and	r15, r25
    140c:	c8 14       	cp	r12, r8
    140e:	d9 04       	cpc	r13, r9
    1410:	ea 04       	cpc	r14, r10
    1412:	fb 04       	cpc	r15, r11
    1414:	09 f0       	breq	.+2      	; 0x1418 <xEventGroupWaitBits+0x126>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	22 23       	and	r18, r18
    141a:	71 f0       	breq	.+28     	; 0x1438 <xEventGroupWaitBits+0x146>
    141c:	66 20       	and	r6, r6
    141e:	61 f0       	breq	.+24     	; 0x1438 <xEventGroupWaitBits+0x146>
    1420:	80 94       	com	r8
    1422:	90 94       	com	r9
    1424:	a0 94       	com	r10
    1426:	b0 94       	com	r11
    1428:	86 22       	and	r8, r22
    142a:	97 22       	and	r9, r23
    142c:	a8 22       	and	r10, r24
    142e:	b9 22       	and	r11, r25
    1430:	88 82       	st	Y, r8
    1432:	99 82       	std	Y+1, r9	; 0x01
    1434:	aa 82       	std	Y+2, r10	; 0x02
    1436:	bb 82       	std	Y+3, r11	; 0x03
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	1b 01       	movw	r2, r22
    143e:	2c 01       	movw	r4, r24
    1440:	55 24       	eor	r5, r5
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <xEventGroupWaitBits+0x156>
    1444:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    1448:	c2 01       	movw	r24, r4
    144a:	b1 01       	movw	r22, r2
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	5f 90       	pop	r5
    146a:	4f 90       	pop	r4
    146c:	3f 90       	pop	r3
    146e:	2f 90       	pop	r2
    1470:	08 95       	ret

00001472 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1472:	4f 92       	push	r4
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	ec 01       	movw	r28, r24
    1494:	6a 01       	movw	r12, r20
    1496:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1498:	8c 01       	movw	r16, r24
    149a:	09 5f       	subi	r16, 0xF9	; 249
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    149e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    14a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14a4:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    14a6:	88 81       	ld	r24, Y
    14a8:	99 81       	ldd	r25, Y+1	; 0x01
    14aa:	aa 81       	ldd	r26, Y+2	; 0x02
    14ac:	bb 81       	ldd	r27, Y+3	; 0x03
    14ae:	c8 2a       	or	r12, r24
    14b0:	d9 2a       	or	r13, r25
    14b2:	ea 2a       	or	r14, r26
    14b4:	fb 2a       	or	r15, r27
    14b6:	c8 82       	st	Y, r12
    14b8:	d9 82       	std	Y+1, r13	; 0x01
    14ba:	ea 82       	std	Y+2, r14	; 0x02
    14bc:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    14be:	0e 17       	cp	r16, r30
    14c0:	1f 07       	cpc	r17, r31
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <xEventGroupSetBits+0x54>
    14c4:	45 c0       	rjmp	.+138    	; 0x1550 <xEventGroupSetBits+0xde>
    14c6:	c1 2c       	mov	r12, r1
    14c8:	d1 2c       	mov	r13, r1
    14ca:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14cc:	99 24       	eor	r9, r9
    14ce:	93 94       	inc	r9
    14d0:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    14d2:	a4 80       	ldd	r10, Z+4	; 0x04
    14d4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	a2 81       	ldd	r26, Z+2	; 0x02
    14dc:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    14e4:	b2 fd       	sbrc	r27, 2
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    14e8:	48 80       	ld	r4, Y
    14ea:	59 80       	ldd	r5, Y+1	; 0x01
    14ec:	6a 80       	ldd	r6, Y+2	; 0x02
    14ee:	7b 80       	ldd	r7, Y+3	; 0x03
    14f0:	44 22       	and	r4, r20
    14f2:	55 22       	and	r5, r21
    14f4:	66 22       	and	r6, r22
    14f6:	77 22       	and	r7, r23
    14f8:	29 2d       	mov	r18, r9
    14fa:	45 28       	or	r4, r5
    14fc:	46 28       	or	r4, r6
    14fe:	47 28       	or	r4, r7
    1500:	89 f4       	brne	.+34     	; 0x1524 <xEventGroupSetBits+0xb2>
    1502:	28 2d       	mov	r18, r8
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <xEventGroupSetBits+0xb2>
    1506:	48 80       	ld	r4, Y
    1508:	59 80       	ldd	r5, Y+1	; 0x01
    150a:	6a 80       	ldd	r6, Y+2	; 0x02
    150c:	7b 80       	ldd	r7, Y+3	; 0x03
    150e:	44 22       	and	r4, r20
    1510:	55 22       	and	r5, r21
    1512:	66 22       	and	r6, r22
    1514:	77 22       	and	r7, r23
    1516:	29 2d       	mov	r18, r9
    1518:	44 16       	cp	r4, r20
    151a:	55 06       	cpc	r5, r21
    151c:	66 06       	cpc	r6, r22
    151e:	77 06       	cpc	r7, r23
    1520:	09 f0       	breq	.+2      	; 0x1524 <xEventGroupSetBits+0xb2>
    1522:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1524:	22 23       	and	r18, r18
    1526:	71 f0       	breq	.+28     	; 0x1544 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1528:	b0 ff       	sbrs	r27, 0
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    152c:	c4 2a       	or	r12, r20
    152e:	d5 2a       	or	r13, r21
    1530:	e6 2a       	or	r14, r22
    1532:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1534:	48 81       	ld	r20, Y
    1536:	59 81       	ldd	r21, Y+1	; 0x01
    1538:	6a 81       	ldd	r22, Y+2	; 0x02
    153a:	7b 81       	ldd	r23, Y+3	; 0x03
    153c:	72 60       	ori	r23, 0x02	; 2
    153e:	cf 01       	movw	r24, r30
    1540:	0e 94 4a 19 	call	0x3294	; 0x3294 <vTaskRemoveFromUnorderedEventList>
    1544:	ea 2d       	mov	r30, r10
    1546:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1548:	0e 17       	cp	r16, r30
    154a:	1f 07       	cpc	r17, r31
    154c:	11 f6       	brne	.-124    	; 0x14d2 <xEventGroupSetBits+0x60>
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1550:	c1 2c       	mov	r12, r1
    1552:	d1 2c       	mov	r13, r1
    1554:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1556:	c0 94       	com	r12
    1558:	d0 94       	com	r13
    155a:	e0 94       	com	r14
    155c:	f0 94       	com	r15
    155e:	88 81       	ld	r24, Y
    1560:	99 81       	ldd	r25, Y+1	; 0x01
    1562:	aa 81       	ldd	r26, Y+2	; 0x02
    1564:	bb 81       	ldd	r27, Y+3	; 0x03
    1566:	c8 22       	and	r12, r24
    1568:	d9 22       	and	r13, r25
    156a:	ea 22       	and	r14, r26
    156c:	fb 22       	and	r15, r27
    156e:	c8 82       	st	Y, r12
    1570:	d9 82       	std	Y+1, r13	; 0x01
    1572:	ea 82       	std	Y+2, r14	; 0x02
    1574:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1576:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    157a:	68 81       	ld	r22, Y
    157c:	79 81       	ldd	r23, Y+1	; 0x01
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	08 95       	ret

000015a4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    15aa:	e5 e9       	ldi	r30, 0x95	; 149
    15ac:	f8 e0       	ldi	r31, 0x08	; 8
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <prvInsertBlockIntoFreeList+0xe>
    15b0:	f9 01       	movw	r30, r18
    15b2:	20 81       	ld	r18, Z
    15b4:	31 81       	ldd	r19, Z+1	; 0x01
    15b6:	2a 17       	cp	r18, r26
    15b8:	3b 07       	cpc	r19, r27
    15ba:	d0 f3       	brcs	.-12     	; 0x15b0 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	af 01       	movw	r20, r30
    15c2:	48 0f       	add	r20, r24
    15c4:	59 1f       	adc	r21, r25
    15c6:	a4 17       	cp	r26, r20
    15c8:	b5 07       	cpc	r27, r21
    15ca:	49 f4       	brne	.+18     	; 0x15de <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    15cc:	12 96       	adiw	r26, 0x02	; 2
    15ce:	4d 91       	ld	r20, X+
    15d0:	5c 91       	ld	r21, X
    15d2:	13 97       	sbiw	r26, 0x03	; 3
    15d4:	84 0f       	add	r24, r20
    15d6:	95 1f       	adc	r25, r21
    15d8:	93 83       	std	Z+3, r25	; 0x03
    15da:	82 83       	std	Z+2, r24	; 0x02
    15dc:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	8d 91       	ld	r24, X+
    15e2:	9c 91       	ld	r25, X
    15e4:	13 97       	sbiw	r26, 0x03	; 3
    15e6:	ed 01       	movw	r28, r26
    15e8:	c8 0f       	add	r28, r24
    15ea:	d9 1f       	adc	r29, r25
    15ec:	2c 17       	cp	r18, r28
    15ee:	3d 07       	cpc	r19, r29
    15f0:	d9 f4       	brne	.+54     	; 0x1628 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    15f2:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <pxEnd>
    15f6:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <pxEnd+0x1>
    15fa:	c2 17       	cp	r28, r18
    15fc:	d3 07       	cpc	r29, r19
    15fe:	81 f0       	breq	.+32     	; 0x1620 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1600:	2a 81       	ldd	r18, Y+2	; 0x02
    1602:	3b 81       	ldd	r19, Y+3	; 0x03
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	13 96       	adiw	r26, 0x03	; 3
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1610:	c0 81       	ld	r28, Z
    1612:	d1 81       	ldd	r29, Z+1	; 0x01
    1614:	88 81       	ld	r24, Y
    1616:	99 81       	ldd	r25, Y+1	; 0x01
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 93       	st	X, r25
    161c:	8e 93       	st	-X, r24
    161e:	07 c0       	rjmp	.+14     	; 0x162e <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	dc 93       	st	X, r29
    1624:	ce 93       	st	-X, r28
    1626:	03 c0       	rjmp	.+6      	; 0x162e <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	3c 93       	st	X, r19
    162c:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    162e:	ae 17       	cp	r26, r30
    1630:	bf 07       	cpc	r27, r31
    1632:	11 f0       	breq	.+4      	; 0x1638 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1634:	b1 83       	std	Z+1, r27	; 0x01
    1636:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1650:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1654:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    1658:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    165c:	89 2b       	or	r24, r25
    165e:	41 f5       	brne	.+80     	; 0x16b0 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1660:	e5 e9       	ldi	r30, 0x95	; 149
    1662:	f8 e0       	ldi	r31, 0x08	; 8
    1664:	a9 e9       	ldi	r26, 0x99	; 153
    1666:	b8 e0       	ldi	r27, 0x08	; 8
    1668:	b1 83       	std	Z+1, r27	; 0x01
    166a:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1670:	e5 e3       	ldi	r30, 0x35	; 53
    1672:	f8 e1       	ldi	r31, 0x18	; 24
    1674:	f0 93 94 08 	sts	0x0894, r31	; 0x800894 <pxEnd+0x1>
    1678:	e0 93 93 08 	sts	0x0893, r30	; 0x800893 <pxEnd>
	pxEnd->xBlockSize = 0;
    167c:	13 82       	std	Z+3, r1	; 0x03
    167e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1680:	11 82       	std	Z+1, r1	; 0x01
    1682:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1684:	8c e9       	ldi	r24, 0x9C	; 156
    1686:	9f e0       	ldi	r25, 0x0F	; 15
    1688:	13 96       	adiw	r26, 0x03	; 3
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
    168e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1690:	ed 93       	st	X+, r30
    1692:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1694:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1698:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    169c:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    16a0:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e8       	ldi	r25, 0x80	; 128
    16a8:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xBlockAllocatedBit+0x1>
    16ac:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    16b0:	e0 90 8d 08 	lds	r14, 0x088D	; 0x80088d <xBlockAllocatedBit>
    16b4:	f0 90 8e 08 	lds	r15, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    16b8:	c7 01       	movw	r24, r14
    16ba:	8c 23       	and	r24, r28
    16bc:	9d 23       	and	r25, r29
    16be:	89 2b       	or	r24, r25
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <pvPortMalloc+0x86>
    16c2:	66 c0       	rjmp	.+204    	; 0x1790 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    16c4:	20 97       	sbiw	r28, 0x00	; 0
    16c6:	09 f4       	brne	.+2      	; 0x16ca <pvPortMalloc+0x8c>
    16c8:	66 c0       	rjmp	.+204    	; 0x1796 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    16ca:	ae 01       	movw	r20, r28
    16cc:	4c 5f       	subi	r20, 0xFC	; 252
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <pvPortMalloc+0x96>
    16d2:	5e c0       	rjmp	.+188    	; 0x1790 <pvPortMalloc+0x152>
    16d4:	00 91 91 08 	lds	r16, 0x0891	; 0x800891 <xFreeBytesRemaining>
    16d8:	10 91 92 08 	lds	r17, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    16dc:	04 17       	cp	r16, r20
    16de:	15 07       	cpc	r17, r21
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <pvPortMalloc+0xa6>
    16e2:	56 c0       	rjmp	.+172    	; 0x1790 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    16e4:	c0 91 95 08 	lds	r28, 0x0895	; 0x800895 <xStart>
    16e8:	d0 91 96 08 	lds	r29, 0x0896	; 0x800896 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    16ec:	e5 e9       	ldi	r30, 0x95	; 149
    16ee:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <pvPortMalloc+0xb8>
    16f2:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    16f4:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    16f6:	2a 81       	ldd	r18, Y+2	; 0x02
    16f8:	3b 81       	ldd	r19, Y+3	; 0x03
    16fa:	24 17       	cp	r18, r20
    16fc:	35 07       	cpc	r19, r21
    16fe:	28 f4       	brcc	.+10     	; 0x170a <pvPortMalloc+0xcc>
    1700:	28 81       	ld	r18, Y
    1702:	39 81       	ldd	r19, Y+1	; 0x01
    1704:	21 15       	cp	r18, r1
    1706:	31 05       	cpc	r19, r1
    1708:	a1 f7       	brne	.-24     	; 0x16f2 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    170a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <pxEnd>
    170e:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <pxEnd+0x1>
    1712:	c8 17       	cp	r28, r24
    1714:	d9 07       	cpc	r29, r25
    1716:	e1 f1       	breq	.+120    	; 0x1790 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1718:	c0 80       	ld	r12, Z
    171a:	d1 80       	ldd	r13, Z+1	; 0x01
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	c8 0e       	add	r12, r24
    1720:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1722:	88 81       	ld	r24, Y
    1724:	99 81       	ldd	r25, Y+1	; 0x01
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    172a:	2a 81       	ldd	r18, Y+2	; 0x02
    172c:	3b 81       	ldd	r19, Y+3	; 0x03
    172e:	24 1b       	sub	r18, r20
    1730:	35 0b       	sbc	r19, r21
    1732:	29 30       	cpi	r18, 0x09	; 9
    1734:	31 05       	cpc	r19, r1
    1736:	48 f0       	brcs	.+18     	; 0x174a <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1738:	ce 01       	movw	r24, r28
    173a:	84 0f       	add	r24, r20
    173c:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    173e:	fc 01       	movw	r30, r24
    1740:	33 83       	std	Z+3, r19	; 0x03
    1742:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    1744:	5b 83       	std	Y+3, r21	; 0x03
    1746:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1748:	2d df       	rcall	.-422    	; 0x15a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	08 1b       	sub	r16, r24
    1750:	19 0b       	sbc	r17, r25
    1752:	10 93 92 08 	sts	0x0892, r17	; 0x800892 <xFreeBytesRemaining+0x1>
    1756:	00 93 91 08 	sts	0x0891, r16	; 0x800891 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    175a:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <xMinimumEverFreeBytesRemaining>
    175e:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    1762:	02 17       	cp	r16, r18
    1764:	13 07       	cpc	r17, r19
    1766:	20 f4       	brcc	.+8      	; 0x1770 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1768:	10 93 90 08 	sts	0x0890, r17	; 0x800890 <xMinimumEverFreeBytesRemaining+0x1>
    176c:	00 93 8f 08 	sts	0x088F, r16	; 0x80088f <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1770:	e8 2a       	or	r14, r24
    1772:	f9 2a       	or	r15, r25
    1774:	fb 82       	std	Y+3, r15	; 0x03
    1776:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    177c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1780:	c1 14       	cp	r12, r1
    1782:	d1 04       	cpc	r13, r1
    1784:	59 f4       	brne	.+22     	; 0x179c <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    1786:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <vApplicationMallocFailedHook>
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    178e:	06 c0       	rjmp	.+12     	; 0x179c <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1790:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    1794:	f8 cf       	rjmp	.-16     	; 0x1786 <pvPortMalloc+0x148>
    1796:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
    179a:	f5 cf       	rjmp	.-22     	; 0x1786 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    179c:	c6 01       	movw	r24, r12
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	08 95       	ret

000017b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	51 f1       	breq	.+84     	; 0x180c <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    17b8:	fc 01       	movw	r30, r24
    17ba:	34 97       	sbiw	r30, 0x04	; 4
    17bc:	22 81       	ldd	r18, Z+2	; 0x02
    17be:	33 81       	ldd	r19, Z+3	; 0x03
    17c0:	40 91 8d 08 	lds	r20, 0x088D	; 0x80088d <xBlockAllocatedBit>
    17c4:	50 91 8e 08 	lds	r21, 0x088E	; 0x80088e <xBlockAllocatedBit+0x1>
    17c8:	b9 01       	movw	r22, r18
    17ca:	64 23       	and	r22, r20
    17cc:	75 23       	and	r23, r21
    17ce:	67 2b       	or	r22, r23
    17d0:	e9 f0       	breq	.+58     	; 0x180c <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	67 2b       	or	r22, r23
    17d8:	c9 f4       	brne	.+50     	; 0x180c <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    17da:	ef 01       	movw	r28, r30
    17dc:	40 95       	com	r20
    17de:	50 95       	com	r21
    17e0:	24 23       	and	r18, r20
    17e2:	35 23       	and	r19, r21
    17e4:	33 83       	std	Z+3, r19	; 0x03
    17e6:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    17e8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    17ec:	20 91 91 08 	lds	r18, 0x0891	; 0x800891 <xFreeBytesRemaining>
    17f0:	30 91 92 08 	lds	r19, 0x0892	; 0x800892 <xFreeBytesRemaining+0x1>
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xFreeBytesRemaining+0x1>
    1800:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1804:	ce 01       	movw	r24, r28
    1806:	ce de       	rcall	.-612    	; 0x15a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1808:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1812:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1814:	03 96       	adiw	r24, 0x03	; 3
    1816:	92 83       	std	Z+2, r25	; 0x02
    1818:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    181a:	4f ef       	ldi	r20, 0xFF	; 255
    181c:	5f ef       	ldi	r21, 0xFF	; 255
    181e:	ba 01       	movw	r22, r20
    1820:	43 83       	std	Z+3, r20	; 0x03
    1822:	54 83       	std	Z+4, r21	; 0x04
    1824:	65 83       	std	Z+5, r22	; 0x05
    1826:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1828:	90 87       	std	Z+8, r25	; 0x08
    182a:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    182c:	92 87       	std	Z+10, r25	; 0x0a
    182e:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1830:	10 82       	st	Z, r1
    1832:	08 95       	ret

00001834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1834:	fc 01       	movw	r30, r24
    1836:	13 86       	std	Z+11, r1	; 0x0b
    1838:	12 86       	std	Z+10, r1	; 0x0a
    183a:	08 95       	ret

0000183c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	9c 01       	movw	r18, r24
    1842:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1844:	dc 01       	movw	r26, r24
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	cd 91       	ld	r28, X+
    184a:	dc 91       	ld	r29, X
    184c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    184e:	d5 83       	std	Z+5, r29	; 0x05
    1850:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	97 83       	std	Z+7, r25	; 0x07
    1858:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	dc 01       	movw	r26, r24
    1860:	15 96       	adiw	r26, 0x05	; 5
    1862:	7c 93       	st	X, r23
    1864:	6e 93       	st	-X, r22
    1866:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1868:	7f 83       	std	Y+7, r23	; 0x07
    186a:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    186c:	33 87       	std	Z+11, r19	; 0x0b
    186e:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1870:	f9 01       	movw	r30, r18
    1872:	80 81       	ld	r24, Z
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1888:	08 81       	ld	r16, Y
    188a:	19 81       	ldd	r17, Y+1	; 0x01
    188c:	2a 81       	ldd	r18, Y+2	; 0x02
    188e:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1890:	0f 3f       	cpi	r16, 0xFF	; 255
    1892:	4f ef       	ldi	r20, 0xFF	; 255
    1894:	14 07       	cpc	r17, r20
    1896:	24 07       	cpc	r18, r20
    1898:	34 07       	cpc	r19, r20
    189a:	21 f4       	brne	.+8      	; 0x18a4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    189c:	fc 01       	movw	r30, r24
    189e:	a1 85       	ldd	r26, Z+9	; 0x09
    18a0:	b2 85       	ldd	r27, Z+10	; 0x0a
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    18a4:	dc 01       	movw	r26, r24
    18a6:	13 96       	adiw	r26, 0x03	; 3
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vListInsert+0x2e>
    18aa:	df 01       	movw	r26, r30
    18ac:	14 96       	adiw	r26, 0x04	; 4
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	15 97       	sbiw	r26, 0x05	; 5
    18b4:	40 81       	ld	r20, Z
    18b6:	51 81       	ldd	r21, Z+1	; 0x01
    18b8:	62 81       	ldd	r22, Z+2	; 0x02
    18ba:	73 81       	ldd	r23, Z+3	; 0x03
    18bc:	04 17       	cp	r16, r20
    18be:	15 07       	cpc	r17, r21
    18c0:	26 07       	cpc	r18, r22
    18c2:	37 07       	cpc	r19, r23
    18c4:	90 f7       	brcc	.-28     	; 0x18aa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18c6:	14 96       	adiw	r26, 0x04	; 4
    18c8:	ed 91       	ld	r30, X+
    18ca:	fc 91       	ld	r31, X
    18cc:	15 97       	sbiw	r26, 0x05	; 5
    18ce:	fd 83       	std	Y+5, r31	; 0x05
    18d0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18d2:	d7 83       	std	Z+7, r29	; 0x07
    18d4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    18d6:	bf 83       	std	Y+7, r27	; 0x07
    18d8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    18da:	15 96       	adiw	r26, 0x05	; 5
    18dc:	dc 93       	st	X, r29
    18de:	ce 93       	st	-X, r28
    18e0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18e2:	9b 87       	std	Y+11, r25	; 0x0b
    18e4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 81       	ld	r18, Z
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	20 83       	st	Z, r18
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1900:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1902:	c4 81       	ldd	r28, Z+4	; 0x04
    1904:	d5 81       	ldd	r29, Z+5	; 0x05
    1906:	86 81       	ldd	r24, Z+6	; 0x06
    1908:	97 81       	ldd	r25, Z+7	; 0x07
    190a:	9f 83       	std	Y+7, r25	; 0x07
    190c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    190e:	c6 81       	ldd	r28, Z+6	; 0x06
    1910:	d7 81       	ldd	r29, Z+7	; 0x07
    1912:	84 81       	ldd	r24, Z+4	; 0x04
    1914:	95 81       	ldd	r25, Z+5	; 0x05
    1916:	9d 83       	std	Y+5, r25	; 0x05
    1918:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	12 97       	sbiw	r26, 0x02	; 2
    1922:	e8 17       	cp	r30, r24
    1924:	f9 07       	cpc	r31, r25
    1926:	31 f4       	brne	.+12     	; 0x1934 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1928:	86 81       	ldd	r24, Z+6	; 0x06
    192a:	97 81       	ldd	r25, Z+7	; 0x07
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	9c 93       	st	X, r25
    1930:	8e 93       	st	-X, r24
    1932:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1934:	13 86       	std	Z+11, r1	; 0x0b
    1936:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1938:	8c 91       	ld	r24, X
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    193e:	8c 91       	ld	r24, X
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1946:	31 e1       	ldi	r19, 0x11	; 17
    1948:	fc 01       	movw	r30, r24
    194a:	30 83       	st	Z, r19
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	22 e2       	ldi	r18, 0x22	; 34
    1950:	20 83       	st	Z, r18
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	a3 e3       	ldi	r26, 0x33	; 51
    1956:	a0 83       	st	Z, r26
    1958:	31 97       	sbiw	r30, 0x01	; 1
    195a:	60 83       	st	Z, r22
    195c:	31 97       	sbiw	r30, 0x01	; 1
    195e:	70 83       	st	Z, r23
    1960:	31 97       	sbiw	r30, 0x01	; 1
    1962:	10 82       	st	Z, r1
    1964:	31 97       	sbiw	r30, 0x01	; 1
    1966:	10 82       	st	Z, r1
    1968:	31 97       	sbiw	r30, 0x01	; 1
    196a:	60 e8       	ldi	r22, 0x80	; 128
    196c:	60 83       	st	Z, r22
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	10 82       	st	Z, r1
    1972:	31 97       	sbiw	r30, 0x01	; 1
    1974:	10 82       	st	Z, r1
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	10 82       	st	Z, r1
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	60 83       	st	Z, r22
    1980:	31 97       	sbiw	r30, 0x01	; 1
    1982:	63 e0       	ldi	r22, 0x03	; 3
    1984:	60 83       	st	Z, r22
    1986:	31 97       	sbiw	r30, 0x01	; 1
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	60 83       	st	Z, r22
    198c:	31 97       	sbiw	r30, 0x01	; 1
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	60 83       	st	Z, r22
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	66 e0       	ldi	r22, 0x06	; 6
    1996:	60 83       	st	Z, r22
    1998:	31 97       	sbiw	r30, 0x01	; 1
    199a:	67 e0       	ldi	r22, 0x07	; 7
    199c:	60 83       	st	Z, r22
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	68 e0       	ldi	r22, 0x08	; 8
    19a2:	60 83       	st	Z, r22
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	69 e0       	ldi	r22, 0x09	; 9
    19a8:	60 83       	st	Z, r22
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	60 e1       	ldi	r22, 0x10	; 16
    19ae:	60 83       	st	Z, r22
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	30 83       	st	Z, r19
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	32 e1       	ldi	r19, 0x12	; 18
    19b8:	30 83       	st	Z, r19
    19ba:	31 97       	sbiw	r30, 0x01	; 1
    19bc:	33 e1       	ldi	r19, 0x13	; 19
    19be:	30 83       	st	Z, r19
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	34 e1       	ldi	r19, 0x14	; 20
    19c4:	30 83       	st	Z, r19
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	35 e1       	ldi	r19, 0x15	; 21
    19ca:	30 83       	st	Z, r19
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	36 e1       	ldi	r19, 0x16	; 22
    19d0:	30 83       	st	Z, r19
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	37 e1       	ldi	r19, 0x17	; 23
    19d6:	30 83       	st	Z, r19
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	38 e1       	ldi	r19, 0x18	; 24
    19dc:	30 83       	st	Z, r19
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	39 e1       	ldi	r19, 0x19	; 25
    19e2:	30 83       	st	Z, r19
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	30 e2       	ldi	r19, 0x20	; 32
    19e8:	30 83       	st	Z, r19
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	31 e2       	ldi	r19, 0x21	; 33
    19ee:	30 83       	st	Z, r19
    19f0:	31 97       	sbiw	r30, 0x01	; 1
    19f2:	20 83       	st	Z, r18
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	23 e2       	ldi	r18, 0x23	; 35
    19f8:	20 83       	st	Z, r18
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	40 83       	st	Z, r20
    19fe:	31 97       	sbiw	r30, 0x01	; 1
    1a00:	50 83       	st	Z, r21
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	26 e2       	ldi	r18, 0x26	; 38
    1a06:	20 83       	st	Z, r18
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	27 e2       	ldi	r18, 0x27	; 39
    1a0c:	20 83       	st	Z, r18
    1a0e:	31 97       	sbiw	r30, 0x01	; 1
    1a10:	28 e2       	ldi	r18, 0x28	; 40
    1a12:	20 83       	st	Z, r18
    1a14:	31 97       	sbiw	r30, 0x01	; 1
    1a16:	29 e2       	ldi	r18, 0x29	; 41
    1a18:	20 83       	st	Z, r18
    1a1a:	31 97       	sbiw	r30, 0x01	; 1
    1a1c:	20 e3       	ldi	r18, 0x30	; 48
    1a1e:	20 83       	st	Z, r18
    1a20:	31 97       	sbiw	r30, 0x01	; 1
    1a22:	21 e3       	ldi	r18, 0x31	; 49
    1a24:	20 83       	st	Z, r18
    1a26:	89 97       	sbiw	r24, 0x29	; 41
    1a28:	08 95       	ret

00001a2a <xPortStartScheduler>:
    1a2a:	a8 95       	wdr
    1a2c:	90 ec       	ldi	r25, 0xC0	; 192
    1a2e:	88 e1       	ldi	r24, 0x18	; 24
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	a8 95       	wdr
    1a36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1a40:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1a44:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1a48:	cd 91       	ld	r28, X+
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	dd 91       	ld	r29, X+
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	bf 90       	pop	r11
    1a7a:	af 90       	pop	r10
    1a7c:	9f 90       	pop	r9
    1a7e:	8f 90       	pop	r8
    1a80:	7f 90       	pop	r7
    1a82:	6f 90       	pop	r6
    1a84:	5f 90       	pop	r5
    1a86:	4f 90       	pop	r4
    1a88:	3f 90       	pop	r3
    1a8a:	2f 90       	pop	r2
    1a8c:	1f 90       	pop	r1
    1a8e:	0f 90       	pop	r0
    1a90:	0c be       	out	0x3c, r0	; 60
    1a92:	0f 90       	pop	r0
    1a94:	0b be       	out	0x3b, r0	; 59
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	08 95       	ret
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 95       	ret

00001aa2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	0f 92       	push	r0
    1aaa:	0b b6       	in	r0, 0x3b	; 59
    1aac:	0f 92       	push	r0
    1aae:	0c b6       	in	r0, 0x3c	; 60
    1ab0:	0f 92       	push	r0
    1ab2:	1f 92       	push	r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 92       	push	r2
    1ab8:	3f 92       	push	r3
    1aba:	4f 92       	push	r4
    1abc:	5f 92       	push	r5
    1abe:	6f 92       	push	r6
    1ac0:	7f 92       	push	r7
    1ac2:	8f 92       	push	r8
    1ac4:	9f 92       	push	r9
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1af6:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1afa:	0d b6       	in	r0, 0x3d	; 61
    1afc:	0d 92       	st	X+, r0
    1afe:	0e b6       	in	r0, 0x3e	; 62
    1b00:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b02:	0e 94 2e 18 	call	0x305c	; 0x305c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b06:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1b0a:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1b0e:	cd 91       	ld	r28, X+
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	dd 91       	ld	r29, X+
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	7f 90       	pop	r7
    1b48:	6f 90       	pop	r6
    1b4a:	5f 90       	pop	r5
    1b4c:	4f 90       	pop	r4
    1b4e:	3f 90       	pop	r3
    1b50:	2f 90       	pop	r2
    1b52:	1f 90       	pop	r1
    1b54:	0f 90       	pop	r0
    1b56:	0c be       	out	0x3c, r0	; 60
    1b58:	0f 90       	pop	r0
    1b5a:	0b be       	out	0x3b, r0	; 59
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b62:	08 95       	ret

00001b64 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b64:	0f 92       	push	r0
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	0f 92       	push	r0
    1b6c:	0b b6       	in	r0, 0x3b	; 59
    1b6e:	0f 92       	push	r0
    1b70:	0c b6       	in	r0, 0x3c	; 60
    1b72:	0f 92       	push	r0
    1b74:	1f 92       	push	r1
    1b76:	11 24       	eor	r1, r1
    1b78:	2f 92       	push	r2
    1b7a:	3f 92       	push	r3
    1b7c:	4f 92       	push	r4
    1b7e:	5f 92       	push	r5
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	2f 93       	push	r18
    1b9a:	3f 93       	push	r19
    1b9c:	4f 93       	push	r20
    1b9e:	5f 93       	push	r21
    1ba0:	6f 93       	push	r22
    1ba2:	7f 93       	push	r23
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	af 93       	push	r26
    1baa:	bf 93       	push	r27
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1bb8:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1bbc:	0d b6       	in	r0, 0x3d	; 61
    1bbe:	0d 92       	st	X+, r0
    1bc0:	0e b6       	in	r0, 0x3e	; 62
    1bc2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1bc4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1bc6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <xTaskIncrementTick>
    1bca:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bcc:	0e 94 2e 18 	call	0x305c	; 0x305c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bd0:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    1bd4:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    1bd8:	cd 91       	ld	r28, X+
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	dd 91       	ld	r29, X+
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
    1c14:	5f 90       	pop	r5
    1c16:	4f 90       	pop	r4
    1c18:	3f 90       	pop	r3
    1c1a:	2f 90       	pop	r2
    1c1c:	1f 90       	pop	r1
    1c1e:	0f 90       	pop	r0
    1c20:	0c be       	out	0x3c, r0	; 60
    1c22:	0f 90       	pop	r0
    1c24:	0b be       	out	0x3b, r0	; 59
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1c2c:	08 95       	ret

00001c2e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1c2e:	9a df       	rcall	.-204    	; 0x1b64 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1c30:	18 95       	reti

00001c32 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	0f 92       	push	r0
    1c38:	fc 01       	movw	r30, r24
    1c3a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	91 11       	cpse	r25, r1
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	08 95       	ret

00001c48 <prvCopyDataToQueue>:
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	04 2f       	mov	r16, r20
    1c54:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c56:	48 a1       	ldd	r20, Y+32	; 0x20
    1c58:	41 11       	cpse	r20, r1
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <prvCopyDataToQueue+0x2c>
    1c5c:	88 81       	ld	r24, Y
    1c5e:	99 81       	ldd	r25, Y+1	; 0x01
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <prvCopyDataToQueue+0x1e>
    1c64:	42 c0       	rjmp	.+132    	; 0x1cea <prvCopyDataToQueue+0xa2>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <xTaskPriorityDisinherit>
    1c6e:	1d 82       	std	Y+5, r1	; 0x05
    1c70:	1c 82       	std	Y+4, r1	; 0x04
    1c72:	42 c0       	rjmp	.+132    	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1c74:	01 11       	cpse	r16, r1
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <prvCopyDataToQueue+0x5e>
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	0e 94 05 31 	call	0x620a	; 0x620a <memcpy>
    1c82:	28 a1       	ldd	r18, Y+32	; 0x20
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	82 0f       	add	r24, r18
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	82 17       	cp	r24, r18
    1c96:	93 07       	cpc	r25, r19
    1c98:	50 f1       	brcs	.+84     	; 0x1cee <prvCopyDataToQueue+0xa6>
    1c9a:	88 81       	ld	r24, Y
    1c9c:	99 81       	ldd	r25, Y+1	; 0x01
    1c9e:	9b 83       	std	Y+3, r25	; 0x03
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	29 c0       	rjmp	.+82     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    1caa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cac:	0e 94 05 31 	call	0x620a	; 0x620a <memcpy>
    1cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	91 95       	neg	r25
    1cb6:	81 95       	neg	r24
    1cb8:	91 09       	sbc	r25, r1
    1cba:	2e 81       	ldd	r18, Y+6	; 0x06
    1cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cbe:	28 0f       	add	r18, r24
    1cc0:	39 1f       	adc	r19, r25
    1cc2:	3f 83       	std	Y+7, r19	; 0x07
    1cc4:	2e 83       	std	Y+6, r18	; 0x06
    1cc6:	48 81       	ld	r20, Y
    1cc8:	59 81       	ldd	r21, Y+1	; 0x01
    1cca:	24 17       	cp	r18, r20
    1ccc:	35 07       	cpc	r19, r21
    1cce:	30 f4       	brcc	.+12     	; 0x1cdc <prvCopyDataToQueue+0x94>
    1cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd4:	82 0f       	add	r24, r18
    1cd6:	93 1f       	adc	r25, r19
    1cd8:	9f 83       	std	Y+7, r25	; 0x07
    1cda:	8e 83       	std	Y+6, r24	; 0x06
    1cdc:	02 30       	cpi	r16, 0x02	; 2
    1cde:	49 f4       	brne	.+18     	; 0x1cf2 <prvCopyDataToQueue+0xaa>
    1ce0:	11 23       	and	r17, r17
    1ce2:	49 f0       	breq	.+18     	; 0x1cf6 <prvCopyDataToQueue+0xae>
    1ce4:	11 50       	subi	r17, 0x01	; 1
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	07 c0       	rjmp	.+14     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <prvCopyDataToQueue+0xb0>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	1f 5f       	subi	r17, 0xFF	; 255
    1cfa:	1e 8f       	std	Y+30, r17	; 0x1e
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <prvCopyDataFromQueue>:
    1d06:	fc 01       	movw	r30, r24
    1d08:	40 a1       	ldd	r20, Z+32	; 0x20
    1d0a:	44 23       	and	r20, r20
    1d0c:	a9 f0       	breq	.+42     	; 0x1d38 <prvCopyDataFromQueue+0x32>
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	26 81       	ldd	r18, Z+6	; 0x06
    1d12:	37 81       	ldd	r19, Z+7	; 0x07
    1d14:	24 0f       	add	r18, r20
    1d16:	35 1f       	adc	r19, r21
    1d18:	37 83       	std	Z+7, r19	; 0x07
    1d1a:	26 83       	std	Z+6, r18	; 0x06
    1d1c:	84 81       	ldd	r24, Z+4	; 0x04
    1d1e:	95 81       	ldd	r25, Z+5	; 0x05
    1d20:	28 17       	cp	r18, r24
    1d22:	39 07       	cpc	r19, r25
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <prvCopyDataFromQueue+0x28>
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	97 83       	std	Z+7, r25	; 0x07
    1d2c:	86 83       	std	Z+6, r24	; 0x06
    1d2e:	cb 01       	movw	r24, r22
    1d30:	66 81       	ldd	r22, Z+6	; 0x06
    1d32:	77 81       	ldd	r23, Z+7	; 0x07
    1d34:	0c 94 05 31 	jmp	0x620a	; 0x620a <memcpy>
    1d38:	08 95       	ret

00001d3a <prvUnlockQueue>:
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	8c 01       	movw	r16, r24
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	c2 a1       	ldd	r28, Z+34	; 0x22
    1d50:	1c 16       	cp	r1, r28
    1d52:	ac f4       	brge	.+42     	; 0x1d7e <prvUnlockQueue+0x44>
    1d54:	83 89       	ldd	r24, Z+19	; 0x13
    1d56:	81 11       	cpse	r24, r1
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <prvUnlockQueue+0x2c>
    1d5a:	11 c0       	rjmp	.+34     	; 0x1d7e <prvUnlockQueue+0x44>
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	83 89       	ldd	r24, Z+19	; 0x13
    1d60:	81 11       	cpse	r24, r1
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <prvUnlockQueue+0x34>
    1d64:	0c c0       	rjmp	.+24     	; 0x1d7e <prvUnlockQueue+0x44>
    1d66:	78 01       	movw	r14, r16
    1d68:	f3 e1       	ldi	r31, 0x13	; 19
    1d6a:	ef 0e       	add	r14, r31
    1d6c:	f1 1c       	adc	r15, r1
    1d6e:	c7 01       	movw	r24, r14
    1d70:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1d74:	81 11       	cpse	r24, r1
    1d76:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <vTaskMissedYield>
    1d7a:	c1 50       	subi	r28, 0x01	; 1
    1d7c:	79 f7       	brne	.-34     	; 0x1d5c <prvUnlockQueue+0x22>
    1d7e:	8f ef       	ldi	r24, 0xFF	; 255
    1d80:	f8 01       	movw	r30, r16
    1d82:	82 a3       	std	Z+34, r24	; 0x22
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	0f 92       	push	r0
    1d8e:	c1 a1       	ldd	r28, Z+33	; 0x21
    1d90:	1c 16       	cp	r1, r28
    1d92:	ac f4       	brge	.+42     	; 0x1dbe <prvUnlockQueue+0x84>
    1d94:	80 85       	ldd	r24, Z+8	; 0x08
    1d96:	81 11       	cpse	r24, r1
    1d98:	06 c0       	rjmp	.+12     	; 0x1da6 <prvUnlockQueue+0x6c>
    1d9a:	11 c0       	rjmp	.+34     	; 0x1dbe <prvUnlockQueue+0x84>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 85       	ldd	r24, Z+8	; 0x08
    1da0:	81 11       	cpse	r24, r1
    1da2:	05 c0       	rjmp	.+10     	; 0x1dae <prvUnlockQueue+0x74>
    1da4:	0c c0       	rjmp	.+24     	; 0x1dbe <prvUnlockQueue+0x84>
    1da6:	78 01       	movw	r14, r16
    1da8:	f8 e0       	ldi	r31, 0x08	; 8
    1daa:	ef 0e       	add	r14, r31
    1dac:	f1 1c       	adc	r15, r1
    1dae:	c7 01       	movw	r24, r14
    1db0:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1db4:	81 11       	cpse	r24, r1
    1db6:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <vTaskMissedYield>
    1dba:	c1 50       	subi	r28, 0x01	; 1
    1dbc:	79 f7       	brne	.-34     	; 0x1d9c <prvUnlockQueue+0x62>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	81 a3       	std	Z+33, r24	; 0x21
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	08 95       	ret

00001dd4 <xQueueGenericReset>:
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	0f 92       	push	r0
    1de0:	e8 81       	ld	r30, Y
    1de2:	f9 81       	ldd	r31, Y+1	; 0x01
    1de4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de6:	28 a1       	ldd	r18, Y+32	; 0x20
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	82 9f       	mul	r24, r18
    1dee:	a0 01       	movw	r20, r0
    1df0:	83 9f       	mul	r24, r19
    1df2:	50 0d       	add	r21, r0
    1df4:	92 9f       	mul	r25, r18
    1df6:	50 0d       	add	r21, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	4e 0f       	add	r20, r30
    1dfc:	5f 1f       	adc	r21, r31
    1dfe:	5d 83       	std	Y+5, r21	; 0x05
    1e00:	4c 83       	std	Y+4, r20	; 0x04
    1e02:	1e 8e       	std	Y+30, r1	; 0x1e
    1e04:	fb 83       	std	Y+3, r31	; 0x03
    1e06:	ea 83       	std	Y+2, r30	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	82 9f       	mul	r24, r18
    1e0c:	a0 01       	movw	r20, r0
    1e0e:	83 9f       	mul	r24, r19
    1e10:	50 0d       	add	r21, r0
    1e12:	92 9f       	mul	r25, r18
    1e14:	50 0d       	add	r21, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	cf 01       	movw	r24, r30
    1e1a:	84 0f       	add	r24, r20
    1e1c:	95 1f       	adc	r25, r21
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	89 a3       	std	Y+33, r24	; 0x21
    1e26:	8a a3       	std	Y+34, r24	; 0x22
    1e28:	61 11       	cpse	r22, r1
    1e2a:	0b c0       	rjmp	.+22     	; 0x1e42 <xQueueGenericReset+0x6e>
    1e2c:	88 85       	ldd	r24, Y+8	; 0x08
    1e2e:	88 23       	and	r24, r24
    1e30:	71 f0       	breq	.+28     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e32:	ce 01       	movw	r24, r28
    1e34:	08 96       	adiw	r24, 0x08	; 8
    1e36:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1e3a:	88 23       	and	r24, r24
    1e3c:	41 f0       	breq	.+16     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e3e:	31 de       	rcall	.-926    	; 0x1aa2 <vPortYield>
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <xQueueGenericReset+0x7a>
    1e42:	ce 01       	movw	r24, r28
    1e44:	08 96       	adiw	r24, 0x08	; 8
    1e46:	e5 dc       	rcall	.-1590   	; 0x1812 <vListInitialise>
    1e48:	ce 01       	movw	r24, r28
    1e4a:	43 96       	adiw	r24, 0x13	; 19
    1e4c:	e2 dc       	rcall	.-1596   	; 0x1812 <vListInitialise>
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <xQueueGenericCreate>:
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	08 2f       	mov	r16, r24
    1e66:	16 2f       	mov	r17, r22
    1e68:	f4 2e       	mov	r15, r20
    1e6a:	66 23       	and	r22, r22
    1e6c:	b9 f0       	breq	.+46     	; 0x1e9c <xQueueGenericCreate+0x42>
    1e6e:	86 9f       	mul	r24, r22
    1e70:	c0 01       	movw	r24, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	85 96       	adiw	r24, 0x25	; 37
    1e76:	e3 db       	rcall	.-2106   	; 0x163e <pvPortMalloc>
    1e78:	ec 01       	movw	r28, r24
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	41 f4       	brne	.+16     	; 0x1e8e <xQueueGenericCreate+0x34>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <xQueueGenericCreate+0x4e>
    1e80:	0f 8f       	std	Y+31, r16	; 0x1f
    1e82:	18 a3       	std	Y+32, r17	; 0x20
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	ce 01       	movw	r24, r28
    1e88:	a5 df       	rcall	.-182    	; 0x1dd4 <xQueueGenericReset>
    1e8a:	fc a2       	std	Y+36, r15	; 0x24
    1e8c:	0d c0       	rjmp	.+26     	; 0x1ea8 <xQueueGenericCreate+0x4e>
    1e8e:	85 96       	adiw	r24, 0x25	; 37
    1e90:	99 83       	std	Y+1, r25	; 0x01
    1e92:	88 83       	st	Y, r24
    1e94:	f5 cf       	rjmp	.-22     	; 0x1e80 <xQueueGenericCreate+0x26>
    1e96:	d9 83       	std	Y+1, r29	; 0x01
    1e98:	c8 83       	st	Y, r28
    1e9a:	f2 cf       	rjmp	.-28     	; 0x1e80 <xQueueGenericCreate+0x26>
    1e9c:	85 e2       	ldi	r24, 0x25	; 37
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	ce db       	rcall	.-2148   	; 0x163e <pvPortMalloc>
    1ea2:	ec 01       	movw	r28, r24
    1ea4:	89 2b       	or	r24, r25
    1ea6:	b9 f7       	brne	.-18     	; 0x1e96 <xQueueGenericCreate+0x3c>
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	08 95       	ret

00001eb6 <xQueueGenericSend>:
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	29 97       	sbiw	r28, 0x09	; 9
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	7c 01       	movw	r14, r24
    1ede:	5b 01       	movw	r10, r22
    1ee0:	2e 83       	std	Y+6, r18	; 0x06
    1ee2:	3f 83       	std	Y+7, r19	; 0x07
    1ee4:	48 87       	std	Y+8, r20	; 0x08
    1ee6:	59 87       	std	Y+9, r21	; 0x09
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	99 24       	eor	r9, r9
    1eec:	93 94       	inc	r9
    1eee:	6c 01       	movw	r12, r24
    1ef0:	88 e0       	ldi	r24, 0x08	; 8
    1ef2:	c8 0e       	add	r12, r24
    1ef4:	d1 1c       	adc	r13, r1
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	0f 92       	push	r0
    1efc:	f7 01       	movw	r30, r14
    1efe:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f00:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f02:	98 17       	cp	r25, r24
    1f04:	10 f0       	brcs	.+4      	; 0x1f0a <xQueueGenericSend+0x54>
    1f06:	02 30       	cpi	r16, 0x02	; 2
    1f08:	b1 f4       	brne	.+44     	; 0x1f36 <xQueueGenericSend+0x80>
    1f0a:	40 2f       	mov	r20, r16
    1f0c:	b5 01       	movw	r22, r10
    1f0e:	c7 01       	movw	r24, r14
    1f10:	9b de       	rcall	.-714    	; 0x1c48 <prvCopyDataToQueue>
    1f12:	f7 01       	movw	r30, r14
    1f14:	93 89       	ldd	r25, Z+19	; 0x13
    1f16:	99 23       	and	r25, r25
    1f18:	41 f0       	breq	.+16     	; 0x1f2a <xQueueGenericSend+0x74>
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	43 96       	adiw	r24, 0x13	; 19
    1f1e:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    1f22:	88 23       	and	r24, r24
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <xQueueGenericSend+0x78>
    1f26:	bd dd       	rcall	.-1158   	; 0x1aa2 <vPortYield>
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <xQueueGenericSend+0x78>
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	ba dd       	rcall	.-1164   	; 0x1aa2 <vPortYield>
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	4e c0       	rjmp	.+156    	; 0x1fd2 <xQueueGenericSend+0x11c>
    1f36:	8e 81       	ldd	r24, Y+6	; 0x06
    1f38:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3a:	a8 85       	ldd	r26, Y+8	; 0x08
    1f3c:	b9 85       	ldd	r27, Y+9	; 0x09
    1f3e:	89 2b       	or	r24, r25
    1f40:	8a 2b       	or	r24, r26
    1f42:	8b 2b       	or	r24, r27
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <xQueueGenericSend+0x98>
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	42 c0       	rjmp	.+132    	; 0x1fd2 <xQueueGenericSend+0x11c>
    1f4e:	11 11       	cpse	r17, r1
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <xQueueGenericSend+0xa6>
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskInternalSetTimeOutState>
    1f5a:	19 2d       	mov	r17, r9
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	ff d6       	rcall	.+3582   	; 0x2d60 <vTaskSuspendAll>
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	0f 92       	push	r0
    1f68:	f7 01       	movw	r30, r14
    1f6a:	81 a1       	ldd	r24, Z+33	; 0x21
    1f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <xQueueGenericSend+0xbc>
    1f70:	11 a2       	std	Z+33, r1	; 0x21
    1f72:	f7 01       	movw	r30, r14
    1f74:	82 a1       	ldd	r24, Z+34	; 0x22
    1f76:	8f 3f       	cpi	r24, 0xFF	; 255
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <xQueueGenericSend+0xc6>
    1f7a:	12 a2       	std	Z+34, r1	; 0x22
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	be 01       	movw	r22, r28
    1f82:	6a 5f       	subi	r22, 0xFA	; 250
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	ce 01       	movw	r24, r28
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskCheckForTimeOut>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	1c c0       	rjmp	.+56     	; 0x1fca <xQueueGenericSend+0x114>
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	0f 92       	push	r0
    1f98:	f7 01       	movw	r30, r14
    1f9a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f9c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	98 13       	cpse	r25, r24
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <xQueueGenericSend+0x10c>
    1fa6:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa8:	5f 81       	ldd	r21, Y+7	; 0x07
    1faa:	68 85       	ldd	r22, Y+8	; 0x08
    1fac:	79 85       	ldd	r23, Y+9	; 0x09
    1fae:	c6 01       	movw	r24, r12
    1fb0:	0e 94 ad 18 	call	0x315a	; 0x315a <vTaskPlaceOnEventList>
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	c1 de       	rcall	.-638    	; 0x1d3a <prvUnlockQueue>
    1fb8:	bc d7       	rcall	.+3960   	; 0x2f32 <xTaskResumeAll>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	9c cf       	rjmp	.-200    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fbe:	71 dd       	rcall	.-1310   	; 0x1aa2 <vPortYield>
    1fc0:	9a cf       	rjmp	.-204    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	ba de       	rcall	.-652    	; 0x1d3a <prvUnlockQueue>
    1fc6:	b5 d7       	rcall	.+3946   	; 0x2f32 <xTaskResumeAll>
    1fc8:	96 cf       	rjmp	.-212    	; 0x1ef6 <xQueueGenericSend+0x40>
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b6 de       	rcall	.-660    	; 0x1d3a <prvUnlockQueue>
    1fce:	b1 d7       	rcall	.+3938   	; 0x2f32 <xTaskResumeAll>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	29 96       	adiw	r28, 0x09	; 9
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	9f 90       	pop	r9
    1ff4:	08 95       	ret

00001ff6 <xQueueCreateMutex>:
    1ff6:	0f 93       	push	r16
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	2b df       	rcall	.-426    	; 0x1e5a <xQueueGenericCreate>
    2004:	ec 01       	movw	r28, r24
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	61 f0       	breq	.+24     	; 0x2022 <xQueueCreateMutex+0x2c>
    200a:	1d 82       	std	Y+5, r1	; 0x05
    200c:	1c 82       	std	Y+4, r1	; 0x04
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	18 82       	st	Y, r1
    2012:	1e 82       	std	Y+6, r1	; 0x06
    2014:	00 e0       	ldi	r16, 0x00	; 0
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	4a df       	rcall	.-364    	; 0x1eb6 <xQueueGenericSend>
    2022:	ce 01       	movw	r24, r28
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <xQueueGenericSendFromISR>:
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	8a 01       	movw	r16, r20
    203a:	fc 01       	movw	r30, r24
    203c:	56 8d       	ldd	r21, Z+30	; 0x1e
    203e:	37 8d       	ldd	r19, Z+31	; 0x1f
    2040:	53 17       	cp	r21, r19
    2042:	10 f0       	brcs	.+4      	; 0x2048 <xQueueGenericSendFromISR+0x1c>
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	e9 f4       	brne	.+58     	; 0x2082 <xQueueGenericSendFromISR+0x56>
    2048:	42 2f       	mov	r20, r18
    204a:	78 01       	movw	r14, r16
    204c:	ec 01       	movw	r28, r24
    204e:	1a a1       	ldd	r17, Y+34	; 0x22
    2050:	fb dd       	rcall	.-1034   	; 0x1c48 <prvCopyDataToQueue>
    2052:	1f 3f       	cpi	r17, 0xFF	; 255
    2054:	81 f4       	brne	.+32     	; 0x2076 <xQueueGenericSendFromISR+0x4a>
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	88 23       	and	r24, r24
    205a:	a9 f0       	breq	.+42     	; 0x2086 <xQueueGenericSendFromISR+0x5a>
    205c:	ce 01       	movw	r24, r28
    205e:	43 96       	adiw	r24, 0x13	; 19
    2060:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    2064:	88 23       	and	r24, r24
    2066:	89 f0       	breq	.+34     	; 0x208a <xQueueGenericSendFromISR+0x5e>
    2068:	e1 14       	cp	r14, r1
    206a:	f1 04       	cpc	r15, r1
    206c:	81 f0       	breq	.+32     	; 0x208e <xQueueGenericSendFromISR+0x62>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	f7 01       	movw	r30, r14
    2072:	80 83       	st	Z, r24
    2074:	0d c0       	rjmp	.+26     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2076:	ff 24       	eor	r15, r15
    2078:	f3 94       	inc	r15
    207a:	f1 0e       	add	r15, r17
    207c:	fa a2       	std	Y+34, r15	; 0x22
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <xQueueGenericSendFromISR+0x64>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	03 c0       	rjmp	.+6      	; 0x2090 <xQueueGenericSendFromISR+0x64>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <xQueueGenericSendFromISR+0x64>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	08 95       	ret

0000209e <xQueueReceive>:
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	29 97       	sbiw	r28, 0x09	; 9
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	8c 01       	movw	r16, r24
    20c6:	5b 01       	movw	r10, r22
    20c8:	2e 83       	std	Y+6, r18	; 0x06
    20ca:	3f 83       	std	Y+7, r19	; 0x07
    20cc:	48 87       	std	Y+8, r20	; 0x08
    20ce:	59 87       	std	Y+9, r21	; 0x09
    20d0:	e1 2c       	mov	r14, r1
    20d2:	99 24       	eor	r9, r9
    20d4:	93 94       	inc	r9
    20d6:	6c 01       	movw	r12, r24
    20d8:	83 e1       	ldi	r24, 0x13	; 19
    20da:	c8 0e       	add	r12, r24
    20dc:	d1 1c       	adc	r13, r1
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	0f 92       	push	r0
    20e4:	f8 01       	movw	r30, r16
    20e6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    20e8:	ff 20       	and	r15, r15
    20ea:	99 f0       	breq	.+38     	; 0x2112 <xQueueReceive+0x74>
    20ec:	b5 01       	movw	r22, r10
    20ee:	c8 01       	movw	r24, r16
    20f0:	0a de       	rcall	.-1004   	; 0x1d06 <prvCopyDataFromQueue>
    20f2:	fa 94       	dec	r15
    20f4:	f8 01       	movw	r30, r16
    20f6:	f6 8e       	std	Z+30, r15	; 0x1e
    20f8:	80 85       	ldd	r24, Z+8	; 0x08
    20fa:	88 23       	and	r24, r24
    20fc:	31 f0       	breq	.+12     	; 0x210a <xQueueReceive+0x6c>
    20fe:	c8 01       	movw	r24, r16
    2100:	08 96       	adiw	r24, 0x08	; 8
    2102:	0e 94 08 19 	call	0x3210	; 0x3210 <xTaskRemoveFromEventList>
    2106:	81 11       	cpse	r24, r1
    2108:	cc dc       	rcall	.-1640   	; 0x1aa2 <vPortYield>
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	4c c0       	rjmp	.+152    	; 0x21aa <xQueueReceive+0x10c>
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	9f 81       	ldd	r25, Y+7	; 0x07
    2116:	a8 85       	ldd	r26, Y+8	; 0x08
    2118:	b9 85       	ldd	r27, Y+9	; 0x09
    211a:	89 2b       	or	r24, r25
    211c:	8a 2b       	or	r24, r26
    211e:	8b 2b       	or	r24, r27
    2120:	21 f4       	brne	.+8      	; 0x212a <xQueueReceive+0x8c>
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	40 c0       	rjmp	.+128    	; 0x21aa <xQueueReceive+0x10c>
    212a:	e1 10       	cpse	r14, r1
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <xQueueReceive+0x9a>
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskInternalSetTimeOutState>
    2136:	e9 2c       	mov	r14, r9
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	11 d6       	rcall	.+3106   	; 0x2d60 <vTaskSuspendAll>
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	0f 92       	push	r0
    2144:	f8 01       	movw	r30, r16
    2146:	81 a1       	ldd	r24, Z+33	; 0x21
    2148:	8f 3f       	cpi	r24, 0xFF	; 255
    214a:	09 f4       	brne	.+2      	; 0x214e <xQueueReceive+0xb0>
    214c:	11 a2       	std	Z+33, r1	; 0x21
    214e:	f8 01       	movw	r30, r16
    2150:	82 a1       	ldd	r24, Z+34	; 0x22
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	09 f4       	brne	.+2      	; 0x2158 <xQueueReceive+0xba>
    2156:	12 a2       	std	Z+34, r1	; 0x22
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	be 01       	movw	r22, r28
    215e:	6a 5f       	subi	r22, 0xFA	; 250
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	ce 01       	movw	r24, r28
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskCheckForTimeOut>
    216a:	81 11       	cpse	r24, r1
    216c:	15 c0       	rjmp	.+42     	; 0x2198 <xQueueReceive+0xfa>
    216e:	c8 01       	movw	r24, r16
    2170:	60 dd       	rcall	.-1344   	; 0x1c32 <prvIsQueueEmpty>
    2172:	88 23       	and	r24, r24
    2174:	69 f0       	breq	.+26     	; 0x2190 <xQueueReceive+0xf2>
    2176:	4e 81       	ldd	r20, Y+6	; 0x06
    2178:	5f 81       	ldd	r21, Y+7	; 0x07
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	c6 01       	movw	r24, r12
    2180:	ec d7       	rcall	.+4056   	; 0x315a <vTaskPlaceOnEventList>
    2182:	c8 01       	movw	r24, r16
    2184:	da dd       	rcall	.-1100   	; 0x1d3a <prvUnlockQueue>
    2186:	d5 d6       	rcall	.+3498   	; 0x2f32 <xTaskResumeAll>
    2188:	81 11       	cpse	r24, r1
    218a:	a9 cf       	rjmp	.-174    	; 0x20de <xQueueReceive+0x40>
    218c:	8a dc       	rcall	.-1772   	; 0x1aa2 <vPortYield>
    218e:	a7 cf       	rjmp	.-178    	; 0x20de <xQueueReceive+0x40>
    2190:	c8 01       	movw	r24, r16
    2192:	d3 dd       	rcall	.-1114   	; 0x1d3a <prvUnlockQueue>
    2194:	ce d6       	rcall	.+3484   	; 0x2f32 <xTaskResumeAll>
    2196:	a3 cf       	rjmp	.-186    	; 0x20de <xQueueReceive+0x40>
    2198:	c8 01       	movw	r24, r16
    219a:	cf dd       	rcall	.-1122   	; 0x1d3a <prvUnlockQueue>
    219c:	ca d6       	rcall	.+3476   	; 0x2f32 <xTaskResumeAll>
    219e:	c8 01       	movw	r24, r16
    21a0:	48 dd       	rcall	.-1392   	; 0x1c32 <prvIsQueueEmpty>
    21a2:	88 23       	and	r24, r24
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <xQueueReceive+0x10a>
    21a6:	9b cf       	rjmp	.-202    	; 0x20de <xQueueReceive+0x40>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	29 96       	adiw	r28, 0x09	; 9
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	08 95       	ret

000021ce <xQueueSemaphoreTake>:
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	29 97       	sbiw	r28, 0x09	; 9
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	8c 01       	movw	r16, r24
    21f2:	4e 83       	std	Y+6, r20	; 0x06
    21f4:	5f 83       	std	Y+7, r21	; 0x07
    21f6:	68 87       	std	Y+8, r22	; 0x08
    21f8:	79 87       	std	Y+9, r23	; 0x09
    21fa:	b1 2c       	mov	r11, r1
    21fc:	d1 2c       	mov	r13, r1
    21fe:	cc 24       	eor	r12, r12
    2200:	c3 94       	inc	r12
    2202:	7c 01       	movw	r14, r24
    2204:	83 e1       	ldi	r24, 0x13	; 19
    2206:	e8 0e       	add	r14, r24
    2208:	f1 1c       	adc	r15, r1
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	0f 92       	push	r0
    2210:	d8 01       	movw	r26, r16
    2212:	5e 96       	adiw	r26, 0x1e	; 30
    2214:	8c 91       	ld	r24, X
    2216:	5e 97       	sbiw	r26, 0x1e	; 30
    2218:	88 23       	and	r24, r24
    221a:	d9 f0       	breq	.+54     	; 0x2252 <__stack+0x53>
    221c:	81 50       	subi	r24, 0x01	; 1
    221e:	5e 96       	adiw	r26, 0x1e	; 30
    2220:	8c 93       	st	X, r24
    2222:	5e 97       	sbiw	r26, 0x1e	; 30
    2224:	8d 91       	ld	r24, X+
    2226:	9c 91       	ld	r25, X
    2228:	89 2b       	or	r24, r25
    222a:	29 f4       	brne	.+10     	; 0x2236 <__stack+0x37>
    222c:	0e 94 35 1b 	call	0x366a	; 0x366a <pvTaskIncrementMutexHeldCount>
    2230:	f8 01       	movw	r30, r16
    2232:	95 83       	std	Z+5, r25	; 0x05
    2234:	84 83       	std	Z+4, r24	; 0x04
    2236:	d8 01       	movw	r26, r16
    2238:	18 96       	adiw	r26, 0x08	; 8
    223a:	8c 91       	ld	r24, X
    223c:	88 23       	and	r24, r24
    223e:	29 f0       	breq	.+10     	; 0x224a <__stack+0x4b>
    2240:	c8 01       	movw	r24, r16
    2242:	08 96       	adiw	r24, 0x08	; 8
    2244:	e5 d7       	rcall	.+4042   	; 0x3210 <xTaskRemoveFromEventList>
    2246:	81 11       	cpse	r24, r1
    2248:	2c dc       	rcall	.-1960   	; 0x1aa2 <vPortYield>
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	7a c0       	rjmp	.+244    	; 0x2346 <__stack+0x147>
    2252:	8e 81       	ldd	r24, Y+6	; 0x06
    2254:	9f 81       	ldd	r25, Y+7	; 0x07
    2256:	a8 85       	ldd	r26, Y+8	; 0x08
    2258:	b9 85       	ldd	r27, Y+9	; 0x09
    225a:	89 2b       	or	r24, r25
    225c:	8a 2b       	or	r24, r26
    225e:	8b 2b       	or	r24, r27
    2260:	21 f4       	brne	.+8      	; 0x226a <__stack+0x6b>
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	6e c0       	rjmp	.+220    	; 0x2346 <__stack+0x147>
    226a:	d1 10       	cpse	r13, r1
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <__stack+0x79>
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskInternalSetTimeOutState>
    2276:	dc 2c       	mov	r13, r12
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	71 d5       	rcall	.+2786   	; 0x2d60 <vTaskSuspendAll>
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	0f 92       	push	r0
    2284:	f8 01       	movw	r30, r16
    2286:	81 a1       	ldd	r24, Z+33	; 0x21
    2288:	8f 3f       	cpi	r24, 0xFF	; 255
    228a:	09 f4       	brne	.+2      	; 0x228e <__stack+0x8f>
    228c:	11 a2       	std	Z+33, r1	; 0x21
    228e:	d8 01       	movw	r26, r16
    2290:	92 96       	adiw	r26, 0x22	; 34
    2292:	8c 91       	ld	r24, X
    2294:	92 97       	sbiw	r26, 0x22	; 34
    2296:	8f 3f       	cpi	r24, 0xFF	; 255
    2298:	11 f4       	brne	.+4      	; 0x229e <__stack+0x9f>
    229a:	92 96       	adiw	r26, 0x22	; 34
    229c:	1c 92       	st	X, r1
    229e:	0f 90       	pop	r0
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	be 01       	movw	r22, r28
    22a4:	6a 5f       	subi	r22, 0xFA	; 250
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskCheckForTimeOut>
    22b0:	81 11       	cpse	r24, r1
    22b2:	24 c0       	rjmp	.+72     	; 0x22fc <__stack+0xfd>
    22b4:	c8 01       	movw	r24, r16
    22b6:	bd dc       	rcall	.-1670   	; 0x1c32 <prvIsQueueEmpty>
    22b8:	88 23       	and	r24, r24
    22ba:	e1 f0       	breq	.+56     	; 0x22f4 <__stack+0xf5>
    22bc:	f8 01       	movw	r30, r16
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	89 2b       	or	r24, r25
    22c4:	51 f4       	brne	.+20     	; 0x22da <__stack+0xdb>
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	0f 92       	push	r0
    22cc:	84 81       	ldd	r24, Z+4	; 0x04
    22ce:	95 81       	ldd	r25, Z+5	; 0x05
    22d0:	0e 94 11 1a 	call	0x3422	; 0x3422 <xTaskPriorityInherit>
    22d4:	b8 2e       	mov	r11, r24
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	4e 81       	ldd	r20, Y+6	; 0x06
    22dc:	5f 81       	ldd	r21, Y+7	; 0x07
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	c7 01       	movw	r24, r14
    22e4:	3a d7       	rcall	.+3700   	; 0x315a <vTaskPlaceOnEventList>
    22e6:	c8 01       	movw	r24, r16
    22e8:	28 dd       	rcall	.-1456   	; 0x1d3a <prvUnlockQueue>
    22ea:	23 d6       	rcall	.+3142   	; 0x2f32 <xTaskResumeAll>
    22ec:	81 11       	cpse	r24, r1
    22ee:	8d cf       	rjmp	.-230    	; 0x220a <__stack+0xb>
    22f0:	d8 db       	rcall	.-2128   	; 0x1aa2 <vPortYield>
    22f2:	8b cf       	rjmp	.-234    	; 0x220a <__stack+0xb>
    22f4:	c8 01       	movw	r24, r16
    22f6:	21 dd       	rcall	.-1470   	; 0x1d3a <prvUnlockQueue>
    22f8:	1c d6       	rcall	.+3128   	; 0x2f32 <xTaskResumeAll>
    22fa:	87 cf       	rjmp	.-242    	; 0x220a <__stack+0xb>
    22fc:	c8 01       	movw	r24, r16
    22fe:	1d dd       	rcall	.-1478   	; 0x1d3a <prvUnlockQueue>
    2300:	18 d6       	rcall	.+3120   	; 0x2f32 <xTaskResumeAll>
    2302:	c8 01       	movw	r24, r16
    2304:	96 dc       	rcall	.-1748   	; 0x1c32 <prvIsQueueEmpty>
    2306:	88 23       	and	r24, r24
    2308:	09 f4       	brne	.+2      	; 0x230c <__stack+0x10d>
    230a:	7f cf       	rjmp	.-258    	; 0x220a <__stack+0xb>
    230c:	bb 20       	and	r11, r11
    230e:	d1 f0       	breq	.+52     	; 0x2344 <__stack+0x145>
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	0f 92       	push	r0
    2316:	f8 01       	movw	r30, r16
    2318:	83 89       	ldd	r24, Z+19	; 0x13
    231a:	88 23       	and	r24, r24
    231c:	39 f0       	breq	.+14     	; 0x232c <__stack+0x12d>
    231e:	02 8c       	ldd	r0, Z+26	; 0x1a
    2320:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2322:	e0 2d       	mov	r30, r0
    2324:	80 81       	ld	r24, Z
    2326:	66 e0       	ldi	r22, 0x06	; 6
    2328:	68 1b       	sub	r22, r24
    232a:	01 c0       	rjmp	.+2      	; 0x232e <__stack+0x12f>
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	d8 01       	movw	r26, r16
    2330:	14 96       	adiw	r26, 0x04	; 4
    2332:	8d 91       	ld	r24, X+
    2334:	9c 91       	ld	r25, X
    2336:	15 97       	sbiw	r26, 0x05	; 5
    2338:	0e 94 bf 1a 	call	0x357e	; 0x357e <vTaskPriorityDisinheritAfterTimeout>
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <__stack+0x147>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	29 96       	adiw	r28, 0x09	; 9
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	bf 90       	pop	r11
    2364:	08 95       	ret

00002366 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	0f 92       	push	r0
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	8f 3f       	cpi	r24, 0xFF	; 255
    2376:	09 f4       	brne	.+2      	; 0x237a <vQueueWaitForMessageRestricted+0x14>
    2378:	19 a2       	std	Y+33, r1	; 0x21
    237a:	8a a1       	ldd	r24, Y+34	; 0x22
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	09 f4       	brne	.+2      	; 0x2382 <vQueueWaitForMessageRestricted+0x1c>
    2380:	1a a2       	std	Y+34, r1	; 0x22
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2386:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2388:	81 11       	cpse	r24, r1
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    238c:	ce 01       	movw	r24, r28
    238e:	43 96       	adiw	r24, 0x13	; 19
    2390:	1f d7       	rcall	.+3646   	; 0x31d0 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2392:	ce 01       	movw	r24, r28
    2394:	d2 dc       	rcall	.-1628   	; 0x1d3a <prvUnlockQueue>
    }
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    239c:	fc 01       	movw	r30, r24
    239e:	44 81       	ldd	r20, Z+4	; 0x04
    23a0:	55 81       	ldd	r21, Z+5	; 0x05
    23a2:	22 81       	ldd	r18, Z+2	; 0x02
    23a4:	33 81       	ldd	r19, Z+3	; 0x03
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	b9 01       	movw	r22, r18
    23b0:	68 1b       	sub	r22, r24
    23b2:	79 0b       	sbc	r23, r25
    23b4:	cb 01       	movw	r24, r22
    23b6:	64 17       	cp	r22, r20
    23b8:	75 07       	cpc	r23, r21
    23ba:	10 f0       	brcs	.+4      	; 0x23c0 <prvBytesInBuffer+0x24>
    23bc:	84 1b       	sub	r24, r20
    23be:	95 0b       	sbc	r25, r21
    23c0:	08 95       	ret

000023c2 <prvWriteBytesToBuffer>:
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	6c 01       	movw	r12, r24
    23d8:	5b 01       	movw	r10, r22
    23da:	7a 01       	movw	r14, r20
    23dc:	fc 01       	movw	r30, r24
    23de:	c2 81       	ldd	r28, Z+2	; 0x02
    23e0:	d3 81       	ldd	r29, Z+3	; 0x03
    23e2:	04 81       	ldd	r16, Z+4	; 0x04
    23e4:	15 81       	ldd	r17, Z+5	; 0x05
    23e6:	0c 1b       	sub	r16, r28
    23e8:	1d 0b       	sbc	r17, r29
    23ea:	40 17       	cp	r20, r16
    23ec:	51 07       	cpc	r21, r17
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <prvWriteBytesToBuffer+0x30>
    23f0:	8a 01       	movw	r16, r20
    23f2:	f6 01       	movw	r30, r12
    23f4:	84 85       	ldd	r24, Z+12	; 0x0c
    23f6:	95 85       	ldd	r25, Z+13	; 0x0d
    23f8:	a8 01       	movw	r20, r16
    23fa:	b5 01       	movw	r22, r10
    23fc:	8c 0f       	add	r24, r28
    23fe:	9d 1f       	adc	r25, r29
    2400:	0e 94 05 31 	call	0x620a	; 0x620a <memcpy>
    2404:	0e 15       	cp	r16, r14
    2406:	1f 05       	cpc	r17, r15
    2408:	58 f4       	brcc	.+22     	; 0x2420 <prvWriteBytesToBuffer+0x5e>
    240a:	a7 01       	movw	r20, r14
    240c:	40 1b       	sub	r20, r16
    240e:	51 0b       	sbc	r21, r17
    2410:	b5 01       	movw	r22, r10
    2412:	60 0f       	add	r22, r16
    2414:	71 1f       	adc	r23, r17
    2416:	f6 01       	movw	r30, r12
    2418:	84 85       	ldd	r24, Z+12	; 0x0c
    241a:	95 85       	ldd	r25, Z+13	; 0x0d
    241c:	0e 94 05 31 	call	0x620a	; 0x620a <memcpy>
    2420:	ce 01       	movw	r24, r28
    2422:	8e 0d       	add	r24, r14
    2424:	9f 1d       	adc	r25, r15
    2426:	f6 01       	movw	r30, r12
    2428:	24 81       	ldd	r18, Z+4	; 0x04
    242a:	35 81       	ldd	r19, Z+5	; 0x05
    242c:	82 17       	cp	r24, r18
    242e:	93 07       	cpc	r25, r19
    2430:	10 f0       	brcs	.+4      	; 0x2436 <prvWriteBytesToBuffer+0x74>
    2432:	82 1b       	sub	r24, r18
    2434:	93 0b       	sbc	r25, r19
    2436:	f6 01       	movw	r30, r12
    2438:	93 83       	std	Z+3, r25	; 0x03
    243a:	82 83       	std	Z+2, r24	; 0x02
    243c:	c7 01       	movw	r24, r14
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	af 90       	pop	r10
    2452:	08 95       	ret

00002454 <prvWriteMessageToBuffer>:
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	1f 92       	push	r1
    2466:	1f 92       	push	r1
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	5a 83       	std	Y+2, r21	; 0x02
    246e:	49 83       	std	Y+1, r20	; 0x01
    2470:	21 15       	cp	r18, r1
    2472:	31 05       	cpc	r19, r1
    2474:	c9 f0       	breq	.+50     	; 0x24a8 <prvWriteMessageToBuffer+0x54>
    2476:	6b 01       	movw	r12, r22
    2478:	7c 01       	movw	r14, r24
    247a:	fc 01       	movw	r30, r24
    247c:	86 85       	ldd	r24, Z+14	; 0x0e
    247e:	80 fd       	sbrc	r24, 0
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <prvWriteMessageToBuffer+0x3e>
    2482:	ca 01       	movw	r24, r20
    2484:	24 17       	cp	r18, r20
    2486:	35 07       	cpc	r19, r21
    2488:	08 f4       	brcc	.+2      	; 0x248c <prvWriteMessageToBuffer+0x38>
    248a:	c9 01       	movw	r24, r18
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	11 c0       	rjmp	.+34     	; 0x24b4 <prvWriteMessageToBuffer+0x60>
    2492:	20 17       	cp	r18, r16
    2494:	31 07       	cpc	r19, r17
    2496:	58 f0       	brcs	.+22     	; 0x24ae <prvWriteMessageToBuffer+0x5a>
    2498:	42 e0       	ldi	r20, 0x02	; 2
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	be 01       	movw	r22, r28
    249e:	6f 5f       	subi	r22, 0xFF	; 255
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	c7 01       	movw	r24, r14
    24a4:	8e df       	rcall	.-228    	; 0x23c2 <prvWriteBytesToBuffer>
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <prvWriteMessageToBuffer+0x60>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <prvWriteMessageToBuffer+0x6a>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <prvWriteMessageToBuffer+0x6a>
    24b4:	49 81       	ldd	r20, Y+1	; 0x01
    24b6:	5a 81       	ldd	r21, Y+2	; 0x02
    24b8:	b6 01       	movw	r22, r12
    24ba:	c7 01       	movw	r24, r14
    24bc:	82 df       	rcall	.-252    	; 0x23c2 <prvWriteBytesToBuffer>
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

000024d4 <prvReadBytesFromBuffer>:
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	7c 01       	movw	r14, r24
    24ea:	5b 01       	movw	r10, r22
    24ec:	e9 01       	movw	r28, r18
    24ee:	42 17       	cp	r20, r18
    24f0:	53 07       	cpc	r21, r19
    24f2:	08 f4       	brcc	.+2      	; 0x24f6 <prvReadBytesFromBuffer+0x22>
    24f4:	ea 01       	movw	r28, r20
    24f6:	20 97       	sbiw	r28, 0x00	; 0
    24f8:	79 f1       	breq	.+94     	; 0x2558 <prvReadBytesFromBuffer+0x84>
    24fa:	f7 01       	movw	r30, r14
    24fc:	00 81       	ld	r16, Z
    24fe:	11 81       	ldd	r17, Z+1	; 0x01
    2500:	c4 80       	ldd	r12, Z+4	; 0x04
    2502:	d5 80       	ldd	r13, Z+5	; 0x05
    2504:	c0 1a       	sub	r12, r16
    2506:	d1 0a       	sbc	r13, r17
    2508:	cc 15       	cp	r28, r12
    250a:	dd 05       	cpc	r29, r13
    250c:	08 f4       	brcc	.+2      	; 0x2510 <prvReadBytesFromBuffer+0x3c>
    250e:	6e 01       	movw	r12, r28
    2510:	f7 01       	movw	r30, r14
    2512:	64 85       	ldd	r22, Z+12	; 0x0c
    2514:	75 85       	ldd	r23, Z+13	; 0x0d
    2516:	60 0f       	add	r22, r16
    2518:	71 1f       	adc	r23, r17
    251a:	a6 01       	movw	r20, r12
    251c:	c5 01       	movw	r24, r10
    251e:	0e 94 05 31 	call	0x620a	; 0x620a <memcpy>
    2522:	cc 16       	cp	r12, r28
    2524:	dd 06       	cpc	r13, r29
    2526:	58 f4       	brcc	.+22     	; 0x253e <prvReadBytesFromBuffer+0x6a>
    2528:	ae 01       	movw	r20, r28
    252a:	4c 19       	sub	r20, r12
    252c:	5d 09       	sbc	r21, r13
    252e:	f7 01       	movw	r30, r14
    2530:	64 85       	ldd	r22, Z+12	; 0x0c
    2532:	75 85       	ldd	r23, Z+13	; 0x0d
    2534:	c5 01       	movw	r24, r10
    2536:	8c 0d       	add	r24, r12
    2538:	9d 1d       	adc	r25, r13
    253a:	0e 94 05 31 	call	0x620a	; 0x620a <memcpy>
    253e:	0c 0f       	add	r16, r28
    2540:	1d 1f       	adc	r17, r29
    2542:	f7 01       	movw	r30, r14
    2544:	84 81       	ldd	r24, Z+4	; 0x04
    2546:	95 81       	ldd	r25, Z+5	; 0x05
    2548:	08 17       	cp	r16, r24
    254a:	19 07       	cpc	r17, r25
    254c:	10 f0       	brcs	.+4      	; 0x2552 <prvReadBytesFromBuffer+0x7e>
    254e:	08 1b       	sub	r16, r24
    2550:	19 0b       	sbc	r17, r25
    2552:	f7 01       	movw	r30, r14
    2554:	11 83       	std	Z+1, r17	; 0x01
    2556:	00 83       	st	Z, r16
    2558:	ce 01       	movw	r24, r28
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	08 95       	ret

00002570 <xStreamBufferGenericCreate>:
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	eb 01       	movw	r28, r22
    257c:	11 e0       	ldi	r17, 0x01	; 1
    257e:	41 30       	cpi	r20, 0x01	; 1
    2580:	09 f0       	breq	.+2      	; 0x2584 <xStreamBufferGenericCreate+0x14>
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	20 97       	sbiw	r28, 0x00	; 0
    2586:	11 f4       	brne	.+4      	; 0x258c <xStreamBufferGenericCreate+0x1c>
    2588:	c1 e0       	ldi	r28, 0x01	; 1
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	7c 01       	movw	r14, r24
    258e:	2f ef       	ldi	r18, 0xFF	; 255
    2590:	e2 1a       	sub	r14, r18
    2592:	f2 0a       	sbc	r15, r18
    2594:	41 96       	adiw	r24, 0x11	; 17
    2596:	53 d8       	rcall	.-3930   	; 0x163e <pvPortMalloc>
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	81 f0       	breq	.+32     	; 0x25bc <xStreamBufferGenericCreate+0x4c>
    259c:	20 e1       	ldi	r18, 0x10	; 16
    259e:	fc 01       	movw	r30, r24
    25a0:	11 92       	st	Z+, r1
    25a2:	2a 95       	dec	r18
    25a4:	e9 f7       	brne	.-6      	; 0x25a0 <xStreamBufferGenericCreate+0x30>
    25a6:	9c 01       	movw	r18, r24
    25a8:	20 5f       	subi	r18, 0xF0	; 240
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	fc 01       	movw	r30, r24
    25ae:	35 87       	std	Z+13, r19	; 0x0d
    25b0:	24 87       	std	Z+12, r18	; 0x0c
    25b2:	f5 82       	std	Z+5, r15	; 0x05
    25b4:	e4 82       	std	Z+4, r14	; 0x04
    25b6:	d7 83       	std	Z+7, r29	; 0x07
    25b8:	c6 83       	std	Z+6, r28	; 0x06
    25ba:	16 87       	std	Z+14, r17	; 0x0e
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	08 95       	ret

000025c8 <xStreamBufferReset>:
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	fc 01       	movw	r30, r24
    25ce:	27 85       	ldd	r18, Z+15	; 0x0f
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
    25d6:	80 85       	ldd	r24, Z+8	; 0x08
    25d8:	91 85       	ldd	r25, Z+9	; 0x09
    25da:	89 2b       	or	r24, r25
    25dc:	d1 f4       	brne	.+52     	; 0x2612 <xStreamBufferReset+0x4a>
    25de:	82 85       	ldd	r24, Z+10	; 0x0a
    25e0:	93 85       	ldd	r25, Z+11	; 0x0b
    25e2:	89 2b       	or	r24, r25
    25e4:	c1 f4       	brne	.+48     	; 0x2616 <xStreamBufferReset+0x4e>
    25e6:	86 85       	ldd	r24, Z+14	; 0x0e
    25e8:	46 81       	ldd	r20, Z+6	; 0x06
    25ea:	57 81       	ldd	r21, Z+7	; 0x07
    25ec:	64 81       	ldd	r22, Z+4	; 0x04
    25ee:	75 81       	ldd	r23, Z+5	; 0x05
    25f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f4:	90 e1       	ldi	r25, 0x10	; 16
    25f6:	ef 01       	movw	r28, r30
    25f8:	19 92       	st	Y+, r1
    25fa:	9a 95       	dec	r25
    25fc:	e9 f7       	brne	.-6      	; 0x25f8 <xStreamBufferReset+0x30>
    25fe:	b5 87       	std	Z+13, r27	; 0x0d
    2600:	a4 87       	std	Z+12, r26	; 0x0c
    2602:	75 83       	std	Z+5, r23	; 0x05
    2604:	64 83       	std	Z+4, r22	; 0x04
    2606:	57 83       	std	Z+7, r21	; 0x07
    2608:	46 83       	std	Z+6, r20	; 0x06
    260a:	86 87       	std	Z+14, r24	; 0x0e
    260c:	27 87       	std	Z+15, r18	; 0x0f
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <xStreamBufferReset+0x50>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <xStreamBufferReset+0x50>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <xStreamBufferSpacesAvailable>:
    2622:	fc 01       	movw	r30, r24
    2624:	24 81       	ldd	r18, Z+4	; 0x04
    2626:	35 81       	ldd	r19, Z+5	; 0x05
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	42 81       	ldd	r20, Z+2	; 0x02
    262e:	53 81       	ldd	r21, Z+3	; 0x03
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	84 1b       	sub	r24, r20
    2638:	95 0b       	sbc	r25, r21
    263a:	82 17       	cp	r24, r18
    263c:	93 07       	cpc	r25, r19
    263e:	10 f0       	brcs	.+4      	; 0x2644 <xStreamBufferSpacesAvailable+0x22>
    2640:	82 1b       	sub	r24, r18
    2642:	93 0b       	sbc	r25, r19
    2644:	08 95       	ret

00002646 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2646:	2f 92       	push	r2
    2648:	3f 92       	push	r3
    264a:	4f 92       	push	r4
    264c:	5f 92       	push	r5
    264e:	6f 92       	push	r6
    2650:	7f 92       	push	r7
    2652:	8f 92       	push	r8
    2654:	9f 92       	push	r9
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	29 97       	sbiw	r28, 0x09	; 9
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	5c 01       	movw	r10, r24
    267c:	1b 01       	movw	r2, r22
    267e:	2a 01       	movw	r4, r20
    2680:	0e 83       	std	Y+6, r16	; 0x06
    2682:	1f 83       	std	Y+7, r17	; 0x07
    2684:	28 87       	std	Y+8, r18	; 0x08
    2686:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2688:	fc 01       	movw	r30, r24
    268a:	86 85       	ldd	r24, Z+14	; 0x0e
    268c:	80 ff       	sbrs	r24, 0
    268e:	05 c0       	rjmp	.+10     	; 0x269a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2690:	3a 01       	movw	r6, r20
    2692:	f2 e0       	ldi	r31, 0x02	; 2
    2694:	6f 0e       	add	r6, r31
    2696:	71 1c       	adc	r7, r1
    2698:	01 c0       	rjmp	.+2      	; 0x269c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    269a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	a8 85       	ldd	r26, Y+8	; 0x08
    26a2:	b9 85       	ldd	r27, Y+9	; 0x09
    26a4:	89 2b       	or	r24, r25
    26a6:	8a 2b       	or	r24, r26
    26a8:	8b 2b       	or	r24, r27
    26aa:	09 f4       	brne	.+2      	; 0x26ae <xStreamBufferSend+0x68>
    26ac:	34 c0       	rjmp	.+104    	; 0x2716 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	24 d6       	rcall	.+3144   	; 0x32fc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    26ba:	c5 01       	movw	r24, r10
    26bc:	b2 df       	rcall	.-156    	; 0x2622 <xStreamBufferSpacesAvailable>
    26be:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    26c0:	86 15       	cp	r24, r6
    26c2:	97 05       	cpc	r25, r7
    26c4:	18 f5       	brcc	.+70     	; 0x270c <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    26ce:	96 d6       	rcall	.+3372   	; 0x33fc <xTaskGetCurrentTaskHandle>
    26d0:	f5 01       	movw	r30, r10
    26d2:	93 87       	std	Z+11, r25	; 0x0b
    26d4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    26da:	ce 80       	ldd	r12, Y+6	; 0x06
    26dc:	df 80       	ldd	r13, Y+7	; 0x07
    26de:	e8 84       	ldd	r14, Y+8	; 0x08
    26e0:	f9 84       	ldd	r15, Y+9	; 0x09
    26e2:	00 e0       	ldi	r16, 0x00	; 0
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	a9 01       	movw	r20, r18
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	cb 01       	movw	r24, r22
    26f2:	cd d7       	rcall	.+3994   	; 0x368e <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    26f4:	f5 01       	movw	r30, r10
    26f6:	13 86       	std	Z+11, r1	; 0x0b
    26f8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    26fa:	be 01       	movw	r22, r28
    26fc:	6a 5f       	subi	r22, 0xFA	; 250
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	ce 01       	movw	r24, r28
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	22 d6       	rcall	.+3140   	; 0x334a <xTaskCheckForTimeOut>
    2706:	88 23       	and	r24, r24
    2708:	a9 f2       	breq	.-86     	; 0x26b4 <xStreamBufferSend+0x6e>
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    270c:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	81 14       	cp	r8, r1
    2712:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2714:	19 f4       	brne	.+6      	; 0x271c <xStreamBufferSend+0xd6>
    2716:	c5 01       	movw	r24, r10
    2718:	84 df       	rcall	.-248    	; 0x2622 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    271a:	4c 01       	movw	r8, r24
    271c:	83 01       	movw	r16, r6
    271e:	94 01       	movw	r18, r8
    2720:	a2 01       	movw	r20, r4
    2722:	b1 01       	movw	r22, r2
    2724:	c5 01       	movw	r24, r10
    2726:	96 de       	rcall	.-724    	; 0x2454 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2728:	7c 01       	movw	r14, r24
    272a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    272c:	e1 f0       	breq	.+56     	; 0x2766 <xStreamBufferSend+0x120>
    272e:	c5 01       	movw	r24, r10
    2730:	35 de       	rcall	.-918    	; 0x239c <prvBytesInBuffer>
    2732:	f5 01       	movw	r30, r10
    2734:	26 81       	ldd	r18, Z+6	; 0x06
    2736:	37 81       	ldd	r19, Z+7	; 0x07
    2738:	82 17       	cp	r24, r18
    273a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    273c:	a0 f0       	brcs	.+40     	; 0x2766 <xStreamBufferSend+0x120>
    273e:	10 d3       	rcall	.+1568   	; 0x2d60 <vTaskSuspendAll>
    2740:	f5 01       	movw	r30, r10
    2742:	80 85       	ldd	r24, Z+8	; 0x08
    2744:	91 85       	ldd	r25, Z+9	; 0x09
    2746:	89 2b       	or	r24, r25
    2748:	69 f0       	breq	.+26     	; 0x2764 <xStreamBufferSend+0x11e>
    274a:	80 85       	ldd	r24, Z+8	; 0x08
    274c:	91 85       	ldd	r25, Z+9	; 0x09
    274e:	00 e0       	ldi	r16, 0x00	; 0
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	ba 01       	movw	r22, r20
    275a:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <xTaskGenericNotify>
    275e:	f5 01       	movw	r30, r10
    2760:	11 86       	std	Z+9, r1	; 0x09
    2762:	10 86       	std	Z+8, r1	; 0x08
    2764:	e6 d3       	rcall	.+1996   	; 0x2f32 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2766:	c7 01       	movw	r24, r14
    2768:	29 96       	adiw	r28, 0x09	; 9
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	ff 90       	pop	r15
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	bf 90       	pop	r11
    2786:	af 90       	pop	r10
    2788:	9f 90       	pop	r9
    278a:	8f 90       	pop	r8
    278c:	7f 90       	pop	r7
    278e:	6f 90       	pop	r6
    2790:	5f 90       	pop	r5
    2792:	4f 90       	pop	r4
    2794:	3f 90       	pop	r3
    2796:	2f 90       	pop	r2
    2798:	08 95       	ret

0000279a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ec 01       	movw	r28, r24
    27b0:	5b 01       	movw	r10, r22
    27b2:	6a 01       	movw	r12, r20
    27b4:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b8:	80 ff       	sbrs	r24, 0
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    27bc:	8a 01       	movw	r16, r20
    27be:	0e 5f       	subi	r16, 0xFE	; 254
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    27c4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27c6:	ce 01       	movw	r24, r28
    27c8:	2c df       	rcall	.-424    	; 0x2622 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27ca:	9c 01       	movw	r18, r24
    27cc:	a6 01       	movw	r20, r12
    27ce:	b5 01       	movw	r22, r10
    27d0:	ce 01       	movw	r24, r28
    27d2:	40 de       	rcall	.-896    	; 0x2454 <prvWriteMessageToBuffer>
    27d4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    27d6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27d8:	b9 f0       	breq	.+46     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
    27da:	ce 01       	movw	r24, r28
    27dc:	df dd       	rcall	.-1090   	; 0x239c <prvBytesInBuffer>
    27de:	2e 81       	ldd	r18, Y+6	; 0x06
    27e0:	3f 81       	ldd	r19, Y+7	; 0x07
    27e2:	82 17       	cp	r24, r18
    27e4:	93 07       	cpc	r25, r19
    27e6:	80 f0       	brcs	.+32     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    27e8:	88 85       	ldd	r24, Y+8	; 0x08
    27ea:	99 85       	ldd	r25, Y+9	; 0x09
    27ec:	89 2b       	or	r24, r25
    27ee:	61 f0       	breq	.+24     	; 0x2808 <xStreamBufferSendFromISR+0x6e>
    27f0:	88 85       	ldd	r24, Y+8	; 0x08
    27f2:	99 85       	ldd	r25, Y+9	; 0x09
    27f4:	00 e0       	ldi	r16, 0x00	; 0
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	ba 01       	movw	r22, r20
    2800:	0e 94 49 1c 	call	0x3892	; 0x3892 <xTaskGenericNotifyFromISR>
    2804:	19 86       	std	Y+9, r1	; 0x09
    2806:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2808:	c6 01       	movw	r24, r12
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	ff 90       	pop	r15
    2814:	ef 90       	pop	r14
    2816:	df 90       	pop	r13
    2818:	cf 90       	pop	r12
    281a:	bf 90       	pop	r11
    281c:	af 90       	pop	r10
    281e:	08 95       	ret

00002820 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2820:	4f 92       	push	r4
    2822:	5f 92       	push	r5
    2824:	6f 92       	push	r6
    2826:	7f 92       	push	r7
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	1f 92       	push	r1
    2842:	1f 92       	push	r1
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	5c 01       	movw	r10, r24
    284a:	2b 01       	movw	r4, r22
    284c:	3a 01       	movw	r6, r20
    284e:	68 01       	movw	r12, r16
    2850:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2852:	fc 01       	movw	r30, r24
    2854:	86 85       	ldd	r24, Z+14	; 0x0e
    2856:	80 fd       	sbrc	r24, 0
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    285a:	81 2c       	mov	r8, r1
    285c:	91 2c       	mov	r9, r1
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2860:	68 94       	set
    2862:	88 24       	eor	r8, r8
    2864:	81 f8       	bld	r8, 1
    2866:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2868:	c1 14       	cp	r12, r1
    286a:	d1 04       	cpc	r13, r1
    286c:	e1 04       	cpc	r14, r1
    286e:	f1 04       	cpc	r15, r1
    2870:	31 f1       	breq	.+76     	; 0x28be <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2878:	c5 01       	movw	r24, r10
    287a:	90 dd       	rcall	.-1248   	; 0x239c <prvBytesInBuffer>
    287c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    287e:	88 16       	cp	r8, r24
    2880:	99 06       	cpc	r9, r25
    2882:	40 f0       	brcs	.+16     	; 0x2894 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    288c:	b7 d5       	rcall	.+2926   	; 0x33fc <xTaskGetCurrentTaskHandle>
    288e:	f5 01       	movw	r30, r10
    2890:	91 87       	std	Z+9, r25	; 0x09
    2892:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2898:	80 16       	cp	r8, r16
    289a:	91 06       	cpc	r9, r17
    289c:	b0 f0       	brcs	.+44     	; 0x28ca <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	a9 01       	movw	r20, r18
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	cb 01       	movw	r24, r22
    28ae:	ef d6       	rcall	.+3550   	; 0x368e <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    28b0:	f5 01       	movw	r30, r10
    28b2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28b4:	10 86       	std	Z+8, r1	; 0x08
    28b6:	c5 01       	movw	r24, r10
    28b8:	71 dd       	rcall	.-1310   	; 0x239c <prvBytesInBuffer>
    28ba:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <xStreamBufferReceive+0xa4>
    28be:	c5 01       	movw	r24, r10
    28c0:	6d dd       	rcall	.-1318   	; 0x239c <prvBytesInBuffer>
    28c2:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    28c4:	80 16       	cp	r8, r16
    28c6:	91 06       	cpc	r9, r17
    28c8:	b8 f5       	brcc	.+110    	; 0x2938 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    28ca:	81 14       	cp	r8, r1
    28cc:	91 04       	cpc	r9, r1
    28ce:	c1 f0       	breq	.+48     	; 0x2900 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    28d0:	f5 01       	movw	r30, r10
    28d2:	e0 80       	ld	r14, Z
    28d4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    28d6:	98 01       	movw	r18, r16
    28d8:	a4 01       	movw	r20, r8
    28da:	be 01       	movw	r22, r28
    28dc:	6f 5f       	subi	r22, 0xFF	; 255
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	c5 01       	movw	r24, r10
    28e2:	f8 dd       	rcall	.-1040   	; 0x24d4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    28e8:	08 19       	sub	r16, r8
    28ea:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28ec:	68 16       	cp	r6, r24
    28ee:	79 06       	cpc	r7, r25
    28f0:	30 f4       	brcc	.+12     	; 0x28fe <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    28f2:	f5 01       	movw	r30, r10
    28f4:	f1 82       	std	Z+1, r15	; 0x01
    28f6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    28f8:	61 2c       	mov	r6, r1
    28fa:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    28fe:	3c 01       	movw	r6, r24
    2900:	98 01       	movw	r18, r16
    2902:	a3 01       	movw	r20, r6
    2904:	b2 01       	movw	r22, r4
    2906:	c5 01       	movw	r24, r10
    2908:	e5 dd       	rcall	.-1078   	; 0x24d4 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    290a:	7c 01       	movw	r14, r24
    290c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    290e:	b1 f0       	breq	.+44     	; 0x293c <xStreamBufferReceive+0x11c>
    2910:	27 d2       	rcall	.+1102   	; 0x2d60 <vTaskSuspendAll>
    2912:	f5 01       	movw	r30, r10
    2914:	82 85       	ldd	r24, Z+10	; 0x0a
    2916:	93 85       	ldd	r25, Z+11	; 0x0b
    2918:	89 2b       	or	r24, r25
    291a:	61 f0       	breq	.+24     	; 0x2934 <xStreamBufferReceive+0x114>
    291c:	82 85       	ldd	r24, Z+10	; 0x0a
    291e:	93 85       	ldd	r25, Z+11	; 0x0b
    2920:	00 e0       	ldi	r16, 0x00	; 0
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	ba 01       	movw	r22, r20
    292c:	3a d7       	rcall	.+3700   	; 0x37a2 <xTaskGenericNotify>
    292e:	f5 01       	movw	r30, r10
    2930:	13 86       	std	Z+11, r1	; 0x0b
    2932:	12 86       	std	Z+10, r1	; 0x0a
    2934:	fe d2       	rcall	.+1532   	; 0x2f32 <xTaskResumeAll>
    2936:	02 c0       	rjmp	.+4      	; 0x293c <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2938:	e1 2c       	mov	r14, r1
    293a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    293c:	c7 01       	movw	r24, r14
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	bf 90       	pop	r11
    2954:	af 90       	pop	r10
    2956:	9f 90       	pop	r9
    2958:	8f 90       	pop	r8
    295a:	7f 90       	pop	r7
    295c:	6f 90       	pop	r6
    295e:	5f 90       	pop	r5
    2960:	4f 90       	pop	r4
    2962:	08 95       	ret

00002964 <prvResetNextTaskUnblockTime>:
    2964:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2968:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    296c:	80 81       	ld	r24, Z
    296e:	81 11       	cpse	r24, r1
    2970:	0c c0       	rjmp	.+24     	; 0x298a <prvResetNextTaskUnblockTime+0x26>
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	9f ef       	ldi	r25, 0xFF	; 255
    2976:	dc 01       	movw	r26, r24
    2978:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    297c:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2980:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2984:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2988:	08 95       	ret
    298a:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    298e:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2992:	07 80       	ldd	r0, Z+7	; 0x07
    2994:	f0 85       	ldd	r31, Z+8	; 0x08
    2996:	e0 2d       	mov	r30, r0
    2998:	00 84       	ldd	r0, Z+8	; 0x08
    299a:	f1 85       	ldd	r31, Z+9	; 0x09
    299c:	e0 2d       	mov	r30, r0
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	a4 81       	ldd	r26, Z+4	; 0x04
    29a4:	b5 81       	ldd	r27, Z+5	; 0x05
    29a6:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    29aa:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    29ae:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    29b2:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    29b6:	08 95       	ret

000029b8 <prvAddCurrentTaskToDelayedList>:
    29b8:	8f 92       	push	r8
    29ba:	9f 92       	push	r9
    29bc:	af 92       	push	r10
    29be:	bf 92       	push	r11
    29c0:	cf 92       	push	r12
    29c2:	df 92       	push	r13
    29c4:	ef 92       	push	r14
    29c6:	ff 92       	push	r15
    29c8:	cf 93       	push	r28
    29ca:	6b 01       	movw	r12, r22
    29cc:	7c 01       	movw	r14, r24
    29ce:	c4 2f       	mov	r28, r20
    29d0:	80 90 46 18 	lds	r8, 0x1846	; 0x801846 <xTickCount>
    29d4:	90 90 47 18 	lds	r9, 0x1847	; 0x801847 <xTickCount+0x1>
    29d8:	a0 90 48 18 	lds	r10, 0x1848	; 0x801848 <xTickCount+0x2>
    29dc:	b0 90 49 18 	lds	r11, 0x1849	; 0x801849 <xTickCount+0x3>
    29e0:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    29e4:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    29e8:	02 96       	adiw	r24, 0x02	; 2
    29ea:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    29ee:	8f ef       	ldi	r24, 0xFF	; 255
    29f0:	c8 16       	cp	r12, r24
    29f2:	d8 06       	cpc	r13, r24
    29f4:	e8 06       	cpc	r14, r24
    29f6:	f8 06       	cpc	r15, r24
    29f8:	69 f4       	brne	.+26     	; 0x2a14 <prvAddCurrentTaskToDelayedList+0x5c>
    29fa:	cc 23       	and	r28, r28
    29fc:	59 f0       	breq	.+22     	; 0x2a14 <prvAddCurrentTaskToDelayedList+0x5c>
    29fe:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a02:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a06:	6e 5f       	subi	r22, 0xFE	; 254
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	8b e4       	ldi	r24, 0x4B	; 75
    2a0c:	98 e1       	ldi	r25, 0x18	; 24
    2a0e:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a14:	c8 0c       	add	r12, r8
    2a16:	d9 1c       	adc	r13, r9
    2a18:	ea 1c       	adc	r14, r10
    2a1a:	fb 1c       	adc	r15, r11
    2a1c:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a20:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a24:	c2 82       	std	Z+2, r12	; 0x02
    2a26:	d3 82       	std	Z+3, r13	; 0x03
    2a28:	e4 82       	std	Z+4, r14	; 0x04
    2a2a:	f5 82       	std	Z+5, r15	; 0x05
    2a2c:	c8 14       	cp	r12, r8
    2a2e:	d9 04       	cpc	r13, r9
    2a30:	ea 04       	cpc	r14, r10
    2a32:	fb 04       	cpc	r15, r11
    2a34:	68 f4       	brcc	.+26     	; 0x2a50 <prvAddCurrentTaskToDelayedList+0x98>
    2a36:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a3a:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a3e:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2a42:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2a46:	6e 5f       	subi	r22, 0xFE	; 254
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    2a4e:	21 c0       	rjmp	.+66     	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a50:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2a54:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2a58:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2a5c:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2a60:	6e 5f       	subi	r22, 0xFE	; 254
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    2a68:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2a6c:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a70:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a74:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a78:	c8 16       	cp	r12, r24
    2a7a:	d9 06       	cpc	r13, r25
    2a7c:	ea 06       	cpc	r14, r26
    2a7e:	fb 06       	cpc	r15, r27
    2a80:	40 f4       	brcc	.+16     	; 0x2a92 <prvAddCurrentTaskToDelayedList+0xda>
    2a82:	c0 92 3c 18 	sts	0x183C, r12	; 0x80183c <xNextTaskUnblockTime>
    2a86:	d0 92 3d 18 	sts	0x183D, r13	; 0x80183d <xNextTaskUnblockTime+0x1>
    2a8a:	e0 92 3e 18 	sts	0x183E, r14	; 0x80183e <xNextTaskUnblockTime+0x2>
    2a8e:	f0 92 3f 18 	sts	0x183F, r15	; 0x80183f <xNextTaskUnblockTime+0x3>
    2a92:	cf 91       	pop	r28
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	08 95       	ret

00002aa6 <xTaskCreate>:
    2aa6:	4f 92       	push	r4
    2aa8:	5f 92       	push	r5
    2aaa:	6f 92       	push	r6
    2aac:	7f 92       	push	r7
    2aae:	8f 92       	push	r8
    2ab0:	9f 92       	push	r9
    2ab2:	af 92       	push	r10
    2ab4:	bf 92       	push	r11
    2ab6:	cf 92       	push	r12
    2ab8:	df 92       	push	r13
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	4c 01       	movw	r8, r24
    2ac8:	6b 01       	movw	r12, r22
    2aca:	5a 01       	movw	r10, r20
    2acc:	29 01       	movw	r4, r18
    2ace:	ca 01       	movw	r24, r20
    2ad0:	0e 94 1f 0b 	call	0x163e	; 0x163e <pvPortMalloc>
    2ad4:	3c 01       	movw	r6, r24
    2ad6:	89 2b       	or	r24, r25
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <xTaskCreate+0x36>
    2ada:	f4 c0       	rjmp	.+488    	; 0x2cc4 <xTaskCreate+0x21e>
    2adc:	80 e3       	ldi	r24, 0x30	; 48
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 1f 0b 	call	0x163e	; 0x163e <pvPortMalloc>
    2ae4:	ec 01       	movw	r28, r24
    2ae6:	89 2b       	or	r24, r25
    2ae8:	99 f0       	breq	.+38     	; 0x2b10 <xTaskCreate+0x6a>
    2aea:	7c 8e       	std	Y+28, r7	; 0x1c
    2aec:	6b 8e       	std	Y+27, r6	; 0x1b
    2aee:	a5 01       	movw	r20, r10
    2af0:	65 ea       	ldi	r22, 0xA5	; 165
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	c3 01       	movw	r24, r6
    2af6:	0e 94 0e 31 	call	0x621c	; 0x621c <memset>
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	a2 1a       	sub	r10, r18
    2afe:	b1 08       	sbc	r11, r1
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	a8 0e       	add	r10, r24
    2b06:	b9 1e       	adc	r11, r25
    2b08:	c1 14       	cp	r12, r1
    2b0a:	d1 04       	cpc	r13, r1
    2b0c:	29 f4       	brne	.+10     	; 0x2b18 <xTaskCreate+0x72>
    2b0e:	20 c0       	rjmp	.+64     	; 0x2b50 <xTaskCreate+0xaa>
    2b10:	c3 01       	movw	r24, r6
    2b12:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vPortFree>
    2b16:	d6 c0       	rjmp	.+428    	; 0x2cc4 <xTaskCreate+0x21e>
    2b18:	d6 01       	movw	r26, r12
    2b1a:	8c 91       	ld	r24, X
    2b1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b1e:	8c 91       	ld	r24, X
    2b20:	88 23       	and	r24, r24
    2b22:	a1 f0       	breq	.+40     	; 0x2b4c <xTaskCreate+0xa6>
    2b24:	ae 01       	movw	r20, r28
    2b26:	42 5e       	subi	r20, 0xE2	; 226
    2b28:	5f 4f       	sbci	r21, 0xFF	; 255
    2b2a:	f6 01       	movw	r30, r12
    2b2c:	31 96       	adiw	r30, 0x01	; 1
    2b2e:	b8 e0       	ldi	r27, 0x08	; 8
    2b30:	cb 0e       	add	r12, r27
    2b32:	d1 1c       	adc	r13, r1
    2b34:	cf 01       	movw	r24, r30
    2b36:	21 91       	ld	r18, Z+
    2b38:	da 01       	movw	r26, r20
    2b3a:	2d 93       	st	X+, r18
    2b3c:	ad 01       	movw	r20, r26
    2b3e:	dc 01       	movw	r26, r24
    2b40:	8c 91       	ld	r24, X
    2b42:	88 23       	and	r24, r24
    2b44:	19 f0       	breq	.+6      	; 0x2b4c <xTaskCreate+0xa6>
    2b46:	ce 16       	cp	r12, r30
    2b48:	df 06       	cpc	r13, r31
    2b4a:	a1 f7       	brne	.-24     	; 0x2b34 <xTaskCreate+0x8e>
    2b4c:	1c a2       	std	Y+36, r1	; 0x24
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <xTaskCreate+0xac>
    2b50:	1d 8e       	std	Y+29, r1	; 0x1d
    2b52:	06 30       	cpi	r16, 0x06	; 6
    2b54:	08 f0       	brcs	.+2      	; 0x2b58 <xTaskCreate+0xb2>
    2b56:	05 e0       	ldi	r16, 0x05	; 5
    2b58:	0a 8f       	std	Y+26, r16	; 0x1a
    2b5a:	0f a3       	std	Y+39, r16	; 0x27
    2b5c:	18 a6       	std	Y+40, r1	; 0x28
    2b5e:	6e 01       	movw	r12, r28
    2b60:	b2 e0       	ldi	r27, 0x02	; 2
    2b62:	cb 0e       	add	r12, r27
    2b64:	d1 1c       	adc	r13, r1
    2b66:	c6 01       	movw	r24, r12
    2b68:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInitialiseItem>
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	0e 96       	adiw	r24, 0x0e	; 14
    2b70:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInitialiseItem>
    2b74:	db 87       	std	Y+11, r29	; 0x0b
    2b76:	ca 87       	std	Y+10, r28	; 0x0a
    2b78:	86 e0       	ldi	r24, 0x06	; 6
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	80 1b       	sub	r24, r16
    2b82:	91 09       	sbc	r25, r1
    2b84:	a1 09       	sbc	r26, r1
    2b86:	b1 09       	sbc	r27, r1
    2b88:	8e 87       	std	Y+14, r24	; 0x0e
    2b8a:	9f 87       	std	Y+15, r25	; 0x0f
    2b8c:	a8 8b       	std	Y+16, r26	; 0x10
    2b8e:	b9 8b       	std	Y+17, r27	; 0x11
    2b90:	df 8b       	std	Y+23, r29	; 0x17
    2b92:	ce 8b       	std	Y+22, r28	; 0x16
    2b94:	1a a6       	std	Y+42, r1	; 0x2a
    2b96:	19 a6       	std	Y+41, r1	; 0x29
    2b98:	1b a6       	std	Y+43, r1	; 0x2b
    2b9a:	1c a6       	std	Y+44, r1	; 0x2c
    2b9c:	1d a6       	std	Y+45, r1	; 0x2d
    2b9e:	1e a6       	std	Y+46, r1	; 0x2e
    2ba0:	1f a6       	std	Y+47, r1	; 0x2f
    2ba2:	a2 01       	movw	r20, r4
    2ba4:	b4 01       	movw	r22, r8
    2ba6:	c5 01       	movw	r24, r10
    2ba8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <pxPortInitialiseStack>
    2bac:	99 83       	std	Y+1, r25	; 0x01
    2bae:	88 83       	st	Y, r24
    2bb0:	e1 14       	cp	r14, r1
    2bb2:	f1 04       	cpc	r15, r1
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <xTaskCreate+0x116>
    2bb6:	f7 01       	movw	r30, r14
    2bb8:	d1 83       	std	Z+1, r29	; 0x01
    2bba:	c0 83       	st	Z, r28
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	0f 92       	push	r0
    2bc2:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
    2bcc:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2bd0:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2bd4:	89 2b       	or	r24, r25
    2bd6:	d1 f5       	brne	.+116    	; 0x2c4c <xTaskCreate+0x1a6>
    2bd8:	d0 93 ca 18 	sts	0x18CA, r29	; 0x8018ca <pxCurrentTCB+0x1>
    2bdc:	c0 93 c9 18 	sts	0x18C9, r28	; 0x8018c9 <pxCurrentTCB>
    2be0:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	09 f0       	breq	.+2      	; 0x2bea <xTaskCreate+0x144>
    2be8:	41 c0       	rjmp	.+130    	; 0x2c6c <xTaskCreate+0x1c6>
    2bea:	07 e8       	ldi	r16, 0x87	; 135
    2bec:	18 e1       	ldi	r17, 0x18	; 24
    2bee:	0f 2e       	mov	r0, r31
    2bf0:	f9 ec       	ldi	r31, 0xC9	; 201
    2bf2:	ef 2e       	mov	r14, r31
    2bf4:	f8 e1       	ldi	r31, 0x18	; 24
    2bf6:	ff 2e       	mov	r15, r31
    2bf8:	f0 2d       	mov	r31, r0
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c00:	05 5f       	subi	r16, 0xF5	; 245
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
    2c04:	0e 15       	cp	r16, r14
    2c06:	1f 05       	cpc	r17, r15
    2c08:	c1 f7       	brne	.-16     	; 0x2bfa <xTaskCreate+0x154>
    2c0a:	8c e7       	ldi	r24, 0x7C	; 124
    2c0c:	98 e1       	ldi	r25, 0x18	; 24
    2c0e:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c12:	81 e7       	ldi	r24, 0x71	; 113
    2c14:	98 e1       	ldi	r25, 0x18	; 24
    2c16:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c1a:	82 e6       	ldi	r24, 0x62	; 98
    2c1c:	98 e1       	ldi	r25, 0x18	; 24
    2c1e:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c22:	87 e5       	ldi	r24, 0x57	; 87
    2c24:	98 e1       	ldi	r25, 0x18	; 24
    2c26:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c2a:	8b e4       	ldi	r24, 0x4B	; 75
    2c2c:	98 e1       	ldi	r25, 0x18	; 24
    2c2e:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    2c32:	8c e7       	ldi	r24, 0x7C	; 124
    2c34:	98 e1       	ldi	r25, 0x18	; 24
    2c36:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <pxDelayedTaskList+0x1>
    2c3a:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <pxDelayedTaskList>
    2c3e:	81 e7       	ldi	r24, 0x71	; 113
    2c40:	98 e1       	ldi	r25, 0x18	; 24
    2c42:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2c46:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2c4a:	10 c0       	rjmp	.+32     	; 0x2c6c <xTaskCreate+0x1c6>
    2c4c:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2c50:	81 11       	cpse	r24, r1
    2c52:	0c c0       	rjmp	.+24     	; 0x2c6c <xTaskCreate+0x1c6>
    2c54:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2c58:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2c5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c60:	89 17       	cp	r24, r25
    2c62:	20 f0       	brcs	.+8      	; 0x2c6c <xTaskCreate+0x1c6>
    2c64:	d0 93 ca 18 	sts	0x18CA, r29	; 0x8018ca <pxCurrentTCB+0x1>
    2c68:	c0 93 c9 18 	sts	0x18C9, r28	; 0x8018c9 <pxCurrentTCB>
    2c6c:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <uxTaskNumber>
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <uxTaskNumber>
    2c76:	8d a3       	std	Y+37, r24	; 0x25
    2c78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c7a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2c7e:	98 17       	cp	r25, r24
    2c80:	10 f4       	brcc	.+4      	; 0x2c86 <xTaskCreate+0x1e0>
    2c82:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2c86:	fb e0       	ldi	r31, 0x0B	; 11
    2c88:	8f 9f       	mul	r24, r31
    2c8a:	c0 01       	movw	r24, r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	b6 01       	movw	r22, r12
    2c90:	89 57       	subi	r24, 0x79	; 121
    2c92:	97 4e       	sbci	r25, 0xE7	; 231
    2c94:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2ca0:	88 23       	and	r24, r24
    2ca2:	61 f0       	breq	.+24     	; 0x2cbc <xTaskCreate+0x216>
    2ca4:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ca8:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2cac:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb0:	98 17       	cp	r25, r24
    2cb2:	30 f4       	brcc	.+12     	; 0x2cc0 <xTaskCreate+0x21a>
    2cb4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <xTaskCreate+0x220>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <xTaskCreate+0x220>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <xTaskCreate+0x220>
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	ff 90       	pop	r15
    2cd0:	ef 90       	pop	r14
    2cd2:	df 90       	pop	r13
    2cd4:	cf 90       	pop	r12
    2cd6:	bf 90       	pop	r11
    2cd8:	af 90       	pop	r10
    2cda:	9f 90       	pop	r9
    2cdc:	8f 90       	pop	r8
    2cde:	7f 90       	pop	r7
    2ce0:	6f 90       	pop	r6
    2ce2:	5f 90       	pop	r5
    2ce4:	4f 90       	pop	r4
    2ce6:	08 95       	ret

00002ce8 <vTaskStartScheduler>:
    2ce8:	ef 92       	push	r14
    2cea:	ff 92       	push	r15
    2cec:	0f 93       	push	r16
    2cee:	0f 2e       	mov	r0, r31
    2cf0:	fa e3       	ldi	r31, 0x3A	; 58
    2cf2:	ef 2e       	mov	r14, r31
    2cf4:	f8 e1       	ldi	r31, 0x18	; 24
    2cf6:	ff 2e       	mov	r15, r31
    2cf8:	f0 2d       	mov	r31, r0
    2cfa:	00 e0       	ldi	r16, 0x00	; 0
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 ec       	ldi	r20, 0xC0	; 192
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	6d eb       	ldi	r22, 0xBD	; 189
    2d06:	74 e0       	ldi	r23, 0x04	; 4
    2d08:	8d ec       	ldi	r24, 0xCD	; 205
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	cc de       	rcall	.-616    	; 0x2aa6 <xTaskCreate>
    2d0e:	81 30       	cpi	r24, 0x01	; 1
    2d10:	19 f5       	brne	.+70     	; 0x2d58 <vTaskStartScheduler+0x70>
    2d12:	ce d6       	rcall	.+3484   	; 0x3ab0 <xTimerCreateTimerTask>
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	01 f5       	brne	.+64     	; 0x2d58 <vTaskStartScheduler+0x70>
    2d18:	f8 94       	cli
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	dc 01       	movw	r26, r24
    2d20:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2d24:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2d28:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2d2c:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <xSchedulerRunning>
    2d36:	10 92 46 18 	sts	0x1846, r1	; 0x801846 <xTickCount>
    2d3a:	10 92 47 18 	sts	0x1847, r1	; 0x801847 <xTickCount+0x1>
    2d3e:	10 92 48 18 	sts	0x1848, r1	; 0x801848 <xTickCount+0x2>
    2d42:	10 92 49 18 	sts	0x1849, r1	; 0x801849 <xTickCount+0x3>
    2d46:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2d4a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2d4e:	81 a5       	ldd	r24, Z+41	; 0x29
    2d50:	0e 94 56 09 	call	0x12ac	; 0x12ac <task_switch_in>
    2d54:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <xPortStartScheduler>
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	08 95       	ret

00002d60 <vTaskSuspendAll>:
    2d60:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2d6a:	08 95       	ret

00002d6c <xTaskGetTickCount>:
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	0f 92       	push	r0
    2d72:	60 91 46 18 	lds	r22, 0x1846	; 0x801846 <xTickCount>
    2d76:	70 91 47 18 	lds	r23, 0x1847	; 0x801847 <xTickCount+0x1>
    2d7a:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <xTickCount+0x2>
    2d7e:	90 91 49 18 	lds	r25, 0x1849	; 0x801849 <xTickCount+0x3>
    2d82:	0f 90       	pop	r0
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	08 95       	ret

00002d88 <xTaskIncrementTick>:
    2d88:	9f 92       	push	r9
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2da2:	81 11       	cpse	r24, r1
    2da4:	ad c0       	rjmp	.+346    	; 0x2f00 <xTaskIncrementTick+0x178>
    2da6:	c0 90 46 18 	lds	r12, 0x1846	; 0x801846 <xTickCount>
    2daa:	d0 90 47 18 	lds	r13, 0x1847	; 0x801847 <xTickCount+0x1>
    2dae:	e0 90 48 18 	lds	r14, 0x1848	; 0x801848 <xTickCount+0x2>
    2db2:	f0 90 49 18 	lds	r15, 0x1849	; 0x801849 <xTickCount+0x3>
    2db6:	8f ef       	ldi	r24, 0xFF	; 255
    2db8:	c8 1a       	sub	r12, r24
    2dba:	d8 0a       	sbc	r13, r24
    2dbc:	e8 0a       	sbc	r14, r24
    2dbe:	f8 0a       	sbc	r15, r24
    2dc0:	c0 92 46 18 	sts	0x1846, r12	; 0x801846 <xTickCount>
    2dc4:	d0 92 47 18 	sts	0x1847, r13	; 0x801847 <xTickCount+0x1>
    2dc8:	e0 92 48 18 	sts	0x1848, r14	; 0x801848 <xTickCount+0x2>
    2dcc:	f0 92 49 18 	sts	0x1849, r15	; 0x801849 <xTickCount+0x3>
    2dd0:	c1 14       	cp	r12, r1
    2dd2:	d1 04       	cpc	r13, r1
    2dd4:	e1 04       	cpc	r14, r1
    2dd6:	f1 04       	cpc	r15, r1
    2dd8:	b1 f4       	brne	.+44     	; 0x2e06 <xTaskIncrementTick+0x7e>
    2dda:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    2dde:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2de2:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    2de6:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2dea:	30 93 70 18 	sts	0x1870, r19	; 0x801870 <pxDelayedTaskList+0x1>
    2dee:	20 93 6f 18 	sts	0x186F, r18	; 0x80186f <pxDelayedTaskList>
    2df2:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    2df6:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    2dfa:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <xNumOfOverflows>
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <xNumOfOverflows>
    2e04:	af dd       	rcall	.-1186   	; 0x2964 <prvResetNextTaskUnblockTime>
    2e06:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <xNextTaskUnblockTime>
    2e0a:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e0e:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e12:	b0 91 3f 18 	lds	r27, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e16:	c8 16       	cp	r12, r24
    2e18:	d9 06       	cpc	r13, r25
    2e1a:	ea 06       	cpc	r14, r26
    2e1c:	fb 06       	cpc	r15, r27
    2e1e:	10 f4       	brcc	.+4      	; 0x2e24 <xTaskIncrementTick+0x9c>
    2e20:	b1 2c       	mov	r11, r1
    2e22:	5d c0       	rjmp	.+186    	; 0x2ede <xTaskIncrementTick+0x156>
    2e24:	b1 2c       	mov	r11, r1
    2e26:	0f 2e       	mov	r0, r31
    2e28:	fb e0       	ldi	r31, 0x0B	; 11
    2e2a:	af 2e       	mov	r10, r31
    2e2c:	f0 2d       	mov	r31, r0
    2e2e:	99 24       	eor	r9, r9
    2e30:	93 94       	inc	r9
    2e32:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e36:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e3a:	80 81       	ld	r24, Z
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	0c c0       	rjmp	.+24     	; 0x2e58 <xTaskIncrementTick+0xd0>
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	9f ef       	ldi	r25, 0xFF	; 255
    2e44:	dc 01       	movw	r26, r24
    2e46:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e4a:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e4e:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e52:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e56:	43 c0       	rjmp	.+134    	; 0x2ede <xTaskIncrementTick+0x156>
    2e58:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    2e5c:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    2e60:	07 80       	ldd	r0, Z+7	; 0x07
    2e62:	f0 85       	ldd	r31, Z+8	; 0x08
    2e64:	e0 2d       	mov	r30, r0
    2e66:	c0 85       	ldd	r28, Z+8	; 0x08
    2e68:	d1 85       	ldd	r29, Z+9	; 0x09
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	ac 81       	ldd	r26, Y+4	; 0x04
    2e70:	bd 81       	ldd	r27, Y+5	; 0x05
    2e72:	c8 16       	cp	r12, r24
    2e74:	d9 06       	cpc	r13, r25
    2e76:	ea 06       	cpc	r14, r26
    2e78:	fb 06       	cpc	r15, r27
    2e7a:	48 f4       	brcc	.+18     	; 0x2e8e <xTaskIncrementTick+0x106>
    2e7c:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <xNextTaskUnblockTime>
    2e80:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <xNextTaskUnblockTime+0x1>
    2e84:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <xNextTaskUnblockTime+0x2>
    2e88:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <xNextTaskUnblockTime+0x3>
    2e8c:	28 c0       	rjmp	.+80     	; 0x2ede <xTaskIncrementTick+0x156>
    2e8e:	8e 01       	movw	r16, r28
    2e90:	0e 5f       	subi	r16, 0xFE	; 254
    2e92:	1f 4f       	sbci	r17, 0xFF	; 255
    2e94:	c8 01       	movw	r24, r16
    2e96:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2e9a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e9c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e9e:	89 2b       	or	r24, r25
    2ea0:	21 f0       	breq	.+8      	; 0x2eaa <xTaskIncrementTick+0x122>
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	0e 96       	adiw	r24, 0x0e	; 14
    2ea6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2eaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eac:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2eb0:	98 17       	cp	r25, r24
    2eb2:	10 f4       	brcc	.+4      	; 0x2eb8 <xTaskIncrementTick+0x130>
    2eb4:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2eb8:	a8 9e       	mul	r10, r24
    2eba:	c0 01       	movw	r24, r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	b8 01       	movw	r22, r16
    2ec0:	89 57       	subi	r24, 0x79	; 121
    2ec2:	97 4e       	sbci	r25, 0xE7	; 231
    2ec4:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2ec8:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ecc:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2ed0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ed2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ed4:	98 17       	cp	r25, r24
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <xTaskIncrementTick+0x152>
    2ed8:	ac cf       	rjmp	.-168    	; 0x2e32 <xTaskIncrementTick+0xaa>
    2eda:	b9 2c       	mov	r11, r9
    2edc:	aa cf       	rjmp	.-172    	; 0x2e32 <xTaskIncrementTick+0xaa>
    2ede:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2ee2:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2ee6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ee8:	8b e0       	ldi	r24, 0x0B	; 11
    2eea:	e8 9f       	mul	r30, r24
    2eec:	f0 01       	movw	r30, r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	e9 57       	subi	r30, 0x79	; 121
    2ef2:	f7 4e       	sbci	r31, 0xE7	; 231
    2ef4:	80 81       	ld	r24, Z
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	48 f0       	brcs	.+18     	; 0x2f0c <xTaskIncrementTick+0x184>
    2efa:	bb 24       	eor	r11, r11
    2efc:	b3 94       	inc	r11
    2efe:	06 c0       	rjmp	.+12     	; 0x2f0c <xTaskIncrementTick+0x184>
    2f00:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <uxPendedTicks>
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <uxPendedTicks>
    2f0a:	b1 2c       	mov	r11, r1
    2f0c:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2f10:	88 23       	and	r24, r24
    2f12:	11 f0       	breq	.+4      	; 0x2f18 <xTaskIncrementTick+0x190>
    2f14:	bb 24       	eor	r11, r11
    2f16:	b3 94       	inc	r11
    2f18:	8b 2d       	mov	r24, r11
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	ef 90       	pop	r14
    2f26:	df 90       	pop	r13
    2f28:	cf 90       	pop	r12
    2f2a:	bf 90       	pop	r11
    2f2c:	af 90       	pop	r10
    2f2e:	9f 90       	pop	r9
    2f30:	08 95       	ret

00002f32 <xTaskResumeAll>:
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	0f 92       	push	r0
    2f48:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f4c:	81 50       	subi	r24, 0x01	; 1
    2f4e:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <uxSchedulerSuspended>
    2f52:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    2f56:	81 11       	cpse	r24, r1
    2f58:	5a c0       	rjmp	.+180    	; 0x300e <xTaskResumeAll+0xdc>
    2f5a:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    2f5e:	81 11       	cpse	r24, r1
    2f60:	2c c0       	rjmp	.+88     	; 0x2fba <xTaskResumeAll+0x88>
    2f62:	58 c0       	rjmp	.+176    	; 0x3014 <xTaskResumeAll+0xe2>
    2f64:	d7 01       	movw	r26, r14
    2f66:	17 96       	adiw	r26, 0x07	; 7
    2f68:	ed 91       	ld	r30, X+
    2f6a:	fc 91       	ld	r31, X
    2f6c:	18 97       	sbiw	r26, 0x08	; 8
    2f6e:	c0 85       	ldd	r28, Z+8	; 0x08
    2f70:	d1 85       	ldd	r29, Z+9	; 0x09
    2f72:	ce 01       	movw	r24, r28
    2f74:	0e 96       	adiw	r24, 0x0e	; 14
    2f76:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	0e 5f       	subi	r16, 0xFE	; 254
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	c8 01       	movw	r24, r16
    2f82:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    2f86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f88:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2f8c:	98 17       	cp	r25, r24
    2f8e:	10 f4       	brcc	.+4      	; 0x2f94 <xTaskResumeAll+0x62>
    2f90:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2f94:	d8 9e       	mul	r13, r24
    2f96:	c0 01       	movw	r24, r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	b8 01       	movw	r22, r16
    2f9c:	89 57       	subi	r24, 0x79	; 121
    2f9e:	97 4e       	sbci	r25, 0xE7	; 231
    2fa0:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    2fa4:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    2fa8:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    2fac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fae:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fb0:	98 17       	cp	r25, r24
    2fb2:	88 f0       	brcs	.+34     	; 0x2fd6 <xTaskResumeAll+0xa4>
    2fb4:	c0 92 42 18 	sts	0x1842, r12	; 0x801842 <xYieldPending>
    2fb8:	0e c0       	rjmp	.+28     	; 0x2fd6 <xTaskResumeAll+0xa4>
    2fba:	c0 e0       	ldi	r28, 0x00	; 0
    2fbc:	d0 e0       	ldi	r29, 0x00	; 0
    2fbe:	0f 2e       	mov	r0, r31
    2fc0:	f2 e6       	ldi	r31, 0x62	; 98
    2fc2:	ef 2e       	mov	r14, r31
    2fc4:	f8 e1       	ldi	r31, 0x18	; 24
    2fc6:	ff 2e       	mov	r15, r31
    2fc8:	f0 2d       	mov	r31, r0
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	fb e0       	ldi	r31, 0x0B	; 11
    2fce:	df 2e       	mov	r13, r31
    2fd0:	f0 2d       	mov	r31, r0
    2fd2:	cc 24       	eor	r12, r12
    2fd4:	c3 94       	inc	r12
    2fd6:	f7 01       	movw	r30, r14
    2fd8:	80 81       	ld	r24, Z
    2fda:	81 11       	cpse	r24, r1
    2fdc:	c3 cf       	rjmp	.-122    	; 0x2f64 <xTaskResumeAll+0x32>
    2fde:	cd 2b       	or	r28, r29
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <xTaskResumeAll+0xb2>
    2fe2:	c0 dc       	rcall	.-1664   	; 0x2964 <prvResetNextTaskUnblockTime>
    2fe4:	c0 91 43 18 	lds	r28, 0x1843	; 0x801843 <uxPendedTicks>
    2fe8:	cc 23       	and	r28, r28
    2fea:	49 f0       	breq	.+18     	; 0x2ffe <xTaskResumeAll+0xcc>
    2fec:	d1 e0       	ldi	r29, 0x01	; 1
    2fee:	cc de       	rcall	.-616    	; 0x2d88 <xTaskIncrementTick>
    2ff0:	81 11       	cpse	r24, r1
    2ff2:	d0 93 42 18 	sts	0x1842, r29	; 0x801842 <xYieldPending>
    2ff6:	c1 50       	subi	r28, 0x01	; 1
    2ff8:	d1 f7       	brne	.-12     	; 0x2fee <xTaskResumeAll+0xbc>
    2ffa:	10 92 43 18 	sts	0x1843, r1	; 0x801843 <uxPendedTicks>
    2ffe:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    3002:	88 23       	and	r24, r24
    3004:	31 f0       	breq	.+12     	; 0x3012 <xTaskResumeAll+0xe0>
    3006:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	03 c0       	rjmp	.+6      	; 0x3014 <xTaskResumeAll+0xe2>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <xTaskResumeAll+0xe2>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	0f 90       	pop	r0
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	08 95       	ret

0000302a <vTaskDelay>:
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	6b 01       	movw	r12, r22
    3034:	7c 01       	movw	r14, r24
    3036:	67 2b       	or	r22, r23
    3038:	68 2b       	or	r22, r24
    303a:	69 2b       	or	r22, r25
    303c:	41 f0       	breq	.+16     	; 0x304e <vTaskDelay+0x24>
    303e:	90 de       	rcall	.-736    	; 0x2d60 <vTaskSuspendAll>
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	c7 01       	movw	r24, r14
    3044:	b6 01       	movw	r22, r12
    3046:	b8 dc       	rcall	.-1680   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3048:	74 df       	rcall	.-280    	; 0x2f32 <xTaskResumeAll>
    304a:	81 11       	cpse	r24, r1
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <vTaskDelay+0x28>
    304e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3052:	ff 90       	pop	r15
    3054:	ef 90       	pop	r14
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	08 95       	ret

0000305c <vTaskSwitchContext>:
    305c:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3060:	88 23       	and	r24, r24
    3062:	21 f0       	breq	.+8      	; 0x306c <vTaskSwitchContext+0x10>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    306a:	08 95       	ret
    306c:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <xYieldPending>
    3070:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3074:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3078:	81 a5       	ldd	r24, Z+41	; 0x29
    307a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <task_switch_out>
    307e:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3082:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3086:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    308a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    308e:	2d 91       	ld	r18, X+
    3090:	3c 91       	ld	r19, X
    3092:	83 8d       	ldd	r24, Z+27	; 0x1b
    3094:	94 8d       	ldd	r25, Z+28	; 0x1c
    3096:	82 17       	cp	r24, r18
    3098:	93 07       	cpc	r25, r19
    309a:	58 f0       	brcs	.+22     	; 0x30b2 <vTaskSwitchContext+0x56>
    309c:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    30a0:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    30a4:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    30a8:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    30ac:	63 5e       	subi	r22, 0xE3	; 227
    30ae:	7f 4f       	sbci	r23, 0xFF	; 255
    30b0:	22 d6       	rcall	.+3140   	; 0x3cf6 <vApplicationStackOverflowHook>
    30b2:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	9b e0       	ldi	r25, 0x0B	; 11
    30bc:	89 9f       	mul	r24, r25
    30be:	f0 01       	movw	r30, r0
    30c0:	11 24       	eor	r1, r1
    30c2:	e9 57       	subi	r30, 0x79	; 121
    30c4:	f7 4e       	sbci	r31, 0xE7	; 231
    30c6:	90 81       	ld	r25, Z
    30c8:	91 11       	cpse	r25, r1
    30ca:	0e c0       	rjmp	.+28     	; 0x30e8 <vTaskSwitchContext+0x8c>
    30cc:	4b e0       	ldi	r20, 0x0B	; 11
    30ce:	81 50       	subi	r24, 0x01	; 1
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	42 9f       	mul	r20, r18
    30d6:	f0 01       	movw	r30, r0
    30d8:	43 9f       	mul	r20, r19
    30da:	f0 0d       	add	r31, r0
    30dc:	11 24       	eor	r1, r1
    30de:	e9 57       	subi	r30, 0x79	; 121
    30e0:	f7 4e       	sbci	r31, 0xE7	; 231
    30e2:	90 81       	ld	r25, Z
    30e4:	99 23       	and	r25, r25
    30e6:	99 f3       	breq	.-26     	; 0x30ce <vTaskSwitchContext+0x72>
    30e8:	9b e0       	ldi	r25, 0x0B	; 11
    30ea:	92 9f       	mul	r25, r18
    30ec:	a0 01       	movw	r20, r0
    30ee:	93 9f       	mul	r25, r19
    30f0:	50 0d       	add	r21, r0
    30f2:	11 24       	eor	r1, r1
    30f4:	da 01       	movw	r26, r20
    30f6:	a9 57       	subi	r26, 0x79	; 121
    30f8:	b7 4e       	sbci	r27, 0xE7	; 231
    30fa:	11 96       	adiw	r26, 0x01	; 1
    30fc:	ed 91       	ld	r30, X+
    30fe:	fc 91       	ld	r31, X
    3100:	12 97       	sbiw	r26, 0x02	; 2
    3102:	04 80       	ldd	r0, Z+4	; 0x04
    3104:	f5 81       	ldd	r31, Z+5	; 0x05
    3106:	e0 2d       	mov	r30, r0
    3108:	12 96       	adiw	r26, 0x02	; 2
    310a:	fc 93       	st	X, r31
    310c:	ee 93       	st	-X, r30
    310e:	11 97       	sbiw	r26, 0x01	; 1
    3110:	46 57       	subi	r20, 0x76	; 118
    3112:	57 4e       	sbci	r21, 0xE7	; 231
    3114:	e4 17       	cp	r30, r20
    3116:	f5 07       	cpc	r31, r21
    3118:	29 f4       	brne	.+10     	; 0x3124 <vTaskSwitchContext+0xc8>
    311a:	44 81       	ldd	r20, Z+4	; 0x04
    311c:	55 81       	ldd	r21, Z+5	; 0x05
    311e:	fd 01       	movw	r30, r26
    3120:	52 83       	std	Z+2, r21	; 0x02
    3122:	41 83       	std	Z+1, r20	; 0x01
    3124:	9b e0       	ldi	r25, 0x0B	; 11
    3126:	92 9f       	mul	r25, r18
    3128:	f0 01       	movw	r30, r0
    312a:	93 9f       	mul	r25, r19
    312c:	f0 0d       	add	r31, r0
    312e:	11 24       	eor	r1, r1
    3130:	e9 57       	subi	r30, 0x79	; 121
    3132:	f7 4e       	sbci	r31, 0xE7	; 231
    3134:	01 80       	ldd	r0, Z+1	; 0x01
    3136:	f2 81       	ldd	r31, Z+2	; 0x02
    3138:	e0 2d       	mov	r30, r0
    313a:	20 85       	ldd	r18, Z+8	; 0x08
    313c:	31 85       	ldd	r19, Z+9	; 0x09
    313e:	30 93 ca 18 	sts	0x18CA, r19	; 0x8018ca <pxCurrentTCB+0x1>
    3142:	20 93 c9 18 	sts	0x18C9, r18	; 0x8018c9 <pxCurrentTCB>
    3146:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    314a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    314e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3152:	81 a5       	ldd	r24, Z+41	; 0x29
    3154:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <task_switch_in>
    3158:	08 95       	ret

0000315a <vTaskPlaceOnEventList>:
    315a:	cf 92       	push	r12
    315c:	df 92       	push	r13
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	6a 01       	movw	r12, r20
    3164:	7b 01       	movw	r14, r22
    3166:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    316a:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    316e:	62 5f       	subi	r22, 0xF2	; 242
    3170:	7f 4f       	sbci	r23, 0xFF	; 255
    3172:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3176:	41 e0       	ldi	r20, 0x01	; 1
    3178:	c7 01       	movw	r24, r14
    317a:	b6 01       	movw	r22, r12
    317c:	1d dc       	rcall	.-1990   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    317e:	ff 90       	pop	r15
    3180:	ef 90       	pop	r14
    3182:	df 90       	pop	r13
    3184:	cf 90       	pop	r12
    3186:	08 95       	ret

00003188 <vTaskPlaceOnUnorderedEventList>:
    3188:	cf 92       	push	r12
    318a:	df 92       	push	r13
    318c:	ef 92       	push	r14
    318e:	ff 92       	push	r15
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	68 01       	movw	r12, r16
    3196:	79 01       	movw	r14, r18
    3198:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    319c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31a0:	70 68       	ori	r23, 0x80	; 128
    31a2:	46 87       	std	Z+14, r20	; 0x0e
    31a4:	57 87       	std	Z+15, r21	; 0x0f
    31a6:	60 8b       	std	Z+16, r22	; 0x10
    31a8:	71 8b       	std	Z+17, r23	; 0x11
    31aa:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    31ae:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31b2:	62 5f       	subi	r22, 0xF2	; 242
    31b4:	7f 4f       	sbci	r23, 0xFF	; 255
    31b6:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	c7 01       	movw	r24, r14
    31be:	b6 01       	movw	r22, r12
    31c0:	fb db       	rcall	.-2058   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	ef 90       	pop	r14
    31ca:	df 90       	pop	r13
    31cc:	cf 90       	pop	r12
    31ce:	08 95       	ret

000031d0 <vTaskPlaceOnEventListRestricted>:
    31d0:	cf 92       	push	r12
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	cf 93       	push	r28
    31da:	6a 01       	movw	r12, r20
    31dc:	7b 01       	movw	r14, r22
    31de:	c2 2f       	mov	r28, r18
    31e0:	60 91 c9 18 	lds	r22, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    31e4:	70 91 ca 18 	lds	r23, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    31e8:	62 5f       	subi	r22, 0xF2	; 242
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    31f0:	cc 23       	and	r28, r28
    31f2:	21 f0       	breq	.+8      	; 0x31fc <vTaskPlaceOnEventListRestricted+0x2c>
    31f4:	cc 24       	eor	r12, r12
    31f6:	ca 94       	dec	r12
    31f8:	dc 2c       	mov	r13, r12
    31fa:	76 01       	movw	r14, r12
    31fc:	4c 2f       	mov	r20, r28
    31fe:	c7 01       	movw	r24, r14
    3200:	b6 01       	movw	r22, r12
    3202:	da db       	rcall	.-2124   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    3204:	cf 91       	pop	r28
    3206:	ff 90       	pop	r15
    3208:	ef 90       	pop	r14
    320a:	df 90       	pop	r13
    320c:	cf 90       	pop	r12
    320e:	08 95       	ret

00003210 <xTaskRemoveFromEventList>:
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	dc 01       	movw	r26, r24
    321a:	17 96       	adiw	r26, 0x07	; 7
    321c:	ed 91       	ld	r30, X+
    321e:	fc 91       	ld	r31, X
    3220:	18 97       	sbiw	r26, 0x08	; 8
    3222:	c0 85       	ldd	r28, Z+8	; 0x08
    3224:	d1 85       	ldd	r29, Z+9	; 0x09
    3226:	8e 01       	movw	r16, r28
    3228:	02 5f       	subi	r16, 0xF2	; 242
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	c8 01       	movw	r24, r16
    322e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3232:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3236:	81 11       	cpse	r24, r1
    3238:	16 c0       	rjmp	.+44     	; 0x3266 <xTaskRemoveFromEventList+0x56>
    323a:	0c 50       	subi	r16, 0x0C	; 12
    323c:	11 09       	sbc	r17, r1
    323e:	c8 01       	movw	r24, r16
    3240:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3244:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3246:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    324a:	98 17       	cp	r25, r24
    324c:	10 f4       	brcc	.+4      	; 0x3252 <xTaskRemoveFromEventList+0x42>
    324e:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3252:	bb e0       	ldi	r27, 0x0B	; 11
    3254:	8b 9f       	mul	r24, r27
    3256:	c0 01       	movw	r24, r0
    3258:	11 24       	eor	r1, r1
    325a:	b8 01       	movw	r22, r16
    325c:	89 57       	subi	r24, 0x79	; 121
    325e:	97 4e       	sbci	r25, 0xE7	; 231
    3260:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3264:	05 c0       	rjmp	.+10     	; 0x3270 <xTaskRemoveFromEventList+0x60>
    3266:	b8 01       	movw	r22, r16
    3268:	82 e6       	ldi	r24, 0x62	; 98
    326a:	98 e1       	ldi	r25, 0x18	; 24
    326c:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3270:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3274:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3278:	9a 8d       	ldd	r25, Y+26	; 0x1a
    327a:	82 8d       	ldd	r24, Z+26	; 0x1a
    327c:	89 17       	cp	r24, r25
    327e:	20 f4       	brcc	.+8      	; 0x3288 <xTaskRemoveFromEventList+0x78>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    3286:	01 c0       	rjmp	.+2      	; 0x328a <xTaskRemoveFromEventList+0x7a>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	08 95       	ret

00003294 <vTaskRemoveFromUnorderedEventList>:
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	70 68       	ori	r23, 0x80	; 128
    329e:	fc 01       	movw	r30, r24
    32a0:	40 83       	st	Z, r20
    32a2:	51 83       	std	Z+1, r21	; 0x01
    32a4:	62 83       	std	Z+2, r22	; 0x02
    32a6:	73 83       	std	Z+3, r23	; 0x03
    32a8:	c0 85       	ldd	r28, Z+8	; 0x08
    32aa:	d1 85       	ldd	r29, Z+9	; 0x09
    32ac:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    32b0:	8e 01       	movw	r16, r28
    32b2:	0e 5f       	subi	r16, 0xFE	; 254
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	c8 01       	movw	r24, r16
    32b8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    32bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32be:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    32c2:	98 17       	cp	r25, r24
    32c4:	10 f4       	brcc	.+4      	; 0x32ca <vTaskRemoveFromUnorderedEventList+0x36>
    32c6:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    32ca:	fb e0       	ldi	r31, 0x0B	; 11
    32cc:	8f 9f       	mul	r24, r31
    32ce:	c0 01       	movw	r24, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	b8 01       	movw	r22, r16
    32d4:	89 57       	subi	r24, 0x79	; 121
    32d6:	97 4e       	sbci	r25, 0xE7	; 231
    32d8:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    32dc:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    32e0:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    32e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e8:	89 17       	cp	r24, r25
    32ea:	18 f4       	brcc	.+6      	; 0x32f2 <vTaskRemoveFromUnorderedEventList+0x5e>
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	1f 91       	pop	r17
    32f8:	0f 91       	pop	r16
    32fa:	08 95       	ret

000032fc <vTaskSetTimeOutState>:
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	0f 92       	push	r0
    3302:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    3306:	fc 01       	movw	r30, r24
    3308:	20 83       	st	Z, r18
    330a:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    330e:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3312:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    3316:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    331a:	41 83       	std	Z+1, r20	; 0x01
    331c:	52 83       	std	Z+2, r21	; 0x02
    331e:	63 83       	std	Z+3, r22	; 0x03
    3320:	74 83       	std	Z+4, r23	; 0x04
    3322:	0f 90       	pop	r0
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	08 95       	ret

00003328 <vTaskInternalSetTimeOutState>:
    3328:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    332c:	fc 01       	movw	r30, r24
    332e:	20 83       	st	Z, r18
    3330:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3334:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    3338:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    333c:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3340:	41 83       	std	Z+1, r20	; 0x01
    3342:	52 83       	std	Z+2, r21	; 0x02
    3344:	63 83       	std	Z+3, r22	; 0x03
    3346:	74 83       	std	Z+4, r23	; 0x04
    3348:	08 95       	ret

0000334a <xTaskCheckForTimeOut>:
    334a:	cf 92       	push	r12
    334c:	df 92       	push	r13
    334e:	ef 92       	push	r14
    3350:	ff 92       	push	r15
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	fb 01       	movw	r30, r22
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	0f 92       	push	r0
    3362:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    3366:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    336a:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    336e:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    3372:	00 81       	ld	r16, Z
    3374:	11 81       	ldd	r17, Z+1	; 0x01
    3376:	22 81       	ldd	r18, Z+2	; 0x02
    3378:	33 81       	ldd	r19, Z+3	; 0x03
    337a:	0f 3f       	cpi	r16, 0xFF	; 255
    337c:	af ef       	ldi	r26, 0xFF	; 255
    337e:	1a 07       	cpc	r17, r26
    3380:	2a 07       	cpc	r18, r26
    3382:	3a 07       	cpc	r19, r26
    3384:	49 f1       	breq	.+82     	; 0x33d8 <xTaskCheckForTimeOut+0x8e>
    3386:	ec 01       	movw	r28, r24
    3388:	c9 80       	ldd	r12, Y+1	; 0x01
    338a:	da 80       	ldd	r13, Y+2	; 0x02
    338c:	eb 80       	ldd	r14, Y+3	; 0x03
    338e:	fc 80       	ldd	r15, Y+4	; 0x04
    3390:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <xNumOfOverflows>
    3394:	b8 81       	ld	r27, Y
    3396:	ba 17       	cp	r27, r26
    3398:	29 f0       	breq	.+10     	; 0x33a4 <xTaskCheckForTimeOut+0x5a>
    339a:	4c 15       	cp	r20, r12
    339c:	5d 05       	cpc	r21, r13
    339e:	6e 05       	cpc	r22, r14
    33a0:	7f 05       	cpc	r23, r15
    33a2:	e0 f4       	brcc	.+56     	; 0x33dc <xTaskCheckForTimeOut+0x92>
    33a4:	4c 19       	sub	r20, r12
    33a6:	5d 09       	sbc	r21, r13
    33a8:	6e 09       	sbc	r22, r14
    33aa:	7f 09       	sbc	r23, r15
    33ac:	40 17       	cp	r20, r16
    33ae:	51 07       	cpc	r21, r17
    33b0:	62 07       	cpc	r22, r18
    33b2:	73 07       	cpc	r23, r19
    33b4:	58 f4       	brcc	.+22     	; 0x33cc <xTaskCheckForTimeOut+0x82>
    33b6:	04 1b       	sub	r16, r20
    33b8:	15 0b       	sbc	r17, r21
    33ba:	26 0b       	sbc	r18, r22
    33bc:	37 0b       	sbc	r19, r23
    33be:	00 83       	st	Z, r16
    33c0:	11 83       	std	Z+1, r17	; 0x01
    33c2:	22 83       	std	Z+2, r18	; 0x02
    33c4:	33 83       	std	Z+3, r19	; 0x03
    33c6:	b0 df       	rcall	.-160    	; 0x3328 <vTaskInternalSetTimeOutState>
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	09 c0       	rjmp	.+18     	; 0x33de <xTaskCheckForTimeOut+0x94>
    33cc:	10 82       	st	Z, r1
    33ce:	11 82       	std	Z+1, r1	; 0x01
    33d0:	12 82       	std	Z+2, r1	; 0x02
    33d2:	13 82       	std	Z+3, r1	; 0x03
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <xTaskCheckForTimeOut+0x94>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	01 c0       	rjmp	.+2      	; 0x33de <xTaskCheckForTimeOut+0x94>
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	0f 90       	pop	r0
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	ff 90       	pop	r15
    33ec:	ef 90       	pop	r14
    33ee:	df 90       	pop	r13
    33f0:	cf 90       	pop	r12
    33f2:	08 95       	ret

000033f4 <vTaskMissedYield>:
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    33fa:	08 95       	ret

000033fc <xTaskGetCurrentTaskHandle>:
    33fc:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3400:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3404:	08 95       	ret

00003406 <xTaskGetSchedulerState>:
    3406:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    340a:	88 23       	and	r24, r24
    340c:	31 f0       	breq	.+12     	; 0x341a <xTaskGetSchedulerState+0x14>
    340e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3412:	88 23       	and	r24, r24
    3414:	21 f0       	breq	.+8      	; 0x341e <xTaskGetSchedulerState+0x18>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	08 95       	ret
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	08 95       	ret
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	08 95       	ret

00003422 <xTaskPriorityInherit>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	fc 01       	movw	r30, r24
    342c:	89 2b       	or	r24, r25
    342e:	09 f4       	brne	.+2      	; 0x3432 <xTaskPriorityInherit+0x10>
    3430:	60 c0       	rjmp	.+192    	; 0x34f2 <xTaskPriorityInherit+0xd0>
    3432:	82 8d       	ldd	r24, Z+26	; 0x1a
    3434:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3438:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	89 17       	cp	r24, r25
    3442:	08 f0       	brcs	.+2      	; 0x3446 <xTaskPriorityInherit+0x24>
    3444:	4a c0       	rjmp	.+148    	; 0x34da <xTaskPriorityInherit+0xb8>
    3446:	46 85       	ldd	r20, Z+14	; 0x0e
    3448:	57 85       	ldd	r21, Z+15	; 0x0f
    344a:	60 89       	ldd	r22, Z+16	; 0x10
    344c:	71 89       	ldd	r23, Z+17	; 0x11
    344e:	77 23       	and	r23, r23
    3450:	94 f0       	brlt	.+36     	; 0x3476 <xTaskPriorityInherit+0x54>
    3452:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3456:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    345a:	5a 96       	adiw	r26, 0x1a	; 26
    345c:	9c 91       	ld	r25, X
    345e:	46 e0       	ldi	r20, 0x06	; 6
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	49 1b       	sub	r20, r25
    3468:	51 09       	sbc	r21, r1
    346a:	61 09       	sbc	r22, r1
    346c:	71 09       	sbc	r23, r1
    346e:	46 87       	std	Z+14, r20	; 0x0e
    3470:	57 87       	std	Z+15, r21	; 0x0f
    3472:	60 8b       	std	Z+16, r22	; 0x10
    3474:	71 8b       	std	Z+17, r23	; 0x11
    3476:	2b e0       	ldi	r18, 0x0B	; 11
    3478:	82 9f       	mul	r24, r18
    347a:	c0 01       	movw	r24, r0
    347c:	11 24       	eor	r1, r1
    347e:	89 57       	subi	r24, 0x79	; 121
    3480:	97 4e       	sbci	r25, 0xE7	; 231
    3482:	24 85       	ldd	r18, Z+12	; 0x0c
    3484:	35 85       	ldd	r19, Z+13	; 0x0d
    3486:	28 17       	cp	r18, r24
    3488:	39 07       	cpc	r19, r25
    348a:	f1 f4       	brne	.+60     	; 0x34c8 <xTaskPriorityInherit+0xa6>
    348c:	8f 01       	movw	r16, r30
    348e:	ef 01       	movw	r28, r30
    3490:	22 96       	adiw	r28, 0x02	; 2
    3492:	ce 01       	movw	r24, r28
    3494:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3498:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    349c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    34a2:	f8 01       	movw	r30, r16
    34a4:	82 8f       	std	Z+26, r24	; 0x1a
    34a6:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    34aa:	98 17       	cp	r25, r24
    34ac:	10 f4       	brcc	.+4      	; 0x34b2 <xTaskPriorityInherit+0x90>
    34ae:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    34b2:	fb e0       	ldi	r31, 0x0B	; 11
    34b4:	8f 9f       	mul	r24, r31
    34b6:	c0 01       	movw	r24, r0
    34b8:	11 24       	eor	r1, r1
    34ba:	be 01       	movw	r22, r28
    34bc:	89 57       	subi	r24, 0x79	; 121
    34be:	97 4e       	sbci	r25, 0xE7	; 231
    34c0:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	16 c0       	rjmp	.+44     	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34c8:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    34cc:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34d0:	5a 96       	adiw	r26, 0x1a	; 26
    34d2:	8c 91       	ld	r24, X
    34d4:	82 8f       	std	Z+26, r24	; 0x1a
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	0d c0       	rjmp	.+26     	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34da:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    34de:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	27 a1       	ldd	r18, Z+39	; 0x27
    34e6:	5a 96       	adiw	r26, 0x1a	; 26
    34e8:	9c 91       	ld	r25, X
    34ea:	29 17       	cp	r18, r25
    34ec:	18 f0       	brcs	.+6      	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <xTaskPriorityInherit+0xd2>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	08 95       	ret

000034fe <xTaskPriorityDisinherit>:
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	fc 01       	movw	r30, r24
    3508:	89 2b       	or	r24, r25
    350a:	79 f1       	breq	.+94     	; 0x356a <xTaskPriorityDisinherit+0x6c>
    350c:	80 a5       	ldd	r24, Z+40	; 0x28
    350e:	81 50       	subi	r24, 0x01	; 1
    3510:	80 a7       	std	Z+40, r24	; 0x28
    3512:	22 8d       	ldd	r18, Z+26	; 0x1a
    3514:	97 a1       	ldd	r25, Z+39	; 0x27
    3516:	29 17       	cp	r18, r25
    3518:	51 f1       	breq	.+84     	; 0x356e <xTaskPriorityDisinherit+0x70>
    351a:	81 11       	cpse	r24, r1
    351c:	2a c0       	rjmp	.+84     	; 0x3572 <xTaskPriorityDisinherit+0x74>
    351e:	ef 01       	movw	r28, r30
    3520:	8f 01       	movw	r16, r30
    3522:	0e 5f       	subi	r16, 0xFE	; 254
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	c8 01       	movw	r24, r16
    3528:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    352c:	8f a1       	ldd	r24, Y+39	; 0x27
    352e:	8a 8f       	std	Y+26, r24	; 0x1a
    3530:	46 e0       	ldi	r20, 0x06	; 6
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	48 1b       	sub	r20, r24
    353a:	51 09       	sbc	r21, r1
    353c:	61 09       	sbc	r22, r1
    353e:	71 09       	sbc	r23, r1
    3540:	4e 87       	std	Y+14, r20	; 0x0e
    3542:	5f 87       	std	Y+15, r21	; 0x0f
    3544:	68 8b       	std	Y+16, r22	; 0x10
    3546:	79 8b       	std	Y+17, r23	; 0x11
    3548:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    354c:	98 17       	cp	r25, r24
    354e:	10 f4       	brcc	.+4      	; 0x3554 <xTaskPriorityDisinherit+0x56>
    3550:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3554:	2b e0       	ldi	r18, 0x0B	; 11
    3556:	82 9f       	mul	r24, r18
    3558:	c0 01       	movw	r24, r0
    355a:	11 24       	eor	r1, r1
    355c:	b8 01       	movw	r22, r16
    355e:	89 57       	subi	r24, 0x79	; 121
    3560:	97 4e       	sbci	r25, 0xE7	; 231
    3562:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <xTaskPriorityDisinherit+0x76>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <xTaskPriorityDisinherit+0x76>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <xTaskPriorityDisinherit+0x76>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	08 95       	ret

0000357e <vTaskPriorityDisinheritAfterTimeout>:
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	fc 01       	movw	r30, r24
    3588:	89 2b       	or	r24, r25
    358a:	09 f4       	brne	.+2      	; 0x358e <vTaskPriorityDisinheritAfterTimeout+0x10>
    358c:	3f c0       	rjmp	.+126    	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    358e:	87 a1       	ldd	r24, Z+39	; 0x27
    3590:	86 17       	cp	r24, r22
    3592:	08 f4       	brcc	.+2      	; 0x3596 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3594:	86 2f       	mov	r24, r22
    3596:	92 8d       	ldd	r25, Z+26	; 0x1a
    3598:	98 17       	cp	r25, r24
    359a:	c1 f1       	breq	.+112    	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    359c:	20 a5       	ldd	r18, Z+40	; 0x28
    359e:	21 30       	cpi	r18, 0x01	; 1
    35a0:	a9 f5       	brne	.+106    	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35a2:	82 8f       	std	Z+26, r24	; 0x1a
    35a4:	46 85       	ldd	r20, Z+14	; 0x0e
    35a6:	57 85       	ldd	r21, Z+15	; 0x0f
    35a8:	60 89       	ldd	r22, Z+16	; 0x10
    35aa:	71 89       	ldd	r23, Z+17	; 0x11
    35ac:	77 23       	and	r23, r23
    35ae:	64 f0       	brlt	.+24     	; 0x35c8 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    35b0:	46 e0       	ldi	r20, 0x06	; 6
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	70 e0       	ldi	r23, 0x00	; 0
    35b8:	48 1b       	sub	r20, r24
    35ba:	51 09       	sbc	r21, r1
    35bc:	61 09       	sbc	r22, r1
    35be:	71 09       	sbc	r23, r1
    35c0:	46 87       	std	Z+14, r20	; 0x0e
    35c2:	57 87       	std	Z+15, r21	; 0x0f
    35c4:	60 8b       	std	Z+16, r22	; 0x10
    35c6:	71 8b       	std	Z+17, r23	; 0x11
    35c8:	2b e0       	ldi	r18, 0x0B	; 11
    35ca:	92 9f       	mul	r25, r18
    35cc:	c0 01       	movw	r24, r0
    35ce:	11 24       	eor	r1, r1
    35d0:	89 57       	subi	r24, 0x79	; 121
    35d2:	97 4e       	sbci	r25, 0xE7	; 231
    35d4:	24 85       	ldd	r18, Z+12	; 0x0c
    35d6:	35 85       	ldd	r19, Z+13	; 0x0d
    35d8:	28 17       	cp	r18, r24
    35da:	39 07       	cpc	r19, r25
    35dc:	b9 f4       	brne	.+46     	; 0x360c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    35de:	ef 01       	movw	r28, r30
    35e0:	8f 01       	movw	r16, r30
    35e2:	0e 5f       	subi	r16, 0xFE	; 254
    35e4:	1f 4f       	sbci	r17, 0xFF	; 255
    35e6:	c8 01       	movw	r24, r16
    35e8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    35ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35ee:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    35f2:	98 17       	cp	r25, r24
    35f4:	10 f4       	brcc	.+4      	; 0x35fa <vTaskPriorityDisinheritAfterTimeout+0x7c>
    35f6:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    35fa:	2b e0       	ldi	r18, 0x0B	; 11
    35fc:	82 9f       	mul	r24, r18
    35fe:	c0 01       	movw	r24, r0
    3600:	11 24       	eor	r1, r1
    3602:	b8 01       	movw	r22, r16
    3604:	89 57       	subi	r24, 0x79	; 121
    3606:	97 4e       	sbci	r25, 0xE7	; 231
    3608:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret

00003616 <uxTaskResetEventItemValue>:
    3616:	cf 92       	push	r12
    3618:	df 92       	push	r13
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3622:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3626:	66 85       	ldd	r22, Z+14	; 0x0e
    3628:	77 85       	ldd	r23, Z+15	; 0x0f
    362a:	80 89       	ldd	r24, Z+16	; 0x10
    362c:	91 89       	ldd	r25, Z+17	; 0x11
    362e:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3632:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3636:	a0 91 c9 18 	lds	r26, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    363a:	b0 91 ca 18 	lds	r27, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    363e:	5a 96       	adiw	r26, 0x1a	; 26
    3640:	2c 91       	ld	r18, X
    3642:	0f 2e       	mov	r0, r31
    3644:	f6 e0       	ldi	r31, 0x06	; 6
    3646:	cf 2e       	mov	r12, r31
    3648:	d1 2c       	mov	r13, r1
    364a:	e1 2c       	mov	r14, r1
    364c:	f1 2c       	mov	r15, r1
    364e:	f0 2d       	mov	r31, r0
    3650:	c2 1a       	sub	r12, r18
    3652:	d1 08       	sbc	r13, r1
    3654:	e1 08       	sbc	r14, r1
    3656:	f1 08       	sbc	r15, r1
    3658:	c6 86       	std	Z+14, r12	; 0x0e
    365a:	d7 86       	std	Z+15, r13	; 0x0f
    365c:	e0 8a       	std	Z+16, r14	; 0x10
    365e:	f1 8a       	std	Z+17, r15	; 0x11
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	08 95       	ret

0000366a <pvTaskIncrementMutexHeldCount>:
    366a:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    366e:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3672:	89 2b       	or	r24, r25
    3674:	39 f0       	breq	.+14     	; 0x3684 <pvTaskIncrementMutexHeldCount+0x1a>
    3676:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    367a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    367e:	80 a5       	ldd	r24, Z+40	; 0x28
    3680:	8f 5f       	subi	r24, 0xFF	; 255
    3682:	80 a7       	std	Z+40, r24	; 0x28
    3684:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3688:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    368c:	08 95       	ret

0000368e <xTaskNotifyWait>:
    368e:	4f 92       	push	r4
    3690:	5f 92       	push	r5
    3692:	6f 92       	push	r6
    3694:	7f 92       	push	r7
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	49 01       	movw	r8, r18
    36ac:	5a 01       	movw	r10, r20
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	0f 92       	push	r0
    36b4:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36b8:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36bc:	27 a5       	ldd	r18, Z+47	; 0x2f
    36be:	22 30       	cpi	r18, 0x02	; 2
    36c0:	39 f1       	breq	.+78     	; 0x3710 <xTaskNotifyWait+0x82>
    36c2:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36c6:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36ca:	43 a4       	ldd	r4, Z+43	; 0x2b
    36cc:	54 a4       	ldd	r5, Z+44	; 0x2c
    36ce:	65 a4       	ldd	r6, Z+45	; 0x2d
    36d0:	76 a4       	ldd	r7, Z+46	; 0x2e
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	80 95       	com	r24
    36d8:	90 95       	com	r25
    36da:	a0 95       	com	r26
    36dc:	b0 95       	com	r27
    36de:	84 21       	and	r24, r4
    36e0:	95 21       	and	r25, r5
    36e2:	a6 21       	and	r26, r6
    36e4:	b7 21       	and	r27, r7
    36e6:	83 a7       	std	Z+43, r24	; 0x2b
    36e8:	94 a7       	std	Z+44, r25	; 0x2c
    36ea:	a5 a7       	std	Z+45, r26	; 0x2d
    36ec:	b6 a7       	std	Z+46, r27	; 0x2e
    36ee:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    36f2:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	87 a7       	std	Z+47, r24	; 0x2f
    36fa:	c1 14       	cp	r12, r1
    36fc:	d1 04       	cpc	r13, r1
    36fe:	e1 04       	cpc	r14, r1
    3700:	f1 04       	cpc	r15, r1
    3702:	31 f0       	breq	.+12     	; 0x3710 <xTaskNotifyWait+0x82>
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	c7 01       	movw	r24, r14
    3708:	b6 01       	movw	r22, r12
    370a:	56 d9       	rcall	.-3412   	; 0x29b8 <prvAddCurrentTaskToDelayedList>
    370c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3710:	0f 90       	pop	r0
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	0f 92       	push	r0
    371a:	01 15       	cp	r16, r1
    371c:	11 05       	cpc	r17, r1
    371e:	69 f0       	breq	.+26     	; 0x373a <xTaskNotifyWait+0xac>
    3720:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3724:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3728:	83 a5       	ldd	r24, Z+43	; 0x2b
    372a:	94 a5       	ldd	r25, Z+44	; 0x2c
    372c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    372e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3730:	f8 01       	movw	r30, r16
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
    373a:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    373e:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3742:	87 a5       	ldd	r24, Z+47	; 0x2f
    3744:	82 30       	cpi	r24, 0x02	; 2
    3746:	b1 f4       	brne	.+44     	; 0x3774 <xTaskNotifyWait+0xe6>
    3748:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    374c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3750:	83 a5       	ldd	r24, Z+43	; 0x2b
    3752:	94 a5       	ldd	r25, Z+44	; 0x2c
    3754:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3756:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3758:	80 94       	com	r8
    375a:	90 94       	com	r9
    375c:	a0 94       	com	r10
    375e:	b0 94       	com	r11
    3760:	88 22       	and	r8, r24
    3762:	99 22       	and	r9, r25
    3764:	aa 22       	and	r10, r26
    3766:	bb 22       	and	r11, r27
    3768:	83 a6       	std	Z+43, r8	; 0x2b
    376a:	94 a6       	std	Z+44, r9	; 0x2c
    376c:	a5 a6       	std	Z+45, r10	; 0x2d
    376e:	b6 a6       	std	Z+46, r11	; 0x2e
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <xTaskNotifyWait+0xe8>
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    377a:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    377e:	17 a6       	std	Z+47, r1	; 0x2f
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	1f 91       	pop	r17
    3786:	0f 91       	pop	r16
    3788:	ff 90       	pop	r15
    378a:	ef 90       	pop	r14
    378c:	df 90       	pop	r13
    378e:	cf 90       	pop	r12
    3790:	bf 90       	pop	r11
    3792:	af 90       	pop	r10
    3794:	9f 90       	pop	r9
    3796:	8f 90       	pop	r8
    3798:	7f 90       	pop	r7
    379a:	6f 90       	pop	r6
    379c:	5f 90       	pop	r5
    379e:	4f 90       	pop	r4
    37a0:	08 95       	ret

000037a2 <xTaskGenericNotify>:
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	fc 01       	movw	r30, r24
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	0f 92       	push	r0
    37b2:	01 15       	cp	r16, r1
    37b4:	11 05       	cpc	r17, r1
    37b6:	49 f0       	breq	.+18     	; 0x37ca <xTaskGenericNotify+0x28>
    37b8:	83 a5       	ldd	r24, Z+43	; 0x2b
    37ba:	94 a5       	ldd	r25, Z+44	; 0x2c
    37bc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    37be:	b6 a5       	ldd	r27, Z+46	; 0x2e
    37c0:	e8 01       	movw	r28, r16
    37c2:	88 83       	st	Y, r24
    37c4:	99 83       	std	Y+1, r25	; 0x01
    37c6:	aa 83       	std	Y+2, r26	; 0x02
    37c8:	bb 83       	std	Y+3, r27	; 0x03
    37ca:	87 a5       	ldd	r24, Z+47	; 0x2f
    37cc:	92 e0       	ldi	r25, 0x02	; 2
    37ce:	97 a7       	std	Z+47, r25	; 0x2f
    37d0:	22 30       	cpi	r18, 0x02	; 2
    37d2:	b1 f0       	breq	.+44     	; 0x3800 <xTaskGenericNotify+0x5e>
    37d4:	18 f4       	brcc	.+6      	; 0x37dc <xTaskGenericNotify+0x3a>
    37d6:	21 30       	cpi	r18, 0x01	; 1
    37d8:	31 f0       	breq	.+12     	; 0x37e6 <xTaskGenericNotify+0x44>
    37da:	2a c0       	rjmp	.+84     	; 0x3830 <xTaskGenericNotify+0x8e>
    37dc:	23 30       	cpi	r18, 0x03	; 3
    37de:	e9 f0       	breq	.+58     	; 0x381a <xTaskGenericNotify+0x78>
    37e0:	24 30       	cpi	r18, 0x04	; 4
    37e2:	01 f1       	breq	.+64     	; 0x3824 <xTaskGenericNotify+0x82>
    37e4:	25 c0       	rjmp	.+74     	; 0x3830 <xTaskGenericNotify+0x8e>
    37e6:	03 a5       	ldd	r16, Z+43	; 0x2b
    37e8:	14 a5       	ldd	r17, Z+44	; 0x2c
    37ea:	25 a5       	ldd	r18, Z+45	; 0x2d
    37ec:	36 a5       	ldd	r19, Z+46	; 0x2e
    37ee:	40 2b       	or	r20, r16
    37f0:	51 2b       	or	r21, r17
    37f2:	62 2b       	or	r22, r18
    37f4:	73 2b       	or	r23, r19
    37f6:	43 a7       	std	Z+43, r20	; 0x2b
    37f8:	54 a7       	std	Z+44, r21	; 0x2c
    37fa:	65 a7       	std	Z+45, r22	; 0x2d
    37fc:	76 a7       	std	Z+46, r23	; 0x2e
    37fe:	18 c0       	rjmp	.+48     	; 0x3830 <xTaskGenericNotify+0x8e>
    3800:	43 a5       	ldd	r20, Z+43	; 0x2b
    3802:	54 a5       	ldd	r21, Z+44	; 0x2c
    3804:	65 a5       	ldd	r22, Z+45	; 0x2d
    3806:	76 a5       	ldd	r23, Z+46	; 0x2e
    3808:	4f 5f       	subi	r20, 0xFF	; 255
    380a:	5f 4f       	sbci	r21, 0xFF	; 255
    380c:	6f 4f       	sbci	r22, 0xFF	; 255
    380e:	7f 4f       	sbci	r23, 0xFF	; 255
    3810:	43 a7       	std	Z+43, r20	; 0x2b
    3812:	54 a7       	std	Z+44, r21	; 0x2c
    3814:	65 a7       	std	Z+45, r22	; 0x2d
    3816:	76 a7       	std	Z+46, r23	; 0x2e
    3818:	0b c0       	rjmp	.+22     	; 0x3830 <xTaskGenericNotify+0x8e>
    381a:	43 a7       	std	Z+43, r20	; 0x2b
    381c:	54 a7       	std	Z+44, r21	; 0x2c
    381e:	65 a7       	std	Z+45, r22	; 0x2d
    3820:	76 a7       	std	Z+46, r23	; 0x2e
    3822:	06 c0       	rjmp	.+12     	; 0x3830 <xTaskGenericNotify+0x8e>
    3824:	82 30       	cpi	r24, 0x02	; 2
    3826:	49 f1       	breq	.+82     	; 0x387a <xTaskGenericNotify+0xd8>
    3828:	43 a7       	std	Z+43, r20	; 0x2b
    382a:	54 a7       	std	Z+44, r21	; 0x2c
    382c:	65 a7       	std	Z+45, r22	; 0x2d
    382e:	76 a7       	std	Z+46, r23	; 0x2e
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	29 f5       	brne	.+74     	; 0x387e <xTaskGenericNotify+0xdc>
    3834:	ef 01       	movw	r28, r30
    3836:	8f 01       	movw	r16, r30
    3838:	0e 5f       	subi	r16, 0xFE	; 254
    383a:	1f 4f       	sbci	r17, 0xFF	; 255
    383c:	c8 01       	movw	r24, r16
    383e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3842:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3844:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    3848:	98 17       	cp	r25, r24
    384a:	10 f4       	brcc	.+4      	; 0x3850 <xTaskGenericNotify+0xae>
    384c:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3850:	2b e0       	ldi	r18, 0x0B	; 11
    3852:	82 9f       	mul	r24, r18
    3854:	c0 01       	movw	r24, r0
    3856:	11 24       	eor	r1, r1
    3858:	b8 01       	movw	r22, r16
    385a:	89 57       	subi	r24, 0x79	; 121
    385c:	97 4e       	sbci	r25, 0xE7	; 231
    385e:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3862:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    3866:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    386a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    386c:	82 8d       	ldd	r24, Z+26	; 0x1a
    386e:	89 17       	cp	r24, r25
    3870:	40 f4       	brcc	.+16     	; 0x3882 <xTaskGenericNotify+0xe0>
    3872:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	05 c0       	rjmp	.+10     	; 0x3884 <xTaskGenericNotify+0xe2>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	03 c0       	rjmp	.+6      	; 0x3884 <xTaskGenericNotify+0xe2>
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	01 c0       	rjmp	.+2      	; 0x3884 <xTaskGenericNotify+0xe2>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	0f 90       	pop	r0
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	08 95       	ret

00003892 <xTaskGenericNotifyFromISR>:
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	fc 01       	movw	r30, r24
    38a0:	01 15       	cp	r16, r1
    38a2:	11 05       	cpc	r17, r1
    38a4:	49 f0       	breq	.+18     	; 0x38b8 <xTaskGenericNotifyFromISR+0x26>
    38a6:	83 a5       	ldd	r24, Z+43	; 0x2b
    38a8:	94 a5       	ldd	r25, Z+44	; 0x2c
    38aa:	a5 a5       	ldd	r26, Z+45	; 0x2d
    38ac:	b6 a5       	ldd	r27, Z+46	; 0x2e
    38ae:	e8 01       	movw	r28, r16
    38b0:	88 83       	st	Y, r24
    38b2:	99 83       	std	Y+1, r25	; 0x01
    38b4:	aa 83       	std	Y+2, r26	; 0x02
    38b6:	bb 83       	std	Y+3, r27	; 0x03
    38b8:	87 a5       	ldd	r24, Z+47	; 0x2f
    38ba:	92 e0       	ldi	r25, 0x02	; 2
    38bc:	97 a7       	std	Z+47, r25	; 0x2f
    38be:	22 30       	cpi	r18, 0x02	; 2
    38c0:	b1 f0       	breq	.+44     	; 0x38ee <xTaskGenericNotifyFromISR+0x5c>
    38c2:	18 f4       	brcc	.+6      	; 0x38ca <xTaskGenericNotifyFromISR+0x38>
    38c4:	21 30       	cpi	r18, 0x01	; 1
    38c6:	31 f0       	breq	.+12     	; 0x38d4 <xTaskGenericNotifyFromISR+0x42>
    38c8:	2a c0       	rjmp	.+84     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    38ca:	23 30       	cpi	r18, 0x03	; 3
    38cc:	e9 f0       	breq	.+58     	; 0x3908 <xTaskGenericNotifyFromISR+0x76>
    38ce:	24 30       	cpi	r18, 0x04	; 4
    38d0:	01 f1       	breq	.+64     	; 0x3912 <xTaskGenericNotifyFromISR+0x80>
    38d2:	25 c0       	rjmp	.+74     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    38d4:	03 a5       	ldd	r16, Z+43	; 0x2b
    38d6:	14 a5       	ldd	r17, Z+44	; 0x2c
    38d8:	25 a5       	ldd	r18, Z+45	; 0x2d
    38da:	36 a5       	ldd	r19, Z+46	; 0x2e
    38dc:	40 2b       	or	r20, r16
    38de:	51 2b       	or	r21, r17
    38e0:	62 2b       	or	r22, r18
    38e2:	73 2b       	or	r23, r19
    38e4:	43 a7       	std	Z+43, r20	; 0x2b
    38e6:	54 a7       	std	Z+44, r21	; 0x2c
    38e8:	65 a7       	std	Z+45, r22	; 0x2d
    38ea:	76 a7       	std	Z+46, r23	; 0x2e
    38ec:	18 c0       	rjmp	.+48     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    38ee:	43 a5       	ldd	r20, Z+43	; 0x2b
    38f0:	54 a5       	ldd	r21, Z+44	; 0x2c
    38f2:	65 a5       	ldd	r22, Z+45	; 0x2d
    38f4:	76 a5       	ldd	r23, Z+46	; 0x2e
    38f6:	4f 5f       	subi	r20, 0xFF	; 255
    38f8:	5f 4f       	sbci	r21, 0xFF	; 255
    38fa:	6f 4f       	sbci	r22, 0xFF	; 255
    38fc:	7f 4f       	sbci	r23, 0xFF	; 255
    38fe:	43 a7       	std	Z+43, r20	; 0x2b
    3900:	54 a7       	std	Z+44, r21	; 0x2c
    3902:	65 a7       	std	Z+45, r22	; 0x2d
    3904:	76 a7       	std	Z+46, r23	; 0x2e
    3906:	0b c0       	rjmp	.+22     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    3908:	43 a7       	std	Z+43, r20	; 0x2b
    390a:	54 a7       	std	Z+44, r21	; 0x2c
    390c:	65 a7       	std	Z+45, r22	; 0x2d
    390e:	76 a7       	std	Z+46, r23	; 0x2e
    3910:	06 c0       	rjmp	.+12     	; 0x391e <xTaskGenericNotifyFromISR+0x8c>
    3912:	82 30       	cpi	r24, 0x02	; 2
    3914:	d9 f1       	breq	.+118    	; 0x398c <xTaskGenericNotifyFromISR+0xfa>
    3916:	43 a7       	std	Z+43, r20	; 0x2b
    3918:	54 a7       	std	Z+44, r21	; 0x2c
    391a:	65 a7       	std	Z+45, r22	; 0x2d
    391c:	76 a7       	std	Z+46, r23	; 0x2e
    391e:	81 30       	cpi	r24, 0x01	; 1
    3920:	b9 f5       	brne	.+110    	; 0x3990 <xTaskGenericNotifyFromISR+0xfe>
    3922:	ef 01       	movw	r28, r30
    3924:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <uxSchedulerSuspended>
    3928:	81 11       	cpse	r24, r1
    392a:	17 c0       	rjmp	.+46     	; 0x395a <xTaskGenericNotifyFromISR+0xc8>
    392c:	8f 01       	movw	r16, r30
    392e:	0e 5f       	subi	r16, 0xFE	; 254
    3930:	1f 4f       	sbci	r17, 0xFF	; 255
    3932:	c8 01       	movw	r24, r16
    3934:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
    3938:	8a 8d       	ldd	r24, Y+26	; 0x1a
    393a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    393e:	98 17       	cp	r25, r24
    3940:	10 f4       	brcc	.+4      	; 0x3946 <xTaskGenericNotifyFromISR+0xb4>
    3942:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    3946:	eb e0       	ldi	r30, 0x0B	; 11
    3948:	8e 9f       	mul	r24, r30
    394a:	c0 01       	movw	r24, r0
    394c:	11 24       	eor	r1, r1
    394e:	b8 01       	movw	r22, r16
    3950:	89 57       	subi	r24, 0x79	; 121
    3952:	97 4e       	sbci	r25, 0xE7	; 231
    3954:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3958:	07 c0       	rjmp	.+14     	; 0x3968 <xTaskGenericNotifyFromISR+0xd6>
    395a:	bf 01       	movw	r22, r30
    395c:	62 5f       	subi	r22, 0xF2	; 242
    395e:	7f 4f       	sbci	r23, 0xFF	; 255
    3960:	82 e6       	ldi	r24, 0x62	; 98
    3962:	98 e1       	ldi	r25, 0x18	; 24
    3964:	0e 94 1e 0c 	call	0x183c	; 0x183c <vListInsertEnd>
    3968:	e0 91 c9 18 	lds	r30, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    396c:	f0 91 ca 18 	lds	r31, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>
    3970:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3972:	82 8d       	ldd	r24, Z+26	; 0x1a
    3974:	89 17       	cp	r24, r25
    3976:	70 f4       	brcc	.+28     	; 0x3994 <xTaskGenericNotifyFromISR+0x102>
    3978:	e1 14       	cp	r14, r1
    397a:	f1 04       	cpc	r15, r1
    397c:	19 f0       	breq	.+6      	; 0x3984 <xTaskGenericNotifyFromISR+0xf2>
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	e7 01       	movw	r28, r14
    3982:	88 83       	st	Y, r24
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    398a:	05 c0       	rjmp	.+10     	; 0x3996 <xTaskGenericNotifyFromISR+0x104>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <xTaskGenericNotifyFromISR+0x104>
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <xTaskGenericNotifyFromISR+0x104>
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	08 95       	ret

000039a4 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	21 f4       	brne	.+8      	; 0x39b0 <xTaskNotifyStateClear+0xc>
    39a8:	80 91 c9 18 	lds	r24, 0x18C9	; 0x8018c9 <pxCurrentTCB>
    39ac:	90 91 ca 18 	lds	r25, 0x18CA	; 0x8018ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    39b6:	fc 01       	movw	r30, r24
    39b8:	27 a5       	ldd	r18, Z+47	; 0x2f
    39ba:	22 30       	cpi	r18, 0x02	; 2
    39bc:	19 f4       	brne	.+6      	; 0x39c4 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39be:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    39c6:	0f 90       	pop	r0
    39c8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    39ca:	08 95       	ret

000039cc <prvInsertTimerInActiveList>:
    39cc:	cf 92       	push	r12
    39ce:	df 92       	push	r13
    39d0:	ef 92       	push	r14
    39d2:	ff 92       	push	r15
    39d4:	0f 93       	push	r16
    39d6:	1f 93       	push	r17
    39d8:	fc 01       	movw	r30, r24
    39da:	42 83       	std	Z+2, r20	; 0x02
    39dc:	53 83       	std	Z+3, r21	; 0x03
    39de:	64 83       	std	Z+4, r22	; 0x04
    39e0:	75 83       	std	Z+5, r23	; 0x05
    39e2:	93 87       	std	Z+11, r25	; 0x0b
    39e4:	82 87       	std	Z+10, r24	; 0x0a
    39e6:	04 17       	cp	r16, r20
    39e8:	15 07       	cpc	r17, r21
    39ea:	26 07       	cpc	r18, r22
    39ec:	37 07       	cpc	r19, r23
    39ee:	c0 f0       	brcs	.+48     	; 0x3a20 <prvInsertTimerInActiveList+0x54>
    39f0:	0c 19       	sub	r16, r12
    39f2:	1d 09       	sbc	r17, r13
    39f4:	2e 09       	sbc	r18, r14
    39f6:	3f 09       	sbc	r19, r15
    39f8:	86 85       	ldd	r24, Z+14	; 0x0e
    39fa:	97 85       	ldd	r25, Z+15	; 0x0f
    39fc:	a0 89       	ldd	r26, Z+16	; 0x10
    39fe:	b1 89       	ldd	r27, Z+17	; 0x11
    3a00:	08 17       	cp	r16, r24
    3a02:	19 07       	cpc	r17, r25
    3a04:	2a 07       	cpc	r18, r26
    3a06:	3b 07       	cpc	r19, r27
    3a08:	00 f5       	brcc	.+64     	; 0x3a4a <prvInsertTimerInActiveList+0x7e>
    3a0a:	bf 01       	movw	r22, r30
    3a0c:	6e 5f       	subi	r22, 0xFE	; 254
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
    3a14:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
    3a18:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	18 c0       	rjmp	.+48     	; 0x3a50 <prvInsertTimerInActiveList+0x84>
    3a20:	0c 15       	cp	r16, r12
    3a22:	1d 05       	cpc	r17, r13
    3a24:	2e 05       	cpc	r18, r14
    3a26:	3f 05       	cpc	r19, r15
    3a28:	28 f4       	brcc	.+10     	; 0x3a34 <prvInsertTimerInActiveList+0x68>
    3a2a:	4c 15       	cp	r20, r12
    3a2c:	5d 05       	cpc	r21, r13
    3a2e:	6e 05       	cpc	r22, r14
    3a30:	7f 05       	cpc	r23, r15
    3a32:	68 f4       	brcc	.+26     	; 0x3a4e <prvInsertTimerInActiveList+0x82>
    3a34:	bf 01       	movw	r22, r30
    3a36:	6e 5f       	subi	r22, 0xFE	; 254
    3a38:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3a:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3a3e:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3a42:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	03 c0       	rjmp	.+6      	; 0x3a50 <prvInsertTimerInActiveList+0x84>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <prvInsertTimerInActiveList+0x84>
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	ff 90       	pop	r15
    3a56:	ef 90       	pop	r14
    3a58:	df 90       	pop	r13
    3a5a:	cf 90       	pop	r12
    3a5c:	08 95       	ret

00003a5e <prvCheckForValidListAndQueue>:
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	0f 92       	push	r0
    3a64:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3a68:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3a6c:	89 2b       	or	r24, r25
    3a6e:	e9 f4       	brne	.+58     	; 0x3aaa <prvCheckForValidListAndQueue+0x4c>
    3a70:	82 ee       	ldi	r24, 0xE2	; 226
    3a72:	98 e1       	ldi	r25, 0x18	; 24
    3a74:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    3a78:	87 ed       	ldi	r24, 0xD7	; 215
    3a7a:	98 e1       	ldi	r25, 0x18	; 24
    3a7c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vListInitialise>
    3a80:	82 ee       	ldi	r24, 0xE2	; 226
    3a82:	98 e1       	ldi	r25, 0x18	; 24
    3a84:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <pxCurrentTimerList+0x1>
    3a88:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <pxCurrentTimerList>
    3a8c:	87 ed       	ldi	r24, 0xD7	; 215
    3a8e:	98 e1       	ldi	r25, 0x18	; 24
    3a90:	90 93 d4 18 	sts	0x18D4, r25	; 0x8018d4 <pxOverflowTimerList+0x1>
    3a94:	80 93 d3 18 	sts	0x18D3, r24	; 0x8018d3 <pxOverflowTimerList>
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	67 e0       	ldi	r22, 0x07	; 7
    3a9c:	8a e0       	ldi	r24, 0x0A	; 10
    3a9e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <xQueueGenericCreate>
    3aa2:	90 93 d2 18 	sts	0x18D2, r25	; 0x8018d2 <xTimerQueue+0x1>
    3aa6:	80 93 d1 18 	sts	0x18D1, r24	; 0x8018d1 <xTimerQueue>
    3aaa:	0f 90       	pop	r0
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	08 95       	ret

00003ab0 <xTimerCreateTimerTask>:
    3ab0:	ef 92       	push	r14
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	d3 df       	rcall	.-90     	; 0x3a5e <prvCheckForValidListAndQueue>
    3ab8:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3abc:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3ac0:	89 2b       	or	r24, r25
    3ac2:	91 f0       	breq	.+36     	; 0x3ae8 <xTimerCreateTimerTask+0x38>
    3ac4:	0f 2e       	mov	r0, r31
    3ac6:	ff ec       	ldi	r31, 0xCF	; 207
    3ac8:	ef 2e       	mov	r14, r31
    3aca:	f8 e1       	ldi	r31, 0x18	; 24
    3acc:	ff 2e       	mov	r15, r31
    3ace:	f0 2d       	mov	r31, r0
    3ad0:	03 e0       	ldi	r16, 0x03	; 3
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	45 e5       	ldi	r20, 0x55	; 85
    3ad8:	50 e0       	ldi	r21, 0x00	; 0
    3ada:	62 ec       	ldi	r22, 0xC2	; 194
    3adc:	74 e0       	ldi	r23, 0x04	; 4
    3ade:	87 e0       	ldi	r24, 0x07	; 7
    3ae0:	91 e0       	ldi	r25, 0x01	; 1
    3ae2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
    3ae6:	01 c0       	rjmp	.+2      	; 0x3aea <xTimerCreateTimerTask+0x3a>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	08 95       	ret

00003af2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3af2:	8f 92       	push	r8
    3af4:	9f 92       	push	r9
    3af6:	af 92       	push	r10
    3af8:	bf 92       	push	r11
    3afa:	cf 92       	push	r12
    3afc:	df 92       	push	r13
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	27 97       	sbiw	r28, 0x07	; 7
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3b1a:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b1e:	f0 91 d2 18 	lds	r31, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b22:	30 97       	sbiw	r30, 0x00	; 0
    3b24:	81 f1       	breq	.+96     	; 0x3b86 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3b26:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b28:	2a 83       	std	Y+2, r18	; 0x02
    3b2a:	3b 83       	std	Y+3, r19	; 0x03
    3b2c:	4c 83       	std	Y+4, r20	; 0x04
    3b2e:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3b30:	9f 83       	std	Y+7, r25	; 0x07
    3b32:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b34:	66 30       	cpi	r22, 0x06	; 6
    3b36:	f4 f4       	brge	.+60     	; 0x3b74 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b38:	66 dc       	rcall	.-1844   	; 0x3406 <xTaskGetSchedulerState>
    3b3a:	82 30       	cpi	r24, 0x02	; 2
    3b3c:	69 f4       	brne	.+26     	; 0x3b58 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b3e:	00 e0       	ldi	r16, 0x00	; 0
    3b40:	a7 01       	movw	r20, r14
    3b42:	96 01       	movw	r18, r12
    3b44:	be 01       	movw	r22, r28
    3b46:	6f 5f       	subi	r22, 0xFF	; 255
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b4e:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b52:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
    3b56:	18 c0       	rjmp	.+48     	; 0x3b88 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b58:	00 e0       	ldi	r16, 0x00	; 0
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	a9 01       	movw	r20, r18
    3b60:	be 01       	movw	r22, r28
    3b62:	6f 5f       	subi	r22, 0xFF	; 255
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	80 91 d1 18 	lds	r24, 0x18D1	; 0x8018d1 <xTimerQueue>
    3b6a:	90 91 d2 18 	lds	r25, 0x18D2	; 0x8018d2 <xTimerQueue+0x1>
    3b6e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xQueueGenericSend>
    3b72:	0a c0       	rjmp	.+20     	; 0x3b88 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	a8 01       	movw	r20, r16
    3b78:	be 01       	movw	r22, r28
    3b7a:	6f 5f       	subi	r22, 0xFF	; 255
    3b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7e:	cf 01       	movw	r24, r30
    3b80:	0e 94 16 10 	call	0x202c	; 0x202c <xQueueGenericSendFromISR>
    3b84:	01 c0       	rjmp	.+2      	; 0x3b88 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3b88:	27 96       	adiw	r28, 0x07	; 7
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	de bf       	out	0x3e, r29	; 62
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	cd bf       	out	0x3d, r28	; 61
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	ff 90       	pop	r15
    3b9e:	ef 90       	pop	r14
    3ba0:	df 90       	pop	r13
    3ba2:	cf 90       	pop	r12
    3ba4:	bf 90       	pop	r11
    3ba6:	af 90       	pop	r10
    3ba8:	9f 90       	pop	r9
    3baa:	8f 90       	pop	r8
    3bac:	08 95       	ret

00003bae <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3bae:	2f 92       	push	r2
    3bb0:	3f 92       	push	r3
    3bb2:	4f 92       	push	r4
    3bb4:	5f 92       	push	r5
    3bb6:	6f 92       	push	r6
    3bb8:	7f 92       	push	r7
    3bba:	8f 92       	push	r8
    3bbc:	9f 92       	push	r9
    3bbe:	af 92       	push	r10
    3bc0:	bf 92       	push	r11
    3bc2:	cf 92       	push	r12
    3bc4:	df 92       	push	r13
    3bc6:	ef 92       	push	r14
    3bc8:	ff 92       	push	r15
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bd4:	cb d8       	rcall	.-3690   	; 0x2d6c <xTaskGetTickCount>
    3bd6:	2b 01       	movw	r4, r22
    3bd8:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3bda:	80 91 cb 18 	lds	r24, 0x18CB	; 0x8018cb <xLastTime.2432>
    3bde:	90 91 cc 18 	lds	r25, 0x18CC	; 0x8018cc <xLastTime.2432+0x1>
    3be2:	a0 91 cd 18 	lds	r26, 0x18CD	; 0x8018cd <xLastTime.2432+0x2>
    3be6:	b0 91 ce 18 	lds	r27, 0x18CE	; 0x8018ce <xLastTime.2432+0x3>
    3bea:	48 16       	cp	r4, r24
    3bec:	59 06       	cpc	r5, r25
    3bee:	6a 06       	cpc	r6, r26
    3bf0:	7b 06       	cpc	r7, r27
    3bf2:	08 f0       	brcs	.+2      	; 0x3bf6 <prvSampleTimeNow+0x48>
    3bf4:	53 c0       	rjmp	.+166    	; 0x3c9c <prvSampleTimeNow+0xee>
    3bf6:	3b c0       	rjmp	.+118    	; 0x3c6e <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3bf8:	07 80       	ldd	r0, Z+7	; 0x07
    3bfa:	f0 85       	ldd	r31, Z+8	; 0x08
    3bfc:	e0 2d       	mov	r30, r0
    3bfe:	80 80       	ld	r8, Z
    3c00:	91 80       	ldd	r9, Z+1	; 0x01
    3c02:	a2 80       	ldd	r10, Z+2	; 0x02
    3c04:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3c06:	c0 85       	ldd	r28, Z+8	; 0x08
    3c08:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3c0a:	8e 01       	movw	r16, r28
    3c0c:	0e 5f       	subi	r16, 0xFE	; 254
    3c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c10:	c8 01       	movw	r24, r16
    3c12:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c16:	ec 89       	ldd	r30, Y+20	; 0x14
    3c18:	fd 89       	ldd	r31, Y+21	; 0x15
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c20:	82 ff       	sbrs	r24, 2
    3c22:	25 c0       	rjmp	.+74     	; 0x3c6e <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3c24:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c26:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c28:	a8 89       	ldd	r26, Y+16	; 0x10
    3c2a:	b9 89       	ldd	r27, Y+17	; 0x11
    3c2c:	88 0d       	add	r24, r8
    3c2e:	99 1d       	adc	r25, r9
    3c30:	aa 1d       	adc	r26, r10
    3c32:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3c34:	88 16       	cp	r8, r24
    3c36:	99 06       	cpc	r9, r25
    3c38:	aa 06       	cpc	r10, r26
    3c3a:	bb 06       	cpc	r11, r27
    3c3c:	70 f4       	brcc	.+28     	; 0x3c5a <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
    3c40:	9b 83       	std	Y+3, r25	; 0x03
    3c42:	ac 83       	std	Y+4, r26	; 0x04
    3c44:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3c46:	db 87       	std	Y+11, r29	; 0x0b
    3c48:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3c4a:	b8 01       	movw	r22, r16
    3c4c:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3c50:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c54:	0e 94 3f 0c 	call	0x187e	; 0x187e <vListInsert>
    3c58:	0a c0       	rjmp	.+20     	; 0x3c6e <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c5a:	c1 2c       	mov	r12, r1
    3c5c:	d1 2c       	mov	r13, r1
    3c5e:	76 01       	movw	r14, r12
    3c60:	00 e0       	ldi	r16, 0x00	; 0
    3c62:	10 e0       	ldi	r17, 0x00	; 0
    3c64:	a5 01       	movw	r20, r10
    3c66:	94 01       	movw	r18, r8
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	ce 01       	movw	r24, r28
    3c6c:	42 df       	rcall	.-380    	; 0x3af2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3c6e:	e0 91 d5 18 	lds	r30, 0x18D5	; 0x8018d5 <pxCurrentTimerList>
    3c72:	f0 91 d6 18 	lds	r31, 0x18D6	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c76:	80 81       	ld	r24, Z
    3c78:	81 11       	cpse	r24, r1
    3c7a:	be cf       	rjmp	.-132    	; 0x3bf8 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3c7c:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <pxOverflowTimerList>
    3c80:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <pxOverflowTimerList+0x1>
    3c84:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <pxCurrentTimerList+0x1>
    3c88:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3c8c:	f0 93 d4 18 	sts	0x18D4, r31	; 0x8018d4 <pxOverflowTimerList+0x1>
    3c90:	e0 93 d3 18 	sts	0x18D3, r30	; 0x8018d3 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	f1 01       	movw	r30, r2
    3c98:	80 83       	st	Z, r24
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3c9c:	f1 01       	movw	r30, r2
    3c9e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3ca0:	40 92 cb 18 	sts	0x18CB, r4	; 0x8018cb <xLastTime.2432>
    3ca4:	50 92 cc 18 	sts	0x18CC, r5	; 0x8018cc <xLastTime.2432+0x1>
    3ca8:	60 92 cd 18 	sts	0x18CD, r6	; 0x8018cd <xLastTime.2432+0x2>
    3cac:	70 92 ce 18 	sts	0x18CE, r7	; 0x8018ce <xLastTime.2432+0x3>

    return xTimeNow;
}
    3cb0:	c3 01       	movw	r24, r6
    3cb2:	b2 01       	movw	r22, r4
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	ff 90       	pop	r15
    3cbe:	ef 90       	pop	r14
    3cc0:	df 90       	pop	r13
    3cc2:	cf 90       	pop	r12
    3cc4:	bf 90       	pop	r11
    3cc6:	af 90       	pop	r10
    3cc8:	9f 90       	pop	r9
    3cca:	8f 90       	pop	r8
    3ccc:	7f 90       	pop	r7
    3cce:	6f 90       	pop	r6
    3cd0:	5f 90       	pop	r5
    3cd2:	4f 90       	pop	r4
    3cd4:	3f 90       	pop	r3
    3cd6:	2f 90       	pop	r2
    3cd8:	08 95       	ret

00003cda <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3cda:	08 95       	ret

00003cdc <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cdc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cde:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ce0:	2f ef       	ldi	r18, 0xFF	; 255
    3ce2:	80 e7       	ldi	r24, 0x70	; 112
    3ce4:	92 e0       	ldi	r25, 0x02	; 2
    3ce6:	21 50       	subi	r18, 0x01	; 1
    3ce8:	80 40       	sbci	r24, 0x00	; 0
    3cea:	90 40       	sbci	r25, 0x00	; 0
    3cec:	e1 f7       	brne	.-8      	; 0x3ce6 <vApplicationMallocFailedHook+0xa>
    3cee:	00 c0       	rjmp	.+0      	; 0x3cf0 <vApplicationMallocFailedHook+0x14>
    3cf0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3cf2:	1f 9a       	sbi	0x03, 7	; 3
    3cf4:	f5 cf       	rjmp	.-22     	; 0x3ce0 <vApplicationMallocFailedHook+0x4>

00003cf6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3cf6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cf8:	2f 9a       	sbi	0x05, 7	; 5
    3cfa:	2f ef       	ldi	r18, 0xFF	; 255
    3cfc:	87 ea       	ldi	r24, 0xA7	; 167
    3cfe:	91 e6       	ldi	r25, 0x61	; 97
    3d00:	21 50       	subi	r18, 0x01	; 1
    3d02:	80 40       	sbci	r24, 0x00	; 0
    3d04:	90 40       	sbci	r25, 0x00	; 0
    3d06:	e1 f7       	brne	.-8      	; 0x3d00 <vApplicationStackOverflowHook+0xa>
    3d08:	00 c0       	rjmp	.+0      	; 0x3d0a <vApplicationStackOverflowHook+0x14>
    3d0a:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3d0c:	1f 9a       	sbi	0x03, 7	; 3
    3d0e:	f5 cf       	rjmp	.-22     	; 0x3cfa <vApplicationStackOverflowHook+0x4>

00003d10 <create_tasks_and_semaphores>:
MessageBufferHandle_t downlinkMessagebuffer;
lora_payload_t payload;

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3d10:	8f 92       	push	r8
    3d12:	9f 92       	push	r9
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
	configuration_create();
    3d28:	0e 94 43 03 	call	0x686	; 0x686 <configuration_create>
	
	humAndTempReader_t humidityAndTemperature = humAndTempReader_create(TASK_HUMIDITY_SENSOR_PRIORITY, HUMIDITY_TASK_STACK, 
    3d2c:	e0 90 4b 1a 	lds	r14, 0x1A4B	; 0x801a4b <readyEventGroup>
    3d30:	f0 90 4c 1a 	lds	r15, 0x1A4C	; 0x801a4c <readyEventGroup+0x1>
    3d34:	40 91 65 1a 	lds	r20, 0x1A65	; 0x801a65 <startMeasureEventGroup>
    3d38:	50 91 66 1a 	lds	r21, 0x1A66	; 0x801a66 <startMeasureEventGroup+0x1>
    3d3c:	a1 2c       	mov	r10, r1
    3d3e:	b1 2c       	mov	r11, r1
    3d40:	65 01       	movw	r12, r10
    3d42:	68 94       	set
    3d44:	a4 f8       	bld	r10, 4
    3d46:	01 e0       	ldi	r16, 0x01	; 1
    3d48:	10 e0       	ldi	r17, 0x00	; 0
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	60 ec       	ldi	r22, 0xC0	; 192
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	0e 94 8f 06 	call	0xd1e	; 0xd1e <humAndTempReader_create>
    3d56:	c8 2f       	mov	r28, r24
    3d58:	d9 2f       	mov	r29, r25
	startMeasureEventGroup, BIT_MEASURE_HUMIDITY, readyEventGroup, BIT_DONE_MEASURE_HUMIDITY);
	
	co2reader_t co2reader = co2Reader_create(TASK_CO2_SENSOR_PRIORITY, CO2_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_CO2,
    3d5a:	e0 90 4b 1a 	lds	r14, 0x1A4B	; 0x801a4b <readyEventGroup>
    3d5e:	f0 90 4c 1a 	lds	r15, 0x1A4C	; 0x801a4c <readyEventGroup+0x1>
    3d62:	40 91 65 1a 	lds	r20, 0x1A65	; 0x801a65 <startMeasureEventGroup>
    3d66:	50 91 66 1a 	lds	r21, 0x1A66	; 0x801a66 <startMeasureEventGroup+0x1>
    3d6a:	a1 2c       	mov	r10, r1
    3d6c:	b1 2c       	mov	r11, r1
    3d6e:	65 01       	movw	r12, r10
    3d70:	68 94       	set
    3d72:	a5 f8       	bld	r10, 5
    3d74:	08 e0       	ldi	r16, 0x08	; 8
    3d76:	10 e0       	ldi	r17, 0x00	; 0
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	60 ec       	ldi	r22, 0xC0	; 192
    3d7e:	82 e0       	ldi	r24, 0x02	; 2
    3d80:	0e 94 86 02 	call	0x50c	; 0x50c <co2Reader_create>
    3d84:	4c 01       	movw	r8, r24
	readyEventGroup, BIT_DONE_MEASURE_CO2);
	
	soundReader_t soundReader = soundReader_create(TASK_SOUND_SENSOR_PRIORITY, SOUND_TASK_STACK, startMeasureEventGroup, BIT_MEASURE_SOUND,
    3d86:	e0 90 4b 1a 	lds	r14, 0x1A4B	; 0x801a4b <readyEventGroup>
    3d8a:	f0 90 4c 1a 	lds	r15, 0x1A4C	; 0x801a4c <readyEventGroup+0x1>
    3d8e:	40 91 65 1a 	lds	r20, 0x1A65	; 0x801a65 <startMeasureEventGroup>
    3d92:	50 91 66 1a 	lds	r21, 0x1A66	; 0x801a66 <startMeasureEventGroup+0x1>
    3d96:	a1 2c       	mov	r10, r1
    3d98:	b1 2c       	mov	r11, r1
    3d9a:	65 01       	movw	r12, r10
    3d9c:	68 94       	set
    3d9e:	a6 f8       	bld	r10, 6
    3da0:	04 e0       	ldi	r16, 0x04	; 4
    3da2:	10 e0       	ldi	r17, 0x00	; 0
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	60 ec       	ldi	r22, 0xC0	; 192
    3daa:	82 e0       	ldi	r24, 0x02	; 2
    3dac:	0e 94 71 07 	call	0xee2	; 0xee2 <soundReader_create>
    3db0:	18 2f       	mov	r17, r24
    3db2:	09 2f       	mov	r16, r25
	readyEventGroup, BIT_DONE_MEASURE_SOUND);	
	
	servo_initialise();
    3db4:	0e 94 64 07 	call	0xec8	; 0xec8 <servo_initialise>
	
	device_create(TASK_DEVICE_PRIORITY, DEVICE_TASK_STACK, startMeasureEventGroup, ALL_BIT_MEASURE,
    3db8:	e0 90 4b 1a 	lds	r14, 0x1A4B	; 0x801a4b <readyEventGroup>
    3dbc:	f0 90 4c 1a 	lds	r15, 0x1A4C	; 0x801a4c <readyEventGroup+0x1>
    3dc0:	40 91 65 1a 	lds	r20, 0x1A65	; 0x801a65 <startMeasureEventGroup>
    3dc4:	50 91 66 1a 	lds	r21, 0x1A66	; 0x801a66 <startMeasureEventGroup+0x1>
    3dc8:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <messageBuffer+0x1>
    3dcc:	8f 93       	push	r24
    3dce:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <messageBuffer>
    3dd2:	8f 93       	push	r24
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	0f 2e       	mov	r0, r31
    3dde:	f0 e7       	ldi	r31, 0x70	; 112
    3de0:	af 2e       	mov	r10, r31
    3de2:	b1 2c       	mov	r11, r1
    3de4:	c1 2c       	mov	r12, r1
    3de6:	d1 2c       	mov	r13, r1
    3de8:	f0 2d       	mov	r31, r0
    3dea:	0d e0       	ldi	r16, 0x0D	; 13
    3dec:	10 e0       	ldi	r17, 0x00	; 0
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	60 ec       	ldi	r22, 0xC0	; 192
    3df4:	84 e0       	ldi	r24, 0x04	; 4
    3df6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <device_create>
	readyEventGroup, ALL_BIT_DONE_MEASURE, co2reader, humidityAndTemperature,soundReader, messageBuffer);
	
	lora_UpLinkHandler_create(TASK_LORA_UPLINK_PRIORITY,LORA_UPLINK_TASK_STACK,messageBuffer);
    3dfa:	40 91 63 1a 	lds	r20, 0x1A63	; 0x801a63 <messageBuffer>
    3dfe:	50 91 64 1a 	lds	r21, 0x1A64	; 0x801a64 <messageBuffer+0x1>
    3e02:	60 ec       	ldi	r22, 0xC0	; 192
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	0e 94 29 08 	call	0x1052	; 0x1052 <lora_UpLinkHandler_create>
	lora_DownLinkHandler_create(TASK_LORA_DOWNLINK_PRIORITY,LORA_DOWNLINK_TASK_STACK,downlinkMessagebuffer);
    3e0a:	40 91 49 1a 	lds	r20, 0x1A49	; 0x801a49 <downlinkMessagebuffer>
    3e0e:	50 91 4a 1a 	lds	r21, 0x1A4A	; 0x801a4a <downlinkMessagebuffer+0x1>
    3e12:	60 ec       	ldi	r22, 0xC0	; 192
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <lora_DownLinkHandler_create>
}
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	1f 91       	pop	r17
    3e2c:	0f 91       	pop	r16
    3e2e:	ff 90       	pop	r15
    3e30:	ef 90       	pop	r14
    3e32:	df 90       	pop	r13
    3e34:	cf 90       	pop	r12
    3e36:	bf 90       	pop	r11
    3e38:	af 90       	pop	r10
    3e3a:	9f 90       	pop	r9
    3e3c:	8f 90       	pop	r8
    3e3e:	08 95       	ret

00003e40 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	startMeasureEventGroup = xEventGroupCreate();
    3e40:	0e 94 66 09 	call	0x12cc	; 0x12cc <xEventGroupCreate>
    3e44:	90 93 66 1a 	sts	0x1A66, r25	; 0x801a66 <startMeasureEventGroup+0x1>
    3e48:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <startMeasureEventGroup>
	readyEventGroup = xEventGroupCreate();
    3e4c:	0e 94 66 09 	call	0x12cc	; 0x12cc <xEventGroupCreate>
    3e50:	90 93 4c 1a 	sts	0x1A4C, r25	; 0x801a4c <readyEventGroup+0x1>
    3e54:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <readyEventGroup>

	messageBuffer = xMessageBufferCreate(100);
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	60 e0       	ldi	r22, 0x00	; 0
    3e5c:	70 e0       	ldi	r23, 0x00	; 0
    3e5e:	84 e6       	ldi	r24, 0x64	; 100
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    3e66:	90 93 64 1a 	sts	0x1A64, r25	; 0x801a64 <messageBuffer+0x1>
    3e6a:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <messageBuffer>
	downlinkMessagebuffer = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    3e6e:	41 e0       	ldi	r20, 0x01	; 1
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	70 e0       	ldi	r23, 0x00	; 0
    3e74:	8c e2       	ldi	r24, 0x2C	; 44
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    3e7c:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <downlinkMessagebuffer+0x1>
    3e80:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <downlinkMessagebuffer>

	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3e84:	81 b1       	in	r24, 0x01	; 1
    3e86:	81 68       	ori	r24, 0x81	; 129
    3e88:	81 b9       	out	0x01, r24	; 1
	//// Initialise the trace-driver to be used together with the R2R-Network
	//trace_init();
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	0e 94 4e 2b 	call	0x569c	; 0x569c <stdioCreate>
	
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3e90:	85 e0       	ldi	r24, 0x05	; 5
    3e92:	10 d0       	rcall	.+32     	; 0x3eb4 <hal_create>
	// Initialise the LoRaWAN driver with a down-link buffer
	
	
	lora_driver_create(LORA_USART, downlinkMessagebuffer);
    3e94:	60 91 49 1a 	lds	r22, 0x1A49	; 0x801a49 <downlinkMessagebuffer>
    3e98:	70 91 4a 1a 	lds	r23, 0x1A4A	; 0x801a4a <downlinkMessagebuffer+0x1>
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	c2 c3       	rjmp	.+1924   	; 0x4624 <lora_driver_create>
    3ea0:	08 95       	ret

00003ea2 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3ea2:	ce df       	rcall	.-100    	; 0x3e40 <initialiseSystem>
	create_tasks_and_semaphores();
    3ea4:	35 df       	rcall	.-406    	; 0x3d10 <create_tasks_and_semaphores>
    3ea6:	8a ec       	ldi	r24, 0xCA	; 202
	printf("Program Started!!\n");
    3ea8:	94 e0       	ldi	r25, 0x04	; 4
    3eaa:	0e 94 77 31 	call	0x62ee	; 0x62ee <puts>
    3eae:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <vTaskStartScheduler>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler.
    3eb2:	ff cf       	rjmp	.-2      	; 0x3eb2 <main+0x10>

00003eb4 <hal_create>:
    3eb4:	e7 e6       	ldi	r30, 0x67	; 103
    3eb6:	fa e1       	ldi	r31, 0x1A	; 26
    3eb8:	27 e6       	ldi	r18, 0x67	; 103
    3eba:	36 e2       	ldi	r19, 0x26	; 38
    3ebc:	31 83       	std	Z+1, r19	; 0x01
    3ebe:	20 83       	st	Z, r18
    3ec0:	2a e6       	ldi	r18, 0x6A	; 106
    3ec2:	36 e2       	ldi	r19, 0x26	; 38
    3ec4:	33 83       	std	Z+3, r19	; 0x03
    3ec6:	22 83       	std	Z+2, r18	; 0x02
    3ec8:	25 e7       	ldi	r18, 0x75	; 117
    3eca:	36 e2       	ldi	r19, 0x26	; 38
    3ecc:	35 83       	std	Z+5, r19	; 0x05
    3ece:	24 83       	std	Z+4, r18	; 0x04
    3ed0:	29 e7       	ldi	r18, 0x79	; 121
    3ed2:	36 e2       	ldi	r19, 0x26	; 38
    3ed4:	37 83       	std	Z+7, r19	; 0x07
    3ed6:	26 83       	std	Z+6, r18	; 0x06
    3ed8:	2f e7       	ldi	r18, 0x7F	; 127
    3eda:	36 e2       	ldi	r19, 0x26	; 38
    3edc:	31 87       	std	Z+9, r19	; 0x09
    3ede:	20 87       	std	Z+8, r18	; 0x08
    3ee0:	2b e8       	ldi	r18, 0x8B	; 139
    3ee2:	36 e2       	ldi	r19, 0x26	; 38
    3ee4:	33 87       	std	Z+11, r19	; 0x0b
    3ee6:	22 87       	std	Z+10, r18	; 0x0a
    3ee8:	20 e9       	ldi	r18, 0x90	; 144
    3eea:	36 e2       	ldi	r19, 0x26	; 38
    3eec:	35 87       	std	Z+13, r19	; 0x0d
    3eee:	24 87       	std	Z+12, r18	; 0x0c
    3ef0:	2c e9       	ldi	r18, 0x9C	; 156
    3ef2:	36 e2       	ldi	r19, 0x26	; 38
    3ef4:	37 87       	std	Z+15, r19	; 0x0f
    3ef6:	26 87       	std	Z+14, r18	; 0x0e
    3ef8:	2c e7       	ldi	r18, 0x7C	; 124
    3efa:	36 e2       	ldi	r19, 0x26	; 38
    3efc:	31 8b       	std	Z+17, r19	; 0x11
    3efe:	20 8b       	std	Z+16, r18	; 0x10
    3f00:	21 ea       	ldi	r18, 0xA1	; 161
    3f02:	36 e2       	ldi	r19, 0x26	; 38
    3f04:	33 8b       	std	Z+19, r19	; 0x13
    3f06:	22 8b       	std	Z+18, r18	; 0x12
    3f08:	2e ea       	ldi	r18, 0xAE	; 174
    3f0a:	36 e2       	ldi	r19, 0x26	; 38
    3f0c:	35 8b       	std	Z+21, r19	; 0x15
    3f0e:	24 8b       	std	Z+20, r18	; 0x14
    3f10:	68 2f       	mov	r22, r24
    3f12:	cf 01       	movw	r24, r30
    3f14:	53 c1       	rjmp	.+678    	; 0x41bc <led_create>
    3f16:	08 95       	ret

00003f18 <_hihTwiCallback>:
    3f18:	65 30       	cpi	r22, 0x05	; 5
    3f1a:	f1 f4       	brne	.+60     	; 0x3f58 <_hihTwiCallback+0x40>
    3f1c:	fa 01       	movw	r30, r20
    3f1e:	80 81       	ld	r24, Z
    3f20:	8f 73       	andi	r24, 0x3F	; 63
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	98 2f       	mov	r25, r24
    3f26:	88 27       	eor	r24, r24
    3f28:	21 81       	ldd	r18, Z+1	; 0x01
    3f2a:	82 2b       	or	r24, r18
    3f2c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f30:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f34:	82 81       	ldd	r24, Z+2	; 0x02
    3f36:	f0 e4       	ldi	r31, 0x40	; 64
    3f38:	8f 9f       	mul	r24, r31
    3f3a:	c0 01       	movw	r24, r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	fa 01       	movw	r30, r20
    3f40:	23 81       	ldd	r18, Z+3	; 0x03
    3f42:	26 95       	lsr	r18
    3f44:	26 95       	lsr	r18
    3f46:	82 2b       	or	r24, r18
    3f48:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f4c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <_measuringIsReady>
    3f56:	08 95       	ret
    3f58:	64 30       	cpi	r22, 0x04	; 4
    3f5a:	51 f0       	breq	.+20     	; 0x3f70 <_hihTwiCallback+0x58>
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	90 e4       	ldi	r25, 0x40	; 64
    3f60:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_temp+0x1>
    3f64:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_temp>
    3f68:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_hum+0x1>
    3f6c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_hum>
    3f70:	08 95       	ret

00003f72 <hih8120Create>:
    3f72:	0f 93       	push	r16
    3f74:	1f 93       	push	r17
    3f76:	0c e8       	ldi	r16, 0x8C	; 140
    3f78:	1f e1       	ldi	r17, 0x1F	; 31
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	34 e2       	ldi	r19, 0x24	; 36
    3f7e:	44 ef       	ldi	r20, 0xF4	; 244
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	87 e2       	ldi	r24, 0x27	; 39
    3f86:	0e 94 88 2b 	call	0x5710	; 0x5710 <twiCreate>
    3f8a:	90 93 ef 18 	sts	0x18EF, r25	; 0x8018ef <_hih8120Handler+0x1>
    3f8e:	80 93 ee 18 	sts	0x18EE, r24	; 0x8018ee <_hih8120Handler>
    3f92:	21 e0       	ldi	r18, 0x01	; 1
    3f94:	89 2b       	or	r24, r25
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <hih8120Create+0x28>
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	82 2f       	mov	r24, r18
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	08 95       	ret

00003fa2 <hih8120IsReady>:
    3fa2:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <_measuringIsReady>
    3fa6:	08 95       	ret

00003fa8 <hih8120Wakeup>:
    3fa8:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <_hih8120Handler>
    3fac:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <_hih8120Handler+0x1>
    3fb0:	00 97       	sbiw	r24, 0x00	; 0
    3fb2:	59 f0       	breq	.+22     	; 0x3fca <hih8120Wakeup+0x22>
    3fb4:	40 e0       	ldi	r20, 0x00	; 0
    3fb6:	60 e0       	ldi	r22, 0x00	; 0
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    3fba:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <twiTransmit>
    3fbe:	84 30       	cpi	r24, 0x04	; 4
    3fc0:	31 f4       	brne	.+12     	; 0x3fce <hih8120Wakeup+0x26>
    3fc2:	10 92 ed 18 	sts	0x18ED, r1	; 0x8018ed <_measuringIsReady>
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	08 95       	ret
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	08 95       	ret
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	08 95       	ret

00003fd2 <hih8120Meassure>:
    3fd2:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <_hih8120Handler>
    3fd6:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <_hih8120Handler+0x1>
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	39 f0       	breq	.+14     	; 0x3fec <hih8120Meassure+0x1a>
    3fde:	64 e0       	ldi	r22, 0x04	; 4
    3fe0:	0e 94 25 2c 	call	0x584a	; 0x584a <twiReceive>
    3fe4:	85 30       	cpi	r24, 0x05	; 5
    3fe6:	21 f0       	breq	.+8      	; 0x3ff0 <hih8120Meassure+0x1e>
    3fe8:	83 e0       	ldi	r24, 0x03	; 3
    3fea:	08 95       	ret
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	08 95       	ret
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	08 95       	ret

00003ff4 <hih8120GetHumidity>:
    3ff4:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <_hum>
    3ff8:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <_hum+0x1>
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__floatunsisf>
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	48 ec       	ldi	r20, 0xC8	; 200
    400a:	52 e4       	ldi	r21, 0x42	; 66
    400c:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <__mulsf3>
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	38 ef       	ldi	r19, 0xF8	; 248
    4014:	4f e7       	ldi	r20, 0x7F	; 127
    4016:	56 e4       	ldi	r21, 0x46	; 70
    4018:	0c 94 96 2d 	jmp	0x5b2c	; 0x5b2c <__divsf3>
    401c:	08 95       	ret

0000401e <hih8120GetHumidityPercent_x10>:
    401e:	ea df       	rcall	.-44     	; 0x3ff4 <hih8120GetHumidity>
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	40 e2       	ldi	r20, 0x20	; 32
    4026:	51 e4       	ldi	r21, 0x41	; 65
    4028:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <__mulsf3>
    402c:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <__fixunssfsi>
    4030:	cb 01       	movw	r24, r22
    4032:	08 95       	ret

00004034 <hih8120GetTemperature>:
    4034:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_temp>
    4038:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_temp+0x1>
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__floatunsisf>
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	45 e2       	ldi	r20, 0x25	; 37
    404a:	53 e4       	ldi	r21, 0x43	; 67
    404c:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <__mulsf3>
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	38 ef       	ldi	r19, 0xF8	; 248
    4054:	4f e7       	ldi	r20, 0x7F	; 127
    4056:	56 e4       	ldi	r21, 0x46	; 70
    4058:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divsf3>
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e2       	ldi	r20, 0x20	; 32
    4062:	52 e4       	ldi	r21, 0x42	; 66
    4064:	0c 94 31 2d 	jmp	0x5a62	; 0x5a62 <__subsf3>
    4068:	08 95       	ret

0000406a <hih8120GetTemperature_x10>:
    406a:	e4 df       	rcall	.-56     	; 0x4034 <hih8120GetTemperature>
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e2       	ldi	r20, 0x20	; 32
    4072:	51 e4       	ldi	r21, 0x41	; 65
    4074:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <__mulsf3>
    4078:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__fixsfsi>
    407c:	cb 01       	movw	r24, r22
    407e:	08 95       	ret

00004080 <_turn_off>:
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	fc 01       	movw	r30, r24
    4088:	ee 0f       	add	r30, r30
    408a:	ff 1f       	adc	r31, r31
    408c:	e8 0f       	add	r30, r24
    408e:	f9 1f       	adc	r31, r25
    4090:	ee 0f       	add	r30, r30
    4092:	ff 1f       	adc	r31, r31
    4094:	e0 51       	subi	r30, 0x10	; 16
    4096:	f7 4e       	sbci	r31, 0xE7	; 231
    4098:	23 81       	ldd	r18, Z+3	; 0x03
    409a:	21 11       	cpse	r18, r1
    409c:	0a c0       	rjmp	.+20     	; 0x40b2 <_turn_off+0x32>
    409e:	ef 01       	movw	r28, r30
    40a0:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <register_access+0x8>
    40a4:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <register_access+0x9>
    40a8:	6a 81       	ldd	r22, Y+2	; 0x02
    40aa:	88 81       	ld	r24, Y
    40ac:	99 81       	ldd	r25, Y+1	; 0x01
    40ae:	19 95       	eicall
    40b0:	12 c0       	rjmp	.+36     	; 0x40d6 <_turn_off+0x56>
    40b2:	dc 01       	movw	r26, r24
    40b4:	aa 0f       	add	r26, r26
    40b6:	bb 1f       	adc	r27, r27
    40b8:	ed 01       	movw	r28, r26
    40ba:	c8 0f       	add	r28, r24
    40bc:	d9 1f       	adc	r29, r25
    40be:	cc 0f       	add	r28, r28
    40c0:	dd 1f       	adc	r29, r29
    40c2:	c0 51       	subi	r28, 0x10	; 16
    40c4:	d7 4e       	sbci	r29, 0xE7	; 231
    40c6:	e0 91 79 1a 	lds	r30, 0x1A79	; 0x801a79 <register_access+0x12>
    40ca:	f0 91 7a 1a 	lds	r31, 0x1A7A	; 0x801a7a <register_access+0x13>
    40ce:	6a 81       	ldd	r22, Y+2	; 0x02
    40d0:	88 81       	ld	r24, Y
    40d2:	99 81       	ldd	r25, Y+1	; 0x01
    40d4:	19 95       	eicall
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	08 95       	ret

000040dc <_turn_on>:
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	fc 01       	movw	r30, r24
    40e4:	ee 0f       	add	r30, r30
    40e6:	ff 1f       	adc	r31, r31
    40e8:	e8 0f       	add	r30, r24
    40ea:	f9 1f       	adc	r31, r25
    40ec:	ee 0f       	add	r30, r30
    40ee:	ff 1f       	adc	r31, r31
    40f0:	e0 51       	subi	r30, 0x10	; 16
    40f2:	f7 4e       	sbci	r31, 0xE7	; 231
    40f4:	23 81       	ldd	r18, Z+3	; 0x03
    40f6:	21 11       	cpse	r18, r1
    40f8:	0a c0       	rjmp	.+20     	; 0x410e <_turn_on+0x32>
    40fa:	ef 01       	movw	r28, r30
    40fc:	e0 91 79 1a 	lds	r30, 0x1A79	; 0x801a79 <register_access+0x12>
    4100:	f0 91 7a 1a 	lds	r31, 0x1A7A	; 0x801a7a <register_access+0x13>
    4104:	6a 81       	ldd	r22, Y+2	; 0x02
    4106:	88 81       	ld	r24, Y
    4108:	99 81       	ldd	r25, Y+1	; 0x01
    410a:	19 95       	eicall
    410c:	12 c0       	rjmp	.+36     	; 0x4132 <_turn_on+0x56>
    410e:	dc 01       	movw	r26, r24
    4110:	aa 0f       	add	r26, r26
    4112:	bb 1f       	adc	r27, r27
    4114:	ed 01       	movw	r28, r26
    4116:	c8 0f       	add	r28, r24
    4118:	d9 1f       	adc	r29, r25
    411a:	cc 0f       	add	r28, r28
    411c:	dd 1f       	adc	r29, r29
    411e:	c0 51       	subi	r28, 0x10	; 16
    4120:	d7 4e       	sbci	r29, 0xE7	; 231
    4122:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <register_access+0x8>
    4126:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <register_access+0x9>
    412a:	6a 81       	ldd	r22, Y+2	; 0x02
    412c:	88 81       	ld	r24, Y
    412e:	99 81       	ldd	r25, Y+1	; 0x01
    4130:	19 95       	eicall
    4132:	df 91       	pop	r29
    4134:	cf 91       	pop	r28
    4136:	08 95       	ret

00004138 <_hal_led_task>:
    4138:	0f 2e       	mov	r0, r31
    413a:	f7 e6       	ldi	r31, 0x67	; 103
    413c:	cf 2e       	mov	r12, r31
    413e:	fa e1       	ldi	r31, 0x1A	; 26
    4140:	df 2e       	mov	r13, r31
    4142:	f0 2d       	mov	r31, r0
    4144:	04 e0       	ldi	r16, 0x04	; 4
    4146:	c0 ef       	ldi	r28, 0xF0	; 240
    4148:	d8 e1       	ldi	r29, 0x18	; 24
    414a:	10 e0       	ldi	r17, 0x00	; 0
    414c:	8c 81       	ldd	r24, Y+4	; 0x04
    414e:	81 30       	cpi	r24, 0x01	; 1
    4150:	69 f0       	breq	.+26     	; 0x416c <_hal_led_task+0x34>
    4152:	e8 f0       	brcs	.+58     	; 0x418e <_hal_led_task+0x56>
    4154:	82 30       	cpi	r24, 0x02	; 2
    4156:	39 f5       	brne	.+78     	; 0x41a6 <_hal_led_task+0x6e>
    4158:	d6 01       	movw	r26, r12
    415a:	1c 96       	adiw	r26, 0x0c	; 12
    415c:	ed 91       	ld	r30, X+
    415e:	fc 91       	ld	r31, X
    4160:	1d 97       	sbiw	r26, 0x0d	; 13
    4162:	6a 81       	ldd	r22, Y+2	; 0x02
    4164:	88 81       	ld	r24, Y
    4166:	99 81       	ldd	r25, Y+1	; 0x01
    4168:	19 95       	eicall
    416a:	1d c0       	rjmp	.+58     	; 0x41a6 <_hal_led_task+0x6e>
    416c:	8d 81       	ldd	r24, Y+5	; 0x05
    416e:	8f 5f       	subi	r24, 0xFF	; 255
    4170:	8a 30       	cpi	r24, 0x0A	; 10
    4172:	10 f4       	brcc	.+4      	; 0x4178 <_hal_led_task+0x40>
    4174:	8d 83       	std	Y+5, r24	; 0x05
    4176:	17 c0       	rjmp	.+46     	; 0x41a6 <_hal_led_task+0x6e>
    4178:	1d 82       	std	Y+5, r1	; 0x05
    417a:	d6 01       	movw	r26, r12
    417c:	1c 96       	adiw	r26, 0x0c	; 12
    417e:	ed 91       	ld	r30, X+
    4180:	fc 91       	ld	r31, X
    4182:	1d 97       	sbiw	r26, 0x0d	; 13
    4184:	6a 81       	ldd	r22, Y+2	; 0x02
    4186:	88 81       	ld	r24, Y
    4188:	99 81       	ldd	r25, Y+1	; 0x01
    418a:	19 95       	eicall
    418c:	0c c0       	rjmp	.+24     	; 0x41a6 <_hal_led_task+0x6e>
    418e:	8d 81       	ldd	r24, Y+5	; 0x05
    4190:	88 23       	and	r24, r24
    4192:	31 f0       	breq	.+12     	; 0x41a0 <_hal_led_task+0x68>
    4194:	81 2f       	mov	r24, r17
    4196:	a2 df       	rcall	.-188    	; 0x40dc <_turn_on>
    4198:	8d 81       	ldd	r24, Y+5	; 0x05
    419a:	81 50       	subi	r24, 0x01	; 1
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	03 c0       	rjmp	.+6      	; 0x41a6 <_hal_led_task+0x6e>
    41a0:	0c 83       	std	Y+4, r16	; 0x04
    41a2:	81 2f       	mov	r24, r17
    41a4:	6d df       	rcall	.-294    	; 0x4080 <_turn_off>
    41a6:	1f 5f       	subi	r17, 0xFF	; 255
    41a8:	26 96       	adiw	r28, 0x06	; 6
    41aa:	14 30       	cpi	r17, 0x04	; 4
    41ac:	79 f6       	brne	.-98     	; 0x414c <_hal_led_task+0x14>
    41ae:	65 e0       	ldi	r22, 0x05	; 5
    41b0:	70 e0       	ldi	r23, 0x00	; 0
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 15 18 	call	0x302a	; 0x302a <vTaskDelay>
    41ba:	c5 cf       	rjmp	.-118    	; 0x4146 <_hal_led_task+0xe>

000041bc <led_create>:
    41bc:	cf 92       	push	r12
    41be:	df 92       	push	r13
    41c0:	ef 92       	push	r14
    41c2:	ff 92       	push	r15
    41c4:	0f 93       	push	r16
    41c6:	1f 93       	push	r17
    41c8:	cf 93       	push	r28
    41ca:	df 93       	push	r29
    41cc:	06 2f       	mov	r16, r22
    41ce:	0f 2e       	mov	r0, r31
    41d0:	f7 e6       	ldi	r31, 0x67	; 103
    41d2:	ef 2e       	mov	r14, r31
    41d4:	fa e1       	ldi	r31, 0x1A	; 26
    41d6:	ff 2e       	mov	r15, r31
    41d8:	f0 2d       	mov	r31, r0
    41da:	d7 01       	movw	r26, r14
    41dc:	18 96       	adiw	r26, 0x08	; 8
    41de:	ed 91       	ld	r30, X+
    41e0:	fc 91       	ld	r31, X
    41e2:	19 97       	sbiw	r26, 0x09	; 9
    41e4:	66 e0       	ldi	r22, 0x06	; 6
    41e6:	87 e2       	ldi	r24, 0x27	; 39
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	19 95       	eicall
    41ec:	c0 ef       	ldi	r28, 0xF0	; 240
    41ee:	d8 e1       	ldi	r29, 0x18	; 24
    41f0:	0f 2e       	mov	r0, r31
    41f2:	f8 e2       	ldi	r31, 0x28	; 40
    41f4:	cf 2e       	mov	r12, r31
    41f6:	d1 2c       	mov	r13, r1
    41f8:	f0 2d       	mov	r31, r0
    41fa:	d9 82       	std	Y+1, r13	; 0x01
    41fc:	c8 82       	st	Y, r12
    41fe:	86 e0       	ldi	r24, 0x06	; 6
    4200:	8a 83       	std	Y+2, r24	; 0x02
    4202:	1b 82       	std	Y+3, r1	; 0x03
    4204:	14 e0       	ldi	r17, 0x04	; 4
    4206:	1c 83       	std	Y+4, r17	; 0x04
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	3a df       	rcall	.-396    	; 0x4080 <_turn_off>
    420c:	d7 01       	movw	r26, r14
    420e:	18 96       	adiw	r26, 0x08	; 8
    4210:	ed 91       	ld	r30, X+
    4212:	fc 91       	ld	r31, X
    4214:	19 97       	sbiw	r26, 0x09	; 9
    4216:	67 e0       	ldi	r22, 0x07	; 7
    4218:	87 e2       	ldi	r24, 0x27	; 39
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	19 95       	eicall
    421e:	df 82       	std	Y+7, r13	; 0x07
    4220:	ce 82       	std	Y+6, r12	; 0x06
    4222:	87 e0       	ldi	r24, 0x07	; 7
    4224:	88 87       	std	Y+8, r24	; 0x08
    4226:	19 86       	std	Y+9, r1	; 0x09
    4228:	1a 87       	std	Y+10, r17	; 0x0a
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	29 df       	rcall	.-430    	; 0x4080 <_turn_off>
    422e:	d7 01       	movw	r26, r14
    4230:	18 96       	adiw	r26, 0x08	; 8
    4232:	ed 91       	ld	r30, X+
    4234:	fc 91       	ld	r31, X
    4236:	19 97       	sbiw	r26, 0x09	; 9
    4238:	65 e0       	ldi	r22, 0x05	; 5
    423a:	83 e3       	ldi	r24, 0x33	; 51
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	19 95       	eicall
    4240:	d7 01       	movw	r26, r14
    4242:	18 96       	adiw	r26, 0x08	; 8
    4244:	ed 91       	ld	r30, X+
    4246:	fc 91       	ld	r31, X
    4248:	19 97       	sbiw	r26, 0x09	; 9
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	84 e3       	ldi	r24, 0x34	; 52
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	19 95       	eicall
    4252:	84 e3       	ldi	r24, 0x34	; 52
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	9d 87       	std	Y+13, r25	; 0x0d
    4258:	8c 87       	std	Y+12, r24	; 0x0c
    425a:	85 e0       	ldi	r24, 0x05	; 5
    425c:	8e 87       	std	Y+14, r24	; 0x0e
    425e:	1f 86       	std	Y+15, r1	; 0x0f
    4260:	18 8b       	std	Y+16, r17	; 0x10
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	0d df       	rcall	.-486    	; 0x4080 <_turn_off>
    4266:	d7 01       	movw	r26, r14
    4268:	18 96       	adiw	r26, 0x08	; 8
    426a:	ed 91       	ld	r30, X+
    426c:	fc 91       	ld	r31, X
    426e:	19 97       	sbiw	r26, 0x09	; 9
    4270:	64 e0       	ldi	r22, 0x04	; 4
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	91 e0       	ldi	r25, 0x01	; 1
    4276:	19 95       	eicall
    4278:	d7 01       	movw	r26, r14
    427a:	18 96       	adiw	r26, 0x08	; 8
    427c:	ed 91       	ld	r30, X+
    427e:	fc 91       	ld	r31, X
    4280:	19 97       	sbiw	r26, 0x09	; 9
    4282:	61 e0       	ldi	r22, 0x01	; 1
    4284:	82 e0       	ldi	r24, 0x02	; 2
    4286:	91 e0       	ldi	r25, 0x01	; 1
    4288:	19 95       	eicall
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	91 e0       	ldi	r25, 0x01	; 1
    428e:	9b 8b       	std	Y+19, r25	; 0x13
    4290:	8a 8b       	std	Y+18, r24	; 0x12
    4292:	1c 8b       	std	Y+20, r17	; 0x14
    4294:	1d 8a       	std	Y+21, r1	; 0x15
    4296:	1e 8b       	std	Y+22, r17	; 0x16
    4298:	83 e0       	ldi	r24, 0x03	; 3
    429a:	f2 de       	rcall	.-540    	; 0x4080 <_turn_off>
    429c:	e1 2c       	mov	r14, r1
    429e:	f1 2c       	mov	r15, r1
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 ec       	ldi	r20, 0xC0	; 192
    42a6:	50 e0       	ldi	r21, 0x00	; 0
    42a8:	6c ed       	ldi	r22, 0xDC	; 220
    42aa:	74 e0       	ldi	r23, 0x04	; 4
    42ac:	8c e9       	ldi	r24, 0x9C	; 156
    42ae:	90 e2       	ldi	r25, 0x20	; 32
    42b0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskCreate>
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	08 95       	ret

000042c6 <led_slow_blink>:
    42c6:	0f 93       	push	r16
    42c8:	1f 93       	push	r17
    42ca:	cf 93       	push	r28
    42cc:	df 93       	push	r29
    42ce:	c8 2f       	mov	r28, r24
    42d0:	d0 e0       	ldi	r29, 0x00	; 0
    42d2:	8e 01       	movw	r16, r28
    42d4:	00 0f       	add	r16, r16
    42d6:	11 1f       	adc	r17, r17
    42d8:	d8 01       	movw	r26, r16
    42da:	ac 0f       	add	r26, r28
    42dc:	bd 1f       	adc	r27, r29
    42de:	aa 0f       	add	r26, r26
    42e0:	bb 1f       	adc	r27, r27
    42e2:	a0 51       	subi	r26, 0x10	; 16
    42e4:	b7 4e       	sbci	r27, 0xE7	; 231
    42e6:	e0 91 73 1a 	lds	r30, 0x1A73	; 0x801a73 <register_access+0xc>
    42ea:	f0 91 74 1a 	lds	r31, 0x1A74	; 0x801a74 <register_access+0xd>
    42ee:	12 96       	adiw	r26, 0x02	; 2
    42f0:	6c 91       	ld	r22, X
    42f2:	12 97       	sbiw	r26, 0x02	; 2
    42f4:	8d 91       	ld	r24, X+
    42f6:	9c 91       	ld	r25, X
    42f8:	19 95       	eicall
    42fa:	c0 0f       	add	r28, r16
    42fc:	d1 1f       	adc	r29, r17
    42fe:	cc 0f       	add	r28, r28
    4300:	dd 1f       	adc	r29, r29
    4302:	c0 51       	subi	r28, 0x10	; 16
    4304:	d7 4e       	sbci	r29, 0xE7	; 231
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	8c 83       	std	Y+4, r24	; 0x04
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	08 95       	ret

00004314 <led_fast_blink>:
    4314:	0f 93       	push	r16
    4316:	1f 93       	push	r17
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
    431c:	c8 2f       	mov	r28, r24
    431e:	d0 e0       	ldi	r29, 0x00	; 0
    4320:	8e 01       	movw	r16, r28
    4322:	00 0f       	add	r16, r16
    4324:	11 1f       	adc	r17, r17
    4326:	d8 01       	movw	r26, r16
    4328:	ac 0f       	add	r26, r28
    432a:	bd 1f       	adc	r27, r29
    432c:	aa 0f       	add	r26, r26
    432e:	bb 1f       	adc	r27, r27
    4330:	a0 51       	subi	r26, 0x10	; 16
    4332:	b7 4e       	sbci	r27, 0xE7	; 231
    4334:	e0 91 73 1a 	lds	r30, 0x1A73	; 0x801a73 <register_access+0xc>
    4338:	f0 91 74 1a 	lds	r31, 0x1A74	; 0x801a74 <register_access+0xd>
    433c:	12 96       	adiw	r26, 0x02	; 2
    433e:	6c 91       	ld	r22, X
    4340:	12 97       	sbiw	r26, 0x02	; 2
    4342:	8d 91       	ld	r24, X+
    4344:	9c 91       	ld	r25, X
    4346:	19 95       	eicall
    4348:	c0 0f       	add	r28, r16
    434a:	d1 1f       	adc	r29, r17
    434c:	cc 0f       	add	r28, r28
    434e:	dd 1f       	adc	r29, r29
    4350:	c0 51       	subi	r28, 0x10	; 16
    4352:	d7 4e       	sbci	r29, 0xE7	; 231
    4354:	82 e0       	ldi	r24, 0x02	; 2
    4356:	8c 83       	std	Y+4, r24	; 0x04
    4358:	df 91       	pop	r29
    435a:	cf 91       	pop	r28
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	08 95       	ret

00004362 <led_led_on>:
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	f9 01       	movw	r30, r18
    4368:	ee 0f       	add	r30, r30
    436a:	ff 1f       	adc	r31, r31
    436c:	e2 0f       	add	r30, r18
    436e:	f3 1f       	adc	r31, r19
    4370:	ee 0f       	add	r30, r30
    4372:	ff 1f       	adc	r31, r31
    4374:	e0 51       	subi	r30, 0x10	; 16
    4376:	f7 4e       	sbci	r31, 0xE7	; 231
    4378:	93 e0       	ldi	r25, 0x03	; 3
    437a:	94 83       	std	Z+4, r25	; 0x04
    437c:	af ce       	rjmp	.-674    	; 0x40dc <_turn_on>
    437e:	08 95       	ret

00004380 <led_led_off>:
    4380:	28 2f       	mov	r18, r24
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	f9 01       	movw	r30, r18
    4386:	ee 0f       	add	r30, r30
    4388:	ff 1f       	adc	r31, r31
    438a:	e2 0f       	add	r30, r18
    438c:	f3 1f       	adc	r31, r19
    438e:	ee 0f       	add	r30, r30
    4390:	ff 1f       	adc	r31, r31
    4392:	e0 51       	subi	r30, 0x10	; 16
    4394:	f7 4e       	sbci	r31, 0xE7	; 231
    4396:	94 e0       	ldi	r25, 0x04	; 4
    4398:	94 83       	std	Z+4, r25	; 0x04
    439a:	72 ce       	rjmp	.-796    	; 0x4080 <_turn_off>
    439c:	08 95       	ret

0000439e <led_long_puls>:
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	fc 01       	movw	r30, r24
    43a2:	ee 0f       	add	r30, r30
    43a4:	ff 1f       	adc	r31, r31
    43a6:	df 01       	movw	r26, r30
    43a8:	a8 0f       	add	r26, r24
    43aa:	b9 1f       	adc	r27, r25
    43ac:	aa 0f       	add	r26, r26
    43ae:	bb 1f       	adc	r27, r27
    43b0:	a0 51       	subi	r26, 0x10	; 16
    43b2:	b7 4e       	sbci	r27, 0xE7	; 231
    43b4:	24 e0       	ldi	r18, 0x04	; 4
    43b6:	15 96       	adiw	r26, 0x05	; 5
    43b8:	2c 93       	st	X, r18
    43ba:	15 97       	sbiw	r26, 0x05	; 5
    43bc:	fd 01       	movw	r30, r26
    43be:	14 82       	std	Z+4, r1	; 0x04
    43c0:	08 95       	ret

000043c2 <led_short_puls>:
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	fc 01       	movw	r30, r24
    43c6:	ee 0f       	add	r30, r30
    43c8:	ff 1f       	adc	r31, r31
    43ca:	df 01       	movw	r26, r30
    43cc:	a8 0f       	add	r26, r24
    43ce:	b9 1f       	adc	r27, r25
    43d0:	aa 0f       	add	r26, r26
    43d2:	bb 1f       	adc	r27, r27
    43d4:	a0 51       	subi	r26, 0x10	; 16
    43d6:	b7 4e       	sbci	r27, 0xE7	; 231
    43d8:	21 e0       	ldi	r18, 0x01	; 1
    43da:	15 96       	adiw	r26, 0x05	; 5
    43dc:	2c 93       	st	X, r18
    43de:	15 97       	sbiw	r26, 0x05	; 5
    43e0:	fd 01       	movw	r30, r26
    43e2:	14 82       	std	Z+4, r1	; 0x04
    43e4:	08 95       	ret

000043e6 <_serial_call_back>:
    43e6:	0f 93       	push	r16
    43e8:	1f 93       	push	r17
    43ea:	cf 93       	push	r28
    43ec:	df 93       	push	r29
    43ee:	1f 92       	push	r1
    43f0:	1f 92       	push	r1
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	8c 01       	movw	r16, r24
    43f8:	19 82       	std	Y+1, r1	; 0x01
    43fa:	2d c0       	rjmp	.+90     	; 0x4456 <_serial_call_back+0x70>
    43fc:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <rec_buf_inp.2947>
    4400:	ec 32       	cpi	r30, 0x2C	; 44
    4402:	50 f4       	brcc	.+20     	; 0x4418 <_serial_call_back+0x32>
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	8e 0f       	add	r24, r30
    4408:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <rec_buf_inp.2947>
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	e2 56       	subi	r30, 0x62	; 98
    4410:	f6 4e       	sbci	r31, 0xE6	; 230
    4412:	8a 81       	ldd	r24, Y+2	; 0x02
    4414:	80 83       	st	Z, r24
    4416:	02 c0       	rjmp	.+4      	; 0x441c <_serial_call_back+0x36>
    4418:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <rec_buf_inp.2947>
    441c:	8a 81       	ldd	r24, Y+2	; 0x02
    441e:	8a 30       	cpi	r24, 0x0A	; 10
    4420:	d1 f4       	brne	.+52     	; 0x4456 <_serial_call_back+0x70>
    4422:	40 91 6c 19 	lds	r20, 0x196C	; 0x80196c <rec_buf_inp.2947>
    4426:	50 e0       	ldi	r21, 0x00	; 0
    4428:	fa 01       	movw	r30, r20
    442a:	e4 56       	subi	r30, 0x64	; 100
    442c:	f6 4e       	sbci	r31, 0xE6	; 230
    442e:	10 82       	st	Z, r1
    4430:	41 50       	subi	r20, 0x01	; 1
    4432:	51 09       	sbc	r21, r1
    4434:	9e 01       	movw	r18, r28
    4436:	2f 5f       	subi	r18, 0xFF	; 255
    4438:	3f 4f       	sbci	r19, 0xFF	; 255
    443a:	6e e9       	ldi	r22, 0x9E	; 158
    443c:	79 e1       	ldi	r23, 0x19	; 25
    443e:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4442:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4446:	0e 94 cd 13 	call	0x279a	; 0x279a <xStreamBufferSendFromISR>
    444a:	89 81       	ldd	r24, Y+1	; 0x01
    444c:	81 11       	cpse	r24, r1
    444e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vPortYield>
    4452:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <rec_buf_inp.2947>
    4456:	be 01       	movw	r22, r28
    4458:	6e 5f       	subi	r22, 0xFE	; 254
    445a:	7f 4f       	sbci	r23, 0xFF	; 255
    445c:	c8 01       	movw	r24, r16
    445e:	8c d6       	rcall	.+3352   	; 0x5178 <serial_get_byte>
    4460:	88 23       	and	r24, r24
    4462:	61 f2       	breq	.-104    	; 0x43fc <_serial_call_back+0x16>
    4464:	0f 90       	pop	r0
    4466:	0f 90       	pop	r0
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	1f 91       	pop	r17
    446e:	0f 91       	pop	r16
    4470:	08 95       	ret

00004472 <_upload_message>:
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	df 93       	push	r29
    447a:	8c 01       	movw	r16, r24
    447c:	eb 01       	movw	r28, r22
    447e:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    4482:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    4486:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <xStreamBufferReset>
    448a:	b8 01       	movw	r22, r16
    448c:	88 e0       	ldi	r24, 0x08	; 8
    448e:	99 e1       	ldi	r25, 0x19	; 25
    4490:	0e 94 45 31 	call	0x628a	; 0x628a <strcpy>
    4494:	20 97       	sbiw	r28, 0x00	; 0
    4496:	79 f0       	breq	.+30     	; 0x44b6 <_upload_message+0x44>
    4498:	e8 e0       	ldi	r30, 0x08	; 8
    449a:	f9 e1       	ldi	r31, 0x19	; 25
    449c:	01 90       	ld	r0, Z+
    449e:	00 20       	and	r0, r0
    44a0:	e9 f7       	brne	.-6      	; 0x449c <_upload_message+0x2a>
    44a2:	31 97       	sbiw	r30, 0x01	; 1
    44a4:	80 e2       	ldi	r24, 0x20	; 32
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	91 83       	std	Z+1, r25	; 0x01
    44aa:	80 83       	st	Z, r24
    44ac:	be 01       	movw	r22, r28
    44ae:	88 e0       	ldi	r24, 0x08	; 8
    44b0:	99 e1       	ldi	r25, 0x19	; 25
    44b2:	0e 94 3a 31 	call	0x6274	; 0x6274 <strcat>
    44b6:	e8 e0       	ldi	r30, 0x08	; 8
    44b8:	f9 e1       	ldi	r31, 0x19	; 25
    44ba:	df 01       	movw	r26, r30
    44bc:	0d 90       	ld	r0, X+
    44be:	00 20       	and	r0, r0
    44c0:	e9 f7       	brne	.-6      	; 0x44bc <_upload_message+0x4a>
    44c2:	11 97       	sbiw	r26, 0x01	; 1
    44c4:	8d e0       	ldi	r24, 0x0D	; 13
    44c6:	9a e0       	ldi	r25, 0x0A	; 10
    44c8:	11 96       	adiw	r26, 0x01	; 1
    44ca:	9c 93       	st	X, r25
    44cc:	8e 93       	st	-X, r24
    44ce:	12 96       	adiw	r26, 0x02	; 2
    44d0:	1c 92       	st	X, r1
    44d2:	01 90       	ld	r0, Z+
    44d4:	00 20       	and	r0, r0
    44d6:	e9 f7       	brne	.-6      	; 0x44d2 <_upload_message+0x60>
    44d8:	31 97       	sbiw	r30, 0x01	; 1
    44da:	e8 50       	subi	r30, 0x08	; 8
    44dc:	f9 41       	sbci	r31, 0x19	; 25
    44de:	ae 2f       	mov	r26, r30
    44e0:	88 e0       	ldi	r24, 0x08	; 8
    44e2:	99 e1       	ldi	r25, 0x19	; 25
    44e4:	ac 01       	movw	r20, r24
    44e6:	6a 2f       	mov	r22, r26
    44e8:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_rn2483_serial>
    44ec:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <_rn2483_serial+0x1>
    44f0:	f3 d5       	rcall	.+3046   	; 0x50d8 <serial_send_bytes>
    44f2:	81 11       	cpse	r24, r1
    44f4:	11 c0       	rjmp	.+34     	; 0x4518 <_upload_message+0xa6>
    44f6:	08 e2       	ldi	r16, 0x28	; 40
    44f8:	15 e0       	ldi	r17, 0x05	; 5
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	4d e2       	ldi	r20, 0x2D	; 45
    4500:	50 e0       	ldi	r21, 0x00	; 0
    4502:	68 ef       	ldi	r22, 0xF8	; 248
    4504:	79 e1       	ldi	r23, 0x19	; 25
    4506:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    450a:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    450e:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    4512:	88 ef       	ldi	r24, 0xF8	; 248
    4514:	99 e1       	ldi	r25, 0x19	; 25
    4516:	02 c0       	rjmp	.+4      	; 0x451c <_upload_message+0xaa>
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	df 91       	pop	r29
    451e:	cf 91       	pop	r28
    4520:	1f 91       	pop	r17
    4522:	0f 91       	pop	r16
    4524:	08 95       	ret

00004526 <_reply2return_code>:
    4526:	2f 92       	push	r2
    4528:	3f 92       	push	r3
    452a:	4f 92       	push	r4
    452c:	5f 92       	push	r5
    452e:	6f 92       	push	r6
    4530:	7f 92       	push	r7
    4532:	8f 92       	push	r8
    4534:	9f 92       	push	r9
    4536:	af 92       	push	r10
    4538:	bf 92       	push	r11
    453a:	cf 92       	push	r12
    453c:	df 92       	push	r13
    453e:	ef 92       	push	r14
    4540:	ff 92       	push	r15
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
    4546:	cf 93       	push	r28
    4548:	df 93       	push	r29
    454a:	5c 01       	movw	r10, r24
    454c:	fc 01       	movw	r30, r24
    454e:	01 90       	ld	r0, Z+
    4550:	00 20       	and	r0, r0
    4552:	e9 f7       	brne	.-6      	; 0x454e <_reply2return_code+0x28>
    4554:	31 97       	sbiw	r30, 0x01	; 1
    4556:	6f 01       	movw	r12, r30
    4558:	c8 1a       	sub	r12, r24
    455a:	d9 0a       	sbc	r13, r25
    455c:	5c 2c       	mov	r5, r12
    455e:	0f 2e       	mov	r0, r31
    4560:	fd e7       	ldi	r31, 0x7D	; 125
    4562:	8f 2e       	mov	r8, r31
    4564:	f7 e0       	ldi	r31, 0x07	; 7
    4566:	9f 2e       	mov	r9, r31
    4568:	f0 2d       	mov	r31, r0
    456a:	e1 2c       	mov	r14, r1
    456c:	f1 2c       	mov	r15, r1
    456e:	4c 2c       	mov	r4, r12
    4570:	37 01       	movw	r6, r14
    4572:	f4 01       	movw	r30, r8
    4574:	01 81       	ldd	r16, Z+1	; 0x01
    4576:	12 81       	ldd	r17, Z+2	; 0x02
    4578:	e8 01       	movw	r28, r16
    457a:	09 90       	ld	r0, Y+
    457c:	00 20       	and	r0, r0
    457e:	e9 f7       	brne	.-6      	; 0x457a <_reply2return_code+0x54>
    4580:	21 97       	sbiw	r28, 0x01	; 1
    4582:	c0 1b       	sub	r28, r16
    4584:	d1 0b       	sbc	r29, r17
    4586:	3c 2e       	mov	r3, r28
    4588:	f9 e0       	ldi	r31, 0x09	; 9
    458a:	cf 16       	cp	r12, r31
    458c:	d1 04       	cpc	r13, r1
    458e:	58 f0       	brcs	.+22     	; 0x45a6 <_reply2return_code+0x80>
    4590:	f4 01       	movw	r30, r8
    4592:	20 80       	ld	r2, Z
    4594:	fe e0       	ldi	r31, 0x0E	; 14
    4596:	2f 12       	cpse	r2, r31
    4598:	06 c0       	rjmp	.+12     	; 0x45a6 <_reply2return_code+0x80>
    459a:	b8 01       	movw	r22, r16
    459c:	c5 01       	movw	r24, r10
    459e:	0e 94 15 31 	call	0x622a	; 0x622a <strcasestr>
    45a2:	89 2b       	or	r24, r25
    45a4:	09 f5       	brne	.+66     	; 0x45e8 <_reply2return_code+0xc2>
    45a6:	44 2d       	mov	r20, r4
    45a8:	35 14       	cp	r3, r5
    45aa:	08 f4       	brcc	.+2      	; 0x45ae <_reply2return_code+0x88>
    45ac:	4c 2f       	mov	r20, r28
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	b8 01       	movw	r22, r16
    45b2:	c5 01       	movw	r24, r10
    45b4:	0e 94 4c 31 	call	0x6298	; 0x6298 <strncasecmp>
    45b8:	89 2b       	or	r24, r25
    45ba:	49 f4       	brne	.+18     	; 0x45ce <_reply2return_code+0xa8>
    45bc:	f3 01       	movw	r30, r6
    45be:	ee 0f       	add	r30, r30
    45c0:	ff 1f       	adc	r31, r31
    45c2:	e6 0d       	add	r30, r6
    45c4:	f7 1d       	adc	r31, r7
    45c6:	e3 58       	subi	r30, 0x83	; 131
    45c8:	f8 4f       	sbci	r31, 0xF8	; 248
    45ca:	20 80       	ld	r2, Z
    45cc:	0d c0       	rjmp	.+26     	; 0x45e8 <_reply2return_code+0xc2>
    45ce:	8f ef       	ldi	r24, 0xFF	; 255
    45d0:	e8 1a       	sub	r14, r24
    45d2:	f8 0a       	sbc	r15, r24
    45d4:	e3 e0       	ldi	r30, 0x03	; 3
    45d6:	8e 0e       	add	r8, r30
    45d8:	91 1c       	adc	r9, r1
    45da:	f1 e1       	ldi	r31, 0x11	; 17
    45dc:	ef 16       	cp	r14, r31
    45de:	f1 04       	cpc	r15, r1
    45e0:	39 f6       	brne	.-114    	; 0x4570 <_reply2return_code+0x4a>
    45e2:	68 94       	set
    45e4:	22 24       	eor	r2, r2
    45e6:	24 f8       	bld	r2, 4
    45e8:	82 2d       	mov	r24, r2
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	ff 90       	pop	r15
    45f4:	ef 90       	pop	r14
    45f6:	df 90       	pop	r13
    45f8:	cf 90       	pop	r12
    45fa:	bf 90       	pop	r11
    45fc:	af 90       	pop	r10
    45fe:	9f 90       	pop	r9
    4600:	8f 90       	pop	r8
    4602:	7f 90       	pop	r7
    4604:	6f 90       	pop	r6
    4606:	5f 90       	pop	r5
    4608:	4f 90       	pop	r4
    460a:	3f 90       	pop	r3
    460c:	2f 90       	pop	r2
    460e:	08 95       	ret

00004610 <_upload_message_rc>:
    4610:	30 df       	rcall	.-416    	; 0x4472 <_upload_message>
    4612:	89 cf       	rjmp	.-238    	; 0x4526 <_reply2return_code>
    4614:	08 95       	ret

00004616 <lora_driver_flush_buffers>:
    4616:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    461a:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    461e:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <xStreamBufferReset>
    4622:	08 95       	ret

00004624 <lora_driver_create>:
    4624:	8f 92       	push	r8
    4626:	9f 92       	push	r9
    4628:	af 92       	push	r10
    462a:	cf 92       	push	r12
    462c:	ef 92       	push	r14
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	cf 93       	push	r28
    4634:	c8 2f       	mov	r28, r24
    4636:	8b 01       	movw	r16, r22
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	60 e0       	ldi	r22, 0x00	; 0
    463c:	70 e0       	ldi	r23, 0x00	; 0
    463e:	88 ec       	ldi	r24, 0xC8	; 200
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	0e 94 b8 12 	call	0x2570	; 0x2570 <xStreamBufferGenericCreate>
    4646:	90 93 70 19 	sts	0x1970, r25	; 0x801970 <_serial_reply_buffer_handle+0x1>
    464a:	80 93 6f 19 	sts	0x196F, r24	; 0x80196f <_serial_reply_buffer_handle>
    464e:	10 93 6e 19 	sts	0x196E, r17	; 0x80196e <_downlinkMessageBuffer+0x1>
    4652:	00 93 6d 19 	sts	0x196D, r16	; 0x80196d <_downlinkMessageBuffer>
    4656:	0f 2e       	mov	r0, r31
    4658:	f3 ef       	ldi	r31, 0xF3	; 243
    465a:	8f 2e       	mov	r8, r31
    465c:	f1 e2       	ldi	r31, 0x21	; 33
    465e:	9f 2e       	mov	r9, r31
    4660:	f0 2d       	mov	r31, r0
    4662:	68 94       	set
    4664:	aa 24       	eor	r10, r10
    4666:	a6 f8       	bld	r10, 6
    4668:	68 94       	set
    466a:	cc 24       	eor	r12, r12
    466c:	c6 f8       	bld	r12, 6
    466e:	e1 2c       	mov	r14, r1
    4670:	00 e0       	ldi	r16, 0x00	; 0
    4672:	23 e0       	ldi	r18, 0x03	; 3
    4674:	40 e0       	ldi	r20, 0x00	; 0
    4676:	51 ee       	ldi	r21, 0xE1	; 225
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	8c 2f       	mov	r24, r28
    467e:	71 d4       	rcall	.+2274   	; 0x4f62 <serial_new_instance>
    4680:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <_rn2483_serial+0x1>
    4684:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_rn2483_serial>
    4688:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <register_access+0x8>
    468c:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <register_access+0x9>
    4690:	64 e0       	ldi	r22, 0x04	; 4
    4692:	87 e0       	ldi	r24, 0x07	; 7
    4694:	91 e0       	ldi	r25, 0x01	; 1
    4696:	19 95       	eicall
    4698:	cf 91       	pop	r28
    469a:	1f 91       	pop	r17
    469c:	0f 91       	pop	r16
    469e:	ef 90       	pop	r14
    46a0:	cf 90       	pop	r12
    46a2:	af 90       	pop	r10
    46a4:	9f 90       	pop	r9
    46a6:	8f 90       	pop	r8
    46a8:	08 95       	ret

000046aa <lora_driver_reset_rn2483>:
    46aa:	88 23       	and	r24, r24
    46ac:	49 f0       	breq	.+18     	; 0x46c0 <lora_driver_reset_rn2483+0x16>
    46ae:	e0 91 79 1a 	lds	r30, 0x1A79	; 0x801a79 <register_access+0x12>
    46b2:	f0 91 7a 1a 	lds	r31, 0x1A7A	; 0x801a7a <register_access+0x13>
    46b6:	64 e0       	ldi	r22, 0x04	; 4
    46b8:	88 e0       	ldi	r24, 0x08	; 8
    46ba:	91 e0       	ldi	r25, 0x01	; 1
    46bc:	19 95       	eicall
    46be:	08 95       	ret
    46c0:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <register_access+0x8>
    46c4:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <register_access+0x9>
    46c8:	64 e0       	ldi	r22, 0x04	; 4
    46ca:	88 e0       	ldi	r24, 0x08	; 8
    46cc:	91 e0       	ldi	r25, 0x01	; 1
    46ce:	19 95       	eicall
    46d0:	08 95       	ret

000046d2 <lora_driver_rn2483_factory_reset>:
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	83 e0       	ldi	r24, 0x03	; 3
    46d8:	95 e0       	ldi	r25, 0x05	; 5
    46da:	cb de       	rcall	.-618    	; 0x4472 <_upload_message>
    46dc:	e8 ef       	ldi	r30, 0xF8	; 248
    46de:	f9 e1       	ldi	r31, 0x19	; 25
    46e0:	01 90       	ld	r0, Z+
    46e2:	00 20       	and	r0, r0
    46e4:	e9 f7       	brne	.-6      	; 0x46e0 <lora_driver_rn2483_factory_reset+0xe>
    46e6:	31 97       	sbiw	r30, 0x01	; 1
    46e8:	e8 5f       	subi	r30, 0xF8	; 248
    46ea:	f9 41       	sbci	r31, 0x19	; 25
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	75 97       	sbiw	r30, 0x15	; 21
    46f0:	08 f0       	brcs	.+2      	; 0x46f4 <lora_driver_rn2483_factory_reset+0x22>
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	08 95       	ret

000046f6 <lora_driver_get_rn2483_hweui>:
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	ec 01       	movw	r28, r24
    46fc:	60 e0       	ldi	r22, 0x00	; 0
    46fe:	70 e0       	ldi	r23, 0x00	; 0
    4700:	84 e1       	ldi	r24, 0x14	; 20
    4702:	95 e0       	ldi	r25, 0x05	; 5
    4704:	b6 de       	rcall	.-660    	; 0x4472 <_upload_message>
    4706:	e8 ef       	ldi	r30, 0xF8	; 248
    4708:	f9 e1       	ldi	r31, 0x19	; 25
    470a:	01 90       	ld	r0, Z+
    470c:	00 20       	and	r0, r0
    470e:	e9 f7       	brne	.-6      	; 0x470a <lora_driver_get_rn2483_hweui+0x14>
    4710:	e9 50       	subi	r30, 0x09	; 9
    4712:	fa 41       	sbci	r31, 0x1A	; 26
    4714:	39 f4       	brne	.+14     	; 0x4724 <lora_driver_get_rn2483_hweui+0x2e>
    4716:	68 ef       	ldi	r22, 0xF8	; 248
    4718:	79 e1       	ldi	r23, 0x19	; 25
    471a:	ce 01       	movw	r24, r28
    471c:	0e 94 45 31 	call	0x628a	; 0x628a <strcpy>
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	02 c0       	rjmp	.+4      	; 0x4728 <lora_driver_get_rn2483_hweui+0x32>
    4724:	18 82       	st	Y, r1
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	df 91       	pop	r29
    472a:	cf 91       	pop	r28
    472c:	08 95       	ret

0000472e <lora_driver_set_device_identifier>:
    472e:	fc 01       	movw	r30, r24
    4730:	01 90       	ld	r0, Z+
    4732:	00 20       	and	r0, r0
    4734:	e9 f7       	brne	.-6      	; 0x4730 <lora_driver_set_device_identifier+0x2>
    4736:	9f 01       	movw	r18, r30
    4738:	21 51       	subi	r18, 0x11	; 17
    473a:	31 09       	sbc	r19, r1
    473c:	28 17       	cp	r18, r24
    473e:	39 07       	cpc	r19, r25
    4740:	29 f4       	brne	.+10     	; 0x474c <lora_driver_set_device_identifier+0x1e>
    4742:	bc 01       	movw	r22, r24
    4744:	82 e4       	ldi	r24, 0x42	; 66
    4746:	95 e0       	ldi	r25, 0x05	; 5
    4748:	63 cf       	rjmp	.-314    	; 0x4610 <_upload_message_rc>
    474a:	08 95       	ret
    474c:	89 e0       	ldi	r24, 0x09	; 9
    474e:	08 95       	ret

00004750 <lora_driver_set_application_identifier>:
    4750:	fc 01       	movw	r30, r24
    4752:	01 90       	ld	r0, Z+
    4754:	00 20       	and	r0, r0
    4756:	e9 f7       	brne	.-6      	; 0x4752 <lora_driver_set_application_identifier+0x2>
    4758:	9f 01       	movw	r18, r30
    475a:	21 51       	subi	r18, 0x11	; 17
    475c:	31 09       	sbc	r19, r1
    475e:	28 17       	cp	r18, r24
    4760:	39 07       	cpc	r19, r25
    4762:	29 f4       	brne	.+10     	; 0x476e <lora_driver_set_application_identifier+0x1e>
    4764:	bc 01       	movw	r22, r24
    4766:	81 e5       	ldi	r24, 0x51	; 81
    4768:	95 e0       	ldi	r25, 0x05	; 5
    476a:	52 cf       	rjmp	.-348    	; 0x4610 <_upload_message_rc>
    476c:	08 95       	ret
    476e:	89 e0       	ldi	r24, 0x09	; 9
    4770:	08 95       	ret

00004772 <lora_driver_set_application_key>:
    4772:	fc 01       	movw	r30, r24
    4774:	01 90       	ld	r0, Z+
    4776:	00 20       	and	r0, r0
    4778:	e9 f7       	brne	.-6      	; 0x4774 <lora_driver_set_application_key+0x2>
    477a:	9f 01       	movw	r18, r30
    477c:	21 52       	subi	r18, 0x21	; 33
    477e:	31 09       	sbc	r19, r1
    4780:	28 17       	cp	r18, r24
    4782:	39 07       	cpc	r19, r25
    4784:	29 f4       	brne	.+10     	; 0x4790 <lora_driver_set_application_key+0x1e>
    4786:	bc 01       	movw	r22, r24
    4788:	80 e6       	ldi	r24, 0x60	; 96
    478a:	95 e0       	ldi	r25, 0x05	; 5
    478c:	41 cf       	rjmp	.-382    	; 0x4610 <_upload_message_rc>
    478e:	08 95       	ret
    4790:	89 e0       	ldi	r24, 0x09	; 9
    4792:	08 95       	ret

00004794 <lora_driver_save_mac>:
    4794:	60 e0       	ldi	r22, 0x00	; 0
    4796:	70 e0       	ldi	r23, 0x00	; 0
    4798:	8f e9       	ldi	r24, 0x9F	; 159
    479a:	95 e0       	ldi	r25, 0x05	; 5
    479c:	39 cf       	rjmp	.-398    	; 0x4610 <_upload_message_rc>
    479e:	08 95       	ret

000047a0 <lora_driver_join>:
    47a0:	0f 93       	push	r16
    47a2:	1f 93       	push	r17
    47a4:	e8 2f       	mov	r30, r24
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	ee 0f       	add	r30, r30
    47aa:	ff 1f       	adc	r31, r31
    47ac:	e7 58       	subi	r30, 0x87	; 135
    47ae:	f8 4f       	sbci	r31, 0xF8	; 248
    47b0:	60 81       	ld	r22, Z
    47b2:	71 81       	ldd	r23, Z+1	; 0x01
    47b4:	88 ea       	ldi	r24, 0xA8	; 168
    47b6:	95 e0       	ldi	r25, 0x05	; 5
    47b8:	2b df       	rcall	.-426    	; 0x4610 <_upload_message_rc>
    47ba:	81 11       	cpse	r24, r1
    47bc:	14 c0       	rjmp	.+40     	; 0x47e6 <lora_driver_join+0x46>
    47be:	08 e2       	ldi	r16, 0x28	; 40
    47c0:	15 e0       	ldi	r17, 0x05	; 5
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	4d e2       	ldi	r20, 0x2D	; 45
    47c8:	50 e0       	ldi	r21, 0x00	; 0
    47ca:	68 ef       	ldi	r22, 0xF8	; 248
    47cc:	79 e1       	ldi	r23, 0x19	; 25
    47ce:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    47d2:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    47d6:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    47da:	88 23       	and	r24, r24
    47dc:	21 f0       	breq	.+8      	; 0x47e6 <lora_driver_join+0x46>
    47de:	88 ef       	ldi	r24, 0xF8	; 248
    47e0:	99 e1       	ldi	r25, 0x19	; 25
    47e2:	a1 de       	rcall	.-702    	; 0x4526 <_reply2return_code>
    47e4:	03 c0       	rjmp	.+6      	; 0x47ec <lora_driver_join+0x4c>
    47e6:	88 ef       	ldi	r24, 0xF8	; 248
    47e8:	99 e1       	ldi	r25, 0x19	; 25
    47ea:	9d de       	rcall	.-710    	; 0x4526 <_reply2return_code>
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	08 95       	ret

000047f2 <lora_driver_sent_upload_message>:
    47f2:	0f 93       	push	r16
    47f4:	1f 93       	push	r17
    47f6:	cf 93       	push	r28
    47f8:	df 93       	push	r29
    47fa:	1f 92       	push	r1
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	db 01       	movw	r26, r22
    4802:	11 96       	adiw	r26, 0x01	; 1
    4804:	9c 91       	ld	r25, X
    4806:	11 97       	sbiw	r26, 0x01	; 1
    4808:	95 31       	cpi	r25, 0x15	; 21
    480a:	08 f0       	brcs	.+2      	; 0x480e <lora_driver_sent_upload_message+0x1c>
    480c:	b4 c0       	rjmp	.+360    	; 0x4976 <lora_driver_sent_upload_message+0x184>
    480e:	99 23       	and	r25, r25
    4810:	81 f1       	breq	.+96     	; 0x4872 <lora_driver_sent_upload_message+0x80>
    4812:	60 e0       	ldi	r22, 0x00	; 0
    4814:	70 e0       	ldi	r23, 0x00	; 0
    4816:	27 2f       	mov	r18, r23
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	46 2f       	mov	r20, r22
    481c:	50 e0       	ldi	r21, 0x00	; 0
    481e:	fd 01       	movw	r30, r26
    4820:	e4 0f       	add	r30, r20
    4822:	f5 1f       	adc	r31, r21
    4824:	92 81       	ldd	r25, Z+2	; 0x02
    4826:	92 95       	swap	r25
    4828:	9f 70       	andi	r25, 0x0F	; 15
    482a:	9a 30       	cpi	r25, 0x0A	; 10
    482c:	10 f0       	brcs	.+4      	; 0x4832 <lora_driver_sent_upload_message+0x40>
    482e:	99 5c       	subi	r25, 0xC9	; 201
    4830:	01 c0       	rjmp	.+2      	; 0x4834 <lora_driver_sent_upload_message+0x42>
    4832:	90 5d       	subi	r25, 0xD0	; 208
    4834:	f9 01       	movw	r30, r18
    4836:	e7 57       	subi	r30, 0x77	; 119
    4838:	f6 4e       	sbci	r31, 0xE6	; 230
    483a:	90 83       	st	Z, r25
    483c:	2f 5f       	subi	r18, 0xFF	; 255
    483e:	3f 4f       	sbci	r19, 0xFF	; 255
    4840:	fd 01       	movw	r30, r26
    4842:	e4 0f       	add	r30, r20
    4844:	f5 1f       	adc	r31, r21
    4846:	92 81       	ldd	r25, Z+2	; 0x02
    4848:	9f 70       	andi	r25, 0x0F	; 15
    484a:	49 2f       	mov	r20, r25
    484c:	50 e0       	ldi	r21, 0x00	; 0
    484e:	4a 30       	cpi	r20, 0x0A	; 10
    4850:	51 05       	cpc	r21, r1
    4852:	14 f0       	brlt	.+4      	; 0x4858 <lora_driver_sent_upload_message+0x66>
    4854:	99 5c       	subi	r25, 0xC9	; 201
    4856:	01 c0       	rjmp	.+2      	; 0x485a <lora_driver_sent_upload_message+0x68>
    4858:	90 5d       	subi	r25, 0xD0	; 208
    485a:	f9 01       	movw	r30, r18
    485c:	e7 57       	subi	r30, 0x77	; 119
    485e:	f6 4e       	sbci	r31, 0xE6	; 230
    4860:	90 83       	st	Z, r25
    4862:	7e 5f       	subi	r23, 0xFE	; 254
    4864:	6f 5f       	subi	r22, 0xFF	; 255
    4866:	11 96       	adiw	r26, 0x01	; 1
    4868:	9c 91       	ld	r25, X
    486a:	11 97       	sbiw	r26, 0x01	; 1
    486c:	69 17       	cp	r22, r25
    486e:	98 f2       	brcs	.-90     	; 0x4816 <lora_driver_sent_upload_message+0x24>
    4870:	01 c0       	rjmp	.+2      	; 0x4874 <lora_driver_sent_upload_message+0x82>
    4872:	70 e0       	ldi	r23, 0x00	; 0
    4874:	e7 2f       	mov	r30, r23
    4876:	f0 e0       	ldi	r31, 0x00	; 0
    4878:	e7 57       	subi	r30, 0x77	; 119
    487a:	f6 4e       	sbci	r31, 0xE6	; 230
    487c:	10 82       	st	Z, r1
    487e:	4c 91       	ld	r20, X
    4880:	81 11       	cpse	r24, r1
    4882:	03 c0       	rjmp	.+6      	; 0x488a <lora_driver_sent_upload_message+0x98>
    4884:	81 eb       	ldi	r24, 0xB1	; 177
    4886:	95 e0       	ldi	r25, 0x05	; 5
    4888:	02 c0       	rjmp	.+4      	; 0x488e <lora_driver_sent_upload_message+0x9c>
    488a:	83 eb       	ldi	r24, 0xB3	; 179
    488c:	95 e0       	ldi	r25, 0x05	; 5
    488e:	29 e8       	ldi	r18, 0x89	; 137
    4890:	39 e1       	ldi	r19, 0x19	; 25
    4892:	3f 93       	push	r19
    4894:	2f 93       	push	r18
    4896:	1f 92       	push	r1
    4898:	4f 93       	push	r20
    489a:	9f 93       	push	r25
    489c:	8f 93       	push	r24
    489e:	87 eb       	ldi	r24, 0xB7	; 183
    48a0:	95 e0       	ldi	r25, 0x05	; 5
    48a2:	9f 93       	push	r25
    48a4:	8f 93       	push	r24
    48a6:	8b ec       	ldi	r24, 0xCB	; 203
    48a8:	99 e1       	ldi	r25, 0x19	; 25
    48aa:	9f 93       	push	r25
    48ac:	8f 93       	push	r24
    48ae:	0e 94 a7 31 	call	0x634e	; 0x634e <sprintf>
    48b2:	60 e0       	ldi	r22, 0x00	; 0
    48b4:	70 e0       	ldi	r23, 0x00	; 0
    48b6:	8b ec       	ldi	r24, 0xCB	; 203
    48b8:	99 e1       	ldi	r25, 0x19	; 25
    48ba:	aa de       	rcall	.-684    	; 0x4610 <_upload_message_rc>
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	f8 94       	cli
    48c0:	de bf       	out	0x3e, r29	; 62
    48c2:	0f be       	out	0x3f, r0	; 63
    48c4:	cd bf       	out	0x3d, r28	; 61
    48c6:	81 11       	cpse	r24, r1
    48c8:	59 c0       	rjmp	.+178    	; 0x497c <lora_driver_sent_upload_message+0x18a>
    48ca:	08 e2       	ldi	r16, 0x28	; 40
    48cc:	15 e0       	ldi	r17, 0x05	; 5
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	4d e2       	ldi	r20, 0x2D	; 45
    48d4:	50 e0       	ldi	r21, 0x00	; 0
    48d6:	68 ef       	ldi	r22, 0xF8	; 248
    48d8:	79 e1       	ldi	r23, 0x19	; 25
    48da:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <_serial_reply_buffer_handle>
    48de:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_serial_reply_buffer_handle+0x1>
    48e2:	0e 94 10 14 	call	0x2820	; 0x2820 <xStreamBufferReceive>
    48e6:	88 23       	and	r24, r24
    48e8:	09 f4       	brne	.+2      	; 0x48ec <lora_driver_sent_upload_message+0xfa>
    48ea:	47 c0       	rjmp	.+142    	; 0x497a <lora_driver_sent_upload_message+0x188>
    48ec:	88 ef       	ldi	r24, 0xF8	; 248
    48ee:	99 e1       	ldi	r25, 0x19	; 25
    48f0:	1a de       	rcall	.-972    	; 0x4526 <_reply2return_code>
    48f2:	8e 30       	cpi	r24, 0x0E	; 14
    48f4:	09 f0       	breq	.+2      	; 0x48f8 <lora_driver_sent_upload_message+0x106>
    48f6:	42 c0       	rjmp	.+132    	; 0x497c <lora_driver_sent_upload_message+0x18a>
    48f8:	87 e0       	ldi	r24, 0x07	; 7
    48fa:	89 83       	std	Y+1, r24	; 0x01
    48fc:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_downlinkMessageBuffer>
    4900:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_downlinkMessageBuffer+0x1>
    4904:	89 2b       	or	r24, r25
    4906:	a9 f1       	breq	.+106    	; 0x4972 <lora_driver_sent_upload_message+0x180>
    4908:	be 01       	movw	r22, r28
    490a:	6f 5f       	subi	r22, 0xFF	; 255
    490c:	7f 4f       	sbci	r23, 0xFF	; 255
    490e:	88 ef       	ldi	r24, 0xF8	; 248
    4910:	99 e1       	ldi	r25, 0x19	; 25
    4912:	68 d1       	rcall	.+720    	; 0x4be4 <decode_port_no>
    4914:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <_downlink_payload>
    4918:	e9 81       	ldd	r30, Y+1	; 0x01
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	e8 50       	subi	r30, 0x08	; 8
    491e:	f6 4e       	sbci	r31, 0xE6	; 230
    4920:	df 01       	movw	r26, r30
    4922:	0d 90       	ld	r0, X+
    4924:	00 20       	and	r0, r0
    4926:	e9 f7       	brne	.-6      	; 0x4922 <lora_driver_sent_upload_message+0x130>
    4928:	11 97       	sbiw	r26, 0x01	; 1
    492a:	ae 1b       	sub	r26, r30
    492c:	bf 0b       	sbc	r27, r31
    492e:	aa 23       	and	r26, r26
    4930:	91 f0       	breq	.+36     	; 0x4956 <lora_driver_sent_upload_message+0x164>
    4932:	bb 27       	eor	r27, r27
    4934:	cd 01       	movw	r24, r26
    4936:	01 97       	sbiw	r24, 0x01	; 1
    4938:	9c 01       	movw	r18, r24
    493a:	12 f4       	brpl	.+4      	; 0x4940 <lora_driver_sent_upload_message+0x14e>
    493c:	2f 5f       	subi	r18, 0xFF	; 255
    493e:	3f 4f       	sbci	r19, 0xFF	; 255
    4940:	35 95       	asr	r19
    4942:	27 95       	ror	r18
    4944:	20 93 74 19 	sts	0x1974, r18	; 0x801974 <_downlink_payload+0x1>
    4948:	af 01       	movw	r20, r30
    494a:	4f 5f       	subi	r20, 0xFF	; 255
    494c:	5f 4f       	sbci	r21, 0xFF	; 255
    494e:	64 e1       	ldi	r22, 0x14	; 20
    4950:	85 e7       	ldi	r24, 0x75	; 117
    4952:	99 e1       	ldi	r25, 0x19	; 25
    4954:	73 d1       	rcall	.+742    	; 0x4c3c <decode_hexadecimal_string_bytes>
    4956:	01 e0       	ldi	r16, 0x01	; 1
    4958:	10 e0       	ldi	r17, 0x00	; 0
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	46 e1       	ldi	r20, 0x16	; 22
    4960:	50 e0       	ldi	r21, 0x00	; 0
    4962:	63 e7       	ldi	r22, 0x73	; 115
    4964:	79 e1       	ldi	r23, 0x19	; 25
    4966:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <_downlinkMessageBuffer>
    496a:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <_downlinkMessageBuffer+0x1>
    496e:	0e 94 23 13 	call	0x2646	; 0x2646 <xStreamBufferSend>
    4972:	8e e0       	ldi	r24, 0x0E	; 14
    4974:	03 c0       	rjmp	.+6      	; 0x497c <lora_driver_sent_upload_message+0x18a>
    4976:	84 e1       	ldi	r24, 0x14	; 20
    4978:	01 c0       	rjmp	.+2      	; 0x497c <lora_driver_sent_upload_message+0x18a>
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	0f 90       	pop	r0
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	1f 91       	pop	r17
    4984:	0f 91       	pop	r16
    4986:	08 95       	ret

00004988 <lora_driver_set_adaptive_data_rate>:
    4988:	81 30       	cpi	r24, 0x01	; 1
    498a:	19 f0       	breq	.+6      	; 0x4992 <lora_driver_set_adaptive_data_rate+0xa>
    498c:	67 ec       	ldi	r22, 0xC7	; 199
    498e:	75 e0       	ldi	r23, 0x05	; 5
    4990:	02 c0       	rjmp	.+4      	; 0x4996 <lora_driver_set_adaptive_data_rate+0xe>
    4992:	60 ea       	ldi	r22, 0xA0	; 160
    4994:	76 e0       	ldi	r23, 0x06	; 6
    4996:	8b ec       	ldi	r24, 0xCB	; 203
    4998:	95 e0       	ldi	r25, 0x05	; 5
    499a:	3a ce       	rjmp	.-908    	; 0x4610 <_upload_message_rc>
    499c:	08 95       	ret

0000499e <lora_driver_set_receive_delay>:
    499e:	9f 93       	push	r25
    49a0:	8f 93       	push	r24
    49a2:	8c ef       	ldi	r24, 0xFC	; 252
    49a4:	95 e0       	ldi	r25, 0x05	; 5
    49a6:	9f 93       	push	r25
    49a8:	8f 93       	push	r24
    49aa:	8b ec       	ldi	r24, 0xCB	; 203
    49ac:	99 e1       	ldi	r25, 0x19	; 25
    49ae:	9f 93       	push	r25
    49b0:	8f 93       	push	r24
    49b2:	0e 94 a7 31 	call	0x634e	; 0x634e <sprintf>
    49b6:	60 e0       	ldi	r22, 0x00	; 0
    49b8:	70 e0       	ldi	r23, 0x00	; 0
    49ba:	8b ec       	ldi	r24, 0xCB	; 203
    49bc:	99 e1       	ldi	r25, 0x19	; 25
    49be:	28 de       	rcall	.-944    	; 0x4610 <_upload_message_rc>
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	0f 90       	pop	r0
    49cc:	08 95       	ret

000049ce <lora_driver_configure_to_eu868>:
    49ce:	2f 92       	push	r2
    49d0:	3f 92       	push	r3
    49d2:	4f 92       	push	r4
    49d4:	5f 92       	push	r5
    49d6:	6f 92       	push	r6
    49d8:	7f 92       	push	r7
    49da:	8f 92       	push	r8
    49dc:	9f 92       	push	r9
    49de:	af 92       	push	r10
    49e0:	bf 92       	push	r11
    49e2:	cf 92       	push	r12
    49e4:	df 92       	push	r13
    49e6:	ef 92       	push	r14
    49e8:	ff 92       	push	r15
    49ea:	0f 93       	push	r16
    49ec:	1f 93       	push	r17
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	cd b7       	in	r28, 0x3d	; 61
    49f4:	de b7       	in	r29, 0x3e	; 62
    49f6:	a0 97       	sbiw	r28, 0x20	; 32
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	69 e2       	ldi	r22, 0x29	; 41
    4a04:	76 e0       	ldi	r23, 0x06	; 6
    4a06:	85 e3       	ldi	r24, 0x35	; 53
    4a08:	96 e0       	ldi	r25, 0x06	; 6
    4a0a:	33 dd       	rcall	.-1434   	; 0x4472 <_upload_message>
    4a0c:	8c dd       	rcall	.-1256   	; 0x4526 <_reply2return_code>
    4a0e:	81 11       	cpse	r24, r1
    4a10:	a3 c0       	rjmp	.+326    	; 0x4b58 <lora_driver_configure_to_eu868+0x18a>
    4a12:	80 e2       	ldi	r24, 0x20	; 32
    4a14:	e5 e2       	ldi	r30, 0x25	; 37
    4a16:	f2 e0       	ldi	r31, 0x02	; 2
    4a18:	de 01       	movw	r26, r28
    4a1a:	11 96       	adiw	r26, 0x01	; 1
    4a1c:	01 90       	ld	r0, Z+
    4a1e:	0d 92       	st	X+, r0
    4a20:	8a 95       	dec	r24
    4a22:	e1 f7       	brne	.-8      	; 0x4a1c <lora_driver_configure_to_eu868+0x4e>
    4a24:	9e 01       	movw	r18, r28
    4a26:	2f 5f       	subi	r18, 0xFF	; 255
    4a28:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2a:	69 01       	movw	r12, r18
    4a2c:	e1 2c       	mov	r14, r1
    4a2e:	f1 2c       	mov	r15, r1
    4a30:	0f 2e       	mov	r0, r31
    4a32:	f1 e4       	ldi	r31, 0x41	; 65
    4a34:	af 2e       	mov	r10, r31
    4a36:	f6 e0       	ldi	r31, 0x06	; 6
    4a38:	bf 2e       	mov	r11, r31
    4a3a:	f0 2d       	mov	r31, r0
    4a3c:	0b ec       	ldi	r16, 0xCB	; 203
    4a3e:	19 e1       	ldi	r17, 0x19	; 25
    4a40:	0f 2e       	mov	r0, r31
    4a42:	fa e5       	ldi	r31, 0x5A	; 90
    4a44:	4f 2e       	mov	r4, r31
    4a46:	f6 e0       	ldi	r31, 0x06	; 6
    4a48:	5f 2e       	mov	r5, r31
    4a4a:	f0 2d       	mov	r31, r0
    4a4c:	0f 2e       	mov	r0, r31
    4a4e:	f1 e7       	ldi	r31, 0x71	; 113
    4a50:	8f 2e       	mov	r8, r31
    4a52:	f6 e0       	ldi	r31, 0x06	; 6
    4a54:	9f 2e       	mov	r9, r31
    4a56:	f0 2d       	mov	r31, r0
    4a58:	0f 2e       	mov	r0, r31
    4a5a:	fb e8       	ldi	r31, 0x8B	; 139
    4a5c:	6f 2e       	mov	r6, r31
    4a5e:	f6 e0       	ldi	r31, 0x06	; 6
    4a60:	7f 2e       	mov	r7, r31
    4a62:	f0 2d       	mov	r31, r0
    4a64:	3e 2c       	mov	r3, r14
    4a66:	2f 2c       	mov	r2, r15
    4a68:	ff 92       	push	r15
    4a6a:	ef 92       	push	r14
    4a6c:	bf 92       	push	r11
    4a6e:	af 92       	push	r10
    4a70:	1f 93       	push	r17
    4a72:	0f 93       	push	r16
    4a74:	0e 94 a7 31 	call	0x634e	; 0x634e <sprintf>
    4a78:	60 e0       	ldi	r22, 0x00	; 0
    4a7a:	70 e0       	ldi	r23, 0x00	; 0
    4a7c:	c8 01       	movw	r24, r16
    4a7e:	f9 dc       	rcall	.-1550   	; 0x4472 <_upload_message>
    4a80:	52 dd       	rcall	.-1372   	; 0x4526 <_reply2return_code>
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	81 11       	cpse	r24, r1
    4a90:	63 c0       	rjmp	.+198    	; 0x4b58 <lora_driver_configure_to_eu868+0x18a>
    4a92:	32 e0       	ldi	r19, 0x02	; 2
    4a94:	3e 15       	cp	r19, r14
    4a96:	e8 f4       	brcc	.+58     	; 0x4ad2 <lora_driver_configure_to_eu868+0x104>
    4a98:	f6 01       	movw	r30, r12
    4a9a:	83 81       	ldd	r24, Z+3	; 0x03
    4a9c:	8f 93       	push	r24
    4a9e:	82 81       	ldd	r24, Z+2	; 0x02
    4aa0:	8f 93       	push	r24
    4aa2:	81 81       	ldd	r24, Z+1	; 0x01
    4aa4:	8f 93       	push	r24
    4aa6:	80 81       	ld	r24, Z
    4aa8:	8f 93       	push	r24
    4aaa:	ff 92       	push	r15
    4aac:	ef 92       	push	r14
    4aae:	5f 92       	push	r5
    4ab0:	4f 92       	push	r4
    4ab2:	1f 93       	push	r17
    4ab4:	0f 93       	push	r16
    4ab6:	0e 94 a7 31 	call	0x634e	; 0x634e <sprintf>
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	c8 01       	movw	r24, r16
    4ac0:	d8 dc       	rcall	.-1616   	; 0x4472 <_upload_message>
    4ac2:	31 dd       	rcall	.-1438   	; 0x4526 <_reply2return_code>
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	de bf       	out	0x3e, r29	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	81 11       	cpse	r24, r1
    4ad0:	43 c0       	rjmp	.+134    	; 0x4b58 <lora_driver_configure_to_eu868+0x18a>
    4ad2:	2f 92       	push	r2
    4ad4:	3f 92       	push	r3
    4ad6:	9f 92       	push	r9
    4ad8:	8f 92       	push	r8
    4ada:	1f 93       	push	r17
    4adc:	0f 93       	push	r16
    4ade:	0e 94 a7 31 	call	0x634e	; 0x634e <sprintf>
    4ae2:	60 e0       	ldi	r22, 0x00	; 0
    4ae4:	70 e0       	ldi	r23, 0x00	; 0
    4ae6:	c8 01       	movw	r24, r16
    4ae8:	c4 dc       	rcall	.-1656   	; 0x4472 <_upload_message>
    4aea:	1d dd       	rcall	.-1478   	; 0x4526 <_reply2return_code>
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
    4af8:	81 11       	cpse	r24, r1
    4afa:	2e c0       	rjmp	.+92     	; 0x4b58 <lora_driver_configure_to_eu868+0x18a>
    4afc:	2f 92       	push	r2
    4afe:	3f 92       	push	r3
    4b00:	7f 92       	push	r7
    4b02:	6f 92       	push	r6
    4b04:	1f 93       	push	r17
    4b06:	0f 93       	push	r16
    4b08:	0e 94 a7 31 	call	0x634e	; 0x634e <sprintf>
    4b0c:	60 e0       	ldi	r22, 0x00	; 0
    4b0e:	70 e0       	ldi	r23, 0x00	; 0
    4b10:	c8 01       	movw	r24, r16
    4b12:	af dc       	rcall	.-1698   	; 0x4472 <_upload_message>
    4b14:	08 dd       	rcall	.-1520   	; 0x4526 <_reply2return_code>
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	81 11       	cpse	r24, r1
    4b24:	19 c0       	rjmp	.+50     	; 0x4b58 <lora_driver_configure_to_eu868+0x18a>
    4b26:	3f ef       	ldi	r19, 0xFF	; 255
    4b28:	e3 1a       	sub	r14, r19
    4b2a:	f3 0a       	sbc	r15, r19
    4b2c:	84 e0       	ldi	r24, 0x04	; 4
    4b2e:	c8 0e       	add	r12, r24
    4b30:	d1 1c       	adc	r13, r1
    4b32:	98 e0       	ldi	r25, 0x08	; 8
    4b34:	e9 16       	cp	r14, r25
    4b36:	f1 04       	cpc	r15, r1
    4b38:	09 f0       	breq	.+2      	; 0x4b3c <lora_driver_configure_to_eu868+0x16e>
    4b3a:	94 cf       	rjmp	.-216    	; 0x4a64 <lora_driver_configure_to_eu868+0x96>
    4b3c:	60 e0       	ldi	r22, 0x00	; 0
    4b3e:	70 e0       	ldi	r23, 0x00	; 0
    4b40:	83 ea       	ldi	r24, 0xA3	; 163
    4b42:	96 e0       	ldi	r25, 0x06	; 6
    4b44:	96 dc       	rcall	.-1748   	; 0x4472 <_upload_message>
    4b46:	ef dc       	rcall	.-1570   	; 0x4526 <_reply2return_code>
    4b48:	81 11       	cpse	r24, r1
    4b4a:	06 c0       	rjmp	.+12     	; 0x4b58 <lora_driver_configure_to_eu868+0x18a>
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	84 eb       	ldi	r24, 0xB4	; 180
    4b52:	96 e0       	ldi	r25, 0x06	; 6
    4b54:	8e dc       	rcall	.-1764   	; 0x4472 <_upload_message>
    4b56:	e7 dc       	rcall	.-1586   	; 0x4526 <_reply2return_code>
    4b58:	a0 96       	adiw	r28, 0x20	; 32
    4b5a:	0f b6       	in	r0, 0x3f	; 63
    4b5c:	f8 94       	cli
    4b5e:	de bf       	out	0x3e, r29	; 62
    4b60:	0f be       	out	0x3f, r0	; 63
    4b62:	cd bf       	out	0x3d, r28	; 61
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	1f 91       	pop	r17
    4b6a:	0f 91       	pop	r16
    4b6c:	ff 90       	pop	r15
    4b6e:	ef 90       	pop	r14
    4b70:	df 90       	pop	r13
    4b72:	cf 90       	pop	r12
    4b74:	bf 90       	pop	r11
    4b76:	af 90       	pop	r10
    4b78:	9f 90       	pop	r9
    4b7a:	8f 90       	pop	r8
    4b7c:	7f 90       	pop	r7
    4b7e:	6f 90       	pop	r6
    4b80:	5f 90       	pop	r5
    4b82:	4f 90       	pop	r4
    4b84:	3f 90       	pop	r3
    4b86:	2f 90       	pop	r2
    4b88:	08 95       	ret

00004b8a <lora_driver_set_otaa_identity>:
    4b8a:	ef 92       	push	r14
    4b8c:	ff 92       	push	r15
    4b8e:	0f 93       	push	r16
    4b90:	1f 93       	push	r17
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	ec 01       	movw	r28, r24
    4b98:	8b 01       	movw	r16, r22
    4b9a:	7a 01       	movw	r14, r20
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	f4 de       	rcall	.-536    	; 0x4988 <lora_driver_set_adaptive_data_rate>
    4ba0:	81 11       	cpse	r24, r1
    4ba2:	0d c0       	rjmp	.+26     	; 0x4bbe <lora_driver_set_otaa_identity+0x34>
    4ba4:	ce 01       	movw	r24, r28
    4ba6:	d4 dd       	rcall	.-1112   	; 0x4750 <lora_driver_set_application_identifier>
    4ba8:	81 11       	cpse	r24, r1
    4baa:	09 c0       	rjmp	.+18     	; 0x4bbe <lora_driver_set_otaa_identity+0x34>
    4bac:	c8 01       	movw	r24, r16
    4bae:	e1 dd       	rcall	.-1086   	; 0x4772 <lora_driver_set_application_key>
    4bb0:	81 11       	cpse	r24, r1
    4bb2:	05 c0       	rjmp	.+10     	; 0x4bbe <lora_driver_set_otaa_identity+0x34>
    4bb4:	c7 01       	movw	r24, r14
    4bb6:	bb dd       	rcall	.-1162   	; 0x472e <lora_driver_set_device_identifier>
    4bb8:	81 11       	cpse	r24, r1
    4bba:	01 c0       	rjmp	.+2      	; 0x4bbe <lora_driver_set_otaa_identity+0x34>
    4bbc:	eb dd       	rcall	.-1066   	; 0x4794 <lora_driver_save_mac>
    4bbe:	df 91       	pop	r29
    4bc0:	cf 91       	pop	r28
    4bc2:	1f 91       	pop	r17
    4bc4:	0f 91       	pop	r16
    4bc6:	ff 90       	pop	r15
    4bc8:	ef 90       	pop	r14
    4bca:	08 95       	ret

00004bcc <lora_driver_map_return_code_to_text>:
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	fc 01       	movw	r30, r24
    4bd0:	ee 0f       	add	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	8e 0f       	add	r24, r30
    4bd6:	9f 1f       	adc	r25, r31
    4bd8:	fc 01       	movw	r30, r24
    4bda:	e3 58       	subi	r30, 0x83	; 131
    4bdc:	f8 4f       	sbci	r31, 0xF8	; 248
    4bde:	81 81       	ldd	r24, Z+1	; 0x01
    4be0:	92 81       	ldd	r25, Z+2	; 0x02
    4be2:	08 95       	ret

00004be4 <decode_port_no>:
    4be4:	dc 01       	movw	r26, r24
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	29 f1       	breq	.+74     	; 0x4c34 <decode_port_no+0x50>
    4bea:	fb 01       	movw	r30, r22
    4bec:	20 81       	ld	r18, Z
    4bee:	fc 01       	movw	r30, r24
    4bf0:	01 90       	ld	r0, Z+
    4bf2:	00 20       	and	r0, r0
    4bf4:	e9 f7       	brne	.-6      	; 0x4bf0 <decode_port_no+0xc>
    4bf6:	31 97       	sbiw	r30, 0x01	; 1
    4bf8:	e8 1b       	sub	r30, r24
    4bfa:	f9 0b       	sbc	r31, r25
    4bfc:	82 2f       	mov	r24, r18
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	e8 17       	cp	r30, r24
    4c02:	f9 07       	cpc	r31, r25
    4c04:	c8 f0       	brcs	.+50     	; 0x4c38 <decode_port_no+0x54>
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	08 c0       	rjmp	.+16     	; 0x4c1a <decode_port_no+0x36>
    4c0a:	88 0f       	add	r24, r24
    4c0c:	38 2f       	mov	r19, r24
    4c0e:	33 0f       	add	r19, r19
    4c10:	33 0f       	add	r19, r19
    4c12:	83 0f       	add	r24, r19
    4c14:	80 53       	subi	r24, 0x30	; 48
    4c16:	89 0f       	add	r24, r25
    4c18:	2f 5f       	subi	r18, 0xFF	; 255
    4c1a:	fd 01       	movw	r30, r26
    4c1c:	e2 0f       	add	r30, r18
    4c1e:	f1 1d       	adc	r31, r1
    4c20:	90 81       	ld	r25, Z
    4c22:	30 ed       	ldi	r19, 0xD0	; 208
    4c24:	39 0f       	add	r19, r25
    4c26:	3a 30       	cpi	r19, 0x0A	; 10
    4c28:	10 f4       	brcc	.+4      	; 0x4c2e <decode_port_no+0x4a>
    4c2a:	91 11       	cpse	r25, r1
    4c2c:	ee cf       	rjmp	.-36     	; 0x4c0a <decode_port_no+0x26>
    4c2e:	fb 01       	movw	r30, r22
    4c30:	20 83       	st	Z, r18
    4c32:	08 95       	ret
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	08 95       	ret
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	08 95       	ret

00004c3c <decode_hexadecimal_string_bytes>:
    4c3c:	0f 93       	push	r16
    4c3e:	1f 93       	push	r17
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
    4c44:	dc 01       	movw	r26, r24
    4c46:	ea 01       	movw	r28, r20
    4c48:	20 97       	sbiw	r28, 0x00	; 0
    4c4a:	e1 f1       	breq	.+120    	; 0x4cc4 <decode_hexadecimal_string_bytes+0x88>
    4c4c:	fa 01       	movw	r30, r20
    4c4e:	01 90       	ld	r0, Z+
    4c50:	00 20       	and	r0, r0
    4c52:	e9 f7       	brne	.-6      	; 0x4c4e <decode_hexadecimal_string_bytes+0x12>
    4c54:	31 97       	sbiw	r30, 0x01	; 1
    4c56:	e4 1b       	sub	r30, r20
    4c58:	f5 0b       	sbc	r31, r21
    4c5a:	32 97       	sbiw	r30, 0x02	; 2
    4c5c:	10 f5       	brcc	.+68     	; 0x4ca2 <decode_hexadecimal_string_bytes+0x66>
    4c5e:	32 c0       	rjmp	.+100    	; 0x4cc4 <decode_hexadecimal_string_bytes+0x88>
    4c60:	8d 01       	movw	r16, r26
    4c62:	04 0f       	add	r16, r20
    4c64:	15 1f       	adc	r17, r21
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	ae 01       	movw	r20, r28
    4c6a:	42 0f       	add	r20, r18
    4c6c:	53 1f       	adc	r21, r19
    4c6e:	fa 01       	movw	r30, r20
    4c70:	90 81       	ld	r25, Z
    4c72:	91 34       	cpi	r25, 0x41	; 65
    4c74:	28 f0       	brcs	.+10     	; 0x4c80 <decode_hexadecimal_string_bytes+0x44>
    4c76:	97 53       	subi	r25, 0x37	; 55
    4c78:	59 2f       	mov	r21, r25
    4c7a:	52 95       	swap	r21
    4c7c:	50 7f       	andi	r21, 0xF0	; 240
    4c7e:	03 c0       	rjmp	.+6      	; 0x4c86 <decode_hexadecimal_string_bytes+0x4a>
    4c80:	59 2f       	mov	r21, r25
    4c82:	52 95       	swap	r21
    4c84:	50 7f       	andi	r21, 0xF0	; 240
    4c86:	2c 0f       	add	r18, r28
    4c88:	3d 1f       	adc	r19, r29
    4c8a:	f9 01       	movw	r30, r18
    4c8c:	91 81       	ldd	r25, Z+1	; 0x01
    4c8e:	91 34       	cpi	r25, 0x41	; 65
    4c90:	10 f0       	brcs	.+4      	; 0x4c96 <decode_hexadecimal_string_bytes+0x5a>
    4c92:	97 53       	subi	r25, 0x37	; 55
    4c94:	01 c0       	rjmp	.+2      	; 0x4c98 <decode_hexadecimal_string_bytes+0x5c>
    4c96:	90 53       	subi	r25, 0x30	; 48
    4c98:	95 0f       	add	r25, r21
    4c9a:	f8 01       	movw	r30, r16
    4c9c:	90 83       	st	Z, r25
    4c9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ca0:	01 c0       	rjmp	.+2      	; 0x4ca4 <decode_hexadecimal_string_bytes+0x68>
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    4ca4:	28 2f       	mov	r18, r24
    4ca6:	22 0f       	add	r18, r18
    4ca8:	48 2f       	mov	r20, r24
    4caa:	50 e0       	ldi	r21, 0x00	; 0
    4cac:	fe 01       	movw	r30, r28
    4cae:	01 90       	ld	r0, Z+
    4cb0:	00 20       	and	r0, r0
    4cb2:	e9 f7       	brne	.-6      	; 0x4cae <decode_hexadecimal_string_bytes+0x72>
    4cb4:	31 97       	sbiw	r30, 0x01	; 1
    4cb6:	ec 1b       	sub	r30, r28
    4cb8:	fd 0b       	sbc	r31, r29
    4cba:	4e 17       	cp	r20, r30
    4cbc:	5f 07       	cpc	r21, r31
    4cbe:	10 f4       	brcc	.+4      	; 0x4cc4 <decode_hexadecimal_string_bytes+0x88>
    4cc0:	86 13       	cpse	r24, r22
    4cc2:	ce cf       	rjmp	.-100    	; 0x4c60 <decode_hexadecimal_string_bytes+0x24>
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	1f 91       	pop	r17
    4cca:	0f 91       	pop	r16
    4ccc:	08 95       	ret

00004cce <reg_read_register>:
    4cce:	fc 01       	movw	r30, r24
    4cd0:	80 81       	ld	r24, Z
    4cd2:	08 95       	ret

00004cd4 <reg_read_bit>:
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	20 81       	ld	r18, Z
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	02 c0       	rjmp	.+4      	; 0x4ce2 <reg_read_bit+0xe>
    4cde:	88 0f       	add	r24, r24
    4ce0:	99 1f       	adc	r25, r25
    4ce2:	6a 95       	dec	r22
    4ce4:	e2 f7       	brpl	.-8      	; 0x4cde <reg_read_bit+0xa>
    4ce6:	82 23       	and	r24, r18
    4ce8:	08 95       	ret

00004cea <reg_read_bits>:
    4cea:	fc 01       	movw	r30, r24
    4cec:	80 81       	ld	r24, Z
    4cee:	86 23       	and	r24, r22
    4cf0:	08 95       	ret

00004cf2 <reg_set_register>:
    4cf2:	fc 01       	movw	r30, r24
    4cf4:	60 83       	st	Z, r22
    4cf6:	08 95       	ret

00004cf8 <reg_clear_register>:
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	10 82       	st	Z, r1
    4cfc:	08 95       	ret

00004cfe <reg_set_bit>:
    4cfe:	fc 01       	movw	r30, r24
    4d00:	40 81       	ld	r20, Z
    4d02:	21 e0       	ldi	r18, 0x01	; 1
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	02 c0       	rjmp	.+4      	; 0x4d0c <reg_set_bit+0xe>
    4d08:	22 0f       	add	r18, r18
    4d0a:	33 1f       	adc	r19, r19
    4d0c:	6a 95       	dec	r22
    4d0e:	e2 f7       	brpl	.-8      	; 0x4d08 <reg_set_bit+0xa>
    4d10:	24 2b       	or	r18, r20
    4d12:	20 83       	st	Z, r18
    4d14:	08 95       	ret

00004d16 <reg_set_bits>:
    4d16:	fc 01       	movw	r30, r24
    4d18:	20 81       	ld	r18, Z
    4d1a:	62 2b       	or	r22, r18
    4d1c:	60 83       	st	Z, r22
    4d1e:	08 95       	ret

00004d20 <reg_toggle_bit>:
    4d20:	fc 01       	movw	r30, r24
    4d22:	40 81       	ld	r20, Z
    4d24:	21 e0       	ldi	r18, 0x01	; 1
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	02 c0       	rjmp	.+4      	; 0x4d2e <reg_toggle_bit+0xe>
    4d2a:	22 0f       	add	r18, r18
    4d2c:	33 1f       	adc	r19, r19
    4d2e:	6a 95       	dec	r22
    4d30:	e2 f7       	brpl	.-8      	; 0x4d2a <reg_toggle_bit+0xa>
    4d32:	24 27       	eor	r18, r20
    4d34:	20 83       	st	Z, r18
    4d36:	08 95       	ret

00004d38 <reg_toggle_bits>:
    4d38:	fc 01       	movw	r30, r24
    4d3a:	20 81       	ld	r18, Z
    4d3c:	62 27       	eor	r22, r18
    4d3e:	60 83       	st	Z, r22
    4d40:	08 95       	ret

00004d42 <reg_clear_bit>:
    4d42:	fc 01       	movw	r30, r24
    4d44:	90 81       	ld	r25, Z
    4d46:	21 e0       	ldi	r18, 0x01	; 1
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <reg_clear_bit+0xe>
    4d4c:	22 0f       	add	r18, r18
    4d4e:	33 1f       	adc	r19, r19
    4d50:	6a 95       	dec	r22
    4d52:	e2 f7       	brpl	.-8      	; 0x4d4c <reg_clear_bit+0xa>
    4d54:	20 95       	com	r18
    4d56:	29 23       	and	r18, r25
    4d58:	20 83       	st	Z, r18
    4d5a:	08 95       	ret

00004d5c <reg_clear_bits>:
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	90 81       	ld	r25, Z
    4d60:	60 95       	com	r22
    4d62:	69 23       	and	r22, r25
    4d64:	60 83       	st	Z, r22
    4d66:	08 95       	ret

00004d68 <_serial_call_back>:
    4d68:	80 91 28 1a 	lds	r24, 0x1A28	; 0x801a28 <crc_sum.1941>
    4d6c:	86 0f       	add	r24, r22
    4d6e:	80 93 28 1a 	sts	0x1A28, r24	; 0x801a28 <crc_sum.1941>
    4d72:	90 91 2b 1a 	lds	r25, 0x1A2B	; 0x801a2b <_mh_state>
    4d76:	91 30       	cpi	r25, 0x01	; 1
    4d78:	79 f0       	breq	.+30     	; 0x4d98 <_serial_call_back+0x30>
    4d7a:	28 f0       	brcs	.+10     	; 0x4d86 <_serial_call_back+0x1e>
    4d7c:	92 30       	cpi	r25, 0x02	; 2
    4d7e:	a9 f0       	breq	.+42     	; 0x4daa <_serial_call_back+0x42>
    4d80:	93 30       	cpi	r25, 0x03	; 3
    4d82:	19 f1       	breq	.+70     	; 0x4dca <_serial_call_back+0x62>
    4d84:	08 95       	ret
    4d86:	6f 3f       	cpi	r22, 0xFF	; 255
    4d88:	09 f0       	breq	.+2      	; 0x4d8c <_serial_call_back+0x24>
    4d8a:	48 c0       	rjmp	.+144    	; 0x4e1c <_serial_call_back+0xb4>
    4d8c:	10 92 28 1a 	sts	0x1A28, r1	; 0x801a28 <crc_sum.1941>
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4d96:	08 95       	ret
    4d98:	66 38       	cpi	r22, 0x86	; 134
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <_serial_call_back+0x36>
    4d9c:	3f c0       	rjmp	.+126    	; 0x4e1c <_serial_call_back+0xb4>
    4d9e:	10 92 27 1a 	sts	0x1A27, r1	; 0x801a27 <inDex.1939>
    4da2:	82 e0       	ldi	r24, 0x02	; 2
    4da4:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4da8:	08 95       	ret
    4daa:	e0 91 27 1a 	lds	r30, 0x1A27	; 0x801a27 <inDex.1939>
    4dae:	81 e0       	ldi	r24, 0x01	; 1
    4db0:	8e 0f       	add	r24, r30
    4db2:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <inDex.1939>
    4db6:	f0 e0       	ldi	r31, 0x00	; 0
    4db8:	eb 5d       	subi	r30, 0xDB	; 219
    4dba:	f5 4e       	sbci	r31, 0xE5	; 229
    4dbc:	60 83       	st	Z, r22
    4dbe:	82 30       	cpi	r24, 0x02	; 2
    4dc0:	69 f5       	brne	.+90     	; 0x4e1c <_serial_call_back+0xb4>
    4dc2:	83 e0       	ldi	r24, 0x03	; 3
    4dc4:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <_mh_state>
    4dc8:	08 95       	ret
    4dca:	90 91 27 1a 	lds	r25, 0x1A27	; 0x801a27 <inDex.1939>
    4dce:	21 e0       	ldi	r18, 0x01	; 1
    4dd0:	29 0f       	add	r18, r25
    4dd2:	20 93 27 1a 	sts	0x1A27, r18	; 0x801a27 <inDex.1939>
    4dd6:	96 30       	cpi	r25, 0x06	; 6
    4dd8:	09 f5       	brne	.+66     	; 0x4e1c <_serial_call_back+0xb4>
    4dda:	81 11       	cpse	r24, r1
    4ddc:	0e c0       	rjmp	.+28     	; 0x4dfa <_serial_call_back+0x92>
    4dde:	e5 e2       	ldi	r30, 0x25	; 37
    4de0:	fa e1       	ldi	r31, 0x1A	; 26
    4de2:	80 81       	ld	r24, Z
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	98 2f       	mov	r25, r24
    4de8:	88 27       	eor	r24, r24
    4dea:	21 81       	ldd	r18, Z+1	; 0x01
    4dec:	82 0f       	add	r24, r18
    4dee:	91 1d       	adc	r25, r1
    4df0:	90 93 2d 1a 	sts	0x1A2D, r25	; 0x801a2d <_ppm+0x1>
    4df4:	80 93 2c 1a 	sts	0x1A2C, r24	; 0x801a2c <_ppm>
    4df8:	04 c0       	rjmp	.+8      	; 0x4e02 <_serial_call_back+0x9a>
    4dfa:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <_ppm+0x1>
    4dfe:	10 92 2c 1a 	sts	0x1A2C, r1	; 0x801a2c <_ppm>
    4e02:	10 92 2b 1a 	sts	0x1A2B, r1	; 0x801a2b <_mh_state>
    4e06:	e0 91 29 1a 	lds	r30, 0x1A29	; 0x801a29 <_app_call_back>
    4e0a:	f0 91 2a 1a 	lds	r31, 0x1A2A	; 0x801a2a <_app_call_back+0x1>
    4e0e:	30 97       	sbiw	r30, 0x00	; 0
    4e10:	29 f0       	breq	.+10     	; 0x4e1c <_serial_call_back+0xb4>
    4e12:	80 91 2c 1a 	lds	r24, 0x1A2C	; 0x801a2c <_ppm>
    4e16:	90 91 2d 1a 	lds	r25, 0x1A2D	; 0x801a2d <_ppm+0x1>
    4e1a:	19 95       	eicall
    4e1c:	08 95       	ret

00004e1e <mh_z19_create>:
    4e1e:	8f 92       	push	r8
    4e20:	9f 92       	push	r9
    4e22:	af 92       	push	r10
    4e24:	cf 92       	push	r12
    4e26:	ef 92       	push	r14
    4e28:	0f 93       	push	r16
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	eb 01       	movw	r28, r22
    4e30:	0f 2e       	mov	r0, r31
    4e32:	f4 eb       	ldi	r31, 0xB4	; 180
    4e34:	8f 2e       	mov	r8, r31
    4e36:	f6 e2       	ldi	r31, 0x26	; 38
    4e38:	9f 2e       	mov	r9, r31
    4e3a:	f0 2d       	mov	r31, r0
    4e3c:	68 94       	set
    4e3e:	aa 24       	eor	r10, r10
    4e40:	a4 f8       	bld	r10, 4
    4e42:	68 94       	set
    4e44:	cc 24       	eor	r12, r12
    4e46:	c4 f8       	bld	r12, 4
    4e48:	e1 2c       	mov	r14, r1
    4e4a:	00 e0       	ldi	r16, 0x00	; 0
    4e4c:	23 e0       	ldi	r18, 0x03	; 3
    4e4e:	40 e8       	ldi	r20, 0x80	; 128
    4e50:	55 e2       	ldi	r21, 0x25	; 37
    4e52:	60 e0       	ldi	r22, 0x00	; 0
    4e54:	70 e0       	ldi	r23, 0x00	; 0
    4e56:	85 d0       	rcall	.+266    	; 0x4f62 <serial_new_instance>
    4e58:	90 93 2f 1a 	sts	0x1A2F, r25	; 0x801a2f <_serial+0x1>
    4e5c:	80 93 2e 1a 	sts	0x1A2E, r24	; 0x801a2e <_serial>
    4e60:	d0 93 2a 1a 	sts	0x1A2A, r29	; 0x801a2a <_app_call_back+0x1>
    4e64:	c0 93 29 1a 	sts	0x1A29, r28	; 0x801a29 <_app_call_back>
    4e68:	df 91       	pop	r29
    4e6a:	cf 91       	pop	r28
    4e6c:	0f 91       	pop	r16
    4e6e:	ef 90       	pop	r14
    4e70:	cf 90       	pop	r12
    4e72:	af 90       	pop	r10
    4e74:	9f 90       	pop	r9
    4e76:	8f 90       	pop	r8
    4e78:	08 95       	ret

00004e7a <mh_z19_take_meassuring>:
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
    4e82:	29 97       	sbiw	r28, 0x09	; 9
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	f8 94       	cli
    4e88:	de bf       	out	0x3e, r29	; 62
    4e8a:	0f be       	out	0x3f, r0	; 63
    4e8c:	cd bf       	out	0x3d, r28	; 61
    4e8e:	89 e0       	ldi	r24, 0x09	; 9
    4e90:	e5 e4       	ldi	r30, 0x45	; 69
    4e92:	f2 e0       	ldi	r31, 0x02	; 2
    4e94:	9e 01       	movw	r18, r28
    4e96:	2f 5f       	subi	r18, 0xFF	; 255
    4e98:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9a:	d9 01       	movw	r26, r18
    4e9c:	01 90       	ld	r0, Z+
    4e9e:	0d 92       	st	X+, r0
    4ea0:	8a 95       	dec	r24
    4ea2:	e1 f7       	brne	.-8      	; 0x4e9c <mh_z19_take_meassuring+0x22>
    4ea4:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <_ppm+0x1>
    4ea8:	10 92 2c 1a 	sts	0x1A2C, r1	; 0x801a2c <_ppm>
    4eac:	80 91 2e 1a 	lds	r24, 0x1A2E	; 0x801a2e <_serial>
    4eb0:	90 91 2f 1a 	lds	r25, 0x1A2F	; 0x801a2f <_serial+0x1>
    4eb4:	00 97       	sbiw	r24, 0x00	; 0
    4eb6:	31 f0       	breq	.+12     	; 0x4ec4 <mh_z19_take_meassuring+0x4a>
    4eb8:	42 2f       	mov	r20, r18
    4eba:	53 2f       	mov	r21, r19
    4ebc:	69 e0       	ldi	r22, 0x09	; 9
    4ebe:	0c d1       	rcall	.+536    	; 0x50d8 <serial_send_bytes>
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	01 c0       	rjmp	.+2      	; 0x4ec6 <mh_z19_take_meassuring+0x4c>
    4ec4:	82 e0       	ldi	r24, 0x02	; 2
    4ec6:	29 96       	adiw	r28, 0x09	; 9
    4ec8:	0f b6       	in	r0, 0x3f	; 63
    4eca:	f8 94       	cli
    4ecc:	de bf       	out	0x3e, r29	; 62
    4ece:	0f be       	out	0x3f, r0	; 63
    4ed0:	cd bf       	out	0x3d, r28	; 61
    4ed2:	df 91       	pop	r29
    4ed4:	cf 91       	pop	r28
    4ed6:	08 95       	ret

00004ed8 <mh_z19_get_co2_ppm>:
    4ed8:	20 91 2c 1a 	lds	r18, 0x1A2C	; 0x801a2c <_ppm>
    4edc:	30 91 2d 1a 	lds	r19, 0x1A2D	; 0x801a2d <_ppm+0x1>
    4ee0:	21 15       	cp	r18, r1
    4ee2:	31 05       	cpc	r19, r1
    4ee4:	29 f4       	brne	.+10     	; 0x4ef0 <mh_z19_get_co2_ppm+0x18>
    4ee6:	fc 01       	movw	r30, r24
    4ee8:	11 82       	std	Z+1, r1	; 0x01
    4eea:	10 82       	st	Z, r1
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	08 95       	ret
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	31 83       	std	Z+1, r19	; 0x01
    4ef4:	20 83       	st	Z, r18
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	08 95       	ret

00004efa <rcServoSet>:
    4efa:	65 36       	cpi	r22, 0x65	; 101
    4efc:	0c f0       	brlt	.+2      	; 0x4f00 <rcServoSet+0x6>
    4efe:	64 e6       	ldi	r22, 0x64	; 100
    4f00:	6c 39       	cpi	r22, 0x9C	; 156
    4f02:	0c f4       	brge	.+2      	; 0x4f06 <rcServoSet+0xc>
    4f04:	6c e9       	ldi	r22, 0x9C	; 156
    4f06:	96 ef       	ldi	r25, 0xF6	; 246
    4f08:	69 02       	muls	r22, r25
    4f0a:	b0 01       	movw	r22, r0
    4f0c:	11 24       	eor	r1, r1
    4f0e:	68 54       	subi	r22, 0x48	; 72
    4f10:	74 4f       	sbci	r23, 0xF4	; 244
    4f12:	81 11       	cpse	r24, r1
    4f14:	05 c0       	rjmp	.+10     	; 0x4f20 <rcServoSet+0x26>
    4f16:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4f1a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4f1e:	08 95       	ret
    4f20:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4f24:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4f28:	08 95       	ret

00004f2a <rcServoCreate>:
    4f2a:	ea e0       	ldi	r30, 0x0A	; 10
    4f2c:	f1 e0       	ldi	r31, 0x01	; 1
    4f2e:	80 81       	ld	r24, Z
    4f30:	88 61       	ori	r24, 0x18	; 24
    4f32:	80 83       	st	Z, r24
    4f34:	8f e3       	ldi	r24, 0x3F	; 63
    4f36:	9c e9       	ldi	r25, 0x9C	; 156
    4f38:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4f3c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4f40:	60 e0       	ldi	r22, 0x00	; 0
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	da df       	rcall	.-76     	; 0x4efa <rcServoSet>
    4f46:	60 e0       	ldi	r22, 0x00	; 0
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	d7 df       	rcall	.-82     	; 0x4efa <rcServoSet>
    4f4c:	e0 e2       	ldi	r30, 0x20	; 32
    4f4e:	f1 e0       	ldi	r31, 0x01	; 1
    4f50:	80 81       	ld	r24, Z
    4f52:	82 6a       	ori	r24, 0xA2	; 162
    4f54:	80 83       	st	Z, r24
    4f56:	e1 e2       	ldi	r30, 0x21	; 33
    4f58:	f1 e0       	ldi	r31, 0x01	; 1
    4f5a:	80 81       	ld	r24, Z
    4f5c:	8a 61       	ori	r24, 0x1A	; 26
    4f5e:	80 83       	st	Z, r24
    4f60:	08 95       	ret

00004f62 <serial_new_instance>:
    4f62:	2f 92       	push	r2
    4f64:	3f 92       	push	r3
    4f66:	4f 92       	push	r4
    4f68:	5f 92       	push	r5
    4f6a:	6f 92       	push	r6
    4f6c:	7f 92       	push	r7
    4f6e:	8f 92       	push	r8
    4f70:	9f 92       	push	r9
    4f72:	af 92       	push	r10
    4f74:	cf 92       	push	r12
    4f76:	ef 92       	push	r14
    4f78:	ff 92       	push	r15
    4f7a:	0f 93       	push	r16
    4f7c:	1f 93       	push	r17
    4f7e:	cf 93       	push	r28
    4f80:	df 93       	push	r29
    4f82:	cd b7       	in	r28, 0x3d	; 61
    4f84:	de b7       	in	r29, 0x3e	; 62
    4f86:	f8 2e       	mov	r15, r24
    4f88:	2a 01       	movw	r4, r20
    4f8a:	3b 01       	movw	r6, r22
    4f8c:	88 e0       	ldi	r24, 0x08	; 8
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	c2 d7       	rcall	.+3972   	; 0x5f16 <malloc>
    4f92:	8c 01       	movw	r16, r24
    4f94:	8f 2d       	mov	r24, r15
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	88 0f       	add	r24, r24
    4f9a:	99 1f       	adc	r25, r25
    4f9c:	fc 01       	movw	r30, r24
    4f9e:	e0 5d       	subi	r30, 0xD0	; 208
    4fa0:	f5 4e       	sbci	r31, 0xE5	; 229
    4fa2:	11 83       	std	Z+1, r17	; 0x01
    4fa4:	00 83       	st	Z, r16
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	e2 5f       	subi	r30, 0xF2	; 242
    4faa:	fd 4f       	sbci	r31, 0xFD	; 253
    4fac:	80 81       	ld	r24, Z
    4fae:	91 81       	ldd	r25, Z+1	; 0x01
    4fb0:	d8 01       	movw	r26, r16
    4fb2:	8d 93       	st	X+, r24
    4fb4:	9c 93       	st	X, r25
    4fb6:	6c 2d       	mov	r22, r12
    4fb8:	70 e0       	ldi	r23, 0x00	; 0
    4fba:	84 e0       	ldi	r24, 0x04	; 4
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	91 d7       	rcall	.+3874   	; 0x5ee2 <calloc>
    4fc0:	1c 01       	movw	r2, r24
    4fc2:	61 e0       	ldi	r22, 0x01	; 1
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	86 e0       	ldi	r24, 0x06	; 6
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	8b d7       	rcall	.+3862   	; 0x5ee2 <calloc>
    4fcc:	7c 01       	movw	r14, r24
    4fce:	4c 2d       	mov	r20, r12
    4fd0:	b1 01       	movw	r22, r2
    4fd2:	2b d5       	rcall	.+2646   	; 0x5a2a <fifo_init>
    4fd4:	f8 01       	movw	r30, r16
    4fd6:	f5 82       	std	Z+5, r15	; 0x05
    4fd8:	e4 82       	std	Z+4, r14	; 0x04
    4fda:	6a 2d       	mov	r22, r10
    4fdc:	70 e0       	ldi	r23, 0x00	; 0
    4fde:	84 e0       	ldi	r24, 0x04	; 4
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	7f d7       	rcall	.+3838   	; 0x5ee2 <calloc>
    4fe4:	1c 01       	movw	r2, r24
    4fe6:	61 e0       	ldi	r22, 0x01	; 1
    4fe8:	70 e0       	ldi	r23, 0x00	; 0
    4fea:	86 e0       	ldi	r24, 0x06	; 6
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	79 d7       	rcall	.+3826   	; 0x5ee2 <calloc>
    4ff0:	7c 01       	movw	r14, r24
    4ff2:	4a 2d       	mov	r20, r10
    4ff4:	b1 01       	movw	r22, r2
    4ff6:	19 d5       	rcall	.+2610   	; 0x5a2a <fifo_init>
    4ff8:	d8 01       	movw	r26, r16
    4ffa:	13 96       	adiw	r26, 0x03	; 3
    4ffc:	fc 92       	st	X, r15
    4ffe:	ee 92       	st	-X, r14
    5000:	12 97       	sbiw	r26, 0x02	; 2
    5002:	17 96       	adiw	r26, 0x07	; 7
    5004:	9c 92       	st	X, r9
    5006:	8e 92       	st	-X, r8
    5008:	16 97       	sbiw	r26, 0x06	; 6
    500a:	ff b6       	in	r15, 0x3f	; 63
    500c:	f8 94       	cli
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	11 97       	sbiw	r26, 0x01	; 1
    5014:	36 97       	sbiw	r30, 0x06	; 6
    5016:	80 81       	ld	r24, Z
    5018:	82 60       	ori	r24, 0x02	; 2
    501a:	80 83       	st	Z, r24
    501c:	8d 90       	ld	r8, X+
    501e:	9c 90       	ld	r9, X
    5020:	c3 01       	movw	r24, r6
    5022:	b2 01       	movw	r22, r4
    5024:	1c d6       	rcall	.+3128   	; 0x5c5e <__floatunsisf>
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	40 e0       	ldi	r20, 0x00	; 0
    502c:	51 e4       	ldi	r21, 0x41	; 65
    502e:	a5 d6       	rcall	.+3402   	; 0x5d7a <__mulsf3>
    5030:	9b 01       	movw	r18, r22
    5032:	ac 01       	movw	r20, r24
    5034:	60 e0       	ldi	r22, 0x00	; 0
    5036:	74 e2       	ldi	r23, 0x24	; 36
    5038:	84 e7       	ldi	r24, 0x74	; 116
    503a:	9b e4       	ldi	r25, 0x4B	; 75
    503c:	77 d5       	rcall	.+2798   	; 0x5b2c <__divsf3>
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e8       	ldi	r20, 0x80	; 128
    5044:	5f e3       	ldi	r21, 0x3F	; 63
    5046:	0d d5       	rcall	.+2586   	; 0x5a62 <__subsf3>
    5048:	de d5       	rcall	.+3004   	; 0x5c06 <__fixunssfsi>
    504a:	f4 01       	movw	r30, r8
    504c:	32 97       	sbiw	r30, 0x02	; 2
    504e:	60 83       	st	Z, r22
    5050:	d8 01       	movw	r26, r16
    5052:	ed 91       	ld	r30, X+
    5054:	fc 91       	ld	r31, X
    5056:	11 97       	sbiw	r26, 0x01	; 1
    5058:	35 97       	sbiw	r30, 0x05	; 5
    505a:	88 e9       	ldi	r24, 0x98	; 152
    505c:	80 83       	st	Z, r24
    505e:	ed 91       	ld	r30, X+
    5060:	fc 91       	ld	r31, X
    5062:	34 97       	sbiw	r30, 0x04	; 4
    5064:	86 e0       	ldi	r24, 0x06	; 6
    5066:	80 83       	st	Z, r24
    5068:	ff be       	out	0x3f, r15	; 63
    506a:	c8 01       	movw	r24, r16
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	1f 91       	pop	r17
    5072:	0f 91       	pop	r16
    5074:	ff 90       	pop	r15
    5076:	ef 90       	pop	r14
    5078:	cf 90       	pop	r12
    507a:	af 90       	pop	r10
    507c:	9f 90       	pop	r9
    507e:	8f 90       	pop	r8
    5080:	7f 90       	pop	r7
    5082:	6f 90       	pop	r6
    5084:	5f 90       	pop	r5
    5086:	4f 90       	pop	r4
    5088:	3f 90       	pop	r3
    508a:	2f 90       	pop	r2
    508c:	08 95       	ret

0000508e <serial_send_byte>:
    508e:	cf 93       	push	r28
    5090:	df 93       	push	r29
    5092:	ec 01       	movw	r28, r24
    5094:	ea 81       	ldd	r30, Y+2	; 0x02
    5096:	fb 81       	ldd	r31, Y+3	; 0x03
    5098:	93 81       	ldd	r25, Z+3	; 0x03
    509a:	82 81       	ldd	r24, Z+2	; 0x02
    509c:	25 81       	ldd	r18, Z+5	; 0x05
    509e:	98 1b       	sub	r25, r24
    50a0:	92 23       	and	r25, r18
    50a2:	84 81       	ldd	r24, Z+4	; 0x04
    50a4:	98 17       	cp	r25, r24
    50a6:	a1 f0       	breq	.+40     	; 0x50d0 <serial_send_byte+0x42>
    50a8:	93 81       	ldd	r25, Z+3	; 0x03
    50aa:	26 95       	lsr	r18
    50ac:	29 23       	and	r18, r25
    50ae:	a0 81       	ld	r26, Z
    50b0:	b1 81       	ldd	r27, Z+1	; 0x01
    50b2:	a2 0f       	add	r26, r18
    50b4:	b1 1d       	adc	r27, r1
    50b6:	6c 93       	st	X, r22
    50b8:	9f 5f       	subi	r25, 0xFF	; 255
    50ba:	25 81       	ldd	r18, Z+5	; 0x05
    50bc:	92 23       	and	r25, r18
    50be:	93 83       	std	Z+3, r25	; 0x03
    50c0:	e8 81       	ld	r30, Y
    50c2:	f9 81       	ldd	r31, Y+1	; 0x01
    50c4:	35 97       	sbiw	r30, 0x05	; 5
    50c6:	80 81       	ld	r24, Z
    50c8:	80 62       	ori	r24, 0x20	; 32
    50ca:	80 83       	st	Z, r24
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	01 c0       	rjmp	.+2      	; 0x50d2 <serial_send_byte+0x44>
    50d0:	82 e0       	ldi	r24, 0x02	; 2
    50d2:	df 91       	pop	r29
    50d4:	cf 91       	pop	r28
    50d6:	08 95       	ret

000050d8 <serial_send_bytes>:
    50d8:	ef 92       	push	r14
    50da:	ff 92       	push	r15
    50dc:	0f 93       	push	r16
    50de:	1f 93       	push	r17
    50e0:	cf 93       	push	r28
    50e2:	df 93       	push	r29
    50e4:	7c 01       	movw	r14, r24
    50e6:	dc 01       	movw	r26, r24
    50e8:	12 96       	adiw	r26, 0x02	; 2
    50ea:	ed 91       	ld	r30, X+
    50ec:	fc 91       	ld	r31, X
    50ee:	13 97       	sbiw	r26, 0x03	; 3
    50f0:	93 81       	ldd	r25, Z+3	; 0x03
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	98 1b       	sub	r25, r24
    50f6:	85 81       	ldd	r24, Z+5	; 0x05
    50f8:	98 23       	and	r25, r24
    50fa:	84 81       	ldd	r24, Z+4	; 0x04
    50fc:	89 1b       	sub	r24, r25
    50fe:	86 17       	cp	r24, r22
    5100:	98 f1       	brcs	.+102    	; 0x5168 <serial_send_bytes+0x90>
    5102:	66 23       	and	r22, r22
    5104:	41 f1       	breq	.+80     	; 0x5156 <serial_send_bytes+0x7e>
    5106:	84 2f       	mov	r24, r20
    5108:	95 2f       	mov	r25, r21
    510a:	dc 01       	movw	r26, r24
    510c:	61 50       	subi	r22, 0x01	; 1
    510e:	46 2f       	mov	r20, r22
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	4f 5f       	subi	r20, 0xFF	; 255
    5114:	5f 4f       	sbci	r21, 0xFF	; 255
    5116:	48 0f       	add	r20, r24
    5118:	59 1f       	adc	r21, r25
    511a:	e7 01       	movw	r28, r14
    511c:	ea 81       	ldd	r30, Y+2	; 0x02
    511e:	fb 81       	ldd	r31, Y+3	; 0x03
    5120:	93 81       	ldd	r25, Z+3	; 0x03
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	25 81       	ldd	r18, Z+5	; 0x05
    5126:	98 1b       	sub	r25, r24
    5128:	92 23       	and	r25, r18
    512a:	84 81       	ldd	r24, Z+4	; 0x04
    512c:	98 17       	cp	r25, r24
    512e:	79 f0       	breq	.+30     	; 0x514e <serial_send_bytes+0x76>
    5130:	8c 91       	ld	r24, X
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	26 95       	lsr	r18
    5136:	29 23       	and	r18, r25
    5138:	60 81       	ld	r22, Z
    513a:	71 81       	ldd	r23, Z+1	; 0x01
    513c:	8b 01       	movw	r16, r22
    513e:	02 0f       	add	r16, r18
    5140:	11 1d       	adc	r17, r1
    5142:	e8 01       	movw	r28, r16
    5144:	88 83       	st	Y, r24
    5146:	9f 5f       	subi	r25, 0xFF	; 255
    5148:	85 81       	ldd	r24, Z+5	; 0x05
    514a:	98 23       	and	r25, r24
    514c:	93 83       	std	Z+3, r25	; 0x03
    514e:	11 96       	adiw	r26, 0x01	; 1
    5150:	a4 17       	cp	r26, r20
    5152:	b5 07       	cpc	r27, r21
    5154:	11 f7       	brne	.-60     	; 0x511a <serial_send_bytes+0x42>
    5156:	d7 01       	movw	r26, r14
    5158:	ed 91       	ld	r30, X+
    515a:	fc 91       	ld	r31, X
    515c:	35 97       	sbiw	r30, 0x05	; 5
    515e:	80 81       	ld	r24, Z
    5160:	80 62       	ori	r24, 0x20	; 32
    5162:	80 83       	st	Z, r24
    5164:	80 e0       	ldi	r24, 0x00	; 0
    5166:	01 c0       	rjmp	.+2      	; 0x516a <serial_send_bytes+0x92>
    5168:	82 e0       	ldi	r24, 0x02	; 2
    516a:	df 91       	pop	r29
    516c:	cf 91       	pop	r28
    516e:	1f 91       	pop	r17
    5170:	0f 91       	pop	r16
    5172:	ff 90       	pop	r15
    5174:	ef 90       	pop	r14
    5176:	08 95       	ret

00005178 <serial_get_byte>:
    5178:	dc 01       	movw	r26, r24
    517a:	14 96       	adiw	r26, 0x04	; 4
    517c:	ed 91       	ld	r30, X+
    517e:	fc 91       	ld	r31, X
    5180:	15 97       	sbiw	r26, 0x05	; 5
    5182:	93 81       	ldd	r25, Z+3	; 0x03
    5184:	82 81       	ldd	r24, Z+2	; 0x02
    5186:	98 17       	cp	r25, r24
    5188:	89 f0       	breq	.+34     	; 0x51ac <serial_get_byte+0x34>
    518a:	92 81       	ldd	r25, Z+2	; 0x02
    518c:	85 81       	ldd	r24, Z+5	; 0x05
    518e:	86 95       	lsr	r24
    5190:	89 23       	and	r24, r25
    5192:	a0 81       	ld	r26, Z
    5194:	b1 81       	ldd	r27, Z+1	; 0x01
    5196:	a8 0f       	add	r26, r24
    5198:	b1 1d       	adc	r27, r1
    519a:	8c 91       	ld	r24, X
    519c:	db 01       	movw	r26, r22
    519e:	8c 93       	st	X, r24
    51a0:	9f 5f       	subi	r25, 0xFF	; 255
    51a2:	85 81       	ldd	r24, Z+5	; 0x05
    51a4:	98 23       	and	r25, r24
    51a6:	92 83       	std	Z+2, r25	; 0x02
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	08 95       	ret
    51ac:	83 e0       	ldi	r24, 0x03	; 3
    51ae:	08 95       	ret

000051b0 <__vector_25>:
    51b0:	1f 92       	push	r1
    51b2:	0f 92       	push	r0
    51b4:	0f b6       	in	r0, 0x3f	; 63
    51b6:	0f 92       	push	r0
    51b8:	11 24       	eor	r1, r1
    51ba:	0b b6       	in	r0, 0x3b	; 59
    51bc:	0f 92       	push	r0
    51be:	2f 93       	push	r18
    51c0:	3f 93       	push	r19
    51c2:	4f 93       	push	r20
    51c4:	5f 93       	push	r21
    51c6:	6f 93       	push	r22
    51c8:	7f 93       	push	r23
    51ca:	8f 93       	push	r24
    51cc:	9f 93       	push	r25
    51ce:	af 93       	push	r26
    51d0:	bf 93       	push	r27
    51d2:	cf 93       	push	r28
    51d4:	df 93       	push	r29
    51d6:	ef 93       	push	r30
    51d8:	ff 93       	push	r31
    51da:	a0 91 30 1a 	lds	r26, 0x1A30	; 0x801a30 <_ser_handle>
    51de:	b0 91 31 1a 	lds	r27, 0x1A31	; 0x801a31 <_ser_handle+0x1>
    51e2:	10 97       	sbiw	r26, 0x00	; 0
    51e4:	11 f1       	breq	.+68     	; 0x522a <__vector_25+0x7a>
    51e6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    51ea:	14 96       	adiw	r26, 0x04	; 4
    51ec:	ed 91       	ld	r30, X+
    51ee:	fc 91       	ld	r31, X
    51f0:	15 97       	sbiw	r26, 0x05	; 5
    51f2:	93 81       	ldd	r25, Z+3	; 0x03
    51f4:	82 81       	ldd	r24, Z+2	; 0x02
    51f6:	25 81       	ldd	r18, Z+5	; 0x05
    51f8:	98 1b       	sub	r25, r24
    51fa:	92 23       	and	r25, r18
    51fc:	84 81       	ldd	r24, Z+4	; 0x04
    51fe:	98 17       	cp	r25, r24
    5200:	61 f0       	breq	.+24     	; 0x521a <__vector_25+0x6a>
    5202:	83 81       	ldd	r24, Z+3	; 0x03
    5204:	26 95       	lsr	r18
    5206:	28 23       	and	r18, r24
    5208:	c0 81       	ld	r28, Z
    520a:	d1 81       	ldd	r29, Z+1	; 0x01
    520c:	c2 0f       	add	r28, r18
    520e:	d1 1d       	adc	r29, r1
    5210:	68 83       	st	Y, r22
    5212:	8f 5f       	subi	r24, 0xFF	; 255
    5214:	95 81       	ldd	r25, Z+5	; 0x05
    5216:	89 23       	and	r24, r25
    5218:	83 83       	std	Z+3, r24	; 0x03
    521a:	16 96       	adiw	r26, 0x06	; 6
    521c:	ed 91       	ld	r30, X+
    521e:	fc 91       	ld	r31, X
    5220:	17 97       	sbiw	r26, 0x07	; 7
    5222:	30 97       	sbiw	r30, 0x00	; 0
    5224:	11 f0       	breq	.+4      	; 0x522a <__vector_25+0x7a>
    5226:	cd 01       	movw	r24, r26
    5228:	19 95       	eicall
    522a:	ff 91       	pop	r31
    522c:	ef 91       	pop	r30
    522e:	df 91       	pop	r29
    5230:	cf 91       	pop	r28
    5232:	bf 91       	pop	r27
    5234:	af 91       	pop	r26
    5236:	9f 91       	pop	r25
    5238:	8f 91       	pop	r24
    523a:	7f 91       	pop	r23
    523c:	6f 91       	pop	r22
    523e:	5f 91       	pop	r21
    5240:	4f 91       	pop	r20
    5242:	3f 91       	pop	r19
    5244:	2f 91       	pop	r18
    5246:	0f 90       	pop	r0
    5248:	0b be       	out	0x3b, r0	; 59
    524a:	0f 90       	pop	r0
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	0f 90       	pop	r0
    5250:	1f 90       	pop	r1
    5252:	18 95       	reti

00005254 <__vector_26>:
    5254:	1f 92       	push	r1
    5256:	0f 92       	push	r0
    5258:	0f b6       	in	r0, 0x3f	; 63
    525a:	0f 92       	push	r0
    525c:	11 24       	eor	r1, r1
    525e:	0b b6       	in	r0, 0x3b	; 59
    5260:	0f 92       	push	r0
    5262:	2f 93       	push	r18
    5264:	8f 93       	push	r24
    5266:	9f 93       	push	r25
    5268:	af 93       	push	r26
    526a:	bf 93       	push	r27
    526c:	ef 93       	push	r30
    526e:	ff 93       	push	r31
    5270:	e0 91 30 1a 	lds	r30, 0x1A30	; 0x801a30 <_ser_handle>
    5274:	f0 91 31 1a 	lds	r31, 0x1A31	; 0x801a31 <_ser_handle+0x1>
    5278:	30 97       	sbiw	r30, 0x00	; 0
    527a:	b9 f0       	breq	.+46     	; 0x52aa <__vector_26+0x56>
    527c:	02 80       	ldd	r0, Z+2	; 0x02
    527e:	f3 81       	ldd	r31, Z+3	; 0x03
    5280:	e0 2d       	mov	r30, r0
    5282:	93 81       	ldd	r25, Z+3	; 0x03
    5284:	82 81       	ldd	r24, Z+2	; 0x02
    5286:	98 17       	cp	r25, r24
    5288:	b1 f0       	breq	.+44     	; 0x52b6 <__vector_26+0x62>
    528a:	92 81       	ldd	r25, Z+2	; 0x02
    528c:	85 81       	ldd	r24, Z+5	; 0x05
    528e:	28 2f       	mov	r18, r24
    5290:	26 95       	lsr	r18
    5292:	29 23       	and	r18, r25
    5294:	a0 81       	ld	r26, Z
    5296:	b1 81       	ldd	r27, Z+1	; 0x01
    5298:	a2 0f       	add	r26, r18
    529a:	b1 1d       	adc	r27, r1
    529c:	2c 91       	ld	r18, X
    529e:	9f 5f       	subi	r25, 0xFF	; 255
    52a0:	89 23       	and	r24, r25
    52a2:	82 83       	std	Z+2, r24	; 0x02
    52a4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52a8:	0b c0       	rjmp	.+22     	; 0x52c0 <__vector_26+0x6c>
    52aa:	e1 ec       	ldi	r30, 0xC1	; 193
    52ac:	f0 e0       	ldi	r31, 0x00	; 0
    52ae:	80 81       	ld	r24, Z
    52b0:	8f 7d       	andi	r24, 0xDF	; 223
    52b2:	80 83       	st	Z, r24
    52b4:	05 c0       	rjmp	.+10     	; 0x52c0 <__vector_26+0x6c>
    52b6:	e1 ec       	ldi	r30, 0xC1	; 193
    52b8:	f0 e0       	ldi	r31, 0x00	; 0
    52ba:	80 81       	ld	r24, Z
    52bc:	8f 7d       	andi	r24, 0xDF	; 223
    52be:	80 83       	st	Z, r24
    52c0:	ff 91       	pop	r31
    52c2:	ef 91       	pop	r30
    52c4:	bf 91       	pop	r27
    52c6:	af 91       	pop	r26
    52c8:	9f 91       	pop	r25
    52ca:	8f 91       	pop	r24
    52cc:	2f 91       	pop	r18
    52ce:	0f 90       	pop	r0
    52d0:	0b be       	out	0x3b, r0	; 59
    52d2:	0f 90       	pop	r0
    52d4:	0f be       	out	0x3f, r0	; 63
    52d6:	0f 90       	pop	r0
    52d8:	1f 90       	pop	r1
    52da:	18 95       	reti

000052dc <__vector_36>:
    52dc:	1f 92       	push	r1
    52de:	0f 92       	push	r0
    52e0:	0f b6       	in	r0, 0x3f	; 63
    52e2:	0f 92       	push	r0
    52e4:	11 24       	eor	r1, r1
    52e6:	0b b6       	in	r0, 0x3b	; 59
    52e8:	0f 92       	push	r0
    52ea:	2f 93       	push	r18
    52ec:	3f 93       	push	r19
    52ee:	4f 93       	push	r20
    52f0:	5f 93       	push	r21
    52f2:	6f 93       	push	r22
    52f4:	7f 93       	push	r23
    52f6:	8f 93       	push	r24
    52f8:	9f 93       	push	r25
    52fa:	af 93       	push	r26
    52fc:	bf 93       	push	r27
    52fe:	cf 93       	push	r28
    5300:	df 93       	push	r29
    5302:	ef 93       	push	r30
    5304:	ff 93       	push	r31
    5306:	a0 91 32 1a 	lds	r26, 0x1A32	; 0x801a32 <_ser_handle+0x2>
    530a:	b0 91 33 1a 	lds	r27, 0x1A33	; 0x801a33 <_ser_handle+0x3>
    530e:	10 97       	sbiw	r26, 0x00	; 0
    5310:	11 f1       	breq	.+68     	; 0x5356 <__vector_36+0x7a>
    5312:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5316:	14 96       	adiw	r26, 0x04	; 4
    5318:	ed 91       	ld	r30, X+
    531a:	fc 91       	ld	r31, X
    531c:	15 97       	sbiw	r26, 0x05	; 5
    531e:	93 81       	ldd	r25, Z+3	; 0x03
    5320:	82 81       	ldd	r24, Z+2	; 0x02
    5322:	25 81       	ldd	r18, Z+5	; 0x05
    5324:	98 1b       	sub	r25, r24
    5326:	92 23       	and	r25, r18
    5328:	84 81       	ldd	r24, Z+4	; 0x04
    532a:	98 17       	cp	r25, r24
    532c:	61 f0       	breq	.+24     	; 0x5346 <__vector_36+0x6a>
    532e:	83 81       	ldd	r24, Z+3	; 0x03
    5330:	26 95       	lsr	r18
    5332:	28 23       	and	r18, r24
    5334:	c0 81       	ld	r28, Z
    5336:	d1 81       	ldd	r29, Z+1	; 0x01
    5338:	c2 0f       	add	r28, r18
    533a:	d1 1d       	adc	r29, r1
    533c:	68 83       	st	Y, r22
    533e:	8f 5f       	subi	r24, 0xFF	; 255
    5340:	95 81       	ldd	r25, Z+5	; 0x05
    5342:	89 23       	and	r24, r25
    5344:	83 83       	std	Z+3, r24	; 0x03
    5346:	16 96       	adiw	r26, 0x06	; 6
    5348:	ed 91       	ld	r30, X+
    534a:	fc 91       	ld	r31, X
    534c:	17 97       	sbiw	r26, 0x07	; 7
    534e:	30 97       	sbiw	r30, 0x00	; 0
    5350:	11 f0       	breq	.+4      	; 0x5356 <__vector_36+0x7a>
    5352:	cd 01       	movw	r24, r26
    5354:	19 95       	eicall
    5356:	ff 91       	pop	r31
    5358:	ef 91       	pop	r30
    535a:	df 91       	pop	r29
    535c:	cf 91       	pop	r28
    535e:	bf 91       	pop	r27
    5360:	af 91       	pop	r26
    5362:	9f 91       	pop	r25
    5364:	8f 91       	pop	r24
    5366:	7f 91       	pop	r23
    5368:	6f 91       	pop	r22
    536a:	5f 91       	pop	r21
    536c:	4f 91       	pop	r20
    536e:	3f 91       	pop	r19
    5370:	2f 91       	pop	r18
    5372:	0f 90       	pop	r0
    5374:	0b be       	out	0x3b, r0	; 59
    5376:	0f 90       	pop	r0
    5378:	0f be       	out	0x3f, r0	; 63
    537a:	0f 90       	pop	r0
    537c:	1f 90       	pop	r1
    537e:	18 95       	reti

00005380 <__vector_37>:
    5380:	1f 92       	push	r1
    5382:	0f 92       	push	r0
    5384:	0f b6       	in	r0, 0x3f	; 63
    5386:	0f 92       	push	r0
    5388:	11 24       	eor	r1, r1
    538a:	0b b6       	in	r0, 0x3b	; 59
    538c:	0f 92       	push	r0
    538e:	2f 93       	push	r18
    5390:	8f 93       	push	r24
    5392:	9f 93       	push	r25
    5394:	af 93       	push	r26
    5396:	bf 93       	push	r27
    5398:	ef 93       	push	r30
    539a:	ff 93       	push	r31
    539c:	e0 91 32 1a 	lds	r30, 0x1A32	; 0x801a32 <_ser_handle+0x2>
    53a0:	f0 91 33 1a 	lds	r31, 0x1A33	; 0x801a33 <_ser_handle+0x3>
    53a4:	30 97       	sbiw	r30, 0x00	; 0
    53a6:	b9 f0       	breq	.+46     	; 0x53d6 <__vector_37+0x56>
    53a8:	02 80       	ldd	r0, Z+2	; 0x02
    53aa:	f3 81       	ldd	r31, Z+3	; 0x03
    53ac:	e0 2d       	mov	r30, r0
    53ae:	93 81       	ldd	r25, Z+3	; 0x03
    53b0:	82 81       	ldd	r24, Z+2	; 0x02
    53b2:	98 17       	cp	r25, r24
    53b4:	b1 f0       	breq	.+44     	; 0x53e2 <__vector_37+0x62>
    53b6:	92 81       	ldd	r25, Z+2	; 0x02
    53b8:	85 81       	ldd	r24, Z+5	; 0x05
    53ba:	28 2f       	mov	r18, r24
    53bc:	26 95       	lsr	r18
    53be:	29 23       	and	r18, r25
    53c0:	a0 81       	ld	r26, Z
    53c2:	b1 81       	ldd	r27, Z+1	; 0x01
    53c4:	a2 0f       	add	r26, r18
    53c6:	b1 1d       	adc	r27, r1
    53c8:	2c 91       	ld	r18, X
    53ca:	9f 5f       	subi	r25, 0xFF	; 255
    53cc:	89 23       	and	r24, r25
    53ce:	82 83       	std	Z+2, r24	; 0x02
    53d0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53d4:	0b c0       	rjmp	.+22     	; 0x53ec <__vector_37+0x6c>
    53d6:	e9 ec       	ldi	r30, 0xC9	; 201
    53d8:	f0 e0       	ldi	r31, 0x00	; 0
    53da:	80 81       	ld	r24, Z
    53dc:	8f 7d       	andi	r24, 0xDF	; 223
    53de:	80 83       	st	Z, r24
    53e0:	05 c0       	rjmp	.+10     	; 0x53ec <__vector_37+0x6c>
    53e2:	e9 ec       	ldi	r30, 0xC9	; 201
    53e4:	f0 e0       	ldi	r31, 0x00	; 0
    53e6:	80 81       	ld	r24, Z
    53e8:	8f 7d       	andi	r24, 0xDF	; 223
    53ea:	80 83       	st	Z, r24
    53ec:	ff 91       	pop	r31
    53ee:	ef 91       	pop	r30
    53f0:	bf 91       	pop	r27
    53f2:	af 91       	pop	r26
    53f4:	9f 91       	pop	r25
    53f6:	8f 91       	pop	r24
    53f8:	2f 91       	pop	r18
    53fa:	0f 90       	pop	r0
    53fc:	0b be       	out	0x3b, r0	; 59
    53fe:	0f 90       	pop	r0
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	0f 90       	pop	r0
    5404:	1f 90       	pop	r1
    5406:	18 95       	reti

00005408 <__vector_51>:
    5408:	1f 92       	push	r1
    540a:	0f 92       	push	r0
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	0f 92       	push	r0
    5410:	11 24       	eor	r1, r1
    5412:	0b b6       	in	r0, 0x3b	; 59
    5414:	0f 92       	push	r0
    5416:	2f 93       	push	r18
    5418:	3f 93       	push	r19
    541a:	4f 93       	push	r20
    541c:	5f 93       	push	r21
    541e:	6f 93       	push	r22
    5420:	7f 93       	push	r23
    5422:	8f 93       	push	r24
    5424:	9f 93       	push	r25
    5426:	af 93       	push	r26
    5428:	bf 93       	push	r27
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	ef 93       	push	r30
    5430:	ff 93       	push	r31
    5432:	a0 91 34 1a 	lds	r26, 0x1A34	; 0x801a34 <_ser_handle+0x4>
    5436:	b0 91 35 1a 	lds	r27, 0x1A35	; 0x801a35 <_ser_handle+0x5>
    543a:	10 97       	sbiw	r26, 0x00	; 0
    543c:	11 f1       	breq	.+68     	; 0x5482 <__vector_51+0x7a>
    543e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5442:	14 96       	adiw	r26, 0x04	; 4
    5444:	ed 91       	ld	r30, X+
    5446:	fc 91       	ld	r31, X
    5448:	15 97       	sbiw	r26, 0x05	; 5
    544a:	93 81       	ldd	r25, Z+3	; 0x03
    544c:	82 81       	ldd	r24, Z+2	; 0x02
    544e:	25 81       	ldd	r18, Z+5	; 0x05
    5450:	98 1b       	sub	r25, r24
    5452:	92 23       	and	r25, r18
    5454:	84 81       	ldd	r24, Z+4	; 0x04
    5456:	98 17       	cp	r25, r24
    5458:	61 f0       	breq	.+24     	; 0x5472 <__vector_51+0x6a>
    545a:	83 81       	ldd	r24, Z+3	; 0x03
    545c:	26 95       	lsr	r18
    545e:	28 23       	and	r18, r24
    5460:	c0 81       	ld	r28, Z
    5462:	d1 81       	ldd	r29, Z+1	; 0x01
    5464:	c2 0f       	add	r28, r18
    5466:	d1 1d       	adc	r29, r1
    5468:	68 83       	st	Y, r22
    546a:	8f 5f       	subi	r24, 0xFF	; 255
    546c:	95 81       	ldd	r25, Z+5	; 0x05
    546e:	89 23       	and	r24, r25
    5470:	83 83       	std	Z+3, r24	; 0x03
    5472:	16 96       	adiw	r26, 0x06	; 6
    5474:	ed 91       	ld	r30, X+
    5476:	fc 91       	ld	r31, X
    5478:	17 97       	sbiw	r26, 0x07	; 7
    547a:	30 97       	sbiw	r30, 0x00	; 0
    547c:	11 f0       	breq	.+4      	; 0x5482 <__vector_51+0x7a>
    547e:	cd 01       	movw	r24, r26
    5480:	19 95       	eicall
    5482:	ff 91       	pop	r31
    5484:	ef 91       	pop	r30
    5486:	df 91       	pop	r29
    5488:	cf 91       	pop	r28
    548a:	bf 91       	pop	r27
    548c:	af 91       	pop	r26
    548e:	9f 91       	pop	r25
    5490:	8f 91       	pop	r24
    5492:	7f 91       	pop	r23
    5494:	6f 91       	pop	r22
    5496:	5f 91       	pop	r21
    5498:	4f 91       	pop	r20
    549a:	3f 91       	pop	r19
    549c:	2f 91       	pop	r18
    549e:	0f 90       	pop	r0
    54a0:	0b be       	out	0x3b, r0	; 59
    54a2:	0f 90       	pop	r0
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	0f 90       	pop	r0
    54a8:	1f 90       	pop	r1
    54aa:	18 95       	reti

000054ac <__vector_52>:
    54ac:	1f 92       	push	r1
    54ae:	0f 92       	push	r0
    54b0:	0f b6       	in	r0, 0x3f	; 63
    54b2:	0f 92       	push	r0
    54b4:	11 24       	eor	r1, r1
    54b6:	0b b6       	in	r0, 0x3b	; 59
    54b8:	0f 92       	push	r0
    54ba:	2f 93       	push	r18
    54bc:	8f 93       	push	r24
    54be:	9f 93       	push	r25
    54c0:	af 93       	push	r26
    54c2:	bf 93       	push	r27
    54c4:	ef 93       	push	r30
    54c6:	ff 93       	push	r31
    54c8:	e0 91 34 1a 	lds	r30, 0x1A34	; 0x801a34 <_ser_handle+0x4>
    54cc:	f0 91 35 1a 	lds	r31, 0x1A35	; 0x801a35 <_ser_handle+0x5>
    54d0:	30 97       	sbiw	r30, 0x00	; 0
    54d2:	b9 f0       	breq	.+46     	; 0x5502 <__vector_52+0x56>
    54d4:	02 80       	ldd	r0, Z+2	; 0x02
    54d6:	f3 81       	ldd	r31, Z+3	; 0x03
    54d8:	e0 2d       	mov	r30, r0
    54da:	93 81       	ldd	r25, Z+3	; 0x03
    54dc:	82 81       	ldd	r24, Z+2	; 0x02
    54de:	98 17       	cp	r25, r24
    54e0:	b1 f0       	breq	.+44     	; 0x550e <__vector_52+0x62>
    54e2:	92 81       	ldd	r25, Z+2	; 0x02
    54e4:	85 81       	ldd	r24, Z+5	; 0x05
    54e6:	28 2f       	mov	r18, r24
    54e8:	26 95       	lsr	r18
    54ea:	29 23       	and	r18, r25
    54ec:	a0 81       	ld	r26, Z
    54ee:	b1 81       	ldd	r27, Z+1	; 0x01
    54f0:	a2 0f       	add	r26, r18
    54f2:	b1 1d       	adc	r27, r1
    54f4:	2c 91       	ld	r18, X
    54f6:	9f 5f       	subi	r25, 0xFF	; 255
    54f8:	89 23       	and	r24, r25
    54fa:	82 83       	std	Z+2, r24	; 0x02
    54fc:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5500:	0b c0       	rjmp	.+22     	; 0x5518 <__vector_52+0x6c>
    5502:	e1 ed       	ldi	r30, 0xD1	; 209
    5504:	f0 e0       	ldi	r31, 0x00	; 0
    5506:	80 81       	ld	r24, Z
    5508:	8f 7d       	andi	r24, 0xDF	; 223
    550a:	80 83       	st	Z, r24
    550c:	05 c0       	rjmp	.+10     	; 0x5518 <__vector_52+0x6c>
    550e:	e1 ed       	ldi	r30, 0xD1	; 209
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	80 81       	ld	r24, Z
    5514:	8f 7d       	andi	r24, 0xDF	; 223
    5516:	80 83       	st	Z, r24
    5518:	ff 91       	pop	r31
    551a:	ef 91       	pop	r30
    551c:	bf 91       	pop	r27
    551e:	af 91       	pop	r26
    5520:	9f 91       	pop	r25
    5522:	8f 91       	pop	r24
    5524:	2f 91       	pop	r18
    5526:	0f 90       	pop	r0
    5528:	0b be       	out	0x3b, r0	; 59
    552a:	0f 90       	pop	r0
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	0f 90       	pop	r0
    5530:	1f 90       	pop	r1
    5532:	18 95       	reti

00005534 <__vector_54>:
    5534:	1f 92       	push	r1
    5536:	0f 92       	push	r0
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	0f 92       	push	r0
    553c:	11 24       	eor	r1, r1
    553e:	0b b6       	in	r0, 0x3b	; 59
    5540:	0f 92       	push	r0
    5542:	2f 93       	push	r18
    5544:	3f 93       	push	r19
    5546:	4f 93       	push	r20
    5548:	5f 93       	push	r21
    554a:	6f 93       	push	r22
    554c:	7f 93       	push	r23
    554e:	8f 93       	push	r24
    5550:	9f 93       	push	r25
    5552:	af 93       	push	r26
    5554:	bf 93       	push	r27
    5556:	cf 93       	push	r28
    5558:	df 93       	push	r29
    555a:	ef 93       	push	r30
    555c:	ff 93       	push	r31
    555e:	a0 91 36 1a 	lds	r26, 0x1A36	; 0x801a36 <_ser_handle+0x6>
    5562:	b0 91 37 1a 	lds	r27, 0x1A37	; 0x801a37 <_ser_handle+0x7>
    5566:	10 97       	sbiw	r26, 0x00	; 0
    5568:	11 f1       	breq	.+68     	; 0x55ae <__vector_54+0x7a>
    556a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    556e:	14 96       	adiw	r26, 0x04	; 4
    5570:	ed 91       	ld	r30, X+
    5572:	fc 91       	ld	r31, X
    5574:	15 97       	sbiw	r26, 0x05	; 5
    5576:	93 81       	ldd	r25, Z+3	; 0x03
    5578:	82 81       	ldd	r24, Z+2	; 0x02
    557a:	25 81       	ldd	r18, Z+5	; 0x05
    557c:	98 1b       	sub	r25, r24
    557e:	92 23       	and	r25, r18
    5580:	84 81       	ldd	r24, Z+4	; 0x04
    5582:	98 17       	cp	r25, r24
    5584:	61 f0       	breq	.+24     	; 0x559e <__vector_54+0x6a>
    5586:	83 81       	ldd	r24, Z+3	; 0x03
    5588:	26 95       	lsr	r18
    558a:	28 23       	and	r18, r24
    558c:	c0 81       	ld	r28, Z
    558e:	d1 81       	ldd	r29, Z+1	; 0x01
    5590:	c2 0f       	add	r28, r18
    5592:	d1 1d       	adc	r29, r1
    5594:	68 83       	st	Y, r22
    5596:	8f 5f       	subi	r24, 0xFF	; 255
    5598:	95 81       	ldd	r25, Z+5	; 0x05
    559a:	89 23       	and	r24, r25
    559c:	83 83       	std	Z+3, r24	; 0x03
    559e:	16 96       	adiw	r26, 0x06	; 6
    55a0:	ed 91       	ld	r30, X+
    55a2:	fc 91       	ld	r31, X
    55a4:	17 97       	sbiw	r26, 0x07	; 7
    55a6:	30 97       	sbiw	r30, 0x00	; 0
    55a8:	11 f0       	breq	.+4      	; 0x55ae <__vector_54+0x7a>
    55aa:	cd 01       	movw	r24, r26
    55ac:	19 95       	eicall
    55ae:	ff 91       	pop	r31
    55b0:	ef 91       	pop	r30
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	bf 91       	pop	r27
    55b8:	af 91       	pop	r26
    55ba:	9f 91       	pop	r25
    55bc:	8f 91       	pop	r24
    55be:	7f 91       	pop	r23
    55c0:	6f 91       	pop	r22
    55c2:	5f 91       	pop	r21
    55c4:	4f 91       	pop	r20
    55c6:	3f 91       	pop	r19
    55c8:	2f 91       	pop	r18
    55ca:	0f 90       	pop	r0
    55cc:	0b be       	out	0x3b, r0	; 59
    55ce:	0f 90       	pop	r0
    55d0:	0f be       	out	0x3f, r0	; 63
    55d2:	0f 90       	pop	r0
    55d4:	1f 90       	pop	r1
    55d6:	18 95       	reti

000055d8 <__vector_55>:
    55d8:	1f 92       	push	r1
    55da:	0f 92       	push	r0
    55dc:	0f b6       	in	r0, 0x3f	; 63
    55de:	0f 92       	push	r0
    55e0:	11 24       	eor	r1, r1
    55e2:	0b b6       	in	r0, 0x3b	; 59
    55e4:	0f 92       	push	r0
    55e6:	2f 93       	push	r18
    55e8:	8f 93       	push	r24
    55ea:	9f 93       	push	r25
    55ec:	af 93       	push	r26
    55ee:	bf 93       	push	r27
    55f0:	ef 93       	push	r30
    55f2:	ff 93       	push	r31
    55f4:	e0 91 36 1a 	lds	r30, 0x1A36	; 0x801a36 <_ser_handle+0x6>
    55f8:	f0 91 37 1a 	lds	r31, 0x1A37	; 0x801a37 <_ser_handle+0x7>
    55fc:	30 97       	sbiw	r30, 0x00	; 0
    55fe:	b9 f0       	breq	.+46     	; 0x562e <__vector_55+0x56>
    5600:	02 80       	ldd	r0, Z+2	; 0x02
    5602:	f3 81       	ldd	r31, Z+3	; 0x03
    5604:	e0 2d       	mov	r30, r0
    5606:	93 81       	ldd	r25, Z+3	; 0x03
    5608:	82 81       	ldd	r24, Z+2	; 0x02
    560a:	98 17       	cp	r25, r24
    560c:	b1 f0       	breq	.+44     	; 0x563a <__vector_55+0x62>
    560e:	92 81       	ldd	r25, Z+2	; 0x02
    5610:	85 81       	ldd	r24, Z+5	; 0x05
    5612:	28 2f       	mov	r18, r24
    5614:	26 95       	lsr	r18
    5616:	29 23       	and	r18, r25
    5618:	a0 81       	ld	r26, Z
    561a:	b1 81       	ldd	r27, Z+1	; 0x01
    561c:	a2 0f       	add	r26, r18
    561e:	b1 1d       	adc	r27, r1
    5620:	2c 91       	ld	r18, X
    5622:	9f 5f       	subi	r25, 0xFF	; 255
    5624:	89 23       	and	r24, r25
    5626:	82 83       	std	Z+2, r24	; 0x02
    5628:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    562c:	0b c0       	rjmp	.+22     	; 0x5644 <__vector_55+0x6c>
    562e:	e1 e3       	ldi	r30, 0x31	; 49
    5630:	f1 e0       	ldi	r31, 0x01	; 1
    5632:	80 81       	ld	r24, Z
    5634:	8f 7d       	andi	r24, 0xDF	; 223
    5636:	80 83       	st	Z, r24
    5638:	05 c0       	rjmp	.+10     	; 0x5644 <__vector_55+0x6c>
    563a:	e1 e3       	ldi	r30, 0x31	; 49
    563c:	f1 e0       	ldi	r31, 0x01	; 1
    563e:	80 81       	ld	r24, Z
    5640:	8f 7d       	andi	r24, 0xDF	; 223
    5642:	80 83       	st	Z, r24
    5644:	ff 91       	pop	r31
    5646:	ef 91       	pop	r30
    5648:	bf 91       	pop	r27
    564a:	af 91       	pop	r26
    564c:	9f 91       	pop	r25
    564e:	8f 91       	pop	r24
    5650:	2f 91       	pop	r18
    5652:	0f 90       	pop	r0
    5654:	0b be       	out	0x3b, r0	; 59
    5656:	0f 90       	pop	r0
    5658:	0f be       	out	0x3f, r0	; 63
    565a:	0f 90       	pop	r0
    565c:	1f 90       	pop	r1
    565e:	18 95       	reti

00005660 <usart_getchar>:
    5660:	cf 93       	push	r28
    5662:	df 93       	push	r29
    5664:	1f 92       	push	r1
    5666:	cd b7       	in	r28, 0x3d	; 61
    5668:	de b7       	in	r29, 0x3e	; 62
    566a:	be 01       	movw	r22, r28
    566c:	6f 5f       	subi	r22, 0xFF	; 255
    566e:	7f 4f       	sbci	r23, 0xFF	; 255
    5670:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <_com_serial_instance>
    5674:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <_com_serial_instance+0x1>
    5678:	7f dd       	rcall	.-1282   	; 0x5178 <serial_get_byte>
    567a:	81 11       	cpse	r24, r1
    567c:	f6 cf       	rjmp	.-20     	; 0x566a <usart_getchar+0xa>
    567e:	89 81       	ldd	r24, Y+1	; 0x01
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	0f 90       	pop	r0
    5684:	df 91       	pop	r29
    5686:	cf 91       	pop	r28
    5688:	08 95       	ret

0000568a <usart_putchar>:
    568a:	68 2f       	mov	r22, r24
    568c:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <_com_serial_instance>
    5690:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <_com_serial_instance+0x1>
    5694:	fc dc       	rcall	.-1544   	; 0x508e <serial_send_byte>
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	08 95       	ret

0000569c <stdioCreate>:
    569c:	8f 92       	push	r8
    569e:	9f 92       	push	r9
    56a0:	af 92       	push	r10
    56a2:	cf 92       	push	r12
    56a4:	ef 92       	push	r14
    56a6:	0f 93       	push	r16
    56a8:	81 2c       	mov	r8, r1
    56aa:	91 2c       	mov	r9, r1
    56ac:	68 94       	set
    56ae:	aa 24       	eor	r10, r10
    56b0:	a7 f8       	bld	r10, 7
    56b2:	68 94       	set
    56b4:	cc 24       	eor	r12, r12
    56b6:	c7 f8       	bld	r12, 7
    56b8:	e1 2c       	mov	r14, r1
    56ba:	00 e0       	ldi	r16, 0x00	; 0
    56bc:	23 e0       	ldi	r18, 0x03	; 3
    56be:	40 e0       	ldi	r20, 0x00	; 0
    56c0:	51 ee       	ldi	r21, 0xE1	; 225
    56c2:	60 e0       	ldi	r22, 0x00	; 0
    56c4:	70 e0       	ldi	r23, 0x00	; 0
    56c6:	4d dc       	rcall	.-1894   	; 0x4f62 <serial_new_instance>
    56c8:	90 93 39 1a 	sts	0x1A39, r25	; 0x801a39 <_com_serial_instance+0x1>
    56cc:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <_com_serial_instance>
    56d0:	e1 e8       	ldi	r30, 0x81	; 129
    56d2:	fa e1       	ldi	r31, 0x1A	; 26
    56d4:	86 e1       	ldi	r24, 0x16	; 22
    56d6:	92 e0       	ldi	r25, 0x02	; 2
    56d8:	91 83       	std	Z+1, r25	; 0x01
    56da:	80 83       	st	Z, r24
    56dc:	93 83       	std	Z+3, r25	; 0x03
    56de:	82 83       	std	Z+2, r24	; 0x02
    56e0:	0f 91       	pop	r16
    56e2:	ef 90       	pop	r14
    56e4:	cf 90       	pop	r12
    56e6:	af 90       	pop	r10
    56e8:	9f 90       	pop	r9
    56ea:	8f 90       	pop	r8
    56ec:	08 95       	ret

000056ee <_initTwiInterface>:
    56ee:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <_twiIsInitiated>
    56f2:	81 11       	cpse	r24, r1
    56f4:	0c c0       	rjmp	.+24     	; 0x570e <_initTwiInterface+0x20>
    56f6:	8c e0       	ldi	r24, 0x0C	; 12
    56f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    56fc:	8f ef       	ldi	r24, 0xFF	; 255
    56fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5702:	84 e0       	ldi	r24, 0x04	; 4
    5704:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <_twiIsInitiated>
    570e:	08 95       	ret

00005710 <twiCreate>:
    5710:	af 92       	push	r10
    5712:	bf 92       	push	r11
    5714:	cf 92       	push	r12
    5716:	df 92       	push	r13
    5718:	ef 92       	push	r14
    571a:	ff 92       	push	r15
    571c:	0f 93       	push	r16
    571e:	1f 93       	push	r17
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	a8 2e       	mov	r10, r24
    5726:	b6 2e       	mov	r11, r22
    5728:	69 01       	movw	r12, r18
    572a:	7a 01       	movw	r14, r20
    572c:	84 e0       	ldi	r24, 0x04	; 4
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	f2 d3       	rcall	.+2020   	; 0x5f16 <malloc>
    5732:	ec 01       	movw	r28, r24
    5734:	89 2b       	or	r24, r25
    5736:	61 f1       	breq	.+88     	; 0x5790 <twiCreate+0x80>
    5738:	a8 82       	st	Y, r10
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	b8 12       	cpse	r11, r24
    573e:	12 c0       	rjmp	.+36     	; 0x5764 <twiCreate+0x54>
    5740:	c7 01       	movw	r24, r14
    5742:	b6 01       	movw	r22, r12
    5744:	20 ea       	ldi	r18, 0xA0	; 160
    5746:	36 e8       	ldi	r19, 0x86	; 134
    5748:	41 e0       	ldi	r20, 0x01	; 1
    574a:	50 e0       	ldi	r21, 0x00	; 0
    574c:	8c d3       	rcall	.+1816   	; 0x5e66 <__udivmodsi4>
    574e:	da 01       	movw	r26, r20
    5750:	c9 01       	movw	r24, r18
    5752:	40 97       	sbiw	r24, 0x10	; 16
    5754:	a1 09       	sbc	r26, r1
    5756:	b1 09       	sbc	r27, r1
    5758:	b6 95       	lsr	r27
    575a:	a7 95       	ror	r26
    575c:	97 95       	ror	r25
    575e:	87 95       	ror	r24
    5760:	89 83       	std	Y+1, r24	; 0x01
    5762:	11 c0       	rjmp	.+34     	; 0x5786 <twiCreate+0x76>
    5764:	c7 01       	movw	r24, r14
    5766:	b6 01       	movw	r22, r12
    5768:	20 e8       	ldi	r18, 0x80	; 128
    576a:	3a e1       	ldi	r19, 0x1A	; 26
    576c:	46 e0       	ldi	r20, 0x06	; 6
    576e:	50 e0       	ldi	r21, 0x00	; 0
    5770:	7a d3       	rcall	.+1780   	; 0x5e66 <__udivmodsi4>
    5772:	da 01       	movw	r26, r20
    5774:	c9 01       	movw	r24, r18
    5776:	40 97       	sbiw	r24, 0x10	; 16
    5778:	a1 09       	sbc	r26, r1
    577a:	b1 09       	sbc	r27, r1
    577c:	b6 95       	lsr	r27
    577e:	a7 95       	ror	r26
    5780:	97 95       	ror	r25
    5782:	87 95       	ror	r24
    5784:	89 83       	std	Y+1, r24	; 0x01
    5786:	1b 83       	std	Y+3, r17	; 0x03
    5788:	0a 83       	std	Y+2, r16	; 0x02
    578a:	8c 2f       	mov	r24, r28
    578c:	9d 2f       	mov	r25, r29
    578e:	02 c0       	rjmp	.+4      	; 0x5794 <twiCreate+0x84>
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	df 91       	pop	r29
    5796:	cf 91       	pop	r28
    5798:	1f 91       	pop	r17
    579a:	0f 91       	pop	r16
    579c:	ff 90       	pop	r15
    579e:	ef 90       	pop	r14
    57a0:	df 90       	pop	r13
    57a2:	cf 90       	pop	r12
    57a4:	bf 90       	pop	r11
    57a6:	af 90       	pop	r10
    57a8:	08 95       	ret

000057aa <twiIsBusy>:
    57aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    57ae:	81 70       	andi	r24, 0x01	; 1
    57b0:	08 95       	ret

000057b2 <twiTransmit>:
    57b2:	ff 92       	push	r15
    57b4:	0f 93       	push	r16
    57b6:	1f 93       	push	r17
    57b8:	cf 93       	push	r28
    57ba:	df 93       	push	r29
    57bc:	00 97       	sbiw	r24, 0x00	; 0
    57be:	d1 f1       	breq	.+116    	; 0x5834 <twiTransmit+0x82>
    57c0:	4a 30       	cpi	r20, 0x0A	; 10
    57c2:	d0 f5       	brcc	.+116    	; 0x5838 <twiTransmit+0x86>
    57c4:	f4 2e       	mov	r15, r20
    57c6:	8b 01       	movw	r16, r22
    57c8:	ec 01       	movw	r28, r24
    57ca:	ef df       	rcall	.-34     	; 0x57aa <twiIsBusy>
    57cc:	81 11       	cpse	r24, r1
    57ce:	36 c0       	rjmp	.+108    	; 0x583c <twiTransmit+0x8a>
    57d0:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    57d4:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    57d8:	c8 17       	cp	r28, r24
    57da:	d9 07       	cpc	r29, r25
    57dc:	41 f0       	breq	.+16     	; 0x57ee <twiTransmit+0x3c>
    57de:	87 df       	rcall	.-242    	; 0x56ee <_initTwiInterface>
    57e0:	89 81       	ldd	r24, Y+1	; 0x01
    57e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    57e6:	d0 93 3c 1a 	sts	0x1A3C, r29	; 0x801a3c <_twiCurrentHandler+0x1>
    57ea:	c0 93 3b 1a 	sts	0x1A3B, r28	; 0x801a3b <_twiCurrentHandler>
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	8f 0d       	add	r24, r15
    57f2:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <_twiMessageLen>
    57f6:	88 81       	ld	r24, Y
    57f8:	88 0f       	add	r24, r24
    57fa:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_twiMessageBuffer>
    57fe:	ff 20       	and	r15, r15
    5800:	89 f0       	breq	.+34     	; 0x5824 <twiTransmit+0x72>
    5802:	f8 01       	movw	r30, r16
    5804:	af e3       	ldi	r26, 0x3F	; 63
    5806:	ba e1       	ldi	r27, 0x1A	; 26
    5808:	4f ef       	ldi	r20, 0xFF	; 255
    580a:	4f 0d       	add	r20, r15
    580c:	64 2f       	mov	r22, r20
    580e:	70 e0       	ldi	r23, 0x00	; 0
    5810:	cb 01       	movw	r24, r22
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	b8 01       	movw	r22, r16
    5816:	68 0f       	add	r22, r24
    5818:	79 1f       	adc	r23, r25
    581a:	81 91       	ld	r24, Z+
    581c:	8d 93       	st	X+, r24
    581e:	e6 17       	cp	r30, r22
    5820:	f7 07       	cpc	r31, r23
    5822:	d9 f7       	brne	.-10     	; 0x581a <twiTransmit+0x68>
    5824:	88 ef       	ldi	r24, 0xF8	; 248
    5826:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    582a:	85 ea       	ldi	r24, 0xA5	; 165
    582c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5830:	84 e0       	ldi	r24, 0x04	; 4
    5832:	05 c0       	rjmp	.+10     	; 0x583e <twiTransmit+0x8c>
    5834:	86 e0       	ldi	r24, 0x06	; 6
    5836:	03 c0       	rjmp	.+6      	; 0x583e <twiTransmit+0x8c>
    5838:	87 e0       	ldi	r24, 0x07	; 7
    583a:	01 c0       	rjmp	.+2      	; 0x583e <twiTransmit+0x8c>
    583c:	82 e0       	ldi	r24, 0x02	; 2
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	1f 91       	pop	r17
    5844:	0f 91       	pop	r16
    5846:	ff 90       	pop	r15
    5848:	08 95       	ret

0000584a <twiReceive>:
    584a:	1f 93       	push	r17
    584c:	cf 93       	push	r28
    584e:	df 93       	push	r29
    5850:	00 97       	sbiw	r24, 0x00	; 0
    5852:	29 f1       	breq	.+74     	; 0x589e <twiReceive+0x54>
    5854:	6b 30       	cpi	r22, 0x0B	; 11
    5856:	28 f5       	brcc	.+74     	; 0x58a2 <twiReceive+0x58>
    5858:	16 2f       	mov	r17, r22
    585a:	ec 01       	movw	r28, r24
    585c:	a6 df       	rcall	.-180    	; 0x57aa <twiIsBusy>
    585e:	81 11       	cpse	r24, r1
    5860:	22 c0       	rjmp	.+68     	; 0x58a6 <twiReceive+0x5c>
    5862:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    5866:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    586a:	c8 17       	cp	r28, r24
    586c:	d9 07       	cpc	r29, r25
    586e:	41 f0       	breq	.+16     	; 0x5880 <twiReceive+0x36>
    5870:	3e df       	rcall	.-388    	; 0x56ee <_initTwiInterface>
    5872:	89 81       	ldd	r24, Y+1	; 0x01
    5874:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5878:	d0 93 3c 1a 	sts	0x1A3C, r29	; 0x801a3c <_twiCurrentHandler+0x1>
    587c:	c0 93 3b 1a 	sts	0x1A3B, r28	; 0x801a3b <_twiCurrentHandler>
    5880:	10 93 3d 1a 	sts	0x1A3D, r17	; 0x801a3d <_twiMessageLen>
    5884:	88 81       	ld	r24, Y
    5886:	88 0f       	add	r24, r24
    5888:	81 60       	ori	r24, 0x01	; 1
    588a:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <_twiMessageBuffer>
    588e:	88 ef       	ldi	r24, 0xF8	; 248
    5890:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    5894:	85 ea       	ldi	r24, 0xA5	; 165
    5896:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    589a:	85 e0       	ldi	r24, 0x05	; 5
    589c:	05 c0       	rjmp	.+10     	; 0x58a8 <twiReceive+0x5e>
    589e:	86 e0       	ldi	r24, 0x06	; 6
    58a0:	03 c0       	rjmp	.+6      	; 0x58a8 <twiReceive+0x5e>
    58a2:	87 e0       	ldi	r24, 0x07	; 7
    58a4:	01 c0       	rjmp	.+2      	; 0x58a8 <twiReceive+0x5e>
    58a6:	82 e0       	ldi	r24, 0x02	; 2
    58a8:	df 91       	pop	r29
    58aa:	cf 91       	pop	r28
    58ac:	1f 91       	pop	r17
    58ae:	08 95       	ret

000058b0 <__vector_39>:
    58b0:	1f 92       	push	r1
    58b2:	0f 92       	push	r0
    58b4:	0f b6       	in	r0, 0x3f	; 63
    58b6:	0f 92       	push	r0
    58b8:	11 24       	eor	r1, r1
    58ba:	0b b6       	in	r0, 0x3b	; 59
    58bc:	0f 92       	push	r0
    58be:	2f 93       	push	r18
    58c0:	3f 93       	push	r19
    58c2:	4f 93       	push	r20
    58c4:	5f 93       	push	r21
    58c6:	6f 93       	push	r22
    58c8:	7f 93       	push	r23
    58ca:	8f 93       	push	r24
    58cc:	9f 93       	push	r25
    58ce:	af 93       	push	r26
    58d0:	bf 93       	push	r27
    58d2:	ef 93       	push	r30
    58d4:	ff 93       	push	r31
    58d6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    58da:	8e 2f       	mov	r24, r30
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	fc 01       	movw	r30, r24
    58e0:	38 97       	sbiw	r30, 0x08	; 8
    58e2:	e1 35       	cpi	r30, 0x51	; 81
    58e4:	f1 05       	cpc	r31, r1
    58e6:	08 f0       	brcs	.+2      	; 0x58ea <__vector_39+0x3a>
    58e8:	75 c0       	rjmp	.+234    	; 0x59d4 <__vector_39+0x124>
    58ea:	88 27       	eor	r24, r24
    58ec:	e4 58       	subi	r30, 0x84	; 132
    58ee:	ff 4f       	sbci	r31, 0xFF	; 255
    58f0:	8f 4f       	sbci	r24, 0xFF	; 255
    58f2:	db c2       	rjmp	.+1462   	; 0x5eaa <__tablejump2__>
    58f4:	10 92 3a 1a 	sts	0x1A3A, r1	; 0x801a3a <_index.1885>
    58f8:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    58fc:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <_twiMessageLen>
    5900:	e8 17       	cp	r30, r24
    5902:	70 f4       	brcc	.+28     	; 0x5920 <__vector_39+0x70>
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	8e 0f       	add	r24, r30
    5908:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_index.1885>
    590c:	f0 e0       	ldi	r31, 0x00	; 0
    590e:	e2 5c       	subi	r30, 0xC2	; 194
    5910:	f5 4e       	sbci	r31, 0xE5	; 229
    5912:	80 81       	ld	r24, Z
    5914:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5918:	85 e8       	ldi	r24, 0x85	; 133
    591a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    591e:	72 c0       	rjmp	.+228    	; 0x5a04 <__vector_39+0x154>
    5920:	84 e9       	ldi	r24, 0x94	; 148
    5922:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5926:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    592a:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    592e:	dc 01       	movw	r26, r24
    5930:	12 96       	adiw	r26, 0x02	; 2
    5932:	ed 91       	ld	r30, X+
    5934:	fc 91       	ld	r31, X
    5936:	13 97       	sbiw	r26, 0x03	; 3
    5938:	30 97       	sbiw	r30, 0x00	; 0
    593a:	09 f4       	brne	.+2      	; 0x593e <__vector_39+0x8e>
    593c:	63 c0       	rjmp	.+198    	; 0x5a04 <__vector_39+0x154>
    593e:	20 e0       	ldi	r18, 0x00	; 0
    5940:	40 e0       	ldi	r20, 0x00	; 0
    5942:	50 e0       	ldi	r21, 0x00	; 0
    5944:	64 e0       	ldi	r22, 0x04	; 4
    5946:	19 95       	eicall
    5948:	5d c0       	rjmp	.+186    	; 0x5a04 <__vector_39+0x154>
    594a:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	8e 0f       	add	r24, r30
    5952:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <_index.1885>
    5956:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	e2 5c       	subi	r30, 0xC2	; 194
    595e:	f5 4e       	sbci	r31, 0xE5	; 229
    5960:	80 83       	st	Z, r24
    5962:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5966:	80 34       	cpi	r24, 0x40	; 64
    5968:	11 f4       	brne	.+4      	; 0x596e <__vector_39+0xbe>
    596a:	10 92 3a 1a 	sts	0x1A3A, r1	; 0x801a3a <_index.1885>
    596e:	20 91 3a 1a 	lds	r18, 0x1A3A	; 0x801a3a <_index.1885>
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <_twiMessageLen>
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	01 97       	sbiw	r24, 0x01	; 1
    597c:	28 17       	cp	r18, r24
    597e:	39 07       	cpc	r19, r25
    5980:	24 f4       	brge	.+8      	; 0x598a <__vector_39+0xda>
    5982:	85 ec       	ldi	r24, 0xC5	; 197
    5984:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5988:	3d c0       	rjmp	.+122    	; 0x5a04 <__vector_39+0x154>
    598a:	85 e8       	ldi	r24, 0x85	; 133
    598c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5990:	39 c0       	rjmp	.+114    	; 0x5a04 <__vector_39+0x154>
    5992:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5996:	e0 91 3a 1a 	lds	r30, 0x1A3A	; 0x801a3a <_index.1885>
    599a:	f0 e0       	ldi	r31, 0x00	; 0
    599c:	e2 5c       	subi	r30, 0xC2	; 194
    599e:	f5 4e       	sbci	r31, 0xE5	; 229
    59a0:	80 83       	st	Z, r24
    59a2:	84 e9       	ldi	r24, 0x94	; 148
    59a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59a8:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    59ac:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    59b0:	dc 01       	movw	r26, r24
    59b2:	12 96       	adiw	r26, 0x02	; 2
    59b4:	ed 91       	ld	r30, X+
    59b6:	fc 91       	ld	r31, X
    59b8:	13 97       	sbiw	r26, 0x03	; 3
    59ba:	30 97       	sbiw	r30, 0x00	; 0
    59bc:	19 f1       	breq	.+70     	; 0x5a04 <__vector_39+0x154>
    59be:	20 91 3d 1a 	lds	r18, 0x1A3D	; 0x801a3d <_twiMessageLen>
    59c2:	4e e3       	ldi	r20, 0x3E	; 62
    59c4:	5a e1       	ldi	r21, 0x1A	; 26
    59c6:	65 e0       	ldi	r22, 0x05	; 5
    59c8:	19 95       	eicall
    59ca:	1c c0       	rjmp	.+56     	; 0x5a04 <__vector_39+0x154>
    59cc:	85 ea       	ldi	r24, 0xA5	; 165
    59ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59d2:	18 c0       	rjmp	.+48     	; 0x5a04 <__vector_39+0x154>
    59d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    59d8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_twiCurrentState>
    59dc:	84 e0       	ldi	r24, 0x04	; 4
    59de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59e2:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <_twiCurrentHandler>
    59e6:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <_twiCurrentHandler+0x1>
    59ea:	dc 01       	movw	r26, r24
    59ec:	12 96       	adiw	r26, 0x02	; 2
    59ee:	ed 91       	ld	r30, X+
    59f0:	fc 91       	ld	r31, X
    59f2:	13 97       	sbiw	r26, 0x03	; 3
    59f4:	30 97       	sbiw	r30, 0x00	; 0
    59f6:	31 f0       	breq	.+12     	; 0x5a04 <__vector_39+0x154>
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	40 e0       	ldi	r20, 0x00	; 0
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <_twiCurrentState>
    5a02:	19 95       	eicall
    5a04:	ff 91       	pop	r31
    5a06:	ef 91       	pop	r30
    5a08:	bf 91       	pop	r27
    5a0a:	af 91       	pop	r26
    5a0c:	9f 91       	pop	r25
    5a0e:	8f 91       	pop	r24
    5a10:	7f 91       	pop	r23
    5a12:	6f 91       	pop	r22
    5a14:	5f 91       	pop	r21
    5a16:	4f 91       	pop	r20
    5a18:	3f 91       	pop	r19
    5a1a:	2f 91       	pop	r18
    5a1c:	0f 90       	pop	r0
    5a1e:	0b be       	out	0x3b, r0	; 59
    5a20:	0f 90       	pop	r0
    5a22:	0f be       	out	0x3f, r0	; 63
    5a24:	0f 90       	pop	r0
    5a26:	1f 90       	pop	r1
    5a28:	18 95       	reti

00005a2a <fifo_init>:
    5a2a:	fc 01       	movw	r30, r24
    5a2c:	41 11       	cpse	r20, r1
    5a2e:	01 c0       	rjmp	.+2      	; 0x5a32 <fifo_init+0x8>
    5a30:	e8 d3       	rcall	.+2000   	; 0x6202 <abort>
    5a32:	84 2f       	mov	r24, r20
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	9c 01       	movw	r18, r24
    5a38:	21 50       	subi	r18, 0x01	; 1
    5a3a:	31 09       	sbc	r19, r1
    5a3c:	82 23       	and	r24, r18
    5a3e:	93 23       	and	r25, r19
    5a40:	89 2b       	or	r24, r25
    5a42:	09 f0       	breq	.+2      	; 0x5a46 <fifo_init+0x1c>
    5a44:	de d3       	rcall	.+1980   	; 0x6202 <abort>
    5a46:	41 38       	cpi	r20, 0x81	; 129
    5a48:	08 f0       	brcs	.+2      	; 0x5a4c <fifo_init+0x22>
    5a4a:	db d3       	rcall	.+1974   	; 0x6202 <abort>
    5a4c:	12 82       	std	Z+2, r1	; 0x02
    5a4e:	13 82       	std	Z+3, r1	; 0x03
    5a50:	44 83       	std	Z+4, r20	; 0x04
    5a52:	44 0f       	add	r20, r20
    5a54:	41 50       	subi	r20, 0x01	; 1
    5a56:	45 83       	std	Z+5, r20	; 0x05
    5a58:	71 83       	std	Z+1, r23	; 0x01
    5a5a:	60 83       	st	Z, r22
    5a5c:	80 e0       	ldi	r24, 0x00	; 0
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	08 95       	ret

00005a62 <__subsf3>:
    5a62:	50 58       	subi	r21, 0x80	; 128

00005a64 <__addsf3>:
    5a64:	bb 27       	eor	r27, r27
    5a66:	aa 27       	eor	r26, r26
    5a68:	0e d0       	rcall	.+28     	; 0x5a86 <__addsf3x>
    5a6a:	4d c1       	rjmp	.+666    	; 0x5d06 <__fp_round>
    5a6c:	3e d1       	rcall	.+636    	; 0x5cea <__fp_pscA>
    5a6e:	30 f0       	brcs	.+12     	; 0x5a7c <__addsf3+0x18>
    5a70:	43 d1       	rcall	.+646    	; 0x5cf8 <__fp_pscB>
    5a72:	20 f0       	brcs	.+8      	; 0x5a7c <__addsf3+0x18>
    5a74:	31 f4       	brne	.+12     	; 0x5a82 <__addsf3+0x1e>
    5a76:	9f 3f       	cpi	r25, 0xFF	; 255
    5a78:	11 f4       	brne	.+4      	; 0x5a7e <__addsf3+0x1a>
    5a7a:	1e f4       	brtc	.+6      	; 0x5a82 <__addsf3+0x1e>
    5a7c:	33 c1       	rjmp	.+614    	; 0x5ce4 <__fp_nan>
    5a7e:	0e f4       	brtc	.+2      	; 0x5a82 <__addsf3+0x1e>
    5a80:	e0 95       	com	r30
    5a82:	e7 fb       	bst	r30, 7
    5a84:	29 c1       	rjmp	.+594    	; 0x5cd8 <__fp_inf>

00005a86 <__addsf3x>:
    5a86:	e9 2f       	mov	r30, r25
    5a88:	4f d1       	rcall	.+670    	; 0x5d28 <__fp_split3>
    5a8a:	80 f3       	brcs	.-32     	; 0x5a6c <__addsf3+0x8>
    5a8c:	ba 17       	cp	r27, r26
    5a8e:	62 07       	cpc	r22, r18
    5a90:	73 07       	cpc	r23, r19
    5a92:	84 07       	cpc	r24, r20
    5a94:	95 07       	cpc	r25, r21
    5a96:	18 f0       	brcs	.+6      	; 0x5a9e <__addsf3x+0x18>
    5a98:	71 f4       	brne	.+28     	; 0x5ab6 <__addsf3x+0x30>
    5a9a:	9e f5       	brtc	.+102    	; 0x5b02 <__addsf3x+0x7c>
    5a9c:	67 c1       	rjmp	.+718    	; 0x5d6c <__fp_zero>
    5a9e:	0e f4       	brtc	.+2      	; 0x5aa2 <__addsf3x+0x1c>
    5aa0:	e0 95       	com	r30
    5aa2:	0b 2e       	mov	r0, r27
    5aa4:	ba 2f       	mov	r27, r26
    5aa6:	a0 2d       	mov	r26, r0
    5aa8:	0b 01       	movw	r0, r22
    5aaa:	b9 01       	movw	r22, r18
    5aac:	90 01       	movw	r18, r0
    5aae:	0c 01       	movw	r0, r24
    5ab0:	ca 01       	movw	r24, r20
    5ab2:	a0 01       	movw	r20, r0
    5ab4:	11 24       	eor	r1, r1
    5ab6:	ff 27       	eor	r31, r31
    5ab8:	59 1b       	sub	r21, r25
    5aba:	99 f0       	breq	.+38     	; 0x5ae2 <__addsf3x+0x5c>
    5abc:	59 3f       	cpi	r21, 0xF9	; 249
    5abe:	50 f4       	brcc	.+20     	; 0x5ad4 <__addsf3x+0x4e>
    5ac0:	50 3e       	cpi	r21, 0xE0	; 224
    5ac2:	68 f1       	brcs	.+90     	; 0x5b1e <__addsf3x+0x98>
    5ac4:	1a 16       	cp	r1, r26
    5ac6:	f0 40       	sbci	r31, 0x00	; 0
    5ac8:	a2 2f       	mov	r26, r18
    5aca:	23 2f       	mov	r18, r19
    5acc:	34 2f       	mov	r19, r20
    5ace:	44 27       	eor	r20, r20
    5ad0:	58 5f       	subi	r21, 0xF8	; 248
    5ad2:	f3 cf       	rjmp	.-26     	; 0x5aba <__addsf3x+0x34>
    5ad4:	46 95       	lsr	r20
    5ad6:	37 95       	ror	r19
    5ad8:	27 95       	ror	r18
    5ada:	a7 95       	ror	r26
    5adc:	f0 40       	sbci	r31, 0x00	; 0
    5ade:	53 95       	inc	r21
    5ae0:	c9 f7       	brne	.-14     	; 0x5ad4 <__addsf3x+0x4e>
    5ae2:	7e f4       	brtc	.+30     	; 0x5b02 <__addsf3x+0x7c>
    5ae4:	1f 16       	cp	r1, r31
    5ae6:	ba 0b       	sbc	r27, r26
    5ae8:	62 0b       	sbc	r22, r18
    5aea:	73 0b       	sbc	r23, r19
    5aec:	84 0b       	sbc	r24, r20
    5aee:	ba f0       	brmi	.+46     	; 0x5b1e <__addsf3x+0x98>
    5af0:	91 50       	subi	r25, 0x01	; 1
    5af2:	a1 f0       	breq	.+40     	; 0x5b1c <__addsf3x+0x96>
    5af4:	ff 0f       	add	r31, r31
    5af6:	bb 1f       	adc	r27, r27
    5af8:	66 1f       	adc	r22, r22
    5afa:	77 1f       	adc	r23, r23
    5afc:	88 1f       	adc	r24, r24
    5afe:	c2 f7       	brpl	.-16     	; 0x5af0 <__addsf3x+0x6a>
    5b00:	0e c0       	rjmp	.+28     	; 0x5b1e <__addsf3x+0x98>
    5b02:	ba 0f       	add	r27, r26
    5b04:	62 1f       	adc	r22, r18
    5b06:	73 1f       	adc	r23, r19
    5b08:	84 1f       	adc	r24, r20
    5b0a:	48 f4       	brcc	.+18     	; 0x5b1e <__addsf3x+0x98>
    5b0c:	87 95       	ror	r24
    5b0e:	77 95       	ror	r23
    5b10:	67 95       	ror	r22
    5b12:	b7 95       	ror	r27
    5b14:	f7 95       	ror	r31
    5b16:	9e 3f       	cpi	r25, 0xFE	; 254
    5b18:	08 f0       	brcs	.+2      	; 0x5b1c <__addsf3x+0x96>
    5b1a:	b3 cf       	rjmp	.-154    	; 0x5a82 <__addsf3+0x1e>
    5b1c:	93 95       	inc	r25
    5b1e:	88 0f       	add	r24, r24
    5b20:	08 f0       	brcs	.+2      	; 0x5b24 <__addsf3x+0x9e>
    5b22:	99 27       	eor	r25, r25
    5b24:	ee 0f       	add	r30, r30
    5b26:	97 95       	ror	r25
    5b28:	87 95       	ror	r24
    5b2a:	08 95       	ret

00005b2c <__divsf3>:
    5b2c:	0c d0       	rcall	.+24     	; 0x5b46 <__divsf3x>
    5b2e:	eb c0       	rjmp	.+470    	; 0x5d06 <__fp_round>
    5b30:	e3 d0       	rcall	.+454    	; 0x5cf8 <__fp_pscB>
    5b32:	40 f0       	brcs	.+16     	; 0x5b44 <__divsf3+0x18>
    5b34:	da d0       	rcall	.+436    	; 0x5cea <__fp_pscA>
    5b36:	30 f0       	brcs	.+12     	; 0x5b44 <__divsf3+0x18>
    5b38:	21 f4       	brne	.+8      	; 0x5b42 <__divsf3+0x16>
    5b3a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b3c:	19 f0       	breq	.+6      	; 0x5b44 <__divsf3+0x18>
    5b3e:	cc c0       	rjmp	.+408    	; 0x5cd8 <__fp_inf>
    5b40:	51 11       	cpse	r21, r1
    5b42:	15 c1       	rjmp	.+554    	; 0x5d6e <__fp_szero>
    5b44:	cf c0       	rjmp	.+414    	; 0x5ce4 <__fp_nan>

00005b46 <__divsf3x>:
    5b46:	f0 d0       	rcall	.+480    	; 0x5d28 <__fp_split3>
    5b48:	98 f3       	brcs	.-26     	; 0x5b30 <__divsf3+0x4>

00005b4a <__divsf3_pse>:
    5b4a:	99 23       	and	r25, r25
    5b4c:	c9 f3       	breq	.-14     	; 0x5b40 <__divsf3+0x14>
    5b4e:	55 23       	and	r21, r21
    5b50:	b1 f3       	breq	.-20     	; 0x5b3e <__divsf3+0x12>
    5b52:	95 1b       	sub	r25, r21
    5b54:	55 0b       	sbc	r21, r21
    5b56:	bb 27       	eor	r27, r27
    5b58:	aa 27       	eor	r26, r26
    5b5a:	62 17       	cp	r22, r18
    5b5c:	73 07       	cpc	r23, r19
    5b5e:	84 07       	cpc	r24, r20
    5b60:	38 f0       	brcs	.+14     	; 0x5b70 <__divsf3_pse+0x26>
    5b62:	9f 5f       	subi	r25, 0xFF	; 255
    5b64:	5f 4f       	sbci	r21, 0xFF	; 255
    5b66:	22 0f       	add	r18, r18
    5b68:	33 1f       	adc	r19, r19
    5b6a:	44 1f       	adc	r20, r20
    5b6c:	aa 1f       	adc	r26, r26
    5b6e:	a9 f3       	breq	.-22     	; 0x5b5a <__divsf3_pse+0x10>
    5b70:	33 d0       	rcall	.+102    	; 0x5bd8 <__divsf3_pse+0x8e>
    5b72:	0e 2e       	mov	r0, r30
    5b74:	3a f0       	brmi	.+14     	; 0x5b84 <__divsf3_pse+0x3a>
    5b76:	e0 e8       	ldi	r30, 0x80	; 128
    5b78:	30 d0       	rcall	.+96     	; 0x5bda <__divsf3_pse+0x90>
    5b7a:	91 50       	subi	r25, 0x01	; 1
    5b7c:	50 40       	sbci	r21, 0x00	; 0
    5b7e:	e6 95       	lsr	r30
    5b80:	00 1c       	adc	r0, r0
    5b82:	ca f7       	brpl	.-14     	; 0x5b76 <__divsf3_pse+0x2c>
    5b84:	29 d0       	rcall	.+82     	; 0x5bd8 <__divsf3_pse+0x8e>
    5b86:	fe 2f       	mov	r31, r30
    5b88:	27 d0       	rcall	.+78     	; 0x5bd8 <__divsf3_pse+0x8e>
    5b8a:	66 0f       	add	r22, r22
    5b8c:	77 1f       	adc	r23, r23
    5b8e:	88 1f       	adc	r24, r24
    5b90:	bb 1f       	adc	r27, r27
    5b92:	26 17       	cp	r18, r22
    5b94:	37 07       	cpc	r19, r23
    5b96:	48 07       	cpc	r20, r24
    5b98:	ab 07       	cpc	r26, r27
    5b9a:	b0 e8       	ldi	r27, 0x80	; 128
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <__divsf3_pse+0x56>
    5b9e:	bb 0b       	sbc	r27, r27
    5ba0:	80 2d       	mov	r24, r0
    5ba2:	bf 01       	movw	r22, r30
    5ba4:	ff 27       	eor	r31, r31
    5ba6:	93 58       	subi	r25, 0x83	; 131
    5ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    5baa:	2a f0       	brmi	.+10     	; 0x5bb6 <__divsf3_pse+0x6c>
    5bac:	9e 3f       	cpi	r25, 0xFE	; 254
    5bae:	51 05       	cpc	r21, r1
    5bb0:	68 f0       	brcs	.+26     	; 0x5bcc <__divsf3_pse+0x82>
    5bb2:	92 c0       	rjmp	.+292    	; 0x5cd8 <__fp_inf>
    5bb4:	dc c0       	rjmp	.+440    	; 0x5d6e <__fp_szero>
    5bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb8:	ec f3       	brlt	.-6      	; 0x5bb4 <__divsf3_pse+0x6a>
    5bba:	98 3e       	cpi	r25, 0xE8	; 232
    5bbc:	dc f3       	brlt	.-10     	; 0x5bb4 <__divsf3_pse+0x6a>
    5bbe:	86 95       	lsr	r24
    5bc0:	77 95       	ror	r23
    5bc2:	67 95       	ror	r22
    5bc4:	b7 95       	ror	r27
    5bc6:	f7 95       	ror	r31
    5bc8:	9f 5f       	subi	r25, 0xFF	; 255
    5bca:	c9 f7       	brne	.-14     	; 0x5bbe <__divsf3_pse+0x74>
    5bcc:	88 0f       	add	r24, r24
    5bce:	91 1d       	adc	r25, r1
    5bd0:	96 95       	lsr	r25
    5bd2:	87 95       	ror	r24
    5bd4:	97 f9       	bld	r25, 7
    5bd6:	08 95       	ret
    5bd8:	e1 e0       	ldi	r30, 0x01	; 1
    5bda:	66 0f       	add	r22, r22
    5bdc:	77 1f       	adc	r23, r23
    5bde:	88 1f       	adc	r24, r24
    5be0:	bb 1f       	adc	r27, r27
    5be2:	62 17       	cp	r22, r18
    5be4:	73 07       	cpc	r23, r19
    5be6:	84 07       	cpc	r24, r20
    5be8:	ba 07       	cpc	r27, r26
    5bea:	20 f0       	brcs	.+8      	; 0x5bf4 <__divsf3_pse+0xaa>
    5bec:	62 1b       	sub	r22, r18
    5bee:	73 0b       	sbc	r23, r19
    5bf0:	84 0b       	sbc	r24, r20
    5bf2:	ba 0b       	sbc	r27, r26
    5bf4:	ee 1f       	adc	r30, r30
    5bf6:	88 f7       	brcc	.-30     	; 0x5bda <__divsf3_pse+0x90>
    5bf8:	e0 95       	com	r30
    5bfa:	08 95       	ret

00005bfc <__fixsfsi>:
    5bfc:	04 d0       	rcall	.+8      	; 0x5c06 <__fixunssfsi>
    5bfe:	68 94       	set
    5c00:	b1 11       	cpse	r27, r1
    5c02:	b5 c0       	rjmp	.+362    	; 0x5d6e <__fp_szero>
    5c04:	08 95       	ret

00005c06 <__fixunssfsi>:
    5c06:	98 d0       	rcall	.+304    	; 0x5d38 <__fp_splitA>
    5c08:	88 f0       	brcs	.+34     	; 0x5c2c <__fixunssfsi+0x26>
    5c0a:	9f 57       	subi	r25, 0x7F	; 127
    5c0c:	90 f0       	brcs	.+36     	; 0x5c32 <__fixunssfsi+0x2c>
    5c0e:	b9 2f       	mov	r27, r25
    5c10:	99 27       	eor	r25, r25
    5c12:	b7 51       	subi	r27, 0x17	; 23
    5c14:	a0 f0       	brcs	.+40     	; 0x5c3e <__fixunssfsi+0x38>
    5c16:	d1 f0       	breq	.+52     	; 0x5c4c <__fixunssfsi+0x46>
    5c18:	66 0f       	add	r22, r22
    5c1a:	77 1f       	adc	r23, r23
    5c1c:	88 1f       	adc	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	1a f0       	brmi	.+6      	; 0x5c28 <__fixunssfsi+0x22>
    5c22:	ba 95       	dec	r27
    5c24:	c9 f7       	brne	.-14     	; 0x5c18 <__fixunssfsi+0x12>
    5c26:	12 c0       	rjmp	.+36     	; 0x5c4c <__fixunssfsi+0x46>
    5c28:	b1 30       	cpi	r27, 0x01	; 1
    5c2a:	81 f0       	breq	.+32     	; 0x5c4c <__fixunssfsi+0x46>
    5c2c:	9f d0       	rcall	.+318    	; 0x5d6c <__fp_zero>
    5c2e:	b1 e0       	ldi	r27, 0x01	; 1
    5c30:	08 95       	ret
    5c32:	9c c0       	rjmp	.+312    	; 0x5d6c <__fp_zero>
    5c34:	67 2f       	mov	r22, r23
    5c36:	78 2f       	mov	r23, r24
    5c38:	88 27       	eor	r24, r24
    5c3a:	b8 5f       	subi	r27, 0xF8	; 248
    5c3c:	39 f0       	breq	.+14     	; 0x5c4c <__fixunssfsi+0x46>
    5c3e:	b9 3f       	cpi	r27, 0xF9	; 249
    5c40:	cc f3       	brlt	.-14     	; 0x5c34 <__fixunssfsi+0x2e>
    5c42:	86 95       	lsr	r24
    5c44:	77 95       	ror	r23
    5c46:	67 95       	ror	r22
    5c48:	b3 95       	inc	r27
    5c4a:	d9 f7       	brne	.-10     	; 0x5c42 <__fixunssfsi+0x3c>
    5c4c:	3e f4       	brtc	.+14     	; 0x5c5c <__fixunssfsi+0x56>
    5c4e:	90 95       	com	r25
    5c50:	80 95       	com	r24
    5c52:	70 95       	com	r23
    5c54:	61 95       	neg	r22
    5c56:	7f 4f       	sbci	r23, 0xFF	; 255
    5c58:	8f 4f       	sbci	r24, 0xFF	; 255
    5c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5c:	08 95       	ret

00005c5e <__floatunsisf>:
    5c5e:	e8 94       	clt
    5c60:	09 c0       	rjmp	.+18     	; 0x5c74 <__floatsisf+0x12>

00005c62 <__floatsisf>:
    5c62:	97 fb       	bst	r25, 7
    5c64:	3e f4       	brtc	.+14     	; 0x5c74 <__floatsisf+0x12>
    5c66:	90 95       	com	r25
    5c68:	80 95       	com	r24
    5c6a:	70 95       	com	r23
    5c6c:	61 95       	neg	r22
    5c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c70:	8f 4f       	sbci	r24, 0xFF	; 255
    5c72:	9f 4f       	sbci	r25, 0xFF	; 255
    5c74:	99 23       	and	r25, r25
    5c76:	a9 f0       	breq	.+42     	; 0x5ca2 <__floatsisf+0x40>
    5c78:	f9 2f       	mov	r31, r25
    5c7a:	96 e9       	ldi	r25, 0x96	; 150
    5c7c:	bb 27       	eor	r27, r27
    5c7e:	93 95       	inc	r25
    5c80:	f6 95       	lsr	r31
    5c82:	87 95       	ror	r24
    5c84:	77 95       	ror	r23
    5c86:	67 95       	ror	r22
    5c88:	b7 95       	ror	r27
    5c8a:	f1 11       	cpse	r31, r1
    5c8c:	f8 cf       	rjmp	.-16     	; 0x5c7e <__floatsisf+0x1c>
    5c8e:	fa f4       	brpl	.+62     	; 0x5cce <__floatsisf+0x6c>
    5c90:	bb 0f       	add	r27, r27
    5c92:	11 f4       	brne	.+4      	; 0x5c98 <__floatsisf+0x36>
    5c94:	60 ff       	sbrs	r22, 0
    5c96:	1b c0       	rjmp	.+54     	; 0x5cce <__floatsisf+0x6c>
    5c98:	6f 5f       	subi	r22, 0xFF	; 255
    5c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca0:	16 c0       	rjmp	.+44     	; 0x5cce <__floatsisf+0x6c>
    5ca2:	88 23       	and	r24, r24
    5ca4:	11 f0       	breq	.+4      	; 0x5caa <__floatsisf+0x48>
    5ca6:	96 e9       	ldi	r25, 0x96	; 150
    5ca8:	11 c0       	rjmp	.+34     	; 0x5ccc <__floatsisf+0x6a>
    5caa:	77 23       	and	r23, r23
    5cac:	21 f0       	breq	.+8      	; 0x5cb6 <__floatsisf+0x54>
    5cae:	9e e8       	ldi	r25, 0x8E	; 142
    5cb0:	87 2f       	mov	r24, r23
    5cb2:	76 2f       	mov	r23, r22
    5cb4:	05 c0       	rjmp	.+10     	; 0x5cc0 <__floatsisf+0x5e>
    5cb6:	66 23       	and	r22, r22
    5cb8:	71 f0       	breq	.+28     	; 0x5cd6 <__floatsisf+0x74>
    5cba:	96 e8       	ldi	r25, 0x86	; 134
    5cbc:	86 2f       	mov	r24, r22
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	60 e0       	ldi	r22, 0x00	; 0
    5cc2:	2a f0       	brmi	.+10     	; 0x5cce <__floatsisf+0x6c>
    5cc4:	9a 95       	dec	r25
    5cc6:	66 0f       	add	r22, r22
    5cc8:	77 1f       	adc	r23, r23
    5cca:	88 1f       	adc	r24, r24
    5ccc:	da f7       	brpl	.-10     	; 0x5cc4 <__floatsisf+0x62>
    5cce:	88 0f       	add	r24, r24
    5cd0:	96 95       	lsr	r25
    5cd2:	87 95       	ror	r24
    5cd4:	97 f9       	bld	r25, 7
    5cd6:	08 95       	ret

00005cd8 <__fp_inf>:
    5cd8:	97 f9       	bld	r25, 7
    5cda:	9f 67       	ori	r25, 0x7F	; 127
    5cdc:	80 e8       	ldi	r24, 0x80	; 128
    5cde:	70 e0       	ldi	r23, 0x00	; 0
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	08 95       	ret

00005ce4 <__fp_nan>:
    5ce4:	9f ef       	ldi	r25, 0xFF	; 255
    5ce6:	80 ec       	ldi	r24, 0xC0	; 192
    5ce8:	08 95       	ret

00005cea <__fp_pscA>:
    5cea:	00 24       	eor	r0, r0
    5cec:	0a 94       	dec	r0
    5cee:	16 16       	cp	r1, r22
    5cf0:	17 06       	cpc	r1, r23
    5cf2:	18 06       	cpc	r1, r24
    5cf4:	09 06       	cpc	r0, r25
    5cf6:	08 95       	ret

00005cf8 <__fp_pscB>:
    5cf8:	00 24       	eor	r0, r0
    5cfa:	0a 94       	dec	r0
    5cfc:	12 16       	cp	r1, r18
    5cfe:	13 06       	cpc	r1, r19
    5d00:	14 06       	cpc	r1, r20
    5d02:	05 06       	cpc	r0, r21
    5d04:	08 95       	ret

00005d06 <__fp_round>:
    5d06:	09 2e       	mov	r0, r25
    5d08:	03 94       	inc	r0
    5d0a:	00 0c       	add	r0, r0
    5d0c:	11 f4       	brne	.+4      	; 0x5d12 <__fp_round+0xc>
    5d0e:	88 23       	and	r24, r24
    5d10:	52 f0       	brmi	.+20     	; 0x5d26 <__fp_round+0x20>
    5d12:	bb 0f       	add	r27, r27
    5d14:	40 f4       	brcc	.+16     	; 0x5d26 <__fp_round+0x20>
    5d16:	bf 2b       	or	r27, r31
    5d18:	11 f4       	brne	.+4      	; 0x5d1e <__fp_round+0x18>
    5d1a:	60 ff       	sbrs	r22, 0
    5d1c:	04 c0       	rjmp	.+8      	; 0x5d26 <__fp_round+0x20>
    5d1e:	6f 5f       	subi	r22, 0xFF	; 255
    5d20:	7f 4f       	sbci	r23, 0xFF	; 255
    5d22:	8f 4f       	sbci	r24, 0xFF	; 255
    5d24:	9f 4f       	sbci	r25, 0xFF	; 255
    5d26:	08 95       	ret

00005d28 <__fp_split3>:
    5d28:	57 fd       	sbrc	r21, 7
    5d2a:	90 58       	subi	r25, 0x80	; 128
    5d2c:	44 0f       	add	r20, r20
    5d2e:	55 1f       	adc	r21, r21
    5d30:	59 f0       	breq	.+22     	; 0x5d48 <__fp_splitA+0x10>
    5d32:	5f 3f       	cpi	r21, 0xFF	; 255
    5d34:	71 f0       	breq	.+28     	; 0x5d52 <__fp_splitA+0x1a>
    5d36:	47 95       	ror	r20

00005d38 <__fp_splitA>:
    5d38:	88 0f       	add	r24, r24
    5d3a:	97 fb       	bst	r25, 7
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	61 f0       	breq	.+24     	; 0x5d58 <__fp_splitA+0x20>
    5d40:	9f 3f       	cpi	r25, 0xFF	; 255
    5d42:	79 f0       	breq	.+30     	; 0x5d62 <__fp_splitA+0x2a>
    5d44:	87 95       	ror	r24
    5d46:	08 95       	ret
    5d48:	12 16       	cp	r1, r18
    5d4a:	13 06       	cpc	r1, r19
    5d4c:	14 06       	cpc	r1, r20
    5d4e:	55 1f       	adc	r21, r21
    5d50:	f2 cf       	rjmp	.-28     	; 0x5d36 <__fp_split3+0xe>
    5d52:	46 95       	lsr	r20
    5d54:	f1 df       	rcall	.-30     	; 0x5d38 <__fp_splitA>
    5d56:	08 c0       	rjmp	.+16     	; 0x5d68 <__fp_splitA+0x30>
    5d58:	16 16       	cp	r1, r22
    5d5a:	17 06       	cpc	r1, r23
    5d5c:	18 06       	cpc	r1, r24
    5d5e:	99 1f       	adc	r25, r25
    5d60:	f1 cf       	rjmp	.-30     	; 0x5d44 <__fp_splitA+0xc>
    5d62:	86 95       	lsr	r24
    5d64:	71 05       	cpc	r23, r1
    5d66:	61 05       	cpc	r22, r1
    5d68:	08 94       	sec
    5d6a:	08 95       	ret

00005d6c <__fp_zero>:
    5d6c:	e8 94       	clt

00005d6e <__fp_szero>:
    5d6e:	bb 27       	eor	r27, r27
    5d70:	66 27       	eor	r22, r22
    5d72:	77 27       	eor	r23, r23
    5d74:	cb 01       	movw	r24, r22
    5d76:	97 f9       	bld	r25, 7
    5d78:	08 95       	ret

00005d7a <__mulsf3>:
    5d7a:	0b d0       	rcall	.+22     	; 0x5d92 <__mulsf3x>
    5d7c:	c4 cf       	rjmp	.-120    	; 0x5d06 <__fp_round>
    5d7e:	b5 df       	rcall	.-150    	; 0x5cea <__fp_pscA>
    5d80:	28 f0       	brcs	.+10     	; 0x5d8c <__mulsf3+0x12>
    5d82:	ba df       	rcall	.-140    	; 0x5cf8 <__fp_pscB>
    5d84:	18 f0       	brcs	.+6      	; 0x5d8c <__mulsf3+0x12>
    5d86:	95 23       	and	r25, r21
    5d88:	09 f0       	breq	.+2      	; 0x5d8c <__mulsf3+0x12>
    5d8a:	a6 cf       	rjmp	.-180    	; 0x5cd8 <__fp_inf>
    5d8c:	ab cf       	rjmp	.-170    	; 0x5ce4 <__fp_nan>
    5d8e:	11 24       	eor	r1, r1
    5d90:	ee cf       	rjmp	.-36     	; 0x5d6e <__fp_szero>

00005d92 <__mulsf3x>:
    5d92:	ca df       	rcall	.-108    	; 0x5d28 <__fp_split3>
    5d94:	a0 f3       	brcs	.-24     	; 0x5d7e <__mulsf3+0x4>

00005d96 <__mulsf3_pse>:
    5d96:	95 9f       	mul	r25, r21
    5d98:	d1 f3       	breq	.-12     	; 0x5d8e <__mulsf3+0x14>
    5d9a:	95 0f       	add	r25, r21
    5d9c:	50 e0       	ldi	r21, 0x00	; 0
    5d9e:	55 1f       	adc	r21, r21
    5da0:	62 9f       	mul	r22, r18
    5da2:	f0 01       	movw	r30, r0
    5da4:	72 9f       	mul	r23, r18
    5da6:	bb 27       	eor	r27, r27
    5da8:	f0 0d       	add	r31, r0
    5daa:	b1 1d       	adc	r27, r1
    5dac:	63 9f       	mul	r22, r19
    5dae:	aa 27       	eor	r26, r26
    5db0:	f0 0d       	add	r31, r0
    5db2:	b1 1d       	adc	r27, r1
    5db4:	aa 1f       	adc	r26, r26
    5db6:	64 9f       	mul	r22, r20
    5db8:	66 27       	eor	r22, r22
    5dba:	b0 0d       	add	r27, r0
    5dbc:	a1 1d       	adc	r26, r1
    5dbe:	66 1f       	adc	r22, r22
    5dc0:	82 9f       	mul	r24, r18
    5dc2:	22 27       	eor	r18, r18
    5dc4:	b0 0d       	add	r27, r0
    5dc6:	a1 1d       	adc	r26, r1
    5dc8:	62 1f       	adc	r22, r18
    5dca:	73 9f       	mul	r23, r19
    5dcc:	b0 0d       	add	r27, r0
    5dce:	a1 1d       	adc	r26, r1
    5dd0:	62 1f       	adc	r22, r18
    5dd2:	83 9f       	mul	r24, r19
    5dd4:	a0 0d       	add	r26, r0
    5dd6:	61 1d       	adc	r22, r1
    5dd8:	22 1f       	adc	r18, r18
    5dda:	74 9f       	mul	r23, r20
    5ddc:	33 27       	eor	r19, r19
    5dde:	a0 0d       	add	r26, r0
    5de0:	61 1d       	adc	r22, r1
    5de2:	23 1f       	adc	r18, r19
    5de4:	84 9f       	mul	r24, r20
    5de6:	60 0d       	add	r22, r0
    5de8:	21 1d       	adc	r18, r1
    5dea:	82 2f       	mov	r24, r18
    5dec:	76 2f       	mov	r23, r22
    5dee:	6a 2f       	mov	r22, r26
    5df0:	11 24       	eor	r1, r1
    5df2:	9f 57       	subi	r25, 0x7F	; 127
    5df4:	50 40       	sbci	r21, 0x00	; 0
    5df6:	8a f0       	brmi	.+34     	; 0x5e1a <__mulsf3_pse+0x84>
    5df8:	e1 f0       	breq	.+56     	; 0x5e32 <__mulsf3_pse+0x9c>
    5dfa:	88 23       	and	r24, r24
    5dfc:	4a f0       	brmi	.+18     	; 0x5e10 <__mulsf3_pse+0x7a>
    5dfe:	ee 0f       	add	r30, r30
    5e00:	ff 1f       	adc	r31, r31
    5e02:	bb 1f       	adc	r27, r27
    5e04:	66 1f       	adc	r22, r22
    5e06:	77 1f       	adc	r23, r23
    5e08:	88 1f       	adc	r24, r24
    5e0a:	91 50       	subi	r25, 0x01	; 1
    5e0c:	50 40       	sbci	r21, 0x00	; 0
    5e0e:	a9 f7       	brne	.-22     	; 0x5dfa <__mulsf3_pse+0x64>
    5e10:	9e 3f       	cpi	r25, 0xFE	; 254
    5e12:	51 05       	cpc	r21, r1
    5e14:	70 f0       	brcs	.+28     	; 0x5e32 <__mulsf3_pse+0x9c>
    5e16:	60 cf       	rjmp	.-320    	; 0x5cd8 <__fp_inf>
    5e18:	aa cf       	rjmp	.-172    	; 0x5d6e <__fp_szero>
    5e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    5e1c:	ec f3       	brlt	.-6      	; 0x5e18 <__mulsf3_pse+0x82>
    5e1e:	98 3e       	cpi	r25, 0xE8	; 232
    5e20:	dc f3       	brlt	.-10     	; 0x5e18 <__mulsf3_pse+0x82>
    5e22:	86 95       	lsr	r24
    5e24:	77 95       	ror	r23
    5e26:	67 95       	ror	r22
    5e28:	b7 95       	ror	r27
    5e2a:	f7 95       	ror	r31
    5e2c:	e7 95       	ror	r30
    5e2e:	9f 5f       	subi	r25, 0xFF	; 255
    5e30:	c1 f7       	brne	.-16     	; 0x5e22 <__mulsf3_pse+0x8c>
    5e32:	fe 2b       	or	r31, r30
    5e34:	88 0f       	add	r24, r24
    5e36:	91 1d       	adc	r25, r1
    5e38:	96 95       	lsr	r25
    5e3a:	87 95       	ror	r24
    5e3c:	97 f9       	bld	r25, 7
    5e3e:	08 95       	ret

00005e40 <__divmodhi4>:
    5e40:	97 fb       	bst	r25, 7
    5e42:	07 2e       	mov	r0, r23
    5e44:	16 f4       	brtc	.+4      	; 0x5e4a <__divmodhi4+0xa>
    5e46:	00 94       	com	r0
    5e48:	06 d0       	rcall	.+12     	; 0x5e56 <__divmodhi4_neg1>
    5e4a:	77 fd       	sbrc	r23, 7
    5e4c:	08 d0       	rcall	.+16     	; 0x5e5e <__divmodhi4_neg2>
    5e4e:	35 d0       	rcall	.+106    	; 0x5eba <__udivmodhi4>
    5e50:	07 fc       	sbrc	r0, 7
    5e52:	05 d0       	rcall	.+10     	; 0x5e5e <__divmodhi4_neg2>
    5e54:	3e f4       	brtc	.+14     	; 0x5e64 <__divmodhi4_exit>

00005e56 <__divmodhi4_neg1>:
    5e56:	90 95       	com	r25
    5e58:	81 95       	neg	r24
    5e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e5c:	08 95       	ret

00005e5e <__divmodhi4_neg2>:
    5e5e:	70 95       	com	r23
    5e60:	61 95       	neg	r22
    5e62:	7f 4f       	sbci	r23, 0xFF	; 255

00005e64 <__divmodhi4_exit>:
    5e64:	08 95       	ret

00005e66 <__udivmodsi4>:
    5e66:	a1 e2       	ldi	r26, 0x21	; 33
    5e68:	1a 2e       	mov	r1, r26
    5e6a:	aa 1b       	sub	r26, r26
    5e6c:	bb 1b       	sub	r27, r27
    5e6e:	fd 01       	movw	r30, r26
    5e70:	0d c0       	rjmp	.+26     	; 0x5e8c <__udivmodsi4_ep>

00005e72 <__udivmodsi4_loop>:
    5e72:	aa 1f       	adc	r26, r26
    5e74:	bb 1f       	adc	r27, r27
    5e76:	ee 1f       	adc	r30, r30
    5e78:	ff 1f       	adc	r31, r31
    5e7a:	a2 17       	cp	r26, r18
    5e7c:	b3 07       	cpc	r27, r19
    5e7e:	e4 07       	cpc	r30, r20
    5e80:	f5 07       	cpc	r31, r21
    5e82:	20 f0       	brcs	.+8      	; 0x5e8c <__udivmodsi4_ep>
    5e84:	a2 1b       	sub	r26, r18
    5e86:	b3 0b       	sbc	r27, r19
    5e88:	e4 0b       	sbc	r30, r20
    5e8a:	f5 0b       	sbc	r31, r21

00005e8c <__udivmodsi4_ep>:
    5e8c:	66 1f       	adc	r22, r22
    5e8e:	77 1f       	adc	r23, r23
    5e90:	88 1f       	adc	r24, r24
    5e92:	99 1f       	adc	r25, r25
    5e94:	1a 94       	dec	r1
    5e96:	69 f7       	brne	.-38     	; 0x5e72 <__udivmodsi4_loop>
    5e98:	60 95       	com	r22
    5e9a:	70 95       	com	r23
    5e9c:	80 95       	com	r24
    5e9e:	90 95       	com	r25
    5ea0:	9b 01       	movw	r18, r22
    5ea2:	ac 01       	movw	r20, r24
    5ea4:	bd 01       	movw	r22, r26
    5ea6:	cf 01       	movw	r24, r30
    5ea8:	08 95       	ret

00005eaa <__tablejump2__>:
    5eaa:	ee 0f       	add	r30, r30
    5eac:	ff 1f       	adc	r31, r31
    5eae:	88 1f       	adc	r24, r24
    5eb0:	8b bf       	out	0x3b, r24	; 59
    5eb2:	07 90       	elpm	r0, Z+
    5eb4:	f6 91       	elpm	r31, Z
    5eb6:	e0 2d       	mov	r30, r0
    5eb8:	19 94       	eijmp

00005eba <__udivmodhi4>:
    5eba:	aa 1b       	sub	r26, r26
    5ebc:	bb 1b       	sub	r27, r27
    5ebe:	51 e1       	ldi	r21, 0x11	; 17
    5ec0:	07 c0       	rjmp	.+14     	; 0x5ed0 <__udivmodhi4_ep>

00005ec2 <__udivmodhi4_loop>:
    5ec2:	aa 1f       	adc	r26, r26
    5ec4:	bb 1f       	adc	r27, r27
    5ec6:	a6 17       	cp	r26, r22
    5ec8:	b7 07       	cpc	r27, r23
    5eca:	10 f0       	brcs	.+4      	; 0x5ed0 <__udivmodhi4_ep>
    5ecc:	a6 1b       	sub	r26, r22
    5ece:	b7 0b       	sbc	r27, r23

00005ed0 <__udivmodhi4_ep>:
    5ed0:	88 1f       	adc	r24, r24
    5ed2:	99 1f       	adc	r25, r25
    5ed4:	5a 95       	dec	r21
    5ed6:	a9 f7       	brne	.-22     	; 0x5ec2 <__udivmodhi4_loop>
    5ed8:	80 95       	com	r24
    5eda:	90 95       	com	r25
    5edc:	bc 01       	movw	r22, r24
    5ede:	cd 01       	movw	r24, r26
    5ee0:	08 95       	ret

00005ee2 <calloc>:
    5ee2:	0f 93       	push	r16
    5ee4:	1f 93       	push	r17
    5ee6:	cf 93       	push	r28
    5ee8:	df 93       	push	r29
    5eea:	86 9f       	mul	r24, r22
    5eec:	80 01       	movw	r16, r0
    5eee:	87 9f       	mul	r24, r23
    5ef0:	10 0d       	add	r17, r0
    5ef2:	96 9f       	mul	r25, r22
    5ef4:	10 0d       	add	r17, r0
    5ef6:	11 24       	eor	r1, r1
    5ef8:	c8 01       	movw	r24, r16
    5efa:	0d d0       	rcall	.+26     	; 0x5f16 <malloc>
    5efc:	ec 01       	movw	r28, r24
    5efe:	00 97       	sbiw	r24, 0x00	; 0
    5f00:	21 f0       	breq	.+8      	; 0x5f0a <calloc+0x28>
    5f02:	a8 01       	movw	r20, r16
    5f04:	60 e0       	ldi	r22, 0x00	; 0
    5f06:	70 e0       	ldi	r23, 0x00	; 0
    5f08:	89 d1       	rcall	.+786    	; 0x621c <memset>
    5f0a:	ce 01       	movw	r24, r28
    5f0c:	df 91       	pop	r29
    5f0e:	cf 91       	pop	r28
    5f10:	1f 91       	pop	r17
    5f12:	0f 91       	pop	r16
    5f14:	08 95       	ret

00005f16 <malloc>:
    5f16:	0f 93       	push	r16
    5f18:	1f 93       	push	r17
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	82 30       	cpi	r24, 0x02	; 2
    5f20:	91 05       	cpc	r25, r1
    5f22:	10 f4       	brcc	.+4      	; 0x5f28 <malloc+0x12>
    5f24:	82 e0       	ldi	r24, 0x02	; 2
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <__flp>
    5f2c:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <__flp+0x1>
    5f30:	20 e0       	ldi	r18, 0x00	; 0
    5f32:	30 e0       	ldi	r19, 0x00	; 0
    5f34:	a0 e0       	ldi	r26, 0x00	; 0
    5f36:	b0 e0       	ldi	r27, 0x00	; 0
    5f38:	30 97       	sbiw	r30, 0x00	; 0
    5f3a:	19 f1       	breq	.+70     	; 0x5f82 <malloc+0x6c>
    5f3c:	40 81       	ld	r20, Z
    5f3e:	51 81       	ldd	r21, Z+1	; 0x01
    5f40:	02 81       	ldd	r16, Z+2	; 0x02
    5f42:	13 81       	ldd	r17, Z+3	; 0x03
    5f44:	48 17       	cp	r20, r24
    5f46:	59 07       	cpc	r21, r25
    5f48:	c8 f0       	brcs	.+50     	; 0x5f7c <malloc+0x66>
    5f4a:	84 17       	cp	r24, r20
    5f4c:	95 07       	cpc	r25, r21
    5f4e:	69 f4       	brne	.+26     	; 0x5f6a <malloc+0x54>
    5f50:	10 97       	sbiw	r26, 0x00	; 0
    5f52:	31 f0       	breq	.+12     	; 0x5f60 <malloc+0x4a>
    5f54:	12 96       	adiw	r26, 0x02	; 2
    5f56:	0c 93       	st	X, r16
    5f58:	12 97       	sbiw	r26, 0x02	; 2
    5f5a:	13 96       	adiw	r26, 0x03	; 3
    5f5c:	1c 93       	st	X, r17
    5f5e:	27 c0       	rjmp	.+78     	; 0x5fae <malloc+0x98>
    5f60:	00 93 7f 1a 	sts	0x1A7F, r16	; 0x801a7f <__flp>
    5f64:	10 93 80 1a 	sts	0x1A80, r17	; 0x801a80 <__flp+0x1>
    5f68:	22 c0       	rjmp	.+68     	; 0x5fae <malloc+0x98>
    5f6a:	21 15       	cp	r18, r1
    5f6c:	31 05       	cpc	r19, r1
    5f6e:	19 f0       	breq	.+6      	; 0x5f76 <malloc+0x60>
    5f70:	42 17       	cp	r20, r18
    5f72:	53 07       	cpc	r21, r19
    5f74:	18 f4       	brcc	.+6      	; 0x5f7c <malloc+0x66>
    5f76:	9a 01       	movw	r18, r20
    5f78:	bd 01       	movw	r22, r26
    5f7a:	ef 01       	movw	r28, r30
    5f7c:	df 01       	movw	r26, r30
    5f7e:	f8 01       	movw	r30, r16
    5f80:	db cf       	rjmp	.-74     	; 0x5f38 <malloc+0x22>
    5f82:	21 15       	cp	r18, r1
    5f84:	31 05       	cpc	r19, r1
    5f86:	f9 f0       	breq	.+62     	; 0x5fc6 <malloc+0xb0>
    5f88:	28 1b       	sub	r18, r24
    5f8a:	39 0b       	sbc	r19, r25
    5f8c:	24 30       	cpi	r18, 0x04	; 4
    5f8e:	31 05       	cpc	r19, r1
    5f90:	80 f4       	brcc	.+32     	; 0x5fb2 <malloc+0x9c>
    5f92:	8a 81       	ldd	r24, Y+2	; 0x02
    5f94:	9b 81       	ldd	r25, Y+3	; 0x03
    5f96:	61 15       	cp	r22, r1
    5f98:	71 05       	cpc	r23, r1
    5f9a:	21 f0       	breq	.+8      	; 0x5fa4 <malloc+0x8e>
    5f9c:	fb 01       	movw	r30, r22
    5f9e:	93 83       	std	Z+3, r25	; 0x03
    5fa0:	82 83       	std	Z+2, r24	; 0x02
    5fa2:	04 c0       	rjmp	.+8      	; 0x5fac <malloc+0x96>
    5fa4:	90 93 80 1a 	sts	0x1A80, r25	; 0x801a80 <__flp+0x1>
    5fa8:	80 93 7f 1a 	sts	0x1A7F, r24	; 0x801a7f <__flp>
    5fac:	fe 01       	movw	r30, r28
    5fae:	32 96       	adiw	r30, 0x02	; 2
    5fb0:	44 c0       	rjmp	.+136    	; 0x603a <malloc+0x124>
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	e2 0f       	add	r30, r18
    5fb6:	f3 1f       	adc	r31, r19
    5fb8:	81 93       	st	Z+, r24
    5fba:	91 93       	st	Z+, r25
    5fbc:	22 50       	subi	r18, 0x02	; 2
    5fbe:	31 09       	sbc	r19, r1
    5fc0:	39 83       	std	Y+1, r19	; 0x01
    5fc2:	28 83       	st	Y, r18
    5fc4:	3a c0       	rjmp	.+116    	; 0x603a <malloc+0x124>
    5fc6:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <__brkval>
    5fca:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <__brkval+0x1>
    5fce:	23 2b       	or	r18, r19
    5fd0:	41 f4       	brne	.+16     	; 0x5fe2 <malloc+0xcc>
    5fd2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5fd6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5fda:	30 93 7e 1a 	sts	0x1A7E, r19	; 0x801a7e <__brkval+0x1>
    5fde:	20 93 7d 1a 	sts	0x1A7D, r18	; 0x801a7d <__brkval>
    5fe2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5fe6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5fea:	21 15       	cp	r18, r1
    5fec:	31 05       	cpc	r19, r1
    5fee:	41 f4       	brne	.+16     	; 0x6000 <malloc+0xea>
    5ff0:	2d b7       	in	r18, 0x3d	; 61
    5ff2:	3e b7       	in	r19, 0x3e	; 62
    5ff4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ff8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5ffc:	24 1b       	sub	r18, r20
    5ffe:	35 0b       	sbc	r19, r21
    6000:	e0 91 7d 1a 	lds	r30, 0x1A7D	; 0x801a7d <__brkval>
    6004:	f0 91 7e 1a 	lds	r31, 0x1A7E	; 0x801a7e <__brkval+0x1>
    6008:	e2 17       	cp	r30, r18
    600a:	f3 07       	cpc	r31, r19
    600c:	a0 f4       	brcc	.+40     	; 0x6036 <malloc+0x120>
    600e:	2e 1b       	sub	r18, r30
    6010:	3f 0b       	sbc	r19, r31
    6012:	28 17       	cp	r18, r24
    6014:	39 07       	cpc	r19, r25
    6016:	78 f0       	brcs	.+30     	; 0x6036 <malloc+0x120>
    6018:	ac 01       	movw	r20, r24
    601a:	4e 5f       	subi	r20, 0xFE	; 254
    601c:	5f 4f       	sbci	r21, 0xFF	; 255
    601e:	24 17       	cp	r18, r20
    6020:	35 07       	cpc	r19, r21
    6022:	48 f0       	brcs	.+18     	; 0x6036 <malloc+0x120>
    6024:	4e 0f       	add	r20, r30
    6026:	5f 1f       	adc	r21, r31
    6028:	50 93 7e 1a 	sts	0x1A7E, r21	; 0x801a7e <__brkval+0x1>
    602c:	40 93 7d 1a 	sts	0x1A7D, r20	; 0x801a7d <__brkval>
    6030:	81 93       	st	Z+, r24
    6032:	91 93       	st	Z+, r25
    6034:	02 c0       	rjmp	.+4      	; 0x603a <malloc+0x124>
    6036:	e0 e0       	ldi	r30, 0x00	; 0
    6038:	f0 e0       	ldi	r31, 0x00	; 0
    603a:	cf 01       	movw	r24, r30
    603c:	df 91       	pop	r29
    603e:	cf 91       	pop	r28
    6040:	1f 91       	pop	r17
    6042:	0f 91       	pop	r16
    6044:	08 95       	ret

00006046 <free>:
    6046:	cf 93       	push	r28
    6048:	df 93       	push	r29
    604a:	00 97       	sbiw	r24, 0x00	; 0
    604c:	09 f4       	brne	.+2      	; 0x6050 <free+0xa>
    604e:	81 c0       	rjmp	.+258    	; 0x6152 <free+0x10c>
    6050:	fc 01       	movw	r30, r24
    6052:	32 97       	sbiw	r30, 0x02	; 2
    6054:	13 82       	std	Z+3, r1	; 0x03
    6056:	12 82       	std	Z+2, r1	; 0x02
    6058:	a0 91 7f 1a 	lds	r26, 0x1A7F	; 0x801a7f <__flp>
    605c:	b0 91 80 1a 	lds	r27, 0x1A80	; 0x801a80 <__flp+0x1>
    6060:	10 97       	sbiw	r26, 0x00	; 0
    6062:	81 f4       	brne	.+32     	; 0x6084 <free+0x3e>
    6064:	20 81       	ld	r18, Z
    6066:	31 81       	ldd	r19, Z+1	; 0x01
    6068:	82 0f       	add	r24, r18
    606a:	93 1f       	adc	r25, r19
    606c:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <__brkval>
    6070:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <__brkval+0x1>
    6074:	28 17       	cp	r18, r24
    6076:	39 07       	cpc	r19, r25
    6078:	51 f5       	brne	.+84     	; 0x60ce <free+0x88>
    607a:	f0 93 7e 1a 	sts	0x1A7E, r31	; 0x801a7e <__brkval+0x1>
    607e:	e0 93 7d 1a 	sts	0x1A7D, r30	; 0x801a7d <__brkval>
    6082:	67 c0       	rjmp	.+206    	; 0x6152 <free+0x10c>
    6084:	ed 01       	movw	r28, r26
    6086:	20 e0       	ldi	r18, 0x00	; 0
    6088:	30 e0       	ldi	r19, 0x00	; 0
    608a:	ce 17       	cp	r28, r30
    608c:	df 07       	cpc	r29, r31
    608e:	40 f4       	brcc	.+16     	; 0x60a0 <free+0x5a>
    6090:	4a 81       	ldd	r20, Y+2	; 0x02
    6092:	5b 81       	ldd	r21, Y+3	; 0x03
    6094:	9e 01       	movw	r18, r28
    6096:	41 15       	cp	r20, r1
    6098:	51 05       	cpc	r21, r1
    609a:	f1 f0       	breq	.+60     	; 0x60d8 <free+0x92>
    609c:	ea 01       	movw	r28, r20
    609e:	f5 cf       	rjmp	.-22     	; 0x608a <free+0x44>
    60a0:	d3 83       	std	Z+3, r29	; 0x03
    60a2:	c2 83       	std	Z+2, r28	; 0x02
    60a4:	40 81       	ld	r20, Z
    60a6:	51 81       	ldd	r21, Z+1	; 0x01
    60a8:	84 0f       	add	r24, r20
    60aa:	95 1f       	adc	r25, r21
    60ac:	c8 17       	cp	r28, r24
    60ae:	d9 07       	cpc	r29, r25
    60b0:	59 f4       	brne	.+22     	; 0x60c8 <free+0x82>
    60b2:	88 81       	ld	r24, Y
    60b4:	99 81       	ldd	r25, Y+1	; 0x01
    60b6:	84 0f       	add	r24, r20
    60b8:	95 1f       	adc	r25, r21
    60ba:	02 96       	adiw	r24, 0x02	; 2
    60bc:	91 83       	std	Z+1, r25	; 0x01
    60be:	80 83       	st	Z, r24
    60c0:	8a 81       	ldd	r24, Y+2	; 0x02
    60c2:	9b 81       	ldd	r25, Y+3	; 0x03
    60c4:	93 83       	std	Z+3, r25	; 0x03
    60c6:	82 83       	std	Z+2, r24	; 0x02
    60c8:	21 15       	cp	r18, r1
    60ca:	31 05       	cpc	r19, r1
    60cc:	29 f4       	brne	.+10     	; 0x60d8 <free+0x92>
    60ce:	f0 93 80 1a 	sts	0x1A80, r31	; 0x801a80 <__flp+0x1>
    60d2:	e0 93 7f 1a 	sts	0x1A7F, r30	; 0x801a7f <__flp>
    60d6:	3d c0       	rjmp	.+122    	; 0x6152 <free+0x10c>
    60d8:	e9 01       	movw	r28, r18
    60da:	fb 83       	std	Y+3, r31	; 0x03
    60dc:	ea 83       	std	Y+2, r30	; 0x02
    60de:	49 91       	ld	r20, Y+
    60e0:	59 91       	ld	r21, Y+
    60e2:	c4 0f       	add	r28, r20
    60e4:	d5 1f       	adc	r29, r21
    60e6:	ec 17       	cp	r30, r28
    60e8:	fd 07       	cpc	r31, r29
    60ea:	61 f4       	brne	.+24     	; 0x6104 <free+0xbe>
    60ec:	80 81       	ld	r24, Z
    60ee:	91 81       	ldd	r25, Z+1	; 0x01
    60f0:	84 0f       	add	r24, r20
    60f2:	95 1f       	adc	r25, r21
    60f4:	02 96       	adiw	r24, 0x02	; 2
    60f6:	e9 01       	movw	r28, r18
    60f8:	99 83       	std	Y+1, r25	; 0x01
    60fa:	88 83       	st	Y, r24
    60fc:	82 81       	ldd	r24, Z+2	; 0x02
    60fe:	93 81       	ldd	r25, Z+3	; 0x03
    6100:	9b 83       	std	Y+3, r25	; 0x03
    6102:	8a 83       	std	Y+2, r24	; 0x02
    6104:	e0 e0       	ldi	r30, 0x00	; 0
    6106:	f0 e0       	ldi	r31, 0x00	; 0
    6108:	12 96       	adiw	r26, 0x02	; 2
    610a:	8d 91       	ld	r24, X+
    610c:	9c 91       	ld	r25, X
    610e:	13 97       	sbiw	r26, 0x03	; 3
    6110:	00 97       	sbiw	r24, 0x00	; 0
    6112:	19 f0       	breq	.+6      	; 0x611a <free+0xd4>
    6114:	fd 01       	movw	r30, r26
    6116:	dc 01       	movw	r26, r24
    6118:	f7 cf       	rjmp	.-18     	; 0x6108 <free+0xc2>
    611a:	8d 91       	ld	r24, X+
    611c:	9c 91       	ld	r25, X
    611e:	11 97       	sbiw	r26, 0x01	; 1
    6120:	9d 01       	movw	r18, r26
    6122:	2e 5f       	subi	r18, 0xFE	; 254
    6124:	3f 4f       	sbci	r19, 0xFF	; 255
    6126:	82 0f       	add	r24, r18
    6128:	93 1f       	adc	r25, r19
    612a:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <__brkval>
    612e:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <__brkval+0x1>
    6132:	28 17       	cp	r18, r24
    6134:	39 07       	cpc	r19, r25
    6136:	69 f4       	brne	.+26     	; 0x6152 <free+0x10c>
    6138:	30 97       	sbiw	r30, 0x00	; 0
    613a:	29 f4       	brne	.+10     	; 0x6146 <free+0x100>
    613c:	10 92 80 1a 	sts	0x1A80, r1	; 0x801a80 <__flp+0x1>
    6140:	10 92 7f 1a 	sts	0x1A7F, r1	; 0x801a7f <__flp>
    6144:	02 c0       	rjmp	.+4      	; 0x614a <free+0x104>
    6146:	13 82       	std	Z+3, r1	; 0x03
    6148:	12 82       	std	Z+2, r1	; 0x02
    614a:	b0 93 7e 1a 	sts	0x1A7E, r27	; 0x801a7e <__brkval+0x1>
    614e:	a0 93 7d 1a 	sts	0x1A7D, r26	; 0x801a7d <__brkval>
    6152:	df 91       	pop	r29
    6154:	cf 91       	pop	r28
    6156:	08 95       	ret

00006158 <do_rand>:
    6158:	8f 92       	push	r8
    615a:	9f 92       	push	r9
    615c:	af 92       	push	r10
    615e:	bf 92       	push	r11
    6160:	cf 92       	push	r12
    6162:	df 92       	push	r13
    6164:	ef 92       	push	r14
    6166:	ff 92       	push	r15
    6168:	cf 93       	push	r28
    616a:	df 93       	push	r29
    616c:	ec 01       	movw	r28, r24
    616e:	68 81       	ld	r22, Y
    6170:	79 81       	ldd	r23, Y+1	; 0x01
    6172:	8a 81       	ldd	r24, Y+2	; 0x02
    6174:	9b 81       	ldd	r25, Y+3	; 0x03
    6176:	61 15       	cp	r22, r1
    6178:	71 05       	cpc	r23, r1
    617a:	81 05       	cpc	r24, r1
    617c:	91 05       	cpc	r25, r1
    617e:	21 f4       	brne	.+8      	; 0x6188 <do_rand+0x30>
    6180:	64 e2       	ldi	r22, 0x24	; 36
    6182:	79 ed       	ldi	r23, 0xD9	; 217
    6184:	8b e5       	ldi	r24, 0x5B	; 91
    6186:	97 e0       	ldi	r25, 0x07	; 7
    6188:	2d e1       	ldi	r18, 0x1D	; 29
    618a:	33 ef       	ldi	r19, 0xF3	; 243
    618c:	41 e0       	ldi	r20, 0x01	; 1
    618e:	50 e0       	ldi	r21, 0x00	; 0
    6190:	b9 d3       	rcall	.+1906   	; 0x6904 <__divmodsi4>
    6192:	49 01       	movw	r8, r18
    6194:	5a 01       	movw	r10, r20
    6196:	9b 01       	movw	r18, r22
    6198:	ac 01       	movw	r20, r24
    619a:	a7 ea       	ldi	r26, 0xA7	; 167
    619c:	b1 e4       	ldi	r27, 0x41	; 65
    619e:	ce d3       	rcall	.+1948   	; 0x693c <__muluhisi3>
    61a0:	6b 01       	movw	r12, r22
    61a2:	7c 01       	movw	r14, r24
    61a4:	ac ee       	ldi	r26, 0xEC	; 236
    61a6:	b4 ef       	ldi	r27, 0xF4	; 244
    61a8:	a5 01       	movw	r20, r10
    61aa:	94 01       	movw	r18, r8
    61ac:	d3 d3       	rcall	.+1958   	; 0x6954 <__mulohisi3>
    61ae:	dc 01       	movw	r26, r24
    61b0:	cb 01       	movw	r24, r22
    61b2:	8c 0d       	add	r24, r12
    61b4:	9d 1d       	adc	r25, r13
    61b6:	ae 1d       	adc	r26, r14
    61b8:	bf 1d       	adc	r27, r15
    61ba:	b7 ff       	sbrs	r27, 7
    61bc:	03 c0       	rjmp	.+6      	; 0x61c4 <do_rand+0x6c>
    61be:	01 97       	sbiw	r24, 0x01	; 1
    61c0:	a1 09       	sbc	r26, r1
    61c2:	b0 48       	sbci	r27, 0x80	; 128
    61c4:	88 83       	st	Y, r24
    61c6:	99 83       	std	Y+1, r25	; 0x01
    61c8:	aa 83       	std	Y+2, r26	; 0x02
    61ca:	bb 83       	std	Y+3, r27	; 0x03
    61cc:	9f 77       	andi	r25, 0x7F	; 127
    61ce:	df 91       	pop	r29
    61d0:	cf 91       	pop	r28
    61d2:	ff 90       	pop	r15
    61d4:	ef 90       	pop	r14
    61d6:	df 90       	pop	r13
    61d8:	cf 90       	pop	r12
    61da:	bf 90       	pop	r11
    61dc:	af 90       	pop	r10
    61de:	9f 90       	pop	r9
    61e0:	8f 90       	pop	r8
    61e2:	08 95       	ret

000061e4 <rand_r>:
    61e4:	b9 cf       	rjmp	.-142    	; 0x6158 <do_rand>

000061e6 <rand>:
    61e6:	86 e0       	ldi	r24, 0x06	; 6
    61e8:	92 e0       	ldi	r25, 0x02	; 2
    61ea:	b6 cf       	rjmp	.-148    	; 0x6158 <do_rand>

000061ec <srand>:
    61ec:	a0 e0       	ldi	r26, 0x00	; 0
    61ee:	b0 e0       	ldi	r27, 0x00	; 0
    61f0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    61f4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    61f8:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    61fc:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    6200:	08 95       	ret

00006202 <abort>:
    6202:	81 e0       	ldi	r24, 0x01	; 1
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	f8 94       	cli
    6208:	b8 c3       	rjmp	.+1904   	; 0x697a <_exit>

0000620a <memcpy>:
    620a:	fb 01       	movw	r30, r22
    620c:	dc 01       	movw	r26, r24
    620e:	02 c0       	rjmp	.+4      	; 0x6214 <memcpy+0xa>
    6210:	01 90       	ld	r0, Z+
    6212:	0d 92       	st	X+, r0
    6214:	41 50       	subi	r20, 0x01	; 1
    6216:	50 40       	sbci	r21, 0x00	; 0
    6218:	d8 f7       	brcc	.-10     	; 0x6210 <memcpy+0x6>
    621a:	08 95       	ret

0000621c <memset>:
    621c:	dc 01       	movw	r26, r24
    621e:	01 c0       	rjmp	.+2      	; 0x6222 <memset+0x6>
    6220:	6d 93       	st	X+, r22
    6222:	41 50       	subi	r20, 0x01	; 1
    6224:	50 40       	sbci	r21, 0x00	; 0
    6226:	e0 f7       	brcc	.-8      	; 0x6220 <memset+0x4>
    6228:	08 95       	ret

0000622a <strcasestr>:
    622a:	fb 01       	movw	r30, r22
    622c:	51 91       	ld	r21, Z+
    622e:	55 23       	and	r21, r21
    6230:	b1 f0       	breq	.+44     	; 0x625e <strcasestr+0x34>
    6232:	bf 01       	movw	r22, r30
    6234:	dc 01       	movw	r26, r24
    6236:	05 2e       	mov	r0, r21
    6238:	4d 91       	ld	r20, X+
    623a:	44 23       	and	r20, r20
    623c:	69 f0       	breq	.+26     	; 0x6258 <strcasestr+0x2e>
    623e:	10 d0       	rcall	.+32     	; 0x6260 <strcasestr+0x36>
    6240:	d9 f7       	brne	.-10     	; 0x6238 <strcasestr+0xe>
    6242:	cd 01       	movw	r24, r26
    6244:	01 90       	ld	r0, Z+
    6246:	00 20       	and	r0, r0
    6248:	49 f0       	breq	.+18     	; 0x625c <strcasestr+0x32>
    624a:	4d 91       	ld	r20, X+
    624c:	41 11       	cpse	r20, r1
    624e:	08 d0       	rcall	.+16     	; 0x6260 <strcasestr+0x36>
    6250:	c9 f3       	breq	.-14     	; 0x6244 <strcasestr+0x1a>
    6252:	fb 01       	movw	r30, r22
    6254:	41 11       	cpse	r20, r1
    6256:	ee cf       	rjmp	.-36     	; 0x6234 <strcasestr+0xa>
    6258:	81 e0       	ldi	r24, 0x01	; 1
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	01 97       	sbiw	r24, 0x01	; 1
    625e:	08 95       	ret
    6260:	40 25       	eor	r20, r0
    6262:	39 f0       	breq	.+14     	; 0x6272 <strcasestr+0x48>
    6264:	40 32       	cpi	r20, 0x20	; 32
    6266:	29 f4       	brne	.+10     	; 0x6272 <strcasestr+0x48>
    6268:	40 29       	or	r20, r0
    626a:	4b 57       	subi	r20, 0x7B	; 123
    626c:	46 5e       	subi	r20, 0xE6	; 230
    626e:	08 f0       	brcs	.+2      	; 0x6272 <strcasestr+0x48>
    6270:	18 94       	sez
    6272:	08 95       	ret

00006274 <strcat>:
    6274:	fb 01       	movw	r30, r22
    6276:	dc 01       	movw	r26, r24
    6278:	0d 90       	ld	r0, X+
    627a:	00 20       	and	r0, r0
    627c:	e9 f7       	brne	.-6      	; 0x6278 <strcat+0x4>
    627e:	11 97       	sbiw	r26, 0x01	; 1
    6280:	01 90       	ld	r0, Z+
    6282:	0d 92       	st	X+, r0
    6284:	00 20       	and	r0, r0
    6286:	e1 f7       	brne	.-8      	; 0x6280 <strcat+0xc>
    6288:	08 95       	ret

0000628a <strcpy>:
    628a:	fb 01       	movw	r30, r22
    628c:	dc 01       	movw	r26, r24
    628e:	01 90       	ld	r0, Z+
    6290:	0d 92       	st	X+, r0
    6292:	00 20       	and	r0, r0
    6294:	e1 f7       	brne	.-8      	; 0x628e <strcpy+0x4>
    6296:	08 95       	ret

00006298 <strncasecmp>:
    6298:	fb 01       	movw	r30, r22
    629a:	dc 01       	movw	r26, r24
    629c:	41 50       	subi	r20, 0x01	; 1
    629e:	50 40       	sbci	r21, 0x00	; 0
    62a0:	88 f0       	brcs	.+34     	; 0x62c4 <strncasecmp+0x2c>
    62a2:	8d 91       	ld	r24, X+
    62a4:	81 34       	cpi	r24, 0x41	; 65
    62a6:	1c f0       	brlt	.+6      	; 0x62ae <strncasecmp+0x16>
    62a8:	8b 35       	cpi	r24, 0x5B	; 91
    62aa:	0c f4       	brge	.+2      	; 0x62ae <strncasecmp+0x16>
    62ac:	80 5e       	subi	r24, 0xE0	; 224
    62ae:	61 91       	ld	r22, Z+
    62b0:	61 34       	cpi	r22, 0x41	; 65
    62b2:	1c f0       	brlt	.+6      	; 0x62ba <strncasecmp+0x22>
    62b4:	6b 35       	cpi	r22, 0x5B	; 91
    62b6:	0c f4       	brge	.+2      	; 0x62ba <strncasecmp+0x22>
    62b8:	60 5e       	subi	r22, 0xE0	; 224
    62ba:	86 1b       	sub	r24, r22
    62bc:	61 11       	cpse	r22, r1
    62be:	71 f3       	breq	.-36     	; 0x629c <strncasecmp+0x4>
    62c0:	99 0b       	sbc	r25, r25
    62c2:	08 95       	ret
    62c4:	88 1b       	sub	r24, r24
    62c6:	fc cf       	rjmp	.-8      	; 0x62c0 <strncasecmp+0x28>

000062c8 <printf>:
    62c8:	cf 93       	push	r28
    62ca:	df 93       	push	r29
    62cc:	cd b7       	in	r28, 0x3d	; 61
    62ce:	de b7       	in	r29, 0x3e	; 62
    62d0:	ae 01       	movw	r20, r28
    62d2:	4a 5f       	subi	r20, 0xFA	; 250
    62d4:	5f 4f       	sbci	r21, 0xFF	; 255
    62d6:	fa 01       	movw	r30, r20
    62d8:	61 91       	ld	r22, Z+
    62da:	71 91       	ld	r23, Z+
    62dc:	af 01       	movw	r20, r30
    62de:	80 91 83 1a 	lds	r24, 0x1A83	; 0x801a83 <__iob+0x2>
    62e2:	90 91 84 1a 	lds	r25, 0x1A84	; 0x801a84 <__iob+0x3>
    62e6:	61 d0       	rcall	.+194    	; 0x63aa <vfprintf>
    62e8:	df 91       	pop	r29
    62ea:	cf 91       	pop	r28
    62ec:	08 95       	ret

000062ee <puts>:
    62ee:	0f 93       	push	r16
    62f0:	1f 93       	push	r17
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	e0 91 83 1a 	lds	r30, 0x1A83	; 0x801a83 <__iob+0x2>
    62fa:	f0 91 84 1a 	lds	r31, 0x1A84	; 0x801a84 <__iob+0x3>
    62fe:	23 81       	ldd	r18, Z+3	; 0x03
    6300:	21 ff       	sbrs	r18, 1
    6302:	1b c0       	rjmp	.+54     	; 0x633a <puts+0x4c>
    6304:	8c 01       	movw	r16, r24
    6306:	d0 e0       	ldi	r29, 0x00	; 0
    6308:	c0 e0       	ldi	r28, 0x00	; 0
    630a:	f8 01       	movw	r30, r16
    630c:	81 91       	ld	r24, Z+
    630e:	8f 01       	movw	r16, r30
    6310:	60 91 83 1a 	lds	r22, 0x1A83	; 0x801a83 <__iob+0x2>
    6314:	70 91 84 1a 	lds	r23, 0x1A84	; 0x801a84 <__iob+0x3>
    6318:	db 01       	movw	r26, r22
    631a:	18 96       	adiw	r26, 0x08	; 8
    631c:	ed 91       	ld	r30, X+
    631e:	fc 91       	ld	r31, X
    6320:	19 97       	sbiw	r26, 0x09	; 9
    6322:	88 23       	and	r24, r24
    6324:	31 f0       	breq	.+12     	; 0x6332 <puts+0x44>
    6326:	19 95       	eicall
    6328:	89 2b       	or	r24, r25
    632a:	79 f3       	breq	.-34     	; 0x630a <puts+0x1c>
    632c:	df ef       	ldi	r29, 0xFF	; 255
    632e:	cf ef       	ldi	r28, 0xFF	; 255
    6330:	ec cf       	rjmp	.-40     	; 0x630a <puts+0x1c>
    6332:	8a e0       	ldi	r24, 0x0A	; 10
    6334:	19 95       	eicall
    6336:	89 2b       	or	r24, r25
    6338:	19 f0       	breq	.+6      	; 0x6340 <puts+0x52>
    633a:	8f ef       	ldi	r24, 0xFF	; 255
    633c:	9f ef       	ldi	r25, 0xFF	; 255
    633e:	02 c0       	rjmp	.+4      	; 0x6344 <puts+0x56>
    6340:	8d 2f       	mov	r24, r29
    6342:	9c 2f       	mov	r25, r28
    6344:	df 91       	pop	r29
    6346:	cf 91       	pop	r28
    6348:	1f 91       	pop	r17
    634a:	0f 91       	pop	r16
    634c:	08 95       	ret

0000634e <sprintf>:
    634e:	0f 93       	push	r16
    6350:	1f 93       	push	r17
    6352:	cf 93       	push	r28
    6354:	df 93       	push	r29
    6356:	cd b7       	in	r28, 0x3d	; 61
    6358:	de b7       	in	r29, 0x3e	; 62
    635a:	2e 97       	sbiw	r28, 0x0e	; 14
    635c:	0f b6       	in	r0, 0x3f	; 63
    635e:	f8 94       	cli
    6360:	de bf       	out	0x3e, r29	; 62
    6362:	0f be       	out	0x3f, r0	; 63
    6364:	cd bf       	out	0x3d, r28	; 61
    6366:	0e 89       	ldd	r16, Y+22	; 0x16
    6368:	1f 89       	ldd	r17, Y+23	; 0x17
    636a:	86 e0       	ldi	r24, 0x06	; 6
    636c:	8c 83       	std	Y+4, r24	; 0x04
    636e:	1a 83       	std	Y+2, r17	; 0x02
    6370:	09 83       	std	Y+1, r16	; 0x01
    6372:	8f ef       	ldi	r24, 0xFF	; 255
    6374:	9f e7       	ldi	r25, 0x7F	; 127
    6376:	9e 83       	std	Y+6, r25	; 0x06
    6378:	8d 83       	std	Y+5, r24	; 0x05
    637a:	ae 01       	movw	r20, r28
    637c:	46 5e       	subi	r20, 0xE6	; 230
    637e:	5f 4f       	sbci	r21, 0xFF	; 255
    6380:	68 8d       	ldd	r22, Y+24	; 0x18
    6382:	79 8d       	ldd	r23, Y+25	; 0x19
    6384:	ce 01       	movw	r24, r28
    6386:	01 96       	adiw	r24, 0x01	; 1
    6388:	10 d0       	rcall	.+32     	; 0x63aa <vfprintf>
    638a:	ef 81       	ldd	r30, Y+7	; 0x07
    638c:	f8 85       	ldd	r31, Y+8	; 0x08
    638e:	e0 0f       	add	r30, r16
    6390:	f1 1f       	adc	r31, r17
    6392:	10 82       	st	Z, r1
    6394:	2e 96       	adiw	r28, 0x0e	; 14
    6396:	0f b6       	in	r0, 0x3f	; 63
    6398:	f8 94       	cli
    639a:	de bf       	out	0x3e, r29	; 62
    639c:	0f be       	out	0x3f, r0	; 63
    639e:	cd bf       	out	0x3d, r28	; 61
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	1f 91       	pop	r17
    63a6:	0f 91       	pop	r16
    63a8:	08 95       	ret

000063aa <vfprintf>:
    63aa:	2f 92       	push	r2
    63ac:	3f 92       	push	r3
    63ae:	4f 92       	push	r4
    63b0:	5f 92       	push	r5
    63b2:	6f 92       	push	r6
    63b4:	7f 92       	push	r7
    63b6:	8f 92       	push	r8
    63b8:	9f 92       	push	r9
    63ba:	af 92       	push	r10
    63bc:	bf 92       	push	r11
    63be:	cf 92       	push	r12
    63c0:	df 92       	push	r13
    63c2:	ef 92       	push	r14
    63c4:	ff 92       	push	r15
    63c6:	0f 93       	push	r16
    63c8:	1f 93       	push	r17
    63ca:	cf 93       	push	r28
    63cc:	df 93       	push	r29
    63ce:	cd b7       	in	r28, 0x3d	; 61
    63d0:	de b7       	in	r29, 0x3e	; 62
    63d2:	2b 97       	sbiw	r28, 0x0b	; 11
    63d4:	0f b6       	in	r0, 0x3f	; 63
    63d6:	f8 94       	cli
    63d8:	de bf       	out	0x3e, r29	; 62
    63da:	0f be       	out	0x3f, r0	; 63
    63dc:	cd bf       	out	0x3d, r28	; 61
    63de:	6c 01       	movw	r12, r24
    63e0:	7b 01       	movw	r14, r22
    63e2:	8a 01       	movw	r16, r20
    63e4:	fc 01       	movw	r30, r24
    63e6:	17 82       	std	Z+7, r1	; 0x07
    63e8:	16 82       	std	Z+6, r1	; 0x06
    63ea:	83 81       	ldd	r24, Z+3	; 0x03
    63ec:	81 ff       	sbrs	r24, 1
    63ee:	bf c1       	rjmp	.+894    	; 0x676e <vfprintf+0x3c4>
    63f0:	ce 01       	movw	r24, r28
    63f2:	01 96       	adiw	r24, 0x01	; 1
    63f4:	3c 01       	movw	r6, r24
    63f6:	f6 01       	movw	r30, r12
    63f8:	93 81       	ldd	r25, Z+3	; 0x03
    63fa:	f7 01       	movw	r30, r14
    63fc:	93 fd       	sbrc	r25, 3
    63fe:	85 91       	lpm	r24, Z+
    6400:	93 ff       	sbrs	r25, 3
    6402:	81 91       	ld	r24, Z+
    6404:	7f 01       	movw	r14, r30
    6406:	88 23       	and	r24, r24
    6408:	09 f4       	brne	.+2      	; 0x640c <vfprintf+0x62>
    640a:	ad c1       	rjmp	.+858    	; 0x6766 <vfprintf+0x3bc>
    640c:	85 32       	cpi	r24, 0x25	; 37
    640e:	39 f4       	brne	.+14     	; 0x641e <vfprintf+0x74>
    6410:	93 fd       	sbrc	r25, 3
    6412:	85 91       	lpm	r24, Z+
    6414:	93 ff       	sbrs	r25, 3
    6416:	81 91       	ld	r24, Z+
    6418:	7f 01       	movw	r14, r30
    641a:	85 32       	cpi	r24, 0x25	; 37
    641c:	21 f4       	brne	.+8      	; 0x6426 <vfprintf+0x7c>
    641e:	b6 01       	movw	r22, r12
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	d6 d1       	rcall	.+940    	; 0x67d0 <fputc>
    6424:	e8 cf       	rjmp	.-48     	; 0x63f6 <vfprintf+0x4c>
    6426:	91 2c       	mov	r9, r1
    6428:	21 2c       	mov	r2, r1
    642a:	31 2c       	mov	r3, r1
    642c:	ff e1       	ldi	r31, 0x1F	; 31
    642e:	f3 15       	cp	r31, r3
    6430:	d8 f0       	brcs	.+54     	; 0x6468 <vfprintf+0xbe>
    6432:	8b 32       	cpi	r24, 0x2B	; 43
    6434:	79 f0       	breq	.+30     	; 0x6454 <vfprintf+0xaa>
    6436:	38 f4       	brcc	.+14     	; 0x6446 <vfprintf+0x9c>
    6438:	80 32       	cpi	r24, 0x20	; 32
    643a:	79 f0       	breq	.+30     	; 0x645a <vfprintf+0xb0>
    643c:	83 32       	cpi	r24, 0x23	; 35
    643e:	a1 f4       	brne	.+40     	; 0x6468 <vfprintf+0xbe>
    6440:	23 2d       	mov	r18, r3
    6442:	20 61       	ori	r18, 0x10	; 16
    6444:	1d c0       	rjmp	.+58     	; 0x6480 <vfprintf+0xd6>
    6446:	8d 32       	cpi	r24, 0x2D	; 45
    6448:	61 f0       	breq	.+24     	; 0x6462 <vfprintf+0xb8>
    644a:	80 33       	cpi	r24, 0x30	; 48
    644c:	69 f4       	brne	.+26     	; 0x6468 <vfprintf+0xbe>
    644e:	23 2d       	mov	r18, r3
    6450:	21 60       	ori	r18, 0x01	; 1
    6452:	16 c0       	rjmp	.+44     	; 0x6480 <vfprintf+0xd6>
    6454:	83 2d       	mov	r24, r3
    6456:	82 60       	ori	r24, 0x02	; 2
    6458:	38 2e       	mov	r3, r24
    645a:	e3 2d       	mov	r30, r3
    645c:	e4 60       	ori	r30, 0x04	; 4
    645e:	3e 2e       	mov	r3, r30
    6460:	2a c0       	rjmp	.+84     	; 0x64b6 <vfprintf+0x10c>
    6462:	f3 2d       	mov	r31, r3
    6464:	f8 60       	ori	r31, 0x08	; 8
    6466:	1d c0       	rjmp	.+58     	; 0x64a2 <vfprintf+0xf8>
    6468:	37 fc       	sbrc	r3, 7
    646a:	2d c0       	rjmp	.+90     	; 0x64c6 <vfprintf+0x11c>
    646c:	20 ed       	ldi	r18, 0xD0	; 208
    646e:	28 0f       	add	r18, r24
    6470:	2a 30       	cpi	r18, 0x0A	; 10
    6472:	40 f0       	brcs	.+16     	; 0x6484 <vfprintf+0xda>
    6474:	8e 32       	cpi	r24, 0x2E	; 46
    6476:	b9 f4       	brne	.+46     	; 0x64a6 <vfprintf+0xfc>
    6478:	36 fc       	sbrc	r3, 6
    647a:	75 c1       	rjmp	.+746    	; 0x6766 <vfprintf+0x3bc>
    647c:	23 2d       	mov	r18, r3
    647e:	20 64       	ori	r18, 0x40	; 64
    6480:	32 2e       	mov	r3, r18
    6482:	19 c0       	rjmp	.+50     	; 0x64b6 <vfprintf+0x10c>
    6484:	36 fe       	sbrs	r3, 6
    6486:	06 c0       	rjmp	.+12     	; 0x6494 <vfprintf+0xea>
    6488:	8a e0       	ldi	r24, 0x0A	; 10
    648a:	98 9e       	mul	r9, r24
    648c:	20 0d       	add	r18, r0
    648e:	11 24       	eor	r1, r1
    6490:	92 2e       	mov	r9, r18
    6492:	11 c0       	rjmp	.+34     	; 0x64b6 <vfprintf+0x10c>
    6494:	ea e0       	ldi	r30, 0x0A	; 10
    6496:	2e 9e       	mul	r2, r30
    6498:	20 0d       	add	r18, r0
    649a:	11 24       	eor	r1, r1
    649c:	22 2e       	mov	r2, r18
    649e:	f3 2d       	mov	r31, r3
    64a0:	f0 62       	ori	r31, 0x20	; 32
    64a2:	3f 2e       	mov	r3, r31
    64a4:	08 c0       	rjmp	.+16     	; 0x64b6 <vfprintf+0x10c>
    64a6:	8c 36       	cpi	r24, 0x6C	; 108
    64a8:	21 f4       	brne	.+8      	; 0x64b2 <vfprintf+0x108>
    64aa:	83 2d       	mov	r24, r3
    64ac:	80 68       	ori	r24, 0x80	; 128
    64ae:	38 2e       	mov	r3, r24
    64b0:	02 c0       	rjmp	.+4      	; 0x64b6 <vfprintf+0x10c>
    64b2:	88 36       	cpi	r24, 0x68	; 104
    64b4:	41 f4       	brne	.+16     	; 0x64c6 <vfprintf+0x11c>
    64b6:	f7 01       	movw	r30, r14
    64b8:	93 fd       	sbrc	r25, 3
    64ba:	85 91       	lpm	r24, Z+
    64bc:	93 ff       	sbrs	r25, 3
    64be:	81 91       	ld	r24, Z+
    64c0:	7f 01       	movw	r14, r30
    64c2:	81 11       	cpse	r24, r1
    64c4:	b3 cf       	rjmp	.-154    	; 0x642c <vfprintf+0x82>
    64c6:	98 2f       	mov	r25, r24
    64c8:	9f 7d       	andi	r25, 0xDF	; 223
    64ca:	95 54       	subi	r25, 0x45	; 69
    64cc:	93 30       	cpi	r25, 0x03	; 3
    64ce:	28 f4       	brcc	.+10     	; 0x64da <vfprintf+0x130>
    64d0:	0c 5f       	subi	r16, 0xFC	; 252
    64d2:	1f 4f       	sbci	r17, 0xFF	; 255
    64d4:	9f e3       	ldi	r25, 0x3F	; 63
    64d6:	99 83       	std	Y+1, r25	; 0x01
    64d8:	0d c0       	rjmp	.+26     	; 0x64f4 <vfprintf+0x14a>
    64da:	83 36       	cpi	r24, 0x63	; 99
    64dc:	31 f0       	breq	.+12     	; 0x64ea <vfprintf+0x140>
    64de:	83 37       	cpi	r24, 0x73	; 115
    64e0:	71 f0       	breq	.+28     	; 0x64fe <vfprintf+0x154>
    64e2:	83 35       	cpi	r24, 0x53	; 83
    64e4:	09 f0       	breq	.+2      	; 0x64e8 <vfprintf+0x13e>
    64e6:	55 c0       	rjmp	.+170    	; 0x6592 <vfprintf+0x1e8>
    64e8:	20 c0       	rjmp	.+64     	; 0x652a <vfprintf+0x180>
    64ea:	f8 01       	movw	r30, r16
    64ec:	80 81       	ld	r24, Z
    64ee:	89 83       	std	Y+1, r24	; 0x01
    64f0:	0e 5f       	subi	r16, 0xFE	; 254
    64f2:	1f 4f       	sbci	r17, 0xFF	; 255
    64f4:	88 24       	eor	r8, r8
    64f6:	83 94       	inc	r8
    64f8:	91 2c       	mov	r9, r1
    64fa:	53 01       	movw	r10, r6
    64fc:	12 c0       	rjmp	.+36     	; 0x6522 <vfprintf+0x178>
    64fe:	28 01       	movw	r4, r16
    6500:	f2 e0       	ldi	r31, 0x02	; 2
    6502:	4f 0e       	add	r4, r31
    6504:	51 1c       	adc	r5, r1
    6506:	f8 01       	movw	r30, r16
    6508:	a0 80       	ld	r10, Z
    650a:	b1 80       	ldd	r11, Z+1	; 0x01
    650c:	36 fe       	sbrs	r3, 6
    650e:	03 c0       	rjmp	.+6      	; 0x6516 <vfprintf+0x16c>
    6510:	69 2d       	mov	r22, r9
    6512:	70 e0       	ldi	r23, 0x00	; 0
    6514:	02 c0       	rjmp	.+4      	; 0x651a <vfprintf+0x170>
    6516:	6f ef       	ldi	r22, 0xFF	; 255
    6518:	7f ef       	ldi	r23, 0xFF	; 255
    651a:	c5 01       	movw	r24, r10
    651c:	4e d1       	rcall	.+668    	; 0x67ba <strnlen>
    651e:	4c 01       	movw	r8, r24
    6520:	82 01       	movw	r16, r4
    6522:	f3 2d       	mov	r31, r3
    6524:	ff 77       	andi	r31, 0x7F	; 127
    6526:	3f 2e       	mov	r3, r31
    6528:	15 c0       	rjmp	.+42     	; 0x6554 <vfprintf+0x1aa>
    652a:	28 01       	movw	r4, r16
    652c:	22 e0       	ldi	r18, 0x02	; 2
    652e:	42 0e       	add	r4, r18
    6530:	51 1c       	adc	r5, r1
    6532:	f8 01       	movw	r30, r16
    6534:	a0 80       	ld	r10, Z
    6536:	b1 80       	ldd	r11, Z+1	; 0x01
    6538:	36 fe       	sbrs	r3, 6
    653a:	03 c0       	rjmp	.+6      	; 0x6542 <vfprintf+0x198>
    653c:	69 2d       	mov	r22, r9
    653e:	70 e0       	ldi	r23, 0x00	; 0
    6540:	02 c0       	rjmp	.+4      	; 0x6546 <vfprintf+0x19c>
    6542:	6f ef       	ldi	r22, 0xFF	; 255
    6544:	7f ef       	ldi	r23, 0xFF	; 255
    6546:	c5 01       	movw	r24, r10
    6548:	2d d1       	rcall	.+602    	; 0x67a4 <strnlen_P>
    654a:	4c 01       	movw	r8, r24
    654c:	f3 2d       	mov	r31, r3
    654e:	f0 68       	ori	r31, 0x80	; 128
    6550:	3f 2e       	mov	r3, r31
    6552:	82 01       	movw	r16, r4
    6554:	33 fc       	sbrc	r3, 3
    6556:	19 c0       	rjmp	.+50     	; 0x658a <vfprintf+0x1e0>
    6558:	82 2d       	mov	r24, r2
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	88 16       	cp	r8, r24
    655e:	99 06       	cpc	r9, r25
    6560:	a0 f4       	brcc	.+40     	; 0x658a <vfprintf+0x1e0>
    6562:	b6 01       	movw	r22, r12
    6564:	80 e2       	ldi	r24, 0x20	; 32
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	33 d1       	rcall	.+614    	; 0x67d0 <fputc>
    656a:	2a 94       	dec	r2
    656c:	f5 cf       	rjmp	.-22     	; 0x6558 <vfprintf+0x1ae>
    656e:	f5 01       	movw	r30, r10
    6570:	37 fc       	sbrc	r3, 7
    6572:	85 91       	lpm	r24, Z+
    6574:	37 fe       	sbrs	r3, 7
    6576:	81 91       	ld	r24, Z+
    6578:	5f 01       	movw	r10, r30
    657a:	b6 01       	movw	r22, r12
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	28 d1       	rcall	.+592    	; 0x67d0 <fputc>
    6580:	21 10       	cpse	r2, r1
    6582:	2a 94       	dec	r2
    6584:	21 e0       	ldi	r18, 0x01	; 1
    6586:	82 1a       	sub	r8, r18
    6588:	91 08       	sbc	r9, r1
    658a:	81 14       	cp	r8, r1
    658c:	91 04       	cpc	r9, r1
    658e:	79 f7       	brne	.-34     	; 0x656e <vfprintf+0x1c4>
    6590:	e1 c0       	rjmp	.+450    	; 0x6754 <vfprintf+0x3aa>
    6592:	84 36       	cpi	r24, 0x64	; 100
    6594:	11 f0       	breq	.+4      	; 0x659a <vfprintf+0x1f0>
    6596:	89 36       	cpi	r24, 0x69	; 105
    6598:	39 f5       	brne	.+78     	; 0x65e8 <vfprintf+0x23e>
    659a:	f8 01       	movw	r30, r16
    659c:	37 fe       	sbrs	r3, 7
    659e:	07 c0       	rjmp	.+14     	; 0x65ae <vfprintf+0x204>
    65a0:	60 81       	ld	r22, Z
    65a2:	71 81       	ldd	r23, Z+1	; 0x01
    65a4:	82 81       	ldd	r24, Z+2	; 0x02
    65a6:	93 81       	ldd	r25, Z+3	; 0x03
    65a8:	0c 5f       	subi	r16, 0xFC	; 252
    65aa:	1f 4f       	sbci	r17, 0xFF	; 255
    65ac:	08 c0       	rjmp	.+16     	; 0x65be <vfprintf+0x214>
    65ae:	60 81       	ld	r22, Z
    65b0:	71 81       	ldd	r23, Z+1	; 0x01
    65b2:	07 2e       	mov	r0, r23
    65b4:	00 0c       	add	r0, r0
    65b6:	88 0b       	sbc	r24, r24
    65b8:	99 0b       	sbc	r25, r25
    65ba:	0e 5f       	subi	r16, 0xFE	; 254
    65bc:	1f 4f       	sbci	r17, 0xFF	; 255
    65be:	f3 2d       	mov	r31, r3
    65c0:	ff 76       	andi	r31, 0x6F	; 111
    65c2:	3f 2e       	mov	r3, r31
    65c4:	97 ff       	sbrs	r25, 7
    65c6:	09 c0       	rjmp	.+18     	; 0x65da <vfprintf+0x230>
    65c8:	90 95       	com	r25
    65ca:	80 95       	com	r24
    65cc:	70 95       	com	r23
    65ce:	61 95       	neg	r22
    65d0:	7f 4f       	sbci	r23, 0xFF	; 255
    65d2:	8f 4f       	sbci	r24, 0xFF	; 255
    65d4:	9f 4f       	sbci	r25, 0xFF	; 255
    65d6:	f0 68       	ori	r31, 0x80	; 128
    65d8:	3f 2e       	mov	r3, r31
    65da:	2a e0       	ldi	r18, 0x0A	; 10
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	a3 01       	movw	r20, r6
    65e0:	33 d1       	rcall	.+614    	; 0x6848 <__ultoa_invert>
    65e2:	88 2e       	mov	r8, r24
    65e4:	86 18       	sub	r8, r6
    65e6:	44 c0       	rjmp	.+136    	; 0x6670 <vfprintf+0x2c6>
    65e8:	85 37       	cpi	r24, 0x75	; 117
    65ea:	31 f4       	brne	.+12     	; 0x65f8 <vfprintf+0x24e>
    65ec:	23 2d       	mov	r18, r3
    65ee:	2f 7e       	andi	r18, 0xEF	; 239
    65f0:	b2 2e       	mov	r11, r18
    65f2:	2a e0       	ldi	r18, 0x0A	; 10
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	25 c0       	rjmp	.+74     	; 0x6642 <vfprintf+0x298>
    65f8:	93 2d       	mov	r25, r3
    65fa:	99 7f       	andi	r25, 0xF9	; 249
    65fc:	b9 2e       	mov	r11, r25
    65fe:	8f 36       	cpi	r24, 0x6F	; 111
    6600:	c1 f0       	breq	.+48     	; 0x6632 <vfprintf+0x288>
    6602:	18 f4       	brcc	.+6      	; 0x660a <vfprintf+0x260>
    6604:	88 35       	cpi	r24, 0x58	; 88
    6606:	79 f0       	breq	.+30     	; 0x6626 <vfprintf+0x27c>
    6608:	ae c0       	rjmp	.+348    	; 0x6766 <vfprintf+0x3bc>
    660a:	80 37       	cpi	r24, 0x70	; 112
    660c:	19 f0       	breq	.+6      	; 0x6614 <vfprintf+0x26a>
    660e:	88 37       	cpi	r24, 0x78	; 120
    6610:	21 f0       	breq	.+8      	; 0x661a <vfprintf+0x270>
    6612:	a9 c0       	rjmp	.+338    	; 0x6766 <vfprintf+0x3bc>
    6614:	e9 2f       	mov	r30, r25
    6616:	e0 61       	ori	r30, 0x10	; 16
    6618:	be 2e       	mov	r11, r30
    661a:	b4 fe       	sbrs	r11, 4
    661c:	0d c0       	rjmp	.+26     	; 0x6638 <vfprintf+0x28e>
    661e:	fb 2d       	mov	r31, r11
    6620:	f4 60       	ori	r31, 0x04	; 4
    6622:	bf 2e       	mov	r11, r31
    6624:	09 c0       	rjmp	.+18     	; 0x6638 <vfprintf+0x28e>
    6626:	34 fe       	sbrs	r3, 4
    6628:	0a c0       	rjmp	.+20     	; 0x663e <vfprintf+0x294>
    662a:	29 2f       	mov	r18, r25
    662c:	26 60       	ori	r18, 0x06	; 6
    662e:	b2 2e       	mov	r11, r18
    6630:	06 c0       	rjmp	.+12     	; 0x663e <vfprintf+0x294>
    6632:	28 e0       	ldi	r18, 0x08	; 8
    6634:	30 e0       	ldi	r19, 0x00	; 0
    6636:	05 c0       	rjmp	.+10     	; 0x6642 <vfprintf+0x298>
    6638:	20 e1       	ldi	r18, 0x10	; 16
    663a:	30 e0       	ldi	r19, 0x00	; 0
    663c:	02 c0       	rjmp	.+4      	; 0x6642 <vfprintf+0x298>
    663e:	20 e1       	ldi	r18, 0x10	; 16
    6640:	32 e0       	ldi	r19, 0x02	; 2
    6642:	f8 01       	movw	r30, r16
    6644:	b7 fe       	sbrs	r11, 7
    6646:	07 c0       	rjmp	.+14     	; 0x6656 <vfprintf+0x2ac>
    6648:	60 81       	ld	r22, Z
    664a:	71 81       	ldd	r23, Z+1	; 0x01
    664c:	82 81       	ldd	r24, Z+2	; 0x02
    664e:	93 81       	ldd	r25, Z+3	; 0x03
    6650:	0c 5f       	subi	r16, 0xFC	; 252
    6652:	1f 4f       	sbci	r17, 0xFF	; 255
    6654:	06 c0       	rjmp	.+12     	; 0x6662 <vfprintf+0x2b8>
    6656:	60 81       	ld	r22, Z
    6658:	71 81       	ldd	r23, Z+1	; 0x01
    665a:	80 e0       	ldi	r24, 0x00	; 0
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	0e 5f       	subi	r16, 0xFE	; 254
    6660:	1f 4f       	sbci	r17, 0xFF	; 255
    6662:	a3 01       	movw	r20, r6
    6664:	f1 d0       	rcall	.+482    	; 0x6848 <__ultoa_invert>
    6666:	88 2e       	mov	r8, r24
    6668:	86 18       	sub	r8, r6
    666a:	fb 2d       	mov	r31, r11
    666c:	ff 77       	andi	r31, 0x7F	; 127
    666e:	3f 2e       	mov	r3, r31
    6670:	36 fe       	sbrs	r3, 6
    6672:	0d c0       	rjmp	.+26     	; 0x668e <vfprintf+0x2e4>
    6674:	23 2d       	mov	r18, r3
    6676:	2e 7f       	andi	r18, 0xFE	; 254
    6678:	a2 2e       	mov	r10, r18
    667a:	89 14       	cp	r8, r9
    667c:	58 f4       	brcc	.+22     	; 0x6694 <vfprintf+0x2ea>
    667e:	34 fe       	sbrs	r3, 4
    6680:	0b c0       	rjmp	.+22     	; 0x6698 <vfprintf+0x2ee>
    6682:	32 fc       	sbrc	r3, 2
    6684:	09 c0       	rjmp	.+18     	; 0x6698 <vfprintf+0x2ee>
    6686:	83 2d       	mov	r24, r3
    6688:	8e 7e       	andi	r24, 0xEE	; 238
    668a:	a8 2e       	mov	r10, r24
    668c:	05 c0       	rjmp	.+10     	; 0x6698 <vfprintf+0x2ee>
    668e:	b8 2c       	mov	r11, r8
    6690:	a3 2c       	mov	r10, r3
    6692:	03 c0       	rjmp	.+6      	; 0x669a <vfprintf+0x2f0>
    6694:	b8 2c       	mov	r11, r8
    6696:	01 c0       	rjmp	.+2      	; 0x669a <vfprintf+0x2f0>
    6698:	b9 2c       	mov	r11, r9
    669a:	a4 fe       	sbrs	r10, 4
    669c:	0f c0       	rjmp	.+30     	; 0x66bc <vfprintf+0x312>
    669e:	fe 01       	movw	r30, r28
    66a0:	e8 0d       	add	r30, r8
    66a2:	f1 1d       	adc	r31, r1
    66a4:	80 81       	ld	r24, Z
    66a6:	80 33       	cpi	r24, 0x30	; 48
    66a8:	21 f4       	brne	.+8      	; 0x66b2 <vfprintf+0x308>
    66aa:	9a 2d       	mov	r25, r10
    66ac:	99 7e       	andi	r25, 0xE9	; 233
    66ae:	a9 2e       	mov	r10, r25
    66b0:	09 c0       	rjmp	.+18     	; 0x66c4 <vfprintf+0x31a>
    66b2:	a2 fe       	sbrs	r10, 2
    66b4:	06 c0       	rjmp	.+12     	; 0x66c2 <vfprintf+0x318>
    66b6:	b3 94       	inc	r11
    66b8:	b3 94       	inc	r11
    66ba:	04 c0       	rjmp	.+8      	; 0x66c4 <vfprintf+0x31a>
    66bc:	8a 2d       	mov	r24, r10
    66be:	86 78       	andi	r24, 0x86	; 134
    66c0:	09 f0       	breq	.+2      	; 0x66c4 <vfprintf+0x31a>
    66c2:	b3 94       	inc	r11
    66c4:	a3 fc       	sbrc	r10, 3
    66c6:	10 c0       	rjmp	.+32     	; 0x66e8 <vfprintf+0x33e>
    66c8:	a0 fe       	sbrs	r10, 0
    66ca:	06 c0       	rjmp	.+12     	; 0x66d8 <vfprintf+0x32e>
    66cc:	b2 14       	cp	r11, r2
    66ce:	80 f4       	brcc	.+32     	; 0x66f0 <vfprintf+0x346>
    66d0:	28 0c       	add	r2, r8
    66d2:	92 2c       	mov	r9, r2
    66d4:	9b 18       	sub	r9, r11
    66d6:	0d c0       	rjmp	.+26     	; 0x66f2 <vfprintf+0x348>
    66d8:	b2 14       	cp	r11, r2
    66da:	58 f4       	brcc	.+22     	; 0x66f2 <vfprintf+0x348>
    66dc:	b6 01       	movw	r22, r12
    66de:	80 e2       	ldi	r24, 0x20	; 32
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	76 d0       	rcall	.+236    	; 0x67d0 <fputc>
    66e4:	b3 94       	inc	r11
    66e6:	f8 cf       	rjmp	.-16     	; 0x66d8 <vfprintf+0x32e>
    66e8:	b2 14       	cp	r11, r2
    66ea:	18 f4       	brcc	.+6      	; 0x66f2 <vfprintf+0x348>
    66ec:	2b 18       	sub	r2, r11
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <vfprintf+0x34a>
    66f0:	98 2c       	mov	r9, r8
    66f2:	21 2c       	mov	r2, r1
    66f4:	a4 fe       	sbrs	r10, 4
    66f6:	0f c0       	rjmp	.+30     	; 0x6716 <vfprintf+0x36c>
    66f8:	b6 01       	movw	r22, r12
    66fa:	80 e3       	ldi	r24, 0x30	; 48
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	68 d0       	rcall	.+208    	; 0x67d0 <fputc>
    6700:	a2 fe       	sbrs	r10, 2
    6702:	16 c0       	rjmp	.+44     	; 0x6730 <vfprintf+0x386>
    6704:	a1 fc       	sbrc	r10, 1
    6706:	03 c0       	rjmp	.+6      	; 0x670e <vfprintf+0x364>
    6708:	88 e7       	ldi	r24, 0x78	; 120
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	02 c0       	rjmp	.+4      	; 0x6712 <vfprintf+0x368>
    670e:	88 e5       	ldi	r24, 0x58	; 88
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	b6 01       	movw	r22, r12
    6714:	0c c0       	rjmp	.+24     	; 0x672e <vfprintf+0x384>
    6716:	8a 2d       	mov	r24, r10
    6718:	86 78       	andi	r24, 0x86	; 134
    671a:	51 f0       	breq	.+20     	; 0x6730 <vfprintf+0x386>
    671c:	a1 fe       	sbrs	r10, 1
    671e:	02 c0       	rjmp	.+4      	; 0x6724 <vfprintf+0x37a>
    6720:	8b e2       	ldi	r24, 0x2B	; 43
    6722:	01 c0       	rjmp	.+2      	; 0x6726 <vfprintf+0x37c>
    6724:	80 e2       	ldi	r24, 0x20	; 32
    6726:	a7 fc       	sbrc	r10, 7
    6728:	8d e2       	ldi	r24, 0x2D	; 45
    672a:	b6 01       	movw	r22, r12
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	50 d0       	rcall	.+160    	; 0x67d0 <fputc>
    6730:	89 14       	cp	r8, r9
    6732:	30 f4       	brcc	.+12     	; 0x6740 <vfprintf+0x396>
    6734:	b6 01       	movw	r22, r12
    6736:	80 e3       	ldi	r24, 0x30	; 48
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	4a d0       	rcall	.+148    	; 0x67d0 <fputc>
    673c:	9a 94       	dec	r9
    673e:	f8 cf       	rjmp	.-16     	; 0x6730 <vfprintf+0x386>
    6740:	8a 94       	dec	r8
    6742:	f3 01       	movw	r30, r6
    6744:	e8 0d       	add	r30, r8
    6746:	f1 1d       	adc	r31, r1
    6748:	80 81       	ld	r24, Z
    674a:	b6 01       	movw	r22, r12
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	40 d0       	rcall	.+128    	; 0x67d0 <fputc>
    6750:	81 10       	cpse	r8, r1
    6752:	f6 cf       	rjmp	.-20     	; 0x6740 <vfprintf+0x396>
    6754:	22 20       	and	r2, r2
    6756:	09 f4       	brne	.+2      	; 0x675a <vfprintf+0x3b0>
    6758:	4e ce       	rjmp	.-868    	; 0x63f6 <vfprintf+0x4c>
    675a:	b6 01       	movw	r22, r12
    675c:	80 e2       	ldi	r24, 0x20	; 32
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	37 d0       	rcall	.+110    	; 0x67d0 <fputc>
    6762:	2a 94       	dec	r2
    6764:	f7 cf       	rjmp	.-18     	; 0x6754 <vfprintf+0x3aa>
    6766:	f6 01       	movw	r30, r12
    6768:	86 81       	ldd	r24, Z+6	; 0x06
    676a:	97 81       	ldd	r25, Z+7	; 0x07
    676c:	02 c0       	rjmp	.+4      	; 0x6772 <vfprintf+0x3c8>
    676e:	8f ef       	ldi	r24, 0xFF	; 255
    6770:	9f ef       	ldi	r25, 0xFF	; 255
    6772:	2b 96       	adiw	r28, 0x0b	; 11
    6774:	0f b6       	in	r0, 0x3f	; 63
    6776:	f8 94       	cli
    6778:	de bf       	out	0x3e, r29	; 62
    677a:	0f be       	out	0x3f, r0	; 63
    677c:	cd bf       	out	0x3d, r28	; 61
    677e:	df 91       	pop	r29
    6780:	cf 91       	pop	r28
    6782:	1f 91       	pop	r17
    6784:	0f 91       	pop	r16
    6786:	ff 90       	pop	r15
    6788:	ef 90       	pop	r14
    678a:	df 90       	pop	r13
    678c:	cf 90       	pop	r12
    678e:	bf 90       	pop	r11
    6790:	af 90       	pop	r10
    6792:	9f 90       	pop	r9
    6794:	8f 90       	pop	r8
    6796:	7f 90       	pop	r7
    6798:	6f 90       	pop	r6
    679a:	5f 90       	pop	r5
    679c:	4f 90       	pop	r4
    679e:	3f 90       	pop	r3
    67a0:	2f 90       	pop	r2
    67a2:	08 95       	ret

000067a4 <strnlen_P>:
    67a4:	fc 01       	movw	r30, r24
    67a6:	05 90       	lpm	r0, Z+
    67a8:	61 50       	subi	r22, 0x01	; 1
    67aa:	70 40       	sbci	r23, 0x00	; 0
    67ac:	01 10       	cpse	r0, r1
    67ae:	d8 f7       	brcc	.-10     	; 0x67a6 <strnlen_P+0x2>
    67b0:	80 95       	com	r24
    67b2:	90 95       	com	r25
    67b4:	8e 0f       	add	r24, r30
    67b6:	9f 1f       	adc	r25, r31
    67b8:	08 95       	ret

000067ba <strnlen>:
    67ba:	fc 01       	movw	r30, r24
    67bc:	61 50       	subi	r22, 0x01	; 1
    67be:	70 40       	sbci	r23, 0x00	; 0
    67c0:	01 90       	ld	r0, Z+
    67c2:	01 10       	cpse	r0, r1
    67c4:	d8 f7       	brcc	.-10     	; 0x67bc <strnlen+0x2>
    67c6:	80 95       	com	r24
    67c8:	90 95       	com	r25
    67ca:	8e 0f       	add	r24, r30
    67cc:	9f 1f       	adc	r25, r31
    67ce:	08 95       	ret

000067d0 <fputc>:
    67d0:	0f 93       	push	r16
    67d2:	1f 93       	push	r17
    67d4:	cf 93       	push	r28
    67d6:	df 93       	push	r29
    67d8:	fb 01       	movw	r30, r22
    67da:	23 81       	ldd	r18, Z+3	; 0x03
    67dc:	21 fd       	sbrc	r18, 1
    67de:	03 c0       	rjmp	.+6      	; 0x67e6 <fputc+0x16>
    67e0:	8f ef       	ldi	r24, 0xFF	; 255
    67e2:	9f ef       	ldi	r25, 0xFF	; 255
    67e4:	2c c0       	rjmp	.+88     	; 0x683e <fputc+0x6e>
    67e6:	22 ff       	sbrs	r18, 2
    67e8:	16 c0       	rjmp	.+44     	; 0x6816 <fputc+0x46>
    67ea:	46 81       	ldd	r20, Z+6	; 0x06
    67ec:	57 81       	ldd	r21, Z+7	; 0x07
    67ee:	24 81       	ldd	r18, Z+4	; 0x04
    67f0:	35 81       	ldd	r19, Z+5	; 0x05
    67f2:	42 17       	cp	r20, r18
    67f4:	53 07       	cpc	r21, r19
    67f6:	44 f4       	brge	.+16     	; 0x6808 <fputc+0x38>
    67f8:	a0 81       	ld	r26, Z
    67fa:	b1 81       	ldd	r27, Z+1	; 0x01
    67fc:	9d 01       	movw	r18, r26
    67fe:	2f 5f       	subi	r18, 0xFF	; 255
    6800:	3f 4f       	sbci	r19, 0xFF	; 255
    6802:	31 83       	std	Z+1, r19	; 0x01
    6804:	20 83       	st	Z, r18
    6806:	8c 93       	st	X, r24
    6808:	26 81       	ldd	r18, Z+6	; 0x06
    680a:	37 81       	ldd	r19, Z+7	; 0x07
    680c:	2f 5f       	subi	r18, 0xFF	; 255
    680e:	3f 4f       	sbci	r19, 0xFF	; 255
    6810:	37 83       	std	Z+7, r19	; 0x07
    6812:	26 83       	std	Z+6, r18	; 0x06
    6814:	14 c0       	rjmp	.+40     	; 0x683e <fputc+0x6e>
    6816:	8b 01       	movw	r16, r22
    6818:	ec 01       	movw	r28, r24
    681a:	fb 01       	movw	r30, r22
    681c:	00 84       	ldd	r0, Z+8	; 0x08
    681e:	f1 85       	ldd	r31, Z+9	; 0x09
    6820:	e0 2d       	mov	r30, r0
    6822:	19 95       	eicall
    6824:	89 2b       	or	r24, r25
    6826:	e1 f6       	brne	.-72     	; 0x67e0 <fputc+0x10>
    6828:	d8 01       	movw	r26, r16
    682a:	16 96       	adiw	r26, 0x06	; 6
    682c:	8d 91       	ld	r24, X+
    682e:	9c 91       	ld	r25, X
    6830:	17 97       	sbiw	r26, 0x07	; 7
    6832:	01 96       	adiw	r24, 0x01	; 1
    6834:	17 96       	adiw	r26, 0x07	; 7
    6836:	9c 93       	st	X, r25
    6838:	8e 93       	st	-X, r24
    683a:	16 97       	sbiw	r26, 0x06	; 6
    683c:	ce 01       	movw	r24, r28
    683e:	df 91       	pop	r29
    6840:	cf 91       	pop	r28
    6842:	1f 91       	pop	r17
    6844:	0f 91       	pop	r16
    6846:	08 95       	ret

00006848 <__ultoa_invert>:
    6848:	fa 01       	movw	r30, r20
    684a:	aa 27       	eor	r26, r26
    684c:	28 30       	cpi	r18, 0x08	; 8
    684e:	51 f1       	breq	.+84     	; 0x68a4 <__ultoa_invert+0x5c>
    6850:	20 31       	cpi	r18, 0x10	; 16
    6852:	81 f1       	breq	.+96     	; 0x68b4 <__ultoa_invert+0x6c>
    6854:	e8 94       	clt
    6856:	6f 93       	push	r22
    6858:	6e 7f       	andi	r22, 0xFE	; 254
    685a:	6e 5f       	subi	r22, 0xFE	; 254
    685c:	7f 4f       	sbci	r23, 0xFF	; 255
    685e:	8f 4f       	sbci	r24, 0xFF	; 255
    6860:	9f 4f       	sbci	r25, 0xFF	; 255
    6862:	af 4f       	sbci	r26, 0xFF	; 255
    6864:	b1 e0       	ldi	r27, 0x01	; 1
    6866:	3e d0       	rcall	.+124    	; 0x68e4 <__ultoa_invert+0x9c>
    6868:	b4 e0       	ldi	r27, 0x04	; 4
    686a:	3c d0       	rcall	.+120    	; 0x68e4 <__ultoa_invert+0x9c>
    686c:	67 0f       	add	r22, r23
    686e:	78 1f       	adc	r23, r24
    6870:	89 1f       	adc	r24, r25
    6872:	9a 1f       	adc	r25, r26
    6874:	a1 1d       	adc	r26, r1
    6876:	68 0f       	add	r22, r24
    6878:	79 1f       	adc	r23, r25
    687a:	8a 1f       	adc	r24, r26
    687c:	91 1d       	adc	r25, r1
    687e:	a1 1d       	adc	r26, r1
    6880:	6a 0f       	add	r22, r26
    6882:	71 1d       	adc	r23, r1
    6884:	81 1d       	adc	r24, r1
    6886:	91 1d       	adc	r25, r1
    6888:	a1 1d       	adc	r26, r1
    688a:	20 d0       	rcall	.+64     	; 0x68cc <__ultoa_invert+0x84>
    688c:	09 f4       	brne	.+2      	; 0x6890 <__ultoa_invert+0x48>
    688e:	68 94       	set
    6890:	3f 91       	pop	r19
    6892:	2a e0       	ldi	r18, 0x0A	; 10
    6894:	26 9f       	mul	r18, r22
    6896:	11 24       	eor	r1, r1
    6898:	30 19       	sub	r19, r0
    689a:	30 5d       	subi	r19, 0xD0	; 208
    689c:	31 93       	st	Z+, r19
    689e:	de f6       	brtc	.-74     	; 0x6856 <__ultoa_invert+0xe>
    68a0:	cf 01       	movw	r24, r30
    68a2:	08 95       	ret
    68a4:	46 2f       	mov	r20, r22
    68a6:	47 70       	andi	r20, 0x07	; 7
    68a8:	40 5d       	subi	r20, 0xD0	; 208
    68aa:	41 93       	st	Z+, r20
    68ac:	b3 e0       	ldi	r27, 0x03	; 3
    68ae:	0f d0       	rcall	.+30     	; 0x68ce <__ultoa_invert+0x86>
    68b0:	c9 f7       	brne	.-14     	; 0x68a4 <__ultoa_invert+0x5c>
    68b2:	f6 cf       	rjmp	.-20     	; 0x68a0 <__ultoa_invert+0x58>
    68b4:	46 2f       	mov	r20, r22
    68b6:	4f 70       	andi	r20, 0x0F	; 15
    68b8:	40 5d       	subi	r20, 0xD0	; 208
    68ba:	4a 33       	cpi	r20, 0x3A	; 58
    68bc:	18 f0       	brcs	.+6      	; 0x68c4 <__ultoa_invert+0x7c>
    68be:	49 5d       	subi	r20, 0xD9	; 217
    68c0:	31 fd       	sbrc	r19, 1
    68c2:	40 52       	subi	r20, 0x20	; 32
    68c4:	41 93       	st	Z+, r20
    68c6:	02 d0       	rcall	.+4      	; 0x68cc <__ultoa_invert+0x84>
    68c8:	a9 f7       	brne	.-22     	; 0x68b4 <__ultoa_invert+0x6c>
    68ca:	ea cf       	rjmp	.-44     	; 0x68a0 <__ultoa_invert+0x58>
    68cc:	b4 e0       	ldi	r27, 0x04	; 4
    68ce:	a6 95       	lsr	r26
    68d0:	97 95       	ror	r25
    68d2:	87 95       	ror	r24
    68d4:	77 95       	ror	r23
    68d6:	67 95       	ror	r22
    68d8:	ba 95       	dec	r27
    68da:	c9 f7       	brne	.-14     	; 0x68ce <__ultoa_invert+0x86>
    68dc:	00 97       	sbiw	r24, 0x00	; 0
    68de:	61 05       	cpc	r22, r1
    68e0:	71 05       	cpc	r23, r1
    68e2:	08 95       	ret
    68e4:	9b 01       	movw	r18, r22
    68e6:	ac 01       	movw	r20, r24
    68e8:	0a 2e       	mov	r0, r26
    68ea:	06 94       	lsr	r0
    68ec:	57 95       	ror	r21
    68ee:	47 95       	ror	r20
    68f0:	37 95       	ror	r19
    68f2:	27 95       	ror	r18
    68f4:	ba 95       	dec	r27
    68f6:	c9 f7       	brne	.-14     	; 0x68ea <__ultoa_invert+0xa2>
    68f8:	62 0f       	add	r22, r18
    68fa:	73 1f       	adc	r23, r19
    68fc:	84 1f       	adc	r24, r20
    68fe:	95 1f       	adc	r25, r21
    6900:	a0 1d       	adc	r26, r0
    6902:	08 95       	ret

00006904 <__divmodsi4>:
    6904:	05 2e       	mov	r0, r21
    6906:	97 fb       	bst	r25, 7
    6908:	16 f4       	brtc	.+4      	; 0x690e <__divmodsi4+0xa>
    690a:	00 94       	com	r0
    690c:	0f d0       	rcall	.+30     	; 0x692c <__negsi2>
    690e:	57 fd       	sbrc	r21, 7
    6910:	05 d0       	rcall	.+10     	; 0x691c <__divmodsi4_neg2>
    6912:	a9 da       	rcall	.-2734   	; 0x5e66 <__udivmodsi4>
    6914:	07 fc       	sbrc	r0, 7
    6916:	02 d0       	rcall	.+4      	; 0x691c <__divmodsi4_neg2>
    6918:	46 f4       	brtc	.+16     	; 0x692a <__divmodsi4_exit>
    691a:	08 c0       	rjmp	.+16     	; 0x692c <__negsi2>

0000691c <__divmodsi4_neg2>:
    691c:	50 95       	com	r21
    691e:	40 95       	com	r20
    6920:	30 95       	com	r19
    6922:	21 95       	neg	r18
    6924:	3f 4f       	sbci	r19, 0xFF	; 255
    6926:	4f 4f       	sbci	r20, 0xFF	; 255
    6928:	5f 4f       	sbci	r21, 0xFF	; 255

0000692a <__divmodsi4_exit>:
    692a:	08 95       	ret

0000692c <__negsi2>:
    692c:	90 95       	com	r25
    692e:	80 95       	com	r24
    6930:	70 95       	com	r23
    6932:	61 95       	neg	r22
    6934:	7f 4f       	sbci	r23, 0xFF	; 255
    6936:	8f 4f       	sbci	r24, 0xFF	; 255
    6938:	9f 4f       	sbci	r25, 0xFF	; 255
    693a:	08 95       	ret

0000693c <__muluhisi3>:
    693c:	0f d0       	rcall	.+30     	; 0x695c <__umulhisi3>
    693e:	a5 9f       	mul	r26, r21
    6940:	90 0d       	add	r25, r0
    6942:	b4 9f       	mul	r27, r20
    6944:	90 0d       	add	r25, r0
    6946:	a4 9f       	mul	r26, r20
    6948:	80 0d       	add	r24, r0
    694a:	91 1d       	adc	r25, r1
    694c:	11 24       	eor	r1, r1
    694e:	08 95       	ret

00006950 <__mulshisi3>:
    6950:	b7 ff       	sbrs	r27, 7
    6952:	f4 cf       	rjmp	.-24     	; 0x693c <__muluhisi3>

00006954 <__mulohisi3>:
    6954:	f3 df       	rcall	.-26     	; 0x693c <__muluhisi3>
    6956:	82 1b       	sub	r24, r18
    6958:	93 0b       	sbc	r25, r19
    695a:	08 95       	ret

0000695c <__umulhisi3>:
    695c:	a2 9f       	mul	r26, r18
    695e:	b0 01       	movw	r22, r0
    6960:	b3 9f       	mul	r27, r19
    6962:	c0 01       	movw	r24, r0
    6964:	a3 9f       	mul	r26, r19
    6966:	70 0d       	add	r23, r0
    6968:	81 1d       	adc	r24, r1
    696a:	11 24       	eor	r1, r1
    696c:	91 1d       	adc	r25, r1
    696e:	b2 9f       	mul	r27, r18
    6970:	70 0d       	add	r23, r0
    6972:	81 1d       	adc	r24, r1
    6974:	11 24       	eor	r1, r1
    6976:	91 1d       	adc	r25, r1
    6978:	08 95       	ret

0000697a <_exit>:
    697a:	f8 94       	cli

0000697c <__stop_program>:
    697c:	ff cf       	rjmp	.-2      	; 0x697c <__stop_program>
