
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000600  00800200  00005e58  00005eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001290  00800800  00800800  000064ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000064ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b80  00000000  00000000  00006588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e6ef  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a9d  00000000  00000000  000157f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d8d  00000000  00000000  00019294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002844  00000000  00000000  00020024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044e2  00000000  00000000  00022868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d63d  00000000  00000000  00026d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ba8  00000000  00000000  00034387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_12>
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c2       	rjmp	.+1192   	; 0x4e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fc 23 	jmp	0x47f8	; 0x47f8 <__vector_25>
      68:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__vector_26>
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 92 24 	jmp	0x4924	; 0x4924 <__vector_36>
      94:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__vector_37>
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <__vector_39>
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__vector_51>
      d0:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__vector_52>
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <__vector_54>
      dc:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__vector_55>
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 01       	movw	r24, r12
      e6:	c6 01       	movw	r24, r12
      e8:	c6 01       	movw	r24, r12
      ea:	00 02       	muls	r16, r16
      ec:	08 02       	muls	r16, r24
      ee:	1e 02       	muls	r17, r30
      f0:	c6 01       	movw	r24, r12
      f2:	c6 01       	movw	r24, r12
      f4:	00 02       	muls	r16, r16
      f6:	08 02       	muls	r16, r24
      f8:	9e 27       	eor	r25, r30
      fa:	0e 28       	or	r0, r14
      fc:	0e 28       	or	r0, r14
      fe:	0e 28       	or	r0, r14
     100:	0e 28       	or	r0, r14
     102:	0e 28       	or	r0, r14
     104:	0e 28       	or	r0, r14
     106:	0e 28       	or	r0, r14
     108:	9e 27       	eor	r25, r30
     10a:	0e 28       	or	r0, r14
     10c:	0e 28       	or	r0, r14
     10e:	0e 28       	or	r0, r14
     110:	0e 28       	or	r0, r14
     112:	0e 28       	or	r0, r14
     114:	0e 28       	or	r0, r14
     116:	0e 28       	or	r0, r14
     118:	a0 27       	eor	r26, r16
     11a:	0e 28       	or	r0, r14
     11c:	0e 28       	or	r0, r14
     11e:	0e 28       	or	r0, r14
     120:	0e 28       	or	r0, r14
     122:	0e 28       	or	r0, r14
     124:	0e 28       	or	r0, r14
     126:	0e 28       	or	r0, r14
     128:	0e 28       	or	r0, r14
     12a:	0e 28       	or	r0, r14
     12c:	0e 28       	or	r0, r14
     12e:	0e 28       	or	r0, r14
     130:	0e 28       	or	r0, r14
     132:	0e 28       	or	r0, r14
     134:	0e 28       	or	r0, r14
     136:	0e 28       	or	r0, r14
     138:	a0 27       	eor	r26, r16
     13a:	0e 28       	or	r0, r14
     13c:	0e 28       	or	r0, r14
     13e:	0e 28       	or	r0, r14
     140:	0e 28       	or	r0, r14
     142:	0e 28       	or	r0, r14
     144:	0e 28       	or	r0, r14
     146:	0e 28       	or	r0, r14
     148:	0e 28       	or	r0, r14
     14a:	0e 28       	or	r0, r14
     14c:	0e 28       	or	r0, r14
     14e:	0e 28       	or	r0, r14
     150:	0e 28       	or	r0, r14
     152:	0e 28       	or	r0, r14
     154:	0e 28       	or	r0, r14
     156:	0e 28       	or	r0, r14
     158:	0a 28       	or	r0, r10
     15a:	0e 28       	or	r0, r14
     15c:	0e 28       	or	r0, r14
     15e:	0e 28       	or	r0, r14
     160:	0e 28       	or	r0, r14
     162:	0e 28       	or	r0, r14
     164:	0e 28       	or	r0, r14
     166:	0e 28       	or	r0, r14
     168:	d5 27       	eor	r29, r21
     16a:	0e 28       	or	r0, r14
     16c:	0e 28       	or	r0, r14
     16e:	0e 28       	or	r0, r14
     170:	0e 28       	or	r0, r14
     172:	0e 28       	or	r0, r14
     174:	0e 28       	or	r0, r14
     176:	0e 28       	or	r0, r14
     178:	0e 28       	or	r0, r14
     17a:	0e 28       	or	r0, r14
     17c:	0e 28       	or	r0, r14
     17e:	0e 28       	or	r0, r14
     180:	0e 28       	or	r0, r14
     182:	0e 28       	or	r0, r14
     184:	0e 28       	or	r0, r14
     186:	0e 28       	or	r0, r14
     188:	c9 27       	eor	r28, r25
     18a:	0e 28       	or	r0, r14
     18c:	0e 28       	or	r0, r14
     18e:	0e 28       	or	r0, r14
     190:	0e 28       	or	r0, r14
     192:	0e 28       	or	r0, r14
     194:	0e 28       	or	r0, r14
     196:	0e 28       	or	r0, r14
     198:	ed 27       	eor	r30, r29

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	01 e8       	ldi	r16, 0x81	; 129
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f1 eb       	ldi	r31, 0xB1	; 177
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	29 f1       	breq	.+74     	; 0x1fc <prvIdleTask+0x62>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
     1ce:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <uxCurrentNumberOfTasks>
     1d2:	81 50       	subi	r24, 0x01	; 1
     1d4:	80 93 74 18 	sts	0x1874, r24	; 0x801874 <uxCurrentNumberOfTasks>
     1d8:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <uxDeletedTasksWaitingCleanUp>
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	80 93 80 18 	sts	0x1880, r24	; 0x801880 <uxDeletedTasksWaitingCleanUp>
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1ea:	0e 94 bb 09 	call	0x1376	; 0x1376 <vPortFree>
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 bb 09 	call	0x1376	; 0x1376 <vPortFree>
     1f4:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <uxDeletedTasksWaitingCleanUp>
     1f8:	81 11       	cpse	r24, r1
     1fa:	db cf       	rjmp	.-74     	; 0x1b2 <prvIdleTask+0x18>
     1fc:	f7 01       	movw	r30, r14
     1fe:	80 81       	ld	r24, Z
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	10 f0       	brcs	.+4      	; 0x208 <prvIdleTask+0x6e>
     204:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
     208:	0e 94 ae 1a 	call	0x355c	; 0x355c <vApplicationIdleHook>
     20c:	ce cf       	rjmp	.-100    	; 0x1aa <prvIdleTask+0x10>

0000020e <prvTimerTask>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	60 97       	sbiw	r28, 0x10	; 16
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	81 2c       	mov	r8, r1
     22c:	91 2c       	mov	r9, r1
     22e:	a1 2c       	mov	r10, r1
     230:	b1 2c       	mov	r11, r1
     232:	69 84       	ldd	r6, Y+9	; 0x09
     234:	7a 84       	ldd	r7, Y+10	; 0x0a
     236:	e0 91 e9 18 	lds	r30, 0x18E9	; 0x8018e9 <pxCurrentTimerList>
     23a:	f0 91 ea 18 	lds	r31, 0x18EA	; 0x8018ea <pxCurrentTimerList+0x1>
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	09 f4       	brne	.+2      	; 0x246 <prvTimerTask+0x38>
     244:	13 c1       	rjmp	.+550    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     246:	07 80       	ldd	r0, Z+7	; 0x07
     248:	f0 85       	ldd	r31, Z+8	; 0x08
     24a:	e0 2d       	mov	r30, r0
     24c:	20 80       	ld	r2, Z
     24e:	31 80       	ldd	r3, Z+1	; 0x01
     250:	42 80       	ldd	r4, Z+2	; 0x02
     252:	53 80       	ldd	r5, Z+3	; 0x03
     254:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskSuspendAll>
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 18 1a 	call	0x3430	; 0x3430 <prvSampleTimeNow>
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	7c 87       	std	Y+12, r23	; 0x0c
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	9e 87       	std	Y+14, r25	; 0x0e
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	81 11       	cpse	r24, r1
     26c:	67 c0       	rjmp	.+206    	; 0x33c <prvTimerTask+0x12e>
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	ad 85       	ldd	r26, Y+13	; 0x0d
     274:	be 85       	ldd	r27, Y+14	; 0x0e
     276:	82 15       	cp	r24, r2
     278:	93 05       	cpc	r25, r3
     27a:	a4 05       	cpc	r26, r4
     27c:	b5 05       	cpc	r27, r5
     27e:	08 f4       	brcc	.+2      	; 0x282 <prvTimerTask+0x74>
     280:	45 c0       	rjmp	.+138    	; 0x30c <prvTimerTask+0xfe>
     282:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
     286:	e0 91 e9 18 	lds	r30, 0x18E9	; 0x8018e9 <pxCurrentTimerList>
     28a:	f0 91 ea 18 	lds	r31, 0x18EA	; 0x8018ea <pxCurrentTimerList+0x1>
     28e:	07 80       	ldd	r0, Z+7	; 0x07
     290:	f0 85       	ldd	r31, Z+8	; 0x08
     292:	e0 2d       	mov	r30, r0
     294:	a0 85       	ldd	r26, Z+8	; 0x08
     296:	b1 85       	ldd	r27, Z+9	; 0x09
     298:	b8 8b       	std	Y+16, r27	; 0x10
     29a:	af 87       	std	Y+15, r26	; 0x0f
     29c:	cd 01       	movw	r24, r26
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
     2a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     2a6:	f8 89       	ldd	r31, Y+16	; 0x10
     2a8:	87 89       	ldd	r24, Z+23	; 0x17
     2aa:	82 ff       	sbrs	r24, 2
     2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <prvTimerTask+0xe2>
     2ae:	46 85       	ldd	r20, Z+14	; 0x0e
     2b0:	57 85       	ldd	r21, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	42 0d       	add	r20, r2
     2b8:	53 1d       	adc	r21, r3
     2ba:	64 1d       	adc	r22, r4
     2bc:	75 1d       	adc	r23, r5
     2be:	72 01       	movw	r14, r4
     2c0:	61 01       	movw	r12, r2
     2c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     2c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	cf 01       	movw	r24, r30
     2cc:	0e 94 28 19 	call	0x3250	; 0x3250 <prvInsertTimerInActiveList>
     2d0:	88 23       	and	r24, r24
     2d2:	99 f0       	breq	.+38     	; 0x2fa <prvTimerTask+0xec>
     2d4:	c8 2c       	mov	r12, r8
     2d6:	d9 2c       	mov	r13, r9
     2d8:	ea 2c       	mov	r14, r10
     2da:	fb 2c       	mov	r15, r11
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	a2 01       	movw	r20, r4
     2e2:	91 01       	movw	r18, r2
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 ba 19 	call	0x3374	; 0x3374 <xTimerGenericCommand>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <prvTimerTask+0xec>
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	57 96       	adiw	r26, 0x17	; 23
     2f8:	8c 93       	st	X, r24
     2fa:	af 85       	ldd	r26, Y+15	; 0x0f
     2fc:	b8 89       	ldd	r27, Y+16	; 0x10
     2fe:	54 96       	adiw	r26, 0x14	; 20
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	55 97       	sbiw	r26, 0x15	; 21
     306:	cd 01       	movw	r24, r26
     308:	19 95       	eicall
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	b2 01       	movw	r22, r4
     310:	a1 01       	movw	r20, r2
     312:	8b 85       	ldd	r24, Y+11	; 0x0b
     314:	9c 85       	ldd	r25, Y+12	; 0x0c
     316:	ad 85       	ldd	r26, Y+13	; 0x0d
     318:	be 85       	ldd	r27, Y+14	; 0x0e
     31a:	48 1b       	sub	r20, r24
     31c:	59 0b       	sbc	r21, r25
     31e:	6a 0b       	sbc	r22, r26
     320:	7b 0b       	sbc	r23, r27
     322:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xTimerQueue>
     326:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
     32a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vQueueWaitForMessageRestricted>
     32e:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
     332:	81 11       	cpse	r24, r1
     334:	8c c0       	rjmp	.+280    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     336:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
     33a:	89 c0       	rjmp	.+274    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     33c:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
     340:	86 c0       	rjmp	.+268    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <prvTimerTask+0x13c>
     348:	82 c0       	rjmp	.+260    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     34a:	4e 80       	ldd	r4, Y+6	; 0x06
     34c:	5f 80       	ldd	r5, Y+7	; 0x07
     34e:	d2 01       	movw	r26, r4
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	8d 91       	ld	r24, X+
     354:	9c 91       	ld	r25, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	89 2b       	or	r24, r25
     35a:	21 f0       	breq	.+8      	; 0x364 <prvTimerTask+0x156>
     35c:	c2 01       	movw	r24, r4
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
     364:	ce 01       	movw	r24, r28
     366:	08 96       	adiw	r24, 0x08	; 8
     368:	0e 94 18 1a 	call	0x3430	; 0x3430 <prvSampleTimeNow>
     36c:	8b 01       	movw	r16, r22
     36e:	9c 01       	movw	r18, r24
     370:	e9 81       	ldd	r30, Y+1	; 0x01
     372:	0e 2e       	mov	r0, r30
     374:	00 0c       	add	r0, r0
     376:	ff 0b       	sbc	r31, r31
     378:	ea 30       	cpi	r30, 0x0A	; 10
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <prvTimerTask+0x172>
     37e:	67 c0       	rjmp	.+206    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     380:	88 27       	eor	r24, r24
     382:	ee 58       	subi	r30, 0x8E	; 142
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	8f 4f       	sbci	r24, 0xFF	; 255
     388:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__tablejump2__>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 60       	ori	r24, 0x01	; 1
     392:	87 8b       	std	Z+23, r24	; 0x17
     394:	ca 80       	ldd	r12, Y+2	; 0x02
     396:	db 80       	ldd	r13, Y+3	; 0x03
     398:	ec 80       	ldd	r14, Y+4	; 0x04
     39a:	fd 80       	ldd	r15, Y+5	; 0x05
     39c:	46 85       	ldd	r20, Z+14	; 0x0e
     39e:	57 85       	ldd	r21, Z+15	; 0x0f
     3a0:	60 89       	ldd	r22, Z+16	; 0x10
     3a2:	71 89       	ldd	r23, Z+17	; 0x11
     3a4:	4c 0d       	add	r20, r12
     3a6:	5d 1d       	adc	r21, r13
     3a8:	6e 1d       	adc	r22, r14
     3aa:	7f 1d       	adc	r23, r15
     3ac:	c2 01       	movw	r24, r4
     3ae:	0e 94 28 19 	call	0x3250	; 0x3250 <prvInsertTimerInActiveList>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <prvTimerTask+0x1aa>
     3b6:	4b c0       	rjmp	.+150    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b8:	d2 01       	movw	r26, r4
     3ba:	54 96       	adiw	r26, 0x14	; 20
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	55 97       	sbiw	r26, 0x15	; 21
     3c2:	c2 01       	movw	r24, r4
     3c4:	19 95       	eicall
     3c6:	f2 01       	movw	r30, r4
     3c8:	87 89       	ldd	r24, Z+23	; 0x17
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	6c 81       	ldd	r22, Y+4	; 0x04
     3d4:	7d 81       	ldd	r23, Y+5	; 0x05
     3d6:	86 85       	ldd	r24, Z+14	; 0x0e
     3d8:	97 85       	ldd	r25, Z+15	; 0x0f
     3da:	a0 89       	ldd	r26, Z+16	; 0x10
     3dc:	b1 89       	ldd	r27, Z+17	; 0x11
     3de:	9a 01       	movw	r18, r20
     3e0:	ab 01       	movw	r20, r22
     3e2:	28 0f       	add	r18, r24
     3e4:	39 1f       	adc	r19, r25
     3e6:	4a 1f       	adc	r20, r26
     3e8:	5b 1f       	adc	r21, r27
     3ea:	c8 2c       	mov	r12, r8
     3ec:	d9 2c       	mov	r13, r9
     3ee:	ea 2c       	mov	r14, r10
     3f0:	fb 2c       	mov	r15, r11
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c2 01       	movw	r24, r4
     3fa:	0e 94 ba 19 	call	0x3374	; 0x3374 <xTimerGenericCommand>
     3fe:	27 c0       	rjmp	.+78     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     400:	d2 01       	movw	r26, r4
     402:	57 96       	adiw	r26, 0x17	; 23
     404:	8c 91       	ld	r24, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	57 96       	adiw	r26, 0x17	; 23
     40c:	8c 93       	st	X, r24
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	f2 01       	movw	r30, r4
     412:	87 89       	ldd	r24, Z+23	; 0x17
     414:	81 60       	ori	r24, 0x01	; 1
     416:	87 8b       	std	Z+23, r24	; 0x17
     418:	4a 81       	ldd	r20, Y+2	; 0x02
     41a:	5b 81       	ldd	r21, Y+3	; 0x03
     41c:	6c 81       	ldd	r22, Y+4	; 0x04
     41e:	7d 81       	ldd	r23, Y+5	; 0x05
     420:	46 87       	std	Z+14, r20	; 0x0e
     422:	57 87       	std	Z+15, r21	; 0x0f
     424:	60 8b       	std	Z+16, r22	; 0x10
     426:	71 8b       	std	Z+17, r23	; 0x11
     428:	40 0f       	add	r20, r16
     42a:	51 1f       	adc	r21, r17
     42c:	62 1f       	adc	r22, r18
     42e:	73 1f       	adc	r23, r19
     430:	68 01       	movw	r12, r16
     432:	79 01       	movw	r14, r18
     434:	c2 01       	movw	r24, r4
     436:	0e 94 28 19 	call	0x3250	; 0x3250 <prvInsertTimerInActiveList>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43c:	f2 01       	movw	r30, r4
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 fd       	sbrc	r24, 1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	c2 01       	movw	r24, r4
     446:	97 d7       	rcall	.+3886   	; 0x1376 <vPortFree>
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	87 8b       	std	Z+23, r24	; 0x17
     44e:	28 2d       	mov	r18, r8
     450:	39 2d       	mov	r19, r9
     452:	4a 2d       	mov	r20, r10
     454:	5b 2d       	mov	r21, r11
     456:	66 2d       	mov	r22, r6
     458:	77 2d       	mov	r23, r7
     45a:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xTimerQueue>
     45e:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
     462:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <xQueueReceive>
     466:	81 11       	cpse	r24, r1
     468:	6c cf       	rjmp	.-296    	; 0x342 <prvTimerTask+0x134>
     46a:	e5 ce       	rjmp	.-566    	; 0x236 <prvTimerTask+0x28>
     46c:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskSuspendAll>
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 18 1a 	call	0x3430	; 0x3430 <prvSampleTimeNow>
     478:	6b 87       	std	Y+11, r22	; 0x0b
     47a:	7c 87       	std	Y+12, r23	; 0x0c
     47c:	8d 87       	std	Y+13, r24	; 0x0d
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	81 11       	cpse	r24, r1
     484:	5b cf       	rjmp	.-330    	; 0x33c <prvTimerTask+0x12e>
     486:	e0 91 e7 18 	lds	r30, 0x18E7	; 0x8018e7 <pxOverflowTimerList>
     48a:	f0 91 e8 18 	lds	r31, 0x18E8	; 0x8018e8 <pxOverflowTimerList+0x1>
     48e:	80 81       	ld	r24, Z
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	81 11       	cpse	r24, r1
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	28 2c       	mov	r2, r8
     498:	39 2c       	mov	r3, r9
     49a:	4a 2c       	mov	r4, r10
     49c:	5b 2c       	mov	r5, r11
     49e:	37 cf       	rjmp	.-402    	; 0x30e <prvTimerTask+0x100>

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d1 e2       	ldi	r29, 0x21	; 33
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	18 e0       	ldi	r17, 0x08	; 8
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	e8 e5       	ldi	r30, 0x58	; 88
     4b8:	fe e5       	ldi	r31, 0x5E	; 94
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	a0 30       	cpi	r26, 0x00	; 0
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	2a e1       	ldi	r18, 0x1A	; 26
     4cc:	a0 e0       	ldi	r26, 0x00	; 0
     4ce:	b8 e0       	ldi	r27, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a0 39       	cpi	r26, 0x90	; 144
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <main>
     4de:	0c 94 2a 2f 	jmp	0x5e54	; 0x5e54 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <co2Reader_create>:

	return _new_reader;
}

//	RETURN TO DESTROY METHODS
void co2Reader_destroy(co2reader_t self) {
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	88 2e       	mov	r8, r24
     50a:	96 2e       	mov	r9, r22
     50c:	1a 01       	movw	r2, r20
     50e:	28 01       	movw	r4, r16
     510:	39 01       	movw	r6, r18
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <calloc>
     51e:	ec 01       	movw	r28, r24
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	69 f1       	breq	.+90     	; 0x57e <co2Reader_create+0x9a>
     524:	fc 01       	movw	r30, r24
     526:	11 92       	st	Z+, r1
     528:	30 92 0b 08 	sts	0x080B, r3	; 0x80080b <_startMeasureEventGroup+0x1>
     52c:	20 92 0a 08 	sts	0x080A, r2	; 0x80080a <_startMeasureEventGroup>
     530:	40 92 06 08 	sts	0x0806, r4	; 0x800806 <_startMeasureBit>
     534:	50 92 07 08 	sts	0x0807, r5	; 0x800807 <_startMeasureBit+0x1>
     538:	60 92 08 08 	sts	0x0808, r6	; 0x800808 <_startMeasureBit+0x2>
     53c:	70 92 09 08 	sts	0x0809, r7	; 0x800809 <_startMeasureBit+0x3>
     540:	f0 92 05 08 	sts	0x0805, r15	; 0x800805 <_readyEventGroup+0x1>
     544:	e0 92 04 08 	sts	0x0804, r14	; 0x800804 <_readyEventGroup>
     548:	a0 92 00 08 	sts	0x0800, r10	; 0x800800 <__data_end>
     54c:	b0 92 01 08 	sts	0x0801, r11	; 0x800801 <__data_end+0x1>
     550:	c0 92 02 08 	sts	0x0802, r12	; 0x800802 <__data_end+0x2>
     554:	d0 92 03 08 	sts	0x0803, r13	; 0x800803 <__data_end+0x3>
     558:	49 2d       	mov	r20, r9
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	7f 01       	movw	r14, r30
     55e:	08 2d       	mov	r16, r8
     560:	9c 01       	movw	r18, r24
     562:	63 e4       	ldi	r22, 0x43	; 67
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 65 12 	call	0x24ca	; 0x24ca <xTaskCreate>
     56e:	8d e4       	ldi	r24, 0x4D	; 77
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	ce 01       	movw	r24, r28
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	3f 90       	pop	r3
     5a2:	2f 90       	pop	r2
     5a4:	08 95       	ret

000005a6 <co2Reader_measure>:
	for (;;) {
		co2Reader_measure(self);
	}
}

void co2Reader_measure(co2reader_t self) {//dummy
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     5b8:	40 91 06 08 	lds	r20, 0x0806	; 0x800806 <_startMeasureBit>
     5bc:	50 91 07 08 	lds	r21, 0x0807	; 0x800807 <_startMeasureBit+0x1>
     5c0:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <_startMeasureBit+0x2>
     5c4:	70 91 09 08 	lds	r23, 0x0809	; 0x800809 <_startMeasureBit+0x3>
     5c8:	cc 24       	eor	r12, r12
     5ca:	ca 94       	dec	r12
     5cc:	dc 2c       	mov	r13, r12
     5ce:	76 01       	movw	r14, r12
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_startMeasureEventGroup>
     5d8:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_startMeasureEventGroup+0x1>
     5dc:	6d d4       	rcall	.+2266   	; 0xeb8 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested in
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     5de:	00 91 06 08 	lds	r16, 0x0806	; 0x800806 <_startMeasureBit>
     5e2:	10 91 07 08 	lds	r17, 0x0807	; 0x800807 <_startMeasureBit+0x1>
     5e6:	20 91 08 08 	lds	r18, 0x0808	; 0x800808 <_startMeasureBit+0x2>
     5ea:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <_startMeasureBit+0x3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	a2 23       	and	r26, r18
     5f8:	b3 23       	and	r27, r19
     5fa:	08 17       	cp	r16, r24
     5fc:	19 07       	cpc	r17, r25
     5fe:	2a 07       	cpc	r18, r26
     600:	3b 07       	cpc	r19, r27
     602:	f1 f4       	brne	.+60     	; 0x640 <co2Reader_measure+0x9a>
		uint8_t no = self->value;
     604:	88 81       	ld	r24, Y
		no++;
		self->value = no;
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	88 83       	st	Y, r24
		printf("co2 done bit set");
     60a:	84 e5       	ldi	r24, 0x54	; 84
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

		vTaskDelay(2500); //pretend it takes some time
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>

		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     622:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <__data_end>
     626:	50 91 01 08 	lds	r21, 0x0801	; 0x800801 <__data_end+0x1>
     62a:	60 91 02 08 	lds	r22, 0x0802	; 0x800802 <__data_end+0x2>
     62e:	70 91 03 08 	lds	r23, 0x0803	; 0x800803 <__data_end+0x3>
     632:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <_readyEventGroup>
     636:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <_readyEventGroup+0x1>
     63a:	fe d4       	rcall	.+2556   	; 0x1038 <xEventGroupSetBits>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <co2Reader_executeTask>:
	//free(self->value);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void co2Reader_executeTask(co2reader_t self) {
     652:	ec 01       	movw	r28, r24
	for (;;) {
		co2Reader_measure(self);
     654:	ce 01       	movw	r24, r28
     656:	a7 df       	rcall	.-178    	; 0x5a6 <co2Reader_measure>
     658:	fd cf       	rjmp	.-6      	; 0x654 <co2Reader_executeTask+0x2>

0000065a <co2Reader_getCO2>:
	}
}

uint8_t co2Reader_getCO2(co2reader_t self) {
	return self->value;
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	08 95       	ret

00000660 <currentCondition_create>:
	//free(self->co2Data);
	//free(self->temperatureData);
	//free(self->humidityData);
	//free(self->soundData);
	//free(self);
	vPortFree(self->humidityData);//maybe use this
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <calloc>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	49 f0       	breq	.+18     	; 0x688 <currentCondition_create+0x28>
     676:	fc 01       	movw	r30, r24
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
     67c:	15 82       	std	Z+5, r1	; 0x05
     67e:	14 82       	std	Z+4, r1	; 0x04
     680:	17 82       	std	Z+7, r1	; 0x07
     682:	16 82       	std	Z+6, r1	; 0x06
     684:	13 82       	std	Z+3, r1	; 0x03
     686:	12 82       	std	Z+2, r1	; 0x02
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <currentCondition_setCO2>:
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	19 f0       	breq	.+6      	; 0x698 <currentCondition_setCO2+0xa>
     692:	fc 01       	movw	r30, r24
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	62 83       	std	Z+2, r22	; 0x02
     698:	08 95       	ret

0000069a <currentCondition_setHumidity>:
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	19 f0       	breq	.+6      	; 0x6a4 <currentCondition_setHumidity+0xa>
     69e:	fc 01       	movw	r30, r24
     6a0:	77 83       	std	Z+7, r23	; 0x07
     6a2:	66 83       	std	Z+6, r22	; 0x06
     6a4:	08 95       	ret

000006a6 <currentCondition_setTemperature>:
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <currentCondition_setTemperature+0xa>
     6aa:	fc 01       	movw	r30, r24
     6ac:	75 83       	std	Z+5, r23	; 0x05
     6ae:	64 83       	std	Z+4, r22	; 0x04
     6b0:	08 95       	ret

000006b2 <getcurrentConditionPayload>:
}
lora_payload_t getcurrentConditionPayload(currentCondition_t self)
{
     6b2:	fc 01       	movw	r30, r24
     6b4:	db 01       	movw	r26, r22
	lora_payload_t payload;
	payload.port_no = 1;
	payload.len = 4;
	
	payload.bytes[0] = self->temperatureData >> 8;
     6b6:	14 96       	adiw	r26, 0x04	; 4
     6b8:	2c 91       	ld	r18, X
     6ba:	14 97       	sbiw	r26, 0x04	; 4
     6bc:	15 96       	adiw	r26, 0x05	; 5
     6be:	3c 91       	ld	r19, X
     6c0:	15 97       	sbiw	r26, 0x05	; 5
	payload.bytes[1] = self->temperatureData & 0xFF;

	payload.bytes[2] = self->humidityData >> 8;
     6c2:	16 96       	adiw	r26, 0x06	; 6
     6c4:	8c 91       	ld	r24, X
     6c6:	16 97       	sbiw	r26, 0x06	; 6
     6c8:	17 96       	adiw	r26, 0x07	; 7
     6ca:	9c 91       	ld	r25, X
	payload.bytes[3] = self->humidityData & 0xFF;
	return payload;
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	40 83       	st	Z, r20
     6d0:	44 e0       	ldi	r20, 0x04	; 4
     6d2:	41 83       	std	Z+1, r20	; 0x01
     6d4:	32 83       	std	Z+2, r19	; 0x02
     6d6:	23 83       	std	Z+3, r18	; 0x03
     6d8:	94 83       	std	Z+4, r25	; 0x04
     6da:	85 83       	std	Z+5, r24	; 0x05
	
     6dc:	cf 01       	movw	r24, r30
     6de:	08 95       	ret

000006e0 <device_create>:
	free(self);*/
}

currentCondition_t device_getCurrentCondition(device_t self) {
	return self->currentCondition;
}
     6e0:	2f 92       	push	r2
     6e2:	3f 92       	push	r3
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	00 d0       	rcall	.+0      	; 0x706 <device_create+0x26>
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	28 2e       	mov	r2, r24
     70e:	36 2e       	mov	r3, r22
     710:	5c 83       	std	Y+4, r21	; 0x04
     712:	4b 83       	std	Y+3, r20	; 0x03
     714:	28 01       	movw	r4, r16
     716:	39 01       	movw	r6, r18
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <calloc>
     724:	9a 83       	std	Y+2, r25	; 0x02
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	09 f4       	brne	.+2      	; 0x72e <device_create+0x4e>
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <device_create+0xda>
     72e:	fc 01       	movw	r30, r24
     730:	91 82       	std	Z+1, r9	; 0x01
     732:	80 82       	st	Z, r8
     734:	8a 8d       	ldd	r24, Y+26	; 0x1a
     736:	9b 8d       	ldd	r25, Y+27	; 0x1b
     738:	93 83       	std	Z+3, r25	; 0x03
     73a:	82 83       	std	Z+2, r24	; 0x02
     73c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deviceId>
     740:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deviceId+0x1>
     744:	8d df       	rcall	.-230    	; 0x660 <currentCondition_create>
     746:	e9 81       	ldd	r30, Y+1	; 0x01
     748:	fa 81       	ldd	r31, Y+2	; 0x02
     74a:	95 83       	std	Z+5, r25	; 0x05
     74c:	84 83       	std	Z+4, r24	; 0x04
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <_startMeasureEventGroup+0x1>
     756:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <_startMeasureEventGroup>
     75a:	40 92 2a 08 	sts	0x082A, r4	; 0x80082a <_startMeasureBit>
     75e:	50 92 2b 08 	sts	0x082B, r5	; 0x80082b <_startMeasureBit+0x1>
     762:	60 92 2c 08 	sts	0x082C, r6	; 0x80082c <_startMeasureBit+0x2>
     766:	70 92 2d 08 	sts	0x082D, r7	; 0x80082d <_startMeasureBit+0x3>
     76a:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <_readyEventGroup+0x1>
     76e:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <_readyEventGroup>
     772:	a0 92 24 08 	sts	0x0824, r10	; 0x800824 <_readyBit>
     776:	b0 92 25 08 	sts	0x0825, r11	; 0x800825 <_readyBit+0x1>
     77a:	c0 92 26 08 	sts	0x0826, r12	; 0x800826 <_readyBit+0x2>
     77e:	d0 92 27 08 	sts	0x0827, r13	; 0x800827 <_readyBit+0x3>
     782:	8c 8d       	ldd	r24, Y+28	; 0x1c
     784:	9d 8d       	ldd	r25, Y+29	; 0x1d
     786:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <_uplinkmessageBuffer+0x1>
     78a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <_uplinkmessageBuffer>
     78e:	43 2d       	mov	r20, r3
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	7f 01       	movw	r14, r30
     794:	96 e0       	ldi	r25, 0x06	; 6
     796:	e9 0e       	add	r14, r25
     798:	f1 1c       	adc	r15, r1
     79a:	02 2d       	mov	r16, r2
     79c:	9f 01       	movw	r18, r30
     79e:	65 e6       	ldi	r22, 0x65	; 101
     7a0:	72 e0       	ldi	r23, 0x02	; 2
     7a2:	88 ed       	ldi	r24, 0xD8	; 216
     7a4:	94 e0       	ldi	r25, 0x04	; 4
     7a6:	0e 94 65 12 	call	0x24ca	; 0x24ca <xTaskCreate>
     7aa:	8c e6       	ldi	r24, 0x6C	; 108
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	9f 93       	push	r25
     7b0:	8f 93       	push	r24
     7b2:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	7f 90       	pop	r7
     7e0:	6f 90       	pop	r6
     7e2:	5f 90       	pop	r5
     7e4:	4f 90       	pop	r4
     7e6:	3f 90       	pop	r3
     7e8:	2f 90       	pop	r2
     7ea:	08 95       	ret

000007ec <device_setHumidityToCurrent>:

void device_setHumidityToCurrent(device_t self, uint16_t value)
{
	currentCondition_setHumidity(self->currentCondition,value);
     7ec:	fc 01       	movw	r30, r24
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	53 cf       	rjmp	.-346    	; 0x69a <currentCondition_setHumidity>
     7f4:	08 95       	ret

000007f6 <device_getHumidityData>:
}


uint16_t device_getHumidityData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     7f6:	fc 01       	movw	r30, r24
     7f8:	82 81       	ldd	r24, Z+2	; 0x02
     7fa:	93 81       	ldd	r25, Z+3	; 0x03
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	11 f0       	breq	.+4      	; 0x804 <device_getHumidityData+0xe>
	{
		return humAndTempReader_getHumidity(self->humAndTempReader);
     800:	c7 c1       	rjmp	.+910    	; 0xb90 <humAndTempReader_getHumidity>
     802:	08 95       	ret
	}
	else
	return -1;
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	9f ef       	ldi	r25, 0xFF	; 255
}
     808:	08 95       	ret

0000080a <device_setCO2ToCurrent>:

void device_setCO2ToCurrent(device_t self, uint16_t value) {
	currentCondition_setCO2(self->currentCondition, value);
     80a:	fc 01       	movw	r30, r24
     80c:	84 81       	ldd	r24, Z+4	; 0x04
     80e:	95 81       	ldd	r25, Z+5	; 0x05
     810:	3e cf       	rjmp	.-388    	; 0x68e <currentCondition_setCO2>
     812:	08 95       	ret

00000814 <device_getCO2Data>:
}

uint16_t device_getCO2Data(device_t self) {
	if (self->co2reader != NULL)
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	19 f0       	breq	.+6      	; 0x824 <device_getCO2Data+0x10>
		return co2Reader_getCO2(self->co2reader);
     81e:	1d df       	rcall	.-454    	; 0x65a <co2Reader_getCO2>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	08 95       	ret
	else return -1;
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	9f ef       	ldi	r25, 0xFF	; 255
}
     828:	08 95       	ret

0000082a <device_setTemperatureToCurrent>:

void device_setTemperatureToCurrent(device_t self, int16_t value)
{
	
	currentCondition_setTemperature(self->currentCondition,value);
     82a:	fc 01       	movw	r30, r24
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	95 81       	ldd	r25, Z+5	; 0x05
     830:	3a cf       	rjmp	.-396    	; 0x6a6 <currentCondition_setTemperature>
     832:	08 95       	ret

00000834 <device_getTemperatureData>:
}


int16_t device_getTemperatureData(device_t self)
{
	if (self->humAndTempReader!=NULL)
     834:	fc 01       	movw	r30, r24
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	93 81       	ldd	r25, Z+3	; 0x03
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	11 f0       	breq	.+4      	; 0x842 <device_getTemperatureData+0xe>
	{
		return humAndTempReader_getTemperature(self->humAndTempReader);
     83e:	ac c1       	rjmp	.+856    	; 0xb98 <humAndTempReader_getTemperature>
     840:	08 95       	ret
	}
	else
	return -1;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	9f ef       	ldi	r25, 0xFF	; 255
	
     846:	08 95       	ret

00000848 <device_startMeasuring>:
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
}

void device_startMeasuring(device_t self) {
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	66 97       	sbiw	r28, 0x16	; 22
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	5c 01       	movw	r10, r24
	//we should first check if device is on, get that from lora and add new eventBit 

	//tell sensors to start meassuring 
	xEventGroupSetBits(_startMeasureEventGroup, _startMeasureBit);
     86e:	40 91 2a 08 	lds	r20, 0x082A	; 0x80082a <_startMeasureBit>
     872:	50 91 2b 08 	lds	r21, 0x082B	; 0x80082b <_startMeasureBit+0x1>
     876:	60 91 2c 08 	lds	r22, 0x082C	; 0x80082c <_startMeasureBit+0x2>
     87a:	70 91 2d 08 	lds	r23, 0x082D	; 0x80082d <_startMeasureBit+0x3>
     87e:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <_startMeasureEventGroup>
     882:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <_startMeasureEventGroup+0x1>
     886:	d8 d3       	rcall	.+1968   	; 0x1038 <xEventGroupSetBits>
	printf("device has set bits");
     888:	86 e7       	ldi	r24, 0x76	; 118
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	//wait for sensors to read data
	EventBits_t uxBits = xEventGroupWaitBits(_readyEventGroup, //eventGroup it is interested in
     894:	40 91 24 08 	lds	r20, 0x0824	; 0x800824 <_readyBit>
     898:	50 91 25 08 	lds	r21, 0x0825	; 0x800825 <_readyBit+0x1>
     89c:	60 91 26 08 	lds	r22, 0x0826	; 0x800826 <_readyBit+0x2>
     8a0:	70 91 27 08 	lds	r23, 0x0827	; 0x800827 <_readyBit+0x3>
     8a4:	cc 24       	eor	r12, r12
     8a6:	ca 94       	dec	r12
     8a8:	dc 2c       	mov	r13, r12
     8aa:	76 01       	movw	r14, r12
     8ac:	01 e0       	ldi	r16, 0x01	; 1
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <_readyEventGroup>
     8b4:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <_readyEventGroup+0x1>
     8b8:	ff d2       	rcall	.+1534   	; 0xeb8 <xEventGroupWaitBits>
		_readyBit, //bits it is interested in
		pdTRUE, //clears the bits 
		pdTRUE, //waits for both bits to be set
		portMAX_DELAY); //waits forever if needed

	if ((uxBits & (_readyBit)) == (_readyBit)) {
     8ba:	00 91 24 08 	lds	r16, 0x0824	; 0x800824 <_readyBit>
     8be:	10 91 25 08 	lds	r17, 0x0825	; 0x800825 <_readyBit+0x1>
     8c2:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <_readyBit+0x2>
     8c6:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <_readyBit+0x3>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	80 23       	and	r24, r16
     8d0:	91 23       	and	r25, r17
     8d2:	a2 23       	and	r26, r18
     8d4:	b3 23       	and	r27, r19
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	08 17       	cp	r16, r24
     8dc:	19 07       	cpc	r17, r25
     8de:	2a 07       	cpc	r18, r26
     8e0:	3b 07       	cpc	r19, r27
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <device_startMeasuring+0x9e>
		device_setCO2ToCurrent(self, device_getCO2Data(self));
     8e4:	54 c0       	rjmp	.+168    	; 0x98e <device_startMeasuring+0x146>
     8e6:	c5 01       	movw	r24, r10
     8e8:	95 df       	rcall	.-214    	; 0x814 <device_getCO2Data>
     8ea:	bc 01       	movw	r22, r24
     8ec:	c5 01       	movw	r24, r10
		device_setTemperatureToCurrent(self, device_getTemperatureData(self));
     8ee:	8d df       	rcall	.-230    	; 0x80a <device_setCO2ToCurrent>
     8f0:	c5 01       	movw	r24, r10
     8f2:	a0 df       	rcall	.-192    	; 0x834 <device_getTemperatureData>
     8f4:	bc 01       	movw	r22, r24
     8f6:	c5 01       	movw	r24, r10
		device_setHumidityToCurrent(self, device_getHumidityData(self));
     8f8:	98 df       	rcall	.-208    	; 0x82a <device_setTemperatureToCurrent>
     8fa:	c5 01       	movw	r24, r10
     8fc:	7c df       	rcall	.-264    	; 0x7f6 <device_getHumidityData>
     8fe:	bc 01       	movw	r22, r24
     900:	c5 01       	movw	r24, r10
     902:	74 df       	rcall	.-280    	; 0x7ec <device_setHumidityToCurrent>
		
		printf("device got done bit\n");
     904:	8a e8       	ldi	r24, 0x8A	; 138
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 1f 2c 	call	0x583e	; 0x583e <puts>
		
		printf("CO2 is: %u\n", co2Reader_getCO2(self->co2reader));
     90c:	f5 01       	movw	r30, r10
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a3 de       	rcall	.-698    	; 0x65a <co2Reader_getCO2>
     914:	1f 92       	push	r1
     916:	8f 93       	push	r24
     918:	8e e9       	ldi	r24, 0x9E	; 158
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
		printf("Temperature is: %d\n", device_getTemperatureData(self));
     924:	c5 01       	movw	r24, r10
     926:	86 df       	rcall	.-244    	; 0x834 <device_getTemperatureData>
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	8a ea       	ldi	r24, 0xAA	; 170
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
		printf("Humidity is: %u\n", device_getHumidityData(self));
     938:	c5 01       	movw	r24, r10
     93a:	5d df       	rcall	.-326    	; 0x7f6 <device_getHumidityData>
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	8e eb       	ldi	r24, 0xBE	; 190
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
		
		
		
		
		/*Perhaps loraPayload is not a good idea to be here*/
		_uplink_payload = getcurrentConditionPayload(self->currentCondition);
     94c:	f5 01       	movw	r30, r10
     94e:	64 81       	ldd	r22, Z+4	; 0x04
     950:	75 81       	ldd	r23, Z+5	; 0x05
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	ad de       	rcall	.-678    	; 0x6b2 <getcurrentConditionPayload>
     958:	86 e1       	ldi	r24, 0x16	; 22
     95a:	fe 01       	movw	r30, r28
     95c:	31 96       	adiw	r30, 0x01	; 1
     95e:	ac e0       	ldi	r26, 0x0C	; 12
     960:	b8 e0       	ldi	r27, 0x08	; 8
     962:	01 90       	ld	r0, Z+
     964:	0d 92       	st	X+, r0
     966:	8a 95       	dec	r24
     968:	e1 f7       	brne	.-8      	; 0x962 <device_startMeasuring+0x11a>
     96a:	0f ef       	ldi	r16, 0xFF	; 255
		//printf("The temperature in device is: %d\n", _uplink_payload.bytes[0]);
		//printf("The temperature2 in device is: %d\n", _uplink_payload.bytes[1]);
		//printf("The humidity in device is: %u\n", _uplink_payload.bytes[2]);
		//printf("The humidity2 in device is: %u\n", _uplink_payload.bytes[3]);		
		
		xMessageBufferSend(_uplinkmessageBuffer,(void*) &_uplink_payload,sizeof(_uplink_payload),portMAX_DELAY);
     96c:	1f ef       	ldi	r17, 0xFF	; 255
     96e:	98 01       	movw	r18, r16
     970:	46 e1       	ldi	r20, 0x16	; 22
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	6c e0       	ldi	r22, 0x0C	; 12
     976:	78 e0       	ldi	r23, 0x08	; 8
     978:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <_uplinkmessageBuffer>
     97c:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <_uplinkmessageBuffer+0x1>
     980:	0e 94 39 10 	call	0x2072	; 0x2072 <xStreamBufferSend>
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	66 96       	adiw	r28, 0x16	; 22
		
		
	}
}
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	df 90       	pop	r13
     9a8:	cf 90       	pop	r12
     9aa:	bf 90       	pop	r11
     9ac:	af 90       	pop	r10
     9ae:	08 95       	ret

000009b0 <device_executeTask>:
     9b0:	ec 01       	movw	r28, r24
}

//devided so we can test
void device_executeTask(device_t self) {
	for (;;)
		device_startMeasuring(self);
     9b2:	ce 01       	movw	r24, r28
     9b4:	49 df       	rcall	.-366    	; 0x848 <device_startMeasuring>
     9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <device_executeTask+0x2>

000009b8 <humAndTempReader_create>:
void humAndTempReader_destroy(humAndTempReader_t self) {
	if (self == NULL)
	return;

	//delete will clear the allocated memory to the task + we need to remove everything else
	vTaskDelete(self->handleTask);
     9b8:	2f 92       	push	r2
     9ba:	3f 92       	push	r3
     9bc:	4f 92       	push	r4
     9be:	5f 92       	push	r5
     9c0:	6f 92       	push	r6
     9c2:	7f 92       	push	r7
     9c4:	8f 92       	push	r8
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	88 2e       	mov	r8, r24
     9de:	96 2e       	mov	r9, r22
     9e0:	1a 01       	movw	r2, r20
     9e2:	28 01       	movw	r4, r16
     9e4:	39 01       	movw	r6, r18
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	86 e0       	ldi	r24, 0x06	; 6
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <calloc>
     9f2:	ec 01       	movw	r28, r24
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	91 f1       	breq	.+100    	; 0xa5c <humAndTempReader_create+0xa4>
     9f8:	19 82       	std	Y+1, r1	; 0x01
     9fa:	18 82       	st	Y, r1
     9fc:	1b 82       	std	Y+3, r1	; 0x03
     9fe:	1a 82       	std	Y+2, r1	; 0x02
     a00:	30 92 3b 08 	sts	0x083B, r3	; 0x80083b <_startMeasureEventGroup+0x1>
     a04:	20 92 3a 08 	sts	0x083A, r2	; 0x80083a <_startMeasureEventGroup>
     a08:	40 92 36 08 	sts	0x0836, r4	; 0x800836 <_startMeasureBit>
     a0c:	50 92 37 08 	sts	0x0837, r5	; 0x800837 <_startMeasureBit+0x1>
     a10:	60 92 38 08 	sts	0x0838, r6	; 0x800838 <_startMeasureBit+0x2>
     a14:	70 92 39 08 	sts	0x0839, r7	; 0x800839 <_startMeasureBit+0x3>
     a18:	f0 92 35 08 	sts	0x0835, r15	; 0x800835 <_readyEventGroup+0x1>
     a1c:	e0 92 34 08 	sts	0x0834, r14	; 0x800834 <_readyEventGroup>
     a20:	a0 92 30 08 	sts	0x0830, r10	; 0x800830 <_readyBit>
     a24:	b0 92 31 08 	sts	0x0831, r11	; 0x800831 <_readyBit+0x1>
     a28:	c0 92 32 08 	sts	0x0832, r12	; 0x800832 <_readyBit+0x2>
     a2c:	d0 92 33 08 	sts	0x0833, r13	; 0x800833 <_readyBit+0x3>
     a30:	49 2d       	mov	r20, r9
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	7c 01       	movw	r14, r24
     a36:	84 e0       	ldi	r24, 0x04	; 4
     a38:	e8 0e       	add	r14, r24
     a3a:	f1 1c       	adc	r15, r1
     a3c:	08 2d       	mov	r16, r8
     a3e:	9e 01       	movw	r18, r28
     a40:	6f ec       	ldi	r22, 0xCF	; 207
     a42:	72 e0       	ldi	r23, 0x02	; 2
     a44:	84 ec       	ldi	r24, 0xC4	; 196
     a46:	95 e0       	ldi	r25, 0x05	; 5
     a48:	0e 94 65 12 	call	0x24ca	; 0x24ca <xTaskCreate>
     a4c:	80 ee       	ldi	r24, 0xE0	; 224
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	9f 90       	pop	r9
     a74:	8f 90       	pop	r8
     a76:	7f 90       	pop	r7
     a78:	6f 90       	pop	r6
     a7a:	5f 90       	pop	r5
     a7c:	4f 90       	pop	r4
     a7e:	3f 90       	pop	r3
     a80:	2f 90       	pop	r2
     a82:	08 95       	ret

00000a84 <humAndTempReader_measure>:
	for (;;) {
		humAndTempReader_measure(self);
	}
}

void humAndTempReader_measure(humAndTempReader_t self) {//dummy
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
	EventBits_t uxBits = xEventGroupWaitBits(_startMeasureEventGroup, //eventGroup
     a96:	40 91 36 08 	lds	r20, 0x0836	; 0x800836 <_startMeasureBit>
     a9a:	50 91 37 08 	lds	r21, 0x0837	; 0x800837 <_startMeasureBit+0x1>
     a9e:	60 91 38 08 	lds	r22, 0x0838	; 0x800838 <_startMeasureBit+0x2>
     aa2:	70 91 39 08 	lds	r23, 0x0839	; 0x800839 <_startMeasureBit+0x3>
     aa6:	cc 24       	eor	r12, r12
     aa8:	ca 94       	dec	r12
     aaa:	dc 2c       	mov	r13, r12
     aac:	76 01       	movw	r14, r12
     aae:	01 e0       	ldi	r16, 0x01	; 1
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <_startMeasureEventGroup>
     ab6:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <_startMeasureEventGroup+0x1>
     aba:	fe d1       	rcall	.+1020   	; 0xeb8 <xEventGroupWaitBits>
	_startMeasureBit, //bits it is interested i
	pdTRUE, //clears the bits
	pdTRUE, //waits for both bits to be set
	portMAX_DELAY); //wait

	if ((uxBits & (_startMeasureBit)) == (_startMeasureBit)) {
     abc:	00 91 36 08 	lds	r16, 0x0836	; 0x800836 <_startMeasureBit>
     ac0:	10 91 37 08 	lds	r17, 0x0837	; 0x800837 <_startMeasureBit+0x1>
     ac4:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <_startMeasureBit+0x2>
     ac8:	30 91 39 08 	lds	r19, 0x0839	; 0x800839 <_startMeasureBit+0x3>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	80 23       	and	r24, r16
     ad2:	91 23       	and	r25, r17
     ad4:	a2 23       	and	r26, r18
     ad6:	b3 23       	and	r27, r19
     ad8:	08 17       	cp	r16, r24
     ada:	19 07       	cpc	r17, r25
     adc:	2a 07       	cpc	r18, r26
     ade:	3b 07       	cpc	r19, r27
     ae0:	09 f0       	breq	.+2      	; 0xae4 <humAndTempReader_measure+0x60>
     ae2:	49 c0       	rjmp	.+146    	; 0xb76 <humAndTempReader_measure+0xf2>
		hih8120Wakeup();
     ae4:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <hih8120Wakeup>
		vTaskDelay(50);
     ae8:	62 e3       	ldi	r22, 0x32	; 50
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>
		hih8120Meassure();
     af4:	0e 94 0b 1c 	call	0x3816	; 0x3816 <hih8120Meassure>
		vTaskDelay(5);
     af8:	65 e0       	ldi	r22, 0x05	; 5
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>
		if(hih8120IsReady())
     b04:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <hih8120IsReady>
     b08:	88 23       	and	r24, r24
     b0a:	41 f1       	breq	.+80     	; 0xb5c <humAndTempReader_measure+0xd8>
		{
			self->humidity = hih8120GetHumidityPercent_x10();
     b0c:	0e 94 31 1c 	call	0x3862	; 0x3862 <hih8120GetHumidityPercent_x10>
     b10:	99 83       	std	Y+1, r25	; 0x01
     b12:	88 83       	st	Y, r24
			self->temperature = hih8120GetTemperature_x10();
     b14:	0e 94 57 1c 	call	0x38ae	; 0x38ae <hih8120GetTemperature_x10>
     b18:	9b 83       	std	Y+3, r25	; 0x03
     b1a:	8a 83       	std	Y+2, r24	; 0x02
			printf("humidity and temperature done bit set\n");
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	0e 94 1f 2c 	call	0x583e	; 0x583e <puts>
			printf("Humidity: %u\n", self->humidity);
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	8f 93       	push	r24
     b28:	88 81       	ld	r24, Y
     b2a:	8f 93       	push	r24
     b2c:	85 e2       	ldi	r24, 0x25	; 37
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
			printf("TEMP: %d\n", self->temperature);
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	8f 93       	push	r24
     b3c:	8a 81       	ldd	r24, Y+2	; 0x02
     b3e:	8f 93       	push	r24
     b40:	83 e3       	ldi	r24, 0x33	; 51
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	9f 93       	push	r25
     b46:	8f 93       	push	r24
     b48:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
     b4c:	8d b7       	in	r24, 0x3d	; 61
     b4e:	9e b7       	in	r25, 0x3e	; 62
     b50:	08 96       	adiw	r24, 0x08	; 8
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	9e bf       	out	0x3e, r25	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	8d bf       	out	0x3d, r24	; 61
		}
		//set done bit so that device knows meassurement is done
		xEventGroupSetBits(_readyEventGroup, _readyBit);
     b5c:	40 91 30 08 	lds	r20, 0x0830	; 0x800830 <_readyBit>
     b60:	50 91 31 08 	lds	r21, 0x0831	; 0x800831 <_readyBit+0x1>
     b64:	60 91 32 08 	lds	r22, 0x0832	; 0x800832 <_readyBit+0x2>
     b68:	70 91 33 08 	lds	r23, 0x0833	; 0x800833 <_readyBit+0x3>
     b6c:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <_readyEventGroup>
     b70:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <_readyEventGroup+0x1>
     b74:	61 d2       	rcall	.+1218   	; 0x1038 <xEventGroupSetBits>
	}
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	08 95       	ret

00000b88 <humAndTempReader_executeTask>:
	//free(self->temperature);
	//free(self);
}

//actual task, methods devided so that it is possible to test
void humAndTempReader_executeTask(humAndTempReader_t self) {
     b88:	ec 01       	movw	r28, r24
	for (;;) {
		humAndTempReader_measure(self);
     b8a:	ce 01       	movw	r24, r28
     b8c:	7b df       	rcall	.-266    	; 0xa84 <humAndTempReader_measure>
     b8e:	fd cf       	rjmp	.-6      	; 0xb8a <humAndTempReader_executeTask+0x2>

00000b90 <humAndTempReader_getHumidity>:
	}
}

uint16_t humAndTempReader_getHumidity(humAndTempReader_t self){
	return self->humidity;
}
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	08 95       	ret

00000b98 <humAndTempReader_getTemperature>:

int16_t humAndTempReader_getTemperature(humAndTempReader_t self){
	return self->temperature;
}
     b98:	fc 01       	movw	r30, r24
     b9a:	82 81       	ldd	r24, Z+2	; 0x02
     b9c:	93 81       	ldd	r25, Z+3	; 0x03
     b9e:	08 95       	ret

00000ba0 <lora_UpLinkHandler_create>:
/*Check for the parameters*/



void lora_UpLinkHandler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t xMessageBuffer)
{
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	9b 01       	movw	r18, r22
	_buffer = xMessageBuffer;
	
	
	
	xTaskCreate(
     ba8:	e1 2c       	mov	r14, r1
     baa:	f1 2c       	mov	r15, r1
     bac:	08 2f       	mov	r16, r24
     bae:	48 e8       	ldi	r20, 0x88	; 136
     bb0:	51 e0       	ldi	r21, 0x01	; 1
     bb2:	6d e3       	ldi	r22, 0x3D	; 61
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	89 e2       	ldi	r24, 0x29	; 41
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	0e 94 65 12 	call	0x24ca	; 0x24ca <xTaskCreate>
	,  (const portCHAR *)"LRUpHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  xMessageBuffer
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <lora_UpLinkHandler_task>:
	
	/*Receives message from message buffer shared between it and the application responsible for gathering the data
	--> Should be called every 5 minutes from application
	*/
	void lora_UpLinkHandler_task(MessageBufferHandle_t xMessageBuffer)
	{	
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	7c 01       	movw	r14, r24
		size_t xBytesToSend;
		char rxData[50];
		if (!isSet)
     bd6:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <isSet>
     bda:	81 11       	cpse	r24, r1
     bdc:	d0 c0       	rjmp	.+416    	; 0xd7e <lora_UpLinkHandler_task+0x1b8>
		{
			// Hardware reset of LoRaWAN transceiver
			lora_driver_reset_rn2483(1);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	0e 94 76 1f 	call	0x3eec	; 0x3eec <lora_driver_reset_rn2483>
			vTaskDelay(2);
     be4:	62 e0       	ldi	r22, 0x02	; 2
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>
			lora_driver_reset_rn2483(0);
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	0e 94 76 1f 	call	0x3eec	; 0x3eec <lora_driver_reset_rn2483>
			// Give it a chance to wakeup
			vTaskDelay(150);
     bf6:	66 e9       	ldi	r22, 0x96	; 150
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     c02:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <lora_driver_flush_buffers>


static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <led_slow_blink>
	//The below code is required to be executed only once due to the fact that these MAC settings
	// can be stored inside of the tranciever
	//START ON ONE TIME USE CODE

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     c0c:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <lora_driver_rn2483_factory_reset>
     c10:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     c14:	9f 93       	push	r25
     c16:	8f 93       	push	r24
     c18:	86 e4       	ldi	r24, 0x46	; 70
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     c24:	0e 94 08 21 	call	0x4210	; 0x4210 <lora_driver_configure_to_eu868>
     c28:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	89 e5       	ldi	r24, 0x59	; 89
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     c3c:	83 e5       	ldi	r24, 0x53	; 83
     c3e:	98 e0       	ldi	r25, 0x08	; 8
     c40:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     c44:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     c48:	c3 e5       	ldi	r28, 0x53	; 83
     c4a:	d8 e0       	ldi	r29, 0x08	; 8
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	9f 93       	push	r25
     c52:	8f 93       	push	r24
     c54:	82 e7       	ldi	r24, 0x72	; 114
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	9f 93       	push	r25
     c5a:	8f 93       	push	r24
     c5c:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <lora_driver_set_device_identifier>
     c66:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	86 e8       	ldi	r24, 0x86	; 134
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     c7e:	ae 01       	movw	r20, r28
     c80:	6b e9       	ldi	r22, 0x9B	; 155
     c82:	73 e0       	ldi	r23, 0x03	; 3
     c84:	8c eb       	ldi	r24, 0xBC	; 188
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 e6 21 	call	0x43cc	; 0x43cc <lora_driver_set_otaa_identity>
     c8c:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	8b e9       	ldi	r24, 0x9B	; 155
     c9a:	93 e0       	ldi	r25, 0x03	; 3
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	8c eb       	ldi	r24, 0xBC	; 188
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	8d ec       	ldi	r24, 0xCD	; 205
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     cb4:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <lora_driver_save_mac>
     cb8:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	94 e0       	ldi	r25, 0x04	; 4
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	//END OF ONE TIME USE CODE
	
	
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     ccc:	8d b7       	in	r24, 0x3d	; 61
     cce:	9e b7       	in	r25, 0x3e	; 62
     cd0:	82 96       	adiw	r24, 0x22	; 34
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	9e bf       	out	0x3e, r25	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	8d bf       	out	0x3d, r24	; 61
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	0e 94 e5 20 	call	0x41ca	; 0x41ca <lora_driver_set_adaptive_data_rate>
     ce2:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	82 e1       	ldi	r24, 0x12	; 18
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     cf6:	84 ef       	ldi	r24, 0xF4	; 244
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <lora_driver_set_receive_delay>
     cfe:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	8f 93       	push	r24
     d0a:	84 ef       	ldi	r24, 0xF4	; 244
     d0c:	8f 93       	push	r24
     d0e:	83 e3       	ldi	r24, 0x33	; 51
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
     d1a:	8d b7       	in	r24, 0x3d	; 61
     d1c:	9e b7       	in	r25, 0x3e	; 62
     d1e:	0a 96       	adiw	r24, 0x0a	; 10
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	9e bf       	out	0x3e, r25	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	8d bf       	out	0x3d, r24	; 61
     d2a:	ca e0       	ldi	r28, 0x0A	; 10
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d2e:	03 e5       	ldi	r16, 0x53	; 83
     d30:	14 e0       	ldi	r17, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <lora_driver_join>
     d38:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     d3a:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	1f 93       	push	r17
     d48:	0f 93       	push	r16
     d4a:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>

		if ( rc != LoRa_ACCEPTED)
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	88 e0       	ldi	r24, 0x08	; 8
     d5c:	d8 16       	cp	r13, r24
     d5e:	09 f4       	brne	.+2      	; 0xd62 <lora_UpLinkHandler_task+0x19c>
     d60:	62 c0       	rjmp	.+196    	; 0xe26 <lora_UpLinkHandler_task+0x260>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     d68:	66 e3       	ldi	r22, 0x36	; 54
     d6a:	71 e0       	ldi	r23, 0x01	; 1
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>
     d74:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     d76:	e9 f6       	brne	.-70     	; 0xd32 <lora_UpLinkHandler_task+0x16c>
     d78:	5d c0       	rjmp	.+186    	; 0xe34 <lora_UpLinkHandler_task+0x26e>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     d7a:	76 d4       	rcall	.+2284   	; 0x1668 <vPortYield>
     d7c:	fe cf       	rjmp	.-4      	; 0xd7a <lora_UpLinkHandler_task+0x1b4>
			isSet=true;
		}
		

		
		xBytesToSend = xMessageBufferReceive(xMessageBuffer, (void*) &_uplink_payload,
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	10 e0       	ldi	r17, 0x00	; 0
     d82:	98 01       	movw	r18, r16
     d84:	42 e3       	ldi	r20, 0x32	; 50
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	6d e3       	ldi	r22, 0x3D	; 61
     d8a:	78 e0       	ldi	r23, 0x08	; 8
     d8c:	c7 01       	movw	r24, r14
     d8e:	0e 94 24 11 	call	0x2248	; 0x2248 <xStreamBufferReceive>
		sizeof(rxData),0);
		if(xBytesToSend > sizeof(uint8_t)*2)
     d92:	03 97       	sbiw	r24, 0x03	; 3
     d94:	08 f4       	brcc	.+2      	; 0xd98 <lora_UpLinkHandler_task+0x1d2>
     d96:	40 c0       	rjmp	.+128    	; 0xe18 <lora_UpLinkHandler_task+0x252>
			//_uplink_payload = (_uplink_payload) &rxData;
			
			/**< Status led ST4 (BLUE)*/
			//Makes the led light up in a short period.
			
			led_short_puls(led_ST4);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <led_short_puls>
			//_uplink_payload.port_no = 1;
			//_uplink_payload.len = 4;
			
			printf("The temperature in upLink is: %d\n", _uplink_payload.bytes[0]);
     d9e:	cd e3       	ldi	r28, 0x3D	; 61
     da0:	d8 e0       	ldi	r29, 0x08	; 8
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	1f 92       	push	r1
     da6:	8f 93       	push	r24
     da8:	83 e7       	ldi	r24, 0x73	; 115
     daa:	94 e0       	ldi	r25, 0x04	; 4
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
			printf("The temperature2 in upLink is: %d\n", _uplink_payload.bytes[1]);
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	1f 92       	push	r1
     db8:	8f 93       	push	r24
     dba:	85 e9       	ldi	r24, 0x95	; 149
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
			printf("The humidity in upLink is: %u\n", _uplink_payload.bytes[2]);
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	1f 92       	push	r1
     dca:	8f 93       	push	r24
     dcc:	88 eb       	ldi	r24, 0xB8	; 184
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
			printf("The humidity2 in upLink is: %u\n", _uplink_payload.bytes[3]);
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	1f 92       	push	r1
     ddc:	8f 93       	push	r24
     dde:	87 ed       	ldi	r24, 0xD7	; 215
     de0:	94 e0       	ldi	r25, 0x04	; 4
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
			
			
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     dea:	be 01       	movw	r22, r28
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 1a 20 	call	0x4034	; 0x4034 <lora_driver_sent_upload_message>
     df2:	0e 94 07 22 	call	0x440e	; 0x440e <lora_driver_map_return_code_to_text>
     df6:	9f 93       	push	r25
     df8:	8f 93       	push	r24
     dfa:	87 ef       	ldi	r24, 0xF7	; 247
     dfc:	94 e0       	ldi	r25, 0x04	; 4
     dfe:	9f 93       	push	r25
     e00:	8f 93       	push	r24
     e02:	0e 94 0c 2c 	call	0x5818	; 0x5818 <printf>
     e06:	8d b7       	in	r24, 0x3d	; 61
     e08:	9e b7       	in	r25, 0x3e	; 62
     e0a:	44 96       	adiw	r24, 0x14	; 20
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	9e bf       	out	0x3e, r25	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	8d bf       	out	0x3d, r24	; 61
     e16:	15 c0       	rjmp	.+42     	; 0xe42 <lora_UpLinkHandler_task+0x27c>
		}
		else
		{
			vTaskDelay(2000);
     e18:	60 ed       	ldi	r22, 0xD0	; 208
     e1a:	77 e0       	ldi	r23, 0x07	; 7
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>
		}
	}
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <lora_UpLinkHandler_task+0x27c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <led_led_on>
			vTaskDelay(150);

			lora_driver_flush_buffers(); // get rid of first version string from module after reset!

			_lora_setup();
			isSet=true;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <isSet>
     e32:	a5 cf       	rjmp	.-182    	; 0xd7e <lora_UpLinkHandler_task+0x1b8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <led_fast_blink>
     e40:	9c cf       	rjmp	.-200    	; 0xd7a <lora_UpLinkHandler_task+0x1b4>
		}
		else
		{
			vTaskDelay(2000);
		}
	}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	08 95       	ret

00000e52 <lora_UpLinkHandler_startTask>:
	
	void lora_UpLinkHandler_startTask(MessageBufferHandle_t xMessageBuffer){
     e52:	ec 01       	movw	r28, r24
		for(;;)
		{
			lora_UpLinkHandler_task(xMessageBuffer);
     e54:	ce 01       	movw	r24, r28
     e56:	b7 de       	rcall	.-658    	; 0xbc6 <lora_UpLinkHandler_task>
			vTaskDelay(3000);
     e58:	68 eb       	ldi	r22, 0xB8	; 184
     e5a:	7b e0       	ldi	r23, 0x0B	; 11
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <vTaskDelay>
     e64:	f7 cf       	rjmp	.-18     	; 0xe54 <lora_UpLinkHandler_startTask+0x2>

00000e66 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     e66:	e7 e0       	ldi	r30, 0x07	; 7
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 60       	ori	r24, 0x0F	; 15
     e6e:	80 83       	st	Z, r24
     e70:	08 95       	ret

00000e72 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     e72:	e8 e0       	ldi	r30, 0x08	; 8
     e74:	f1 e0       	ldi	r31, 0x01	; 1
     e76:	90 81       	ld	r25, Z
     e78:	90 7f       	andi	r25, 0xF0	; 240
     e7a:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     e7c:	90 81       	ld	r25, Z
     e7e:	8f 70       	andi	r24, 0x0F	; 15
     e80:	98 2b       	or	r25, r24
     e82:	90 83       	st	Z, r25
     e84:	08 95       	ret

00000e86 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     e86:	e8 e0       	ldi	r30, 0x08	; 8
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	80 81       	ld	r24, Z
     e8c:	80 7f       	andi	r24, 0xF0	; 240
     e8e:	80 83       	st	Z, r24
     e90:	08 95       	ret

00000e92 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	80 e1       	ldi	r24, 0x10	; 16
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	b4 d1       	rcall	.+872    	; 0x1204 <pvPortMalloc>
     e9c:	ec 01       	movw	r28, r24
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <xEventGroupCreate+0x1e>
     ea2:	fc 01       	movw	r30, r24
     ea4:	11 92       	st	Z+, r1
     ea6:	11 92       	st	Z+, r1
     ea8:	11 92       	st	Z+, r1
     eaa:	11 92       	st	Z+, r1
     eac:	cf 01       	movw	r24, r30
     eae:	94 d2       	rcall	.+1320   	; 0x13d8 <vListInitialise>
     eb0:	ce 01       	movw	r24, r28
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <xEventGroupWaitBits>:
     eb8:	2f 92       	push	r2
     eba:	3f 92       	push	r3
     ebc:	4f 92       	push	r4
     ebe:	5f 92       	push	r5
     ec0:	6f 92       	push	r6
     ec2:	7f 92       	push	r7
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	4a 01       	movw	r8, r20
     ee0:	5b 01       	movw	r10, r22
     ee2:	62 2e       	mov	r6, r18
     ee4:	70 2e       	mov	r7, r16
     ee6:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskSuspendAll>
     eea:	28 80       	ld	r2, Y
     eec:	39 80       	ldd	r3, Y+1	; 0x01
     eee:	4a 80       	ldd	r4, Y+2	; 0x02
     ef0:	5b 80       	ldd	r5, Y+3	; 0x03
     ef2:	01 11       	cpse	r16, r1
     ef4:	0d c0       	rjmp	.+26     	; 0xf10 <xEventGroupWaitBits+0x58>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	b2 01       	movw	r22, r4
     efa:	a1 01       	movw	r20, r2
     efc:	48 21       	and	r20, r8
     efe:	59 21       	and	r21, r9
     f00:	6a 21       	and	r22, r10
     f02:	7b 21       	and	r23, r11
     f04:	45 2b       	or	r20, r21
     f06:	46 2b       	or	r20, r22
     f08:	47 2b       	or	r20, r23
     f0a:	79 f4       	brne	.+30     	; 0xf2a <xEventGroupWaitBits+0x72>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <xEventGroupWaitBits+0x72>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	b2 01       	movw	r22, r4
     f14:	a1 01       	movw	r20, r2
     f16:	48 21       	and	r20, r8
     f18:	59 21       	and	r21, r9
     f1a:	6a 21       	and	r22, r10
     f1c:	7b 21       	and	r23, r11
     f1e:	48 15       	cp	r20, r8
     f20:	59 05       	cpc	r21, r9
     f22:	6a 05       	cpc	r22, r10
     f24:	7b 05       	cpc	r23, r11
     f26:	09 f0       	breq	.+2      	; 0xf2a <xEventGroupWaitBits+0x72>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	88 23       	and	r24, r24
     f2c:	81 f0       	breq	.+32     	; 0xf4e <xEventGroupWaitBits+0x96>
     f2e:	66 20       	and	r6, r6
     f30:	09 f4       	brne	.+2      	; 0xf34 <xEventGroupWaitBits+0x7c>
     f32:	6b c0       	rjmp	.+214    	; 0x100a <xEventGroupWaitBits+0x152>
     f34:	80 94       	com	r8
     f36:	90 94       	com	r9
     f38:	a0 94       	com	r10
     f3a:	b0 94       	com	r11
     f3c:	82 20       	and	r8, r2
     f3e:	93 20       	and	r9, r3
     f40:	a4 20       	and	r10, r4
     f42:	b5 20       	and	r11, r5
     f44:	88 82       	st	Y, r8
     f46:	99 82       	std	Y+1, r9	; 0x01
     f48:	aa 82       	std	Y+2, r10	; 0x02
     f4a:	bb 82       	std	Y+3, r11	; 0x03
     f4c:	5e c0       	rjmp	.+188    	; 0x100a <xEventGroupWaitBits+0x152>
     f4e:	c1 14       	cp	r12, r1
     f50:	d1 04       	cpc	r13, r1
     f52:	e1 04       	cpc	r14, r1
     f54:	f1 04       	cpc	r15, r1
     f56:	09 f4       	brne	.+2      	; 0xf5a <xEventGroupWaitBits+0xa2>
     f58:	58 c0       	rjmp	.+176    	; 0x100a <xEventGroupWaitBits+0x152>
     f5a:	66 20       	and	r6, r6
     f5c:	29 f0       	breq	.+10     	; 0xf68 <xEventGroupWaitBits+0xb0>
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <xEventGroupWaitBits+0xb6>
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	ba 01       	movw	r22, r20
     f6e:	71 10       	cpse	r7, r1
     f70:	74 60       	ori	r23, 0x04	; 4
     f72:	48 29       	or	r20, r8
     f74:	59 29       	or	r21, r9
     f76:	6a 29       	or	r22, r10
     f78:	7b 29       	or	r23, r11
     f7a:	97 01       	movw	r18, r14
     f7c:	86 01       	movw	r16, r12
     f7e:	ce 01       	movw	r24, r28
     f80:	04 96       	adiw	r24, 0x04	; 4
     f82:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <vTaskPlaceOnUnorderedEventList>
     f86:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
     f8a:	81 11       	cpse	r24, r1
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <xEventGroupWaitBits+0xd8>
     f8e:	6c d3       	rcall	.+1752   	; 0x1668 <vPortYield>
     f90:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <uxTaskResetEventItemValue>
     f94:	91 fd       	sbrc	r25, 1
     f96:	35 c0       	rjmp	.+106    	; 0x1002 <xEventGroupWaitBits+0x14a>
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	0f 92       	push	r0
     f9e:	68 81       	ld	r22, Y
     fa0:	79 81       	ldd	r23, Y+1	; 0x01
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	71 10       	cpse	r7, r1
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <xEventGroupWaitBits+0x10c>
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	75 01       	movw	r14, r10
     fae:	64 01       	movw	r12, r8
     fb0:	c6 22       	and	r12, r22
     fb2:	d7 22       	and	r13, r23
     fb4:	e8 22       	and	r14, r24
     fb6:	f9 22       	and	r15, r25
     fb8:	cd 28       	or	r12, r13
     fba:	ce 28       	or	r12, r14
     fbc:	cf 28       	or	r12, r15
     fbe:	79 f4       	brne	.+30     	; 0xfde <xEventGroupWaitBits+0x126>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	0d c0       	rjmp	.+26     	; 0xfde <xEventGroupWaitBits+0x126>
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	75 01       	movw	r14, r10
     fc8:	64 01       	movw	r12, r8
     fca:	c6 22       	and	r12, r22
     fcc:	d7 22       	and	r13, r23
     fce:	e8 22       	and	r14, r24
     fd0:	f9 22       	and	r15, r25
     fd2:	c8 14       	cp	r12, r8
     fd4:	d9 04       	cpc	r13, r9
     fd6:	ea 04       	cpc	r14, r10
     fd8:	fb 04       	cpc	r15, r11
     fda:	09 f0       	breq	.+2      	; 0xfde <xEventGroupWaitBits+0x126>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	22 23       	and	r18, r18
     fe0:	71 f0       	breq	.+28     	; 0xffe <xEventGroupWaitBits+0x146>
     fe2:	66 20       	and	r6, r6
     fe4:	61 f0       	breq	.+24     	; 0xffe <xEventGroupWaitBits+0x146>
     fe6:	80 94       	com	r8
     fe8:	90 94       	com	r9
     fea:	a0 94       	com	r10
     fec:	b0 94       	com	r11
     fee:	86 22       	and	r8, r22
     ff0:	97 22       	and	r9, r23
     ff2:	a8 22       	and	r10, r24
     ff4:	b9 22       	and	r11, r25
     ff6:	88 82       	st	Y, r8
     ff8:	99 82       	std	Y+1, r9	; 0x01
     ffa:	aa 82       	std	Y+2, r10	; 0x02
     ffc:	bb 82       	std	Y+3, r11	; 0x03
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	1b 01       	movw	r2, r22
    1004:	2c 01       	movw	r4, r24
    1006:	55 24       	eor	r5, r5
    1008:	02 c0       	rjmp	.+4      	; 0x100e <xEventGroupWaitBits+0x156>
    100a:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
    100e:	c2 01       	movw	r24, r4
    1010:	b1 01       	movw	r22, r2
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	7f 90       	pop	r7
    102c:	6f 90       	pop	r6
    102e:	5f 90       	pop	r5
    1030:	4f 90       	pop	r4
    1032:	3f 90       	pop	r3
    1034:	2f 90       	pop	r2
    1036:	08 95       	ret

00001038 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	6a 01       	movw	r12, r20
    105c:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    105e:	8c 01       	movw	r16, r24
    1060:	09 5f       	subi	r16, 0xF9	; 249
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1064:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1068:	eb 85       	ldd	r30, Y+11	; 0x0b
    106a:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    106c:	88 81       	ld	r24, Y
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	aa 81       	ldd	r26, Y+2	; 0x02
    1072:	bb 81       	ldd	r27, Y+3	; 0x03
    1074:	c8 2a       	or	r12, r24
    1076:	d9 2a       	or	r13, r25
    1078:	ea 2a       	or	r14, r26
    107a:	fb 2a       	or	r15, r27
    107c:	c8 82       	st	Y, r12
    107e:	d9 82       	std	Y+1, r13	; 0x01
    1080:	ea 82       	std	Y+2, r14	; 0x02
    1082:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1084:	0e 17       	cp	r16, r30
    1086:	1f 07       	cpc	r17, r31
    1088:	09 f4       	brne	.+2      	; 0x108c <xEventGroupSetBits+0x54>
    108a:	45 c0       	rjmp	.+138    	; 0x1116 <xEventGroupSetBits+0xde>
    108c:	c1 2c       	mov	r12, r1
    108e:	d1 2c       	mov	r13, r1
    1090:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1092:	99 24       	eor	r9, r9
    1094:	93 94       	inc	r9
    1096:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
    1098:	a4 80       	ldd	r10, Z+4	; 0x04
    109a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	a2 81       	ldd	r26, Z+2	; 0x02
    10a2:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10a4:	ac 01       	movw	r20, r24
    10a6:	bd 01       	movw	r22, r26
    10a8:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10aa:	b2 fd       	sbrc	r27, 2
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10ae:	48 80       	ld	r4, Y
    10b0:	59 80       	ldd	r5, Y+1	; 0x01
    10b2:	6a 80       	ldd	r6, Y+2	; 0x02
    10b4:	7b 80       	ldd	r7, Y+3	; 0x03
    10b6:	44 22       	and	r4, r20
    10b8:	55 22       	and	r5, r21
    10ba:	66 22       	and	r6, r22
    10bc:	77 22       	and	r7, r23
    10be:	29 2d       	mov	r18, r9
    10c0:	45 28       	or	r4, r5
    10c2:	46 28       	or	r4, r6
    10c4:	47 28       	or	r4, r7
    10c6:	89 f4       	brne	.+34     	; 0x10ea <xEventGroupSetBits+0xb2>
    10c8:	28 2d       	mov	r18, r8
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <xEventGroupSetBits+0xb2>
    10cc:	48 80       	ld	r4, Y
    10ce:	59 80       	ldd	r5, Y+1	; 0x01
    10d0:	6a 80       	ldd	r6, Y+2	; 0x02
    10d2:	7b 80       	ldd	r7, Y+3	; 0x03
    10d4:	44 22       	and	r4, r20
    10d6:	55 22       	and	r5, r21
    10d8:	66 22       	and	r6, r22
    10da:	77 22       	and	r7, r23
    10dc:	29 2d       	mov	r18, r9
    10de:	44 16       	cp	r4, r20
    10e0:	55 06       	cpc	r5, r21
    10e2:	66 06       	cpc	r6, r22
    10e4:	77 06       	cpc	r7, r23
    10e6:	09 f0       	breq	.+2      	; 0x10ea <xEventGroupSetBits+0xb2>
    10e8:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    10ea:	22 23       	and	r18, r18
    10ec:	71 f0       	breq	.+28     	; 0x110a <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    10ee:	b0 ff       	sbrs	r27, 0
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    10f2:	c4 2a       	or	r12, r20
    10f4:	d5 2a       	or	r13, r21
    10f6:	e6 2a       	or	r14, r22
    10f8:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    10fa:	48 81       	ld	r20, Y
    10fc:	59 81       	ldd	r21, Y+1	; 0x01
    10fe:	6a 81       	ldd	r22, Y+2	; 0x02
    1100:	7b 81       	ldd	r23, Y+3	; 0x03
    1102:	72 60       	ori	r23, 0x02	; 2
    1104:	cf 01       	movw	r24, r30
    1106:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <vTaskRemoveFromUnorderedEventList>
    110a:	ea 2d       	mov	r30, r10
    110c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    110e:	0e 17       	cp	r16, r30
    1110:	1f 07       	cpc	r17, r31
    1112:	11 f6       	brne	.-124    	; 0x1098 <xEventGroupSetBits+0x60>
    1114:	03 c0       	rjmp	.+6      	; 0x111c <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1116:	c1 2c       	mov	r12, r1
    1118:	d1 2c       	mov	r13, r1
    111a:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    111c:	c0 94       	com	r12
    111e:	d0 94       	com	r13
    1120:	e0 94       	com	r14
    1122:	f0 94       	com	r15
    1124:	88 81       	ld	r24, Y
    1126:	99 81       	ldd	r25, Y+1	; 0x01
    1128:	aa 81       	ldd	r26, Y+2	; 0x02
    112a:	bb 81       	ldd	r27, Y+3	; 0x03
    112c:	c8 22       	and	r12, r24
    112e:	d9 22       	and	r13, r25
    1130:	ea 22       	and	r14, r26
    1132:	fb 22       	and	r15, r27
    1134:	c8 82       	st	Y, r12
    1136:	d9 82       	std	Y+1, r13	; 0x01
    1138:	ea 82       	std	Y+2, r14	; 0x02
    113a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    113c:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1140:	68 81       	ld	r22, Y
    1142:	79 81       	ldd	r23, Y+1	; 0x01
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	7f 90       	pop	r7
    1162:	6f 90       	pop	r6
    1164:	5f 90       	pop	r5
    1166:	4f 90       	pop	r4
    1168:	08 95       	ret

0000116a <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1170:	ef eb       	ldi	r30, 0xBF	; 191
    1172:	f8 e0       	ldi	r31, 0x08	; 8
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <prvInsertBlockIntoFreeList+0xe>
    1176:	f9 01       	movw	r30, r18
    1178:	20 81       	ld	r18, Z
    117a:	31 81       	ldd	r19, Z+1	; 0x01
    117c:	2a 17       	cp	r18, r26
    117e:	3b 07       	cpc	r19, r27
    1180:	d0 f3       	brcs	.-12     	; 0x1176 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	af 01       	movw	r20, r30
    1188:	48 0f       	add	r20, r24
    118a:	59 1f       	adc	r21, r25
    118c:	a4 17       	cp	r26, r20
    118e:	b5 07       	cpc	r27, r21
    1190:	49 f4       	brne	.+18     	; 0x11a4 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1192:	12 96       	adiw	r26, 0x02	; 2
    1194:	4d 91       	ld	r20, X+
    1196:	5c 91       	ld	r21, X
    1198:	13 97       	sbiw	r26, 0x03	; 3
    119a:	84 0f       	add	r24, r20
    119c:	95 1f       	adc	r25, r21
    119e:	93 83       	std	Z+3, r25	; 0x03
    11a0:	82 83       	std	Z+2, r24	; 0x02
    11a2:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11a4:	12 96       	adiw	r26, 0x02	; 2
    11a6:	8d 91       	ld	r24, X+
    11a8:	9c 91       	ld	r25, X
    11aa:	13 97       	sbiw	r26, 0x03	; 3
    11ac:	ed 01       	movw	r28, r26
    11ae:	c8 0f       	add	r28, r24
    11b0:	d9 1f       	adc	r29, r25
    11b2:	2c 17       	cp	r18, r28
    11b4:	3d 07       	cpc	r19, r29
    11b6:	d9 f4       	brne	.+54     	; 0x11ee <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11b8:	20 91 bd 08 	lds	r18, 0x08BD	; 0x8008bd <pxEnd>
    11bc:	30 91 be 08 	lds	r19, 0x08BE	; 0x8008be <pxEnd+0x1>
    11c0:	c2 17       	cp	r28, r18
    11c2:	d3 07       	cpc	r29, r19
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11c6:	2a 81       	ldd	r18, Y+2	; 0x02
    11c8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	13 96       	adiw	r26, 0x03	; 3
    11d0:	9c 93       	st	X, r25
    11d2:	8e 93       	st	-X, r24
    11d4:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11d6:	c0 81       	ld	r28, Z
    11d8:	d1 81       	ldd	r29, Z+1	; 0x01
    11da:	88 81       	ld	r24, Y
    11dc:	99 81       	ldd	r25, Y+1	; 0x01
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	9c 93       	st	X, r25
    11e2:	8e 93       	st	-X, r24
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	dc 93       	st	X, r29
    11ea:	ce 93       	st	-X, r28
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	3c 93       	st	X, r19
    11f2:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    11f4:	ae 17       	cp	r26, r30
    11f6:	bf 07       	cpc	r27, r31
    11f8:	11 f0       	breq	.+4      	; 0x11fe <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11fa:	b1 83       	std	Z+1, r27	; 0x01
    11fc:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1216:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    121a:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <pxEnd>
    121e:	90 91 be 08 	lds	r25, 0x08BE	; 0x8008be <pxEnd+0x1>
    1222:	89 2b       	or	r24, r25
    1224:	41 f5       	brne	.+80     	; 0x1276 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1226:	ef eb       	ldi	r30, 0xBF	; 191
    1228:	f8 e0       	ldi	r31, 0x08	; 8
    122a:	a3 ec       	ldi	r26, 0xC3	; 195
    122c:	b8 e0       	ldi	r27, 0x08	; 8
    122e:	b1 83       	std	Z+1, r27	; 0x01
    1230:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1232:	13 82       	std	Z+3, r1	; 0x03
    1234:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1236:	ef e5       	ldi	r30, 0x5F	; 95
    1238:	f8 e1       	ldi	r31, 0x18	; 24
    123a:	f0 93 be 08 	sts	0x08BE, r31	; 0x8008be <pxEnd+0x1>
    123e:	e0 93 bd 08 	sts	0x08BD, r30	; 0x8008bd <pxEnd>
	pxEnd->xBlockSize = 0;
    1242:	13 82       	std	Z+3, r1	; 0x03
    1244:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1246:	11 82       	std	Z+1, r1	; 0x01
    1248:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    124a:	8c e9       	ldi	r24, 0x9C	; 156
    124c:	9f e0       	ldi	r25, 0x0F	; 15
    124e:	13 96       	adiw	r26, 0x03	; 3
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
    1254:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1256:	ed 93       	st	X+, r30
    1258:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    125a:	90 93 ba 08 	sts	0x08BA, r25	; 0x8008ba <xMinimumEverFreeBytesRemaining+0x1>
    125e:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1262:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <xFreeBytesRemaining+0x1>
    1266:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e8       	ldi	r25, 0x80	; 128
    126e:	90 93 b8 08 	sts	0x08B8, r25	; 0x8008b8 <xBlockAllocatedBit+0x1>
    1272:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1276:	e0 90 b7 08 	lds	r14, 0x08B7	; 0x8008b7 <xBlockAllocatedBit>
    127a:	f0 90 b8 08 	lds	r15, 0x08B8	; 0x8008b8 <xBlockAllocatedBit+0x1>
    127e:	c7 01       	movw	r24, r14
    1280:	8c 23       	and	r24, r28
    1282:	9d 23       	and	r25, r29
    1284:	89 2b       	or	r24, r25
    1286:	09 f0       	breq	.+2      	; 0x128a <pvPortMalloc+0x86>
    1288:	66 c0       	rjmp	.+204    	; 0x1356 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    128a:	20 97       	sbiw	r28, 0x00	; 0
    128c:	09 f4       	brne	.+2      	; 0x1290 <pvPortMalloc+0x8c>
    128e:	66 c0       	rjmp	.+204    	; 0x135c <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
    1290:	ae 01       	movw	r20, r28
    1292:	4c 5f       	subi	r20, 0xFC	; 252
    1294:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1296:	09 f4       	brne	.+2      	; 0x129a <pvPortMalloc+0x96>
    1298:	5e c0       	rjmp	.+188    	; 0x1356 <pvPortMalloc+0x152>
    129a:	00 91 bb 08 	lds	r16, 0x08BB	; 0x8008bb <xFreeBytesRemaining>
    129e:	10 91 bc 08 	lds	r17, 0x08BC	; 0x8008bc <xFreeBytesRemaining+0x1>
    12a2:	04 17       	cp	r16, r20
    12a4:	15 07       	cpc	r17, r21
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <pvPortMalloc+0xa6>
    12a8:	56 c0       	rjmp	.+172    	; 0x1356 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    12aa:	c0 91 bf 08 	lds	r28, 0x08BF	; 0x8008bf <xStart>
    12ae:	d0 91 c0 08 	lds	r29, 0x08C0	; 0x8008c0 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    12b2:	ef eb       	ldi	r30, 0xBF	; 191
    12b4:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <pvPortMalloc+0xb8>
    12b8:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    12ba:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12bc:	2a 81       	ldd	r18, Y+2	; 0x02
    12be:	3b 81       	ldd	r19, Y+3	; 0x03
    12c0:	24 17       	cp	r18, r20
    12c2:	35 07       	cpc	r19, r21
    12c4:	28 f4       	brcc	.+10     	; 0x12d0 <pvPortMalloc+0xcc>
    12c6:	28 81       	ld	r18, Y
    12c8:	39 81       	ldd	r19, Y+1	; 0x01
    12ca:	21 15       	cp	r18, r1
    12cc:	31 05       	cpc	r19, r1
    12ce:	a1 f7       	brne	.-24     	; 0x12b8 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    12d0:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <pxEnd>
    12d4:	90 91 be 08 	lds	r25, 0x08BE	; 0x8008be <pxEnd+0x1>
    12d8:	c8 17       	cp	r28, r24
    12da:	d9 07       	cpc	r29, r25
    12dc:	e1 f1       	breq	.+120    	; 0x1356 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    12de:	c0 80       	ld	r12, Z
    12e0:	d1 80       	ldd	r13, Z+1	; 0x01
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	c8 0e       	add	r12, r24
    12e6:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    12e8:	88 81       	ld	r24, Y
    12ea:	99 81       	ldd	r25, Y+1	; 0x01
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    12f0:	2a 81       	ldd	r18, Y+2	; 0x02
    12f2:	3b 81       	ldd	r19, Y+3	; 0x03
    12f4:	24 1b       	sub	r18, r20
    12f6:	35 0b       	sbc	r19, r21
    12f8:	29 30       	cpi	r18, 0x09	; 9
    12fa:	31 05       	cpc	r19, r1
    12fc:	48 f0       	brcs	.+18     	; 0x1310 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    12fe:	ce 01       	movw	r24, r28
    1300:	84 0f       	add	r24, r20
    1302:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1304:	fc 01       	movw	r30, r24
    1306:	33 83       	std	Z+3, r19	; 0x03
    1308:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    130a:	5b 83       	std	Y+3, r21	; 0x03
    130c:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    130e:	2d df       	rcall	.-422    	; 0x116a <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	08 1b       	sub	r16, r24
    1316:	19 0b       	sbc	r17, r25
    1318:	10 93 bc 08 	sts	0x08BC, r17	; 0x8008bc <xFreeBytesRemaining+0x1>
    131c:	00 93 bb 08 	sts	0x08BB, r16	; 0x8008bb <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1320:	20 91 b9 08 	lds	r18, 0x08B9	; 0x8008b9 <xMinimumEverFreeBytesRemaining>
    1324:	30 91 ba 08 	lds	r19, 0x08BA	; 0x8008ba <xMinimumEverFreeBytesRemaining+0x1>
    1328:	02 17       	cp	r16, r18
    132a:	13 07       	cpc	r17, r19
    132c:	20 f4       	brcc	.+8      	; 0x1336 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    132e:	10 93 ba 08 	sts	0x08BA, r17	; 0x8008ba <xMinimumEverFreeBytesRemaining+0x1>
    1332:	00 93 b9 08 	sts	0x08B9, r16	; 0x8008b9 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    1336:	e8 2a       	or	r14, r24
    1338:	f9 2a       	or	r15, r25
    133a:	fb 82       	std	Y+3, r15	; 0x03
    133c:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1342:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1346:	c1 14       	cp	r12, r1
    1348:	d1 04       	cpc	r13, r1
    134a:	59 f4       	brne	.+22     	; 0x1362 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    134c:	0e 94 af 1a 	call	0x355e	; 0x355e <vApplicationMallocFailedHook>
    1350:	c1 2c       	mov	r12, r1
    1352:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1356:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
    135a:	f8 cf       	rjmp	.-16     	; 0x134c <pvPortMalloc+0x148>
    135c:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
    1360:	f5 cf       	rjmp	.-22     	; 0x134c <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1362:	c6 01       	movw	r24, r12
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	df 90       	pop	r13
    1372:	cf 90       	pop	r12
    1374:	08 95       	ret

00001376 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	51 f1       	breq	.+84     	; 0x13d2 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    137e:	fc 01       	movw	r30, r24
    1380:	34 97       	sbiw	r30, 0x04	; 4
    1382:	22 81       	ldd	r18, Z+2	; 0x02
    1384:	33 81       	ldd	r19, Z+3	; 0x03
    1386:	40 91 b7 08 	lds	r20, 0x08B7	; 0x8008b7 <xBlockAllocatedBit>
    138a:	50 91 b8 08 	lds	r21, 0x08B8	; 0x8008b8 <xBlockAllocatedBit+0x1>
    138e:	b9 01       	movw	r22, r18
    1390:	64 23       	and	r22, r20
    1392:	75 23       	and	r23, r21
    1394:	67 2b       	or	r22, r23
    1396:	e9 f0       	breq	.+58     	; 0x13d2 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	67 2b       	or	r22, r23
    139e:	c9 f4       	brne	.+50     	; 0x13d2 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13a0:	ef 01       	movw	r28, r30
    13a2:	40 95       	com	r20
    13a4:	50 95       	com	r21
    13a6:	24 23       	and	r18, r20
    13a8:	35 23       	and	r19, r21
    13aa:	33 83       	std	Z+3, r19	; 0x03
    13ac:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    13ae:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    13b2:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <xFreeBytesRemaining>
    13b6:	30 91 bc 08 	lds	r19, 0x08BC	; 0x8008bc <xFreeBytesRemaining+0x1>
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <xFreeBytesRemaining+0x1>
    13c6:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    13ca:	ce 01       	movw	r24, r28
    13cc:	ce de       	rcall	.-612    	; 0x116a <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    13ce:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13d8:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13da:	03 96       	adiw	r24, 0x03	; 3
    13dc:	92 83       	std	Z+2, r25	; 0x02
    13de:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    13e0:	4f ef       	ldi	r20, 0xFF	; 255
    13e2:	5f ef       	ldi	r21, 0xFF	; 255
    13e4:	ba 01       	movw	r22, r20
    13e6:	43 83       	std	Z+3, r20	; 0x03
    13e8:	54 83       	std	Z+4, r21	; 0x04
    13ea:	65 83       	std	Z+5, r22	; 0x05
    13ec:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13ee:	90 87       	std	Z+8, r25	; 0x08
    13f0:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13f2:	92 87       	std	Z+10, r25	; 0x0a
    13f4:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    13f6:	10 82       	st	Z, r1
    13f8:	08 95       	ret

000013fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    13fa:	fc 01       	movw	r30, r24
    13fc:	13 86       	std	Z+11, r1	; 0x0b
    13fe:	12 86       	std	Z+10, r1	; 0x0a
    1400:	08 95       	ret

00001402 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	9c 01       	movw	r18, r24
    1408:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    140a:	dc 01       	movw	r26, r24
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	cd 91       	ld	r28, X+
    1410:	dc 91       	ld	r29, X
    1412:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1414:	d5 83       	std	Z+5, r29	; 0x05
    1416:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1418:	8e 81       	ldd	r24, Y+6	; 0x06
    141a:	9f 81       	ldd	r25, Y+7	; 0x07
    141c:	97 83       	std	Z+7, r25	; 0x07
    141e:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	9f 81       	ldd	r25, Y+7	; 0x07
    1424:	dc 01       	movw	r26, r24
    1426:	15 96       	adiw	r26, 0x05	; 5
    1428:	7c 93       	st	X, r23
    142a:	6e 93       	st	-X, r22
    142c:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    142e:	7f 83       	std	Y+7, r23	; 0x07
    1430:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1432:	33 87       	std	Z+11, r19	; 0x0b
    1434:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1436:	f9 01       	movw	r30, r18
    1438:	80 81       	ld	r24, Z
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	80 83       	st	Z, r24
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    144e:	08 81       	ld	r16, Y
    1450:	19 81       	ldd	r17, Y+1	; 0x01
    1452:	2a 81       	ldd	r18, Y+2	; 0x02
    1454:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1456:	0f 3f       	cpi	r16, 0xFF	; 255
    1458:	4f ef       	ldi	r20, 0xFF	; 255
    145a:	14 07       	cpc	r17, r20
    145c:	24 07       	cpc	r18, r20
    145e:	34 07       	cpc	r19, r20
    1460:	21 f4       	brne	.+8      	; 0x146a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1462:	fc 01       	movw	r30, r24
    1464:	a1 85       	ldd	r26, Z+9	; 0x09
    1466:	b2 85       	ldd	r27, Z+10	; 0x0a
    1468:	11 c0       	rjmp	.+34     	; 0x148c <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    146a:	dc 01       	movw	r26, r24
    146c:	13 96       	adiw	r26, 0x03	; 3
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <vListInsert+0x2e>
    1470:	df 01       	movw	r26, r30
    1472:	14 96       	adiw	r26, 0x04	; 4
    1474:	ed 91       	ld	r30, X+
    1476:	fc 91       	ld	r31, X
    1478:	15 97       	sbiw	r26, 0x05	; 5
    147a:	40 81       	ld	r20, Z
    147c:	51 81       	ldd	r21, Z+1	; 0x01
    147e:	62 81       	ldd	r22, Z+2	; 0x02
    1480:	73 81       	ldd	r23, Z+3	; 0x03
    1482:	04 17       	cp	r16, r20
    1484:	15 07       	cpc	r17, r21
    1486:	26 07       	cpc	r18, r22
    1488:	37 07       	cpc	r19, r23
    148a:	90 f7       	brcc	.-28     	; 0x1470 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    148c:	14 96       	adiw	r26, 0x04	; 4
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	15 97       	sbiw	r26, 0x05	; 5
    1494:	fd 83       	std	Y+5, r31	; 0x05
    1496:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1498:	d7 83       	std	Z+7, r29	; 0x07
    149a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    149c:	bf 83       	std	Y+7, r27	; 0x07
    149e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14a0:	15 96       	adiw	r26, 0x05	; 5
    14a2:	dc 93       	st	X, r29
    14a4:	ce 93       	st	-X, r28
    14a6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    14a8:	9b 87       	std	Y+11, r25	; 0x0b
    14aa:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 81       	ld	r18, Z
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	20 83       	st	Z, r18
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    14c4:	a2 85       	ldd	r26, Z+10	; 0x0a
    14c6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14c8:	c4 81       	ldd	r28, Z+4	; 0x04
    14ca:	d5 81       	ldd	r29, Z+5	; 0x05
    14cc:	86 81       	ldd	r24, Z+6	; 0x06
    14ce:	97 81       	ldd	r25, Z+7	; 0x07
    14d0:	9f 83       	std	Y+7, r25	; 0x07
    14d2:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14d4:	c6 81       	ldd	r28, Z+6	; 0x06
    14d6:	d7 81       	ldd	r29, Z+7	; 0x07
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	95 81       	ldd	r25, Z+5	; 0x05
    14dc:	9d 83       	std	Y+5, r25	; 0x05
    14de:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	12 97       	sbiw	r26, 0x02	; 2
    14e8:	e8 17       	cp	r30, r24
    14ea:	f9 07       	cpc	r31, r25
    14ec:	31 f4       	brne	.+12     	; 0x14fa <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    14ee:	86 81       	ldd	r24, Z+6	; 0x06
    14f0:	97 81       	ldd	r25, Z+7	; 0x07
    14f2:	12 96       	adiw	r26, 0x02	; 2
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
    14f8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    14fa:	13 86       	std	Z+11, r1	; 0x0b
    14fc:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    14fe:	8c 91       	ld	r24, X
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1504:	8c 91       	ld	r24, X
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    150c:	31 e1       	ldi	r19, 0x11	; 17
    150e:	fc 01       	movw	r30, r24
    1510:	30 83       	st	Z, r19
    1512:	31 97       	sbiw	r30, 0x01	; 1
    1514:	22 e2       	ldi	r18, 0x22	; 34
    1516:	20 83       	st	Z, r18
    1518:	31 97       	sbiw	r30, 0x01	; 1
    151a:	a3 e3       	ldi	r26, 0x33	; 51
    151c:	a0 83       	st	Z, r26
    151e:	31 97       	sbiw	r30, 0x01	; 1
    1520:	60 83       	st	Z, r22
    1522:	31 97       	sbiw	r30, 0x01	; 1
    1524:	70 83       	st	Z, r23
    1526:	31 97       	sbiw	r30, 0x01	; 1
    1528:	10 82       	st	Z, r1
    152a:	31 97       	sbiw	r30, 0x01	; 1
    152c:	10 82       	st	Z, r1
    152e:	31 97       	sbiw	r30, 0x01	; 1
    1530:	60 e8       	ldi	r22, 0x80	; 128
    1532:	60 83       	st	Z, r22
    1534:	31 97       	sbiw	r30, 0x01	; 1
    1536:	10 82       	st	Z, r1
    1538:	31 97       	sbiw	r30, 0x01	; 1
    153a:	10 82       	st	Z, r1
    153c:	31 97       	sbiw	r30, 0x01	; 1
    153e:	10 82       	st	Z, r1
    1540:	31 97       	sbiw	r30, 0x01	; 1
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	60 83       	st	Z, r22
    1546:	31 97       	sbiw	r30, 0x01	; 1
    1548:	63 e0       	ldi	r22, 0x03	; 3
    154a:	60 83       	st	Z, r22
    154c:	31 97       	sbiw	r30, 0x01	; 1
    154e:	64 e0       	ldi	r22, 0x04	; 4
    1550:	60 83       	st	Z, r22
    1552:	31 97       	sbiw	r30, 0x01	; 1
    1554:	65 e0       	ldi	r22, 0x05	; 5
    1556:	60 83       	st	Z, r22
    1558:	31 97       	sbiw	r30, 0x01	; 1
    155a:	66 e0       	ldi	r22, 0x06	; 6
    155c:	60 83       	st	Z, r22
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	67 e0       	ldi	r22, 0x07	; 7
    1562:	60 83       	st	Z, r22
    1564:	31 97       	sbiw	r30, 0x01	; 1
    1566:	68 e0       	ldi	r22, 0x08	; 8
    1568:	60 83       	st	Z, r22
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	69 e0       	ldi	r22, 0x09	; 9
    156e:	60 83       	st	Z, r22
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	60 e1       	ldi	r22, 0x10	; 16
    1574:	60 83       	st	Z, r22
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	30 83       	st	Z, r19
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	32 e1       	ldi	r19, 0x12	; 18
    157e:	30 83       	st	Z, r19
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	33 e1       	ldi	r19, 0x13	; 19
    1584:	30 83       	st	Z, r19
    1586:	31 97       	sbiw	r30, 0x01	; 1
    1588:	34 e1       	ldi	r19, 0x14	; 20
    158a:	30 83       	st	Z, r19
    158c:	31 97       	sbiw	r30, 0x01	; 1
    158e:	35 e1       	ldi	r19, 0x15	; 21
    1590:	30 83       	st	Z, r19
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	36 e1       	ldi	r19, 0x16	; 22
    1596:	30 83       	st	Z, r19
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	37 e1       	ldi	r19, 0x17	; 23
    159c:	30 83       	st	Z, r19
    159e:	31 97       	sbiw	r30, 0x01	; 1
    15a0:	38 e1       	ldi	r19, 0x18	; 24
    15a2:	30 83       	st	Z, r19
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	39 e1       	ldi	r19, 0x19	; 25
    15a8:	30 83       	st	Z, r19
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	30 e2       	ldi	r19, 0x20	; 32
    15ae:	30 83       	st	Z, r19
    15b0:	31 97       	sbiw	r30, 0x01	; 1
    15b2:	31 e2       	ldi	r19, 0x21	; 33
    15b4:	30 83       	st	Z, r19
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	20 83       	st	Z, r18
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	23 e2       	ldi	r18, 0x23	; 35
    15be:	20 83       	st	Z, r18
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	40 83       	st	Z, r20
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	50 83       	st	Z, r21
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	26 e2       	ldi	r18, 0x26	; 38
    15cc:	20 83       	st	Z, r18
    15ce:	31 97       	sbiw	r30, 0x01	; 1
    15d0:	27 e2       	ldi	r18, 0x27	; 39
    15d2:	20 83       	st	Z, r18
    15d4:	31 97       	sbiw	r30, 0x01	; 1
    15d6:	28 e2       	ldi	r18, 0x28	; 40
    15d8:	20 83       	st	Z, r18
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	29 e2       	ldi	r18, 0x29	; 41
    15de:	20 83       	st	Z, r18
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	20 e3       	ldi	r18, 0x30	; 48
    15e4:	20 83       	st	Z, r18
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	21 e3       	ldi	r18, 0x31	; 49
    15ea:	20 83       	st	Z, r18
    15ec:	89 97       	sbiw	r24, 0x29	; 41
    15ee:	08 95       	ret

000015f0 <xPortStartScheduler>:
    15f0:	a8 95       	wdr
    15f2:	90 ec       	ldi	r25, 0xC0	; 192
    15f4:	88 e1       	ldi	r24, 0x18	; 24
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	a8 95       	wdr
    15fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1606:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    160a:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    160e:	cd 91       	ld	r28, X+
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	dd 91       	ld	r29, X+
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	3f 90       	pop	r3
    1650:	2f 90       	pop	r2
    1652:	1f 90       	pop	r1
    1654:	0f 90       	pop	r0
    1656:	0c be       	out	0x3c, r0	; 60
    1658:	0f 90       	pop	r0
    165a:	0b be       	out	0x3b, r0	; 59
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	08 95       	ret
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	08 95       	ret

00001668 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	0f 92       	push	r0
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	0c b6       	in	r0, 0x3c	; 60
    1676:	0f 92       	push	r0
    1678:	1f 92       	push	r1
    167a:	11 24       	eor	r1, r1
    167c:	2f 92       	push	r2
    167e:	3f 92       	push	r3
    1680:	4f 92       	push	r4
    1682:	5f 92       	push	r5
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
    16b8:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    16bc:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    16c0:	0d b6       	in	r0, 0x3d	; 61
    16c2:	0d 92       	st	X+, r0
    16c4:	0e b6       	in	r0, 0x3e	; 62
    16c6:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    16c8:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    16cc:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    16d0:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    16d4:	cd 91       	ld	r28, X+
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	dd 91       	ld	r29, X+
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	bf 91       	pop	r27
    16e6:	af 91       	pop	r26
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	7f 91       	pop	r23
    16ee:	6f 91       	pop	r22
    16f0:	5f 91       	pop	r21
    16f2:	4f 91       	pop	r20
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	8f 90       	pop	r8
    170c:	7f 90       	pop	r7
    170e:	6f 90       	pop	r6
    1710:	5f 90       	pop	r5
    1712:	4f 90       	pop	r4
    1714:	3f 90       	pop	r3
    1716:	2f 90       	pop	r2
    1718:	1f 90       	pop	r1
    171a:	0f 90       	pop	r0
    171c:	0c be       	out	0x3c, r0	; 60
    171e:	0f 90       	pop	r0
    1720:	0b be       	out	0x3b, r0	; 59
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1728:	08 95       	ret

0000172a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	0f 92       	push	r0
    1732:	0b b6       	in	r0, 0x3b	; 59
    1734:	0f 92       	push	r0
    1736:	0c b6       	in	r0, 0x3c	; 60
    1738:	0f 92       	push	r0
    173a:	1f 92       	push	r1
    173c:	11 24       	eor	r1, r1
    173e:	2f 92       	push	r2
    1740:	3f 92       	push	r3
    1742:	4f 92       	push	r4
    1744:	5f 92       	push	r5
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ef 93       	push	r30
    1778:	ff 93       	push	r31
    177a:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    177e:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    1782:	0d b6       	in	r0, 0x3d	; 61
    1784:	0d 92       	st	X+, r0
    1786:	0e b6       	in	r0, 0x3e	; 62
    1788:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    178a:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    178c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <xTaskIncrementTick>
    1790:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1792:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1796:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    179a:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    179e:	cd 91       	ld	r28, X+
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	dd 91       	ld	r29, X+
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	9f 90       	pop	r9
    17d4:	8f 90       	pop	r8
    17d6:	7f 90       	pop	r7
    17d8:	6f 90       	pop	r6
    17da:	5f 90       	pop	r5
    17dc:	4f 90       	pop	r4
    17de:	3f 90       	pop	r3
    17e0:	2f 90       	pop	r2
    17e2:	1f 90       	pop	r1
    17e4:	0f 90       	pop	r0
    17e6:	0c be       	out	0x3c, r0	; 60
    17e8:	0f 90       	pop	r0
    17ea:	0b be       	out	0x3b, r0	; 59
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    17f2:	08 95       	ret

000017f4 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    17f4:	9a df       	rcall	.-204    	; 0x172a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    17f6:	18 95       	reti

000017f8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	0f 92       	push	r0
    17fe:	fc 01       	movw	r30, r24
    1800:	96 8d       	ldd	r25, Z+30	; 0x1e
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	91 11       	cpse	r25, r1
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	08 95       	ret

0000180e <prvCopyDataToQueue>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
    1818:	04 2f       	mov	r16, r20
    181a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    181c:	48 a1       	ldd	r20, Y+32	; 0x20
    181e:	41 11       	cpse	r20, r1
    1820:	0c c0       	rjmp	.+24     	; 0x183a <prvCopyDataToQueue+0x2c>
    1822:	88 81       	ld	r24, Y
    1824:	99 81       	ldd	r25, Y+1	; 0x01
    1826:	89 2b       	or	r24, r25
    1828:	09 f0       	breq	.+2      	; 0x182c <prvCopyDataToQueue+0x1e>
    182a:	42 c0       	rjmp	.+132    	; 0x18b0 <prvCopyDataToQueue+0xa2>
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	0e 94 21 17 	call	0x2e42	; 0x2e42 <xTaskPriorityDisinherit>
    1834:	1d 82       	std	Y+5, r1	; 0x05
    1836:	1c 82       	std	Y+4, r1	; 0x04
    1838:	42 c0       	rjmp	.+132    	; 0x18be <prvCopyDataToQueue+0xb0>
    183a:	01 11       	cpse	r16, r1
    183c:	17 c0       	rjmp	.+46     	; 0x186c <prvCopyDataToQueue+0x5e>
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	0e 94 ad 2b 	call	0x575a	; 0x575a <memcpy>
    1848:	28 a1       	ldd	r18, Y+32	; 0x20
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	82 0f       	add	r24, r18
    1850:	91 1d       	adc	r25, r1
    1852:	9b 83       	std	Y+3, r25	; 0x03
    1854:	8a 83       	std	Y+2, r24	; 0x02
    1856:	2c 81       	ldd	r18, Y+4	; 0x04
    1858:	3d 81       	ldd	r19, Y+5	; 0x05
    185a:	82 17       	cp	r24, r18
    185c:	93 07       	cpc	r25, r19
    185e:	50 f1       	brcs	.+84     	; 0x18b4 <prvCopyDataToQueue+0xa6>
    1860:	88 81       	ld	r24, Y
    1862:	99 81       	ldd	r25, Y+1	; 0x01
    1864:	9b 83       	std	Y+3, r25	; 0x03
    1866:	8a 83       	std	Y+2, r24	; 0x02
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	29 c0       	rjmp	.+82     	; 0x18be <prvCopyDataToQueue+0xb0>
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	8e 81       	ldd	r24, Y+6	; 0x06
    1870:	9f 81       	ldd	r25, Y+7	; 0x07
    1872:	0e 94 ad 2b 	call	0x575a	; 0x575a <memcpy>
    1876:	88 a1       	ldd	r24, Y+32	; 0x20
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	91 95       	neg	r25
    187c:	81 95       	neg	r24
    187e:	91 09       	sbc	r25, r1
    1880:	2e 81       	ldd	r18, Y+6	; 0x06
    1882:	3f 81       	ldd	r19, Y+7	; 0x07
    1884:	28 0f       	add	r18, r24
    1886:	39 1f       	adc	r19, r25
    1888:	3f 83       	std	Y+7, r19	; 0x07
    188a:	2e 83       	std	Y+6, r18	; 0x06
    188c:	48 81       	ld	r20, Y
    188e:	59 81       	ldd	r21, Y+1	; 0x01
    1890:	24 17       	cp	r18, r20
    1892:	35 07       	cpc	r19, r21
    1894:	30 f4       	brcc	.+12     	; 0x18a2 <prvCopyDataToQueue+0x94>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	82 0f       	add	r24, r18
    189c:	93 1f       	adc	r25, r19
    189e:	9f 83       	std	Y+7, r25	; 0x07
    18a0:	8e 83       	std	Y+6, r24	; 0x06
    18a2:	02 30       	cpi	r16, 0x02	; 2
    18a4:	49 f4       	brne	.+18     	; 0x18b8 <prvCopyDataToQueue+0xaa>
    18a6:	11 23       	and	r17, r17
    18a8:	49 f0       	breq	.+18     	; 0x18bc <prvCopyDataToQueue+0xae>
    18aa:	11 50       	subi	r17, 0x01	; 1
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <prvCopyDataToQueue+0xb0>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <prvCopyDataToQueue+0xb0>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <prvCopyDataToQueue+0xb0>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <prvCopyDataToQueue+0xb0>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	1f 5f       	subi	r17, 0xFF	; 255
    18c0:	1e 8f       	std	Y+30, r17	; 0x1e
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	08 95       	ret

000018cc <prvCopyDataFromQueue>:
    18cc:	fc 01       	movw	r30, r24
    18ce:	40 a1       	ldd	r20, Z+32	; 0x20
    18d0:	44 23       	and	r20, r20
    18d2:	a9 f0       	breq	.+42     	; 0x18fe <prvCopyDataFromQueue+0x32>
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	26 81       	ldd	r18, Z+6	; 0x06
    18d8:	37 81       	ldd	r19, Z+7	; 0x07
    18da:	24 0f       	add	r18, r20
    18dc:	35 1f       	adc	r19, r21
    18de:	37 83       	std	Z+7, r19	; 0x07
    18e0:	26 83       	std	Z+6, r18	; 0x06
    18e2:	84 81       	ldd	r24, Z+4	; 0x04
    18e4:	95 81       	ldd	r25, Z+5	; 0x05
    18e6:	28 17       	cp	r18, r24
    18e8:	39 07       	cpc	r19, r25
    18ea:	20 f0       	brcs	.+8      	; 0x18f4 <prvCopyDataFromQueue+0x28>
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	97 83       	std	Z+7, r25	; 0x07
    18f2:	86 83       	std	Z+6, r24	; 0x06
    18f4:	cb 01       	movw	r24, r22
    18f6:	66 81       	ldd	r22, Z+6	; 0x06
    18f8:	77 81       	ldd	r23, Z+7	; 0x07
    18fa:	0c 94 ad 2b 	jmp	0x575a	; 0x575a <memcpy>
    18fe:	08 95       	ret

00001900 <prvUnlockQueue>:
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	8c 01       	movw	r16, r24
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	0f 92       	push	r0
    1912:	fc 01       	movw	r30, r24
    1914:	c2 a1       	ldd	r28, Z+34	; 0x22
    1916:	1c 16       	cp	r1, r28
    1918:	ac f4       	brge	.+42     	; 0x1944 <prvUnlockQueue+0x44>
    191a:	83 89       	ldd	r24, Z+19	; 0x13
    191c:	81 11       	cpse	r24, r1
    191e:	06 c0       	rjmp	.+12     	; 0x192c <prvUnlockQueue+0x2c>
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <prvUnlockQueue+0x44>
    1922:	f8 01       	movw	r30, r16
    1924:	83 89       	ldd	r24, Z+19	; 0x13
    1926:	81 11       	cpse	r24, r1
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <prvUnlockQueue+0x34>
    192a:	0c c0       	rjmp	.+24     	; 0x1944 <prvUnlockQueue+0x44>
    192c:	78 01       	movw	r14, r16
    192e:	f3 e1       	ldi	r31, 0x13	; 19
    1930:	ef 0e       	add	r14, r31
    1932:	f1 1c       	adc	r15, r1
    1934:	c7 01       	movw	r24, r14
    1936:	0e 94 18 16 	call	0x2c30	; 0x2c30 <xTaskRemoveFromEventList>
    193a:	81 11       	cpse	r24, r1
    193c:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <vTaskMissedYield>
    1940:	c1 50       	subi	r28, 0x01	; 1
    1942:	79 f7       	brne	.-34     	; 0x1922 <prvUnlockQueue+0x22>
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	f8 01       	movw	r30, r16
    1948:	82 a3       	std	Z+34, r24	; 0x22
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	0f 92       	push	r0
    1954:	c1 a1       	ldd	r28, Z+33	; 0x21
    1956:	1c 16       	cp	r1, r28
    1958:	ac f4       	brge	.+42     	; 0x1984 <prvUnlockQueue+0x84>
    195a:	80 85       	ldd	r24, Z+8	; 0x08
    195c:	81 11       	cpse	r24, r1
    195e:	06 c0       	rjmp	.+12     	; 0x196c <prvUnlockQueue+0x6c>
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <prvUnlockQueue+0x84>
    1962:	f8 01       	movw	r30, r16
    1964:	80 85       	ldd	r24, Z+8	; 0x08
    1966:	81 11       	cpse	r24, r1
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <prvUnlockQueue+0x74>
    196a:	0c c0       	rjmp	.+24     	; 0x1984 <prvUnlockQueue+0x84>
    196c:	78 01       	movw	r14, r16
    196e:	f8 e0       	ldi	r31, 0x08	; 8
    1970:	ef 0e       	add	r14, r31
    1972:	f1 1c       	adc	r15, r1
    1974:	c7 01       	movw	r24, r14
    1976:	0e 94 18 16 	call	0x2c30	; 0x2c30 <xTaskRemoveFromEventList>
    197a:	81 11       	cpse	r24, r1
    197c:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <vTaskMissedYield>
    1980:	c1 50       	subi	r28, 0x01	; 1
    1982:	79 f7       	brne	.-34     	; 0x1962 <prvUnlockQueue+0x62>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	f8 01       	movw	r30, r16
    1988:	81 a3       	std	Z+33, r24	; 0x21
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	08 95       	ret

0000199a <xQueueGenericReset>:
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	0f 92       	push	r0
    19a6:	e8 81       	ld	r30, Y
    19a8:	f9 81       	ldd	r31, Y+1	; 0x01
    19aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ac:	28 a1       	ldd	r18, Y+32	; 0x20
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	82 9f       	mul	r24, r18
    19b4:	a0 01       	movw	r20, r0
    19b6:	83 9f       	mul	r24, r19
    19b8:	50 0d       	add	r21, r0
    19ba:	92 9f       	mul	r25, r18
    19bc:	50 0d       	add	r21, r0
    19be:	11 24       	eor	r1, r1
    19c0:	4e 0f       	add	r20, r30
    19c2:	5f 1f       	adc	r21, r31
    19c4:	5d 83       	std	Y+5, r21	; 0x05
    19c6:	4c 83       	std	Y+4, r20	; 0x04
    19c8:	1e 8e       	std	Y+30, r1	; 0x1e
    19ca:	fb 83       	std	Y+3, r31	; 0x03
    19cc:	ea 83       	std	Y+2, r30	; 0x02
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	82 9f       	mul	r24, r18
    19d2:	a0 01       	movw	r20, r0
    19d4:	83 9f       	mul	r24, r19
    19d6:	50 0d       	add	r21, r0
    19d8:	92 9f       	mul	r25, r18
    19da:	50 0d       	add	r21, r0
    19dc:	11 24       	eor	r1, r1
    19de:	cf 01       	movw	r24, r30
    19e0:	84 0f       	add	r24, r20
    19e2:	95 1f       	adc	r25, r21
    19e4:	9f 83       	std	Y+7, r25	; 0x07
    19e6:	8e 83       	std	Y+6, r24	; 0x06
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	89 a3       	std	Y+33, r24	; 0x21
    19ec:	8a a3       	std	Y+34, r24	; 0x22
    19ee:	61 11       	cpse	r22, r1
    19f0:	0b c0       	rjmp	.+22     	; 0x1a08 <xQueueGenericReset+0x6e>
    19f2:	88 85       	ldd	r24, Y+8	; 0x08
    19f4:	88 23       	and	r24, r24
    19f6:	71 f0       	breq	.+28     	; 0x1a14 <xQueueGenericReset+0x7a>
    19f8:	ce 01       	movw	r24, r28
    19fa:	08 96       	adiw	r24, 0x08	; 8
    19fc:	0e 94 18 16 	call	0x2c30	; 0x2c30 <xTaskRemoveFromEventList>
    1a00:	88 23       	and	r24, r24
    1a02:	41 f0       	breq	.+16     	; 0x1a14 <xQueueGenericReset+0x7a>
    1a04:	31 de       	rcall	.-926    	; 0x1668 <vPortYield>
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <xQueueGenericReset+0x7a>
    1a08:	ce 01       	movw	r24, r28
    1a0a:	08 96       	adiw	r24, 0x08	; 8
    1a0c:	e5 dc       	rcall	.-1590   	; 0x13d8 <vListInitialise>
    1a0e:	ce 01       	movw	r24, r28
    1a10:	43 96       	adiw	r24, 0x13	; 19
    1a12:	e2 dc       	rcall	.-1596   	; 0x13d8 <vListInitialise>
    1a14:	0f 90       	pop	r0
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <xQueueGenericCreate>:
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	08 2f       	mov	r16, r24
    1a2c:	16 2f       	mov	r17, r22
    1a2e:	f4 2e       	mov	r15, r20
    1a30:	66 23       	and	r22, r22
    1a32:	b9 f0       	breq	.+46     	; 0x1a62 <xQueueGenericCreate+0x42>
    1a34:	86 9f       	mul	r24, r22
    1a36:	c0 01       	movw	r24, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	85 96       	adiw	r24, 0x25	; 37
    1a3c:	e3 db       	rcall	.-2106   	; 0x1204 <pvPortMalloc>
    1a3e:	ec 01       	movw	r28, r24
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	41 f4       	brne	.+16     	; 0x1a54 <xQueueGenericCreate+0x34>
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <xQueueGenericCreate+0x4e>
    1a46:	0f 8f       	std	Y+31, r16	; 0x1f
    1a48:	18 a3       	std	Y+32, r17	; 0x20
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	a5 df       	rcall	.-182    	; 0x199a <xQueueGenericReset>
    1a50:	fc a2       	std	Y+36, r15	; 0x24
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <xQueueGenericCreate+0x4e>
    1a54:	85 96       	adiw	r24, 0x25	; 37
    1a56:	99 83       	std	Y+1, r25	; 0x01
    1a58:	88 83       	st	Y, r24
    1a5a:	f5 cf       	rjmp	.-22     	; 0x1a46 <xQueueGenericCreate+0x26>
    1a5c:	d9 83       	std	Y+1, r29	; 0x01
    1a5e:	c8 83       	st	Y, r28
    1a60:	f2 cf       	rjmp	.-28     	; 0x1a46 <xQueueGenericCreate+0x26>
    1a62:	85 e2       	ldi	r24, 0x25	; 37
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	ce db       	rcall	.-2148   	; 0x1204 <pvPortMalloc>
    1a68:	ec 01       	movw	r28, r24
    1a6a:	89 2b       	or	r24, r25
    1a6c:	b9 f7       	brne	.-18     	; 0x1a5c <xQueueGenericCreate+0x3c>
    1a6e:	ce 01       	movw	r24, r28
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	08 95       	ret

00001a7c <xQueueGenericSend>:
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	29 97       	sbiw	r28, 0x09	; 9
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	7c 01       	movw	r14, r24
    1aa4:	5b 01       	movw	r10, r22
    1aa6:	2e 83       	std	Y+6, r18	; 0x06
    1aa8:	3f 83       	std	Y+7, r19	; 0x07
    1aaa:	48 87       	std	Y+8, r20	; 0x08
    1aac:	59 87       	std	Y+9, r21	; 0x09
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	99 24       	eor	r9, r9
    1ab2:	93 94       	inc	r9
    1ab4:	6c 01       	movw	r12, r24
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	c8 0e       	add	r12, r24
    1aba:	d1 1c       	adc	r13, r1
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	0f 92       	push	r0
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ac6:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ac8:	98 17       	cp	r25, r24
    1aca:	10 f0       	brcs	.+4      	; 0x1ad0 <xQueueGenericSend+0x54>
    1acc:	02 30       	cpi	r16, 0x02	; 2
    1ace:	b1 f4       	brne	.+44     	; 0x1afc <xQueueGenericSend+0x80>
    1ad0:	40 2f       	mov	r20, r16
    1ad2:	b5 01       	movw	r22, r10
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	9b de       	rcall	.-714    	; 0x180e <prvCopyDataToQueue>
    1ad8:	f7 01       	movw	r30, r14
    1ada:	93 89       	ldd	r25, Z+19	; 0x13
    1adc:	99 23       	and	r25, r25
    1ade:	41 f0       	breq	.+16     	; 0x1af0 <xQueueGenericSend+0x74>
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	43 96       	adiw	r24, 0x13	; 19
    1ae4:	0e 94 18 16 	call	0x2c30	; 0x2c30 <xTaskRemoveFromEventList>
    1ae8:	88 23       	and	r24, r24
    1aea:	21 f0       	breq	.+8      	; 0x1af4 <xQueueGenericSend+0x78>
    1aec:	bd dd       	rcall	.-1158   	; 0x1668 <vPortYield>
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <xQueueGenericSend+0x78>
    1af0:	81 11       	cpse	r24, r1
    1af2:	ba dd       	rcall	.-1164   	; 0x1668 <vPortYield>
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	4e c0       	rjmp	.+156    	; 0x1b98 <xQueueGenericSend+0x11c>
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	a8 85       	ldd	r26, Y+8	; 0x08
    1b02:	b9 85       	ldd	r27, Y+9	; 0x09
    1b04:	89 2b       	or	r24, r25
    1b06:	8a 2b       	or	r24, r26
    1b08:	8b 2b       	or	r24, r27
    1b0a:	21 f4       	brne	.+8      	; 0x1b14 <xQueueGenericSend+0x98>
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	42 c0       	rjmp	.+132    	; 0x1b98 <xQueueGenericSend+0x11c>
    1b14:	11 11       	cpse	r17, r1
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <xQueueGenericSend+0xa6>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <vTaskInternalSetTimeOutState>
    1b20:	19 2d       	mov	r17, r9
    1b22:	0f 90       	pop	r0
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	2c d6       	rcall	.+3160   	; 0x2780 <vTaskSuspendAll>
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	0f 92       	push	r0
    1b2e:	f7 01       	movw	r30, r14
    1b30:	81 a1       	ldd	r24, Z+33	; 0x21
    1b32:	8f 3f       	cpi	r24, 0xFF	; 255
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <xQueueGenericSend+0xbc>
    1b36:	11 a2       	std	Z+33, r1	; 0x21
    1b38:	f7 01       	movw	r30, r14
    1b3a:	82 a1       	ldd	r24, Z+34	; 0x22
    1b3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <xQueueGenericSend+0xc6>
    1b40:	12 a2       	std	Z+34, r1	; 0x22
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	be 01       	movw	r22, r28
    1b48:	6a 5f       	subi	r22, 0xFA	; 250
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <xTaskCheckForTimeOut>
    1b54:	81 11       	cpse	r24, r1
    1b56:	1c c0       	rjmp	.+56     	; 0x1b90 <xQueueGenericSend+0x114>
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	0f 92       	push	r0
    1b5e:	f7 01       	movw	r30, r14
    1b60:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b62:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	98 13       	cpse	r25, r24
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <xQueueGenericSend+0x10c>
    1b6c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b6e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b70:	68 85       	ldd	r22, Y+8	; 0x08
    1b72:	79 85       	ldd	r23, Y+9	; 0x09
    1b74:	c6 01       	movw	r24, r12
    1b76:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <vTaskPlaceOnEventList>
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	c1 de       	rcall	.-638    	; 0x1900 <prvUnlockQueue>
    1b7e:	e9 d6       	rcall	.+3538   	; 0x2952 <xTaskResumeAll>
    1b80:	81 11       	cpse	r24, r1
    1b82:	9c cf       	rjmp	.-200    	; 0x1abc <xQueueGenericSend+0x40>
    1b84:	71 dd       	rcall	.-1310   	; 0x1668 <vPortYield>
    1b86:	9a cf       	rjmp	.-204    	; 0x1abc <xQueueGenericSend+0x40>
    1b88:	c7 01       	movw	r24, r14
    1b8a:	ba de       	rcall	.-652    	; 0x1900 <prvUnlockQueue>
    1b8c:	e2 d6       	rcall	.+3524   	; 0x2952 <xTaskResumeAll>
    1b8e:	96 cf       	rjmp	.-212    	; 0x1abc <xQueueGenericSend+0x40>
    1b90:	c7 01       	movw	r24, r14
    1b92:	b6 de       	rcall	.-660    	; 0x1900 <prvUnlockQueue>
    1b94:	de d6       	rcall	.+3516   	; 0x2952 <xTaskResumeAll>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	29 96       	adiw	r28, 0x09	; 9
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	08 95       	ret

00001bbc <xQueueCreateMutex>:
    1bbc:	0f 93       	push	r16
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	2b df       	rcall	.-426    	; 0x1a20 <xQueueGenericCreate>
    1bca:	ec 01       	movw	r28, r24
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <xQueueCreateMutex+0x2c>
    1bd0:	1d 82       	std	Y+5, r1	; 0x05
    1bd2:	1c 82       	std	Y+4, r1	; 0x04
    1bd4:	19 82       	std	Y+1, r1	; 0x01
    1bd6:	18 82       	st	Y, r1
    1bd8:	1e 82       	std	Y+6, r1	; 0x06
    1bda:	00 e0       	ldi	r16, 0x00	; 0
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	4a df       	rcall	.-364    	; 0x1a7c <xQueueGenericSend>
    1be8:	ce 01       	movw	r24, r28
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

00001bf2 <xQueueGenericSendFromISR>:
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	8a 01       	movw	r16, r20
    1c00:	fc 01       	movw	r30, r24
    1c02:	56 8d       	ldd	r21, Z+30	; 0x1e
    1c04:	37 8d       	ldd	r19, Z+31	; 0x1f
    1c06:	53 17       	cp	r21, r19
    1c08:	10 f0       	brcs	.+4      	; 0x1c0e <xQueueGenericSendFromISR+0x1c>
    1c0a:	22 30       	cpi	r18, 0x02	; 2
    1c0c:	e9 f4       	brne	.+58     	; 0x1c48 <xQueueGenericSendFromISR+0x56>
    1c0e:	42 2f       	mov	r20, r18
    1c10:	78 01       	movw	r14, r16
    1c12:	ec 01       	movw	r28, r24
    1c14:	1a a1       	ldd	r17, Y+34	; 0x22
    1c16:	fb dd       	rcall	.-1034   	; 0x180e <prvCopyDataToQueue>
    1c18:	1f 3f       	cpi	r17, 0xFF	; 255
    1c1a:	81 f4       	brne	.+32     	; 0x1c3c <xQueueGenericSendFromISR+0x4a>
    1c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1e:	88 23       	and	r24, r24
    1c20:	a9 f0       	breq	.+42     	; 0x1c4c <xQueueGenericSendFromISR+0x5a>
    1c22:	ce 01       	movw	r24, r28
    1c24:	43 96       	adiw	r24, 0x13	; 19
    1c26:	0e 94 18 16 	call	0x2c30	; 0x2c30 <xTaskRemoveFromEventList>
    1c2a:	88 23       	and	r24, r24
    1c2c:	89 f0       	breq	.+34     	; 0x1c50 <xQueueGenericSendFromISR+0x5e>
    1c2e:	e1 14       	cp	r14, r1
    1c30:	f1 04       	cpc	r15, r1
    1c32:	81 f0       	breq	.+32     	; 0x1c54 <xQueueGenericSendFromISR+0x62>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	f7 01       	movw	r30, r14
    1c38:	80 83       	st	Z, r24
    1c3a:	0d c0       	rjmp	.+26     	; 0x1c56 <xQueueGenericSendFromISR+0x64>
    1c3c:	ff 24       	eor	r15, r15
    1c3e:	f3 94       	inc	r15
    1c40:	f1 0e       	add	r15, r17
    1c42:	fa a2       	std	Y+34, r15	; 0x22
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <xQueueGenericSendFromISR+0x64>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <xQueueGenericSendFromISR+0x64>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <xQueueGenericSendFromISR+0x64>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <xQueueGenericSendFromISR+0x64>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	08 95       	ret

00001c64 <xQueueReceive>:
    1c64:	9f 92       	push	r9
    1c66:	af 92       	push	r10
    1c68:	bf 92       	push	r11
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	29 97       	sbiw	r28, 0x09	; 9
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	8c 01       	movw	r16, r24
    1c8c:	5b 01       	movw	r10, r22
    1c8e:	2e 83       	std	Y+6, r18	; 0x06
    1c90:	3f 83       	std	Y+7, r19	; 0x07
    1c92:	48 87       	std	Y+8, r20	; 0x08
    1c94:	59 87       	std	Y+9, r21	; 0x09
    1c96:	e1 2c       	mov	r14, r1
    1c98:	99 24       	eor	r9, r9
    1c9a:	93 94       	inc	r9
    1c9c:	6c 01       	movw	r12, r24
    1c9e:	83 e1       	ldi	r24, 0x13	; 19
    1ca0:	c8 0e       	add	r12, r24
    1ca2:	d1 1c       	adc	r13, r1
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	0f 92       	push	r0
    1caa:	f8 01       	movw	r30, r16
    1cac:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1cae:	ff 20       	and	r15, r15
    1cb0:	91 f0       	breq	.+36     	; 0x1cd6 <xQueueReceive+0x72>
    1cb2:	b5 01       	movw	r22, r10
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	0a de       	rcall	.-1004   	; 0x18cc <prvCopyDataFromQueue>
    1cb8:	fa 94       	dec	r15
    1cba:	f8 01       	movw	r30, r16
    1cbc:	f6 8e       	std	Z+30, r15	; 0x1e
    1cbe:	80 85       	ldd	r24, Z+8	; 0x08
    1cc0:	88 23       	and	r24, r24
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <xQueueReceive+0x6a>
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	08 96       	adiw	r24, 0x08	; 8
    1cc8:	b3 d7       	rcall	.+3942   	; 0x2c30 <xTaskRemoveFromEventList>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	cd dc       	rcall	.-1638   	; 0x1668 <vPortYield>
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	4c c0       	rjmp	.+152    	; 0x1d6e <xQueueReceive+0x10a>
    1cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cda:	a8 85       	ldd	r26, Y+8	; 0x08
    1cdc:	b9 85       	ldd	r27, Y+9	; 0x09
    1cde:	89 2b       	or	r24, r25
    1ce0:	8a 2b       	or	r24, r26
    1ce2:	8b 2b       	or	r24, r27
    1ce4:	21 f4       	brne	.+8      	; 0x1cee <xQueueReceive+0x8a>
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	40 c0       	rjmp	.+128    	; 0x1d6e <xQueueReceive+0x10a>
    1cee:	e1 10       	cpse	r14, r1
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <xQueueReceive+0x98>
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <vTaskInternalSetTimeOutState>
    1cfa:	e9 2c       	mov	r14, r9
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	3f d5       	rcall	.+2686   	; 0x2780 <vTaskSuspendAll>
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	0f 92       	push	r0
    1d08:	f8 01       	movw	r30, r16
    1d0a:	81 a1       	ldd	r24, Z+33	; 0x21
    1d0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <xQueueReceive+0xae>
    1d10:	11 a2       	std	Z+33, r1	; 0x21
    1d12:	f8 01       	movw	r30, r16
    1d14:	82 a1       	ldd	r24, Z+34	; 0x22
    1d16:	8f 3f       	cpi	r24, 0xFF	; 255
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <xQueueReceive+0xb8>
    1d1a:	12 a2       	std	Z+34, r1	; 0x22
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	be 01       	movw	r22, r28
    1d22:	6a 5f       	subi	r22, 0xFA	; 250
    1d24:	7f 4f       	sbci	r23, 0xFF	; 255
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <xTaskCheckForTimeOut>
    1d2e:	81 11       	cpse	r24, r1
    1d30:	15 c0       	rjmp	.+42     	; 0x1d5c <xQueueReceive+0xf8>
    1d32:	c8 01       	movw	r24, r16
    1d34:	61 dd       	rcall	.-1342   	; 0x17f8 <prvIsQueueEmpty>
    1d36:	88 23       	and	r24, r24
    1d38:	69 f0       	breq	.+26     	; 0x1d54 <xQueueReceive+0xf0>
    1d3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d3e:	68 85       	ldd	r22, Y+8	; 0x08
    1d40:	79 85       	ldd	r23, Y+9	; 0x09
    1d42:	c6 01       	movw	r24, r12
    1d44:	1a d7       	rcall	.+3636   	; 0x2b7a <vTaskPlaceOnEventList>
    1d46:	c8 01       	movw	r24, r16
    1d48:	db dd       	rcall	.-1098   	; 0x1900 <prvUnlockQueue>
    1d4a:	03 d6       	rcall	.+3078   	; 0x2952 <xTaskResumeAll>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	aa cf       	rjmp	.-172    	; 0x1ca4 <xQueueReceive+0x40>
    1d50:	8b dc       	rcall	.-1770   	; 0x1668 <vPortYield>
    1d52:	a8 cf       	rjmp	.-176    	; 0x1ca4 <xQueueReceive+0x40>
    1d54:	c8 01       	movw	r24, r16
    1d56:	d4 dd       	rcall	.-1112   	; 0x1900 <prvUnlockQueue>
    1d58:	fc d5       	rcall	.+3064   	; 0x2952 <xTaskResumeAll>
    1d5a:	a4 cf       	rjmp	.-184    	; 0x1ca4 <xQueueReceive+0x40>
    1d5c:	c8 01       	movw	r24, r16
    1d5e:	d0 dd       	rcall	.-1120   	; 0x1900 <prvUnlockQueue>
    1d60:	f8 d5       	rcall	.+3056   	; 0x2952 <xTaskResumeAll>
    1d62:	c8 01       	movw	r24, r16
    1d64:	49 dd       	rcall	.-1390   	; 0x17f8 <prvIsQueueEmpty>
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <xQueueReceive+0x108>
    1d6a:	9c cf       	rjmp	.-200    	; 0x1ca4 <xQueueReceive+0x40>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	29 96       	adiw	r28, 0x09	; 9
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	df 90       	pop	r13
    1d88:	cf 90       	pop	r12
    1d8a:	bf 90       	pop	r11
    1d8c:	af 90       	pop	r10
    1d8e:	9f 90       	pop	r9
    1d90:	08 95       	ret

00001d92 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	0f 92       	push	r0
    1d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1da0:	8f 3f       	cpi	r24, 0xFF	; 255
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <vQueueWaitForMessageRestricted+0x14>
    1da4:	19 a2       	std	Y+33, r1	; 0x21
    1da6:	8a a1       	ldd	r24, Y+34	; 0x22
    1da8:	8f 3f       	cpi	r24, 0xFF	; 255
    1daa:	09 f4       	brne	.+2      	; 0x1dae <vQueueWaitForMessageRestricted+0x1c>
    1dac:	1a a2       	std	Y+34, r1	; 0x22
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1db4:	81 11       	cpse	r24, r1
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1db8:	ce 01       	movw	r24, r28
    1dba:	43 96       	adiw	r24, 0x13	; 19
    1dbc:	19 d7       	rcall	.+3634   	; 0x2bf0 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	9f dd       	rcall	.-1218   	; 0x1900 <prvUnlockQueue>
    }
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	08 95       	ret

00001dc8 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1dc8:	fc 01       	movw	r30, r24
    1dca:	44 81       	ldd	r20, Z+4	; 0x04
    1dcc:	55 81       	ldd	r21, Z+5	; 0x05
    1dce:	22 81       	ldd	r18, Z+2	; 0x02
    1dd0:	33 81       	ldd	r19, Z+3	; 0x03
    1dd2:	24 0f       	add	r18, r20
    1dd4:	35 1f       	adc	r19, r21
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	b9 01       	movw	r22, r18
    1ddc:	68 1b       	sub	r22, r24
    1dde:	79 0b       	sbc	r23, r25
    1de0:	cb 01       	movw	r24, r22
    1de2:	64 17       	cp	r22, r20
    1de4:	75 07       	cpc	r23, r21
    1de6:	10 f0       	brcs	.+4      	; 0x1dec <prvBytesInBuffer+0x24>
    1de8:	84 1b       	sub	r24, r20
    1dea:	95 0b       	sbc	r25, r21
    1dec:	08 95       	ret

00001dee <prvWriteBytesToBuffer>:
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	6c 01       	movw	r12, r24
    1e04:	5b 01       	movw	r10, r22
    1e06:	7a 01       	movw	r14, r20
    1e08:	fc 01       	movw	r30, r24
    1e0a:	c2 81       	ldd	r28, Z+2	; 0x02
    1e0c:	d3 81       	ldd	r29, Z+3	; 0x03
    1e0e:	04 81       	ldd	r16, Z+4	; 0x04
    1e10:	15 81       	ldd	r17, Z+5	; 0x05
    1e12:	0c 1b       	sub	r16, r28
    1e14:	1d 0b       	sbc	r17, r29
    1e16:	40 17       	cp	r20, r16
    1e18:	51 07       	cpc	r21, r17
    1e1a:	08 f4       	brcc	.+2      	; 0x1e1e <prvWriteBytesToBuffer+0x30>
    1e1c:	8a 01       	movw	r16, r20
    1e1e:	f6 01       	movw	r30, r12
    1e20:	84 85       	ldd	r24, Z+12	; 0x0c
    1e22:	95 85       	ldd	r25, Z+13	; 0x0d
    1e24:	a8 01       	movw	r20, r16
    1e26:	b5 01       	movw	r22, r10
    1e28:	8c 0f       	add	r24, r28
    1e2a:	9d 1f       	adc	r25, r29
    1e2c:	0e 94 ad 2b 	call	0x575a	; 0x575a <memcpy>
    1e30:	0e 15       	cp	r16, r14
    1e32:	1f 05       	cpc	r17, r15
    1e34:	58 f4       	brcc	.+22     	; 0x1e4c <prvWriteBytesToBuffer+0x5e>
    1e36:	a7 01       	movw	r20, r14
    1e38:	40 1b       	sub	r20, r16
    1e3a:	51 0b       	sbc	r21, r17
    1e3c:	b5 01       	movw	r22, r10
    1e3e:	60 0f       	add	r22, r16
    1e40:	71 1f       	adc	r23, r17
    1e42:	f6 01       	movw	r30, r12
    1e44:	84 85       	ldd	r24, Z+12	; 0x0c
    1e46:	95 85       	ldd	r25, Z+13	; 0x0d
    1e48:	0e 94 ad 2b 	call	0x575a	; 0x575a <memcpy>
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	8e 0d       	add	r24, r14
    1e50:	9f 1d       	adc	r25, r15
    1e52:	f6 01       	movw	r30, r12
    1e54:	24 81       	ldd	r18, Z+4	; 0x04
    1e56:	35 81       	ldd	r19, Z+5	; 0x05
    1e58:	82 17       	cp	r24, r18
    1e5a:	93 07       	cpc	r25, r19
    1e5c:	10 f0       	brcs	.+4      	; 0x1e62 <prvWriteBytesToBuffer+0x74>
    1e5e:	82 1b       	sub	r24, r18
    1e60:	93 0b       	sbc	r25, r19
    1e62:	f6 01       	movw	r30, r12
    1e64:	93 83       	std	Z+3, r25	; 0x03
    1e66:	82 83       	std	Z+2, r24	; 0x02
    1e68:	c7 01       	movw	r24, r14
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	bf 90       	pop	r11
    1e7c:	af 90       	pop	r10
    1e7e:	08 95       	ret

00001e80 <prvWriteMessageToBuffer>:
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	1f 92       	push	r1
    1e92:	1f 92       	push	r1
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	5a 83       	std	Y+2, r21	; 0x02
    1e9a:	49 83       	std	Y+1, r20	; 0x01
    1e9c:	21 15       	cp	r18, r1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	c9 f0       	breq	.+50     	; 0x1ed4 <prvWriteMessageToBuffer+0x54>
    1ea2:	6b 01       	movw	r12, r22
    1ea4:	7c 01       	movw	r14, r24
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	86 85       	ldd	r24, Z+14	; 0x0e
    1eaa:	80 fd       	sbrc	r24, 0
    1eac:	08 c0       	rjmp	.+16     	; 0x1ebe <prvWriteMessageToBuffer+0x3e>
    1eae:	ca 01       	movw	r24, r20
    1eb0:	24 17       	cp	r18, r20
    1eb2:	35 07       	cpc	r19, r21
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <prvWriteMessageToBuffer+0x38>
    1eb6:	c9 01       	movw	r24, r18
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	11 c0       	rjmp	.+34     	; 0x1ee0 <prvWriteMessageToBuffer+0x60>
    1ebe:	20 17       	cp	r18, r16
    1ec0:	31 07       	cpc	r19, r17
    1ec2:	58 f0       	brcs	.+22     	; 0x1eda <prvWriteMessageToBuffer+0x5a>
    1ec4:	42 e0       	ldi	r20, 0x02	; 2
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	be 01       	movw	r22, r28
    1eca:	6f 5f       	subi	r22, 0xFF	; 255
    1ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ece:	c7 01       	movw	r24, r14
    1ed0:	8e df       	rcall	.-228    	; 0x1dee <prvWriteBytesToBuffer>
    1ed2:	06 c0       	rjmp	.+12     	; 0x1ee0 <prvWriteMessageToBuffer+0x60>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	08 c0       	rjmp	.+16     	; 0x1eea <prvWriteMessageToBuffer+0x6a>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <prvWriteMessageToBuffer+0x6a>
    1ee0:	49 81       	ldd	r20, Y+1	; 0x01
    1ee2:	5a 81       	ldd	r21, Y+2	; 0x02
    1ee4:	b6 01       	movw	r22, r12
    1ee6:	c7 01       	movw	r24, r14
    1ee8:	82 df       	rcall	.-252    	; 0x1dee <prvWriteBytesToBuffer>
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	08 95       	ret

00001f00 <prvReadBytesFromBuffer>:
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	7c 01       	movw	r14, r24
    1f16:	5b 01       	movw	r10, r22
    1f18:	e9 01       	movw	r28, r18
    1f1a:	42 17       	cp	r20, r18
    1f1c:	53 07       	cpc	r21, r19
    1f1e:	08 f4       	brcc	.+2      	; 0x1f22 <prvReadBytesFromBuffer+0x22>
    1f20:	ea 01       	movw	r28, r20
    1f22:	20 97       	sbiw	r28, 0x00	; 0
    1f24:	79 f1       	breq	.+94     	; 0x1f84 <prvReadBytesFromBuffer+0x84>
    1f26:	f7 01       	movw	r30, r14
    1f28:	00 81       	ld	r16, Z
    1f2a:	11 81       	ldd	r17, Z+1	; 0x01
    1f2c:	c4 80       	ldd	r12, Z+4	; 0x04
    1f2e:	d5 80       	ldd	r13, Z+5	; 0x05
    1f30:	c0 1a       	sub	r12, r16
    1f32:	d1 0a       	sbc	r13, r17
    1f34:	cc 15       	cp	r28, r12
    1f36:	dd 05       	cpc	r29, r13
    1f38:	08 f4       	brcc	.+2      	; 0x1f3c <prvReadBytesFromBuffer+0x3c>
    1f3a:	6e 01       	movw	r12, r28
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	64 85       	ldd	r22, Z+12	; 0x0c
    1f40:	75 85       	ldd	r23, Z+13	; 0x0d
    1f42:	60 0f       	add	r22, r16
    1f44:	71 1f       	adc	r23, r17
    1f46:	a6 01       	movw	r20, r12
    1f48:	c5 01       	movw	r24, r10
    1f4a:	0e 94 ad 2b 	call	0x575a	; 0x575a <memcpy>
    1f4e:	cc 16       	cp	r12, r28
    1f50:	dd 06       	cpc	r13, r29
    1f52:	58 f4       	brcc	.+22     	; 0x1f6a <prvReadBytesFromBuffer+0x6a>
    1f54:	ae 01       	movw	r20, r28
    1f56:	4c 19       	sub	r20, r12
    1f58:	5d 09       	sbc	r21, r13
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	64 85       	ldd	r22, Z+12	; 0x0c
    1f5e:	75 85       	ldd	r23, Z+13	; 0x0d
    1f60:	c5 01       	movw	r24, r10
    1f62:	8c 0d       	add	r24, r12
    1f64:	9d 1d       	adc	r25, r13
    1f66:	0e 94 ad 2b 	call	0x575a	; 0x575a <memcpy>
    1f6a:	0c 0f       	add	r16, r28
    1f6c:	1d 1f       	adc	r17, r29
    1f6e:	f7 01       	movw	r30, r14
    1f70:	84 81       	ldd	r24, Z+4	; 0x04
    1f72:	95 81       	ldd	r25, Z+5	; 0x05
    1f74:	08 17       	cp	r16, r24
    1f76:	19 07       	cpc	r17, r25
    1f78:	10 f0       	brcs	.+4      	; 0x1f7e <prvReadBytesFromBuffer+0x7e>
    1f7a:	08 1b       	sub	r16, r24
    1f7c:	19 0b       	sbc	r17, r25
    1f7e:	f7 01       	movw	r30, r14
    1f80:	11 83       	std	Z+1, r17	; 0x01
    1f82:	00 83       	st	Z, r16
    1f84:	ce 01       	movw	r24, r28
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	08 95       	ret

00001f9c <xStreamBufferGenericCreate>:
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	eb 01       	movw	r28, r22
    1fa8:	11 e0       	ldi	r17, 0x01	; 1
    1faa:	41 30       	cpi	r20, 0x01	; 1
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <xStreamBufferGenericCreate+0x14>
    1fae:	10 e0       	ldi	r17, 0x00	; 0
    1fb0:	20 97       	sbiw	r28, 0x00	; 0
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <xStreamBufferGenericCreate+0x1c>
    1fb4:	c1 e0       	ldi	r28, 0x01	; 1
    1fb6:	d0 e0       	ldi	r29, 0x00	; 0
    1fb8:	7c 01       	movw	r14, r24
    1fba:	2f ef       	ldi	r18, 0xFF	; 255
    1fbc:	e2 1a       	sub	r14, r18
    1fbe:	f2 0a       	sbc	r15, r18
    1fc0:	41 96       	adiw	r24, 0x11	; 17
    1fc2:	20 d9       	rcall	.-3520   	; 0x1204 <pvPortMalloc>
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <xStreamBufferGenericCreate+0x4c>
    1fc8:	20 e1       	ldi	r18, 0x10	; 16
    1fca:	fc 01       	movw	r30, r24
    1fcc:	11 92       	st	Z+, r1
    1fce:	2a 95       	dec	r18
    1fd0:	e9 f7       	brne	.-6      	; 0x1fcc <xStreamBufferGenericCreate+0x30>
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	20 5f       	subi	r18, 0xF0	; 240
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd8:	fc 01       	movw	r30, r24
    1fda:	35 87       	std	Z+13, r19	; 0x0d
    1fdc:	24 87       	std	Z+12, r18	; 0x0c
    1fde:	f5 82       	std	Z+5, r15	; 0x05
    1fe0:	e4 82       	std	Z+4, r14	; 0x04
    1fe2:	d7 83       	std	Z+7, r29	; 0x07
    1fe4:	c6 83       	std	Z+6, r28	; 0x06
    1fe6:	16 87       	std	Z+14, r17	; 0x0e
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	ff 90       	pop	r15
    1ff0:	ef 90       	pop	r14
    1ff2:	08 95       	ret

00001ff4 <xStreamBufferReset>:
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	27 85       	ldd	r18, Z+15	; 0x0f
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	0f 92       	push	r0
    2002:	80 85       	ldd	r24, Z+8	; 0x08
    2004:	91 85       	ldd	r25, Z+9	; 0x09
    2006:	89 2b       	or	r24, r25
    2008:	d1 f4       	brne	.+52     	; 0x203e <xStreamBufferReset+0x4a>
    200a:	82 85       	ldd	r24, Z+10	; 0x0a
    200c:	93 85       	ldd	r25, Z+11	; 0x0b
    200e:	89 2b       	or	r24, r25
    2010:	c1 f4       	brne	.+48     	; 0x2042 <xStreamBufferReset+0x4e>
    2012:	86 85       	ldd	r24, Z+14	; 0x0e
    2014:	46 81       	ldd	r20, Z+6	; 0x06
    2016:	57 81       	ldd	r21, Z+7	; 0x07
    2018:	64 81       	ldd	r22, Z+4	; 0x04
    201a:	75 81       	ldd	r23, Z+5	; 0x05
    201c:	a4 85       	ldd	r26, Z+12	; 0x0c
    201e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2020:	90 e1       	ldi	r25, 0x10	; 16
    2022:	ef 01       	movw	r28, r30
    2024:	19 92       	st	Y+, r1
    2026:	9a 95       	dec	r25
    2028:	e9 f7       	brne	.-6      	; 0x2024 <xStreamBufferReset+0x30>
    202a:	b5 87       	std	Z+13, r27	; 0x0d
    202c:	a4 87       	std	Z+12, r26	; 0x0c
    202e:	75 83       	std	Z+5, r23	; 0x05
    2030:	64 83       	std	Z+4, r22	; 0x04
    2032:	57 83       	std	Z+7, r21	; 0x07
    2034:	46 83       	std	Z+6, r20	; 0x06
    2036:	86 87       	std	Z+14, r24	; 0x0e
    2038:	27 87       	std	Z+15, r18	; 0x0f
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <xStreamBufferReset+0x50>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <xStreamBufferReset+0x50>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <xStreamBufferSpacesAvailable>:
    204e:	fc 01       	movw	r30, r24
    2050:	24 81       	ldd	r18, Z+4	; 0x04
    2052:	35 81       	ldd	r19, Z+5	; 0x05
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	42 81       	ldd	r20, Z+2	; 0x02
    205a:	53 81       	ldd	r21, Z+3	; 0x03
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	84 1b       	sub	r24, r20
    2064:	95 0b       	sbc	r25, r21
    2066:	82 17       	cp	r24, r18
    2068:	93 07       	cpc	r25, r19
    206a:	10 f0       	brcs	.+4      	; 0x2070 <xStreamBufferSpacesAvailable+0x22>
    206c:	82 1b       	sub	r24, r18
    206e:	93 0b       	sbc	r25, r19
    2070:	08 95       	ret

00002072 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2072:	2f 92       	push	r2
    2074:	3f 92       	push	r3
    2076:	4f 92       	push	r4
    2078:	5f 92       	push	r5
    207a:	6f 92       	push	r6
    207c:	7f 92       	push	r7
    207e:	8f 92       	push	r8
    2080:	9f 92       	push	r9
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	29 97       	sbiw	r28, 0x09	; 9
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	5c 01       	movw	r10, r24
    20a8:	1b 01       	movw	r2, r22
    20aa:	2a 01       	movw	r4, r20
    20ac:	0e 83       	std	Y+6, r16	; 0x06
    20ae:	1f 83       	std	Y+7, r17	; 0x07
    20b0:	28 87       	std	Y+8, r18	; 0x08
    20b2:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    20b4:	fc 01       	movw	r30, r24
    20b6:	86 85       	ldd	r24, Z+14	; 0x0e
    20b8:	80 ff       	sbrs	r24, 0
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    20bc:	3a 01       	movw	r6, r20
    20be:	f2 e0       	ldi	r31, 0x02	; 2
    20c0:	6f 0e       	add	r6, r31
    20c2:	71 1c       	adc	r7, r1
    20c4:	01 c0       	rjmp	.+2      	; 0x20c8 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    20c6:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    20c8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ca:	9f 81       	ldd	r25, Y+7	; 0x07
    20cc:	a8 85       	ldd	r26, Y+8	; 0x08
    20ce:	b9 85       	ldd	r27, Y+9	; 0x09
    20d0:	89 2b       	or	r24, r25
    20d2:	8a 2b       	or	r24, r26
    20d4:	8b 2b       	or	r24, r27
    20d6:	09 f4       	brne	.+2      	; 0x20da <xStreamBufferSend+0x68>
    20d8:	34 c0       	rjmp	.+104    	; 0x2142 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    20da:	ce 01       	movw	r24, r28
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	1e d6       	rcall	.+3132   	; 0x2d1c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    20e6:	c5 01       	movw	r24, r10
    20e8:	b2 df       	rcall	.-156    	; 0x204e <xStreamBufferSpacesAvailable>
    20ea:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    20ec:	86 15       	cp	r24, r6
    20ee:	97 05       	cpc	r25, r7
    20f0:	18 f5       	brcc	.+70     	; 0x2138 <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 14 19 	call	0x3228	; 0x3228 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    20fa:	90 d6       	rcall	.+3360   	; 0x2e1c <xTaskGetCurrentTaskHandle>
    20fc:	f5 01       	movw	r30, r10
    20fe:	93 87       	std	Z+11, r25	; 0x0b
    2100:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2102:	0f 90       	pop	r0
    2104:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2106:	ce 80       	ldd	r12, Y+6	; 0x06
    2108:	df 80       	ldd	r13, Y+7	; 0x07
    210a:	e8 84       	ldd	r14, Y+8	; 0x08
    210c:	f9 84       	ldd	r15, Y+9	; 0x09
    210e:	00 e0       	ldi	r16, 0x00	; 0
    2110:	10 e0       	ldi	r17, 0x00	; 0
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	a9 01       	movw	r20, r18
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	cb 01       	movw	r24, r22
    211e:	f9 d6       	rcall	.+3570   	; 0x2f12 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2120:	f5 01       	movw	r30, r10
    2122:	13 86       	std	Z+11, r1	; 0x0b
    2124:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2126:	be 01       	movw	r22, r28
    2128:	6a 5f       	subi	r22, 0xFA	; 250
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	1c d6       	rcall	.+3128   	; 0x2d6a <xTaskCheckForTimeOut>
    2132:	88 23       	and	r24, r24
    2134:	a9 f2       	breq	.-86     	; 0x20e0 <xStreamBufferSend+0x6e>
    2136:	02 c0       	rjmp	.+4      	; 0x213c <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2138:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	81 14       	cp	r8, r1
    213e:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2140:	19 f4       	brne	.+6      	; 0x2148 <xStreamBufferSend+0xd6>
    2142:	c5 01       	movw	r24, r10
    2144:	84 df       	rcall	.-248    	; 0x204e <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2146:	4c 01       	movw	r8, r24
    2148:	83 01       	movw	r16, r6
    214a:	94 01       	movw	r18, r8
    214c:	a2 01       	movw	r20, r4
    214e:	b1 01       	movw	r22, r2
    2150:	c5 01       	movw	r24, r10
    2152:	96 de       	rcall	.-724    	; 0x1e80 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    2154:	7c 01       	movw	r14, r24
    2156:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2158:	d9 f0       	breq	.+54     	; 0x2190 <xStreamBufferSend+0x11e>
    215a:	c5 01       	movw	r24, r10
    215c:	35 de       	rcall	.-918    	; 0x1dc8 <prvBytesInBuffer>
    215e:	f5 01       	movw	r30, r10
    2160:	26 81       	ldd	r18, Z+6	; 0x06
    2162:	37 81       	ldd	r19, Z+7	; 0x07
    2164:	82 17       	cp	r24, r18
    2166:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2168:	98 f0       	brcs	.+38     	; 0x2190 <xStreamBufferSend+0x11e>
    216a:	0a d3       	rcall	.+1556   	; 0x2780 <vTaskSuspendAll>
    216c:	f5 01       	movw	r30, r10
    216e:	80 85       	ldd	r24, Z+8	; 0x08
    2170:	91 85       	ldd	r25, Z+9	; 0x09
    2172:	89 2b       	or	r24, r25
    2174:	61 f0       	breq	.+24     	; 0x218e <xStreamBufferSend+0x11c>
    2176:	80 85       	ldd	r24, Z+8	; 0x08
    2178:	91 85       	ldd	r25, Z+9	; 0x09
    217a:	00 e0       	ldi	r16, 0x00	; 0
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	ba 01       	movw	r22, r20
    2186:	4f d7       	rcall	.+3742   	; 0x3026 <xTaskGenericNotify>
    2188:	f5 01       	movw	r30, r10
    218a:	11 86       	std	Z+9, r1	; 0x09
    218c:	10 86       	std	Z+8, r1	; 0x08
    218e:	e1 d3       	rcall	.+1986   	; 0x2952 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2190:	c7 01       	movw	r24, r14
    2192:	29 96       	adiw	r28, 0x09	; 9
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	bf 90       	pop	r11
    21b0:	af 90       	pop	r10
    21b2:	9f 90       	pop	r9
    21b4:	8f 90       	pop	r8
    21b6:	7f 90       	pop	r7
    21b8:	6f 90       	pop	r6
    21ba:	5f 90       	pop	r5
    21bc:	4f 90       	pop	r4
    21be:	3f 90       	pop	r3
    21c0:	2f 90       	pop	r2
    21c2:	08 95       	ret

000021c4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	ec 01       	movw	r28, r24
    21da:	5b 01       	movw	r10, r22
    21dc:	6a 01       	movw	r12, r20
    21de:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    21e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e2:	80 ff       	sbrs	r24, 0
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    21e6:	8a 01       	movw	r16, r20
    21e8:	0e 5f       	subi	r16, 0xFE	; 254
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    21ee:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21f0:	ce 01       	movw	r24, r28
    21f2:	2d df       	rcall	.-422    	; 0x204e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    21f4:	9c 01       	movw	r18, r24
    21f6:	a6 01       	movw	r20, r12
    21f8:	b5 01       	movw	r22, r10
    21fa:	ce 01       	movw	r24, r28
    21fc:	41 de       	rcall	.-894    	; 0x1e80 <prvWriteMessageToBuffer>
    21fe:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2200:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2202:	b1 f0       	breq	.+44     	; 0x2230 <__stack+0x31>
    2204:	ce 01       	movw	r24, r28
    2206:	e0 dd       	rcall	.-1088   	; 0x1dc8 <prvBytesInBuffer>
    2208:	2e 81       	ldd	r18, Y+6	; 0x06
    220a:	3f 81       	ldd	r19, Y+7	; 0x07
    220c:	82 17       	cp	r24, r18
    220e:	93 07       	cpc	r25, r19
    2210:	78 f0       	brcs	.+30     	; 0x2230 <__stack+0x31>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2212:	88 85       	ldd	r24, Y+8	; 0x08
    2214:	99 85       	ldd	r25, Y+9	; 0x09
    2216:	89 2b       	or	r24, r25
    2218:	59 f0       	breq	.+22     	; 0x2230 <__stack+0x31>
    221a:	88 85       	ldd	r24, Y+8	; 0x08
    221c:	99 85       	ldd	r25, Y+9	; 0x09
    221e:	00 e0       	ldi	r16, 0x00	; 0
    2220:	10 e0       	ldi	r17, 0x00	; 0
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	ba 01       	movw	r22, r20
    222a:	75 d7       	rcall	.+3818   	; 0x3116 <xTaskGenericNotifyFromISR>
    222c:	19 86       	std	Y+9, r1	; 0x09
    222e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2230:	c6 01       	movw	r24, r12
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	af 90       	pop	r10
    2246:	08 95       	ret

00002248 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2248:	4f 92       	push	r4
    224a:	5f 92       	push	r5
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	1f 92       	push	r1
    226a:	1f 92       	push	r1
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	5c 01       	movw	r10, r24
    2272:	2b 01       	movw	r4, r22
    2274:	3a 01       	movw	r6, r20
    2276:	68 01       	movw	r12, r16
    2278:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    227a:	fc 01       	movw	r30, r24
    227c:	86 85       	ldd	r24, Z+14	; 0x0e
    227e:	80 fd       	sbrc	r24, 0
    2280:	03 c0       	rjmp	.+6      	; 0x2288 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2282:	81 2c       	mov	r8, r1
    2284:	91 2c       	mov	r9, r1
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2288:	68 94       	set
    228a:	88 24       	eor	r8, r8
    228c:	81 f8       	bld	r8, 1
    228e:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2290:	c1 14       	cp	r12, r1
    2292:	d1 04       	cpc	r13, r1
    2294:	e1 04       	cpc	r14, r1
    2296:	f1 04       	cpc	r15, r1
    2298:	29 f1       	breq	.+74     	; 0x22e4 <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22a0:	c5 01       	movw	r24, r10
    22a2:	92 dd       	rcall	.-1244   	; 0x1dc8 <prvBytesInBuffer>
    22a4:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    22a6:	88 16       	cp	r8, r24
    22a8:	99 06       	cpc	r9, r25
    22aa:	38 f0       	brcs	.+14     	; 0x22ba <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    22b0:	bb d7       	rcall	.+3958   	; 0x3228 <xTaskNotifyStateClear>
    22b2:	b4 d5       	rcall	.+2920   	; 0x2e1c <xTaskGetCurrentTaskHandle>
    22b4:	f5 01       	movw	r30, r10
    22b6:	91 87       	std	Z+9, r25	; 0x09
    22b8:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    22be:	80 16       	cp	r8, r16
    22c0:	91 06       	cpc	r9, r17
    22c2:	b0 f0       	brcs	.+44     	; 0x22f0 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    22c4:	00 e0       	ldi	r16, 0x00	; 0
    22c6:	10 e0       	ldi	r17, 0x00	; 0
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	a9 01       	movw	r20, r18
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	cb 01       	movw	r24, r22
    22d4:	1e d6       	rcall	.+3132   	; 0x2f12 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    22d6:	f5 01       	movw	r30, r10
    22d8:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22da:	10 86       	std	Z+8, r1	; 0x08
    22dc:	c5 01       	movw	r24, r10
    22de:	74 dd       	rcall	.-1304   	; 0x1dc8 <prvBytesInBuffer>
    22e0:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <xStreamBufferReceive+0xa2>
    22e4:	c5 01       	movw	r24, r10
    22e6:	70 dd       	rcall	.-1312   	; 0x1dc8 <prvBytesInBuffer>
    22e8:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    22ea:	80 16       	cp	r8, r16
    22ec:	91 06       	cpc	r9, r17
    22ee:	b8 f5       	brcc	.+110    	; 0x235e <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    22f0:	81 14       	cp	r8, r1
    22f2:	91 04       	cpc	r9, r1
    22f4:	c1 f0       	breq	.+48     	; 0x2326 <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    22f6:	f5 01       	movw	r30, r10
    22f8:	e0 80       	ld	r14, Z
    22fa:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    22fc:	98 01       	movw	r18, r16
    22fe:	a4 01       	movw	r20, r8
    2300:	be 01       	movw	r22, r28
    2302:	6f 5f       	subi	r22, 0xFF	; 255
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	c5 01       	movw	r24, r10
    2308:	fb dd       	rcall	.-1034   	; 0x1f00 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    230e:	08 19       	sub	r16, r8
    2310:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2312:	68 16       	cp	r6, r24
    2314:	79 06       	cpc	r7, r25
    2316:	30 f4       	brcc	.+12     	; 0x2324 <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2318:	f5 01       	movw	r30, r10
    231a:	f1 82       	std	Z+1, r15	; 0x01
    231c:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    231e:	61 2c       	mov	r6, r1
    2320:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2324:	3c 01       	movw	r6, r24
    2326:	98 01       	movw	r18, r16
    2328:	a3 01       	movw	r20, r6
    232a:	b2 01       	movw	r22, r4
    232c:	c5 01       	movw	r24, r10
    232e:	e8 dd       	rcall	.-1072   	; 0x1f00 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2330:	7c 01       	movw	r14, r24
    2332:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2334:	b1 f0       	breq	.+44     	; 0x2362 <xStreamBufferReceive+0x11a>
    2336:	24 d2       	rcall	.+1096   	; 0x2780 <vTaskSuspendAll>
    2338:	f5 01       	movw	r30, r10
    233a:	82 85       	ldd	r24, Z+10	; 0x0a
    233c:	93 85       	ldd	r25, Z+11	; 0x0b
    233e:	89 2b       	or	r24, r25
    2340:	61 f0       	breq	.+24     	; 0x235a <xStreamBufferReceive+0x112>
    2342:	82 85       	ldd	r24, Z+10	; 0x0a
    2344:	93 85       	ldd	r25, Z+11	; 0x0b
    2346:	00 e0       	ldi	r16, 0x00	; 0
    2348:	10 e0       	ldi	r17, 0x00	; 0
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	ba 01       	movw	r22, r20
    2352:	69 d6       	rcall	.+3282   	; 0x3026 <xTaskGenericNotify>
    2354:	f5 01       	movw	r30, r10
    2356:	13 86       	std	Z+11, r1	; 0x0b
    2358:	12 86       	std	Z+10, r1	; 0x0a
    235a:	fb d2       	rcall	.+1526   	; 0x2952 <xTaskResumeAll>
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    235e:	e1 2c       	mov	r14, r1
    2360:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2362:	c7 01       	movw	r24, r14
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	cf 90       	pop	r12
    2378:	bf 90       	pop	r11
    237a:	af 90       	pop	r10
    237c:	9f 90       	pop	r9
    237e:	8f 90       	pop	r8
    2380:	7f 90       	pop	r7
    2382:	6f 90       	pop	r6
    2384:	5f 90       	pop	r5
    2386:	4f 90       	pop	r4
    2388:	08 95       	ret

0000238a <prvResetNextTaskUnblockTime>:
    238a:	e0 91 99 18 	lds	r30, 0x1899	; 0x801899 <pxDelayedTaskList>
    238e:	f0 91 9a 18 	lds	r31, 0x189A	; 0x80189a <pxDelayedTaskList+0x1>
    2392:	80 81       	ld	r24, Z
    2394:	81 11       	cpse	r24, r1
    2396:	0c c0       	rjmp	.+24     	; 0x23b0 <prvResetNextTaskUnblockTime+0x26>
    2398:	8f ef       	ldi	r24, 0xFF	; 255
    239a:	9f ef       	ldi	r25, 0xFF	; 255
    239c:	dc 01       	movw	r26, r24
    239e:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <xNextTaskUnblockTime>
    23a2:	90 93 67 18 	sts	0x1867, r25	; 0x801867 <xNextTaskUnblockTime+0x1>
    23a6:	a0 93 68 18 	sts	0x1868, r26	; 0x801868 <xNextTaskUnblockTime+0x2>
    23aa:	b0 93 69 18 	sts	0x1869, r27	; 0x801869 <xNextTaskUnblockTime+0x3>
    23ae:	08 95       	ret
    23b0:	e0 91 99 18 	lds	r30, 0x1899	; 0x801899 <pxDelayedTaskList>
    23b4:	f0 91 9a 18 	lds	r31, 0x189A	; 0x80189a <pxDelayedTaskList+0x1>
    23b8:	07 80       	ldd	r0, Z+7	; 0x07
    23ba:	f0 85       	ldd	r31, Z+8	; 0x08
    23bc:	e0 2d       	mov	r30, r0
    23be:	00 84       	ldd	r0, Z+8	; 0x08
    23c0:	f1 85       	ldd	r31, Z+9	; 0x09
    23c2:	e0 2d       	mov	r30, r0
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	a4 81       	ldd	r26, Z+4	; 0x04
    23ca:	b5 81       	ldd	r27, Z+5	; 0x05
    23cc:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <xNextTaskUnblockTime>
    23d0:	90 93 67 18 	sts	0x1867, r25	; 0x801867 <xNextTaskUnblockTime+0x1>
    23d4:	a0 93 68 18 	sts	0x1868, r26	; 0x801868 <xNextTaskUnblockTime+0x2>
    23d8:	b0 93 69 18 	sts	0x1869, r27	; 0x801869 <xNextTaskUnblockTime+0x3>
    23dc:	08 95       	ret

000023de <prvAddCurrentTaskToDelayedList>:
    23de:	8f 92       	push	r8
    23e0:	9f 92       	push	r9
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	cf 92       	push	r12
    23e8:	df 92       	push	r13
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	cf 93       	push	r28
    23f0:	6b 01       	movw	r12, r22
    23f2:	7c 01       	movw	r14, r24
    23f4:	c4 2f       	mov	r28, r20
    23f6:	80 90 70 18 	lds	r8, 0x1870	; 0x801870 <xTickCount>
    23fa:	90 90 71 18 	lds	r9, 0x1871	; 0x801871 <xTickCount+0x1>
    23fe:	a0 90 72 18 	lds	r10, 0x1872	; 0x801872 <xTickCount+0x2>
    2402:	b0 90 73 18 	lds	r11, 0x1873	; 0x801873 <xTickCount+0x3>
    2406:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <pxCurrentTCB>
    240a:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    240e:	02 96       	adiw	r24, 0x02	; 2
    2410:	56 d8       	rcall	.-3924   	; 0x14be <uxListRemove>
    2412:	8f ef       	ldi	r24, 0xFF	; 255
    2414:	c8 16       	cp	r12, r24
    2416:	d8 06       	cpc	r13, r24
    2418:	e8 06       	cpc	r14, r24
    241a:	f8 06       	cpc	r15, r24
    241c:	69 f4       	brne	.+26     	; 0x2438 <prvAddCurrentTaskToDelayedList+0x5a>
    241e:	cc 23       	and	r28, r28
    2420:	59 f0       	breq	.+22     	; 0x2438 <prvAddCurrentTaskToDelayedList+0x5a>
    2422:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2426:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    242a:	6e 5f       	subi	r22, 0xFE	; 254
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
    242e:	85 e7       	ldi	r24, 0x75	; 117
    2430:	98 e1       	ldi	r25, 0x18	; 24
    2432:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <prvAddCurrentTaskToDelayedList+0xd8>
    2438:	c8 0c       	add	r12, r8
    243a:	d9 1c       	adc	r13, r9
    243c:	ea 1c       	adc	r14, r10
    243e:	fb 1c       	adc	r15, r11
    2440:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2444:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2448:	c2 82       	std	Z+2, r12	; 0x02
    244a:	d3 82       	std	Z+3, r13	; 0x03
    244c:	e4 82       	std	Z+4, r14	; 0x04
    244e:	f5 82       	std	Z+5, r15	; 0x05
    2450:	c8 14       	cp	r12, r8
    2452:	d9 04       	cpc	r13, r9
    2454:	ea 04       	cpc	r14, r10
    2456:	fb 04       	cpc	r15, r11
    2458:	68 f4       	brcc	.+26     	; 0x2474 <prvAddCurrentTaskToDelayedList+0x96>
    245a:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    245e:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2462:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <pxOverflowDelayedTaskList>
    2466:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <pxOverflowDelayedTaskList+0x1>
    246a:	6e 5f       	subi	r22, 0xFE	; 254
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	0e 94 22 0a 	call	0x1444	; 0x1444 <vListInsert>
    2472:	21 c0       	rjmp	.+66     	; 0x24b6 <prvAddCurrentTaskToDelayedList+0xd8>
    2474:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2478:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    247c:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <pxDelayedTaskList>
    2480:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <pxDelayedTaskList+0x1>
    2484:	6e 5f       	subi	r22, 0xFE	; 254
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	0e 94 22 0a 	call	0x1444	; 0x1444 <vListInsert>
    248c:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <xNextTaskUnblockTime>
    2490:	90 91 67 18 	lds	r25, 0x1867	; 0x801867 <xNextTaskUnblockTime+0x1>
    2494:	a0 91 68 18 	lds	r26, 0x1868	; 0x801868 <xNextTaskUnblockTime+0x2>
    2498:	b0 91 69 18 	lds	r27, 0x1869	; 0x801869 <xNextTaskUnblockTime+0x3>
    249c:	c8 16       	cp	r12, r24
    249e:	d9 06       	cpc	r13, r25
    24a0:	ea 06       	cpc	r14, r26
    24a2:	fb 06       	cpc	r15, r27
    24a4:	40 f4       	brcc	.+16     	; 0x24b6 <prvAddCurrentTaskToDelayedList+0xd8>
    24a6:	c0 92 66 18 	sts	0x1866, r12	; 0x801866 <xNextTaskUnblockTime>
    24aa:	d0 92 67 18 	sts	0x1867, r13	; 0x801867 <xNextTaskUnblockTime+0x1>
    24ae:	e0 92 68 18 	sts	0x1868, r14	; 0x801868 <xNextTaskUnblockTime+0x2>
    24b2:	f0 92 69 18 	sts	0x1869, r15	; 0x801869 <xNextTaskUnblockTime+0x3>
    24b6:	cf 91       	pop	r28
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	08 95       	ret

000024ca <xTaskCreate>:
    24ca:	4f 92       	push	r4
    24cc:	5f 92       	push	r5
    24ce:	6f 92       	push	r6
    24d0:	7f 92       	push	r7
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	4c 01       	movw	r8, r24
    24ea:	6b 01       	movw	r12, r22
    24ec:	5a 01       	movw	r10, r20
    24ee:	29 01       	movw	r4, r18
    24f0:	ca 01       	movw	r24, r20
    24f2:	0e 94 02 09 	call	0x1204	; 0x1204 <pvPortMalloc>
    24f6:	3c 01       	movw	r6, r24
    24f8:	89 2b       	or	r24, r25
    24fa:	09 f4       	brne	.+2      	; 0x24fe <xTaskCreate+0x34>
    24fc:	f4 c0       	rjmp	.+488    	; 0x26e6 <xTaskCreate+0x21c>
    24fe:	80 e3       	ldi	r24, 0x30	; 48
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 02 09 	call	0x1204	; 0x1204 <pvPortMalloc>
    2506:	ec 01       	movw	r28, r24
    2508:	89 2b       	or	r24, r25
    250a:	99 f0       	breq	.+38     	; 0x2532 <xTaskCreate+0x68>
    250c:	7c 8e       	std	Y+28, r7	; 0x1c
    250e:	6b 8e       	std	Y+27, r6	; 0x1b
    2510:	a5 01       	movw	r20, r10
    2512:	65 ea       	ldi	r22, 0xA5	; 165
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	c3 01       	movw	r24, r6
    2518:	0e 94 b6 2b 	call	0x576c	; 0x576c <memset>
    251c:	21 e0       	ldi	r18, 0x01	; 1
    251e:	a2 1a       	sub	r10, r18
    2520:	b1 08       	sbc	r11, r1
    2522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2526:	a8 0e       	add	r10, r24
    2528:	b9 1e       	adc	r11, r25
    252a:	c1 14       	cp	r12, r1
    252c:	d1 04       	cpc	r13, r1
    252e:	29 f4       	brne	.+10     	; 0x253a <xTaskCreate+0x70>
    2530:	20 c0       	rjmp	.+64     	; 0x2572 <xTaskCreate+0xa8>
    2532:	c3 01       	movw	r24, r6
    2534:	0e 94 bb 09 	call	0x1376	; 0x1376 <vPortFree>
    2538:	d6 c0       	rjmp	.+428    	; 0x26e6 <xTaskCreate+0x21c>
    253a:	d6 01       	movw	r26, r12
    253c:	8c 91       	ld	r24, X
    253e:	8d 8f       	std	Y+29, r24	; 0x1d
    2540:	8c 91       	ld	r24, X
    2542:	88 23       	and	r24, r24
    2544:	a1 f0       	breq	.+40     	; 0x256e <xTaskCreate+0xa4>
    2546:	ae 01       	movw	r20, r28
    2548:	42 5e       	subi	r20, 0xE2	; 226
    254a:	5f 4f       	sbci	r21, 0xFF	; 255
    254c:	f6 01       	movw	r30, r12
    254e:	31 96       	adiw	r30, 0x01	; 1
    2550:	b8 e0       	ldi	r27, 0x08	; 8
    2552:	cb 0e       	add	r12, r27
    2554:	d1 1c       	adc	r13, r1
    2556:	cf 01       	movw	r24, r30
    2558:	21 91       	ld	r18, Z+
    255a:	da 01       	movw	r26, r20
    255c:	2d 93       	st	X+, r18
    255e:	ad 01       	movw	r20, r26
    2560:	dc 01       	movw	r26, r24
    2562:	8c 91       	ld	r24, X
    2564:	88 23       	and	r24, r24
    2566:	19 f0       	breq	.+6      	; 0x256e <xTaskCreate+0xa4>
    2568:	ec 15       	cp	r30, r12
    256a:	fd 05       	cpc	r31, r13
    256c:	a1 f7       	brne	.-24     	; 0x2556 <xTaskCreate+0x8c>
    256e:	1c a2       	std	Y+36, r1	; 0x24
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <xTaskCreate+0xaa>
    2572:	1d 8e       	std	Y+29, r1	; 0x1d
    2574:	04 30       	cpi	r16, 0x04	; 4
    2576:	08 f0       	brcs	.+2      	; 0x257a <xTaskCreate+0xb0>
    2578:	03 e0       	ldi	r16, 0x03	; 3
    257a:	0a 8f       	std	Y+26, r16	; 0x1a
    257c:	0f a3       	std	Y+39, r16	; 0x27
    257e:	18 a6       	std	Y+40, r1	; 0x28
    2580:	6e 01       	movw	r12, r28
    2582:	b2 e0       	ldi	r27, 0x02	; 2
    2584:	cb 0e       	add	r12, r27
    2586:	d1 1c       	adc	r13, r1
    2588:	c6 01       	movw	r24, r12
    258a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialiseItem>
    258e:	ce 01       	movw	r24, r28
    2590:	0e 96       	adiw	r24, 0x0e	; 14
    2592:	0e 94 fd 09 	call	0x13fa	; 0x13fa <vListInitialiseItem>
    2596:	db 87       	std	Y+11, r29	; 0x0b
    2598:	ca 87       	std	Y+10, r28	; 0x0a
    259a:	84 e0       	ldi	r24, 0x04	; 4
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	80 1b       	sub	r24, r16
    25a4:	91 09       	sbc	r25, r1
    25a6:	a1 09       	sbc	r26, r1
    25a8:	b1 09       	sbc	r27, r1
    25aa:	8e 87       	std	Y+14, r24	; 0x0e
    25ac:	9f 87       	std	Y+15, r25	; 0x0f
    25ae:	a8 8b       	std	Y+16, r26	; 0x10
    25b0:	b9 8b       	std	Y+17, r27	; 0x11
    25b2:	df 8b       	std	Y+23, r29	; 0x17
    25b4:	ce 8b       	std	Y+22, r28	; 0x16
    25b6:	1a a6       	std	Y+42, r1	; 0x2a
    25b8:	19 a6       	std	Y+41, r1	; 0x29
    25ba:	1b a6       	std	Y+43, r1	; 0x2b
    25bc:	1c a6       	std	Y+44, r1	; 0x2c
    25be:	1d a6       	std	Y+45, r1	; 0x2d
    25c0:	1e a6       	std	Y+46, r1	; 0x2e
    25c2:	1f a6       	std	Y+47, r1	; 0x2f
    25c4:	a2 01       	movw	r20, r4
    25c6:	b4 01       	movw	r22, r8
    25c8:	c5 01       	movw	r24, r10
    25ca:	0e 94 86 0a 	call	0x150c	; 0x150c <pxPortInitialiseStack>
    25ce:	99 83       	std	Y+1, r25	; 0x01
    25d0:	88 83       	st	Y, r24
    25d2:	e1 14       	cp	r14, r1
    25d4:	f1 04       	cpc	r15, r1
    25d6:	19 f0       	breq	.+6      	; 0x25de <xTaskCreate+0x114>
    25d8:	f7 01       	movw	r30, r14
    25da:	d1 83       	std	Z+1, r29	; 0x01
    25dc:	c0 83       	st	Z, r28
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	0f 92       	push	r0
    25e4:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <uxCurrentNumberOfTasks>
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	80 93 74 18 	sts	0x1874, r24	; 0x801874 <uxCurrentNumberOfTasks>
    25ee:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <pxCurrentTCB>
    25f2:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    25f6:	89 2b       	or	r24, r25
    25f8:	d1 f5       	brne	.+116    	; 0x266e <xTaskCreate+0x1a4>
    25fa:	d0 93 de 18 	sts	0x18DE, r29	; 0x8018de <pxCurrentTCB+0x1>
    25fe:	c0 93 dd 18 	sts	0x18DD, r28	; 0x8018dd <pxCurrentTCB>
    2602:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <uxCurrentNumberOfTasks>
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	09 f0       	breq	.+2      	; 0x260c <xTaskCreate+0x142>
    260a:	41 c0       	rjmp	.+130    	; 0x268e <xTaskCreate+0x1c4>
    260c:	81 eb       	ldi	r24, 0xB1	; 177
    260e:	98 e1       	ldi	r25, 0x18	; 24
    2610:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    2614:	8c eb       	ldi	r24, 0xBC	; 188
    2616:	98 e1       	ldi	r25, 0x18	; 24
    2618:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    261c:	87 ec       	ldi	r24, 0xC7	; 199
    261e:	98 e1       	ldi	r25, 0x18	; 24
    2620:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    2624:	82 ed       	ldi	r24, 0xD2	; 210
    2626:	98 e1       	ldi	r25, 0x18	; 24
    2628:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    262c:	86 ea       	ldi	r24, 0xA6	; 166
    262e:	98 e1       	ldi	r25, 0x18	; 24
    2630:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    2634:	8b e9       	ldi	r24, 0x9B	; 155
    2636:	98 e1       	ldi	r25, 0x18	; 24
    2638:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    263c:	8c e8       	ldi	r24, 0x8C	; 140
    263e:	98 e1       	ldi	r25, 0x18	; 24
    2640:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    2644:	81 e8       	ldi	r24, 0x81	; 129
    2646:	98 e1       	ldi	r25, 0x18	; 24
    2648:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    264c:	85 e7       	ldi	r24, 0x75	; 117
    264e:	98 e1       	ldi	r25, 0x18	; 24
    2650:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    2654:	86 ea       	ldi	r24, 0xA6	; 166
    2656:	98 e1       	ldi	r25, 0x18	; 24
    2658:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <pxDelayedTaskList+0x1>
    265c:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <pxDelayedTaskList>
    2660:	8b e9       	ldi	r24, 0x9B	; 155
    2662:	98 e1       	ldi	r25, 0x18	; 24
    2664:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <pxOverflowDelayedTaskList+0x1>
    2668:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <pxOverflowDelayedTaskList>
    266c:	10 c0       	rjmp	.+32     	; 0x268e <xTaskCreate+0x1c4>
    266e:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <xSchedulerRunning>
    2672:	81 11       	cpse	r24, r1
    2674:	0c c0       	rjmp	.+24     	; 0x268e <xTaskCreate+0x1c4>
    2676:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    267a:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    267e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2680:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2682:	89 17       	cp	r24, r25
    2684:	20 f0       	brcs	.+8      	; 0x268e <xTaskCreate+0x1c4>
    2686:	d0 93 de 18 	sts	0x18DE, r29	; 0x8018de <pxCurrentTCB+0x1>
    268a:	c0 93 dd 18 	sts	0x18DD, r28	; 0x8018dd <pxCurrentTCB>
    268e:	80 91 6a 18 	lds	r24, 0x186A	; 0x80186a <uxTaskNumber>
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	80 93 6a 18 	sts	0x186A, r24	; 0x80186a <uxTaskNumber>
    2698:	8d a3       	std	Y+37, r24	; 0x25
    269a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    269c:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    26a0:	98 17       	cp	r25, r24
    26a2:	10 f4       	brcc	.+4      	; 0x26a8 <xTaskCreate+0x1de>
    26a4:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    26a8:	fb e0       	ldi	r31, 0x0B	; 11
    26aa:	8f 9f       	mul	r24, r31
    26ac:	c0 01       	movw	r24, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	b6 01       	movw	r22, r12
    26b2:	8f 54       	subi	r24, 0x4F	; 79
    26b4:	97 4e       	sbci	r25, 0xE7	; 231
    26b6:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    26ba:	0f 90       	pop	r0
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <xSchedulerRunning>
    26c2:	88 23       	and	r24, r24
    26c4:	61 f0       	breq	.+24     	; 0x26de <xTaskCreate+0x214>
    26c6:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    26ca:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    26ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    26d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26d2:	98 17       	cp	r25, r24
    26d4:	30 f4       	brcc	.+12     	; 0x26e2 <xTaskCreate+0x218>
    26d6:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <xTaskCreate+0x21e>
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <xTaskCreate+0x21e>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <xTaskCreate+0x21e>
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	0f 91       	pop	r16
    26ee:	ff 90       	pop	r15
    26f0:	ef 90       	pop	r14
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
    26f6:	bf 90       	pop	r11
    26f8:	af 90       	pop	r10
    26fa:	9f 90       	pop	r9
    26fc:	8f 90       	pop	r8
    26fe:	7f 90       	pop	r7
    2700:	6f 90       	pop	r6
    2702:	5f 90       	pop	r5
    2704:	4f 90       	pop	r4
    2706:	08 95       	ret

00002708 <vTaskStartScheduler>:
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	0f 2e       	mov	r0, r31
    2710:	f4 e6       	ldi	r31, 0x64	; 100
    2712:	ef 2e       	mov	r14, r31
    2714:	f8 e1       	ldi	r31, 0x18	; 24
    2716:	ff 2e       	mov	r15, r31
    2718:	f0 2d       	mov	r31, r0
    271a:	00 e0       	ldi	r16, 0x00	; 0
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 ec       	ldi	r20, 0xC0	; 192
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	6c e0       	ldi	r22, 0x0C	; 12
    2726:	75 e0       	ldi	r23, 0x05	; 5
    2728:	8d ec       	ldi	r24, 0xCD	; 205
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	ce de       	rcall	.-612    	; 0x24ca <xTaskCreate>
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	19 f5       	brne	.+70     	; 0x2778 <vTaskStartScheduler+0x70>
    2732:	00 d6       	rcall	.+3072   	; 0x3334 <xTimerCreateTimerTask>
    2734:	81 30       	cpi	r24, 0x01	; 1
    2736:	01 f5       	brne	.+64     	; 0x2778 <vTaskStartScheduler+0x70>
    2738:	f8 94       	cli
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	9f ef       	ldi	r25, 0xFF	; 255
    273e:	dc 01       	movw	r26, r24
    2740:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <xNextTaskUnblockTime>
    2744:	90 93 67 18 	sts	0x1867, r25	; 0x801867 <xNextTaskUnblockTime+0x1>
    2748:	a0 93 68 18 	sts	0x1868, r26	; 0x801868 <xNextTaskUnblockTime+0x2>
    274c:	b0 93 69 18 	sts	0x1869, r27	; 0x801869 <xNextTaskUnblockTime+0x3>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <xSchedulerRunning>
    2756:	10 92 70 18 	sts	0x1870, r1	; 0x801870 <xTickCount>
    275a:	10 92 71 18 	sts	0x1871, r1	; 0x801871 <xTickCount+0x1>
    275e:	10 92 72 18 	sts	0x1872, r1	; 0x801872 <xTickCount+0x2>
    2762:	10 92 73 18 	sts	0x1873, r1	; 0x801873 <xTickCount+0x3>
    2766:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    276a:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    276e:	81 a5       	ldd	r24, Z+41	; 0x29
    2770:	0e 94 39 07 	call	0xe72	; 0xe72 <task_switch_in>
    2774:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <xPortStartScheduler>
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	08 95       	ret

00002780 <vTaskSuspendAll>:
    2780:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <uxSchedulerSuspended>
    278a:	08 95       	ret

0000278c <xTaskGetTickCount>:
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	0f 92       	push	r0
    2792:	60 91 70 18 	lds	r22, 0x1870	; 0x801870 <xTickCount>
    2796:	70 91 71 18 	lds	r23, 0x1871	; 0x801871 <xTickCount+0x1>
    279a:	80 91 72 18 	lds	r24, 0x1872	; 0x801872 <xTickCount+0x2>
    279e:	90 91 73 18 	lds	r25, 0x1873	; 0x801873 <xTickCount+0x3>
    27a2:	0f 90       	pop	r0
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	08 95       	ret

000027a8 <xTaskIncrementTick>:
    27a8:	9f 92       	push	r9
    27aa:	af 92       	push	r10
    27ac:	bf 92       	push	r11
    27ae:	cf 92       	push	r12
    27b0:	df 92       	push	r13
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    27c2:	81 11       	cpse	r24, r1
    27c4:	ad c0       	rjmp	.+346    	; 0x2920 <xTaskIncrementTick+0x178>
    27c6:	c0 90 70 18 	lds	r12, 0x1870	; 0x801870 <xTickCount>
    27ca:	d0 90 71 18 	lds	r13, 0x1871	; 0x801871 <xTickCount+0x1>
    27ce:	e0 90 72 18 	lds	r14, 0x1872	; 0x801872 <xTickCount+0x2>
    27d2:	f0 90 73 18 	lds	r15, 0x1873	; 0x801873 <xTickCount+0x3>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	c8 1a       	sub	r12, r24
    27da:	d8 0a       	sbc	r13, r24
    27dc:	e8 0a       	sbc	r14, r24
    27de:	f8 0a       	sbc	r15, r24
    27e0:	c0 92 70 18 	sts	0x1870, r12	; 0x801870 <xTickCount>
    27e4:	d0 92 71 18 	sts	0x1871, r13	; 0x801871 <xTickCount+0x1>
    27e8:	e0 92 72 18 	sts	0x1872, r14	; 0x801872 <xTickCount+0x2>
    27ec:	f0 92 73 18 	sts	0x1873, r15	; 0x801873 <xTickCount+0x3>
    27f0:	c1 14       	cp	r12, r1
    27f2:	d1 04       	cpc	r13, r1
    27f4:	e1 04       	cpc	r14, r1
    27f6:	f1 04       	cpc	r15, r1
    27f8:	b1 f4       	brne	.+44     	; 0x2826 <xTaskIncrementTick+0x7e>
    27fa:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <pxDelayedTaskList>
    27fe:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <pxDelayedTaskList+0x1>
    2802:	20 91 97 18 	lds	r18, 0x1897	; 0x801897 <pxOverflowDelayedTaskList>
    2806:	30 91 98 18 	lds	r19, 0x1898	; 0x801898 <pxOverflowDelayedTaskList+0x1>
    280a:	30 93 9a 18 	sts	0x189A, r19	; 0x80189a <pxDelayedTaskList+0x1>
    280e:	20 93 99 18 	sts	0x1899, r18	; 0x801899 <pxDelayedTaskList>
    2812:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <pxOverflowDelayedTaskList+0x1>
    2816:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <pxOverflowDelayedTaskList>
    281a:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <xNumOfOverflows>
    281e:	8f 5f       	subi	r24, 0xFF	; 255
    2820:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <xNumOfOverflows>
    2824:	b2 dd       	rcall	.-1180   	; 0x238a <prvResetNextTaskUnblockTime>
    2826:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <xNextTaskUnblockTime>
    282a:	90 91 67 18 	lds	r25, 0x1867	; 0x801867 <xNextTaskUnblockTime+0x1>
    282e:	a0 91 68 18 	lds	r26, 0x1868	; 0x801868 <xNextTaskUnblockTime+0x2>
    2832:	b0 91 69 18 	lds	r27, 0x1869	; 0x801869 <xNextTaskUnblockTime+0x3>
    2836:	c8 16       	cp	r12, r24
    2838:	d9 06       	cpc	r13, r25
    283a:	ea 06       	cpc	r14, r26
    283c:	fb 06       	cpc	r15, r27
    283e:	10 f4       	brcc	.+4      	; 0x2844 <xTaskIncrementTick+0x9c>
    2840:	b1 2c       	mov	r11, r1
    2842:	5d c0       	rjmp	.+186    	; 0x28fe <xTaskIncrementTick+0x156>
    2844:	b1 2c       	mov	r11, r1
    2846:	0f 2e       	mov	r0, r31
    2848:	fb e0       	ldi	r31, 0x0B	; 11
    284a:	af 2e       	mov	r10, r31
    284c:	f0 2d       	mov	r31, r0
    284e:	99 24       	eor	r9, r9
    2850:	93 94       	inc	r9
    2852:	e0 91 99 18 	lds	r30, 0x1899	; 0x801899 <pxDelayedTaskList>
    2856:	f0 91 9a 18 	lds	r31, 0x189A	; 0x80189a <pxDelayedTaskList+0x1>
    285a:	80 81       	ld	r24, Z
    285c:	81 11       	cpse	r24, r1
    285e:	0c c0       	rjmp	.+24     	; 0x2878 <xTaskIncrementTick+0xd0>
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	9f ef       	ldi	r25, 0xFF	; 255
    2864:	dc 01       	movw	r26, r24
    2866:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <xNextTaskUnblockTime>
    286a:	90 93 67 18 	sts	0x1867, r25	; 0x801867 <xNextTaskUnblockTime+0x1>
    286e:	a0 93 68 18 	sts	0x1868, r26	; 0x801868 <xNextTaskUnblockTime+0x2>
    2872:	b0 93 69 18 	sts	0x1869, r27	; 0x801869 <xNextTaskUnblockTime+0x3>
    2876:	43 c0       	rjmp	.+134    	; 0x28fe <xTaskIncrementTick+0x156>
    2878:	e0 91 99 18 	lds	r30, 0x1899	; 0x801899 <pxDelayedTaskList>
    287c:	f0 91 9a 18 	lds	r31, 0x189A	; 0x80189a <pxDelayedTaskList+0x1>
    2880:	07 80       	ldd	r0, Z+7	; 0x07
    2882:	f0 85       	ldd	r31, Z+8	; 0x08
    2884:	e0 2d       	mov	r30, r0
    2886:	c0 85       	ldd	r28, Z+8	; 0x08
    2888:	d1 85       	ldd	r29, Z+9	; 0x09
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	9b 81       	ldd	r25, Y+3	; 0x03
    288e:	ac 81       	ldd	r26, Y+4	; 0x04
    2890:	bd 81       	ldd	r27, Y+5	; 0x05
    2892:	c8 16       	cp	r12, r24
    2894:	d9 06       	cpc	r13, r25
    2896:	ea 06       	cpc	r14, r26
    2898:	fb 06       	cpc	r15, r27
    289a:	48 f4       	brcc	.+18     	; 0x28ae <xTaskIncrementTick+0x106>
    289c:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <xNextTaskUnblockTime>
    28a0:	90 93 67 18 	sts	0x1867, r25	; 0x801867 <xNextTaskUnblockTime+0x1>
    28a4:	a0 93 68 18 	sts	0x1868, r26	; 0x801868 <xNextTaskUnblockTime+0x2>
    28a8:	b0 93 69 18 	sts	0x1869, r27	; 0x801869 <xNextTaskUnblockTime+0x3>
    28ac:	28 c0       	rjmp	.+80     	; 0x28fe <xTaskIncrementTick+0x156>
    28ae:	8e 01       	movw	r16, r28
    28b0:	0e 5f       	subi	r16, 0xFE	; 254
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
    28b4:	c8 01       	movw	r24, r16
    28b6:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    28ba:	88 8d       	ldd	r24, Y+24	; 0x18
    28bc:	99 8d       	ldd	r25, Y+25	; 0x19
    28be:	89 2b       	or	r24, r25
    28c0:	21 f0       	breq	.+8      	; 0x28ca <xTaskIncrementTick+0x122>
    28c2:	ce 01       	movw	r24, r28
    28c4:	0e 96       	adiw	r24, 0x0e	; 14
    28c6:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    28ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28cc:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    28d0:	98 17       	cp	r25, r24
    28d2:	10 f4       	brcc	.+4      	; 0x28d8 <xTaskIncrementTick+0x130>
    28d4:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    28d8:	a8 9e       	mul	r10, r24
    28da:	c0 01       	movw	r24, r0
    28dc:	11 24       	eor	r1, r1
    28de:	b8 01       	movw	r22, r16
    28e0:	8f 54       	subi	r24, 0x4F	; 79
    28e2:	97 4e       	sbci	r25, 0xE7	; 231
    28e4:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    28e8:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    28ec:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    28f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    28f4:	98 17       	cp	r25, r24
    28f6:	08 f4       	brcc	.+2      	; 0x28fa <xTaskIncrementTick+0x152>
    28f8:	ac cf       	rjmp	.-168    	; 0x2852 <xTaskIncrementTick+0xaa>
    28fa:	b9 2c       	mov	r11, r9
    28fc:	aa cf       	rjmp	.-172    	; 0x2852 <xTaskIncrementTick+0xaa>
    28fe:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2902:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2906:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2908:	8b e0       	ldi	r24, 0x0B	; 11
    290a:	e8 9f       	mul	r30, r24
    290c:	f0 01       	movw	r30, r0
    290e:	11 24       	eor	r1, r1
    2910:	ef 54       	subi	r30, 0x4F	; 79
    2912:	f7 4e       	sbci	r31, 0xE7	; 231
    2914:	80 81       	ld	r24, Z
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	48 f0       	brcs	.+18     	; 0x292c <xTaskIncrementTick+0x184>
    291a:	bb 24       	eor	r11, r11
    291c:	b3 94       	inc	r11
    291e:	06 c0       	rjmp	.+12     	; 0x292c <xTaskIncrementTick+0x184>
    2920:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <uxPendedTicks>
    2924:	8f 5f       	subi	r24, 0xFF	; 255
    2926:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <uxPendedTicks>
    292a:	b1 2c       	mov	r11, r1
    292c:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <xYieldPending>
    2930:	88 23       	and	r24, r24
    2932:	11 f0       	breq	.+4      	; 0x2938 <xTaskIncrementTick+0x190>
    2934:	bb 24       	eor	r11, r11
    2936:	b3 94       	inc	r11
    2938:	8b 2d       	mov	r24, r11
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	bf 90       	pop	r11
    294c:	af 90       	pop	r10
    294e:	9f 90       	pop	r9
    2950:	08 95       	ret

00002952 <xTaskResumeAll>:
    2952:	cf 92       	push	r12
    2954:	df 92       	push	r13
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	0f 92       	push	r0
    2968:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    296c:	81 50       	subi	r24, 0x01	; 1
    296e:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <uxSchedulerSuspended>
    2972:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    2976:	81 11       	cpse	r24, r1
    2978:	5a c0       	rjmp	.+180    	; 0x2a2e <xTaskResumeAll+0xdc>
    297a:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <uxCurrentNumberOfTasks>
    297e:	81 11       	cpse	r24, r1
    2980:	2c c0       	rjmp	.+88     	; 0x29da <xTaskResumeAll+0x88>
    2982:	58 c0       	rjmp	.+176    	; 0x2a34 <xTaskResumeAll+0xe2>
    2984:	d7 01       	movw	r26, r14
    2986:	17 96       	adiw	r26, 0x07	; 7
    2988:	ed 91       	ld	r30, X+
    298a:	fc 91       	ld	r31, X
    298c:	18 97       	sbiw	r26, 0x08	; 8
    298e:	c0 85       	ldd	r28, Z+8	; 0x08
    2990:	d1 85       	ldd	r29, Z+9	; 0x09
    2992:	ce 01       	movw	r24, r28
    2994:	0e 96       	adiw	r24, 0x0e	; 14
    2996:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    299a:	8e 01       	movw	r16, r28
    299c:	0e 5f       	subi	r16, 0xFE	; 254
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	c8 01       	movw	r24, r16
    29a2:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    29a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29a8:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    29ac:	98 17       	cp	r25, r24
    29ae:	10 f4       	brcc	.+4      	; 0x29b4 <xTaskResumeAll+0x62>
    29b0:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    29b4:	d8 9e       	mul	r13, r24
    29b6:	c0 01       	movw	r24, r0
    29b8:	11 24       	eor	r1, r1
    29ba:	b8 01       	movw	r22, r16
    29bc:	8f 54       	subi	r24, 0x4F	; 79
    29be:	97 4e       	sbci	r25, 0xE7	; 231
    29c0:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    29c4:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    29c8:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    29cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    29d0:	98 17       	cp	r25, r24
    29d2:	88 f0       	brcs	.+34     	; 0x29f6 <xTaskResumeAll+0xa4>
    29d4:	c0 92 6c 18 	sts	0x186C, r12	; 0x80186c <xYieldPending>
    29d8:	0e c0       	rjmp	.+28     	; 0x29f6 <xTaskResumeAll+0xa4>
    29da:	c0 e0       	ldi	r28, 0x00	; 0
    29dc:	d0 e0       	ldi	r29, 0x00	; 0
    29de:	0f 2e       	mov	r0, r31
    29e0:	fc e8       	ldi	r31, 0x8C	; 140
    29e2:	ef 2e       	mov	r14, r31
    29e4:	f8 e1       	ldi	r31, 0x18	; 24
    29e6:	ff 2e       	mov	r15, r31
    29e8:	f0 2d       	mov	r31, r0
    29ea:	0f 2e       	mov	r0, r31
    29ec:	fb e0       	ldi	r31, 0x0B	; 11
    29ee:	df 2e       	mov	r13, r31
    29f0:	f0 2d       	mov	r31, r0
    29f2:	cc 24       	eor	r12, r12
    29f4:	c3 94       	inc	r12
    29f6:	f7 01       	movw	r30, r14
    29f8:	80 81       	ld	r24, Z
    29fa:	81 11       	cpse	r24, r1
    29fc:	c3 cf       	rjmp	.-122    	; 0x2984 <xTaskResumeAll+0x32>
    29fe:	cd 2b       	or	r28, r29
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <xTaskResumeAll+0xb2>
    2a02:	c3 dc       	rcall	.-1658   	; 0x238a <prvResetNextTaskUnblockTime>
    2a04:	c0 91 6d 18 	lds	r28, 0x186D	; 0x80186d <uxPendedTicks>
    2a08:	cc 23       	and	r28, r28
    2a0a:	49 f0       	breq	.+18     	; 0x2a1e <xTaskResumeAll+0xcc>
    2a0c:	d1 e0       	ldi	r29, 0x01	; 1
    2a0e:	cc de       	rcall	.-616    	; 0x27a8 <xTaskIncrementTick>
    2a10:	81 11       	cpse	r24, r1
    2a12:	d0 93 6c 18 	sts	0x186C, r29	; 0x80186c <xYieldPending>
    2a16:	c1 50       	subi	r28, 0x01	; 1
    2a18:	d1 f7       	brne	.-12     	; 0x2a0e <xTaskResumeAll+0xbc>
    2a1a:	10 92 6d 18 	sts	0x186D, r1	; 0x80186d <uxPendedTicks>
    2a1e:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <xYieldPending>
    2a22:	88 23       	and	r24, r24
    2a24:	31 f0       	breq	.+12     	; 0x2a32 <xTaskResumeAll+0xe0>
    2a26:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	03 c0       	rjmp	.+6      	; 0x2a34 <xTaskResumeAll+0xe2>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	01 c0       	rjmp	.+2      	; 0x2a34 <xTaskResumeAll+0xe2>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	cf 90       	pop	r12
    2a48:	08 95       	ret

00002a4a <vTaskDelay>:
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	6b 01       	movw	r12, r22
    2a54:	7c 01       	movw	r14, r24
    2a56:	67 2b       	or	r22, r23
    2a58:	68 2b       	or	r22, r24
    2a5a:	69 2b       	or	r22, r25
    2a5c:	41 f0       	breq	.+16     	; 0x2a6e <vTaskDelay+0x24>
    2a5e:	90 de       	rcall	.-736    	; 0x2780 <vTaskSuspendAll>
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	c7 01       	movw	r24, r14
    2a64:	b6 01       	movw	r22, r12
    2a66:	bb dc       	rcall	.-1674   	; 0x23de <prvAddCurrentTaskToDelayedList>
    2a68:	74 df       	rcall	.-280    	; 0x2952 <xTaskResumeAll>
    2a6a:	81 11       	cpse	r24, r1
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <vTaskDelay+0x28>
    2a6e:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
    2a72:	ff 90       	pop	r15
    2a74:	ef 90       	pop	r14
    2a76:	df 90       	pop	r13
    2a78:	cf 90       	pop	r12
    2a7a:	08 95       	ret

00002a7c <vTaskSwitchContext>:
    2a7c:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    2a80:	88 23       	and	r24, r24
    2a82:	21 f0       	breq	.+8      	; 0x2a8c <vTaskSwitchContext+0x10>
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <xYieldPending>
    2a8a:	08 95       	ret
    2a8c:	10 92 6c 18 	sts	0x186C, r1	; 0x80186c <xYieldPending>
    2a90:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2a94:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2a98:	81 a5       	ldd	r24, Z+41	; 0x29
    2a9a:	0e 94 43 07 	call	0xe86	; 0xe86 <task_switch_out>
    2a9e:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2aa2:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2aa6:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2aaa:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2aae:	2d 91       	ld	r18, X+
    2ab0:	3c 91       	ld	r19, X
    2ab2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2ab4:	94 8d       	ldd	r25, Z+28	; 0x1c
    2ab6:	82 17       	cp	r24, r18
    2ab8:	93 07       	cpc	r25, r19
    2aba:	58 f0       	brcs	.+22     	; 0x2ad2 <vTaskSwitchContext+0x56>
    2abc:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2ac0:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2ac4:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2ac8:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2acc:	63 5e       	subi	r22, 0xE3	; 227
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	53 d5       	rcall	.+2726   	; 0x3578 <vApplicationStackOverflowHook>
    2ad2:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <uxTopReadyPriority>
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	9b e0       	ldi	r25, 0x0B	; 11
    2adc:	89 9f       	mul	r24, r25
    2ade:	f0 01       	movw	r30, r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	ef 54       	subi	r30, 0x4F	; 79
    2ae4:	f7 4e       	sbci	r31, 0xE7	; 231
    2ae6:	90 81       	ld	r25, Z
    2ae8:	91 11       	cpse	r25, r1
    2aea:	0e c0       	rjmp	.+28     	; 0x2b08 <vTaskSwitchContext+0x8c>
    2aec:	4b e0       	ldi	r20, 0x0B	; 11
    2aee:	81 50       	subi	r24, 0x01	; 1
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	42 9f       	mul	r20, r18
    2af6:	f0 01       	movw	r30, r0
    2af8:	43 9f       	mul	r20, r19
    2afa:	f0 0d       	add	r31, r0
    2afc:	11 24       	eor	r1, r1
    2afe:	ef 54       	subi	r30, 0x4F	; 79
    2b00:	f7 4e       	sbci	r31, 0xE7	; 231
    2b02:	90 81       	ld	r25, Z
    2b04:	99 23       	and	r25, r25
    2b06:	99 f3       	breq	.-26     	; 0x2aee <vTaskSwitchContext+0x72>
    2b08:	9b e0       	ldi	r25, 0x0B	; 11
    2b0a:	92 9f       	mul	r25, r18
    2b0c:	a0 01       	movw	r20, r0
    2b0e:	93 9f       	mul	r25, r19
    2b10:	50 0d       	add	r21, r0
    2b12:	11 24       	eor	r1, r1
    2b14:	da 01       	movw	r26, r20
    2b16:	af 54       	subi	r26, 0x4F	; 79
    2b18:	b7 4e       	sbci	r27, 0xE7	; 231
    2b1a:	11 96       	adiw	r26, 0x01	; 1
    2b1c:	ed 91       	ld	r30, X+
    2b1e:	fc 91       	ld	r31, X
    2b20:	12 97       	sbiw	r26, 0x02	; 2
    2b22:	04 80       	ldd	r0, Z+4	; 0x04
    2b24:	f5 81       	ldd	r31, Z+5	; 0x05
    2b26:	e0 2d       	mov	r30, r0
    2b28:	12 96       	adiw	r26, 0x02	; 2
    2b2a:	fc 93       	st	X, r31
    2b2c:	ee 93       	st	-X, r30
    2b2e:	11 97       	sbiw	r26, 0x01	; 1
    2b30:	4c 54       	subi	r20, 0x4C	; 76
    2b32:	57 4e       	sbci	r21, 0xE7	; 231
    2b34:	e4 17       	cp	r30, r20
    2b36:	f5 07       	cpc	r31, r21
    2b38:	29 f4       	brne	.+10     	; 0x2b44 <vTaskSwitchContext+0xc8>
    2b3a:	44 81       	ldd	r20, Z+4	; 0x04
    2b3c:	55 81       	ldd	r21, Z+5	; 0x05
    2b3e:	fd 01       	movw	r30, r26
    2b40:	52 83       	std	Z+2, r21	; 0x02
    2b42:	41 83       	std	Z+1, r20	; 0x01
    2b44:	9b e0       	ldi	r25, 0x0B	; 11
    2b46:	92 9f       	mul	r25, r18
    2b48:	f0 01       	movw	r30, r0
    2b4a:	93 9f       	mul	r25, r19
    2b4c:	f0 0d       	add	r31, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	ef 54       	subi	r30, 0x4F	; 79
    2b52:	f7 4e       	sbci	r31, 0xE7	; 231
    2b54:	01 80       	ldd	r0, Z+1	; 0x01
    2b56:	f2 81       	ldd	r31, Z+2	; 0x02
    2b58:	e0 2d       	mov	r30, r0
    2b5a:	20 85       	ldd	r18, Z+8	; 0x08
    2b5c:	31 85       	ldd	r19, Z+9	; 0x09
    2b5e:	30 93 de 18 	sts	0x18DE, r19	; 0x8018de <pxCurrentTCB+0x1>
    2b62:	20 93 dd 18 	sts	0x18DD, r18	; 0x8018dd <pxCurrentTCB>
    2b66:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    2b6a:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2b6e:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2b72:	81 a5       	ldd	r24, Z+41	; 0x29
    2b74:	0c 94 39 07 	jmp	0xe72	; 0xe72 <task_switch_in>
    2b78:	08 95       	ret

00002b7a <vTaskPlaceOnEventList>:
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	6a 01       	movw	r12, r20
    2b84:	7b 01       	movw	r14, r22
    2b86:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2b8a:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2b8e:	62 5f       	subi	r22, 0xF2	; 242
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	0e 94 22 0a 	call	0x1444	; 0x1444 <vListInsert>
    2b96:	41 e0       	ldi	r20, 0x01	; 1
    2b98:	c7 01       	movw	r24, r14
    2b9a:	b6 01       	movw	r22, r12
    2b9c:	20 dc       	rcall	.-1984   	; 0x23de <prvAddCurrentTaskToDelayedList>
    2b9e:	ff 90       	pop	r15
    2ba0:	ef 90       	pop	r14
    2ba2:	df 90       	pop	r13
    2ba4:	cf 90       	pop	r12
    2ba6:	08 95       	ret

00002ba8 <vTaskPlaceOnUnorderedEventList>:
    2ba8:	cf 92       	push	r12
    2baa:	df 92       	push	r13
    2bac:	ef 92       	push	r14
    2bae:	ff 92       	push	r15
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	68 01       	movw	r12, r16
    2bb6:	79 01       	movw	r14, r18
    2bb8:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2bbc:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2bc0:	70 68       	ori	r23, 0x80	; 128
    2bc2:	46 87       	std	Z+14, r20	; 0x0e
    2bc4:	57 87       	std	Z+15, r21	; 0x0f
    2bc6:	60 8b       	std	Z+16, r22	; 0x10
    2bc8:	71 8b       	std	Z+17, r23	; 0x11
    2bca:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2bce:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2bd2:	62 5f       	subi	r22, 0xF2	; 242
    2bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd6:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	c7 01       	movw	r24, r14
    2bde:	b6 01       	movw	r22, r12
    2be0:	fe db       	rcall	.-2052   	; 0x23de <prvAddCurrentTaskToDelayedList>
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	ff 90       	pop	r15
    2be8:	ef 90       	pop	r14
    2bea:	df 90       	pop	r13
    2bec:	cf 90       	pop	r12
    2bee:	08 95       	ret

00002bf0 <vTaskPlaceOnEventListRestricted>:
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	cf 93       	push	r28
    2bfa:	6a 01       	movw	r12, r20
    2bfc:	7b 01       	movw	r14, r22
    2bfe:	c2 2f       	mov	r28, r18
    2c00:	60 91 dd 18 	lds	r22, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2c04:	70 91 de 18 	lds	r23, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2c08:	62 5f       	subi	r22, 0xF2	; 242
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0c:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2c10:	cc 23       	and	r28, r28
    2c12:	21 f0       	breq	.+8      	; 0x2c1c <vTaskPlaceOnEventListRestricted+0x2c>
    2c14:	cc 24       	eor	r12, r12
    2c16:	ca 94       	dec	r12
    2c18:	dc 2c       	mov	r13, r12
    2c1a:	76 01       	movw	r14, r12
    2c1c:	4c 2f       	mov	r20, r28
    2c1e:	c7 01       	movw	r24, r14
    2c20:	b6 01       	movw	r22, r12
    2c22:	dd db       	rcall	.-2118   	; 0x23de <prvAddCurrentTaskToDelayedList>
    2c24:	cf 91       	pop	r28
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	08 95       	ret

00002c30 <xTaskRemoveFromEventList>:
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	dc 01       	movw	r26, r24
    2c3a:	17 96       	adiw	r26, 0x07	; 7
    2c3c:	ed 91       	ld	r30, X+
    2c3e:	fc 91       	ld	r31, X
    2c40:	18 97       	sbiw	r26, 0x08	; 8
    2c42:	c0 85       	ldd	r28, Z+8	; 0x08
    2c44:	d1 85       	ldd	r29, Z+9	; 0x09
    2c46:	8e 01       	movw	r16, r28
    2c48:	02 5f       	subi	r16, 0xF2	; 242
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    2c52:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    2c56:	81 11       	cpse	r24, r1
    2c58:	16 c0       	rjmp	.+44     	; 0x2c86 <xTaskRemoveFromEventList+0x56>
    2c5a:	0c 50       	subi	r16, 0x0C	; 12
    2c5c:	11 09       	sbc	r17, r1
    2c5e:	c8 01       	movw	r24, r16
    2c60:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    2c64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c66:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    2c6a:	98 17       	cp	r25, r24
    2c6c:	10 f4       	brcc	.+4      	; 0x2c72 <xTaskRemoveFromEventList+0x42>
    2c6e:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    2c72:	bb e0       	ldi	r27, 0x0B	; 11
    2c74:	8b 9f       	mul	r24, r27
    2c76:	c0 01       	movw	r24, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	b8 01       	movw	r22, r16
    2c7c:	8f 54       	subi	r24, 0x4F	; 79
    2c7e:	97 4e       	sbci	r25, 0xE7	; 231
    2c80:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2c84:	05 c0       	rjmp	.+10     	; 0x2c90 <xTaskRemoveFromEventList+0x60>
    2c86:	b8 01       	movw	r22, r16
    2c88:	8c e8       	ldi	r24, 0x8C	; 140
    2c8a:	98 e1       	ldi	r25, 0x18	; 24
    2c8c:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2c90:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2c94:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2c98:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c9c:	89 17       	cp	r24, r25
    2c9e:	20 f4       	brcc	.+8      	; 0x2ca8 <xTaskRemoveFromEventList+0x78>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <xYieldPending>
    2ca6:	01 c0       	rjmp	.+2      	; 0x2caa <xTaskRemoveFromEventList+0x7a>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	08 95       	ret

00002cb4 <vTaskRemoveFromUnorderedEventList>:
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	70 68       	ori	r23, 0x80	; 128
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	40 83       	st	Z, r20
    2cc2:	51 83       	std	Z+1, r21	; 0x01
    2cc4:	62 83       	std	Z+2, r22	; 0x02
    2cc6:	73 83       	std	Z+3, r23	; 0x03
    2cc8:	c0 85       	ldd	r28, Z+8	; 0x08
    2cca:	d1 85       	ldd	r29, Z+9	; 0x09
    2ccc:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    2cd0:	8e 01       	movw	r16, r28
    2cd2:	0e 5f       	subi	r16, 0xFE	; 254
    2cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    2cdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cde:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    2ce2:	98 17       	cp	r25, r24
    2ce4:	10 f4       	brcc	.+4      	; 0x2cea <vTaskRemoveFromUnorderedEventList+0x36>
    2ce6:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    2cea:	fb e0       	ldi	r31, 0x0B	; 11
    2cec:	8f 9f       	mul	r24, r31
    2cee:	c0 01       	movw	r24, r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	b8 01       	movw	r22, r16
    2cf4:	8f 54       	subi	r24, 0x4F	; 79
    2cf6:	97 4e       	sbci	r25, 0xE7	; 231
    2cf8:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2cfc:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2d00:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2d04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d06:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d08:	89 17       	cp	r24, r25
    2d0a:	18 f4       	brcc	.+6      	; 0x2d12 <vTaskRemoveFromUnorderedEventList+0x5e>
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <xYieldPending>
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	08 95       	ret

00002d1c <vTaskSetTimeOutState>:
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	0f 92       	push	r0
    2d22:	20 91 6b 18 	lds	r18, 0x186B	; 0x80186b <xNumOfOverflows>
    2d26:	fc 01       	movw	r30, r24
    2d28:	20 83       	st	Z, r18
    2d2a:	40 91 70 18 	lds	r20, 0x1870	; 0x801870 <xTickCount>
    2d2e:	50 91 71 18 	lds	r21, 0x1871	; 0x801871 <xTickCount+0x1>
    2d32:	60 91 72 18 	lds	r22, 0x1872	; 0x801872 <xTickCount+0x2>
    2d36:	70 91 73 18 	lds	r23, 0x1873	; 0x801873 <xTickCount+0x3>
    2d3a:	41 83       	std	Z+1, r20	; 0x01
    2d3c:	52 83       	std	Z+2, r21	; 0x02
    2d3e:	63 83       	std	Z+3, r22	; 0x03
    2d40:	74 83       	std	Z+4, r23	; 0x04
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	08 95       	ret

00002d48 <vTaskInternalSetTimeOutState>:
    2d48:	20 91 6b 18 	lds	r18, 0x186B	; 0x80186b <xNumOfOverflows>
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	20 83       	st	Z, r18
    2d50:	40 91 70 18 	lds	r20, 0x1870	; 0x801870 <xTickCount>
    2d54:	50 91 71 18 	lds	r21, 0x1871	; 0x801871 <xTickCount+0x1>
    2d58:	60 91 72 18 	lds	r22, 0x1872	; 0x801872 <xTickCount+0x2>
    2d5c:	70 91 73 18 	lds	r23, 0x1873	; 0x801873 <xTickCount+0x3>
    2d60:	41 83       	std	Z+1, r20	; 0x01
    2d62:	52 83       	std	Z+2, r21	; 0x02
    2d64:	63 83       	std	Z+3, r22	; 0x03
    2d66:	74 83       	std	Z+4, r23	; 0x04
    2d68:	08 95       	ret

00002d6a <xTaskCheckForTimeOut>:
    2d6a:	cf 92       	push	r12
    2d6c:	df 92       	push	r13
    2d6e:	ef 92       	push	r14
    2d70:	ff 92       	push	r15
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	fb 01       	movw	r30, r22
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	0f 92       	push	r0
    2d82:	40 91 70 18 	lds	r20, 0x1870	; 0x801870 <xTickCount>
    2d86:	50 91 71 18 	lds	r21, 0x1871	; 0x801871 <xTickCount+0x1>
    2d8a:	60 91 72 18 	lds	r22, 0x1872	; 0x801872 <xTickCount+0x2>
    2d8e:	70 91 73 18 	lds	r23, 0x1873	; 0x801873 <xTickCount+0x3>
    2d92:	00 81       	ld	r16, Z
    2d94:	11 81       	ldd	r17, Z+1	; 0x01
    2d96:	22 81       	ldd	r18, Z+2	; 0x02
    2d98:	33 81       	ldd	r19, Z+3	; 0x03
    2d9a:	0f 3f       	cpi	r16, 0xFF	; 255
    2d9c:	af ef       	ldi	r26, 0xFF	; 255
    2d9e:	1a 07       	cpc	r17, r26
    2da0:	2a 07       	cpc	r18, r26
    2da2:	3a 07       	cpc	r19, r26
    2da4:	49 f1       	breq	.+82     	; 0x2df8 <xTaskCheckForTimeOut+0x8e>
    2da6:	ec 01       	movw	r28, r24
    2da8:	c9 80       	ldd	r12, Y+1	; 0x01
    2daa:	da 80       	ldd	r13, Y+2	; 0x02
    2dac:	eb 80       	ldd	r14, Y+3	; 0x03
    2dae:	fc 80       	ldd	r15, Y+4	; 0x04
    2db0:	a0 91 6b 18 	lds	r26, 0x186B	; 0x80186b <xNumOfOverflows>
    2db4:	b8 81       	ld	r27, Y
    2db6:	ba 17       	cp	r27, r26
    2db8:	29 f0       	breq	.+10     	; 0x2dc4 <xTaskCheckForTimeOut+0x5a>
    2dba:	4c 15       	cp	r20, r12
    2dbc:	5d 05       	cpc	r21, r13
    2dbe:	6e 05       	cpc	r22, r14
    2dc0:	7f 05       	cpc	r23, r15
    2dc2:	e0 f4       	brcc	.+56     	; 0x2dfc <xTaskCheckForTimeOut+0x92>
    2dc4:	4c 19       	sub	r20, r12
    2dc6:	5d 09       	sbc	r21, r13
    2dc8:	6e 09       	sbc	r22, r14
    2dca:	7f 09       	sbc	r23, r15
    2dcc:	40 17       	cp	r20, r16
    2dce:	51 07       	cpc	r21, r17
    2dd0:	62 07       	cpc	r22, r18
    2dd2:	73 07       	cpc	r23, r19
    2dd4:	58 f4       	brcc	.+22     	; 0x2dec <xTaskCheckForTimeOut+0x82>
    2dd6:	04 1b       	sub	r16, r20
    2dd8:	15 0b       	sbc	r17, r21
    2dda:	26 0b       	sbc	r18, r22
    2ddc:	37 0b       	sbc	r19, r23
    2dde:	00 83       	st	Z, r16
    2de0:	11 83       	std	Z+1, r17	; 0x01
    2de2:	22 83       	std	Z+2, r18	; 0x02
    2de4:	33 83       	std	Z+3, r19	; 0x03
    2de6:	b0 df       	rcall	.-160    	; 0x2d48 <vTaskInternalSetTimeOutState>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	09 c0       	rjmp	.+18     	; 0x2dfe <xTaskCheckForTimeOut+0x94>
    2dec:	10 82       	st	Z, r1
    2dee:	11 82       	std	Z+1, r1	; 0x01
    2df0:	12 82       	std	Z+2, r1	; 0x02
    2df2:	13 82       	std	Z+3, r1	; 0x03
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	03 c0       	rjmp	.+6      	; 0x2dfe <xTaskCheckForTimeOut+0x94>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	01 c0       	rjmp	.+2      	; 0x2dfe <xTaskCheckForTimeOut+0x94>
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	0f 90       	pop	r0
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	df 90       	pop	r13
    2e10:	cf 90       	pop	r12
    2e12:	08 95       	ret

00002e14 <vTaskMissedYield>:
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <xYieldPending>
    2e1a:	08 95       	ret

00002e1c <xTaskGetCurrentTaskHandle>:
    2e1c:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2e20:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2e24:	08 95       	ret

00002e26 <xTaskGetSchedulerState>:
    2e26:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <xSchedulerRunning>
    2e2a:	88 23       	and	r24, r24
    2e2c:	31 f0       	breq	.+12     	; 0x2e3a <xTaskGetSchedulerState+0x14>
    2e2e:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    2e32:	88 23       	and	r24, r24
    2e34:	21 f0       	breq	.+8      	; 0x2e3e <xTaskGetSchedulerState+0x18>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	08 95       	ret
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	08 95       	ret
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	08 95       	ret

00002e42 <xTaskPriorityDisinherit>:
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	89 2b       	or	r24, r25
    2e4e:	79 f1       	breq	.+94     	; 0x2eae <xTaskPriorityDisinherit+0x6c>
    2e50:	80 a5       	ldd	r24, Z+40	; 0x28
    2e52:	81 50       	subi	r24, 0x01	; 1
    2e54:	80 a7       	std	Z+40, r24	; 0x28
    2e56:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e58:	97 a1       	ldd	r25, Z+39	; 0x27
    2e5a:	29 17       	cp	r18, r25
    2e5c:	51 f1       	breq	.+84     	; 0x2eb2 <xTaskPriorityDisinherit+0x70>
    2e5e:	81 11       	cpse	r24, r1
    2e60:	2a c0       	rjmp	.+84     	; 0x2eb6 <xTaskPriorityDisinherit+0x74>
    2e62:	ef 01       	movw	r28, r30
    2e64:	8f 01       	movw	r16, r30
    2e66:	0e 5f       	subi	r16, 0xFE	; 254
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    2e70:	8f a1       	ldd	r24, Y+39	; 0x27
    2e72:	8a 8f       	std	Y+26, r24	; 0x1a
    2e74:	44 e0       	ldi	r20, 0x04	; 4
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	48 1b       	sub	r20, r24
    2e7e:	51 09       	sbc	r21, r1
    2e80:	61 09       	sbc	r22, r1
    2e82:	71 09       	sbc	r23, r1
    2e84:	4e 87       	std	Y+14, r20	; 0x0e
    2e86:	5f 87       	std	Y+15, r21	; 0x0f
    2e88:	68 8b       	std	Y+16, r22	; 0x10
    2e8a:	79 8b       	std	Y+17, r23	; 0x11
    2e8c:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    2e90:	98 17       	cp	r25, r24
    2e92:	10 f4       	brcc	.+4      	; 0x2e98 <xTaskPriorityDisinherit+0x56>
    2e94:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    2e98:	2b e0       	ldi	r18, 0x0B	; 11
    2e9a:	82 9f       	mul	r24, r18
    2e9c:	c0 01       	movw	r24, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	b8 01       	movw	r22, r16
    2ea2:	8f 54       	subi	r24, 0x4F	; 79
    2ea4:	97 4e       	sbci	r25, 0xE7	; 231
    2ea6:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <xTaskPriorityDisinherit+0x76>
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <xTaskPriorityDisinherit+0x76>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	01 c0       	rjmp	.+2      	; 0x2eb8 <xTaskPriorityDisinherit+0x76>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	08 95       	ret

00002ec2 <uxTaskResetEventItemValue>:
    2ec2:	cf 92       	push	r12
    2ec4:	df 92       	push	r13
    2ec6:	ef 92       	push	r14
    2ec8:	ff 92       	push	r15
    2eca:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2ece:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2ed2:	66 85       	ldd	r22, Z+14	; 0x0e
    2ed4:	77 85       	ldd	r23, Z+15	; 0x0f
    2ed6:	80 89       	ldd	r24, Z+16	; 0x10
    2ed8:	91 89       	ldd	r25, Z+17	; 0x11
    2eda:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2ede:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2ee2:	a0 91 dd 18 	lds	r26, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2ee6:	b0 91 de 18 	lds	r27, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2eea:	5a 96       	adiw	r26, 0x1a	; 26
    2eec:	2c 91       	ld	r18, X
    2eee:	c1 2c       	mov	r12, r1
    2ef0:	d1 2c       	mov	r13, r1
    2ef2:	76 01       	movw	r14, r12
    2ef4:	68 94       	set
    2ef6:	c2 f8       	bld	r12, 2
    2ef8:	c2 1a       	sub	r12, r18
    2efa:	d1 08       	sbc	r13, r1
    2efc:	e1 08       	sbc	r14, r1
    2efe:	f1 08       	sbc	r15, r1
    2f00:	c6 86       	std	Z+14, r12	; 0x0e
    2f02:	d7 86       	std	Z+15, r13	; 0x0f
    2f04:	e0 8a       	std	Z+16, r14	; 0x10
    2f06:	f1 8a       	std	Z+17, r15	; 0x11
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	df 90       	pop	r13
    2f0e:	cf 90       	pop	r12
    2f10:	08 95       	ret

00002f12 <xTaskNotifyWait>:
    2f12:	4f 92       	push	r4
    2f14:	5f 92       	push	r5
    2f16:	6f 92       	push	r6
    2f18:	7f 92       	push	r7
    2f1a:	8f 92       	push	r8
    2f1c:	9f 92       	push	r9
    2f1e:	af 92       	push	r10
    2f20:	bf 92       	push	r11
    2f22:	cf 92       	push	r12
    2f24:	df 92       	push	r13
    2f26:	ef 92       	push	r14
    2f28:	ff 92       	push	r15
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	49 01       	movw	r8, r18
    2f30:	5a 01       	movw	r10, r20
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	0f 92       	push	r0
    2f38:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2f3c:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2f40:	27 a5       	ldd	r18, Z+47	; 0x2f
    2f42:	22 30       	cpi	r18, 0x02	; 2
    2f44:	39 f1       	breq	.+78     	; 0x2f94 <xTaskNotifyWait+0x82>
    2f46:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2f4a:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2f4e:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f50:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f52:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f54:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	80 95       	com	r24
    2f5c:	90 95       	com	r25
    2f5e:	a0 95       	com	r26
    2f60:	b0 95       	com	r27
    2f62:	84 21       	and	r24, r4
    2f64:	95 21       	and	r25, r5
    2f66:	a6 21       	and	r26, r6
    2f68:	b7 21       	and	r27, r7
    2f6a:	83 a7       	std	Z+43, r24	; 0x2b
    2f6c:	94 a7       	std	Z+44, r25	; 0x2c
    2f6e:	a5 a7       	std	Z+45, r26	; 0x2d
    2f70:	b6 a7       	std	Z+46, r27	; 0x2e
    2f72:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2f76:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	87 a7       	std	Z+47, r24	; 0x2f
    2f7e:	c1 14       	cp	r12, r1
    2f80:	d1 04       	cpc	r13, r1
    2f82:	e1 04       	cpc	r14, r1
    2f84:	f1 04       	cpc	r15, r1
    2f86:	31 f0       	breq	.+12     	; 0x2f94 <xTaskNotifyWait+0x82>
    2f88:	41 e0       	ldi	r20, 0x01	; 1
    2f8a:	c7 01       	movw	r24, r14
    2f8c:	b6 01       	movw	r22, r12
    2f8e:	27 da       	rcall	.-2994   	; 0x23de <prvAddCurrentTaskToDelayedList>
    2f90:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
    2f94:	0f 90       	pop	r0
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	0f 92       	push	r0
    2f9e:	01 15       	cp	r16, r1
    2fa0:	11 05       	cpc	r17, r1
    2fa2:	69 f0       	breq	.+26     	; 0x2fbe <xTaskNotifyWait+0xac>
    2fa4:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2fa8:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2fac:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fae:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fb0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fb2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	80 83       	st	Z, r24
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	a2 83       	std	Z+2, r26	; 0x02
    2fbc:	b3 83       	std	Z+3, r27	; 0x03
    2fbe:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2fc2:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2fc6:	87 a5       	ldd	r24, Z+47	; 0x2f
    2fc8:	82 30       	cpi	r24, 0x02	; 2
    2fca:	b1 f4       	brne	.+44     	; 0x2ff8 <xTaskNotifyWait+0xe6>
    2fcc:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2fd0:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    2fd4:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fd6:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fd8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fda:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fdc:	80 94       	com	r8
    2fde:	90 94       	com	r9
    2fe0:	a0 94       	com	r10
    2fe2:	b0 94       	com	r11
    2fe4:	88 22       	and	r8, r24
    2fe6:	99 22       	and	r9, r25
    2fe8:	aa 22       	and	r10, r26
    2fea:	bb 22       	and	r11, r27
    2fec:	83 a6       	std	Z+43, r8	; 0x2b
    2fee:	94 a6       	std	Z+44, r9	; 0x2c
    2ff0:	a5 a6       	std	Z+45, r10	; 0x2d
    2ff2:	b6 a6       	std	Z+46, r11	; 0x2e
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <xTaskNotifyWait+0xe8>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    2ffe:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    3002:	17 a6       	std	Z+47, r1	; 0x2f
    3004:	0f 90       	pop	r0
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	9f 90       	pop	r9
    301a:	8f 90       	pop	r8
    301c:	7f 90       	pop	r7
    301e:	6f 90       	pop	r6
    3020:	5f 90       	pop	r5
    3022:	4f 90       	pop	r4
    3024:	08 95       	ret

00003026 <xTaskGenericNotify>:
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	fc 01       	movw	r30, r24
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	0f 92       	push	r0
    3036:	01 15       	cp	r16, r1
    3038:	11 05       	cpc	r17, r1
    303a:	49 f0       	breq	.+18     	; 0x304e <xTaskGenericNotify+0x28>
    303c:	83 a5       	ldd	r24, Z+43	; 0x2b
    303e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3040:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3042:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3044:	e8 01       	movw	r28, r16
    3046:	88 83       	st	Y, r24
    3048:	99 83       	std	Y+1, r25	; 0x01
    304a:	aa 83       	std	Y+2, r26	; 0x02
    304c:	bb 83       	std	Y+3, r27	; 0x03
    304e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3050:	92 e0       	ldi	r25, 0x02	; 2
    3052:	97 a7       	std	Z+47, r25	; 0x2f
    3054:	22 30       	cpi	r18, 0x02	; 2
    3056:	b1 f0       	breq	.+44     	; 0x3084 <xTaskGenericNotify+0x5e>
    3058:	18 f4       	brcc	.+6      	; 0x3060 <xTaskGenericNotify+0x3a>
    305a:	21 30       	cpi	r18, 0x01	; 1
    305c:	31 f0       	breq	.+12     	; 0x306a <xTaskGenericNotify+0x44>
    305e:	2a c0       	rjmp	.+84     	; 0x30b4 <xTaskGenericNotify+0x8e>
    3060:	23 30       	cpi	r18, 0x03	; 3
    3062:	e9 f0       	breq	.+58     	; 0x309e <xTaskGenericNotify+0x78>
    3064:	24 30       	cpi	r18, 0x04	; 4
    3066:	01 f1       	breq	.+64     	; 0x30a8 <xTaskGenericNotify+0x82>
    3068:	25 c0       	rjmp	.+74     	; 0x30b4 <xTaskGenericNotify+0x8e>
    306a:	03 a5       	ldd	r16, Z+43	; 0x2b
    306c:	14 a5       	ldd	r17, Z+44	; 0x2c
    306e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3070:	36 a5       	ldd	r19, Z+46	; 0x2e
    3072:	40 2b       	or	r20, r16
    3074:	51 2b       	or	r21, r17
    3076:	62 2b       	or	r22, r18
    3078:	73 2b       	or	r23, r19
    307a:	43 a7       	std	Z+43, r20	; 0x2b
    307c:	54 a7       	std	Z+44, r21	; 0x2c
    307e:	65 a7       	std	Z+45, r22	; 0x2d
    3080:	76 a7       	std	Z+46, r23	; 0x2e
    3082:	18 c0       	rjmp	.+48     	; 0x30b4 <xTaskGenericNotify+0x8e>
    3084:	43 a5       	ldd	r20, Z+43	; 0x2b
    3086:	54 a5       	ldd	r21, Z+44	; 0x2c
    3088:	65 a5       	ldd	r22, Z+45	; 0x2d
    308a:	76 a5       	ldd	r23, Z+46	; 0x2e
    308c:	4f 5f       	subi	r20, 0xFF	; 255
    308e:	5f 4f       	sbci	r21, 0xFF	; 255
    3090:	6f 4f       	sbci	r22, 0xFF	; 255
    3092:	7f 4f       	sbci	r23, 0xFF	; 255
    3094:	43 a7       	std	Z+43, r20	; 0x2b
    3096:	54 a7       	std	Z+44, r21	; 0x2c
    3098:	65 a7       	std	Z+45, r22	; 0x2d
    309a:	76 a7       	std	Z+46, r23	; 0x2e
    309c:	0b c0       	rjmp	.+22     	; 0x30b4 <xTaskGenericNotify+0x8e>
    309e:	43 a7       	std	Z+43, r20	; 0x2b
    30a0:	54 a7       	std	Z+44, r21	; 0x2c
    30a2:	65 a7       	std	Z+45, r22	; 0x2d
    30a4:	76 a7       	std	Z+46, r23	; 0x2e
    30a6:	06 c0       	rjmp	.+12     	; 0x30b4 <xTaskGenericNotify+0x8e>
    30a8:	82 30       	cpi	r24, 0x02	; 2
    30aa:	49 f1       	breq	.+82     	; 0x30fe <xTaskGenericNotify+0xd8>
    30ac:	43 a7       	std	Z+43, r20	; 0x2b
    30ae:	54 a7       	std	Z+44, r21	; 0x2c
    30b0:	65 a7       	std	Z+45, r22	; 0x2d
    30b2:	76 a7       	std	Z+46, r23	; 0x2e
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	29 f5       	brne	.+74     	; 0x3102 <xTaskGenericNotify+0xdc>
    30b8:	ef 01       	movw	r28, r30
    30ba:	8f 01       	movw	r16, r30
    30bc:	0e 5f       	subi	r16, 0xFE	; 254
    30be:	1f 4f       	sbci	r17, 0xFF	; 255
    30c0:	c8 01       	movw	r24, r16
    30c2:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    30c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30c8:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    30cc:	98 17       	cp	r25, r24
    30ce:	10 f4       	brcc	.+4      	; 0x30d4 <xTaskGenericNotify+0xae>
    30d0:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    30d4:	2b e0       	ldi	r18, 0x0B	; 11
    30d6:	82 9f       	mul	r24, r18
    30d8:	c0 01       	movw	r24, r0
    30da:	11 24       	eor	r1, r1
    30dc:	b8 01       	movw	r22, r16
    30de:	8f 54       	subi	r24, 0x4F	; 79
    30e0:	97 4e       	sbci	r25, 0xE7	; 231
    30e2:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    30e6:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    30ea:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    30ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    30f2:	89 17       	cp	r24, r25
    30f4:	40 f4       	brcc	.+16     	; 0x3106 <xTaskGenericNotify+0xe0>
    30f6:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	05 c0       	rjmp	.+10     	; 0x3108 <xTaskGenericNotify+0xe2>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <xTaskGenericNotify+0xe2>
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <xTaskGenericNotify+0xe2>
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	0f 90       	pop	r0
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	08 95       	ret

00003116 <xTaskGenericNotifyFromISR>:
    3116:	ef 92       	push	r14
    3118:	ff 92       	push	r15
    311a:	0f 93       	push	r16
    311c:	1f 93       	push	r17
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
    3122:	fc 01       	movw	r30, r24
    3124:	01 15       	cp	r16, r1
    3126:	11 05       	cpc	r17, r1
    3128:	49 f0       	breq	.+18     	; 0x313c <xTaskGenericNotifyFromISR+0x26>
    312a:	83 a5       	ldd	r24, Z+43	; 0x2b
    312c:	94 a5       	ldd	r25, Z+44	; 0x2c
    312e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3130:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3132:	e8 01       	movw	r28, r16
    3134:	88 83       	st	Y, r24
    3136:	99 83       	std	Y+1, r25	; 0x01
    3138:	aa 83       	std	Y+2, r26	; 0x02
    313a:	bb 83       	std	Y+3, r27	; 0x03
    313c:	87 a5       	ldd	r24, Z+47	; 0x2f
    313e:	92 e0       	ldi	r25, 0x02	; 2
    3140:	97 a7       	std	Z+47, r25	; 0x2f
    3142:	22 30       	cpi	r18, 0x02	; 2
    3144:	b1 f0       	breq	.+44     	; 0x3172 <xTaskGenericNotifyFromISR+0x5c>
    3146:	18 f4       	brcc	.+6      	; 0x314e <xTaskGenericNotifyFromISR+0x38>
    3148:	21 30       	cpi	r18, 0x01	; 1
    314a:	31 f0       	breq	.+12     	; 0x3158 <xTaskGenericNotifyFromISR+0x42>
    314c:	2a c0       	rjmp	.+84     	; 0x31a2 <xTaskGenericNotifyFromISR+0x8c>
    314e:	23 30       	cpi	r18, 0x03	; 3
    3150:	e9 f0       	breq	.+58     	; 0x318c <xTaskGenericNotifyFromISR+0x76>
    3152:	24 30       	cpi	r18, 0x04	; 4
    3154:	01 f1       	breq	.+64     	; 0x3196 <xTaskGenericNotifyFromISR+0x80>
    3156:	25 c0       	rjmp	.+74     	; 0x31a2 <xTaskGenericNotifyFromISR+0x8c>
    3158:	03 a5       	ldd	r16, Z+43	; 0x2b
    315a:	14 a5       	ldd	r17, Z+44	; 0x2c
    315c:	25 a5       	ldd	r18, Z+45	; 0x2d
    315e:	36 a5       	ldd	r19, Z+46	; 0x2e
    3160:	40 2b       	or	r20, r16
    3162:	51 2b       	or	r21, r17
    3164:	62 2b       	or	r22, r18
    3166:	73 2b       	or	r23, r19
    3168:	43 a7       	std	Z+43, r20	; 0x2b
    316a:	54 a7       	std	Z+44, r21	; 0x2c
    316c:	65 a7       	std	Z+45, r22	; 0x2d
    316e:	76 a7       	std	Z+46, r23	; 0x2e
    3170:	18 c0       	rjmp	.+48     	; 0x31a2 <xTaskGenericNotifyFromISR+0x8c>
    3172:	43 a5       	ldd	r20, Z+43	; 0x2b
    3174:	54 a5       	ldd	r21, Z+44	; 0x2c
    3176:	65 a5       	ldd	r22, Z+45	; 0x2d
    3178:	76 a5       	ldd	r23, Z+46	; 0x2e
    317a:	4f 5f       	subi	r20, 0xFF	; 255
    317c:	5f 4f       	sbci	r21, 0xFF	; 255
    317e:	6f 4f       	sbci	r22, 0xFF	; 255
    3180:	7f 4f       	sbci	r23, 0xFF	; 255
    3182:	43 a7       	std	Z+43, r20	; 0x2b
    3184:	54 a7       	std	Z+44, r21	; 0x2c
    3186:	65 a7       	std	Z+45, r22	; 0x2d
    3188:	76 a7       	std	Z+46, r23	; 0x2e
    318a:	0b c0       	rjmp	.+22     	; 0x31a2 <xTaskGenericNotifyFromISR+0x8c>
    318c:	43 a7       	std	Z+43, r20	; 0x2b
    318e:	54 a7       	std	Z+44, r21	; 0x2c
    3190:	65 a7       	std	Z+45, r22	; 0x2d
    3192:	76 a7       	std	Z+46, r23	; 0x2e
    3194:	06 c0       	rjmp	.+12     	; 0x31a2 <xTaskGenericNotifyFromISR+0x8c>
    3196:	82 30       	cpi	r24, 0x02	; 2
    3198:	d9 f1       	breq	.+118    	; 0x3210 <xTaskGenericNotifyFromISR+0xfa>
    319a:	43 a7       	std	Z+43, r20	; 0x2b
    319c:	54 a7       	std	Z+44, r21	; 0x2c
    319e:	65 a7       	std	Z+45, r22	; 0x2d
    31a0:	76 a7       	std	Z+46, r23	; 0x2e
    31a2:	81 30       	cpi	r24, 0x01	; 1
    31a4:	b9 f5       	brne	.+110    	; 0x3214 <xTaskGenericNotifyFromISR+0xfe>
    31a6:	ef 01       	movw	r28, r30
    31a8:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <uxSchedulerSuspended>
    31ac:	81 11       	cpse	r24, r1
    31ae:	17 c0       	rjmp	.+46     	; 0x31de <xTaskGenericNotifyFromISR+0xc8>
    31b0:	8f 01       	movw	r16, r30
    31b2:	0e 5f       	subi	r16, 0xFE	; 254
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	c8 01       	movw	r24, r16
    31b8:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    31bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31be:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <uxTopReadyPriority>
    31c2:	98 17       	cp	r25, r24
    31c4:	10 f4       	brcc	.+4      	; 0x31ca <xTaskGenericNotifyFromISR+0xb4>
    31c6:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <uxTopReadyPriority>
    31ca:	eb e0       	ldi	r30, 0x0B	; 11
    31cc:	8e 9f       	mul	r24, r30
    31ce:	c0 01       	movw	r24, r0
    31d0:	11 24       	eor	r1, r1
    31d2:	b8 01       	movw	r22, r16
    31d4:	8f 54       	subi	r24, 0x4F	; 79
    31d6:	97 4e       	sbci	r25, 0xE7	; 231
    31d8:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    31dc:	07 c0       	rjmp	.+14     	; 0x31ec <xTaskGenericNotifyFromISR+0xd6>
    31de:	bf 01       	movw	r22, r30
    31e0:	62 5f       	subi	r22, 0xF2	; 242
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	8c e8       	ldi	r24, 0x8C	; 140
    31e6:	98 e1       	ldi	r25, 0x18	; 24
    31e8:	0e 94 01 0a 	call	0x1402	; 0x1402 <vListInsertEnd>
    31ec:	e0 91 dd 18 	lds	r30, 0x18DD	; 0x8018dd <pxCurrentTCB>
    31f0:	f0 91 de 18 	lds	r31, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>
    31f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f8:	89 17       	cp	r24, r25
    31fa:	70 f4       	brcc	.+28     	; 0x3218 <xTaskGenericNotifyFromISR+0x102>
    31fc:	e1 14       	cp	r14, r1
    31fe:	f1 04       	cpc	r15, r1
    3200:	19 f0       	breq	.+6      	; 0x3208 <xTaskGenericNotifyFromISR+0xf2>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	e7 01       	movw	r28, r14
    3206:	88 83       	st	Y, r24
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <xYieldPending>
    320e:	05 c0       	rjmp	.+10     	; 0x321a <xTaskGenericNotifyFromISR+0x104>
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	03 c0       	rjmp	.+6      	; 0x321a <xTaskGenericNotifyFromISR+0x104>
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	01 c0       	rjmp	.+2      	; 0x321a <xTaskGenericNotifyFromISR+0x104>
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	08 95       	ret

00003228 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	21 f4       	brne	.+8      	; 0x3234 <xTaskNotifyStateClear+0xc>
    322c:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <pxCurrentTCB>
    3230:	90 91 de 18 	lds	r25, 0x18DE	; 0x8018de <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    323a:	fc 01       	movw	r30, r24
    323c:	27 a5       	ldd	r18, Z+47	; 0x2f
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	19 f4       	brne	.+6      	; 0x3248 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3242:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	01 c0       	rjmp	.+2      	; 0x324a <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3248:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    324e:	08 95       	ret

00003250 <prvInsertTimerInActiveList>:
    3250:	cf 92       	push	r12
    3252:	df 92       	push	r13
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	fc 01       	movw	r30, r24
    325e:	42 83       	std	Z+2, r20	; 0x02
    3260:	53 83       	std	Z+3, r21	; 0x03
    3262:	64 83       	std	Z+4, r22	; 0x04
    3264:	75 83       	std	Z+5, r23	; 0x05
    3266:	93 87       	std	Z+11, r25	; 0x0b
    3268:	82 87       	std	Z+10, r24	; 0x0a
    326a:	04 17       	cp	r16, r20
    326c:	15 07       	cpc	r17, r21
    326e:	26 07       	cpc	r18, r22
    3270:	37 07       	cpc	r19, r23
    3272:	c0 f0       	brcs	.+48     	; 0x32a4 <prvInsertTimerInActiveList+0x54>
    3274:	0c 19       	sub	r16, r12
    3276:	1d 09       	sbc	r17, r13
    3278:	2e 09       	sbc	r18, r14
    327a:	3f 09       	sbc	r19, r15
    327c:	86 85       	ldd	r24, Z+14	; 0x0e
    327e:	97 85       	ldd	r25, Z+15	; 0x0f
    3280:	a0 89       	ldd	r26, Z+16	; 0x10
    3282:	b1 89       	ldd	r27, Z+17	; 0x11
    3284:	08 17       	cp	r16, r24
    3286:	19 07       	cpc	r17, r25
    3288:	2a 07       	cpc	r18, r26
    328a:	3b 07       	cpc	r19, r27
    328c:	00 f5       	brcc	.+64     	; 0x32ce <prvInsertTimerInActiveList+0x7e>
    328e:	bf 01       	movw	r22, r30
    3290:	6e 5f       	subi	r22, 0xFE	; 254
    3292:	7f 4f       	sbci	r23, 0xFF	; 255
    3294:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <pxOverflowTimerList>
    3298:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <pxOverflowTimerList+0x1>
    329c:	0e 94 22 0a 	call	0x1444	; 0x1444 <vListInsert>
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	18 c0       	rjmp	.+48     	; 0x32d4 <prvInsertTimerInActiveList+0x84>
    32a4:	0c 15       	cp	r16, r12
    32a6:	1d 05       	cpc	r17, r13
    32a8:	2e 05       	cpc	r18, r14
    32aa:	3f 05       	cpc	r19, r15
    32ac:	28 f4       	brcc	.+10     	; 0x32b8 <prvInsertTimerInActiveList+0x68>
    32ae:	4c 15       	cp	r20, r12
    32b0:	5d 05       	cpc	r21, r13
    32b2:	6e 05       	cpc	r22, r14
    32b4:	7f 05       	cpc	r23, r15
    32b6:	68 f4       	brcc	.+26     	; 0x32d2 <prvInsertTimerInActiveList+0x82>
    32b8:	bf 01       	movw	r22, r30
    32ba:	6e 5f       	subi	r22, 0xFE	; 254
    32bc:	7f 4f       	sbci	r23, 0xFF	; 255
    32be:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <pxCurrentTimerList>
    32c2:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <pxCurrentTimerList+0x1>
    32c6:	0e 94 22 0a 	call	0x1444	; 0x1444 <vListInsert>
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	03 c0       	rjmp	.+6      	; 0x32d4 <prvInsertTimerInActiveList+0x84>
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	01 c0       	rjmp	.+2      	; 0x32d4 <prvInsertTimerInActiveList+0x84>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	cf 90       	pop	r12
    32e0:	08 95       	ret

000032e2 <prvCheckForValidListAndQueue>:
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	0f 92       	push	r0
    32e8:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xTimerQueue>
    32ec:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
    32f0:	89 2b       	or	r24, r25
    32f2:	e9 f4       	brne	.+58     	; 0x332e <prvCheckForValidListAndQueue+0x4c>
    32f4:	86 ef       	ldi	r24, 0xF6	; 246
    32f6:	98 e1       	ldi	r25, 0x18	; 24
    32f8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    32fc:	8b ee       	ldi	r24, 0xEB	; 235
    32fe:	98 e1       	ldi	r25, 0x18	; 24
    3300:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialise>
    3304:	86 ef       	ldi	r24, 0xF6	; 246
    3306:	98 e1       	ldi	r25, 0x18	; 24
    3308:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <pxCurrentTimerList+0x1>
    330c:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <pxCurrentTimerList>
    3310:	8b ee       	ldi	r24, 0xEB	; 235
    3312:	98 e1       	ldi	r25, 0x18	; 24
    3314:	90 93 e8 18 	sts	0x18E8, r25	; 0x8018e8 <pxOverflowTimerList+0x1>
    3318:	80 93 e7 18 	sts	0x18E7, r24	; 0x8018e7 <pxOverflowTimerList>
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	67 e0       	ldi	r22, 0x07	; 7
    3320:	8a e0       	ldi	r24, 0x0A	; 10
    3322:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xQueueGenericCreate>
    3326:	90 93 e6 18 	sts	0x18E6, r25	; 0x8018e6 <xTimerQueue+0x1>
    332a:	80 93 e5 18 	sts	0x18E5, r24	; 0x8018e5 <xTimerQueue>
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	08 95       	ret

00003334 <xTimerCreateTimerTask>:
    3334:	ef 92       	push	r14
    3336:	ff 92       	push	r15
    3338:	0f 93       	push	r16
    333a:	d3 df       	rcall	.-90     	; 0x32e2 <prvCheckForValidListAndQueue>
    333c:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xTimerQueue>
    3340:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
    3344:	89 2b       	or	r24, r25
    3346:	89 f0       	breq	.+34     	; 0x336a <xTimerCreateTimerTask+0x36>
    3348:	0f 2e       	mov	r0, r31
    334a:	f3 ee       	ldi	r31, 0xE3	; 227
    334c:	ef 2e       	mov	r14, r31
    334e:	f8 e1       	ldi	r31, 0x18	; 24
    3350:	ff 2e       	mov	r15, r31
    3352:	f0 2d       	mov	r31, r0
    3354:	03 e0       	ldi	r16, 0x03	; 3
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	45 e5       	ldi	r20, 0x55	; 85
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	61 e1       	ldi	r22, 0x11	; 17
    3360:	75 e0       	ldi	r23, 0x05	; 5
    3362:	87 e0       	ldi	r24, 0x07	; 7
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	b1 d8       	rcall	.-3742   	; 0x24ca <xTaskCreate>
    3368:	01 c0       	rjmp	.+2      	; 0x336c <xTimerCreateTimerTask+0x38>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	08 95       	ret

00003374 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3374:	8f 92       	push	r8
    3376:	9f 92       	push	r9
    3378:	af 92       	push	r10
    337a:	bf 92       	push	r11
    337c:	cf 92       	push	r12
    337e:	df 92       	push	r13
    3380:	ef 92       	push	r14
    3382:	ff 92       	push	r15
    3384:	0f 93       	push	r16
    3386:	1f 93       	push	r17
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	27 97       	sbiw	r28, 0x07	; 7
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    339c:	e0 91 e5 18 	lds	r30, 0x18E5	; 0x8018e5 <xTimerQueue>
    33a0:	f0 91 e6 18 	lds	r31, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
    33a4:	30 97       	sbiw	r30, 0x00	; 0
    33a6:	81 f1       	breq	.+96     	; 0x3408 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    33a8:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    33aa:	2a 83       	std	Y+2, r18	; 0x02
    33ac:	3b 83       	std	Y+3, r19	; 0x03
    33ae:	4c 83       	std	Y+4, r20	; 0x04
    33b0:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    33b2:	9f 83       	std	Y+7, r25	; 0x07
    33b4:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    33b6:	66 30       	cpi	r22, 0x06	; 6
    33b8:	f4 f4       	brge	.+60     	; 0x33f6 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    33ba:	35 dd       	rcall	.-1430   	; 0x2e26 <xTaskGetSchedulerState>
    33bc:	82 30       	cpi	r24, 0x02	; 2
    33be:	69 f4       	brne	.+26     	; 0x33da <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    33c0:	00 e0       	ldi	r16, 0x00	; 0
    33c2:	a7 01       	movw	r20, r14
    33c4:	96 01       	movw	r18, r12
    33c6:	be 01       	movw	r22, r28
    33c8:	6f 5f       	subi	r22, 0xFF	; 255
    33ca:	7f 4f       	sbci	r23, 0xFF	; 255
    33cc:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xTimerQueue>
    33d0:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
    33d4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <xQueueGenericSend>
    33d8:	18 c0       	rjmp	.+48     	; 0x340a <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    33da:	00 e0       	ldi	r16, 0x00	; 0
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	a9 01       	movw	r20, r18
    33e2:	be 01       	movw	r22, r28
    33e4:	6f 5f       	subi	r22, 0xFF	; 255
    33e6:	7f 4f       	sbci	r23, 0xFF	; 255
    33e8:	80 91 e5 18 	lds	r24, 0x18E5	; 0x8018e5 <xTimerQueue>
    33ec:	90 91 e6 18 	lds	r25, 0x18E6	; 0x8018e6 <xTimerQueue+0x1>
    33f0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <xQueueGenericSend>
    33f4:	0a c0       	rjmp	.+20     	; 0x340a <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	a8 01       	movw	r20, r16
    33fa:	be 01       	movw	r22, r28
    33fc:	6f 5f       	subi	r22, 0xFF	; 255
    33fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3400:	cf 01       	movw	r24, r30
    3402:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <xQueueGenericSendFromISR>
    3406:	01 c0       	rjmp	.+2      	; 0x340a <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3408:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    340a:	27 96       	adiw	r28, 0x07	; 7
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	bf 90       	pop	r11
    3428:	af 90       	pop	r10
    342a:	9f 90       	pop	r9
    342c:	8f 90       	pop	r8
    342e:	08 95       	ret

00003430 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3430:	2f 92       	push	r2
    3432:	3f 92       	push	r3
    3434:	4f 92       	push	r4
    3436:	5f 92       	push	r5
    3438:	6f 92       	push	r6
    343a:	7f 92       	push	r7
    343c:	8f 92       	push	r8
    343e:	9f 92       	push	r9
    3440:	af 92       	push	r10
    3442:	bf 92       	push	r11
    3444:	cf 92       	push	r12
    3446:	df 92       	push	r13
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3456:	9a d9       	rcall	.-3276   	; 0x278c <xTaskGetTickCount>
    3458:	2b 01       	movw	r4, r22
    345a:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    345c:	80 91 df 18 	lds	r24, 0x18DF	; 0x8018df <xLastTime.2432>
    3460:	90 91 e0 18 	lds	r25, 0x18E0	; 0x8018e0 <xLastTime.2432+0x1>
    3464:	a0 91 e1 18 	lds	r26, 0x18E1	; 0x8018e1 <xLastTime.2432+0x2>
    3468:	b0 91 e2 18 	lds	r27, 0x18E2	; 0x8018e2 <xLastTime.2432+0x3>
    346c:	48 16       	cp	r4, r24
    346e:	59 06       	cpc	r5, r25
    3470:	6a 06       	cpc	r6, r26
    3472:	7b 06       	cpc	r7, r27
    3474:	08 f0       	brcs	.+2      	; 0x3478 <prvSampleTimeNow+0x48>
    3476:	53 c0       	rjmp	.+166    	; 0x351e <prvSampleTimeNow+0xee>
    3478:	3b c0       	rjmp	.+118    	; 0x34f0 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    347a:	07 80       	ldd	r0, Z+7	; 0x07
    347c:	f0 85       	ldd	r31, Z+8	; 0x08
    347e:	e0 2d       	mov	r30, r0
    3480:	80 80       	ld	r8, Z
    3482:	91 80       	ldd	r9, Z+1	; 0x01
    3484:	a2 80       	ldd	r10, Z+2	; 0x02
    3486:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3488:	c0 85       	ldd	r28, Z+8	; 0x08
    348a:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    348c:	8e 01       	movw	r16, r28
    348e:	0e 5f       	subi	r16, 0xFE	; 254
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	c8 01       	movw	r24, r16
    3494:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3498:	ec 89       	ldd	r30, Y+20	; 0x14
    349a:	fd 89       	ldd	r31, Y+21	; 0x15
    349c:	ce 01       	movw	r24, r28
    349e:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34a0:	8f 89       	ldd	r24, Y+23	; 0x17
    34a2:	82 ff       	sbrs	r24, 2
    34a4:	25 c0       	rjmp	.+74     	; 0x34f0 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    34aa:	a8 89       	ldd	r26, Y+16	; 0x10
    34ac:	b9 89       	ldd	r27, Y+17	; 0x11
    34ae:	88 0d       	add	r24, r8
    34b0:	99 1d       	adc	r25, r9
    34b2:	aa 1d       	adc	r26, r10
    34b4:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    34b6:	88 16       	cp	r8, r24
    34b8:	99 06       	cpc	r9, r25
    34ba:	aa 06       	cpc	r10, r26
    34bc:	bb 06       	cpc	r11, r27
    34be:	70 f4       	brcc	.+28     	; 0x34dc <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34c0:	8a 83       	std	Y+2, r24	; 0x02
    34c2:	9b 83       	std	Y+3, r25	; 0x03
    34c4:	ac 83       	std	Y+4, r26	; 0x04
    34c6:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34c8:	db 87       	std	Y+11, r29	; 0x0b
    34ca:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    34cc:	b8 01       	movw	r22, r16
    34ce:	80 91 e9 18 	lds	r24, 0x18E9	; 0x8018e9 <pxCurrentTimerList>
    34d2:	90 91 ea 18 	lds	r25, 0x18EA	; 0x8018ea <pxCurrentTimerList+0x1>
    34d6:	0e 94 22 0a 	call	0x1444	; 0x1444 <vListInsert>
    34da:	0a c0       	rjmp	.+20     	; 0x34f0 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34dc:	c1 2c       	mov	r12, r1
    34de:	d1 2c       	mov	r13, r1
    34e0:	76 01       	movw	r14, r12
    34e2:	00 e0       	ldi	r16, 0x00	; 0
    34e4:	10 e0       	ldi	r17, 0x00	; 0
    34e6:	a5 01       	movw	r20, r10
    34e8:	94 01       	movw	r18, r8
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	ce 01       	movw	r24, r28
    34ee:	42 df       	rcall	.-380    	; 0x3374 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34f0:	e0 91 e9 18 	lds	r30, 0x18E9	; 0x8018e9 <pxCurrentTimerList>
    34f4:	f0 91 ea 18 	lds	r31, 0x18EA	; 0x8018ea <pxCurrentTimerList+0x1>
    34f8:	80 81       	ld	r24, Z
    34fa:	81 11       	cpse	r24, r1
    34fc:	be cf       	rjmp	.-132    	; 0x347a <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    34fe:	80 91 e7 18 	lds	r24, 0x18E7	; 0x8018e7 <pxOverflowTimerList>
    3502:	90 91 e8 18 	lds	r25, 0x18E8	; 0x8018e8 <pxOverflowTimerList+0x1>
    3506:	90 93 ea 18 	sts	0x18EA, r25	; 0x8018ea <pxCurrentTimerList+0x1>
    350a:	80 93 e9 18 	sts	0x18E9, r24	; 0x8018e9 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    350e:	f0 93 e8 18 	sts	0x18E8, r31	; 0x8018e8 <pxOverflowTimerList+0x1>
    3512:	e0 93 e7 18 	sts	0x18E7, r30	; 0x8018e7 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	f1 01       	movw	r30, r2
    351a:	80 83       	st	Z, r24
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    351e:	f1 01       	movw	r30, r2
    3520:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3522:	40 92 df 18 	sts	0x18DF, r4	; 0x8018df <xLastTime.2432>
    3526:	50 92 e0 18 	sts	0x18E0, r5	; 0x8018e0 <xLastTime.2432+0x1>
    352a:	60 92 e1 18 	sts	0x18E1, r6	; 0x8018e1 <xLastTime.2432+0x2>
    352e:	70 92 e2 18 	sts	0x18E2, r7	; 0x8018e2 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3532:	c3 01       	movw	r24, r6
    3534:	b2 01       	movw	r22, r4
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	df 90       	pop	r13
    3544:	cf 90       	pop	r12
    3546:	bf 90       	pop	r11
    3548:	af 90       	pop	r10
    354a:	9f 90       	pop	r9
    354c:	8f 90       	pop	r8
    354e:	7f 90       	pop	r7
    3550:	6f 90       	pop	r6
    3552:	5f 90       	pop	r5
    3554:	4f 90       	pop	r4
    3556:	3f 90       	pop	r3
    3558:	2f 90       	pop	r2
    355a:	08 95       	ret

0000355c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    355c:	08 95       	ret

0000355e <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    355e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3560:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3562:	2f ef       	ldi	r18, 0xFF	; 255
    3564:	80 e7       	ldi	r24, 0x70	; 112
    3566:	92 e0       	ldi	r25, 0x02	; 2
    3568:	21 50       	subi	r18, 0x01	; 1
    356a:	80 40       	sbci	r24, 0x00	; 0
    356c:	90 40       	sbci	r25, 0x00	; 0
    356e:	e1 f7       	brne	.-8      	; 0x3568 <vApplicationMallocFailedHook+0xa>
    3570:	00 c0       	rjmp	.+0      	; 0x3572 <vApplicationMallocFailedHook+0x14>
    3572:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3574:	1f 9a       	sbi	0x03, 7	; 3
    3576:	f5 cf       	rjmp	.-22     	; 0x3562 <vApplicationMallocFailedHook+0x4>

00003578 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3578:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    357a:	2f 9a       	sbi	0x05, 7	; 5
    357c:	2f ef       	ldi	r18, 0xFF	; 255
    357e:	87 ea       	ldi	r24, 0xA7	; 167
    3580:	91 e6       	ldi	r25, 0x61	; 97
    3582:	21 50       	subi	r18, 0x01	; 1
    3584:	80 40       	sbci	r24, 0x00	; 0
    3586:	90 40       	sbci	r25, 0x00	; 0
    3588:	e1 f7       	brne	.-8      	; 0x3582 <vApplicationStackOverflowHook+0xa>
    358a:	00 c0       	rjmp	.+0      	; 0x358c <vApplicationStackOverflowHook+0x14>
    358c:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    358e:	1f 9a       	sbi	0x03, 7	; 3
    3590:	f5 cf       	rjmp	.-22     	; 0x357c <vApplicationStackOverflowHook+0x4>

00003592 <create_tasks_and_semaphores>:
	hih8120Create();
	
}

void doStuff()
{
    3592:	8f 92       	push	r8
    3594:	9f 92       	push	r9
    3596:	af 92       	push	r10
    3598:	bf 92       	push	r11
    359a:	cf 92       	push	r12
    359c:	df 92       	push	r13
    359e:	ef 92       	push	r14
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <xTestSemaphore>
    35ae:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <xTestSemaphore+0x1>
    35b2:	89 2b       	or	r24, r25
    35b4:	89 f4       	brne	.+34     	; 0x35d8 <create_tasks_and_semaphores+0x46>
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <xQueueCreateMutex>
    35bc:	90 93 57 1a 	sts	0x1A57, r25	; 0x801a57 <xTestSemaphore+0x1>
    35c0:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <xTestSemaphore>
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	41 f0       	breq	.+16     	; 0x35d8 <create_tasks_and_semaphores+0x46>
    35c8:	00 e0       	ldi	r16, 0x00	; 0
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	a9 01       	movw	r20, r18
    35d0:	60 e0       	ldi	r22, 0x00	; 0
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <xQueueGenericSend>
    35d8:	0e 94 49 07 	call	0xe92	; 0xe92 <xEventGroupCreate>
    35dc:	90 93 6f 1a 	sts	0x1A6F, r25	; 0x801a6f <startMeasureEventGroup+0x1>
    35e0:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <startMeasureEventGroup>
    35e4:	0e 94 49 07 	call	0xe92	; 0xe92 <xEventGroupCreate>
    35e8:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <readyEventGroup+0x1>
    35ec:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <readyEventGroup>
    35f0:	41 e0       	ldi	r20, 0x01	; 1
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	84 e6       	ldi	r24, 0x64	; 100
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <xStreamBufferGenericCreate>
    35fe:	90 93 53 1a 	sts	0x1A53, r25	; 0x801a53 <xMessageBuffer+0x1>
    3602:	80 93 52 1a 	sts	0x1A52, r24	; 0x801a52 <xMessageBuffer>
    3606:	bc 01       	movw	r22, r24
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	0e 94 d0 05 	call	0xba0	; 0xba0 <lora_UpLinkHandler_create>
    360e:	e0 90 54 1a 	lds	r14, 0x1A54	; 0x801a54 <readyEventGroup>
    3612:	f0 90 55 1a 	lds	r15, 0x1A55	; 0x801a55 <readyEventGroup+0x1>
    3616:	40 91 6e 1a 	lds	r20, 0x1A6E	; 0x801a6e <startMeasureEventGroup>
    361a:	50 91 6f 1a 	lds	r21, 0x1A6F	; 0x801a6f <startMeasureEventGroup+0x1>
    361e:	a1 2c       	mov	r10, r1
    3620:	b1 2c       	mov	r11, r1
    3622:	65 01       	movw	r12, r10
    3624:	68 94       	set
    3626:	a4 f8       	bld	r10, 4
    3628:	01 e0       	ldi	r16, 0x01	; 1
    362a:	10 e0       	ldi	r17, 0x00	; 0
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	60 ec       	ldi	r22, 0xC0	; 192
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <humAndTempReader_create>
    3638:	c8 2f       	mov	r28, r24
    363a:	d9 2f       	mov	r29, r25
    363c:	e0 90 54 1a 	lds	r14, 0x1A54	; 0x801a54 <readyEventGroup>
    3640:	f0 90 55 1a 	lds	r15, 0x1A55	; 0x801a55 <readyEventGroup+0x1>
    3644:	40 91 6e 1a 	lds	r20, 0x1A6E	; 0x801a6e <startMeasureEventGroup>
    3648:	50 91 6f 1a 	lds	r21, 0x1A6F	; 0x801a6f <startMeasureEventGroup+0x1>
    364c:	a1 2c       	mov	r10, r1
    364e:	b1 2c       	mov	r11, r1
    3650:	65 01       	movw	r12, r10
    3652:	68 94       	set
    3654:	a5 f8       	bld	r10, 5
    3656:	02 e0       	ldi	r16, 0x02	; 2
    3658:	10 e0       	ldi	r17, 0x00	; 0
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	60 ec       	ldi	r22, 0xC0	; 192
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2Reader_create>
    3666:	e0 90 54 1a 	lds	r14, 0x1A54	; 0x801a54 <readyEventGroup>
    366a:	f0 90 55 1a 	lds	r15, 0x1A55	; 0x801a55 <readyEventGroup+0x1>
    366e:	40 91 6e 1a 	lds	r20, 0x1A6E	; 0x801a6e <startMeasureEventGroup>
    3672:	50 91 6f 1a 	lds	r21, 0x1A6F	; 0x801a6f <startMeasureEventGroup+0x1>
    3676:	20 91 53 1a 	lds	r18, 0x1A53	; 0x801a53 <xMessageBuffer+0x1>
    367a:	2f 93       	push	r18
    367c:	20 91 52 1a 	lds	r18, 0x1A52	; 0x801a52 <xMessageBuffer>
    3680:	2f 93       	push	r18
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	4c 01       	movw	r8, r24
    3688:	0f 2e       	mov	r0, r31
    368a:	f0 e3       	ldi	r31, 0x30	; 48
    368c:	af 2e       	mov	r10, r31
    368e:	b1 2c       	mov	r11, r1
    3690:	c1 2c       	mov	r12, r1
    3692:	d1 2c       	mov	r13, r1
    3694:	f0 2d       	mov	r31, r0
    3696:	03 e0       	ldi	r16, 0x03	; 3
    3698:	10 e0       	ldi	r17, 0x00	; 0
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	60 ec       	ldi	r22, 0xC0	; 192
    36a0:	82 e0       	ldi	r24, 0x02	; 2
    36a2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <device_create>
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	df 90       	pop	r13
    36bc:	cf 90       	pop	r12
    36be:	bf 90       	pop	r11
    36c0:	af 90       	pop	r10
    36c2:	9f 90       	pop	r9
    36c4:	8f 90       	pop	r8
    36c6:	08 95       	ret

000036c8 <initialiseSystem>:
    36c8:	81 b1       	in	r24, 0x01	; 1
    36ca:	81 68       	ori	r24, 0x81	; 129
    36cc:	81 b9       	out	0x01, r24	; 1
    36ce:	0e 94 33 07 	call	0xe66	; 0xe66 <trace_init>
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <stdioCreate>
    36d8:	85 e0       	ldi	r24, 0x05	; 5
    36da:	0e d0       	rcall	.+28     	; 0x36f8 <hal_create>
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	c1 d3       	rcall	.+1922   	; 0x3e66 <lora_driver_create>
    36e4:	68 c0       	rjmp	.+208    	; 0x37b6 <hih8120Create>
    36e6:	08 95       	ret

000036e8 <main>:
	//bytesToSend=xMessageBufferSend(xMessageBuffer,(void*) &payload,sizeof(payload),portMAX_DELAY);
}
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    36e8:	ef df       	rcall	.-34     	; 0x36c8 <initialiseSystem>
	printf("Program Started!!\n");
    36ea:	89 e1       	ldi	r24, 0x19	; 25
    36ec:	95 e0       	ldi	r25, 0x05	; 5
    36ee:	0e 94 1f 2c 	call	0x583e	; 0x583e <puts>
	create_tasks_and_semaphores();
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    36f2:	4f df       	rcall	.-354    	; 0x3592 <create_tasks_and_semaphores>
    36f4:	09 d8       	rcall	.-4078   	; 0x2708 <vTaskStartScheduler>
    36f6:	ff cf       	rjmp	.-2      	; 0x36f6 <main+0xe>

000036f8 <hal_create>:
    36f8:	e0 e7       	ldi	r30, 0x70	; 112
    36fa:	fa e1       	ldi	r31, 0x1A	; 26
    36fc:	28 e8       	ldi	r18, 0x88	; 136
    36fe:	32 e2       	ldi	r19, 0x22	; 34
    3700:	31 83       	std	Z+1, r19	; 0x01
    3702:	20 83       	st	Z, r18
    3704:	2b e8       	ldi	r18, 0x8B	; 139
    3706:	32 e2       	ldi	r19, 0x22	; 34
    3708:	33 83       	std	Z+3, r19	; 0x03
    370a:	22 83       	std	Z+2, r18	; 0x02
    370c:	26 e9       	ldi	r18, 0x96	; 150
    370e:	32 e2       	ldi	r19, 0x22	; 34
    3710:	35 83       	std	Z+5, r19	; 0x05
    3712:	24 83       	std	Z+4, r18	; 0x04
    3714:	2a e9       	ldi	r18, 0x9A	; 154
    3716:	32 e2       	ldi	r19, 0x22	; 34
    3718:	37 83       	std	Z+7, r19	; 0x07
    371a:	26 83       	std	Z+6, r18	; 0x06
    371c:	20 ea       	ldi	r18, 0xA0	; 160
    371e:	32 e2       	ldi	r19, 0x22	; 34
    3720:	31 87       	std	Z+9, r19	; 0x09
    3722:	20 87       	std	Z+8, r18	; 0x08
    3724:	2c ea       	ldi	r18, 0xAC	; 172
    3726:	32 e2       	ldi	r19, 0x22	; 34
    3728:	33 87       	std	Z+11, r19	; 0x0b
    372a:	22 87       	std	Z+10, r18	; 0x0a
    372c:	21 eb       	ldi	r18, 0xB1	; 177
    372e:	32 e2       	ldi	r19, 0x22	; 34
    3730:	35 87       	std	Z+13, r19	; 0x0d
    3732:	24 87       	std	Z+12, r18	; 0x0c
    3734:	2d eb       	ldi	r18, 0xBD	; 189
    3736:	32 e2       	ldi	r19, 0x22	; 34
    3738:	37 87       	std	Z+15, r19	; 0x0f
    373a:	26 87       	std	Z+14, r18	; 0x0e
    373c:	2d e9       	ldi	r18, 0x9D	; 157
    373e:	32 e2       	ldi	r19, 0x22	; 34
    3740:	31 8b       	std	Z+17, r19	; 0x11
    3742:	20 8b       	std	Z+16, r18	; 0x10
    3744:	22 ec       	ldi	r18, 0xC2	; 194
    3746:	32 e2       	ldi	r19, 0x22	; 34
    3748:	33 8b       	std	Z+19, r19	; 0x13
    374a:	22 8b       	std	Z+18, r18	; 0x12
    374c:	2f ec       	ldi	r18, 0xCF	; 207
    374e:	32 e2       	ldi	r19, 0x22	; 34
    3750:	35 8b       	std	Z+21, r19	; 0x15
    3752:	24 8b       	std	Z+20, r18	; 0x14
    3754:	68 2f       	mov	r22, r24
    3756:	cf 01       	movw	r24, r30
    3758:	52 c1       	rjmp	.+676    	; 0x39fe <led_create>
    375a:	08 95       	ret

0000375c <_hihTwiCallback>:
    375c:	65 30       	cpi	r22, 0x05	; 5
    375e:	f1 f4       	brne	.+60     	; 0x379c <_hihTwiCallback+0x40>
    3760:	fa 01       	movw	r30, r20
    3762:	80 81       	ld	r24, Z
    3764:	8f 73       	andi	r24, 0x3F	; 63
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	98 2f       	mov	r25, r24
    376a:	88 27       	eor	r24, r24
    376c:	21 81       	ldd	r18, Z+1	; 0x01
    376e:	82 2b       	or	r24, r18
    3770:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    3774:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	f0 e4       	ldi	r31, 0x40	; 64
    377c:	8f 9f       	mul	r24, r31
    377e:	c0 01       	movw	r24, r0
    3780:	11 24       	eor	r1, r1
    3782:	fa 01       	movw	r30, r20
    3784:	23 81       	ldd	r18, Z+3	; 0x03
    3786:	26 95       	lsr	r18
    3788:	26 95       	lsr	r18
    378a:	82 2b       	or	r24, r18
    378c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    3790:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <_measuringIsReady>
    379a:	08 95       	ret
    379c:	64 30       	cpi	r22, 0x04	; 4
    379e:	51 f0       	breq	.+20     	; 0x37b4 <_hihTwiCallback+0x58>
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e4       	ldi	r25, 0x40	; 64
    37a4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    37a8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    37ac:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    37b0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    37b4:	08 95       	ret

000037b6 <hih8120Create>:
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	0e ea       	ldi	r16, 0xAE	; 174
    37bc:	1b e1       	ldi	r17, 0x1B	; 27
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	34 e2       	ldi	r19, 0x24	; 36
    37c2:	44 ef       	ldi	r20, 0xF4	; 244
    37c4:	50 e0       	ldi	r21, 0x00	; 0
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	87 e2       	ldi	r24, 0x27	; 39
    37ca:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <twiCreate>
    37ce:	90 93 03 19 	sts	0x1903, r25	; 0x801903 <_hih8120Handler+0x1>
    37d2:	80 93 02 19 	sts	0x1902, r24	; 0x801902 <_hih8120Handler>
    37d6:	21 e0       	ldi	r18, 0x01	; 1
    37d8:	89 2b       	or	r24, r25
    37da:	09 f0       	breq	.+2      	; 0x37de <hih8120Create+0x28>
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	82 2f       	mov	r24, r18
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	08 95       	ret

000037e6 <hih8120IsReady>:
    37e6:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <_measuringIsReady>
    37ea:	08 95       	ret

000037ec <hih8120Wakeup>:
    37ec:	80 91 02 19 	lds	r24, 0x1902	; 0x801902 <_hih8120Handler>
    37f0:	90 91 03 19 	lds	r25, 0x1903	; 0x801903 <_hih8120Handler+0x1>
    37f4:	00 97       	sbiw	r24, 0x00	; 0
    37f6:	59 f0       	breq	.+22     	; 0x380e <hih8120Wakeup+0x22>
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <twiTransmit>
    3802:	84 30       	cpi	r24, 0x04	; 4
    3804:	31 f4       	brne	.+12     	; 0x3812 <hih8120Wakeup+0x26>
    3806:	10 92 01 19 	sts	0x1901, r1	; 0x801901 <_measuringIsReady>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	08 95       	ret
    380e:	82 e0       	ldi	r24, 0x02	; 2
    3810:	08 95       	ret
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	08 95       	ret

00003816 <hih8120Meassure>:
    3816:	80 91 02 19 	lds	r24, 0x1902	; 0x801902 <_hih8120Handler>
    381a:	90 91 03 19 	lds	r25, 0x1903	; 0x801903 <_hih8120Handler+0x1>
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	39 f0       	breq	.+14     	; 0x3830 <hih8120Meassure+0x1a>
    3822:	64 e0       	ldi	r22, 0x04	; 4
    3824:	0e 94 49 27 	call	0x4e92	; 0x4e92 <twiReceive>
    3828:	85 30       	cpi	r24, 0x05	; 5
    382a:	21 f0       	breq	.+8      	; 0x3834 <hih8120Meassure+0x1e>
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	08 95       	ret
    3830:	82 e0       	ldi	r24, 0x02	; 2
    3832:	08 95       	ret
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	08 95       	ret

00003838 <hih8120GetHumidity>:
    3838:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    383c:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 53 29 	call	0x52a6	; 0x52a6 <__floatunsisf>
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	48 ec       	ldi	r20, 0xC8	; 200
    384e:	52 e4       	ldi	r21, 0x42	; 66
    3850:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__mulsf3>
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	38 ef       	ldi	r19, 0xF8	; 248
    3858:	4f e7       	ldi	r20, 0x7F	; 127
    385a:	56 e4       	ldi	r21, 0x46	; 70
    385c:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__divsf3>
    3860:	08 95       	ret

00003862 <hih8120GetHumidityPercent_x10>:
    3862:	ea df       	rcall	.-44     	; 0x3838 <hih8120GetHumidity>
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e2       	ldi	r20, 0x20	; 32
    386a:	51 e4       	ldi	r21, 0x41	; 65
    386c:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__mulsf3>
    3870:	0e 94 27 29 	call	0x524e	; 0x524e <__fixunssfsi>
    3874:	cb 01       	movw	r24, r22
    3876:	08 95       	ret

00003878 <hih8120GetTemperature>:
    3878:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    387c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	0e 94 53 29 	call	0x52a6	; 0x52a6 <__floatunsisf>
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	45 e2       	ldi	r20, 0x25	; 37
    388e:	53 e4       	ldi	r21, 0x43	; 67
    3890:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__mulsf3>
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	38 ef       	ldi	r19, 0xF8	; 248
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	56 e4       	ldi	r21, 0x46	; 70
    389c:	0e 94 ba 28 	call	0x5174	; 0x5174 <__divsf3>
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e2       	ldi	r20, 0x20	; 32
    38a6:	52 e4       	ldi	r21, 0x42	; 66
    38a8:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__subsf3>
    38ac:	08 95       	ret

000038ae <hih8120GetTemperature_x10>:
    38ae:	e4 df       	rcall	.-56     	; 0x3878 <hih8120GetTemperature>
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e2       	ldi	r20, 0x20	; 32
    38b6:	51 e4       	ldi	r21, 0x41	; 65
    38b8:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__mulsf3>
    38bc:	0e 94 22 29 	call	0x5244	; 0x5244 <__fixsfsi>
    38c0:	cb 01       	movw	r24, r22
    38c2:	08 95       	ret

000038c4 <_turn_off>:
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	fc 01       	movw	r30, r24
    38cc:	ee 0f       	add	r30, r30
    38ce:	ff 1f       	adc	r31, r31
    38d0:	e8 0f       	add	r30, r24
    38d2:	f9 1f       	adc	r31, r25
    38d4:	ee 0f       	add	r30, r30
    38d6:	ff 1f       	adc	r31, r31
    38d8:	ec 5f       	subi	r30, 0xFC	; 252
    38da:	f6 4e       	sbci	r31, 0xE6	; 230
    38dc:	23 81       	ldd	r18, Z+3	; 0x03
    38de:	21 11       	cpse	r18, r1
    38e0:	0a c0       	rjmp	.+20     	; 0x38f6 <_turn_off+0x32>
    38e2:	ef 01       	movw	r28, r30
    38e4:	e0 91 78 1a 	lds	r30, 0x1A78	; 0x801a78 <register_access+0x8>
    38e8:	f0 91 79 1a 	lds	r31, 0x1A79	; 0x801a79 <register_access+0x9>
    38ec:	6a 81       	ldd	r22, Y+2	; 0x02
    38ee:	88 81       	ld	r24, Y
    38f0:	99 81       	ldd	r25, Y+1	; 0x01
    38f2:	19 95       	eicall
    38f4:	12 c0       	rjmp	.+36     	; 0x391a <_turn_off+0x56>
    38f6:	dc 01       	movw	r26, r24
    38f8:	aa 0f       	add	r26, r26
    38fa:	bb 1f       	adc	r27, r27
    38fc:	ed 01       	movw	r28, r26
    38fe:	c8 0f       	add	r28, r24
    3900:	d9 1f       	adc	r29, r25
    3902:	cc 0f       	add	r28, r28
    3904:	dd 1f       	adc	r29, r29
    3906:	cc 5f       	subi	r28, 0xFC	; 252
    3908:	d6 4e       	sbci	r29, 0xE6	; 230
    390a:	e0 91 82 1a 	lds	r30, 0x1A82	; 0x801a82 <register_access+0x12>
    390e:	f0 91 83 1a 	lds	r31, 0x1A83	; 0x801a83 <register_access+0x13>
    3912:	6a 81       	ldd	r22, Y+2	; 0x02
    3914:	88 81       	ld	r24, Y
    3916:	99 81       	ldd	r25, Y+1	; 0x01
    3918:	19 95       	eicall
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	08 95       	ret

00003920 <_turn_on>:
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	fc 01       	movw	r30, r24
    3928:	ee 0f       	add	r30, r30
    392a:	ff 1f       	adc	r31, r31
    392c:	e8 0f       	add	r30, r24
    392e:	f9 1f       	adc	r31, r25
    3930:	ee 0f       	add	r30, r30
    3932:	ff 1f       	adc	r31, r31
    3934:	ec 5f       	subi	r30, 0xFC	; 252
    3936:	f6 4e       	sbci	r31, 0xE6	; 230
    3938:	23 81       	ldd	r18, Z+3	; 0x03
    393a:	21 11       	cpse	r18, r1
    393c:	0a c0       	rjmp	.+20     	; 0x3952 <_turn_on+0x32>
    393e:	ef 01       	movw	r28, r30
    3940:	e0 91 82 1a 	lds	r30, 0x1A82	; 0x801a82 <register_access+0x12>
    3944:	f0 91 83 1a 	lds	r31, 0x1A83	; 0x801a83 <register_access+0x13>
    3948:	6a 81       	ldd	r22, Y+2	; 0x02
    394a:	88 81       	ld	r24, Y
    394c:	99 81       	ldd	r25, Y+1	; 0x01
    394e:	19 95       	eicall
    3950:	12 c0       	rjmp	.+36     	; 0x3976 <_turn_on+0x56>
    3952:	dc 01       	movw	r26, r24
    3954:	aa 0f       	add	r26, r26
    3956:	bb 1f       	adc	r27, r27
    3958:	ed 01       	movw	r28, r26
    395a:	c8 0f       	add	r28, r24
    395c:	d9 1f       	adc	r29, r25
    395e:	cc 0f       	add	r28, r28
    3960:	dd 1f       	adc	r29, r29
    3962:	cc 5f       	subi	r28, 0xFC	; 252
    3964:	d6 4e       	sbci	r29, 0xE6	; 230
    3966:	e0 91 78 1a 	lds	r30, 0x1A78	; 0x801a78 <register_access+0x8>
    396a:	f0 91 79 1a 	lds	r31, 0x1A79	; 0x801a79 <register_access+0x9>
    396e:	6a 81       	ldd	r22, Y+2	; 0x02
    3970:	88 81       	ld	r24, Y
    3972:	99 81       	ldd	r25, Y+1	; 0x01
    3974:	19 95       	eicall
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	08 95       	ret

0000397c <_hal_led_task>:
    397c:	0f 2e       	mov	r0, r31
    397e:	f0 e7       	ldi	r31, 0x70	; 112
    3980:	cf 2e       	mov	r12, r31
    3982:	fa e1       	ldi	r31, 0x1A	; 26
    3984:	df 2e       	mov	r13, r31
    3986:	f0 2d       	mov	r31, r0
    3988:	04 e0       	ldi	r16, 0x04	; 4
    398a:	c4 e0       	ldi	r28, 0x04	; 4
    398c:	d9 e1       	ldi	r29, 0x19	; 25
    398e:	10 e0       	ldi	r17, 0x00	; 0
    3990:	8c 81       	ldd	r24, Y+4	; 0x04
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	69 f0       	breq	.+26     	; 0x39b0 <_hal_led_task+0x34>
    3996:	e8 f0       	brcs	.+58     	; 0x39d2 <_hal_led_task+0x56>
    3998:	82 30       	cpi	r24, 0x02	; 2
    399a:	39 f5       	brne	.+78     	; 0x39ea <_hal_led_task+0x6e>
    399c:	d6 01       	movw	r26, r12
    399e:	1c 96       	adiw	r26, 0x0c	; 12
    39a0:	ed 91       	ld	r30, X+
    39a2:	fc 91       	ld	r31, X
    39a4:	1d 97       	sbiw	r26, 0x0d	; 13
    39a6:	6a 81       	ldd	r22, Y+2	; 0x02
    39a8:	88 81       	ld	r24, Y
    39aa:	99 81       	ldd	r25, Y+1	; 0x01
    39ac:	19 95       	eicall
    39ae:	1d c0       	rjmp	.+58     	; 0x39ea <_hal_led_task+0x6e>
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	8a 30       	cpi	r24, 0x0A	; 10
    39b6:	10 f4       	brcc	.+4      	; 0x39bc <_hal_led_task+0x40>
    39b8:	8d 83       	std	Y+5, r24	; 0x05
    39ba:	17 c0       	rjmp	.+46     	; 0x39ea <_hal_led_task+0x6e>
    39bc:	1d 82       	std	Y+5, r1	; 0x05
    39be:	d6 01       	movw	r26, r12
    39c0:	1c 96       	adiw	r26, 0x0c	; 12
    39c2:	ed 91       	ld	r30, X+
    39c4:	fc 91       	ld	r31, X
    39c6:	1d 97       	sbiw	r26, 0x0d	; 13
    39c8:	6a 81       	ldd	r22, Y+2	; 0x02
    39ca:	88 81       	ld	r24, Y
    39cc:	99 81       	ldd	r25, Y+1	; 0x01
    39ce:	19 95       	eicall
    39d0:	0c c0       	rjmp	.+24     	; 0x39ea <_hal_led_task+0x6e>
    39d2:	8d 81       	ldd	r24, Y+5	; 0x05
    39d4:	88 23       	and	r24, r24
    39d6:	31 f0       	breq	.+12     	; 0x39e4 <_hal_led_task+0x68>
    39d8:	81 2f       	mov	r24, r17
    39da:	a2 df       	rcall	.-188    	; 0x3920 <_turn_on>
    39dc:	8d 81       	ldd	r24, Y+5	; 0x05
    39de:	81 50       	subi	r24, 0x01	; 1
    39e0:	8d 83       	std	Y+5, r24	; 0x05
    39e2:	03 c0       	rjmp	.+6      	; 0x39ea <_hal_led_task+0x6e>
    39e4:	0c 83       	std	Y+4, r16	; 0x04
    39e6:	81 2f       	mov	r24, r17
    39e8:	6d df       	rcall	.-294    	; 0x38c4 <_turn_off>
    39ea:	1f 5f       	subi	r17, 0xFF	; 255
    39ec:	26 96       	adiw	r28, 0x06	; 6
    39ee:	14 30       	cpi	r17, 0x04	; 4
    39f0:	79 f6       	brne	.-98     	; 0x3990 <_hal_led_task+0x14>
    39f2:	65 e0       	ldi	r22, 0x05	; 5
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	27 d8       	rcall	.-4018   	; 0x2a4a <vTaskDelay>
    39fc:	c6 cf       	rjmp	.-116    	; 0x398a <_hal_led_task+0xe>

000039fe <led_create>:
    39fe:	cf 92       	push	r12
    3a00:	df 92       	push	r13
    3a02:	ef 92       	push	r14
    3a04:	ff 92       	push	r15
    3a06:	0f 93       	push	r16
    3a08:	1f 93       	push	r17
    3a0a:	cf 93       	push	r28
    3a0c:	df 93       	push	r29
    3a0e:	06 2f       	mov	r16, r22
    3a10:	0f 2e       	mov	r0, r31
    3a12:	f0 e7       	ldi	r31, 0x70	; 112
    3a14:	ef 2e       	mov	r14, r31
    3a16:	fa e1       	ldi	r31, 0x1A	; 26
    3a18:	ff 2e       	mov	r15, r31
    3a1a:	f0 2d       	mov	r31, r0
    3a1c:	d7 01       	movw	r26, r14
    3a1e:	18 96       	adiw	r26, 0x08	; 8
    3a20:	ed 91       	ld	r30, X+
    3a22:	fc 91       	ld	r31, X
    3a24:	19 97       	sbiw	r26, 0x09	; 9
    3a26:	66 e0       	ldi	r22, 0x06	; 6
    3a28:	87 e2       	ldi	r24, 0x27	; 39
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	19 95       	eicall
    3a2e:	c4 e0       	ldi	r28, 0x04	; 4
    3a30:	d9 e1       	ldi	r29, 0x19	; 25
    3a32:	0f 2e       	mov	r0, r31
    3a34:	f8 e2       	ldi	r31, 0x28	; 40
    3a36:	cf 2e       	mov	r12, r31
    3a38:	d1 2c       	mov	r13, r1
    3a3a:	f0 2d       	mov	r31, r0
    3a3c:	d9 82       	std	Y+1, r13	; 0x01
    3a3e:	c8 82       	st	Y, r12
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	8a 83       	std	Y+2, r24	; 0x02
    3a44:	1b 82       	std	Y+3, r1	; 0x03
    3a46:	14 e0       	ldi	r17, 0x04	; 4
    3a48:	1c 83       	std	Y+4, r17	; 0x04
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	3b df       	rcall	.-394    	; 0x38c4 <_turn_off>
    3a4e:	d7 01       	movw	r26, r14
    3a50:	18 96       	adiw	r26, 0x08	; 8
    3a52:	ed 91       	ld	r30, X+
    3a54:	fc 91       	ld	r31, X
    3a56:	19 97       	sbiw	r26, 0x09	; 9
    3a58:	67 e0       	ldi	r22, 0x07	; 7
    3a5a:	87 e2       	ldi	r24, 0x27	; 39
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	19 95       	eicall
    3a60:	df 82       	std	Y+7, r13	; 0x07
    3a62:	ce 82       	std	Y+6, r12	; 0x06
    3a64:	87 e0       	ldi	r24, 0x07	; 7
    3a66:	88 87       	std	Y+8, r24	; 0x08
    3a68:	19 86       	std	Y+9, r1	; 0x09
    3a6a:	1a 87       	std	Y+10, r17	; 0x0a
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	2a df       	rcall	.-428    	; 0x38c4 <_turn_off>
    3a70:	d7 01       	movw	r26, r14
    3a72:	18 96       	adiw	r26, 0x08	; 8
    3a74:	ed 91       	ld	r30, X+
    3a76:	fc 91       	ld	r31, X
    3a78:	19 97       	sbiw	r26, 0x09	; 9
    3a7a:	65 e0       	ldi	r22, 0x05	; 5
    3a7c:	83 e3       	ldi	r24, 0x33	; 51
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	19 95       	eicall
    3a82:	d7 01       	movw	r26, r14
    3a84:	18 96       	adiw	r26, 0x08	; 8
    3a86:	ed 91       	ld	r30, X+
    3a88:	fc 91       	ld	r31, X
    3a8a:	19 97       	sbiw	r26, 0x09	; 9
    3a8c:	61 e0       	ldi	r22, 0x01	; 1
    3a8e:	84 e3       	ldi	r24, 0x34	; 52
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	19 95       	eicall
    3a94:	84 e3       	ldi	r24, 0x34	; 52
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	9d 87       	std	Y+13, r25	; 0x0d
    3a9a:	8c 87       	std	Y+12, r24	; 0x0c
    3a9c:	85 e0       	ldi	r24, 0x05	; 5
    3a9e:	8e 87       	std	Y+14, r24	; 0x0e
    3aa0:	1f 86       	std	Y+15, r1	; 0x0f
    3aa2:	18 8b       	std	Y+16, r17	; 0x10
    3aa4:	82 e0       	ldi	r24, 0x02	; 2
    3aa6:	0e df       	rcall	.-484    	; 0x38c4 <_turn_off>
    3aa8:	d7 01       	movw	r26, r14
    3aaa:	18 96       	adiw	r26, 0x08	; 8
    3aac:	ed 91       	ld	r30, X+
    3aae:	fc 91       	ld	r31, X
    3ab0:	19 97       	sbiw	r26, 0x09	; 9
    3ab2:	64 e0       	ldi	r22, 0x04	; 4
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	91 e0       	ldi	r25, 0x01	; 1
    3ab8:	19 95       	eicall
    3aba:	d7 01       	movw	r26, r14
    3abc:	18 96       	adiw	r26, 0x08	; 8
    3abe:	ed 91       	ld	r30, X+
    3ac0:	fc 91       	ld	r31, X
    3ac2:	19 97       	sbiw	r26, 0x09	; 9
    3ac4:	61 e0       	ldi	r22, 0x01	; 1
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	91 e0       	ldi	r25, 0x01	; 1
    3aca:	19 95       	eicall
    3acc:	82 e0       	ldi	r24, 0x02	; 2
    3ace:	91 e0       	ldi	r25, 0x01	; 1
    3ad0:	9b 8b       	std	Y+19, r25	; 0x13
    3ad2:	8a 8b       	std	Y+18, r24	; 0x12
    3ad4:	1c 8b       	std	Y+20, r17	; 0x14
    3ad6:	1d 8a       	std	Y+21, r1	; 0x15
    3ad8:	1e 8b       	std	Y+22, r17	; 0x16
    3ada:	83 e0       	ldi	r24, 0x03	; 3
    3adc:	f3 de       	rcall	.-538    	; 0x38c4 <_turn_off>
    3ade:	e1 2c       	mov	r14, r1
    3ae0:	f1 2c       	mov	r15, r1
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 ec       	ldi	r20, 0xC0	; 192
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	6b e2       	ldi	r22, 0x2B	; 43
    3aec:	75 e0       	ldi	r23, 0x05	; 5
    3aee:	8e eb       	ldi	r24, 0xBE	; 190
    3af0:	9c e1       	ldi	r25, 0x1C	; 28
    3af2:	0e 94 65 12 	call	0x24ca	; 0x24ca <xTaskCreate>
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	df 90       	pop	r13
    3b04:	cf 90       	pop	r12
    3b06:	08 95       	ret

00003b08 <led_slow_blink>:
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	c8 2f       	mov	r28, r24
    3b12:	d0 e0       	ldi	r29, 0x00	; 0
    3b14:	8e 01       	movw	r16, r28
    3b16:	00 0f       	add	r16, r16
    3b18:	11 1f       	adc	r17, r17
    3b1a:	d8 01       	movw	r26, r16
    3b1c:	ac 0f       	add	r26, r28
    3b1e:	bd 1f       	adc	r27, r29
    3b20:	aa 0f       	add	r26, r26
    3b22:	bb 1f       	adc	r27, r27
    3b24:	ac 5f       	subi	r26, 0xFC	; 252
    3b26:	b6 4e       	sbci	r27, 0xE6	; 230
    3b28:	e0 91 7c 1a 	lds	r30, 0x1A7C	; 0x801a7c <register_access+0xc>
    3b2c:	f0 91 7d 1a 	lds	r31, 0x1A7D	; 0x801a7d <register_access+0xd>
    3b30:	12 96       	adiw	r26, 0x02	; 2
    3b32:	6c 91       	ld	r22, X
    3b34:	12 97       	sbiw	r26, 0x02	; 2
    3b36:	8d 91       	ld	r24, X+
    3b38:	9c 91       	ld	r25, X
    3b3a:	19 95       	eicall
    3b3c:	c0 0f       	add	r28, r16
    3b3e:	d1 1f       	adc	r29, r17
    3b40:	cc 0f       	add	r28, r28
    3b42:	dd 1f       	adc	r29, r29
    3b44:	cc 5f       	subi	r28, 0xFC	; 252
    3b46:	d6 4e       	sbci	r29, 0xE6	; 230
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	8c 83       	std	Y+4, r24	; 0x04
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	1f 91       	pop	r17
    3b52:	0f 91       	pop	r16
    3b54:	08 95       	ret

00003b56 <led_fast_blink>:
    3b56:	0f 93       	push	r16
    3b58:	1f 93       	push	r17
    3b5a:	cf 93       	push	r28
    3b5c:	df 93       	push	r29
    3b5e:	c8 2f       	mov	r28, r24
    3b60:	d0 e0       	ldi	r29, 0x00	; 0
    3b62:	8e 01       	movw	r16, r28
    3b64:	00 0f       	add	r16, r16
    3b66:	11 1f       	adc	r17, r17
    3b68:	d8 01       	movw	r26, r16
    3b6a:	ac 0f       	add	r26, r28
    3b6c:	bd 1f       	adc	r27, r29
    3b6e:	aa 0f       	add	r26, r26
    3b70:	bb 1f       	adc	r27, r27
    3b72:	ac 5f       	subi	r26, 0xFC	; 252
    3b74:	b6 4e       	sbci	r27, 0xE6	; 230
    3b76:	e0 91 7c 1a 	lds	r30, 0x1A7C	; 0x801a7c <register_access+0xc>
    3b7a:	f0 91 7d 1a 	lds	r31, 0x1A7D	; 0x801a7d <register_access+0xd>
    3b7e:	12 96       	adiw	r26, 0x02	; 2
    3b80:	6c 91       	ld	r22, X
    3b82:	12 97       	sbiw	r26, 0x02	; 2
    3b84:	8d 91       	ld	r24, X+
    3b86:	9c 91       	ld	r25, X
    3b88:	19 95       	eicall
    3b8a:	c0 0f       	add	r28, r16
    3b8c:	d1 1f       	adc	r29, r17
    3b8e:	cc 0f       	add	r28, r28
    3b90:	dd 1f       	adc	r29, r29
    3b92:	cc 5f       	subi	r28, 0xFC	; 252
    3b94:	d6 4e       	sbci	r29, 0xE6	; 230
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	8c 83       	std	Y+4, r24	; 0x04
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	08 95       	ret

00003ba4 <led_led_on>:
    3ba4:	28 2f       	mov	r18, r24
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	f9 01       	movw	r30, r18
    3baa:	ee 0f       	add	r30, r30
    3bac:	ff 1f       	adc	r31, r31
    3bae:	e2 0f       	add	r30, r18
    3bb0:	f3 1f       	adc	r31, r19
    3bb2:	ee 0f       	add	r30, r30
    3bb4:	ff 1f       	adc	r31, r31
    3bb6:	ec 5f       	subi	r30, 0xFC	; 252
    3bb8:	f6 4e       	sbci	r31, 0xE6	; 230
    3bba:	93 e0       	ldi	r25, 0x03	; 3
    3bbc:	94 83       	std	Z+4, r25	; 0x04
    3bbe:	b0 ce       	rjmp	.-672    	; 0x3920 <_turn_on>
    3bc0:	08 95       	ret

00003bc2 <led_led_off>:
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	f9 01       	movw	r30, r18
    3bc8:	ee 0f       	add	r30, r30
    3bca:	ff 1f       	adc	r31, r31
    3bcc:	e2 0f       	add	r30, r18
    3bce:	f3 1f       	adc	r31, r19
    3bd0:	ee 0f       	add	r30, r30
    3bd2:	ff 1f       	adc	r31, r31
    3bd4:	ec 5f       	subi	r30, 0xFC	; 252
    3bd6:	f6 4e       	sbci	r31, 0xE6	; 230
    3bd8:	94 e0       	ldi	r25, 0x04	; 4
    3bda:	94 83       	std	Z+4, r25	; 0x04
    3bdc:	73 ce       	rjmp	.-794    	; 0x38c4 <_turn_off>
    3bde:	08 95       	ret

00003be0 <led_long_puls>:
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	fc 01       	movw	r30, r24
    3be4:	ee 0f       	add	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	df 01       	movw	r26, r30
    3bea:	a8 0f       	add	r26, r24
    3bec:	b9 1f       	adc	r27, r25
    3bee:	aa 0f       	add	r26, r26
    3bf0:	bb 1f       	adc	r27, r27
    3bf2:	ac 5f       	subi	r26, 0xFC	; 252
    3bf4:	b6 4e       	sbci	r27, 0xE6	; 230
    3bf6:	24 e0       	ldi	r18, 0x04	; 4
    3bf8:	15 96       	adiw	r26, 0x05	; 5
    3bfa:	2c 93       	st	X, r18
    3bfc:	15 97       	sbiw	r26, 0x05	; 5
    3bfe:	fd 01       	movw	r30, r26
    3c00:	14 82       	std	Z+4, r1	; 0x04
    3c02:	08 95       	ret

00003c04 <led_short_puls>:
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	fc 01       	movw	r30, r24
    3c08:	ee 0f       	add	r30, r30
    3c0a:	ff 1f       	adc	r31, r31
    3c0c:	df 01       	movw	r26, r30
    3c0e:	a8 0f       	add	r26, r24
    3c10:	b9 1f       	adc	r27, r25
    3c12:	aa 0f       	add	r26, r26
    3c14:	bb 1f       	adc	r27, r27
    3c16:	ac 5f       	subi	r26, 0xFC	; 252
    3c18:	b6 4e       	sbci	r27, 0xE6	; 230
    3c1a:	21 e0       	ldi	r18, 0x01	; 1
    3c1c:	15 96       	adiw	r26, 0x05	; 5
    3c1e:	2c 93       	st	X, r18
    3c20:	15 97       	sbiw	r26, 0x05	; 5
    3c22:	fd 01       	movw	r30, r26
    3c24:	14 82       	std	Z+4, r1	; 0x04
    3c26:	08 95       	ret

00003c28 <_serial_call_back>:
    3c28:	0f 93       	push	r16
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	1f 92       	push	r1
    3c32:	1f 92       	push	r1
    3c34:	cd b7       	in	r28, 0x3d	; 61
    3c36:	de b7       	in	r29, 0x3e	; 62
    3c38:	8c 01       	movw	r16, r24
    3c3a:	19 82       	std	Y+1, r1	; 0x01
    3c3c:	2d c0       	rjmp	.+90     	; 0x3c98 <_serial_call_back+0x70>
    3c3e:	e0 91 80 19 	lds	r30, 0x1980	; 0x801980 <rec_buf_inp.2947>
    3c42:	ec 32       	cpi	r30, 0x2C	; 44
    3c44:	50 f4       	brcc	.+20     	; 0x3c5a <_serial_call_back+0x32>
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	8e 0f       	add	r24, r30
    3c4a:	80 93 80 19 	sts	0x1980, r24	; 0x801980 <rec_buf_inp.2947>
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	ee 54       	subi	r30, 0x4E	; 78
    3c52:	f6 4e       	sbci	r31, 0xE6	; 230
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	80 83       	st	Z, r24
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <_serial_call_back+0x36>
    3c5a:	10 92 80 19 	sts	0x1980, r1	; 0x801980 <rec_buf_inp.2947>
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	8a 30       	cpi	r24, 0x0A	; 10
    3c62:	d1 f4       	brne	.+52     	; 0x3c98 <_serial_call_back+0x70>
    3c64:	40 91 80 19 	lds	r20, 0x1980	; 0x801980 <rec_buf_inp.2947>
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	fa 01       	movw	r30, r20
    3c6c:	e0 55       	subi	r30, 0x50	; 80
    3c6e:	f6 4e       	sbci	r31, 0xE6	; 230
    3c70:	10 82       	st	Z, r1
    3c72:	41 50       	subi	r20, 0x01	; 1
    3c74:	51 09       	sbc	r21, r1
    3c76:	9e 01       	movw	r18, r28
    3c78:	2f 5f       	subi	r18, 0xFF	; 255
    3c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7c:	62 eb       	ldi	r22, 0xB2	; 178
    3c7e:	79 e1       	ldi	r23, 0x19	; 25
    3c80:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_serial_reply_buffer_handle>
    3c84:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_serial_reply_buffer_handle+0x1>
    3c88:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <xStreamBufferSendFromISR>
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	81 11       	cpse	r24, r1
    3c90:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortYield>
    3c94:	10 92 80 19 	sts	0x1980, r1	; 0x801980 <rec_buf_inp.2947>
    3c98:	be 01       	movw	r22, r28
    3c9a:	6e 5f       	subi	r22, 0xFE	; 254
    3c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9e:	c8 01       	movw	r24, r16
    3ca0:	8f d5       	rcall	.+2846   	; 0x47c0 <serial_get_byte>
    3ca2:	88 23       	and	r24, r24
    3ca4:	61 f2       	breq	.-104    	; 0x3c3e <_serial_call_back+0x16>
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	df 91       	pop	r29
    3cac:	cf 91       	pop	r28
    3cae:	1f 91       	pop	r17
    3cb0:	0f 91       	pop	r16
    3cb2:	08 95       	ret

00003cb4 <_upload_message>:
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	8c 01       	movw	r16, r24
    3cbe:	eb 01       	movw	r28, r22
    3cc0:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_serial_reply_buffer_handle>
    3cc4:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_serial_reply_buffer_handle+0x1>
    3cc8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <xStreamBufferReset>
    3ccc:	b8 01       	movw	r22, r16
    3cce:	8c e1       	ldi	r24, 0x1C	; 28
    3cd0:	99 e1       	ldi	r25, 0x19	; 25
    3cd2:	0e 94 ed 2b 	call	0x57da	; 0x57da <strcpy>
    3cd6:	20 97       	sbiw	r28, 0x00	; 0
    3cd8:	79 f0       	breq	.+30     	; 0x3cf8 <_upload_message+0x44>
    3cda:	ec e1       	ldi	r30, 0x1C	; 28
    3cdc:	f9 e1       	ldi	r31, 0x19	; 25
    3cde:	01 90       	ld	r0, Z+
    3ce0:	00 20       	and	r0, r0
    3ce2:	e9 f7       	brne	.-6      	; 0x3cde <_upload_message+0x2a>
    3ce4:	31 97       	sbiw	r30, 0x01	; 1
    3ce6:	80 e2       	ldi	r24, 0x20	; 32
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
    3cee:	be 01       	movw	r22, r28
    3cf0:	8c e1       	ldi	r24, 0x1C	; 28
    3cf2:	99 e1       	ldi	r25, 0x19	; 25
    3cf4:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <strcat>
    3cf8:	ec e1       	ldi	r30, 0x1C	; 28
    3cfa:	f9 e1       	ldi	r31, 0x19	; 25
    3cfc:	df 01       	movw	r26, r30
    3cfe:	0d 90       	ld	r0, X+
    3d00:	00 20       	and	r0, r0
    3d02:	e9 f7       	brne	.-6      	; 0x3cfe <_upload_message+0x4a>
    3d04:	11 97       	sbiw	r26, 0x01	; 1
    3d06:	8d e0       	ldi	r24, 0x0D	; 13
    3d08:	9a e0       	ldi	r25, 0x0A	; 10
    3d0a:	11 96       	adiw	r26, 0x01	; 1
    3d0c:	9c 93       	st	X, r25
    3d0e:	8e 93       	st	-X, r24
    3d10:	12 96       	adiw	r26, 0x02	; 2
    3d12:	1c 92       	st	X, r1
    3d14:	01 90       	ld	r0, Z+
    3d16:	00 20       	and	r0, r0
    3d18:	e9 f7       	brne	.-6      	; 0x3d14 <_upload_message+0x60>
    3d1a:	31 97       	sbiw	r30, 0x01	; 1
    3d1c:	ec 51       	subi	r30, 0x1C	; 28
    3d1e:	f9 41       	sbci	r31, 0x19	; 25
    3d20:	ae 2f       	mov	r26, r30
    3d22:	8c e1       	ldi	r24, 0x1C	; 28
    3d24:	99 e1       	ldi	r25, 0x19	; 25
    3d26:	ac 01       	movw	r20, r24
    3d28:	6a 2f       	mov	r22, r26
    3d2a:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <_rn2483_serial>
    3d2e:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <_rn2483_serial+0x1>
    3d32:	f6 d4       	rcall	.+2540   	; 0x4720 <serial_send_bytes>
    3d34:	81 11       	cpse	r24, r1
    3d36:	11 c0       	rjmp	.+34     	; 0x3d5a <_upload_message+0xa6>
    3d38:	08 e2       	ldi	r16, 0x28	; 40
    3d3a:	15 e0       	ldi	r17, 0x05	; 5
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	4d e2       	ldi	r20, 0x2D	; 45
    3d42:	50 e0       	ldi	r21, 0x00	; 0
    3d44:	6c e0       	ldi	r22, 0x0C	; 12
    3d46:	7a e1       	ldi	r23, 0x1A	; 26
    3d48:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_serial_reply_buffer_handle>
    3d4c:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_serial_reply_buffer_handle+0x1>
    3d50:	0e 94 24 11 	call	0x2248	; 0x2248 <xStreamBufferReceive>
    3d54:	8c e0       	ldi	r24, 0x0C	; 12
    3d56:	9a e1       	ldi	r25, 0x1A	; 26
    3d58:	02 c0       	rjmp	.+4      	; 0x3d5e <_upload_message+0xaa>
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	df 91       	pop	r29
    3d60:	cf 91       	pop	r28
    3d62:	1f 91       	pop	r17
    3d64:	0f 91       	pop	r16
    3d66:	08 95       	ret

00003d68 <_reply2return_code>:
    3d68:	2f 92       	push	r2
    3d6a:	3f 92       	push	r3
    3d6c:	4f 92       	push	r4
    3d6e:	5f 92       	push	r5
    3d70:	6f 92       	push	r6
    3d72:	7f 92       	push	r7
    3d74:	8f 92       	push	r8
    3d76:	9f 92       	push	r9
    3d78:	af 92       	push	r10
    3d7a:	bf 92       	push	r11
    3d7c:	cf 92       	push	r12
    3d7e:	df 92       	push	r13
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	5c 01       	movw	r10, r24
    3d8e:	fc 01       	movw	r30, r24
    3d90:	01 90       	ld	r0, Z+
    3d92:	00 20       	and	r0, r0
    3d94:	e9 f7       	brne	.-6      	; 0x3d90 <_reply2return_code+0x28>
    3d96:	31 97       	sbiw	r30, 0x01	; 1
    3d98:	6f 01       	movw	r12, r30
    3d9a:	c8 1a       	sub	r12, r24
    3d9c:	d9 0a       	sbc	r13, r25
    3d9e:	5c 2c       	mov	r5, r12
    3da0:	0f 2e       	mov	r0, r31
    3da2:	fc ec       	ldi	r31, 0xCC	; 204
    3da4:	8f 2e       	mov	r8, r31
    3da6:	f7 e0       	ldi	r31, 0x07	; 7
    3da8:	9f 2e       	mov	r9, r31
    3daa:	f0 2d       	mov	r31, r0
    3dac:	e1 2c       	mov	r14, r1
    3dae:	f1 2c       	mov	r15, r1
    3db0:	4c 2c       	mov	r4, r12
    3db2:	37 01       	movw	r6, r14
    3db4:	f4 01       	movw	r30, r8
    3db6:	01 81       	ldd	r16, Z+1	; 0x01
    3db8:	12 81       	ldd	r17, Z+2	; 0x02
    3dba:	e8 01       	movw	r28, r16
    3dbc:	09 90       	ld	r0, Y+
    3dbe:	00 20       	and	r0, r0
    3dc0:	e9 f7       	brne	.-6      	; 0x3dbc <_reply2return_code+0x54>
    3dc2:	21 97       	sbiw	r28, 0x01	; 1
    3dc4:	c0 1b       	sub	r28, r16
    3dc6:	d1 0b       	sbc	r29, r17
    3dc8:	3c 2e       	mov	r3, r28
    3dca:	f9 e0       	ldi	r31, 0x09	; 9
    3dcc:	cf 16       	cp	r12, r31
    3dce:	d1 04       	cpc	r13, r1
    3dd0:	58 f0       	brcs	.+22     	; 0x3de8 <_reply2return_code+0x80>
    3dd2:	f4 01       	movw	r30, r8
    3dd4:	20 80       	ld	r2, Z
    3dd6:	fe e0       	ldi	r31, 0x0E	; 14
    3dd8:	2f 12       	cpse	r2, r31
    3dda:	06 c0       	rjmp	.+12     	; 0x3de8 <_reply2return_code+0x80>
    3ddc:	b8 01       	movw	r22, r16
    3dde:	c5 01       	movw	r24, r10
    3de0:	0e 94 bd 2b 	call	0x577a	; 0x577a <strcasestr>
    3de4:	89 2b       	or	r24, r25
    3de6:	09 f5       	brne	.+66     	; 0x3e2a <_reply2return_code+0xc2>
    3de8:	44 2d       	mov	r20, r4
    3dea:	35 14       	cp	r3, r5
    3dec:	08 f4       	brcc	.+2      	; 0x3df0 <_reply2return_code+0x88>
    3dee:	4c 2f       	mov	r20, r28
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	b8 01       	movw	r22, r16
    3df4:	c5 01       	movw	r24, r10
    3df6:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <strncasecmp>
    3dfa:	89 2b       	or	r24, r25
    3dfc:	49 f4       	brne	.+18     	; 0x3e10 <_reply2return_code+0xa8>
    3dfe:	f3 01       	movw	r30, r6
    3e00:	ee 0f       	add	r30, r30
    3e02:	ff 1f       	adc	r31, r31
    3e04:	e6 0d       	add	r30, r6
    3e06:	f7 1d       	adc	r31, r7
    3e08:	e4 53       	subi	r30, 0x34	; 52
    3e0a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e0c:	20 80       	ld	r2, Z
    3e0e:	0d c0       	rjmp	.+26     	; 0x3e2a <_reply2return_code+0xc2>
    3e10:	8f ef       	ldi	r24, 0xFF	; 255
    3e12:	e8 1a       	sub	r14, r24
    3e14:	f8 0a       	sbc	r15, r24
    3e16:	e3 e0       	ldi	r30, 0x03	; 3
    3e18:	8e 0e       	add	r8, r30
    3e1a:	91 1c       	adc	r9, r1
    3e1c:	f1 e1       	ldi	r31, 0x11	; 17
    3e1e:	ef 16       	cp	r14, r31
    3e20:	f1 04       	cpc	r15, r1
    3e22:	39 f6       	brne	.-114    	; 0x3db2 <_reply2return_code+0x4a>
    3e24:	68 94       	set
    3e26:	22 24       	eor	r2, r2
    3e28:	24 f8       	bld	r2, 4
    3e2a:	82 2d       	mov	r24, r2
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	cf 90       	pop	r12
    3e3c:	bf 90       	pop	r11
    3e3e:	af 90       	pop	r10
    3e40:	9f 90       	pop	r9
    3e42:	8f 90       	pop	r8
    3e44:	7f 90       	pop	r7
    3e46:	6f 90       	pop	r6
    3e48:	5f 90       	pop	r5
    3e4a:	4f 90       	pop	r4
    3e4c:	3f 90       	pop	r3
    3e4e:	2f 90       	pop	r2
    3e50:	08 95       	ret

00003e52 <_upload_message_rc>:
    3e52:	30 df       	rcall	.-416    	; 0x3cb4 <_upload_message>
    3e54:	89 cf       	rjmp	.-238    	; 0x3d68 <_reply2return_code>
    3e56:	08 95       	ret

00003e58 <lora_driver_flush_buffers>:
    3e58:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_serial_reply_buffer_handle>
    3e5c:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_serial_reply_buffer_handle+0x1>
    3e60:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <xStreamBufferReset>
    3e64:	08 95       	ret

00003e66 <lora_driver_create>:
    3e66:	8f 92       	push	r8
    3e68:	9f 92       	push	r9
    3e6a:	af 92       	push	r10
    3e6c:	cf 92       	push	r12
    3e6e:	ef 92       	push	r14
    3e70:	0f 93       	push	r16
    3e72:	1f 93       	push	r17
    3e74:	cf 93       	push	r28
    3e76:	c8 2f       	mov	r28, r24
    3e78:	8b 01       	movw	r16, r22
    3e7a:	41 e0       	ldi	r20, 0x01	; 1
    3e7c:	60 e0       	ldi	r22, 0x00	; 0
    3e7e:	70 e0       	ldi	r23, 0x00	; 0
    3e80:	88 ec       	ldi	r24, 0xC8	; 200
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <xStreamBufferGenericCreate>
    3e88:	90 93 84 19 	sts	0x1984, r25	; 0x801984 <_serial_reply_buffer_handle+0x1>
    3e8c:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <_serial_reply_buffer_handle>
    3e90:	10 93 82 19 	sts	0x1982, r17	; 0x801982 <_downlinkMessageBuffer+0x1>
    3e94:	00 93 81 19 	sts	0x1981, r16	; 0x801981 <_downlinkMessageBuffer>
    3e98:	0f 2e       	mov	r0, r31
    3e9a:	f4 e1       	ldi	r31, 0x14	; 20
    3e9c:	8f 2e       	mov	r8, r31
    3e9e:	fe e1       	ldi	r31, 0x1E	; 30
    3ea0:	9f 2e       	mov	r9, r31
    3ea2:	f0 2d       	mov	r31, r0
    3ea4:	68 94       	set
    3ea6:	aa 24       	eor	r10, r10
    3ea8:	a6 f8       	bld	r10, 6
    3eaa:	68 94       	set
    3eac:	cc 24       	eor	r12, r12
    3eae:	c6 f8       	bld	r12, 6
    3eb0:	e1 2c       	mov	r14, r1
    3eb2:	00 e0       	ldi	r16, 0x00	; 0
    3eb4:	23 e0       	ldi	r18, 0x03	; 3
    3eb6:	40 e0       	ldi	r20, 0x00	; 0
    3eb8:	51 ee       	ldi	r21, 0xE1	; 225
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	70 e0       	ldi	r23, 0x00	; 0
    3ebe:	8c 2f       	mov	r24, r28
    3ec0:	74 d3       	rcall	.+1768   	; 0x45aa <serial_new_instance>
    3ec2:	90 93 86 19 	sts	0x1986, r25	; 0x801986 <_rn2483_serial+0x1>
    3ec6:	80 93 85 19 	sts	0x1985, r24	; 0x801985 <_rn2483_serial>
    3eca:	e0 91 78 1a 	lds	r30, 0x1A78	; 0x801a78 <register_access+0x8>
    3ece:	f0 91 79 1a 	lds	r31, 0x1A79	; 0x801a79 <register_access+0x9>
    3ed2:	64 e0       	ldi	r22, 0x04	; 4
    3ed4:	87 e0       	ldi	r24, 0x07	; 7
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	19 95       	eicall
    3eda:	cf 91       	pop	r28
    3edc:	1f 91       	pop	r17
    3ede:	0f 91       	pop	r16
    3ee0:	ef 90       	pop	r14
    3ee2:	cf 90       	pop	r12
    3ee4:	af 90       	pop	r10
    3ee6:	9f 90       	pop	r9
    3ee8:	8f 90       	pop	r8
    3eea:	08 95       	ret

00003eec <lora_driver_reset_rn2483>:
    3eec:	88 23       	and	r24, r24
    3eee:	49 f0       	breq	.+18     	; 0x3f02 <lora_driver_reset_rn2483+0x16>
    3ef0:	e0 91 82 1a 	lds	r30, 0x1A82	; 0x801a82 <register_access+0x12>
    3ef4:	f0 91 83 1a 	lds	r31, 0x1A83	; 0x801a83 <register_access+0x13>
    3ef8:	64 e0       	ldi	r22, 0x04	; 4
    3efa:	88 e0       	ldi	r24, 0x08	; 8
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	19 95       	eicall
    3f00:	08 95       	ret
    3f02:	e0 91 78 1a 	lds	r30, 0x1A78	; 0x801a78 <register_access+0x8>
    3f06:	f0 91 79 1a 	lds	r31, 0x1A79	; 0x801a79 <register_access+0x9>
    3f0a:	64 e0       	ldi	r22, 0x04	; 4
    3f0c:	88 e0       	ldi	r24, 0x08	; 8
    3f0e:	91 e0       	ldi	r25, 0x01	; 1
    3f10:	19 95       	eicall
    3f12:	08 95       	ret

00003f14 <lora_driver_rn2483_factory_reset>:
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	70 e0       	ldi	r23, 0x00	; 0
    3f18:	82 e5       	ldi	r24, 0x52	; 82
    3f1a:	95 e0       	ldi	r25, 0x05	; 5
    3f1c:	cb de       	rcall	.-618    	; 0x3cb4 <_upload_message>
    3f1e:	ec e0       	ldi	r30, 0x0C	; 12
    3f20:	fa e1       	ldi	r31, 0x1A	; 26
    3f22:	01 90       	ld	r0, Z+
    3f24:	00 20       	and	r0, r0
    3f26:	e9 f7       	brne	.-6      	; 0x3f22 <lora_driver_rn2483_factory_reset+0xe>
    3f28:	31 97       	sbiw	r30, 0x01	; 1
    3f2a:	ec 50       	subi	r30, 0x0C	; 12
    3f2c:	fa 41       	sbci	r31, 0x1A	; 26
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	75 97       	sbiw	r30, 0x15	; 21
    3f32:	08 f0       	brcs	.+2      	; 0x3f36 <lora_driver_rn2483_factory_reset+0x22>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	08 95       	ret

00003f38 <lora_driver_get_rn2483_hweui>:
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	ec 01       	movw	r28, r24
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	70 e0       	ldi	r23, 0x00	; 0
    3f42:	83 e6       	ldi	r24, 0x63	; 99
    3f44:	95 e0       	ldi	r25, 0x05	; 5
    3f46:	b6 de       	rcall	.-660    	; 0x3cb4 <_upload_message>
    3f48:	ec e0       	ldi	r30, 0x0C	; 12
    3f4a:	fa e1       	ldi	r31, 0x1A	; 26
    3f4c:	01 90       	ld	r0, Z+
    3f4e:	00 20       	and	r0, r0
    3f50:	e9 f7       	brne	.-6      	; 0x3f4c <lora_driver_get_rn2483_hweui+0x14>
    3f52:	ed 51       	subi	r30, 0x1D	; 29
    3f54:	fa 41       	sbci	r31, 0x1A	; 26
    3f56:	39 f4       	brne	.+14     	; 0x3f66 <lora_driver_get_rn2483_hweui+0x2e>
    3f58:	6c e0       	ldi	r22, 0x0C	; 12
    3f5a:	7a e1       	ldi	r23, 0x1A	; 26
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	0e 94 ed 2b 	call	0x57da	; 0x57da <strcpy>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <lora_driver_get_rn2483_hweui+0x32>
    3f66:	18 82       	st	Y, r1
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	08 95       	ret

00003f70 <lora_driver_set_device_identifier>:
    3f70:	fc 01       	movw	r30, r24
    3f72:	01 90       	ld	r0, Z+
    3f74:	00 20       	and	r0, r0
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <lora_driver_set_device_identifier+0x2>
    3f78:	9f 01       	movw	r18, r30
    3f7a:	21 51       	subi	r18, 0x11	; 17
    3f7c:	31 09       	sbc	r19, r1
    3f7e:	28 17       	cp	r18, r24
    3f80:	39 07       	cpc	r19, r25
    3f82:	29 f4       	brne	.+10     	; 0x3f8e <lora_driver_set_device_identifier+0x1e>
    3f84:	bc 01       	movw	r22, r24
    3f86:	81 e9       	ldi	r24, 0x91	; 145
    3f88:	95 e0       	ldi	r25, 0x05	; 5
    3f8a:	63 cf       	rjmp	.-314    	; 0x3e52 <_upload_message_rc>
    3f8c:	08 95       	ret
    3f8e:	89 e0       	ldi	r24, 0x09	; 9
    3f90:	08 95       	ret

00003f92 <lora_driver_set_application_identifier>:
    3f92:	fc 01       	movw	r30, r24
    3f94:	01 90       	ld	r0, Z+
    3f96:	00 20       	and	r0, r0
    3f98:	e9 f7       	brne	.-6      	; 0x3f94 <lora_driver_set_application_identifier+0x2>
    3f9a:	9f 01       	movw	r18, r30
    3f9c:	21 51       	subi	r18, 0x11	; 17
    3f9e:	31 09       	sbc	r19, r1
    3fa0:	28 17       	cp	r18, r24
    3fa2:	39 07       	cpc	r19, r25
    3fa4:	29 f4       	brne	.+10     	; 0x3fb0 <lora_driver_set_application_identifier+0x1e>
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	80 ea       	ldi	r24, 0xA0	; 160
    3faa:	95 e0       	ldi	r25, 0x05	; 5
    3fac:	52 cf       	rjmp	.-348    	; 0x3e52 <_upload_message_rc>
    3fae:	08 95       	ret
    3fb0:	89 e0       	ldi	r24, 0x09	; 9
    3fb2:	08 95       	ret

00003fb4 <lora_driver_set_application_key>:
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	01 90       	ld	r0, Z+
    3fb8:	00 20       	and	r0, r0
    3fba:	e9 f7       	brne	.-6      	; 0x3fb6 <lora_driver_set_application_key+0x2>
    3fbc:	9f 01       	movw	r18, r30
    3fbe:	21 52       	subi	r18, 0x21	; 33
    3fc0:	31 09       	sbc	r19, r1
    3fc2:	28 17       	cp	r18, r24
    3fc4:	39 07       	cpc	r19, r25
    3fc6:	29 f4       	brne	.+10     	; 0x3fd2 <lora_driver_set_application_key+0x1e>
    3fc8:	bc 01       	movw	r22, r24
    3fca:	8f ea       	ldi	r24, 0xAF	; 175
    3fcc:	95 e0       	ldi	r25, 0x05	; 5
    3fce:	41 cf       	rjmp	.-382    	; 0x3e52 <_upload_message_rc>
    3fd0:	08 95       	ret
    3fd2:	89 e0       	ldi	r24, 0x09	; 9
    3fd4:	08 95       	ret

00003fd6 <lora_driver_save_mac>:
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	8e ee       	ldi	r24, 0xEE	; 238
    3fdc:	95 e0       	ldi	r25, 0x05	; 5
    3fde:	39 cf       	rjmp	.-398    	; 0x3e52 <_upload_message_rc>
    3fe0:	08 95       	ret

00003fe2 <lora_driver_join>:
    3fe2:	0f 93       	push	r16
    3fe4:	1f 93       	push	r17
    3fe6:	e8 2f       	mov	r30, r24
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	ee 0f       	add	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	e8 53       	subi	r30, 0x38	; 56
    3ff0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ff2:	60 81       	ld	r22, Z
    3ff4:	71 81       	ldd	r23, Z+1	; 0x01
    3ff6:	87 ef       	ldi	r24, 0xF7	; 247
    3ff8:	95 e0       	ldi	r25, 0x05	; 5
    3ffa:	2b df       	rcall	.-426    	; 0x3e52 <_upload_message_rc>
    3ffc:	81 11       	cpse	r24, r1
    3ffe:	14 c0       	rjmp	.+40     	; 0x4028 <lora_driver_join+0x46>
    4000:	08 e2       	ldi	r16, 0x28	; 40
    4002:	15 e0       	ldi	r17, 0x05	; 5
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4d e2       	ldi	r20, 0x2D	; 45
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	6c e0       	ldi	r22, 0x0C	; 12
    400e:	7a e1       	ldi	r23, 0x1A	; 26
    4010:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_serial_reply_buffer_handle>
    4014:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_serial_reply_buffer_handle+0x1>
    4018:	0e 94 24 11 	call	0x2248	; 0x2248 <xStreamBufferReceive>
    401c:	88 23       	and	r24, r24
    401e:	21 f0       	breq	.+8      	; 0x4028 <lora_driver_join+0x46>
    4020:	8c e0       	ldi	r24, 0x0C	; 12
    4022:	9a e1       	ldi	r25, 0x1A	; 26
    4024:	a1 de       	rcall	.-702    	; 0x3d68 <_reply2return_code>
    4026:	03 c0       	rjmp	.+6      	; 0x402e <lora_driver_join+0x4c>
    4028:	8c e0       	ldi	r24, 0x0C	; 12
    402a:	9a e1       	ldi	r25, 0x1A	; 26
    402c:	9d de       	rcall	.-710    	; 0x3d68 <_reply2return_code>
    402e:	1f 91       	pop	r17
    4030:	0f 91       	pop	r16
    4032:	08 95       	ret

00004034 <lora_driver_sent_upload_message>:
    4034:	0f 93       	push	r16
    4036:	1f 93       	push	r17
    4038:	cf 93       	push	r28
    403a:	df 93       	push	r29
    403c:	1f 92       	push	r1
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	db 01       	movw	r26, r22
    4044:	11 96       	adiw	r26, 0x01	; 1
    4046:	9c 91       	ld	r25, X
    4048:	11 97       	sbiw	r26, 0x01	; 1
    404a:	95 31       	cpi	r25, 0x15	; 21
    404c:	08 f0       	brcs	.+2      	; 0x4050 <lora_driver_sent_upload_message+0x1c>
    404e:	b4 c0       	rjmp	.+360    	; 0x41b8 <lora_driver_sent_upload_message+0x184>
    4050:	99 23       	and	r25, r25
    4052:	81 f1       	breq	.+96     	; 0x40b4 <lora_driver_sent_upload_message+0x80>
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	27 2f       	mov	r18, r23
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	46 2f       	mov	r20, r22
    405e:	50 e0       	ldi	r21, 0x00	; 0
    4060:	fd 01       	movw	r30, r26
    4062:	e4 0f       	add	r30, r20
    4064:	f5 1f       	adc	r31, r21
    4066:	92 81       	ldd	r25, Z+2	; 0x02
    4068:	92 95       	swap	r25
    406a:	9f 70       	andi	r25, 0x0F	; 15
    406c:	9a 30       	cpi	r25, 0x0A	; 10
    406e:	10 f0       	brcs	.+4      	; 0x4074 <lora_driver_sent_upload_message+0x40>
    4070:	99 5c       	subi	r25, 0xC9	; 201
    4072:	01 c0       	rjmp	.+2      	; 0x4076 <lora_driver_sent_upload_message+0x42>
    4074:	90 5d       	subi	r25, 0xD0	; 208
    4076:	f9 01       	movw	r30, r18
    4078:	e3 56       	subi	r30, 0x63	; 99
    407a:	f6 4e       	sbci	r31, 0xE6	; 230
    407c:	90 83       	st	Z, r25
    407e:	2f 5f       	subi	r18, 0xFF	; 255
    4080:	3f 4f       	sbci	r19, 0xFF	; 255
    4082:	fd 01       	movw	r30, r26
    4084:	e4 0f       	add	r30, r20
    4086:	f5 1f       	adc	r31, r21
    4088:	92 81       	ldd	r25, Z+2	; 0x02
    408a:	9f 70       	andi	r25, 0x0F	; 15
    408c:	49 2f       	mov	r20, r25
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	4a 30       	cpi	r20, 0x0A	; 10
    4092:	51 05       	cpc	r21, r1
    4094:	14 f0       	brlt	.+4      	; 0x409a <lora_driver_sent_upload_message+0x66>
    4096:	99 5c       	subi	r25, 0xC9	; 201
    4098:	01 c0       	rjmp	.+2      	; 0x409c <lora_driver_sent_upload_message+0x68>
    409a:	90 5d       	subi	r25, 0xD0	; 208
    409c:	f9 01       	movw	r30, r18
    409e:	e3 56       	subi	r30, 0x63	; 99
    40a0:	f6 4e       	sbci	r31, 0xE6	; 230
    40a2:	90 83       	st	Z, r25
    40a4:	7e 5f       	subi	r23, 0xFE	; 254
    40a6:	6f 5f       	subi	r22, 0xFF	; 255
    40a8:	11 96       	adiw	r26, 0x01	; 1
    40aa:	9c 91       	ld	r25, X
    40ac:	11 97       	sbiw	r26, 0x01	; 1
    40ae:	69 17       	cp	r22, r25
    40b0:	98 f2       	brcs	.-90     	; 0x4058 <lora_driver_sent_upload_message+0x24>
    40b2:	01 c0       	rjmp	.+2      	; 0x40b6 <lora_driver_sent_upload_message+0x82>
    40b4:	70 e0       	ldi	r23, 0x00	; 0
    40b6:	e7 2f       	mov	r30, r23
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	e3 56       	subi	r30, 0x63	; 99
    40bc:	f6 4e       	sbci	r31, 0xE6	; 230
    40be:	10 82       	st	Z, r1
    40c0:	4c 91       	ld	r20, X
    40c2:	81 11       	cpse	r24, r1
    40c4:	03 c0       	rjmp	.+6      	; 0x40cc <lora_driver_sent_upload_message+0x98>
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	96 e0       	ldi	r25, 0x06	; 6
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <lora_driver_sent_upload_message+0x9c>
    40cc:	82 e0       	ldi	r24, 0x02	; 2
    40ce:	96 e0       	ldi	r25, 0x06	; 6
    40d0:	2d e9       	ldi	r18, 0x9D	; 157
    40d2:	39 e1       	ldi	r19, 0x19	; 25
    40d4:	3f 93       	push	r19
    40d6:	2f 93       	push	r18
    40d8:	1f 92       	push	r1
    40da:	4f 93       	push	r20
    40dc:	9f 93       	push	r25
    40de:	8f 93       	push	r24
    40e0:	86 e0       	ldi	r24, 0x06	; 6
    40e2:	96 e0       	ldi	r25, 0x06	; 6
    40e4:	9f 93       	push	r25
    40e6:	8f 93       	push	r24
    40e8:	8f ed       	ldi	r24, 0xDF	; 223
    40ea:	99 e1       	ldi	r25, 0x19	; 25
    40ec:	9f 93       	push	r25
    40ee:	8f 93       	push	r24
    40f0:	0e 94 4f 2c 	call	0x589e	; 0x589e <sprintf>
    40f4:	60 e0       	ldi	r22, 0x00	; 0
    40f6:	70 e0       	ldi	r23, 0x00	; 0
    40f8:	8f ed       	ldi	r24, 0xDF	; 223
    40fa:	99 e1       	ldi	r25, 0x19	; 25
    40fc:	aa de       	rcall	.-684    	; 0x3e52 <_upload_message_rc>
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	81 11       	cpse	r24, r1
    410a:	59 c0       	rjmp	.+178    	; 0x41be <lora_driver_sent_upload_message+0x18a>
    410c:	08 e2       	ldi	r16, 0x28	; 40
    410e:	15 e0       	ldi	r17, 0x05	; 5
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4d e2       	ldi	r20, 0x2D	; 45
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	6c e0       	ldi	r22, 0x0C	; 12
    411a:	7a e1       	ldi	r23, 0x1A	; 26
    411c:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <_serial_reply_buffer_handle>
    4120:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <_serial_reply_buffer_handle+0x1>
    4124:	0e 94 24 11 	call	0x2248	; 0x2248 <xStreamBufferReceive>
    4128:	88 23       	and	r24, r24
    412a:	09 f4       	brne	.+2      	; 0x412e <lora_driver_sent_upload_message+0xfa>
    412c:	47 c0       	rjmp	.+142    	; 0x41bc <lora_driver_sent_upload_message+0x188>
    412e:	8c e0       	ldi	r24, 0x0C	; 12
    4130:	9a e1       	ldi	r25, 0x1A	; 26
    4132:	1a de       	rcall	.-972    	; 0x3d68 <_reply2return_code>
    4134:	8e 30       	cpi	r24, 0x0E	; 14
    4136:	09 f0       	breq	.+2      	; 0x413a <lora_driver_sent_upload_message+0x106>
    4138:	42 c0       	rjmp	.+132    	; 0x41be <lora_driver_sent_upload_message+0x18a>
    413a:	87 e0       	ldi	r24, 0x07	; 7
    413c:	89 83       	std	Y+1, r24	; 0x01
    413e:	80 91 81 19 	lds	r24, 0x1981	; 0x801981 <_downlinkMessageBuffer>
    4142:	90 91 82 19 	lds	r25, 0x1982	; 0x801982 <_downlinkMessageBuffer+0x1>
    4146:	89 2b       	or	r24, r25
    4148:	a9 f1       	breq	.+106    	; 0x41b4 <lora_driver_sent_upload_message+0x180>
    414a:	be 01       	movw	r22, r28
    414c:	6f 5f       	subi	r22, 0xFF	; 255
    414e:	7f 4f       	sbci	r23, 0xFF	; 255
    4150:	8c e0       	ldi	r24, 0x0C	; 12
    4152:	9a e1       	ldi	r25, 0x1A	; 26
    4154:	68 d1       	rcall	.+720    	; 0x4426 <decode_port_no>
    4156:	80 93 87 19 	sts	0x1987, r24	; 0x801987 <_downlink_payload>
    415a:	e9 81       	ldd	r30, Y+1	; 0x01
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	e4 5f       	subi	r30, 0xF4	; 244
    4160:	f5 4e       	sbci	r31, 0xE5	; 229
    4162:	df 01       	movw	r26, r30
    4164:	0d 90       	ld	r0, X+
    4166:	00 20       	and	r0, r0
    4168:	e9 f7       	brne	.-6      	; 0x4164 <lora_driver_sent_upload_message+0x130>
    416a:	11 97       	sbiw	r26, 0x01	; 1
    416c:	ae 1b       	sub	r26, r30
    416e:	bf 0b       	sbc	r27, r31
    4170:	aa 23       	and	r26, r26
    4172:	91 f0       	breq	.+36     	; 0x4198 <lora_driver_sent_upload_message+0x164>
    4174:	bb 27       	eor	r27, r27
    4176:	cd 01       	movw	r24, r26
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	9c 01       	movw	r18, r24
    417c:	12 f4       	brpl	.+4      	; 0x4182 <lora_driver_sent_upload_message+0x14e>
    417e:	2f 5f       	subi	r18, 0xFF	; 255
    4180:	3f 4f       	sbci	r19, 0xFF	; 255
    4182:	35 95       	asr	r19
    4184:	27 95       	ror	r18
    4186:	20 93 88 19 	sts	0x1988, r18	; 0x801988 <_downlink_payload+0x1>
    418a:	af 01       	movw	r20, r30
    418c:	4f 5f       	subi	r20, 0xFF	; 255
    418e:	5f 4f       	sbci	r21, 0xFF	; 255
    4190:	64 e1       	ldi	r22, 0x14	; 20
    4192:	89 e8       	ldi	r24, 0x89	; 137
    4194:	99 e1       	ldi	r25, 0x19	; 25
    4196:	73 d1       	rcall	.+742    	; 0x447e <decode_hexadecimal_string_bytes>
    4198:	01 e0       	ldi	r16, 0x01	; 1
    419a:	10 e0       	ldi	r17, 0x00	; 0
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	46 e1       	ldi	r20, 0x16	; 22
    41a2:	50 e0       	ldi	r21, 0x00	; 0
    41a4:	67 e8       	ldi	r22, 0x87	; 135
    41a6:	79 e1       	ldi	r23, 0x19	; 25
    41a8:	80 91 81 19 	lds	r24, 0x1981	; 0x801981 <_downlinkMessageBuffer>
    41ac:	90 91 82 19 	lds	r25, 0x1982	; 0x801982 <_downlinkMessageBuffer+0x1>
    41b0:	0e 94 39 10 	call	0x2072	; 0x2072 <xStreamBufferSend>
    41b4:	8e e0       	ldi	r24, 0x0E	; 14
    41b6:	03 c0       	rjmp	.+6      	; 0x41be <lora_driver_sent_upload_message+0x18a>
    41b8:	84 e1       	ldi	r24, 0x14	; 20
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <lora_driver_sent_upload_message+0x18a>
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	0f 90       	pop	r0
    41c0:	df 91       	pop	r29
    41c2:	cf 91       	pop	r28
    41c4:	1f 91       	pop	r17
    41c6:	0f 91       	pop	r16
    41c8:	08 95       	ret

000041ca <lora_driver_set_adaptive_data_rate>:
    41ca:	81 30       	cpi	r24, 0x01	; 1
    41cc:	19 f0       	breq	.+6      	; 0x41d4 <lora_driver_set_adaptive_data_rate+0xa>
    41ce:	66 e1       	ldi	r22, 0x16	; 22
    41d0:	76 e0       	ldi	r23, 0x06	; 6
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <lora_driver_set_adaptive_data_rate+0xe>
    41d4:	6f ee       	ldi	r22, 0xEF	; 239
    41d6:	76 e0       	ldi	r23, 0x06	; 6
    41d8:	8a e1       	ldi	r24, 0x1A	; 26
    41da:	96 e0       	ldi	r25, 0x06	; 6
    41dc:	3a ce       	rjmp	.-908    	; 0x3e52 <_upload_message_rc>
    41de:	08 95       	ret

000041e0 <lora_driver_set_receive_delay>:
    41e0:	9f 93       	push	r25
    41e2:	8f 93       	push	r24
    41e4:	8b e4       	ldi	r24, 0x4B	; 75
    41e6:	96 e0       	ldi	r25, 0x06	; 6
    41e8:	9f 93       	push	r25
    41ea:	8f 93       	push	r24
    41ec:	8f ed       	ldi	r24, 0xDF	; 223
    41ee:	99 e1       	ldi	r25, 0x19	; 25
    41f0:	9f 93       	push	r25
    41f2:	8f 93       	push	r24
    41f4:	0e 94 4f 2c 	call	0x589e	; 0x589e <sprintf>
    41f8:	60 e0       	ldi	r22, 0x00	; 0
    41fa:	70 e0       	ldi	r23, 0x00	; 0
    41fc:	8f ed       	ldi	r24, 0xDF	; 223
    41fe:	99 e1       	ldi	r25, 0x19	; 25
    4200:	28 de       	rcall	.-944    	; 0x3e52 <_upload_message_rc>
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	08 95       	ret

00004210 <lora_driver_configure_to_eu868>:
    4210:	2f 92       	push	r2
    4212:	3f 92       	push	r3
    4214:	4f 92       	push	r4
    4216:	5f 92       	push	r5
    4218:	6f 92       	push	r6
    421a:	7f 92       	push	r7
    421c:	8f 92       	push	r8
    421e:	9f 92       	push	r9
    4220:	af 92       	push	r10
    4222:	bf 92       	push	r11
    4224:	cf 92       	push	r12
    4226:	df 92       	push	r13
    4228:	ef 92       	push	r14
    422a:	ff 92       	push	r15
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	a0 97       	sbiw	r28, 0x20	; 32
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	68 e7       	ldi	r22, 0x78	; 120
    4246:	76 e0       	ldi	r23, 0x06	; 6
    4248:	84 e8       	ldi	r24, 0x84	; 132
    424a:	96 e0       	ldi	r25, 0x06	; 6
    424c:	33 dd       	rcall	.-1434   	; 0x3cb4 <_upload_message>
    424e:	8c dd       	rcall	.-1256   	; 0x3d68 <_reply2return_code>
    4250:	81 11       	cpse	r24, r1
    4252:	a3 c0       	rjmp	.+326    	; 0x439a <lora_driver_configure_to_eu868+0x18a>
    4254:	80 e2       	ldi	r24, 0x20	; 32
    4256:	e3 e2       	ldi	r30, 0x23	; 35
    4258:	f2 e0       	ldi	r31, 0x02	; 2
    425a:	de 01       	movw	r26, r28
    425c:	11 96       	adiw	r26, 0x01	; 1
    425e:	01 90       	ld	r0, Z+
    4260:	0d 92       	st	X+, r0
    4262:	8a 95       	dec	r24
    4264:	e1 f7       	brne	.-8      	; 0x425e <lora_driver_configure_to_eu868+0x4e>
    4266:	9e 01       	movw	r18, r28
    4268:	2f 5f       	subi	r18, 0xFF	; 255
    426a:	3f 4f       	sbci	r19, 0xFF	; 255
    426c:	69 01       	movw	r12, r18
    426e:	e1 2c       	mov	r14, r1
    4270:	f1 2c       	mov	r15, r1
    4272:	0f 2e       	mov	r0, r31
    4274:	f0 e9       	ldi	r31, 0x90	; 144
    4276:	af 2e       	mov	r10, r31
    4278:	f6 e0       	ldi	r31, 0x06	; 6
    427a:	bf 2e       	mov	r11, r31
    427c:	f0 2d       	mov	r31, r0
    427e:	0f ed       	ldi	r16, 0xDF	; 223
    4280:	19 e1       	ldi	r17, 0x19	; 25
    4282:	0f 2e       	mov	r0, r31
    4284:	f9 ea       	ldi	r31, 0xA9	; 169
    4286:	4f 2e       	mov	r4, r31
    4288:	f6 e0       	ldi	r31, 0x06	; 6
    428a:	5f 2e       	mov	r5, r31
    428c:	f0 2d       	mov	r31, r0
    428e:	0f 2e       	mov	r0, r31
    4290:	f0 ec       	ldi	r31, 0xC0	; 192
    4292:	8f 2e       	mov	r8, r31
    4294:	f6 e0       	ldi	r31, 0x06	; 6
    4296:	9f 2e       	mov	r9, r31
    4298:	f0 2d       	mov	r31, r0
    429a:	0f 2e       	mov	r0, r31
    429c:	fa ed       	ldi	r31, 0xDA	; 218
    429e:	6f 2e       	mov	r6, r31
    42a0:	f6 e0       	ldi	r31, 0x06	; 6
    42a2:	7f 2e       	mov	r7, r31
    42a4:	f0 2d       	mov	r31, r0
    42a6:	3e 2c       	mov	r3, r14
    42a8:	2f 2c       	mov	r2, r15
    42aa:	ff 92       	push	r15
    42ac:	ef 92       	push	r14
    42ae:	bf 92       	push	r11
    42b0:	af 92       	push	r10
    42b2:	1f 93       	push	r17
    42b4:	0f 93       	push	r16
    42b6:	0e 94 4f 2c 	call	0x589e	; 0x589e <sprintf>
    42ba:	60 e0       	ldi	r22, 0x00	; 0
    42bc:	70 e0       	ldi	r23, 0x00	; 0
    42be:	c8 01       	movw	r24, r16
    42c0:	f9 dc       	rcall	.-1550   	; 0x3cb4 <_upload_message>
    42c2:	52 dd       	rcall	.-1372   	; 0x3d68 <_reply2return_code>
    42c4:	0f 90       	pop	r0
    42c6:	0f 90       	pop	r0
    42c8:	0f 90       	pop	r0
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	81 11       	cpse	r24, r1
    42d2:	63 c0       	rjmp	.+198    	; 0x439a <lora_driver_configure_to_eu868+0x18a>
    42d4:	32 e0       	ldi	r19, 0x02	; 2
    42d6:	3e 15       	cp	r19, r14
    42d8:	e8 f4       	brcc	.+58     	; 0x4314 <lora_driver_configure_to_eu868+0x104>
    42da:	f6 01       	movw	r30, r12
    42dc:	83 81       	ldd	r24, Z+3	; 0x03
    42de:	8f 93       	push	r24
    42e0:	82 81       	ldd	r24, Z+2	; 0x02
    42e2:	8f 93       	push	r24
    42e4:	81 81       	ldd	r24, Z+1	; 0x01
    42e6:	8f 93       	push	r24
    42e8:	80 81       	ld	r24, Z
    42ea:	8f 93       	push	r24
    42ec:	ff 92       	push	r15
    42ee:	ef 92       	push	r14
    42f0:	5f 92       	push	r5
    42f2:	4f 92       	push	r4
    42f4:	1f 93       	push	r17
    42f6:	0f 93       	push	r16
    42f8:	0e 94 4f 2c 	call	0x589e	; 0x589e <sprintf>
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	70 e0       	ldi	r23, 0x00	; 0
    4300:	c8 01       	movw	r24, r16
    4302:	d8 dc       	rcall	.-1616   	; 0x3cb4 <_upload_message>
    4304:	31 dd       	rcall	.-1438   	; 0x3d68 <_reply2return_code>
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	f8 94       	cli
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	0f be       	out	0x3f, r0	; 63
    430e:	cd bf       	out	0x3d, r28	; 61
    4310:	81 11       	cpse	r24, r1
    4312:	43 c0       	rjmp	.+134    	; 0x439a <lora_driver_configure_to_eu868+0x18a>
    4314:	2f 92       	push	r2
    4316:	3f 92       	push	r3
    4318:	9f 92       	push	r9
    431a:	8f 92       	push	r8
    431c:	1f 93       	push	r17
    431e:	0f 93       	push	r16
    4320:	0e 94 4f 2c 	call	0x589e	; 0x589e <sprintf>
    4324:	60 e0       	ldi	r22, 0x00	; 0
    4326:	70 e0       	ldi	r23, 0x00	; 0
    4328:	c8 01       	movw	r24, r16
    432a:	c4 dc       	rcall	.-1656   	; 0x3cb4 <_upload_message>
    432c:	1d dd       	rcall	.-1478   	; 0x3d68 <_reply2return_code>
    432e:	0f 90       	pop	r0
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	81 11       	cpse	r24, r1
    433c:	2e c0       	rjmp	.+92     	; 0x439a <lora_driver_configure_to_eu868+0x18a>
    433e:	2f 92       	push	r2
    4340:	3f 92       	push	r3
    4342:	7f 92       	push	r7
    4344:	6f 92       	push	r6
    4346:	1f 93       	push	r17
    4348:	0f 93       	push	r16
    434a:	0e 94 4f 2c 	call	0x589e	; 0x589e <sprintf>
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	c8 01       	movw	r24, r16
    4354:	af dc       	rcall	.-1698   	; 0x3cb4 <_upload_message>
    4356:	08 dd       	rcall	.-1520   	; 0x3d68 <_reply2return_code>
    4358:	0f 90       	pop	r0
    435a:	0f 90       	pop	r0
    435c:	0f 90       	pop	r0
    435e:	0f 90       	pop	r0
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	81 11       	cpse	r24, r1
    4366:	19 c0       	rjmp	.+50     	; 0x439a <lora_driver_configure_to_eu868+0x18a>
    4368:	3f ef       	ldi	r19, 0xFF	; 255
    436a:	e3 1a       	sub	r14, r19
    436c:	f3 0a       	sbc	r15, r19
    436e:	84 e0       	ldi	r24, 0x04	; 4
    4370:	c8 0e       	add	r12, r24
    4372:	d1 1c       	adc	r13, r1
    4374:	98 e0       	ldi	r25, 0x08	; 8
    4376:	e9 16       	cp	r14, r25
    4378:	f1 04       	cpc	r15, r1
    437a:	09 f0       	breq	.+2      	; 0x437e <lora_driver_configure_to_eu868+0x16e>
    437c:	94 cf       	rjmp	.-216    	; 0x42a6 <lora_driver_configure_to_eu868+0x96>
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	82 ef       	ldi	r24, 0xF2	; 242
    4384:	96 e0       	ldi	r25, 0x06	; 6
    4386:	96 dc       	rcall	.-1748   	; 0x3cb4 <_upload_message>
    4388:	ef dc       	rcall	.-1570   	; 0x3d68 <_reply2return_code>
    438a:	81 11       	cpse	r24, r1
    438c:	06 c0       	rjmp	.+12     	; 0x439a <lora_driver_configure_to_eu868+0x18a>
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	83 e0       	ldi	r24, 0x03	; 3
    4394:	97 e0       	ldi	r25, 0x07	; 7
    4396:	8e dc       	rcall	.-1764   	; 0x3cb4 <_upload_message>
    4398:	e7 dc       	rcall	.-1586   	; 0x3d68 <_reply2return_code>
    439a:	a0 96       	adiw	r28, 0x20	; 32
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	cd bf       	out	0x3d, r28	; 61
    43a6:	df 91       	pop	r29
    43a8:	cf 91       	pop	r28
    43aa:	1f 91       	pop	r17
    43ac:	0f 91       	pop	r16
    43ae:	ff 90       	pop	r15
    43b0:	ef 90       	pop	r14
    43b2:	df 90       	pop	r13
    43b4:	cf 90       	pop	r12
    43b6:	bf 90       	pop	r11
    43b8:	af 90       	pop	r10
    43ba:	9f 90       	pop	r9
    43bc:	8f 90       	pop	r8
    43be:	7f 90       	pop	r7
    43c0:	6f 90       	pop	r6
    43c2:	5f 90       	pop	r5
    43c4:	4f 90       	pop	r4
    43c6:	3f 90       	pop	r3
    43c8:	2f 90       	pop	r2
    43ca:	08 95       	ret

000043cc <lora_driver_set_otaa_identity>:
    43cc:	ef 92       	push	r14
    43ce:	ff 92       	push	r15
    43d0:	0f 93       	push	r16
    43d2:	1f 93       	push	r17
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	ec 01       	movw	r28, r24
    43da:	8b 01       	movw	r16, r22
    43dc:	7a 01       	movw	r14, r20
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	f4 de       	rcall	.-536    	; 0x41ca <lora_driver_set_adaptive_data_rate>
    43e2:	81 11       	cpse	r24, r1
    43e4:	0d c0       	rjmp	.+26     	; 0x4400 <lora_driver_set_otaa_identity+0x34>
    43e6:	ce 01       	movw	r24, r28
    43e8:	d4 dd       	rcall	.-1112   	; 0x3f92 <lora_driver_set_application_identifier>
    43ea:	81 11       	cpse	r24, r1
    43ec:	09 c0       	rjmp	.+18     	; 0x4400 <lora_driver_set_otaa_identity+0x34>
    43ee:	c8 01       	movw	r24, r16
    43f0:	e1 dd       	rcall	.-1086   	; 0x3fb4 <lora_driver_set_application_key>
    43f2:	81 11       	cpse	r24, r1
    43f4:	05 c0       	rjmp	.+10     	; 0x4400 <lora_driver_set_otaa_identity+0x34>
    43f6:	c7 01       	movw	r24, r14
    43f8:	bb dd       	rcall	.-1162   	; 0x3f70 <lora_driver_set_device_identifier>
    43fa:	81 11       	cpse	r24, r1
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <lora_driver_set_otaa_identity+0x34>
    43fe:	eb dd       	rcall	.-1066   	; 0x3fd6 <lora_driver_save_mac>
    4400:	df 91       	pop	r29
    4402:	cf 91       	pop	r28
    4404:	1f 91       	pop	r17
    4406:	0f 91       	pop	r16
    4408:	ff 90       	pop	r15
    440a:	ef 90       	pop	r14
    440c:	08 95       	ret

0000440e <lora_driver_map_return_code_to_text>:
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	fc 01       	movw	r30, r24
    4412:	ee 0f       	add	r30, r30
    4414:	ff 1f       	adc	r31, r31
    4416:	8e 0f       	add	r24, r30
    4418:	9f 1f       	adc	r25, r31
    441a:	fc 01       	movw	r30, r24
    441c:	e4 53       	subi	r30, 0x34	; 52
    441e:	f8 4f       	sbci	r31, 0xF8	; 248
    4420:	81 81       	ldd	r24, Z+1	; 0x01
    4422:	92 81       	ldd	r25, Z+2	; 0x02
    4424:	08 95       	ret

00004426 <decode_port_no>:
    4426:	dc 01       	movw	r26, r24
    4428:	00 97       	sbiw	r24, 0x00	; 0
    442a:	29 f1       	breq	.+74     	; 0x4476 <decode_port_no+0x50>
    442c:	fb 01       	movw	r30, r22
    442e:	20 81       	ld	r18, Z
    4430:	fc 01       	movw	r30, r24
    4432:	01 90       	ld	r0, Z+
    4434:	00 20       	and	r0, r0
    4436:	e9 f7       	brne	.-6      	; 0x4432 <decode_port_no+0xc>
    4438:	31 97       	sbiw	r30, 0x01	; 1
    443a:	e8 1b       	sub	r30, r24
    443c:	f9 0b       	sbc	r31, r25
    443e:	82 2f       	mov	r24, r18
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	e8 17       	cp	r30, r24
    4444:	f9 07       	cpc	r31, r25
    4446:	c8 f0       	brcs	.+50     	; 0x447a <decode_port_no+0x54>
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	08 c0       	rjmp	.+16     	; 0x445c <decode_port_no+0x36>
    444c:	88 0f       	add	r24, r24
    444e:	38 2f       	mov	r19, r24
    4450:	33 0f       	add	r19, r19
    4452:	33 0f       	add	r19, r19
    4454:	83 0f       	add	r24, r19
    4456:	80 53       	subi	r24, 0x30	; 48
    4458:	89 0f       	add	r24, r25
    445a:	2f 5f       	subi	r18, 0xFF	; 255
    445c:	fd 01       	movw	r30, r26
    445e:	e2 0f       	add	r30, r18
    4460:	f1 1d       	adc	r31, r1
    4462:	90 81       	ld	r25, Z
    4464:	30 ed       	ldi	r19, 0xD0	; 208
    4466:	39 0f       	add	r19, r25
    4468:	3a 30       	cpi	r19, 0x0A	; 10
    446a:	10 f4       	brcc	.+4      	; 0x4470 <decode_port_no+0x4a>
    446c:	91 11       	cpse	r25, r1
    446e:	ee cf       	rjmp	.-36     	; 0x444c <decode_port_no+0x26>
    4470:	fb 01       	movw	r30, r22
    4472:	20 83       	st	Z, r18
    4474:	08 95       	ret
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	08 95       	ret
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	08 95       	ret

0000447e <decode_hexadecimal_string_bytes>:
    447e:	0f 93       	push	r16
    4480:	1f 93       	push	r17
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	dc 01       	movw	r26, r24
    4488:	ea 01       	movw	r28, r20
    448a:	20 97       	sbiw	r28, 0x00	; 0
    448c:	e1 f1       	breq	.+120    	; 0x4506 <decode_hexadecimal_string_bytes+0x88>
    448e:	fa 01       	movw	r30, r20
    4490:	01 90       	ld	r0, Z+
    4492:	00 20       	and	r0, r0
    4494:	e9 f7       	brne	.-6      	; 0x4490 <decode_hexadecimal_string_bytes+0x12>
    4496:	31 97       	sbiw	r30, 0x01	; 1
    4498:	e4 1b       	sub	r30, r20
    449a:	f5 0b       	sbc	r31, r21
    449c:	32 97       	sbiw	r30, 0x02	; 2
    449e:	10 f5       	brcc	.+68     	; 0x44e4 <decode_hexadecimal_string_bytes+0x66>
    44a0:	32 c0       	rjmp	.+100    	; 0x4506 <decode_hexadecimal_string_bytes+0x88>
    44a2:	8d 01       	movw	r16, r26
    44a4:	04 0f       	add	r16, r20
    44a6:	15 1f       	adc	r17, r21
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	ae 01       	movw	r20, r28
    44ac:	42 0f       	add	r20, r18
    44ae:	53 1f       	adc	r21, r19
    44b0:	fa 01       	movw	r30, r20
    44b2:	90 81       	ld	r25, Z
    44b4:	91 34       	cpi	r25, 0x41	; 65
    44b6:	28 f0       	brcs	.+10     	; 0x44c2 <decode_hexadecimal_string_bytes+0x44>
    44b8:	97 53       	subi	r25, 0x37	; 55
    44ba:	59 2f       	mov	r21, r25
    44bc:	52 95       	swap	r21
    44be:	50 7f       	andi	r21, 0xF0	; 240
    44c0:	03 c0       	rjmp	.+6      	; 0x44c8 <decode_hexadecimal_string_bytes+0x4a>
    44c2:	59 2f       	mov	r21, r25
    44c4:	52 95       	swap	r21
    44c6:	50 7f       	andi	r21, 0xF0	; 240
    44c8:	2c 0f       	add	r18, r28
    44ca:	3d 1f       	adc	r19, r29
    44cc:	f9 01       	movw	r30, r18
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	91 34       	cpi	r25, 0x41	; 65
    44d2:	10 f0       	brcs	.+4      	; 0x44d8 <decode_hexadecimal_string_bytes+0x5a>
    44d4:	97 53       	subi	r25, 0x37	; 55
    44d6:	01 c0       	rjmp	.+2      	; 0x44da <decode_hexadecimal_string_bytes+0x5c>
    44d8:	90 53       	subi	r25, 0x30	; 48
    44da:	95 0f       	add	r25, r21
    44dc:	f8 01       	movw	r30, r16
    44de:	90 83       	st	Z, r25
    44e0:	8f 5f       	subi	r24, 0xFF	; 255
    44e2:	01 c0       	rjmp	.+2      	; 0x44e6 <decode_hexadecimal_string_bytes+0x68>
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	28 2f       	mov	r18, r24
    44e8:	22 0f       	add	r18, r18
    44ea:	48 2f       	mov	r20, r24
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	fe 01       	movw	r30, r28
    44f0:	01 90       	ld	r0, Z+
    44f2:	00 20       	and	r0, r0
    44f4:	e9 f7       	brne	.-6      	; 0x44f0 <decode_hexadecimal_string_bytes+0x72>
    44f6:	31 97       	sbiw	r30, 0x01	; 1
    44f8:	ec 1b       	sub	r30, r28
    44fa:	fd 0b       	sbc	r31, r29
    44fc:	4e 17       	cp	r20, r30
    44fe:	5f 07       	cpc	r21, r31
    4500:	10 f4       	brcc	.+4      	; 0x4506 <decode_hexadecimal_string_bytes+0x88>
    4502:	86 13       	cpse	r24, r22
    4504:	ce cf       	rjmp	.-100    	; 0x44a2 <decode_hexadecimal_string_bytes+0x24>
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	08 95       	ret

00004510 <reg_read_register>:
    4510:	fc 01       	movw	r30, r24
    4512:	80 81       	ld	r24, Z
    4514:	08 95       	ret

00004516 <reg_read_bit>:
    4516:	fc 01       	movw	r30, r24
    4518:	20 81       	ld	r18, Z
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <reg_read_bit+0xe>
    4520:	88 0f       	add	r24, r24
    4522:	99 1f       	adc	r25, r25
    4524:	6a 95       	dec	r22
    4526:	e2 f7       	brpl	.-8      	; 0x4520 <reg_read_bit+0xa>
    4528:	82 23       	and	r24, r18
    452a:	08 95       	ret

0000452c <reg_read_bits>:
    452c:	fc 01       	movw	r30, r24
    452e:	80 81       	ld	r24, Z
    4530:	86 23       	and	r24, r22
    4532:	08 95       	ret

00004534 <reg_set_register>:
    4534:	fc 01       	movw	r30, r24
    4536:	60 83       	st	Z, r22
    4538:	08 95       	ret

0000453a <reg_clear_register>:
    453a:	fc 01       	movw	r30, r24
    453c:	10 82       	st	Z, r1
    453e:	08 95       	ret

00004540 <reg_set_bit>:
    4540:	fc 01       	movw	r30, r24
    4542:	40 81       	ld	r20, Z
    4544:	21 e0       	ldi	r18, 0x01	; 1
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	02 c0       	rjmp	.+4      	; 0x454e <reg_set_bit+0xe>
    454a:	22 0f       	add	r18, r18
    454c:	33 1f       	adc	r19, r19
    454e:	6a 95       	dec	r22
    4550:	e2 f7       	brpl	.-8      	; 0x454a <reg_set_bit+0xa>
    4552:	24 2b       	or	r18, r20
    4554:	20 83       	st	Z, r18
    4556:	08 95       	ret

00004558 <reg_set_bits>:
    4558:	fc 01       	movw	r30, r24
    455a:	20 81       	ld	r18, Z
    455c:	62 2b       	or	r22, r18
    455e:	60 83       	st	Z, r22
    4560:	08 95       	ret

00004562 <reg_toggle_bit>:
    4562:	fc 01       	movw	r30, r24
    4564:	40 81       	ld	r20, Z
    4566:	21 e0       	ldi	r18, 0x01	; 1
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	02 c0       	rjmp	.+4      	; 0x4570 <reg_toggle_bit+0xe>
    456c:	22 0f       	add	r18, r18
    456e:	33 1f       	adc	r19, r19
    4570:	6a 95       	dec	r22
    4572:	e2 f7       	brpl	.-8      	; 0x456c <reg_toggle_bit+0xa>
    4574:	24 27       	eor	r18, r20
    4576:	20 83       	st	Z, r18
    4578:	08 95       	ret

0000457a <reg_toggle_bits>:
    457a:	fc 01       	movw	r30, r24
    457c:	20 81       	ld	r18, Z
    457e:	62 27       	eor	r22, r18
    4580:	60 83       	st	Z, r22
    4582:	08 95       	ret

00004584 <reg_clear_bit>:
    4584:	fc 01       	movw	r30, r24
    4586:	90 81       	ld	r25, Z
    4588:	21 e0       	ldi	r18, 0x01	; 1
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <reg_clear_bit+0xe>
    458e:	22 0f       	add	r18, r18
    4590:	33 1f       	adc	r19, r19
    4592:	6a 95       	dec	r22
    4594:	e2 f7       	brpl	.-8      	; 0x458e <reg_clear_bit+0xa>
    4596:	20 95       	com	r18
    4598:	29 23       	and	r18, r25
    459a:	20 83       	st	Z, r18
    459c:	08 95       	ret

0000459e <reg_clear_bits>:
    459e:	fc 01       	movw	r30, r24
    45a0:	90 81       	ld	r25, Z
    45a2:	60 95       	com	r22
    45a4:	69 23       	and	r22, r25
    45a6:	60 83       	st	Z, r22
    45a8:	08 95       	ret

000045aa <serial_new_instance>:
    45aa:	2f 92       	push	r2
    45ac:	3f 92       	push	r3
    45ae:	4f 92       	push	r4
    45b0:	5f 92       	push	r5
    45b2:	6f 92       	push	r6
    45b4:	7f 92       	push	r7
    45b6:	8f 92       	push	r8
    45b8:	9f 92       	push	r9
    45ba:	af 92       	push	r10
    45bc:	cf 92       	push	r12
    45be:	ef 92       	push	r14
    45c0:	ff 92       	push	r15
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	cf 93       	push	r28
    45c8:	df 93       	push	r29
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	f8 2e       	mov	r15, r24
    45d0:	2a 01       	movw	r4, r20
    45d2:	3b 01       	movw	r6, r22
    45d4:	88 e0       	ldi	r24, 0x08	; 8
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	9b d7       	rcall	.+3894   	; 0x5510 <malloc>
    45da:	8c 01       	movw	r16, r24
    45dc:	8f 2d       	mov	r24, r15
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	88 0f       	add	r24, r24
    45e2:	99 1f       	adc	r25, r25
    45e4:	fc 01       	movw	r30, r24
    45e6:	e7 5c       	subi	r30, 0xC7	; 199
    45e8:	f5 4e       	sbci	r31, 0xE5	; 229
    45ea:	11 83       	std	Z+1, r17	; 0x01
    45ec:	00 83       	st	Z, r16
    45ee:	fc 01       	movw	r30, r24
    45f0:	e4 5f       	subi	r30, 0xF4	; 244
    45f2:	fd 4f       	sbci	r31, 0xFD	; 253
    45f4:	80 81       	ld	r24, Z
    45f6:	91 81       	ldd	r25, Z+1	; 0x01
    45f8:	d8 01       	movw	r26, r16
    45fa:	8d 93       	st	X+, r24
    45fc:	9c 93       	st	X, r25
    45fe:	6c 2d       	mov	r22, r12
    4600:	70 e0       	ldi	r23, 0x00	; 0
    4602:	84 e0       	ldi	r24, 0x04	; 4
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	6a d7       	rcall	.+3796   	; 0x54dc <calloc>
    4608:	1c 01       	movw	r2, r24
    460a:	61 e0       	ldi	r22, 0x01	; 1
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	86 e0       	ldi	r24, 0x06	; 6
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	64 d7       	rcall	.+3784   	; 0x54dc <calloc>
    4614:	7c 01       	movw	r14, r24
    4616:	4c 2d       	mov	r20, r12
    4618:	b1 01       	movw	r22, r2
    461a:	2b d5       	rcall	.+2646   	; 0x5072 <fifo_init>
    461c:	f8 01       	movw	r30, r16
    461e:	f5 82       	std	Z+5, r15	; 0x05
    4620:	e4 82       	std	Z+4, r14	; 0x04
    4622:	6a 2d       	mov	r22, r10
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	84 e0       	ldi	r24, 0x04	; 4
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	58 d7       	rcall	.+3760   	; 0x54dc <calloc>
    462c:	1c 01       	movw	r2, r24
    462e:	61 e0       	ldi	r22, 0x01	; 1
    4630:	70 e0       	ldi	r23, 0x00	; 0
    4632:	86 e0       	ldi	r24, 0x06	; 6
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	52 d7       	rcall	.+3748   	; 0x54dc <calloc>
    4638:	7c 01       	movw	r14, r24
    463a:	4a 2d       	mov	r20, r10
    463c:	b1 01       	movw	r22, r2
    463e:	19 d5       	rcall	.+2610   	; 0x5072 <fifo_init>
    4640:	d8 01       	movw	r26, r16
    4642:	13 96       	adiw	r26, 0x03	; 3
    4644:	fc 92       	st	X, r15
    4646:	ee 92       	st	-X, r14
    4648:	12 97       	sbiw	r26, 0x02	; 2
    464a:	17 96       	adiw	r26, 0x07	; 7
    464c:	9c 92       	st	X, r9
    464e:	8e 92       	st	-X, r8
    4650:	16 97       	sbiw	r26, 0x06	; 6
    4652:	ff b6       	in	r15, 0x3f	; 63
    4654:	f8 94       	cli
    4656:	ed 91       	ld	r30, X+
    4658:	fc 91       	ld	r31, X
    465a:	11 97       	sbiw	r26, 0x01	; 1
    465c:	36 97       	sbiw	r30, 0x06	; 6
    465e:	80 81       	ld	r24, Z
    4660:	82 60       	ori	r24, 0x02	; 2
    4662:	80 83       	st	Z, r24
    4664:	8d 90       	ld	r8, X+
    4666:	9c 90       	ld	r9, X
    4668:	c3 01       	movw	r24, r6
    466a:	b2 01       	movw	r22, r4
    466c:	1c d6       	rcall	.+3128   	; 0x52a6 <__floatunsisf>
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e0       	ldi	r20, 0x00	; 0
    4674:	51 e4       	ldi	r21, 0x41	; 65
    4676:	a5 d6       	rcall	.+3402   	; 0x53c2 <__mulsf3>
    4678:	9b 01       	movw	r18, r22
    467a:	ac 01       	movw	r20, r24
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	74 e2       	ldi	r23, 0x24	; 36
    4680:	84 e7       	ldi	r24, 0x74	; 116
    4682:	9b e4       	ldi	r25, 0x4B	; 75
    4684:	77 d5       	rcall	.+2798   	; 0x5174 <__divsf3>
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	40 e8       	ldi	r20, 0x80	; 128
    468c:	5f e3       	ldi	r21, 0x3F	; 63
    468e:	0d d5       	rcall	.+2586   	; 0x50aa <__subsf3>
    4690:	de d5       	rcall	.+3004   	; 0x524e <__fixunssfsi>
    4692:	f4 01       	movw	r30, r8
    4694:	32 97       	sbiw	r30, 0x02	; 2
    4696:	60 83       	st	Z, r22
    4698:	d8 01       	movw	r26, r16
    469a:	ed 91       	ld	r30, X+
    469c:	fc 91       	ld	r31, X
    469e:	11 97       	sbiw	r26, 0x01	; 1
    46a0:	35 97       	sbiw	r30, 0x05	; 5
    46a2:	88 e9       	ldi	r24, 0x98	; 152
    46a4:	80 83       	st	Z, r24
    46a6:	ed 91       	ld	r30, X+
    46a8:	fc 91       	ld	r31, X
    46aa:	34 97       	sbiw	r30, 0x04	; 4
    46ac:	86 e0       	ldi	r24, 0x06	; 6
    46ae:	80 83       	st	Z, r24
    46b0:	ff be       	out	0x3f, r15	; 63
    46b2:	c8 01       	movw	r24, r16
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	1f 91       	pop	r17
    46ba:	0f 91       	pop	r16
    46bc:	ff 90       	pop	r15
    46be:	ef 90       	pop	r14
    46c0:	cf 90       	pop	r12
    46c2:	af 90       	pop	r10
    46c4:	9f 90       	pop	r9
    46c6:	8f 90       	pop	r8
    46c8:	7f 90       	pop	r7
    46ca:	6f 90       	pop	r6
    46cc:	5f 90       	pop	r5
    46ce:	4f 90       	pop	r4
    46d0:	3f 90       	pop	r3
    46d2:	2f 90       	pop	r2
    46d4:	08 95       	ret

000046d6 <serial_send_byte>:
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	ec 01       	movw	r28, r24
    46dc:	ea 81       	ldd	r30, Y+2	; 0x02
    46de:	fb 81       	ldd	r31, Y+3	; 0x03
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	82 81       	ldd	r24, Z+2	; 0x02
    46e4:	25 81       	ldd	r18, Z+5	; 0x05
    46e6:	98 1b       	sub	r25, r24
    46e8:	92 23       	and	r25, r18
    46ea:	84 81       	ldd	r24, Z+4	; 0x04
    46ec:	98 17       	cp	r25, r24
    46ee:	a1 f0       	breq	.+40     	; 0x4718 <serial_send_byte+0x42>
    46f0:	93 81       	ldd	r25, Z+3	; 0x03
    46f2:	26 95       	lsr	r18
    46f4:	29 23       	and	r18, r25
    46f6:	a0 81       	ld	r26, Z
    46f8:	b1 81       	ldd	r27, Z+1	; 0x01
    46fa:	a2 0f       	add	r26, r18
    46fc:	b1 1d       	adc	r27, r1
    46fe:	6c 93       	st	X, r22
    4700:	9f 5f       	subi	r25, 0xFF	; 255
    4702:	25 81       	ldd	r18, Z+5	; 0x05
    4704:	92 23       	and	r25, r18
    4706:	93 83       	std	Z+3, r25	; 0x03
    4708:	e8 81       	ld	r30, Y
    470a:	f9 81       	ldd	r31, Y+1	; 0x01
    470c:	35 97       	sbiw	r30, 0x05	; 5
    470e:	80 81       	ld	r24, Z
    4710:	80 62       	ori	r24, 0x20	; 32
    4712:	80 83       	st	Z, r24
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	01 c0       	rjmp	.+2      	; 0x471a <serial_send_byte+0x44>
    4718:	82 e0       	ldi	r24, 0x02	; 2
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	08 95       	ret

00004720 <serial_send_bytes>:
    4720:	ef 92       	push	r14
    4722:	ff 92       	push	r15
    4724:	0f 93       	push	r16
    4726:	1f 93       	push	r17
    4728:	cf 93       	push	r28
    472a:	df 93       	push	r29
    472c:	7c 01       	movw	r14, r24
    472e:	dc 01       	movw	r26, r24
    4730:	12 96       	adiw	r26, 0x02	; 2
    4732:	ed 91       	ld	r30, X+
    4734:	fc 91       	ld	r31, X
    4736:	13 97       	sbiw	r26, 0x03	; 3
    4738:	93 81       	ldd	r25, Z+3	; 0x03
    473a:	82 81       	ldd	r24, Z+2	; 0x02
    473c:	98 1b       	sub	r25, r24
    473e:	85 81       	ldd	r24, Z+5	; 0x05
    4740:	98 23       	and	r25, r24
    4742:	84 81       	ldd	r24, Z+4	; 0x04
    4744:	89 1b       	sub	r24, r25
    4746:	86 17       	cp	r24, r22
    4748:	98 f1       	brcs	.+102    	; 0x47b0 <serial_send_bytes+0x90>
    474a:	66 23       	and	r22, r22
    474c:	41 f1       	breq	.+80     	; 0x479e <serial_send_bytes+0x7e>
    474e:	84 2f       	mov	r24, r20
    4750:	95 2f       	mov	r25, r21
    4752:	dc 01       	movw	r26, r24
    4754:	61 50       	subi	r22, 0x01	; 1
    4756:	46 2f       	mov	r20, r22
    4758:	50 e0       	ldi	r21, 0x00	; 0
    475a:	4f 5f       	subi	r20, 0xFF	; 255
    475c:	5f 4f       	sbci	r21, 0xFF	; 255
    475e:	48 0f       	add	r20, r24
    4760:	59 1f       	adc	r21, r25
    4762:	e7 01       	movw	r28, r14
    4764:	ea 81       	ldd	r30, Y+2	; 0x02
    4766:	fb 81       	ldd	r31, Y+3	; 0x03
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	82 81       	ldd	r24, Z+2	; 0x02
    476c:	25 81       	ldd	r18, Z+5	; 0x05
    476e:	98 1b       	sub	r25, r24
    4770:	92 23       	and	r25, r18
    4772:	84 81       	ldd	r24, Z+4	; 0x04
    4774:	98 17       	cp	r25, r24
    4776:	79 f0       	breq	.+30     	; 0x4796 <serial_send_bytes+0x76>
    4778:	8c 91       	ld	r24, X
    477a:	93 81       	ldd	r25, Z+3	; 0x03
    477c:	26 95       	lsr	r18
    477e:	29 23       	and	r18, r25
    4780:	60 81       	ld	r22, Z
    4782:	71 81       	ldd	r23, Z+1	; 0x01
    4784:	8b 01       	movw	r16, r22
    4786:	02 0f       	add	r16, r18
    4788:	11 1d       	adc	r17, r1
    478a:	e8 01       	movw	r28, r16
    478c:	88 83       	st	Y, r24
    478e:	9f 5f       	subi	r25, 0xFF	; 255
    4790:	85 81       	ldd	r24, Z+5	; 0x05
    4792:	98 23       	and	r25, r24
    4794:	93 83       	std	Z+3, r25	; 0x03
    4796:	11 96       	adiw	r26, 0x01	; 1
    4798:	a4 17       	cp	r26, r20
    479a:	b5 07       	cpc	r27, r21
    479c:	11 f7       	brne	.-60     	; 0x4762 <serial_send_bytes+0x42>
    479e:	d7 01       	movw	r26, r14
    47a0:	ed 91       	ld	r30, X+
    47a2:	fc 91       	ld	r31, X
    47a4:	35 97       	sbiw	r30, 0x05	; 5
    47a6:	80 81       	ld	r24, Z
    47a8:	80 62       	ori	r24, 0x20	; 32
    47aa:	80 83       	st	Z, r24
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	01 c0       	rjmp	.+2      	; 0x47b2 <serial_send_bytes+0x92>
    47b0:	82 e0       	ldi	r24, 0x02	; 2
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	1f 91       	pop	r17
    47b8:	0f 91       	pop	r16
    47ba:	ff 90       	pop	r15
    47bc:	ef 90       	pop	r14
    47be:	08 95       	ret

000047c0 <serial_get_byte>:
    47c0:	dc 01       	movw	r26, r24
    47c2:	14 96       	adiw	r26, 0x04	; 4
    47c4:	ed 91       	ld	r30, X+
    47c6:	fc 91       	ld	r31, X
    47c8:	15 97       	sbiw	r26, 0x05	; 5
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	82 81       	ldd	r24, Z+2	; 0x02
    47ce:	98 17       	cp	r25, r24
    47d0:	89 f0       	breq	.+34     	; 0x47f4 <serial_get_byte+0x34>
    47d2:	92 81       	ldd	r25, Z+2	; 0x02
    47d4:	85 81       	ldd	r24, Z+5	; 0x05
    47d6:	86 95       	lsr	r24
    47d8:	89 23       	and	r24, r25
    47da:	a0 81       	ld	r26, Z
    47dc:	b1 81       	ldd	r27, Z+1	; 0x01
    47de:	a8 0f       	add	r26, r24
    47e0:	b1 1d       	adc	r27, r1
    47e2:	8c 91       	ld	r24, X
    47e4:	db 01       	movw	r26, r22
    47e6:	8c 93       	st	X, r24
    47e8:	9f 5f       	subi	r25, 0xFF	; 255
    47ea:	85 81       	ldd	r24, Z+5	; 0x05
    47ec:	98 23       	and	r25, r24
    47ee:	92 83       	std	Z+2, r25	; 0x02
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	08 95       	ret
    47f4:	83 e0       	ldi	r24, 0x03	; 3
    47f6:	08 95       	ret

000047f8 <__vector_25>:
    47f8:	1f 92       	push	r1
    47fa:	0f 92       	push	r0
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	0f 92       	push	r0
    4800:	11 24       	eor	r1, r1
    4802:	0b b6       	in	r0, 0x3b	; 59
    4804:	0f 92       	push	r0
    4806:	2f 93       	push	r18
    4808:	3f 93       	push	r19
    480a:	4f 93       	push	r20
    480c:	5f 93       	push	r21
    480e:	6f 93       	push	r22
    4810:	7f 93       	push	r23
    4812:	8f 93       	push	r24
    4814:	9f 93       	push	r25
    4816:	af 93       	push	r26
    4818:	bf 93       	push	r27
    481a:	cf 93       	push	r28
    481c:	df 93       	push	r29
    481e:	ef 93       	push	r30
    4820:	ff 93       	push	r31
    4822:	a0 91 39 1a 	lds	r26, 0x1A39	; 0x801a39 <_ser_handle>
    4826:	b0 91 3a 1a 	lds	r27, 0x1A3A	; 0x801a3a <_ser_handle+0x1>
    482a:	10 97       	sbiw	r26, 0x00	; 0
    482c:	11 f1       	breq	.+68     	; 0x4872 <__vector_25+0x7a>
    482e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4832:	14 96       	adiw	r26, 0x04	; 4
    4834:	ed 91       	ld	r30, X+
    4836:	fc 91       	ld	r31, X
    4838:	15 97       	sbiw	r26, 0x05	; 5
    483a:	93 81       	ldd	r25, Z+3	; 0x03
    483c:	82 81       	ldd	r24, Z+2	; 0x02
    483e:	25 81       	ldd	r18, Z+5	; 0x05
    4840:	98 1b       	sub	r25, r24
    4842:	92 23       	and	r25, r18
    4844:	84 81       	ldd	r24, Z+4	; 0x04
    4846:	98 17       	cp	r25, r24
    4848:	61 f0       	breq	.+24     	; 0x4862 <__vector_25+0x6a>
    484a:	83 81       	ldd	r24, Z+3	; 0x03
    484c:	26 95       	lsr	r18
    484e:	28 23       	and	r18, r24
    4850:	c0 81       	ld	r28, Z
    4852:	d1 81       	ldd	r29, Z+1	; 0x01
    4854:	c2 0f       	add	r28, r18
    4856:	d1 1d       	adc	r29, r1
    4858:	68 83       	st	Y, r22
    485a:	8f 5f       	subi	r24, 0xFF	; 255
    485c:	95 81       	ldd	r25, Z+5	; 0x05
    485e:	89 23       	and	r24, r25
    4860:	83 83       	std	Z+3, r24	; 0x03
    4862:	16 96       	adiw	r26, 0x06	; 6
    4864:	ed 91       	ld	r30, X+
    4866:	fc 91       	ld	r31, X
    4868:	17 97       	sbiw	r26, 0x07	; 7
    486a:	30 97       	sbiw	r30, 0x00	; 0
    486c:	11 f0       	breq	.+4      	; 0x4872 <__vector_25+0x7a>
    486e:	cd 01       	movw	r24, r26
    4870:	19 95       	eicall
    4872:	ff 91       	pop	r31
    4874:	ef 91       	pop	r30
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	bf 91       	pop	r27
    487c:	af 91       	pop	r26
    487e:	9f 91       	pop	r25
    4880:	8f 91       	pop	r24
    4882:	7f 91       	pop	r23
    4884:	6f 91       	pop	r22
    4886:	5f 91       	pop	r21
    4888:	4f 91       	pop	r20
    488a:	3f 91       	pop	r19
    488c:	2f 91       	pop	r18
    488e:	0f 90       	pop	r0
    4890:	0b be       	out	0x3b, r0	; 59
    4892:	0f 90       	pop	r0
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	0f 90       	pop	r0
    4898:	1f 90       	pop	r1
    489a:	18 95       	reti

0000489c <__vector_26>:
    489c:	1f 92       	push	r1
    489e:	0f 92       	push	r0
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	0f 92       	push	r0
    48a4:	11 24       	eor	r1, r1
    48a6:	0b b6       	in	r0, 0x3b	; 59
    48a8:	0f 92       	push	r0
    48aa:	2f 93       	push	r18
    48ac:	8f 93       	push	r24
    48ae:	9f 93       	push	r25
    48b0:	af 93       	push	r26
    48b2:	bf 93       	push	r27
    48b4:	ef 93       	push	r30
    48b6:	ff 93       	push	r31
    48b8:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <_ser_handle>
    48bc:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <_ser_handle+0x1>
    48c0:	30 97       	sbiw	r30, 0x00	; 0
    48c2:	b9 f0       	breq	.+46     	; 0x48f2 <__vector_26+0x56>
    48c4:	02 80       	ldd	r0, Z+2	; 0x02
    48c6:	f3 81       	ldd	r31, Z+3	; 0x03
    48c8:	e0 2d       	mov	r30, r0
    48ca:	93 81       	ldd	r25, Z+3	; 0x03
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	98 17       	cp	r25, r24
    48d0:	b1 f0       	breq	.+44     	; 0x48fe <__vector_26+0x62>
    48d2:	92 81       	ldd	r25, Z+2	; 0x02
    48d4:	85 81       	ldd	r24, Z+5	; 0x05
    48d6:	28 2f       	mov	r18, r24
    48d8:	26 95       	lsr	r18
    48da:	29 23       	and	r18, r25
    48dc:	a0 81       	ld	r26, Z
    48de:	b1 81       	ldd	r27, Z+1	; 0x01
    48e0:	a2 0f       	add	r26, r18
    48e2:	b1 1d       	adc	r27, r1
    48e4:	2c 91       	ld	r18, X
    48e6:	9f 5f       	subi	r25, 0xFF	; 255
    48e8:	89 23       	and	r24, r25
    48ea:	82 83       	std	Z+2, r24	; 0x02
    48ec:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    48f0:	0b c0       	rjmp	.+22     	; 0x4908 <__vector_26+0x6c>
    48f2:	e1 ec       	ldi	r30, 0xC1	; 193
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	80 81       	ld	r24, Z
    48f8:	8f 7d       	andi	r24, 0xDF	; 223
    48fa:	80 83       	st	Z, r24
    48fc:	05 c0       	rjmp	.+10     	; 0x4908 <__vector_26+0x6c>
    48fe:	e1 ec       	ldi	r30, 0xC1	; 193
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	80 81       	ld	r24, Z
    4904:	8f 7d       	andi	r24, 0xDF	; 223
    4906:	80 83       	st	Z, r24
    4908:	ff 91       	pop	r31
    490a:	ef 91       	pop	r30
    490c:	bf 91       	pop	r27
    490e:	af 91       	pop	r26
    4910:	9f 91       	pop	r25
    4912:	8f 91       	pop	r24
    4914:	2f 91       	pop	r18
    4916:	0f 90       	pop	r0
    4918:	0b be       	out	0x3b, r0	; 59
    491a:	0f 90       	pop	r0
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	0f 90       	pop	r0
    4920:	1f 90       	pop	r1
    4922:	18 95       	reti

00004924 <__vector_36>:
    4924:	1f 92       	push	r1
    4926:	0f 92       	push	r0
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	0f 92       	push	r0
    492c:	11 24       	eor	r1, r1
    492e:	0b b6       	in	r0, 0x3b	; 59
    4930:	0f 92       	push	r0
    4932:	2f 93       	push	r18
    4934:	3f 93       	push	r19
    4936:	4f 93       	push	r20
    4938:	5f 93       	push	r21
    493a:	6f 93       	push	r22
    493c:	7f 93       	push	r23
    493e:	8f 93       	push	r24
    4940:	9f 93       	push	r25
    4942:	af 93       	push	r26
    4944:	bf 93       	push	r27
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	ef 93       	push	r30
    494c:	ff 93       	push	r31
    494e:	a0 91 3b 1a 	lds	r26, 0x1A3B	; 0x801a3b <_ser_handle+0x2>
    4952:	b0 91 3c 1a 	lds	r27, 0x1A3C	; 0x801a3c <_ser_handle+0x3>
    4956:	10 97       	sbiw	r26, 0x00	; 0
    4958:	11 f1       	breq	.+68     	; 0x499e <__vector_36+0x7a>
    495a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    495e:	14 96       	adiw	r26, 0x04	; 4
    4960:	ed 91       	ld	r30, X+
    4962:	fc 91       	ld	r31, X
    4964:	15 97       	sbiw	r26, 0x05	; 5
    4966:	93 81       	ldd	r25, Z+3	; 0x03
    4968:	82 81       	ldd	r24, Z+2	; 0x02
    496a:	25 81       	ldd	r18, Z+5	; 0x05
    496c:	98 1b       	sub	r25, r24
    496e:	92 23       	and	r25, r18
    4970:	84 81       	ldd	r24, Z+4	; 0x04
    4972:	98 17       	cp	r25, r24
    4974:	61 f0       	breq	.+24     	; 0x498e <__vector_36+0x6a>
    4976:	83 81       	ldd	r24, Z+3	; 0x03
    4978:	26 95       	lsr	r18
    497a:	28 23       	and	r18, r24
    497c:	c0 81       	ld	r28, Z
    497e:	d1 81       	ldd	r29, Z+1	; 0x01
    4980:	c2 0f       	add	r28, r18
    4982:	d1 1d       	adc	r29, r1
    4984:	68 83       	st	Y, r22
    4986:	8f 5f       	subi	r24, 0xFF	; 255
    4988:	95 81       	ldd	r25, Z+5	; 0x05
    498a:	89 23       	and	r24, r25
    498c:	83 83       	std	Z+3, r24	; 0x03
    498e:	16 96       	adiw	r26, 0x06	; 6
    4990:	ed 91       	ld	r30, X+
    4992:	fc 91       	ld	r31, X
    4994:	17 97       	sbiw	r26, 0x07	; 7
    4996:	30 97       	sbiw	r30, 0x00	; 0
    4998:	11 f0       	breq	.+4      	; 0x499e <__vector_36+0x7a>
    499a:	cd 01       	movw	r24, r26
    499c:	19 95       	eicall
    499e:	ff 91       	pop	r31
    49a0:	ef 91       	pop	r30
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	bf 91       	pop	r27
    49a8:	af 91       	pop	r26
    49aa:	9f 91       	pop	r25
    49ac:	8f 91       	pop	r24
    49ae:	7f 91       	pop	r23
    49b0:	6f 91       	pop	r22
    49b2:	5f 91       	pop	r21
    49b4:	4f 91       	pop	r20
    49b6:	3f 91       	pop	r19
    49b8:	2f 91       	pop	r18
    49ba:	0f 90       	pop	r0
    49bc:	0b be       	out	0x3b, r0	; 59
    49be:	0f 90       	pop	r0
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	0f 90       	pop	r0
    49c4:	1f 90       	pop	r1
    49c6:	18 95       	reti

000049c8 <__vector_37>:
    49c8:	1f 92       	push	r1
    49ca:	0f 92       	push	r0
    49cc:	0f b6       	in	r0, 0x3f	; 63
    49ce:	0f 92       	push	r0
    49d0:	11 24       	eor	r1, r1
    49d2:	0b b6       	in	r0, 0x3b	; 59
    49d4:	0f 92       	push	r0
    49d6:	2f 93       	push	r18
    49d8:	8f 93       	push	r24
    49da:	9f 93       	push	r25
    49dc:	af 93       	push	r26
    49de:	bf 93       	push	r27
    49e0:	ef 93       	push	r30
    49e2:	ff 93       	push	r31
    49e4:	e0 91 3b 1a 	lds	r30, 0x1A3B	; 0x801a3b <_ser_handle+0x2>
    49e8:	f0 91 3c 1a 	lds	r31, 0x1A3C	; 0x801a3c <_ser_handle+0x3>
    49ec:	30 97       	sbiw	r30, 0x00	; 0
    49ee:	b9 f0       	breq	.+46     	; 0x4a1e <__vector_37+0x56>
    49f0:	02 80       	ldd	r0, Z+2	; 0x02
    49f2:	f3 81       	ldd	r31, Z+3	; 0x03
    49f4:	e0 2d       	mov	r30, r0
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	98 17       	cp	r25, r24
    49fc:	b1 f0       	breq	.+44     	; 0x4a2a <__vector_37+0x62>
    49fe:	92 81       	ldd	r25, Z+2	; 0x02
    4a00:	85 81       	ldd	r24, Z+5	; 0x05
    4a02:	28 2f       	mov	r18, r24
    4a04:	26 95       	lsr	r18
    4a06:	29 23       	and	r18, r25
    4a08:	a0 81       	ld	r26, Z
    4a0a:	b1 81       	ldd	r27, Z+1	; 0x01
    4a0c:	a2 0f       	add	r26, r18
    4a0e:	b1 1d       	adc	r27, r1
    4a10:	2c 91       	ld	r18, X
    4a12:	9f 5f       	subi	r25, 0xFF	; 255
    4a14:	89 23       	and	r24, r25
    4a16:	82 83       	std	Z+2, r24	; 0x02
    4a18:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4a1c:	0b c0       	rjmp	.+22     	; 0x4a34 <__vector_37+0x6c>
    4a1e:	e9 ec       	ldi	r30, 0xC9	; 201
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	80 81       	ld	r24, Z
    4a24:	8f 7d       	andi	r24, 0xDF	; 223
    4a26:	80 83       	st	Z, r24
    4a28:	05 c0       	rjmp	.+10     	; 0x4a34 <__vector_37+0x6c>
    4a2a:	e9 ec       	ldi	r30, 0xC9	; 201
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	80 81       	ld	r24, Z
    4a30:	8f 7d       	andi	r24, 0xDF	; 223
    4a32:	80 83       	st	Z, r24
    4a34:	ff 91       	pop	r31
    4a36:	ef 91       	pop	r30
    4a38:	bf 91       	pop	r27
    4a3a:	af 91       	pop	r26
    4a3c:	9f 91       	pop	r25
    4a3e:	8f 91       	pop	r24
    4a40:	2f 91       	pop	r18
    4a42:	0f 90       	pop	r0
    4a44:	0b be       	out	0x3b, r0	; 59
    4a46:	0f 90       	pop	r0
    4a48:	0f be       	out	0x3f, r0	; 63
    4a4a:	0f 90       	pop	r0
    4a4c:	1f 90       	pop	r1
    4a4e:	18 95       	reti

00004a50 <__vector_51>:
    4a50:	1f 92       	push	r1
    4a52:	0f 92       	push	r0
    4a54:	0f b6       	in	r0, 0x3f	; 63
    4a56:	0f 92       	push	r0
    4a58:	11 24       	eor	r1, r1
    4a5a:	0b b6       	in	r0, 0x3b	; 59
    4a5c:	0f 92       	push	r0
    4a5e:	2f 93       	push	r18
    4a60:	3f 93       	push	r19
    4a62:	4f 93       	push	r20
    4a64:	5f 93       	push	r21
    4a66:	6f 93       	push	r22
    4a68:	7f 93       	push	r23
    4a6a:	8f 93       	push	r24
    4a6c:	9f 93       	push	r25
    4a6e:	af 93       	push	r26
    4a70:	bf 93       	push	r27
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	ef 93       	push	r30
    4a78:	ff 93       	push	r31
    4a7a:	a0 91 3d 1a 	lds	r26, 0x1A3D	; 0x801a3d <_ser_handle+0x4>
    4a7e:	b0 91 3e 1a 	lds	r27, 0x1A3E	; 0x801a3e <_ser_handle+0x5>
    4a82:	10 97       	sbiw	r26, 0x00	; 0
    4a84:	11 f1       	breq	.+68     	; 0x4aca <__vector_51+0x7a>
    4a86:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4a8a:	14 96       	adiw	r26, 0x04	; 4
    4a8c:	ed 91       	ld	r30, X+
    4a8e:	fc 91       	ld	r31, X
    4a90:	15 97       	sbiw	r26, 0x05	; 5
    4a92:	93 81       	ldd	r25, Z+3	; 0x03
    4a94:	82 81       	ldd	r24, Z+2	; 0x02
    4a96:	25 81       	ldd	r18, Z+5	; 0x05
    4a98:	98 1b       	sub	r25, r24
    4a9a:	92 23       	and	r25, r18
    4a9c:	84 81       	ldd	r24, Z+4	; 0x04
    4a9e:	98 17       	cp	r25, r24
    4aa0:	61 f0       	breq	.+24     	; 0x4aba <__vector_51+0x6a>
    4aa2:	83 81       	ldd	r24, Z+3	; 0x03
    4aa4:	26 95       	lsr	r18
    4aa6:	28 23       	and	r18, r24
    4aa8:	c0 81       	ld	r28, Z
    4aaa:	d1 81       	ldd	r29, Z+1	; 0x01
    4aac:	c2 0f       	add	r28, r18
    4aae:	d1 1d       	adc	r29, r1
    4ab0:	68 83       	st	Y, r22
    4ab2:	8f 5f       	subi	r24, 0xFF	; 255
    4ab4:	95 81       	ldd	r25, Z+5	; 0x05
    4ab6:	89 23       	and	r24, r25
    4ab8:	83 83       	std	Z+3, r24	; 0x03
    4aba:	16 96       	adiw	r26, 0x06	; 6
    4abc:	ed 91       	ld	r30, X+
    4abe:	fc 91       	ld	r31, X
    4ac0:	17 97       	sbiw	r26, 0x07	; 7
    4ac2:	30 97       	sbiw	r30, 0x00	; 0
    4ac4:	11 f0       	breq	.+4      	; 0x4aca <__vector_51+0x7a>
    4ac6:	cd 01       	movw	r24, r26
    4ac8:	19 95       	eicall
    4aca:	ff 91       	pop	r31
    4acc:	ef 91       	pop	r30
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	bf 91       	pop	r27
    4ad4:	af 91       	pop	r26
    4ad6:	9f 91       	pop	r25
    4ad8:	8f 91       	pop	r24
    4ada:	7f 91       	pop	r23
    4adc:	6f 91       	pop	r22
    4ade:	5f 91       	pop	r21
    4ae0:	4f 91       	pop	r20
    4ae2:	3f 91       	pop	r19
    4ae4:	2f 91       	pop	r18
    4ae6:	0f 90       	pop	r0
    4ae8:	0b be       	out	0x3b, r0	; 59
    4aea:	0f 90       	pop	r0
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	0f 90       	pop	r0
    4af0:	1f 90       	pop	r1
    4af2:	18 95       	reti

00004af4 <__vector_52>:
    4af4:	1f 92       	push	r1
    4af6:	0f 92       	push	r0
    4af8:	0f b6       	in	r0, 0x3f	; 63
    4afa:	0f 92       	push	r0
    4afc:	11 24       	eor	r1, r1
    4afe:	0b b6       	in	r0, 0x3b	; 59
    4b00:	0f 92       	push	r0
    4b02:	2f 93       	push	r18
    4b04:	8f 93       	push	r24
    4b06:	9f 93       	push	r25
    4b08:	af 93       	push	r26
    4b0a:	bf 93       	push	r27
    4b0c:	ef 93       	push	r30
    4b0e:	ff 93       	push	r31
    4b10:	e0 91 3d 1a 	lds	r30, 0x1A3D	; 0x801a3d <_ser_handle+0x4>
    4b14:	f0 91 3e 1a 	lds	r31, 0x1A3E	; 0x801a3e <_ser_handle+0x5>
    4b18:	30 97       	sbiw	r30, 0x00	; 0
    4b1a:	b9 f0       	breq	.+46     	; 0x4b4a <__vector_52+0x56>
    4b1c:	02 80       	ldd	r0, Z+2	; 0x02
    4b1e:	f3 81       	ldd	r31, Z+3	; 0x03
    4b20:	e0 2d       	mov	r30, r0
    4b22:	93 81       	ldd	r25, Z+3	; 0x03
    4b24:	82 81       	ldd	r24, Z+2	; 0x02
    4b26:	98 17       	cp	r25, r24
    4b28:	b1 f0       	breq	.+44     	; 0x4b56 <__vector_52+0x62>
    4b2a:	92 81       	ldd	r25, Z+2	; 0x02
    4b2c:	85 81       	ldd	r24, Z+5	; 0x05
    4b2e:	28 2f       	mov	r18, r24
    4b30:	26 95       	lsr	r18
    4b32:	29 23       	and	r18, r25
    4b34:	a0 81       	ld	r26, Z
    4b36:	b1 81       	ldd	r27, Z+1	; 0x01
    4b38:	a2 0f       	add	r26, r18
    4b3a:	b1 1d       	adc	r27, r1
    4b3c:	2c 91       	ld	r18, X
    4b3e:	9f 5f       	subi	r25, 0xFF	; 255
    4b40:	89 23       	and	r24, r25
    4b42:	82 83       	std	Z+2, r24	; 0x02
    4b44:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4b48:	0b c0       	rjmp	.+22     	; 0x4b60 <__vector_52+0x6c>
    4b4a:	e1 ed       	ldi	r30, 0xD1	; 209
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	8f 7d       	andi	r24, 0xDF	; 223
    4b52:	80 83       	st	Z, r24
    4b54:	05 c0       	rjmp	.+10     	; 0x4b60 <__vector_52+0x6c>
    4b56:	e1 ed       	ldi	r30, 0xD1	; 209
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8f 7d       	andi	r24, 0xDF	; 223
    4b5e:	80 83       	st	Z, r24
    4b60:	ff 91       	pop	r31
    4b62:	ef 91       	pop	r30
    4b64:	bf 91       	pop	r27
    4b66:	af 91       	pop	r26
    4b68:	9f 91       	pop	r25
    4b6a:	8f 91       	pop	r24
    4b6c:	2f 91       	pop	r18
    4b6e:	0f 90       	pop	r0
    4b70:	0b be       	out	0x3b, r0	; 59
    4b72:	0f 90       	pop	r0
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	0f 90       	pop	r0
    4b78:	1f 90       	pop	r1
    4b7a:	18 95       	reti

00004b7c <__vector_54>:
    4b7c:	1f 92       	push	r1
    4b7e:	0f 92       	push	r0
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	0f 92       	push	r0
    4b84:	11 24       	eor	r1, r1
    4b86:	0b b6       	in	r0, 0x3b	; 59
    4b88:	0f 92       	push	r0
    4b8a:	2f 93       	push	r18
    4b8c:	3f 93       	push	r19
    4b8e:	4f 93       	push	r20
    4b90:	5f 93       	push	r21
    4b92:	6f 93       	push	r22
    4b94:	7f 93       	push	r23
    4b96:	8f 93       	push	r24
    4b98:	9f 93       	push	r25
    4b9a:	af 93       	push	r26
    4b9c:	bf 93       	push	r27
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	ef 93       	push	r30
    4ba4:	ff 93       	push	r31
    4ba6:	a0 91 3f 1a 	lds	r26, 0x1A3F	; 0x801a3f <_ser_handle+0x6>
    4baa:	b0 91 40 1a 	lds	r27, 0x1A40	; 0x801a40 <_ser_handle+0x7>
    4bae:	10 97       	sbiw	r26, 0x00	; 0
    4bb0:	11 f1       	breq	.+68     	; 0x4bf6 <__vector_54+0x7a>
    4bb2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4bb6:	14 96       	adiw	r26, 0x04	; 4
    4bb8:	ed 91       	ld	r30, X+
    4bba:	fc 91       	ld	r31, X
    4bbc:	15 97       	sbiw	r26, 0x05	; 5
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	82 81       	ldd	r24, Z+2	; 0x02
    4bc2:	25 81       	ldd	r18, Z+5	; 0x05
    4bc4:	98 1b       	sub	r25, r24
    4bc6:	92 23       	and	r25, r18
    4bc8:	84 81       	ldd	r24, Z+4	; 0x04
    4bca:	98 17       	cp	r25, r24
    4bcc:	61 f0       	breq	.+24     	; 0x4be6 <__vector_54+0x6a>
    4bce:	83 81       	ldd	r24, Z+3	; 0x03
    4bd0:	26 95       	lsr	r18
    4bd2:	28 23       	and	r18, r24
    4bd4:	c0 81       	ld	r28, Z
    4bd6:	d1 81       	ldd	r29, Z+1	; 0x01
    4bd8:	c2 0f       	add	r28, r18
    4bda:	d1 1d       	adc	r29, r1
    4bdc:	68 83       	st	Y, r22
    4bde:	8f 5f       	subi	r24, 0xFF	; 255
    4be0:	95 81       	ldd	r25, Z+5	; 0x05
    4be2:	89 23       	and	r24, r25
    4be4:	83 83       	std	Z+3, r24	; 0x03
    4be6:	16 96       	adiw	r26, 0x06	; 6
    4be8:	ed 91       	ld	r30, X+
    4bea:	fc 91       	ld	r31, X
    4bec:	17 97       	sbiw	r26, 0x07	; 7
    4bee:	30 97       	sbiw	r30, 0x00	; 0
    4bf0:	11 f0       	breq	.+4      	; 0x4bf6 <__vector_54+0x7a>
    4bf2:	cd 01       	movw	r24, r26
    4bf4:	19 95       	eicall
    4bf6:	ff 91       	pop	r31
    4bf8:	ef 91       	pop	r30
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	bf 91       	pop	r27
    4c00:	af 91       	pop	r26
    4c02:	9f 91       	pop	r25
    4c04:	8f 91       	pop	r24
    4c06:	7f 91       	pop	r23
    4c08:	6f 91       	pop	r22
    4c0a:	5f 91       	pop	r21
    4c0c:	4f 91       	pop	r20
    4c0e:	3f 91       	pop	r19
    4c10:	2f 91       	pop	r18
    4c12:	0f 90       	pop	r0
    4c14:	0b be       	out	0x3b, r0	; 59
    4c16:	0f 90       	pop	r0
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	0f 90       	pop	r0
    4c1c:	1f 90       	pop	r1
    4c1e:	18 95       	reti

00004c20 <__vector_55>:
    4c20:	1f 92       	push	r1
    4c22:	0f 92       	push	r0
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	0f 92       	push	r0
    4c28:	11 24       	eor	r1, r1
    4c2a:	0b b6       	in	r0, 0x3b	; 59
    4c2c:	0f 92       	push	r0
    4c2e:	2f 93       	push	r18
    4c30:	8f 93       	push	r24
    4c32:	9f 93       	push	r25
    4c34:	af 93       	push	r26
    4c36:	bf 93       	push	r27
    4c38:	ef 93       	push	r30
    4c3a:	ff 93       	push	r31
    4c3c:	e0 91 3f 1a 	lds	r30, 0x1A3F	; 0x801a3f <_ser_handle+0x6>
    4c40:	f0 91 40 1a 	lds	r31, 0x1A40	; 0x801a40 <_ser_handle+0x7>
    4c44:	30 97       	sbiw	r30, 0x00	; 0
    4c46:	b9 f0       	breq	.+46     	; 0x4c76 <__vector_55+0x56>
    4c48:	02 80       	ldd	r0, Z+2	; 0x02
    4c4a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c4c:	e0 2d       	mov	r30, r0
    4c4e:	93 81       	ldd	r25, Z+3	; 0x03
    4c50:	82 81       	ldd	r24, Z+2	; 0x02
    4c52:	98 17       	cp	r25, r24
    4c54:	b1 f0       	breq	.+44     	; 0x4c82 <__vector_55+0x62>
    4c56:	92 81       	ldd	r25, Z+2	; 0x02
    4c58:	85 81       	ldd	r24, Z+5	; 0x05
    4c5a:	28 2f       	mov	r18, r24
    4c5c:	26 95       	lsr	r18
    4c5e:	29 23       	and	r18, r25
    4c60:	a0 81       	ld	r26, Z
    4c62:	b1 81       	ldd	r27, Z+1	; 0x01
    4c64:	a2 0f       	add	r26, r18
    4c66:	b1 1d       	adc	r27, r1
    4c68:	2c 91       	ld	r18, X
    4c6a:	9f 5f       	subi	r25, 0xFF	; 255
    4c6c:	89 23       	and	r24, r25
    4c6e:	82 83       	std	Z+2, r24	; 0x02
    4c70:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4c74:	0b c0       	rjmp	.+22     	; 0x4c8c <__vector_55+0x6c>
    4c76:	e1 e3       	ldi	r30, 0x31	; 49
    4c78:	f1 e0       	ldi	r31, 0x01	; 1
    4c7a:	80 81       	ld	r24, Z
    4c7c:	8f 7d       	andi	r24, 0xDF	; 223
    4c7e:	80 83       	st	Z, r24
    4c80:	05 c0       	rjmp	.+10     	; 0x4c8c <__vector_55+0x6c>
    4c82:	e1 e3       	ldi	r30, 0x31	; 49
    4c84:	f1 e0       	ldi	r31, 0x01	; 1
    4c86:	80 81       	ld	r24, Z
    4c88:	8f 7d       	andi	r24, 0xDF	; 223
    4c8a:	80 83       	st	Z, r24
    4c8c:	ff 91       	pop	r31
    4c8e:	ef 91       	pop	r30
    4c90:	bf 91       	pop	r27
    4c92:	af 91       	pop	r26
    4c94:	9f 91       	pop	r25
    4c96:	8f 91       	pop	r24
    4c98:	2f 91       	pop	r18
    4c9a:	0f 90       	pop	r0
    4c9c:	0b be       	out	0x3b, r0	; 59
    4c9e:	0f 90       	pop	r0
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	0f 90       	pop	r0
    4ca4:	1f 90       	pop	r1
    4ca6:	18 95       	reti

00004ca8 <usart_getchar>:
    4ca8:	cf 93       	push	r28
    4caa:	df 93       	push	r29
    4cac:	1f 92       	push	r1
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
    4cb2:	be 01       	movw	r22, r28
    4cb4:	6f 5f       	subi	r22, 0xFF	; 255
    4cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb8:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <_com_serial_instance>
    4cbc:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <_com_serial_instance+0x1>
    4cc0:	7f dd       	rcall	.-1282   	; 0x47c0 <serial_get_byte>
    4cc2:	81 11       	cpse	r24, r1
    4cc4:	f6 cf       	rjmp	.-20     	; 0x4cb2 <usart_getchar+0xa>
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	0f 90       	pop	r0
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	08 95       	ret

00004cd2 <usart_putchar>:
    4cd2:	68 2f       	mov	r22, r24
    4cd4:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <_com_serial_instance>
    4cd8:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <_com_serial_instance+0x1>
    4cdc:	fc dc       	rcall	.-1544   	; 0x46d6 <serial_send_byte>
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	08 95       	ret

00004ce4 <stdioCreate>:
    4ce4:	8f 92       	push	r8
    4ce6:	9f 92       	push	r9
    4ce8:	af 92       	push	r10
    4cea:	cf 92       	push	r12
    4cec:	ef 92       	push	r14
    4cee:	0f 93       	push	r16
    4cf0:	81 2c       	mov	r8, r1
    4cf2:	91 2c       	mov	r9, r1
    4cf4:	68 94       	set
    4cf6:	aa 24       	eor	r10, r10
    4cf8:	a7 f8       	bld	r10, 7
    4cfa:	68 94       	set
    4cfc:	cc 24       	eor	r12, r12
    4cfe:	c7 f8       	bld	r12, 7
    4d00:	e1 2c       	mov	r14, r1
    4d02:	00 e0       	ldi	r16, 0x00	; 0
    4d04:	23 e0       	ldi	r18, 0x03	; 3
    4d06:	40 e0       	ldi	r20, 0x00	; 0
    4d08:	51 ee       	ldi	r21, 0xE1	; 225
    4d0a:	60 e0       	ldi	r22, 0x00	; 0
    4d0c:	70 e0       	ldi	r23, 0x00	; 0
    4d0e:	4d dc       	rcall	.-1894   	; 0x45aa <serial_new_instance>
    4d10:	90 93 42 1a 	sts	0x1A42, r25	; 0x801a42 <_com_serial_instance+0x1>
    4d14:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <_com_serial_instance>
    4d18:	ea e8       	ldi	r30, 0x8A	; 138
    4d1a:	fa e1       	ldi	r31, 0x1A	; 26
    4d1c:	84 e1       	ldi	r24, 0x14	; 20
    4d1e:	92 e0       	ldi	r25, 0x02	; 2
    4d20:	91 83       	std	Z+1, r25	; 0x01
    4d22:	80 83       	st	Z, r24
    4d24:	93 83       	std	Z+3, r25	; 0x03
    4d26:	82 83       	std	Z+2, r24	; 0x02
    4d28:	0f 91       	pop	r16
    4d2a:	ef 90       	pop	r14
    4d2c:	cf 90       	pop	r12
    4d2e:	af 90       	pop	r10
    4d30:	9f 90       	pop	r9
    4d32:	8f 90       	pop	r8
    4d34:	08 95       	ret

00004d36 <_initTwiInterface>:
    4d36:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <_twiIsInitiated>
    4d3a:	81 11       	cpse	r24, r1
    4d3c:	0c c0       	rjmp	.+24     	; 0x4d56 <_initTwiInterface+0x20>
    4d3e:	8c e0       	ldi	r24, 0x0C	; 12
    4d40:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4d44:	8f ef       	ldi	r24, 0xFF	; 255
    4d46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d4a:	84 e0       	ldi	r24, 0x04	; 4
    4d4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <_twiIsInitiated>
    4d56:	08 95       	ret

00004d58 <twiCreate>:
    4d58:	af 92       	push	r10
    4d5a:	bf 92       	push	r11
    4d5c:	cf 92       	push	r12
    4d5e:	df 92       	push	r13
    4d60:	ef 92       	push	r14
    4d62:	ff 92       	push	r15
    4d64:	0f 93       	push	r16
    4d66:	1f 93       	push	r17
    4d68:	cf 93       	push	r28
    4d6a:	df 93       	push	r29
    4d6c:	a8 2e       	mov	r10, r24
    4d6e:	b6 2e       	mov	r11, r22
    4d70:	69 01       	movw	r12, r18
    4d72:	7a 01       	movw	r14, r20
    4d74:	84 e0       	ldi	r24, 0x04	; 4
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	cb d3       	rcall	.+1942   	; 0x5510 <malloc>
    4d7a:	ec 01       	movw	r28, r24
    4d7c:	89 2b       	or	r24, r25
    4d7e:	61 f1       	breq	.+88     	; 0x4dd8 <twiCreate+0x80>
    4d80:	a8 82       	st	Y, r10
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	b8 12       	cpse	r11, r24
    4d86:	12 c0       	rjmp	.+36     	; 0x4dac <twiCreate+0x54>
    4d88:	c7 01       	movw	r24, r14
    4d8a:	b6 01       	movw	r22, r12
    4d8c:	20 ea       	ldi	r18, 0xA0	; 160
    4d8e:	36 e8       	ldi	r19, 0x86	; 134
    4d90:	41 e0       	ldi	r20, 0x01	; 1
    4d92:	50 e0       	ldi	r21, 0x00	; 0
    4d94:	79 d3       	rcall	.+1778   	; 0x5488 <__udivmodsi4>
    4d96:	da 01       	movw	r26, r20
    4d98:	c9 01       	movw	r24, r18
    4d9a:	40 97       	sbiw	r24, 0x10	; 16
    4d9c:	a1 09       	sbc	r26, r1
    4d9e:	b1 09       	sbc	r27, r1
    4da0:	b6 95       	lsr	r27
    4da2:	a7 95       	ror	r26
    4da4:	97 95       	ror	r25
    4da6:	87 95       	ror	r24
    4da8:	89 83       	std	Y+1, r24	; 0x01
    4daa:	11 c0       	rjmp	.+34     	; 0x4dce <twiCreate+0x76>
    4dac:	c7 01       	movw	r24, r14
    4dae:	b6 01       	movw	r22, r12
    4db0:	20 e8       	ldi	r18, 0x80	; 128
    4db2:	3a e1       	ldi	r19, 0x1A	; 26
    4db4:	46 e0       	ldi	r20, 0x06	; 6
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	67 d3       	rcall	.+1742   	; 0x5488 <__udivmodsi4>
    4dba:	da 01       	movw	r26, r20
    4dbc:	c9 01       	movw	r24, r18
    4dbe:	40 97       	sbiw	r24, 0x10	; 16
    4dc0:	a1 09       	sbc	r26, r1
    4dc2:	b1 09       	sbc	r27, r1
    4dc4:	b6 95       	lsr	r27
    4dc6:	a7 95       	ror	r26
    4dc8:	97 95       	ror	r25
    4dca:	87 95       	ror	r24
    4dcc:	89 83       	std	Y+1, r24	; 0x01
    4dce:	1b 83       	std	Y+3, r17	; 0x03
    4dd0:	0a 83       	std	Y+2, r16	; 0x02
    4dd2:	8c 2f       	mov	r24, r28
    4dd4:	9d 2f       	mov	r25, r29
    4dd6:	02 c0       	rjmp	.+4      	; 0x4ddc <twiCreate+0x84>
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	df 91       	pop	r29
    4dde:	cf 91       	pop	r28
    4de0:	1f 91       	pop	r17
    4de2:	0f 91       	pop	r16
    4de4:	ff 90       	pop	r15
    4de6:	ef 90       	pop	r14
    4de8:	df 90       	pop	r13
    4dea:	cf 90       	pop	r12
    4dec:	bf 90       	pop	r11
    4dee:	af 90       	pop	r10
    4df0:	08 95       	ret

00004df2 <twiIsBusy>:
    4df2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4df6:	81 70       	andi	r24, 0x01	; 1
    4df8:	08 95       	ret

00004dfa <twiTransmit>:
    4dfa:	ff 92       	push	r15
    4dfc:	0f 93       	push	r16
    4dfe:	1f 93       	push	r17
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	d1 f1       	breq	.+116    	; 0x4e7c <twiTransmit+0x82>
    4e08:	4a 30       	cpi	r20, 0x0A	; 10
    4e0a:	d0 f5       	brcc	.+116    	; 0x4e80 <twiTransmit+0x86>
    4e0c:	f4 2e       	mov	r15, r20
    4e0e:	8b 01       	movw	r16, r22
    4e10:	ec 01       	movw	r28, r24
    4e12:	ef df       	rcall	.-34     	; 0x4df2 <twiIsBusy>
    4e14:	81 11       	cpse	r24, r1
    4e16:	36 c0       	rjmp	.+108    	; 0x4e84 <twiTransmit+0x8a>
    4e18:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_twiCurrentHandler>
    4e1c:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_twiCurrentHandler+0x1>
    4e20:	c8 17       	cp	r28, r24
    4e22:	d9 07       	cpc	r29, r25
    4e24:	41 f0       	breq	.+16     	; 0x4e36 <twiTransmit+0x3c>
    4e26:	87 df       	rcall	.-242    	; 0x4d36 <_initTwiInterface>
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4e2e:	d0 93 45 1a 	sts	0x1A45, r29	; 0x801a45 <_twiCurrentHandler+0x1>
    4e32:	c0 93 44 1a 	sts	0x1A44, r28	; 0x801a44 <_twiCurrentHandler>
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	8f 0d       	add	r24, r15
    4e3a:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <_twiMessageLen>
    4e3e:	88 81       	ld	r24, Y
    4e40:	88 0f       	add	r24, r24
    4e42:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <_twiMessageBuffer>
    4e46:	ff 20       	and	r15, r15
    4e48:	89 f0       	breq	.+34     	; 0x4e6c <twiTransmit+0x72>
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	a8 e4       	ldi	r26, 0x48	; 72
    4e4e:	ba e1       	ldi	r27, 0x1A	; 26
    4e50:	4f ef       	ldi	r20, 0xFF	; 255
    4e52:	4f 0d       	add	r20, r15
    4e54:	64 2f       	mov	r22, r20
    4e56:	70 e0       	ldi	r23, 0x00	; 0
    4e58:	cb 01       	movw	r24, r22
    4e5a:	01 96       	adiw	r24, 0x01	; 1
    4e5c:	b8 01       	movw	r22, r16
    4e5e:	68 0f       	add	r22, r24
    4e60:	79 1f       	adc	r23, r25
    4e62:	81 91       	ld	r24, Z+
    4e64:	8d 93       	st	X+, r24
    4e66:	e6 17       	cp	r30, r22
    4e68:	f7 07       	cpc	r31, r23
    4e6a:	d9 f7       	brne	.-10     	; 0x4e62 <twiTransmit+0x68>
    4e6c:	88 ef       	ldi	r24, 0xF8	; 248
    4e6e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4e72:	85 ea       	ldi	r24, 0xA5	; 165
    4e74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e78:	84 e0       	ldi	r24, 0x04	; 4
    4e7a:	05 c0       	rjmp	.+10     	; 0x4e86 <twiTransmit+0x8c>
    4e7c:	86 e0       	ldi	r24, 0x06	; 6
    4e7e:	03 c0       	rjmp	.+6      	; 0x4e86 <twiTransmit+0x8c>
    4e80:	87 e0       	ldi	r24, 0x07	; 7
    4e82:	01 c0       	rjmp	.+2      	; 0x4e86 <twiTransmit+0x8c>
    4e84:	82 e0       	ldi	r24, 0x02	; 2
    4e86:	df 91       	pop	r29
    4e88:	cf 91       	pop	r28
    4e8a:	1f 91       	pop	r17
    4e8c:	0f 91       	pop	r16
    4e8e:	ff 90       	pop	r15
    4e90:	08 95       	ret

00004e92 <twiReceive>:
    4e92:	1f 93       	push	r17
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	29 f1       	breq	.+74     	; 0x4ee6 <twiReceive+0x54>
    4e9c:	6b 30       	cpi	r22, 0x0B	; 11
    4e9e:	28 f5       	brcc	.+74     	; 0x4eea <twiReceive+0x58>
    4ea0:	16 2f       	mov	r17, r22
    4ea2:	ec 01       	movw	r28, r24
    4ea4:	a6 df       	rcall	.-180    	; 0x4df2 <twiIsBusy>
    4ea6:	81 11       	cpse	r24, r1
    4ea8:	22 c0       	rjmp	.+68     	; 0x4eee <twiReceive+0x5c>
    4eaa:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_twiCurrentHandler>
    4eae:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_twiCurrentHandler+0x1>
    4eb2:	c8 17       	cp	r28, r24
    4eb4:	d9 07       	cpc	r29, r25
    4eb6:	41 f0       	breq	.+16     	; 0x4ec8 <twiReceive+0x36>
    4eb8:	3e df       	rcall	.-388    	; 0x4d36 <_initTwiInterface>
    4eba:	89 81       	ldd	r24, Y+1	; 0x01
    4ebc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4ec0:	d0 93 45 1a 	sts	0x1A45, r29	; 0x801a45 <_twiCurrentHandler+0x1>
    4ec4:	c0 93 44 1a 	sts	0x1A44, r28	; 0x801a44 <_twiCurrentHandler>
    4ec8:	10 93 46 1a 	sts	0x1A46, r17	; 0x801a46 <_twiMessageLen>
    4ecc:	88 81       	ld	r24, Y
    4ece:	88 0f       	add	r24, r24
    4ed0:	81 60       	ori	r24, 0x01	; 1
    4ed2:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <_twiMessageBuffer>
    4ed6:	88 ef       	ldi	r24, 0xF8	; 248
    4ed8:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    4edc:	85 ea       	ldi	r24, 0xA5	; 165
    4ede:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ee2:	85 e0       	ldi	r24, 0x05	; 5
    4ee4:	05 c0       	rjmp	.+10     	; 0x4ef0 <twiReceive+0x5e>
    4ee6:	86 e0       	ldi	r24, 0x06	; 6
    4ee8:	03 c0       	rjmp	.+6      	; 0x4ef0 <twiReceive+0x5e>
    4eea:	87 e0       	ldi	r24, 0x07	; 7
    4eec:	01 c0       	rjmp	.+2      	; 0x4ef0 <twiReceive+0x5e>
    4eee:	82 e0       	ldi	r24, 0x02	; 2
    4ef0:	df 91       	pop	r29
    4ef2:	cf 91       	pop	r28
    4ef4:	1f 91       	pop	r17
    4ef6:	08 95       	ret

00004ef8 <__vector_39>:
    4ef8:	1f 92       	push	r1
    4efa:	0f 92       	push	r0
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	0f 92       	push	r0
    4f00:	11 24       	eor	r1, r1
    4f02:	0b b6       	in	r0, 0x3b	; 59
    4f04:	0f 92       	push	r0
    4f06:	2f 93       	push	r18
    4f08:	3f 93       	push	r19
    4f0a:	4f 93       	push	r20
    4f0c:	5f 93       	push	r21
    4f0e:	6f 93       	push	r22
    4f10:	7f 93       	push	r23
    4f12:	8f 93       	push	r24
    4f14:	9f 93       	push	r25
    4f16:	af 93       	push	r26
    4f18:	bf 93       	push	r27
    4f1a:	ef 93       	push	r30
    4f1c:	ff 93       	push	r31
    4f1e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4f22:	8e 2f       	mov	r24, r30
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	fc 01       	movw	r30, r24
    4f28:	38 97       	sbiw	r30, 0x08	; 8
    4f2a:	e1 35       	cpi	r30, 0x51	; 81
    4f2c:	f1 05       	cpc	r31, r1
    4f2e:	08 f0       	brcs	.+2      	; 0x4f32 <__vector_39+0x3a>
    4f30:	75 c0       	rjmp	.+234    	; 0x501c <__vector_39+0x124>
    4f32:	88 27       	eor	r24, r24
    4f34:	e4 58       	subi	r30, 0x84	; 132
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	8f 4f       	sbci	r24, 0xFF	; 255
    4f3a:	c8 c2       	rjmp	.+1424   	; 0x54cc <__tablejump2__>
    4f3c:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <_index.1885>
    4f40:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <_index.1885>
    4f44:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiMessageLen>
    4f48:	e8 17       	cp	r30, r24
    4f4a:	70 f4       	brcc	.+28     	; 0x4f68 <__vector_39+0x70>
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	8e 0f       	add	r24, r30
    4f50:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <_index.1885>
    4f54:	f0 e0       	ldi	r31, 0x00	; 0
    4f56:	e9 5b       	subi	r30, 0xB9	; 185
    4f58:	f5 4e       	sbci	r31, 0xE5	; 229
    4f5a:	80 81       	ld	r24, Z
    4f5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4f60:	85 e8       	ldi	r24, 0x85	; 133
    4f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f66:	72 c0       	rjmp	.+228    	; 0x504c <__vector_39+0x154>
    4f68:	84 e9       	ldi	r24, 0x94	; 148
    4f6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4f6e:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_twiCurrentHandler>
    4f72:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_twiCurrentHandler+0x1>
    4f76:	dc 01       	movw	r26, r24
    4f78:	12 96       	adiw	r26, 0x02	; 2
    4f7a:	ed 91       	ld	r30, X+
    4f7c:	fc 91       	ld	r31, X
    4f7e:	13 97       	sbiw	r26, 0x03	; 3
    4f80:	30 97       	sbiw	r30, 0x00	; 0
    4f82:	09 f4       	brne	.+2      	; 0x4f86 <__vector_39+0x8e>
    4f84:	63 c0       	rjmp	.+198    	; 0x504c <__vector_39+0x154>
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	40 e0       	ldi	r20, 0x00	; 0
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	64 e0       	ldi	r22, 0x04	; 4
    4f8e:	19 95       	eicall
    4f90:	5d c0       	rjmp	.+186    	; 0x504c <__vector_39+0x154>
    4f92:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <_index.1885>
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	8e 0f       	add	r24, r30
    4f9a:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <_index.1885>
    4f9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fa2:	f0 e0       	ldi	r31, 0x00	; 0
    4fa4:	e9 5b       	subi	r30, 0xB9	; 185
    4fa6:	f5 4e       	sbci	r31, 0xE5	; 229
    4fa8:	80 83       	st	Z, r24
    4faa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4fae:	80 34       	cpi	r24, 0x40	; 64
    4fb0:	11 f4       	brne	.+4      	; 0x4fb6 <__vector_39+0xbe>
    4fb2:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <_index.1885>
    4fb6:	20 91 43 1a 	lds	r18, 0x1A43	; 0x801a43 <_index.1885>
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <_twiMessageLen>
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	01 97       	sbiw	r24, 0x01	; 1
    4fc4:	28 17       	cp	r18, r24
    4fc6:	39 07       	cpc	r19, r25
    4fc8:	24 f4       	brge	.+8      	; 0x4fd2 <__vector_39+0xda>
    4fca:	85 ec       	ldi	r24, 0xC5	; 197
    4fcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fd0:	3d c0       	rjmp	.+122    	; 0x504c <__vector_39+0x154>
    4fd2:	85 e8       	ldi	r24, 0x85	; 133
    4fd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fd8:	39 c0       	rjmp	.+114    	; 0x504c <__vector_39+0x154>
    4fda:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fde:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <_index.1885>
    4fe2:	f0 e0       	ldi	r31, 0x00	; 0
    4fe4:	e9 5b       	subi	r30, 0xB9	; 185
    4fe6:	f5 4e       	sbci	r31, 0xE5	; 229
    4fe8:	80 83       	st	Z, r24
    4fea:	84 e9       	ldi	r24, 0x94	; 148
    4fec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ff0:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_twiCurrentHandler>
    4ff4:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_twiCurrentHandler+0x1>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	12 96       	adiw	r26, 0x02	; 2
    4ffc:	ed 91       	ld	r30, X+
    4ffe:	fc 91       	ld	r31, X
    5000:	13 97       	sbiw	r26, 0x03	; 3
    5002:	30 97       	sbiw	r30, 0x00	; 0
    5004:	19 f1       	breq	.+70     	; 0x504c <__vector_39+0x154>
    5006:	20 91 46 1a 	lds	r18, 0x1A46	; 0x801a46 <_twiMessageLen>
    500a:	47 e4       	ldi	r20, 0x47	; 71
    500c:	5a e1       	ldi	r21, 0x1A	; 26
    500e:	65 e0       	ldi	r22, 0x05	; 5
    5010:	19 95       	eicall
    5012:	1c c0       	rjmp	.+56     	; 0x504c <__vector_39+0x154>
    5014:	85 ea       	ldi	r24, 0xA5	; 165
    5016:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    501a:	18 c0       	rjmp	.+48     	; 0x504c <__vector_39+0x154>
    501c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5020:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    5024:	84 e0       	ldi	r24, 0x04	; 4
    5026:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    502a:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <_twiCurrentHandler>
    502e:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <_twiCurrentHandler+0x1>
    5032:	dc 01       	movw	r26, r24
    5034:	12 96       	adiw	r26, 0x02	; 2
    5036:	ed 91       	ld	r30, X+
    5038:	fc 91       	ld	r31, X
    503a:	13 97       	sbiw	r26, 0x03	; 3
    503c:	30 97       	sbiw	r30, 0x00	; 0
    503e:	31 f0       	breq	.+12     	; 0x504c <__vector_39+0x154>
    5040:	20 e0       	ldi	r18, 0x00	; 0
    5042:	40 e0       	ldi	r20, 0x00	; 0
    5044:	50 e0       	ldi	r21, 0x00	; 0
    5046:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    504a:	19 95       	eicall
    504c:	ff 91       	pop	r31
    504e:	ef 91       	pop	r30
    5050:	bf 91       	pop	r27
    5052:	af 91       	pop	r26
    5054:	9f 91       	pop	r25
    5056:	8f 91       	pop	r24
    5058:	7f 91       	pop	r23
    505a:	6f 91       	pop	r22
    505c:	5f 91       	pop	r21
    505e:	4f 91       	pop	r20
    5060:	3f 91       	pop	r19
    5062:	2f 91       	pop	r18
    5064:	0f 90       	pop	r0
    5066:	0b be       	out	0x3b, r0	; 59
    5068:	0f 90       	pop	r0
    506a:	0f be       	out	0x3f, r0	; 63
    506c:	0f 90       	pop	r0
    506e:	1f 90       	pop	r1
    5070:	18 95       	reti

00005072 <fifo_init>:
    5072:	fc 01       	movw	r30, r24
    5074:	41 11       	cpse	r20, r1
    5076:	01 c0       	rjmp	.+2      	; 0x507a <fifo_init+0x8>
    5078:	6c d3       	rcall	.+1752   	; 0x5752 <abort>
    507a:	84 2f       	mov	r24, r20
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	9c 01       	movw	r18, r24
    5080:	21 50       	subi	r18, 0x01	; 1
    5082:	31 09       	sbc	r19, r1
    5084:	82 23       	and	r24, r18
    5086:	93 23       	and	r25, r19
    5088:	89 2b       	or	r24, r25
    508a:	09 f0       	breq	.+2      	; 0x508e <fifo_init+0x1c>
    508c:	62 d3       	rcall	.+1732   	; 0x5752 <abort>
    508e:	41 38       	cpi	r20, 0x81	; 129
    5090:	08 f0       	brcs	.+2      	; 0x5094 <fifo_init+0x22>
    5092:	5f d3       	rcall	.+1726   	; 0x5752 <abort>
    5094:	12 82       	std	Z+2, r1	; 0x02
    5096:	13 82       	std	Z+3, r1	; 0x03
    5098:	44 83       	std	Z+4, r20	; 0x04
    509a:	44 0f       	add	r20, r20
    509c:	41 50       	subi	r20, 0x01	; 1
    509e:	45 83       	std	Z+5, r20	; 0x05
    50a0:	71 83       	std	Z+1, r23	; 0x01
    50a2:	60 83       	st	Z, r22
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	08 95       	ret

000050aa <__subsf3>:
    50aa:	50 58       	subi	r21, 0x80	; 128

000050ac <__addsf3>:
    50ac:	bb 27       	eor	r27, r27
    50ae:	aa 27       	eor	r26, r26
    50b0:	0e d0       	rcall	.+28     	; 0x50ce <__addsf3x>
    50b2:	4d c1       	rjmp	.+666    	; 0x534e <__fp_round>
    50b4:	3e d1       	rcall	.+636    	; 0x5332 <__fp_pscA>
    50b6:	30 f0       	brcs	.+12     	; 0x50c4 <__addsf3+0x18>
    50b8:	43 d1       	rcall	.+646    	; 0x5340 <__fp_pscB>
    50ba:	20 f0       	brcs	.+8      	; 0x50c4 <__addsf3+0x18>
    50bc:	31 f4       	brne	.+12     	; 0x50ca <__addsf3+0x1e>
    50be:	9f 3f       	cpi	r25, 0xFF	; 255
    50c0:	11 f4       	brne	.+4      	; 0x50c6 <__addsf3+0x1a>
    50c2:	1e f4       	brtc	.+6      	; 0x50ca <__addsf3+0x1e>
    50c4:	33 c1       	rjmp	.+614    	; 0x532c <__fp_nan>
    50c6:	0e f4       	brtc	.+2      	; 0x50ca <__addsf3+0x1e>
    50c8:	e0 95       	com	r30
    50ca:	e7 fb       	bst	r30, 7
    50cc:	29 c1       	rjmp	.+594    	; 0x5320 <__fp_inf>

000050ce <__addsf3x>:
    50ce:	e9 2f       	mov	r30, r25
    50d0:	4f d1       	rcall	.+670    	; 0x5370 <__fp_split3>
    50d2:	80 f3       	brcs	.-32     	; 0x50b4 <__addsf3+0x8>
    50d4:	ba 17       	cp	r27, r26
    50d6:	62 07       	cpc	r22, r18
    50d8:	73 07       	cpc	r23, r19
    50da:	84 07       	cpc	r24, r20
    50dc:	95 07       	cpc	r25, r21
    50de:	18 f0       	brcs	.+6      	; 0x50e6 <__addsf3x+0x18>
    50e0:	71 f4       	brne	.+28     	; 0x50fe <__addsf3x+0x30>
    50e2:	9e f5       	brtc	.+102    	; 0x514a <__addsf3x+0x7c>
    50e4:	67 c1       	rjmp	.+718    	; 0x53b4 <__fp_zero>
    50e6:	0e f4       	brtc	.+2      	; 0x50ea <__addsf3x+0x1c>
    50e8:	e0 95       	com	r30
    50ea:	0b 2e       	mov	r0, r27
    50ec:	ba 2f       	mov	r27, r26
    50ee:	a0 2d       	mov	r26, r0
    50f0:	0b 01       	movw	r0, r22
    50f2:	b9 01       	movw	r22, r18
    50f4:	90 01       	movw	r18, r0
    50f6:	0c 01       	movw	r0, r24
    50f8:	ca 01       	movw	r24, r20
    50fa:	a0 01       	movw	r20, r0
    50fc:	11 24       	eor	r1, r1
    50fe:	ff 27       	eor	r31, r31
    5100:	59 1b       	sub	r21, r25
    5102:	99 f0       	breq	.+38     	; 0x512a <__addsf3x+0x5c>
    5104:	59 3f       	cpi	r21, 0xF9	; 249
    5106:	50 f4       	brcc	.+20     	; 0x511c <__addsf3x+0x4e>
    5108:	50 3e       	cpi	r21, 0xE0	; 224
    510a:	68 f1       	brcs	.+90     	; 0x5166 <__addsf3x+0x98>
    510c:	1a 16       	cp	r1, r26
    510e:	f0 40       	sbci	r31, 0x00	; 0
    5110:	a2 2f       	mov	r26, r18
    5112:	23 2f       	mov	r18, r19
    5114:	34 2f       	mov	r19, r20
    5116:	44 27       	eor	r20, r20
    5118:	58 5f       	subi	r21, 0xF8	; 248
    511a:	f3 cf       	rjmp	.-26     	; 0x5102 <__addsf3x+0x34>
    511c:	46 95       	lsr	r20
    511e:	37 95       	ror	r19
    5120:	27 95       	ror	r18
    5122:	a7 95       	ror	r26
    5124:	f0 40       	sbci	r31, 0x00	; 0
    5126:	53 95       	inc	r21
    5128:	c9 f7       	brne	.-14     	; 0x511c <__addsf3x+0x4e>
    512a:	7e f4       	brtc	.+30     	; 0x514a <__addsf3x+0x7c>
    512c:	1f 16       	cp	r1, r31
    512e:	ba 0b       	sbc	r27, r26
    5130:	62 0b       	sbc	r22, r18
    5132:	73 0b       	sbc	r23, r19
    5134:	84 0b       	sbc	r24, r20
    5136:	ba f0       	brmi	.+46     	; 0x5166 <__addsf3x+0x98>
    5138:	91 50       	subi	r25, 0x01	; 1
    513a:	a1 f0       	breq	.+40     	; 0x5164 <__addsf3x+0x96>
    513c:	ff 0f       	add	r31, r31
    513e:	bb 1f       	adc	r27, r27
    5140:	66 1f       	adc	r22, r22
    5142:	77 1f       	adc	r23, r23
    5144:	88 1f       	adc	r24, r24
    5146:	c2 f7       	brpl	.-16     	; 0x5138 <__addsf3x+0x6a>
    5148:	0e c0       	rjmp	.+28     	; 0x5166 <__addsf3x+0x98>
    514a:	ba 0f       	add	r27, r26
    514c:	62 1f       	adc	r22, r18
    514e:	73 1f       	adc	r23, r19
    5150:	84 1f       	adc	r24, r20
    5152:	48 f4       	brcc	.+18     	; 0x5166 <__addsf3x+0x98>
    5154:	87 95       	ror	r24
    5156:	77 95       	ror	r23
    5158:	67 95       	ror	r22
    515a:	b7 95       	ror	r27
    515c:	f7 95       	ror	r31
    515e:	9e 3f       	cpi	r25, 0xFE	; 254
    5160:	08 f0       	brcs	.+2      	; 0x5164 <__addsf3x+0x96>
    5162:	b3 cf       	rjmp	.-154    	; 0x50ca <__addsf3+0x1e>
    5164:	93 95       	inc	r25
    5166:	88 0f       	add	r24, r24
    5168:	08 f0       	brcs	.+2      	; 0x516c <__addsf3x+0x9e>
    516a:	99 27       	eor	r25, r25
    516c:	ee 0f       	add	r30, r30
    516e:	97 95       	ror	r25
    5170:	87 95       	ror	r24
    5172:	08 95       	ret

00005174 <__divsf3>:
    5174:	0c d0       	rcall	.+24     	; 0x518e <__divsf3x>
    5176:	eb c0       	rjmp	.+470    	; 0x534e <__fp_round>
    5178:	e3 d0       	rcall	.+454    	; 0x5340 <__fp_pscB>
    517a:	40 f0       	brcs	.+16     	; 0x518c <__divsf3+0x18>
    517c:	da d0       	rcall	.+436    	; 0x5332 <__fp_pscA>
    517e:	30 f0       	brcs	.+12     	; 0x518c <__divsf3+0x18>
    5180:	21 f4       	brne	.+8      	; 0x518a <__divsf3+0x16>
    5182:	5f 3f       	cpi	r21, 0xFF	; 255
    5184:	19 f0       	breq	.+6      	; 0x518c <__divsf3+0x18>
    5186:	cc c0       	rjmp	.+408    	; 0x5320 <__fp_inf>
    5188:	51 11       	cpse	r21, r1
    518a:	15 c1       	rjmp	.+554    	; 0x53b6 <__fp_szero>
    518c:	cf c0       	rjmp	.+414    	; 0x532c <__fp_nan>

0000518e <__divsf3x>:
    518e:	f0 d0       	rcall	.+480    	; 0x5370 <__fp_split3>
    5190:	98 f3       	brcs	.-26     	; 0x5178 <__divsf3+0x4>

00005192 <__divsf3_pse>:
    5192:	99 23       	and	r25, r25
    5194:	c9 f3       	breq	.-14     	; 0x5188 <__divsf3+0x14>
    5196:	55 23       	and	r21, r21
    5198:	b1 f3       	breq	.-20     	; 0x5186 <__divsf3+0x12>
    519a:	95 1b       	sub	r25, r21
    519c:	55 0b       	sbc	r21, r21
    519e:	bb 27       	eor	r27, r27
    51a0:	aa 27       	eor	r26, r26
    51a2:	62 17       	cp	r22, r18
    51a4:	73 07       	cpc	r23, r19
    51a6:	84 07       	cpc	r24, r20
    51a8:	38 f0       	brcs	.+14     	; 0x51b8 <__divsf3_pse+0x26>
    51aa:	9f 5f       	subi	r25, 0xFF	; 255
    51ac:	5f 4f       	sbci	r21, 0xFF	; 255
    51ae:	22 0f       	add	r18, r18
    51b0:	33 1f       	adc	r19, r19
    51b2:	44 1f       	adc	r20, r20
    51b4:	aa 1f       	adc	r26, r26
    51b6:	a9 f3       	breq	.-22     	; 0x51a2 <__divsf3_pse+0x10>
    51b8:	33 d0       	rcall	.+102    	; 0x5220 <__divsf3_pse+0x8e>
    51ba:	0e 2e       	mov	r0, r30
    51bc:	3a f0       	brmi	.+14     	; 0x51cc <__divsf3_pse+0x3a>
    51be:	e0 e8       	ldi	r30, 0x80	; 128
    51c0:	30 d0       	rcall	.+96     	; 0x5222 <__divsf3_pse+0x90>
    51c2:	91 50       	subi	r25, 0x01	; 1
    51c4:	50 40       	sbci	r21, 0x00	; 0
    51c6:	e6 95       	lsr	r30
    51c8:	00 1c       	adc	r0, r0
    51ca:	ca f7       	brpl	.-14     	; 0x51be <__divsf3_pse+0x2c>
    51cc:	29 d0       	rcall	.+82     	; 0x5220 <__divsf3_pse+0x8e>
    51ce:	fe 2f       	mov	r31, r30
    51d0:	27 d0       	rcall	.+78     	; 0x5220 <__divsf3_pse+0x8e>
    51d2:	66 0f       	add	r22, r22
    51d4:	77 1f       	adc	r23, r23
    51d6:	88 1f       	adc	r24, r24
    51d8:	bb 1f       	adc	r27, r27
    51da:	26 17       	cp	r18, r22
    51dc:	37 07       	cpc	r19, r23
    51de:	48 07       	cpc	r20, r24
    51e0:	ab 07       	cpc	r26, r27
    51e2:	b0 e8       	ldi	r27, 0x80	; 128
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <__divsf3_pse+0x56>
    51e6:	bb 0b       	sbc	r27, r27
    51e8:	80 2d       	mov	r24, r0
    51ea:	bf 01       	movw	r22, r30
    51ec:	ff 27       	eor	r31, r31
    51ee:	93 58       	subi	r25, 0x83	; 131
    51f0:	5f 4f       	sbci	r21, 0xFF	; 255
    51f2:	2a f0       	brmi	.+10     	; 0x51fe <__divsf3_pse+0x6c>
    51f4:	9e 3f       	cpi	r25, 0xFE	; 254
    51f6:	51 05       	cpc	r21, r1
    51f8:	68 f0       	brcs	.+26     	; 0x5214 <__divsf3_pse+0x82>
    51fa:	92 c0       	rjmp	.+292    	; 0x5320 <__fp_inf>
    51fc:	dc c0       	rjmp	.+440    	; 0x53b6 <__fp_szero>
    51fe:	5f 3f       	cpi	r21, 0xFF	; 255
    5200:	ec f3       	brlt	.-6      	; 0x51fc <__divsf3_pse+0x6a>
    5202:	98 3e       	cpi	r25, 0xE8	; 232
    5204:	dc f3       	brlt	.-10     	; 0x51fc <__divsf3_pse+0x6a>
    5206:	86 95       	lsr	r24
    5208:	77 95       	ror	r23
    520a:	67 95       	ror	r22
    520c:	b7 95       	ror	r27
    520e:	f7 95       	ror	r31
    5210:	9f 5f       	subi	r25, 0xFF	; 255
    5212:	c9 f7       	brne	.-14     	; 0x5206 <__divsf3_pse+0x74>
    5214:	88 0f       	add	r24, r24
    5216:	91 1d       	adc	r25, r1
    5218:	96 95       	lsr	r25
    521a:	87 95       	ror	r24
    521c:	97 f9       	bld	r25, 7
    521e:	08 95       	ret
    5220:	e1 e0       	ldi	r30, 0x01	; 1
    5222:	66 0f       	add	r22, r22
    5224:	77 1f       	adc	r23, r23
    5226:	88 1f       	adc	r24, r24
    5228:	bb 1f       	adc	r27, r27
    522a:	62 17       	cp	r22, r18
    522c:	73 07       	cpc	r23, r19
    522e:	84 07       	cpc	r24, r20
    5230:	ba 07       	cpc	r27, r26
    5232:	20 f0       	brcs	.+8      	; 0x523c <__divsf3_pse+0xaa>
    5234:	62 1b       	sub	r22, r18
    5236:	73 0b       	sbc	r23, r19
    5238:	84 0b       	sbc	r24, r20
    523a:	ba 0b       	sbc	r27, r26
    523c:	ee 1f       	adc	r30, r30
    523e:	88 f7       	brcc	.-30     	; 0x5222 <__divsf3_pse+0x90>
    5240:	e0 95       	com	r30
    5242:	08 95       	ret

00005244 <__fixsfsi>:
    5244:	04 d0       	rcall	.+8      	; 0x524e <__fixunssfsi>
    5246:	68 94       	set
    5248:	b1 11       	cpse	r27, r1
    524a:	b5 c0       	rjmp	.+362    	; 0x53b6 <__fp_szero>
    524c:	08 95       	ret

0000524e <__fixunssfsi>:
    524e:	98 d0       	rcall	.+304    	; 0x5380 <__fp_splitA>
    5250:	88 f0       	brcs	.+34     	; 0x5274 <__fixunssfsi+0x26>
    5252:	9f 57       	subi	r25, 0x7F	; 127
    5254:	90 f0       	brcs	.+36     	; 0x527a <__fixunssfsi+0x2c>
    5256:	b9 2f       	mov	r27, r25
    5258:	99 27       	eor	r25, r25
    525a:	b7 51       	subi	r27, 0x17	; 23
    525c:	a0 f0       	brcs	.+40     	; 0x5286 <__fixunssfsi+0x38>
    525e:	d1 f0       	breq	.+52     	; 0x5294 <__fixunssfsi+0x46>
    5260:	66 0f       	add	r22, r22
    5262:	77 1f       	adc	r23, r23
    5264:	88 1f       	adc	r24, r24
    5266:	99 1f       	adc	r25, r25
    5268:	1a f0       	brmi	.+6      	; 0x5270 <__fixunssfsi+0x22>
    526a:	ba 95       	dec	r27
    526c:	c9 f7       	brne	.-14     	; 0x5260 <__fixunssfsi+0x12>
    526e:	12 c0       	rjmp	.+36     	; 0x5294 <__fixunssfsi+0x46>
    5270:	b1 30       	cpi	r27, 0x01	; 1
    5272:	81 f0       	breq	.+32     	; 0x5294 <__fixunssfsi+0x46>
    5274:	9f d0       	rcall	.+318    	; 0x53b4 <__fp_zero>
    5276:	b1 e0       	ldi	r27, 0x01	; 1
    5278:	08 95       	ret
    527a:	9c c0       	rjmp	.+312    	; 0x53b4 <__fp_zero>
    527c:	67 2f       	mov	r22, r23
    527e:	78 2f       	mov	r23, r24
    5280:	88 27       	eor	r24, r24
    5282:	b8 5f       	subi	r27, 0xF8	; 248
    5284:	39 f0       	breq	.+14     	; 0x5294 <__fixunssfsi+0x46>
    5286:	b9 3f       	cpi	r27, 0xF9	; 249
    5288:	cc f3       	brlt	.-14     	; 0x527c <__fixunssfsi+0x2e>
    528a:	86 95       	lsr	r24
    528c:	77 95       	ror	r23
    528e:	67 95       	ror	r22
    5290:	b3 95       	inc	r27
    5292:	d9 f7       	brne	.-10     	; 0x528a <__fixunssfsi+0x3c>
    5294:	3e f4       	brtc	.+14     	; 0x52a4 <__fixunssfsi+0x56>
    5296:	90 95       	com	r25
    5298:	80 95       	com	r24
    529a:	70 95       	com	r23
    529c:	61 95       	neg	r22
    529e:	7f 4f       	sbci	r23, 0xFF	; 255
    52a0:	8f 4f       	sbci	r24, 0xFF	; 255
    52a2:	9f 4f       	sbci	r25, 0xFF	; 255
    52a4:	08 95       	ret

000052a6 <__floatunsisf>:
    52a6:	e8 94       	clt
    52a8:	09 c0       	rjmp	.+18     	; 0x52bc <__floatsisf+0x12>

000052aa <__floatsisf>:
    52aa:	97 fb       	bst	r25, 7
    52ac:	3e f4       	brtc	.+14     	; 0x52bc <__floatsisf+0x12>
    52ae:	90 95       	com	r25
    52b0:	80 95       	com	r24
    52b2:	70 95       	com	r23
    52b4:	61 95       	neg	r22
    52b6:	7f 4f       	sbci	r23, 0xFF	; 255
    52b8:	8f 4f       	sbci	r24, 0xFF	; 255
    52ba:	9f 4f       	sbci	r25, 0xFF	; 255
    52bc:	99 23       	and	r25, r25
    52be:	a9 f0       	breq	.+42     	; 0x52ea <__floatsisf+0x40>
    52c0:	f9 2f       	mov	r31, r25
    52c2:	96 e9       	ldi	r25, 0x96	; 150
    52c4:	bb 27       	eor	r27, r27
    52c6:	93 95       	inc	r25
    52c8:	f6 95       	lsr	r31
    52ca:	87 95       	ror	r24
    52cc:	77 95       	ror	r23
    52ce:	67 95       	ror	r22
    52d0:	b7 95       	ror	r27
    52d2:	f1 11       	cpse	r31, r1
    52d4:	f8 cf       	rjmp	.-16     	; 0x52c6 <__floatsisf+0x1c>
    52d6:	fa f4       	brpl	.+62     	; 0x5316 <__floatsisf+0x6c>
    52d8:	bb 0f       	add	r27, r27
    52da:	11 f4       	brne	.+4      	; 0x52e0 <__floatsisf+0x36>
    52dc:	60 ff       	sbrs	r22, 0
    52de:	1b c0       	rjmp	.+54     	; 0x5316 <__floatsisf+0x6c>
    52e0:	6f 5f       	subi	r22, 0xFF	; 255
    52e2:	7f 4f       	sbci	r23, 0xFF	; 255
    52e4:	8f 4f       	sbci	r24, 0xFF	; 255
    52e6:	9f 4f       	sbci	r25, 0xFF	; 255
    52e8:	16 c0       	rjmp	.+44     	; 0x5316 <__floatsisf+0x6c>
    52ea:	88 23       	and	r24, r24
    52ec:	11 f0       	breq	.+4      	; 0x52f2 <__floatsisf+0x48>
    52ee:	96 e9       	ldi	r25, 0x96	; 150
    52f0:	11 c0       	rjmp	.+34     	; 0x5314 <__floatsisf+0x6a>
    52f2:	77 23       	and	r23, r23
    52f4:	21 f0       	breq	.+8      	; 0x52fe <__floatsisf+0x54>
    52f6:	9e e8       	ldi	r25, 0x8E	; 142
    52f8:	87 2f       	mov	r24, r23
    52fa:	76 2f       	mov	r23, r22
    52fc:	05 c0       	rjmp	.+10     	; 0x5308 <__floatsisf+0x5e>
    52fe:	66 23       	and	r22, r22
    5300:	71 f0       	breq	.+28     	; 0x531e <__floatsisf+0x74>
    5302:	96 e8       	ldi	r25, 0x86	; 134
    5304:	86 2f       	mov	r24, r22
    5306:	70 e0       	ldi	r23, 0x00	; 0
    5308:	60 e0       	ldi	r22, 0x00	; 0
    530a:	2a f0       	brmi	.+10     	; 0x5316 <__floatsisf+0x6c>
    530c:	9a 95       	dec	r25
    530e:	66 0f       	add	r22, r22
    5310:	77 1f       	adc	r23, r23
    5312:	88 1f       	adc	r24, r24
    5314:	da f7       	brpl	.-10     	; 0x530c <__floatsisf+0x62>
    5316:	88 0f       	add	r24, r24
    5318:	96 95       	lsr	r25
    531a:	87 95       	ror	r24
    531c:	97 f9       	bld	r25, 7
    531e:	08 95       	ret

00005320 <__fp_inf>:
    5320:	97 f9       	bld	r25, 7
    5322:	9f 67       	ori	r25, 0x7F	; 127
    5324:	80 e8       	ldi	r24, 0x80	; 128
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	60 e0       	ldi	r22, 0x00	; 0
    532a:	08 95       	ret

0000532c <__fp_nan>:
    532c:	9f ef       	ldi	r25, 0xFF	; 255
    532e:	80 ec       	ldi	r24, 0xC0	; 192
    5330:	08 95       	ret

00005332 <__fp_pscA>:
    5332:	00 24       	eor	r0, r0
    5334:	0a 94       	dec	r0
    5336:	16 16       	cp	r1, r22
    5338:	17 06       	cpc	r1, r23
    533a:	18 06       	cpc	r1, r24
    533c:	09 06       	cpc	r0, r25
    533e:	08 95       	ret

00005340 <__fp_pscB>:
    5340:	00 24       	eor	r0, r0
    5342:	0a 94       	dec	r0
    5344:	12 16       	cp	r1, r18
    5346:	13 06       	cpc	r1, r19
    5348:	14 06       	cpc	r1, r20
    534a:	05 06       	cpc	r0, r21
    534c:	08 95       	ret

0000534e <__fp_round>:
    534e:	09 2e       	mov	r0, r25
    5350:	03 94       	inc	r0
    5352:	00 0c       	add	r0, r0
    5354:	11 f4       	brne	.+4      	; 0x535a <__fp_round+0xc>
    5356:	88 23       	and	r24, r24
    5358:	52 f0       	brmi	.+20     	; 0x536e <__fp_round+0x20>
    535a:	bb 0f       	add	r27, r27
    535c:	40 f4       	brcc	.+16     	; 0x536e <__fp_round+0x20>
    535e:	bf 2b       	or	r27, r31
    5360:	11 f4       	brne	.+4      	; 0x5366 <__fp_round+0x18>
    5362:	60 ff       	sbrs	r22, 0
    5364:	04 c0       	rjmp	.+8      	; 0x536e <__fp_round+0x20>
    5366:	6f 5f       	subi	r22, 0xFF	; 255
    5368:	7f 4f       	sbci	r23, 0xFF	; 255
    536a:	8f 4f       	sbci	r24, 0xFF	; 255
    536c:	9f 4f       	sbci	r25, 0xFF	; 255
    536e:	08 95       	ret

00005370 <__fp_split3>:
    5370:	57 fd       	sbrc	r21, 7
    5372:	90 58       	subi	r25, 0x80	; 128
    5374:	44 0f       	add	r20, r20
    5376:	55 1f       	adc	r21, r21
    5378:	59 f0       	breq	.+22     	; 0x5390 <__fp_splitA+0x10>
    537a:	5f 3f       	cpi	r21, 0xFF	; 255
    537c:	71 f0       	breq	.+28     	; 0x539a <__fp_splitA+0x1a>
    537e:	47 95       	ror	r20

00005380 <__fp_splitA>:
    5380:	88 0f       	add	r24, r24
    5382:	97 fb       	bst	r25, 7
    5384:	99 1f       	adc	r25, r25
    5386:	61 f0       	breq	.+24     	; 0x53a0 <__fp_splitA+0x20>
    5388:	9f 3f       	cpi	r25, 0xFF	; 255
    538a:	79 f0       	breq	.+30     	; 0x53aa <__fp_splitA+0x2a>
    538c:	87 95       	ror	r24
    538e:	08 95       	ret
    5390:	12 16       	cp	r1, r18
    5392:	13 06       	cpc	r1, r19
    5394:	14 06       	cpc	r1, r20
    5396:	55 1f       	adc	r21, r21
    5398:	f2 cf       	rjmp	.-28     	; 0x537e <__fp_split3+0xe>
    539a:	46 95       	lsr	r20
    539c:	f1 df       	rcall	.-30     	; 0x5380 <__fp_splitA>
    539e:	08 c0       	rjmp	.+16     	; 0x53b0 <__fp_splitA+0x30>
    53a0:	16 16       	cp	r1, r22
    53a2:	17 06       	cpc	r1, r23
    53a4:	18 06       	cpc	r1, r24
    53a6:	99 1f       	adc	r25, r25
    53a8:	f1 cf       	rjmp	.-30     	; 0x538c <__fp_splitA+0xc>
    53aa:	86 95       	lsr	r24
    53ac:	71 05       	cpc	r23, r1
    53ae:	61 05       	cpc	r22, r1
    53b0:	08 94       	sec
    53b2:	08 95       	ret

000053b4 <__fp_zero>:
    53b4:	e8 94       	clt

000053b6 <__fp_szero>:
    53b6:	bb 27       	eor	r27, r27
    53b8:	66 27       	eor	r22, r22
    53ba:	77 27       	eor	r23, r23
    53bc:	cb 01       	movw	r24, r22
    53be:	97 f9       	bld	r25, 7
    53c0:	08 95       	ret

000053c2 <__mulsf3>:
    53c2:	0b d0       	rcall	.+22     	; 0x53da <__mulsf3x>
    53c4:	c4 cf       	rjmp	.-120    	; 0x534e <__fp_round>
    53c6:	b5 df       	rcall	.-150    	; 0x5332 <__fp_pscA>
    53c8:	28 f0       	brcs	.+10     	; 0x53d4 <__mulsf3+0x12>
    53ca:	ba df       	rcall	.-140    	; 0x5340 <__fp_pscB>
    53cc:	18 f0       	brcs	.+6      	; 0x53d4 <__mulsf3+0x12>
    53ce:	95 23       	and	r25, r21
    53d0:	09 f0       	breq	.+2      	; 0x53d4 <__mulsf3+0x12>
    53d2:	a6 cf       	rjmp	.-180    	; 0x5320 <__fp_inf>
    53d4:	ab cf       	rjmp	.-170    	; 0x532c <__fp_nan>
    53d6:	11 24       	eor	r1, r1
    53d8:	ee cf       	rjmp	.-36     	; 0x53b6 <__fp_szero>

000053da <__mulsf3x>:
    53da:	ca df       	rcall	.-108    	; 0x5370 <__fp_split3>
    53dc:	a0 f3       	brcs	.-24     	; 0x53c6 <__mulsf3+0x4>

000053de <__mulsf3_pse>:
    53de:	95 9f       	mul	r25, r21
    53e0:	d1 f3       	breq	.-12     	; 0x53d6 <__mulsf3+0x14>
    53e2:	95 0f       	add	r25, r21
    53e4:	50 e0       	ldi	r21, 0x00	; 0
    53e6:	55 1f       	adc	r21, r21
    53e8:	62 9f       	mul	r22, r18
    53ea:	f0 01       	movw	r30, r0
    53ec:	72 9f       	mul	r23, r18
    53ee:	bb 27       	eor	r27, r27
    53f0:	f0 0d       	add	r31, r0
    53f2:	b1 1d       	adc	r27, r1
    53f4:	63 9f       	mul	r22, r19
    53f6:	aa 27       	eor	r26, r26
    53f8:	f0 0d       	add	r31, r0
    53fa:	b1 1d       	adc	r27, r1
    53fc:	aa 1f       	adc	r26, r26
    53fe:	64 9f       	mul	r22, r20
    5400:	66 27       	eor	r22, r22
    5402:	b0 0d       	add	r27, r0
    5404:	a1 1d       	adc	r26, r1
    5406:	66 1f       	adc	r22, r22
    5408:	82 9f       	mul	r24, r18
    540a:	22 27       	eor	r18, r18
    540c:	b0 0d       	add	r27, r0
    540e:	a1 1d       	adc	r26, r1
    5410:	62 1f       	adc	r22, r18
    5412:	73 9f       	mul	r23, r19
    5414:	b0 0d       	add	r27, r0
    5416:	a1 1d       	adc	r26, r1
    5418:	62 1f       	adc	r22, r18
    541a:	83 9f       	mul	r24, r19
    541c:	a0 0d       	add	r26, r0
    541e:	61 1d       	adc	r22, r1
    5420:	22 1f       	adc	r18, r18
    5422:	74 9f       	mul	r23, r20
    5424:	33 27       	eor	r19, r19
    5426:	a0 0d       	add	r26, r0
    5428:	61 1d       	adc	r22, r1
    542a:	23 1f       	adc	r18, r19
    542c:	84 9f       	mul	r24, r20
    542e:	60 0d       	add	r22, r0
    5430:	21 1d       	adc	r18, r1
    5432:	82 2f       	mov	r24, r18
    5434:	76 2f       	mov	r23, r22
    5436:	6a 2f       	mov	r22, r26
    5438:	11 24       	eor	r1, r1
    543a:	9f 57       	subi	r25, 0x7F	; 127
    543c:	50 40       	sbci	r21, 0x00	; 0
    543e:	8a f0       	brmi	.+34     	; 0x5462 <__mulsf3_pse+0x84>
    5440:	e1 f0       	breq	.+56     	; 0x547a <__mulsf3_pse+0x9c>
    5442:	88 23       	and	r24, r24
    5444:	4a f0       	brmi	.+18     	; 0x5458 <__mulsf3_pse+0x7a>
    5446:	ee 0f       	add	r30, r30
    5448:	ff 1f       	adc	r31, r31
    544a:	bb 1f       	adc	r27, r27
    544c:	66 1f       	adc	r22, r22
    544e:	77 1f       	adc	r23, r23
    5450:	88 1f       	adc	r24, r24
    5452:	91 50       	subi	r25, 0x01	; 1
    5454:	50 40       	sbci	r21, 0x00	; 0
    5456:	a9 f7       	brne	.-22     	; 0x5442 <__mulsf3_pse+0x64>
    5458:	9e 3f       	cpi	r25, 0xFE	; 254
    545a:	51 05       	cpc	r21, r1
    545c:	70 f0       	brcs	.+28     	; 0x547a <__mulsf3_pse+0x9c>
    545e:	60 cf       	rjmp	.-320    	; 0x5320 <__fp_inf>
    5460:	aa cf       	rjmp	.-172    	; 0x53b6 <__fp_szero>
    5462:	5f 3f       	cpi	r21, 0xFF	; 255
    5464:	ec f3       	brlt	.-6      	; 0x5460 <__mulsf3_pse+0x82>
    5466:	98 3e       	cpi	r25, 0xE8	; 232
    5468:	dc f3       	brlt	.-10     	; 0x5460 <__mulsf3_pse+0x82>
    546a:	86 95       	lsr	r24
    546c:	77 95       	ror	r23
    546e:	67 95       	ror	r22
    5470:	b7 95       	ror	r27
    5472:	f7 95       	ror	r31
    5474:	e7 95       	ror	r30
    5476:	9f 5f       	subi	r25, 0xFF	; 255
    5478:	c1 f7       	brne	.-16     	; 0x546a <__mulsf3_pse+0x8c>
    547a:	fe 2b       	or	r31, r30
    547c:	88 0f       	add	r24, r24
    547e:	91 1d       	adc	r25, r1
    5480:	96 95       	lsr	r25
    5482:	87 95       	ror	r24
    5484:	97 f9       	bld	r25, 7
    5486:	08 95       	ret

00005488 <__udivmodsi4>:
    5488:	a1 e2       	ldi	r26, 0x21	; 33
    548a:	1a 2e       	mov	r1, r26
    548c:	aa 1b       	sub	r26, r26
    548e:	bb 1b       	sub	r27, r27
    5490:	fd 01       	movw	r30, r26
    5492:	0d c0       	rjmp	.+26     	; 0x54ae <__udivmodsi4_ep>

00005494 <__udivmodsi4_loop>:
    5494:	aa 1f       	adc	r26, r26
    5496:	bb 1f       	adc	r27, r27
    5498:	ee 1f       	adc	r30, r30
    549a:	ff 1f       	adc	r31, r31
    549c:	a2 17       	cp	r26, r18
    549e:	b3 07       	cpc	r27, r19
    54a0:	e4 07       	cpc	r30, r20
    54a2:	f5 07       	cpc	r31, r21
    54a4:	20 f0       	brcs	.+8      	; 0x54ae <__udivmodsi4_ep>
    54a6:	a2 1b       	sub	r26, r18
    54a8:	b3 0b       	sbc	r27, r19
    54aa:	e4 0b       	sbc	r30, r20
    54ac:	f5 0b       	sbc	r31, r21

000054ae <__udivmodsi4_ep>:
    54ae:	66 1f       	adc	r22, r22
    54b0:	77 1f       	adc	r23, r23
    54b2:	88 1f       	adc	r24, r24
    54b4:	99 1f       	adc	r25, r25
    54b6:	1a 94       	dec	r1
    54b8:	69 f7       	brne	.-38     	; 0x5494 <__udivmodsi4_loop>
    54ba:	60 95       	com	r22
    54bc:	70 95       	com	r23
    54be:	80 95       	com	r24
    54c0:	90 95       	com	r25
    54c2:	9b 01       	movw	r18, r22
    54c4:	ac 01       	movw	r20, r24
    54c6:	bd 01       	movw	r22, r26
    54c8:	cf 01       	movw	r24, r30
    54ca:	08 95       	ret

000054cc <__tablejump2__>:
    54cc:	ee 0f       	add	r30, r30
    54ce:	ff 1f       	adc	r31, r31
    54d0:	88 1f       	adc	r24, r24
    54d2:	8b bf       	out	0x3b, r24	; 59
    54d4:	07 90       	elpm	r0, Z+
    54d6:	f6 91       	elpm	r31, Z
    54d8:	e0 2d       	mov	r30, r0
    54da:	19 94       	eijmp

000054dc <calloc>:
    54dc:	0f 93       	push	r16
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	86 9f       	mul	r24, r22
    54e6:	80 01       	movw	r16, r0
    54e8:	87 9f       	mul	r24, r23
    54ea:	10 0d       	add	r17, r0
    54ec:	96 9f       	mul	r25, r22
    54ee:	10 0d       	add	r17, r0
    54f0:	11 24       	eor	r1, r1
    54f2:	c8 01       	movw	r24, r16
    54f4:	0d d0       	rcall	.+26     	; 0x5510 <malloc>
    54f6:	ec 01       	movw	r28, r24
    54f8:	00 97       	sbiw	r24, 0x00	; 0
    54fa:	21 f0       	breq	.+8      	; 0x5504 <calloc+0x28>
    54fc:	a8 01       	movw	r20, r16
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	70 e0       	ldi	r23, 0x00	; 0
    5502:	34 d1       	rcall	.+616    	; 0x576c <memset>
    5504:	ce 01       	movw	r24, r28
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	1f 91       	pop	r17
    550c:	0f 91       	pop	r16
    550e:	08 95       	ret

00005510 <malloc>:
    5510:	0f 93       	push	r16
    5512:	1f 93       	push	r17
    5514:	cf 93       	push	r28
    5516:	df 93       	push	r29
    5518:	82 30       	cpi	r24, 0x02	; 2
    551a:	91 05       	cpc	r25, r1
    551c:	10 f4       	brcc	.+4      	; 0x5522 <malloc+0x12>
    551e:	82 e0       	ldi	r24, 0x02	; 2
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	e0 91 88 1a 	lds	r30, 0x1A88	; 0x801a88 <__flp>
    5526:	f0 91 89 1a 	lds	r31, 0x1A89	; 0x801a89 <__flp+0x1>
    552a:	20 e0       	ldi	r18, 0x00	; 0
    552c:	30 e0       	ldi	r19, 0x00	; 0
    552e:	a0 e0       	ldi	r26, 0x00	; 0
    5530:	b0 e0       	ldi	r27, 0x00	; 0
    5532:	30 97       	sbiw	r30, 0x00	; 0
    5534:	19 f1       	breq	.+70     	; 0x557c <malloc+0x6c>
    5536:	40 81       	ld	r20, Z
    5538:	51 81       	ldd	r21, Z+1	; 0x01
    553a:	02 81       	ldd	r16, Z+2	; 0x02
    553c:	13 81       	ldd	r17, Z+3	; 0x03
    553e:	48 17       	cp	r20, r24
    5540:	59 07       	cpc	r21, r25
    5542:	c8 f0       	brcs	.+50     	; 0x5576 <malloc+0x66>
    5544:	84 17       	cp	r24, r20
    5546:	95 07       	cpc	r25, r21
    5548:	69 f4       	brne	.+26     	; 0x5564 <malloc+0x54>
    554a:	10 97       	sbiw	r26, 0x00	; 0
    554c:	31 f0       	breq	.+12     	; 0x555a <malloc+0x4a>
    554e:	12 96       	adiw	r26, 0x02	; 2
    5550:	0c 93       	st	X, r16
    5552:	12 97       	sbiw	r26, 0x02	; 2
    5554:	13 96       	adiw	r26, 0x03	; 3
    5556:	1c 93       	st	X, r17
    5558:	27 c0       	rjmp	.+78     	; 0x55a8 <malloc+0x98>
    555a:	00 93 88 1a 	sts	0x1A88, r16	; 0x801a88 <__flp>
    555e:	10 93 89 1a 	sts	0x1A89, r17	; 0x801a89 <__flp+0x1>
    5562:	22 c0       	rjmp	.+68     	; 0x55a8 <malloc+0x98>
    5564:	21 15       	cp	r18, r1
    5566:	31 05       	cpc	r19, r1
    5568:	19 f0       	breq	.+6      	; 0x5570 <malloc+0x60>
    556a:	42 17       	cp	r20, r18
    556c:	53 07       	cpc	r21, r19
    556e:	18 f4       	brcc	.+6      	; 0x5576 <malloc+0x66>
    5570:	9a 01       	movw	r18, r20
    5572:	bd 01       	movw	r22, r26
    5574:	ef 01       	movw	r28, r30
    5576:	df 01       	movw	r26, r30
    5578:	f8 01       	movw	r30, r16
    557a:	db cf       	rjmp	.-74     	; 0x5532 <malloc+0x22>
    557c:	21 15       	cp	r18, r1
    557e:	31 05       	cpc	r19, r1
    5580:	f9 f0       	breq	.+62     	; 0x55c0 <malloc+0xb0>
    5582:	28 1b       	sub	r18, r24
    5584:	39 0b       	sbc	r19, r25
    5586:	24 30       	cpi	r18, 0x04	; 4
    5588:	31 05       	cpc	r19, r1
    558a:	80 f4       	brcc	.+32     	; 0x55ac <malloc+0x9c>
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
    558e:	9b 81       	ldd	r25, Y+3	; 0x03
    5590:	61 15       	cp	r22, r1
    5592:	71 05       	cpc	r23, r1
    5594:	21 f0       	breq	.+8      	; 0x559e <malloc+0x8e>
    5596:	fb 01       	movw	r30, r22
    5598:	93 83       	std	Z+3, r25	; 0x03
    559a:	82 83       	std	Z+2, r24	; 0x02
    559c:	04 c0       	rjmp	.+8      	; 0x55a6 <malloc+0x96>
    559e:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <__flp+0x1>
    55a2:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <__flp>
    55a6:	fe 01       	movw	r30, r28
    55a8:	32 96       	adiw	r30, 0x02	; 2
    55aa:	44 c0       	rjmp	.+136    	; 0x5634 <malloc+0x124>
    55ac:	fe 01       	movw	r30, r28
    55ae:	e2 0f       	add	r30, r18
    55b0:	f3 1f       	adc	r31, r19
    55b2:	81 93       	st	Z+, r24
    55b4:	91 93       	st	Z+, r25
    55b6:	22 50       	subi	r18, 0x02	; 2
    55b8:	31 09       	sbc	r19, r1
    55ba:	39 83       	std	Y+1, r19	; 0x01
    55bc:	28 83       	st	Y, r18
    55be:	3a c0       	rjmp	.+116    	; 0x5634 <malloc+0x124>
    55c0:	20 91 86 1a 	lds	r18, 0x1A86	; 0x801a86 <__brkval>
    55c4:	30 91 87 1a 	lds	r19, 0x1A87	; 0x801a87 <__brkval+0x1>
    55c8:	23 2b       	or	r18, r19
    55ca:	41 f4       	brne	.+16     	; 0x55dc <malloc+0xcc>
    55cc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    55d0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    55d4:	30 93 87 1a 	sts	0x1A87, r19	; 0x801a87 <__brkval+0x1>
    55d8:	20 93 86 1a 	sts	0x1A86, r18	; 0x801a86 <__brkval>
    55dc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    55e0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    55e4:	21 15       	cp	r18, r1
    55e6:	31 05       	cpc	r19, r1
    55e8:	41 f4       	brne	.+16     	; 0x55fa <malloc+0xea>
    55ea:	2d b7       	in	r18, 0x3d	; 61
    55ec:	3e b7       	in	r19, 0x3e	; 62
    55ee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    55f2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    55f6:	24 1b       	sub	r18, r20
    55f8:	35 0b       	sbc	r19, r21
    55fa:	e0 91 86 1a 	lds	r30, 0x1A86	; 0x801a86 <__brkval>
    55fe:	f0 91 87 1a 	lds	r31, 0x1A87	; 0x801a87 <__brkval+0x1>
    5602:	e2 17       	cp	r30, r18
    5604:	f3 07       	cpc	r31, r19
    5606:	a0 f4       	brcc	.+40     	; 0x5630 <malloc+0x120>
    5608:	2e 1b       	sub	r18, r30
    560a:	3f 0b       	sbc	r19, r31
    560c:	28 17       	cp	r18, r24
    560e:	39 07       	cpc	r19, r25
    5610:	78 f0       	brcs	.+30     	; 0x5630 <malloc+0x120>
    5612:	ac 01       	movw	r20, r24
    5614:	4e 5f       	subi	r20, 0xFE	; 254
    5616:	5f 4f       	sbci	r21, 0xFF	; 255
    5618:	24 17       	cp	r18, r20
    561a:	35 07       	cpc	r19, r21
    561c:	48 f0       	brcs	.+18     	; 0x5630 <malloc+0x120>
    561e:	4e 0f       	add	r20, r30
    5620:	5f 1f       	adc	r21, r31
    5622:	50 93 87 1a 	sts	0x1A87, r21	; 0x801a87 <__brkval+0x1>
    5626:	40 93 86 1a 	sts	0x1A86, r20	; 0x801a86 <__brkval>
    562a:	81 93       	st	Z+, r24
    562c:	91 93       	st	Z+, r25
    562e:	02 c0       	rjmp	.+4      	; 0x5634 <malloc+0x124>
    5630:	e0 e0       	ldi	r30, 0x00	; 0
    5632:	f0 e0       	ldi	r31, 0x00	; 0
    5634:	cf 01       	movw	r24, r30
    5636:	df 91       	pop	r29
    5638:	cf 91       	pop	r28
    563a:	1f 91       	pop	r17
    563c:	0f 91       	pop	r16
    563e:	08 95       	ret

00005640 <free>:
    5640:	cf 93       	push	r28
    5642:	df 93       	push	r29
    5644:	00 97       	sbiw	r24, 0x00	; 0
    5646:	09 f4       	brne	.+2      	; 0x564a <free+0xa>
    5648:	81 c0       	rjmp	.+258    	; 0x574c <free+0x10c>
    564a:	fc 01       	movw	r30, r24
    564c:	32 97       	sbiw	r30, 0x02	; 2
    564e:	13 82       	std	Z+3, r1	; 0x03
    5650:	12 82       	std	Z+2, r1	; 0x02
    5652:	a0 91 88 1a 	lds	r26, 0x1A88	; 0x801a88 <__flp>
    5656:	b0 91 89 1a 	lds	r27, 0x1A89	; 0x801a89 <__flp+0x1>
    565a:	10 97       	sbiw	r26, 0x00	; 0
    565c:	81 f4       	brne	.+32     	; 0x567e <free+0x3e>
    565e:	20 81       	ld	r18, Z
    5660:	31 81       	ldd	r19, Z+1	; 0x01
    5662:	82 0f       	add	r24, r18
    5664:	93 1f       	adc	r25, r19
    5666:	20 91 86 1a 	lds	r18, 0x1A86	; 0x801a86 <__brkval>
    566a:	30 91 87 1a 	lds	r19, 0x1A87	; 0x801a87 <__brkval+0x1>
    566e:	28 17       	cp	r18, r24
    5670:	39 07       	cpc	r19, r25
    5672:	51 f5       	brne	.+84     	; 0x56c8 <free+0x88>
    5674:	f0 93 87 1a 	sts	0x1A87, r31	; 0x801a87 <__brkval+0x1>
    5678:	e0 93 86 1a 	sts	0x1A86, r30	; 0x801a86 <__brkval>
    567c:	67 c0       	rjmp	.+206    	; 0x574c <free+0x10c>
    567e:	ed 01       	movw	r28, r26
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	ce 17       	cp	r28, r30
    5686:	df 07       	cpc	r29, r31
    5688:	40 f4       	brcc	.+16     	; 0x569a <free+0x5a>
    568a:	4a 81       	ldd	r20, Y+2	; 0x02
    568c:	5b 81       	ldd	r21, Y+3	; 0x03
    568e:	9e 01       	movw	r18, r28
    5690:	41 15       	cp	r20, r1
    5692:	51 05       	cpc	r21, r1
    5694:	f1 f0       	breq	.+60     	; 0x56d2 <free+0x92>
    5696:	ea 01       	movw	r28, r20
    5698:	f5 cf       	rjmp	.-22     	; 0x5684 <free+0x44>
    569a:	d3 83       	std	Z+3, r29	; 0x03
    569c:	c2 83       	std	Z+2, r28	; 0x02
    569e:	40 81       	ld	r20, Z
    56a0:	51 81       	ldd	r21, Z+1	; 0x01
    56a2:	84 0f       	add	r24, r20
    56a4:	95 1f       	adc	r25, r21
    56a6:	c8 17       	cp	r28, r24
    56a8:	d9 07       	cpc	r29, r25
    56aa:	59 f4       	brne	.+22     	; 0x56c2 <free+0x82>
    56ac:	88 81       	ld	r24, Y
    56ae:	99 81       	ldd	r25, Y+1	; 0x01
    56b0:	84 0f       	add	r24, r20
    56b2:	95 1f       	adc	r25, r21
    56b4:	02 96       	adiw	r24, 0x02	; 2
    56b6:	91 83       	std	Z+1, r25	; 0x01
    56b8:	80 83       	st	Z, r24
    56ba:	8a 81       	ldd	r24, Y+2	; 0x02
    56bc:	9b 81       	ldd	r25, Y+3	; 0x03
    56be:	93 83       	std	Z+3, r25	; 0x03
    56c0:	82 83       	std	Z+2, r24	; 0x02
    56c2:	21 15       	cp	r18, r1
    56c4:	31 05       	cpc	r19, r1
    56c6:	29 f4       	brne	.+10     	; 0x56d2 <free+0x92>
    56c8:	f0 93 89 1a 	sts	0x1A89, r31	; 0x801a89 <__flp+0x1>
    56cc:	e0 93 88 1a 	sts	0x1A88, r30	; 0x801a88 <__flp>
    56d0:	3d c0       	rjmp	.+122    	; 0x574c <free+0x10c>
    56d2:	e9 01       	movw	r28, r18
    56d4:	fb 83       	std	Y+3, r31	; 0x03
    56d6:	ea 83       	std	Y+2, r30	; 0x02
    56d8:	49 91       	ld	r20, Y+
    56da:	59 91       	ld	r21, Y+
    56dc:	c4 0f       	add	r28, r20
    56de:	d5 1f       	adc	r29, r21
    56e0:	ec 17       	cp	r30, r28
    56e2:	fd 07       	cpc	r31, r29
    56e4:	61 f4       	brne	.+24     	; 0x56fe <free+0xbe>
    56e6:	80 81       	ld	r24, Z
    56e8:	91 81       	ldd	r25, Z+1	; 0x01
    56ea:	84 0f       	add	r24, r20
    56ec:	95 1f       	adc	r25, r21
    56ee:	02 96       	adiw	r24, 0x02	; 2
    56f0:	e9 01       	movw	r28, r18
    56f2:	99 83       	std	Y+1, r25	; 0x01
    56f4:	88 83       	st	Y, r24
    56f6:	82 81       	ldd	r24, Z+2	; 0x02
    56f8:	93 81       	ldd	r25, Z+3	; 0x03
    56fa:	9b 83       	std	Y+3, r25	; 0x03
    56fc:	8a 83       	std	Y+2, r24	; 0x02
    56fe:	e0 e0       	ldi	r30, 0x00	; 0
    5700:	f0 e0       	ldi	r31, 0x00	; 0
    5702:	12 96       	adiw	r26, 0x02	; 2
    5704:	8d 91       	ld	r24, X+
    5706:	9c 91       	ld	r25, X
    5708:	13 97       	sbiw	r26, 0x03	; 3
    570a:	00 97       	sbiw	r24, 0x00	; 0
    570c:	19 f0       	breq	.+6      	; 0x5714 <free+0xd4>
    570e:	fd 01       	movw	r30, r26
    5710:	dc 01       	movw	r26, r24
    5712:	f7 cf       	rjmp	.-18     	; 0x5702 <free+0xc2>
    5714:	8d 91       	ld	r24, X+
    5716:	9c 91       	ld	r25, X
    5718:	11 97       	sbiw	r26, 0x01	; 1
    571a:	9d 01       	movw	r18, r26
    571c:	2e 5f       	subi	r18, 0xFE	; 254
    571e:	3f 4f       	sbci	r19, 0xFF	; 255
    5720:	82 0f       	add	r24, r18
    5722:	93 1f       	adc	r25, r19
    5724:	20 91 86 1a 	lds	r18, 0x1A86	; 0x801a86 <__brkval>
    5728:	30 91 87 1a 	lds	r19, 0x1A87	; 0x801a87 <__brkval+0x1>
    572c:	28 17       	cp	r18, r24
    572e:	39 07       	cpc	r19, r25
    5730:	69 f4       	brne	.+26     	; 0x574c <free+0x10c>
    5732:	30 97       	sbiw	r30, 0x00	; 0
    5734:	29 f4       	brne	.+10     	; 0x5740 <free+0x100>
    5736:	10 92 89 1a 	sts	0x1A89, r1	; 0x801a89 <__flp+0x1>
    573a:	10 92 88 1a 	sts	0x1A88, r1	; 0x801a88 <__flp>
    573e:	02 c0       	rjmp	.+4      	; 0x5744 <free+0x104>
    5740:	13 82       	std	Z+3, r1	; 0x03
    5742:	12 82       	std	Z+2, r1	; 0x02
    5744:	b0 93 87 1a 	sts	0x1A87, r27	; 0x801a87 <__brkval+0x1>
    5748:	a0 93 86 1a 	sts	0x1A86, r26	; 0x801a86 <__brkval>
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	08 95       	ret

00005752 <abort>:
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	f8 94       	cli
    5758:	7d c3       	rjmp	.+1786   	; 0x5e54 <_exit>

0000575a <memcpy>:
    575a:	fb 01       	movw	r30, r22
    575c:	dc 01       	movw	r26, r24
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <memcpy+0xa>
    5760:	01 90       	ld	r0, Z+
    5762:	0d 92       	st	X+, r0
    5764:	41 50       	subi	r20, 0x01	; 1
    5766:	50 40       	sbci	r21, 0x00	; 0
    5768:	d8 f7       	brcc	.-10     	; 0x5760 <memcpy+0x6>
    576a:	08 95       	ret

0000576c <memset>:
    576c:	dc 01       	movw	r26, r24
    576e:	01 c0       	rjmp	.+2      	; 0x5772 <memset+0x6>
    5770:	6d 93       	st	X+, r22
    5772:	41 50       	subi	r20, 0x01	; 1
    5774:	50 40       	sbci	r21, 0x00	; 0
    5776:	e0 f7       	brcc	.-8      	; 0x5770 <memset+0x4>
    5778:	08 95       	ret

0000577a <strcasestr>:
    577a:	fb 01       	movw	r30, r22
    577c:	51 91       	ld	r21, Z+
    577e:	55 23       	and	r21, r21
    5780:	b1 f0       	breq	.+44     	; 0x57ae <strcasestr+0x34>
    5782:	bf 01       	movw	r22, r30
    5784:	dc 01       	movw	r26, r24
    5786:	05 2e       	mov	r0, r21
    5788:	4d 91       	ld	r20, X+
    578a:	44 23       	and	r20, r20
    578c:	69 f0       	breq	.+26     	; 0x57a8 <strcasestr+0x2e>
    578e:	10 d0       	rcall	.+32     	; 0x57b0 <strcasestr+0x36>
    5790:	d9 f7       	brne	.-10     	; 0x5788 <strcasestr+0xe>
    5792:	cd 01       	movw	r24, r26
    5794:	01 90       	ld	r0, Z+
    5796:	00 20       	and	r0, r0
    5798:	49 f0       	breq	.+18     	; 0x57ac <strcasestr+0x32>
    579a:	4d 91       	ld	r20, X+
    579c:	41 11       	cpse	r20, r1
    579e:	08 d0       	rcall	.+16     	; 0x57b0 <strcasestr+0x36>
    57a0:	c9 f3       	breq	.-14     	; 0x5794 <strcasestr+0x1a>
    57a2:	fb 01       	movw	r30, r22
    57a4:	41 11       	cpse	r20, r1
    57a6:	ee cf       	rjmp	.-36     	; 0x5784 <strcasestr+0xa>
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	01 97       	sbiw	r24, 0x01	; 1
    57ae:	08 95       	ret
    57b0:	40 25       	eor	r20, r0
    57b2:	39 f0       	breq	.+14     	; 0x57c2 <strcasestr+0x48>
    57b4:	40 32       	cpi	r20, 0x20	; 32
    57b6:	29 f4       	brne	.+10     	; 0x57c2 <strcasestr+0x48>
    57b8:	40 29       	or	r20, r0
    57ba:	4b 57       	subi	r20, 0x7B	; 123
    57bc:	46 5e       	subi	r20, 0xE6	; 230
    57be:	08 f0       	brcs	.+2      	; 0x57c2 <strcasestr+0x48>
    57c0:	18 94       	sez
    57c2:	08 95       	ret

000057c4 <strcat>:
    57c4:	fb 01       	movw	r30, r22
    57c6:	dc 01       	movw	r26, r24
    57c8:	0d 90       	ld	r0, X+
    57ca:	00 20       	and	r0, r0
    57cc:	e9 f7       	brne	.-6      	; 0x57c8 <strcat+0x4>
    57ce:	11 97       	sbiw	r26, 0x01	; 1
    57d0:	01 90       	ld	r0, Z+
    57d2:	0d 92       	st	X+, r0
    57d4:	00 20       	and	r0, r0
    57d6:	e1 f7       	brne	.-8      	; 0x57d0 <strcat+0xc>
    57d8:	08 95       	ret

000057da <strcpy>:
    57da:	fb 01       	movw	r30, r22
    57dc:	dc 01       	movw	r26, r24
    57de:	01 90       	ld	r0, Z+
    57e0:	0d 92       	st	X+, r0
    57e2:	00 20       	and	r0, r0
    57e4:	e1 f7       	brne	.-8      	; 0x57de <strcpy+0x4>
    57e6:	08 95       	ret

000057e8 <strncasecmp>:
    57e8:	fb 01       	movw	r30, r22
    57ea:	dc 01       	movw	r26, r24
    57ec:	41 50       	subi	r20, 0x01	; 1
    57ee:	50 40       	sbci	r21, 0x00	; 0
    57f0:	88 f0       	brcs	.+34     	; 0x5814 <strncasecmp+0x2c>
    57f2:	8d 91       	ld	r24, X+
    57f4:	81 34       	cpi	r24, 0x41	; 65
    57f6:	1c f0       	brlt	.+6      	; 0x57fe <strncasecmp+0x16>
    57f8:	8b 35       	cpi	r24, 0x5B	; 91
    57fa:	0c f4       	brge	.+2      	; 0x57fe <strncasecmp+0x16>
    57fc:	80 5e       	subi	r24, 0xE0	; 224
    57fe:	61 91       	ld	r22, Z+
    5800:	61 34       	cpi	r22, 0x41	; 65
    5802:	1c f0       	brlt	.+6      	; 0x580a <strncasecmp+0x22>
    5804:	6b 35       	cpi	r22, 0x5B	; 91
    5806:	0c f4       	brge	.+2      	; 0x580a <strncasecmp+0x22>
    5808:	60 5e       	subi	r22, 0xE0	; 224
    580a:	86 1b       	sub	r24, r22
    580c:	61 11       	cpse	r22, r1
    580e:	71 f3       	breq	.-36     	; 0x57ec <strncasecmp+0x4>
    5810:	99 0b       	sbc	r25, r25
    5812:	08 95       	ret
    5814:	88 1b       	sub	r24, r24
    5816:	fc cf       	rjmp	.-8      	; 0x5810 <strncasecmp+0x28>

00005818 <printf>:
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	cd b7       	in	r28, 0x3d	; 61
    581e:	de b7       	in	r29, 0x3e	; 62
    5820:	ae 01       	movw	r20, r28
    5822:	4a 5f       	subi	r20, 0xFA	; 250
    5824:	5f 4f       	sbci	r21, 0xFF	; 255
    5826:	fa 01       	movw	r30, r20
    5828:	61 91       	ld	r22, Z+
    582a:	71 91       	ld	r23, Z+
    582c:	af 01       	movw	r20, r30
    582e:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <__iob+0x2>
    5832:	90 91 8d 1a 	lds	r25, 0x1A8D	; 0x801a8d <__iob+0x3>
    5836:	61 d0       	rcall	.+194    	; 0x58fa <vfprintf>
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	08 95       	ret

0000583e <puts>:
    583e:	0f 93       	push	r16
    5840:	1f 93       	push	r17
    5842:	cf 93       	push	r28
    5844:	df 93       	push	r29
    5846:	e0 91 8c 1a 	lds	r30, 0x1A8C	; 0x801a8c <__iob+0x2>
    584a:	f0 91 8d 1a 	lds	r31, 0x1A8D	; 0x801a8d <__iob+0x3>
    584e:	23 81       	ldd	r18, Z+3	; 0x03
    5850:	21 ff       	sbrs	r18, 1
    5852:	1b c0       	rjmp	.+54     	; 0x588a <puts+0x4c>
    5854:	8c 01       	movw	r16, r24
    5856:	d0 e0       	ldi	r29, 0x00	; 0
    5858:	c0 e0       	ldi	r28, 0x00	; 0
    585a:	f8 01       	movw	r30, r16
    585c:	81 91       	ld	r24, Z+
    585e:	8f 01       	movw	r16, r30
    5860:	60 91 8c 1a 	lds	r22, 0x1A8C	; 0x801a8c <__iob+0x2>
    5864:	70 91 8d 1a 	lds	r23, 0x1A8D	; 0x801a8d <__iob+0x3>
    5868:	db 01       	movw	r26, r22
    586a:	18 96       	adiw	r26, 0x08	; 8
    586c:	ed 91       	ld	r30, X+
    586e:	fc 91       	ld	r31, X
    5870:	19 97       	sbiw	r26, 0x09	; 9
    5872:	88 23       	and	r24, r24
    5874:	31 f0       	breq	.+12     	; 0x5882 <puts+0x44>
    5876:	19 95       	eicall
    5878:	89 2b       	or	r24, r25
    587a:	79 f3       	breq	.-34     	; 0x585a <puts+0x1c>
    587c:	df ef       	ldi	r29, 0xFF	; 255
    587e:	cf ef       	ldi	r28, 0xFF	; 255
    5880:	ec cf       	rjmp	.-40     	; 0x585a <puts+0x1c>
    5882:	8a e0       	ldi	r24, 0x0A	; 10
    5884:	19 95       	eicall
    5886:	89 2b       	or	r24, r25
    5888:	19 f0       	breq	.+6      	; 0x5890 <puts+0x52>
    588a:	8f ef       	ldi	r24, 0xFF	; 255
    588c:	9f ef       	ldi	r25, 0xFF	; 255
    588e:	02 c0       	rjmp	.+4      	; 0x5894 <puts+0x56>
    5890:	8d 2f       	mov	r24, r29
    5892:	9c 2f       	mov	r25, r28
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	1f 91       	pop	r17
    589a:	0f 91       	pop	r16
    589c:	08 95       	ret

0000589e <sprintf>:
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	cd b7       	in	r28, 0x3d	; 61
    58a8:	de b7       	in	r29, 0x3e	; 62
    58aa:	2e 97       	sbiw	r28, 0x0e	; 14
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	f8 94       	cli
    58b0:	de bf       	out	0x3e, r29	; 62
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	cd bf       	out	0x3d, r28	; 61
    58b6:	0e 89       	ldd	r16, Y+22	; 0x16
    58b8:	1f 89       	ldd	r17, Y+23	; 0x17
    58ba:	86 e0       	ldi	r24, 0x06	; 6
    58bc:	8c 83       	std	Y+4, r24	; 0x04
    58be:	1a 83       	std	Y+2, r17	; 0x02
    58c0:	09 83       	std	Y+1, r16	; 0x01
    58c2:	8f ef       	ldi	r24, 0xFF	; 255
    58c4:	9f e7       	ldi	r25, 0x7F	; 127
    58c6:	9e 83       	std	Y+6, r25	; 0x06
    58c8:	8d 83       	std	Y+5, r24	; 0x05
    58ca:	ae 01       	movw	r20, r28
    58cc:	46 5e       	subi	r20, 0xE6	; 230
    58ce:	5f 4f       	sbci	r21, 0xFF	; 255
    58d0:	68 8d       	ldd	r22, Y+24	; 0x18
    58d2:	79 8d       	ldd	r23, Y+25	; 0x19
    58d4:	ce 01       	movw	r24, r28
    58d6:	01 96       	adiw	r24, 0x01	; 1
    58d8:	10 d0       	rcall	.+32     	; 0x58fa <vfprintf>
    58da:	ef 81       	ldd	r30, Y+7	; 0x07
    58dc:	f8 85       	ldd	r31, Y+8	; 0x08
    58de:	e0 0f       	add	r30, r16
    58e0:	f1 1f       	adc	r31, r17
    58e2:	10 82       	st	Z, r1
    58e4:	2e 96       	adiw	r28, 0x0e	; 14
    58e6:	0f b6       	in	r0, 0x3f	; 63
    58e8:	f8 94       	cli
    58ea:	de bf       	out	0x3e, r29	; 62
    58ec:	0f be       	out	0x3f, r0	; 63
    58ee:	cd bf       	out	0x3d, r28	; 61
    58f0:	df 91       	pop	r29
    58f2:	cf 91       	pop	r28
    58f4:	1f 91       	pop	r17
    58f6:	0f 91       	pop	r16
    58f8:	08 95       	ret

000058fa <vfprintf>:
    58fa:	2f 92       	push	r2
    58fc:	3f 92       	push	r3
    58fe:	4f 92       	push	r4
    5900:	5f 92       	push	r5
    5902:	6f 92       	push	r6
    5904:	7f 92       	push	r7
    5906:	8f 92       	push	r8
    5908:	9f 92       	push	r9
    590a:	af 92       	push	r10
    590c:	bf 92       	push	r11
    590e:	cf 92       	push	r12
    5910:	df 92       	push	r13
    5912:	ef 92       	push	r14
    5914:	ff 92       	push	r15
    5916:	0f 93       	push	r16
    5918:	1f 93       	push	r17
    591a:	cf 93       	push	r28
    591c:	df 93       	push	r29
    591e:	cd b7       	in	r28, 0x3d	; 61
    5920:	de b7       	in	r29, 0x3e	; 62
    5922:	2b 97       	sbiw	r28, 0x0b	; 11
    5924:	0f b6       	in	r0, 0x3f	; 63
    5926:	f8 94       	cli
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	cd bf       	out	0x3d, r28	; 61
    592e:	6c 01       	movw	r12, r24
    5930:	7b 01       	movw	r14, r22
    5932:	8a 01       	movw	r16, r20
    5934:	fc 01       	movw	r30, r24
    5936:	17 82       	std	Z+7, r1	; 0x07
    5938:	16 82       	std	Z+6, r1	; 0x06
    593a:	83 81       	ldd	r24, Z+3	; 0x03
    593c:	81 ff       	sbrs	r24, 1
    593e:	bf c1       	rjmp	.+894    	; 0x5cbe <vfprintf+0x3c4>
    5940:	ce 01       	movw	r24, r28
    5942:	01 96       	adiw	r24, 0x01	; 1
    5944:	3c 01       	movw	r6, r24
    5946:	f6 01       	movw	r30, r12
    5948:	93 81       	ldd	r25, Z+3	; 0x03
    594a:	f7 01       	movw	r30, r14
    594c:	93 fd       	sbrc	r25, 3
    594e:	85 91       	lpm	r24, Z+
    5950:	93 ff       	sbrs	r25, 3
    5952:	81 91       	ld	r24, Z+
    5954:	7f 01       	movw	r14, r30
    5956:	88 23       	and	r24, r24
    5958:	09 f4       	brne	.+2      	; 0x595c <vfprintf+0x62>
    595a:	ad c1       	rjmp	.+858    	; 0x5cb6 <vfprintf+0x3bc>
    595c:	85 32       	cpi	r24, 0x25	; 37
    595e:	39 f4       	brne	.+14     	; 0x596e <vfprintf+0x74>
    5960:	93 fd       	sbrc	r25, 3
    5962:	85 91       	lpm	r24, Z+
    5964:	93 ff       	sbrs	r25, 3
    5966:	81 91       	ld	r24, Z+
    5968:	7f 01       	movw	r14, r30
    596a:	85 32       	cpi	r24, 0x25	; 37
    596c:	21 f4       	brne	.+8      	; 0x5976 <vfprintf+0x7c>
    596e:	b6 01       	movw	r22, r12
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	d6 d1       	rcall	.+940    	; 0x5d20 <fputc>
    5974:	e8 cf       	rjmp	.-48     	; 0x5946 <vfprintf+0x4c>
    5976:	91 2c       	mov	r9, r1
    5978:	21 2c       	mov	r2, r1
    597a:	31 2c       	mov	r3, r1
    597c:	ff e1       	ldi	r31, 0x1F	; 31
    597e:	f3 15       	cp	r31, r3
    5980:	d8 f0       	brcs	.+54     	; 0x59b8 <vfprintf+0xbe>
    5982:	8b 32       	cpi	r24, 0x2B	; 43
    5984:	79 f0       	breq	.+30     	; 0x59a4 <vfprintf+0xaa>
    5986:	38 f4       	brcc	.+14     	; 0x5996 <vfprintf+0x9c>
    5988:	80 32       	cpi	r24, 0x20	; 32
    598a:	79 f0       	breq	.+30     	; 0x59aa <vfprintf+0xb0>
    598c:	83 32       	cpi	r24, 0x23	; 35
    598e:	a1 f4       	brne	.+40     	; 0x59b8 <vfprintf+0xbe>
    5990:	23 2d       	mov	r18, r3
    5992:	20 61       	ori	r18, 0x10	; 16
    5994:	1d c0       	rjmp	.+58     	; 0x59d0 <vfprintf+0xd6>
    5996:	8d 32       	cpi	r24, 0x2D	; 45
    5998:	61 f0       	breq	.+24     	; 0x59b2 <vfprintf+0xb8>
    599a:	80 33       	cpi	r24, 0x30	; 48
    599c:	69 f4       	brne	.+26     	; 0x59b8 <vfprintf+0xbe>
    599e:	23 2d       	mov	r18, r3
    59a0:	21 60       	ori	r18, 0x01	; 1
    59a2:	16 c0       	rjmp	.+44     	; 0x59d0 <vfprintf+0xd6>
    59a4:	83 2d       	mov	r24, r3
    59a6:	82 60       	ori	r24, 0x02	; 2
    59a8:	38 2e       	mov	r3, r24
    59aa:	e3 2d       	mov	r30, r3
    59ac:	e4 60       	ori	r30, 0x04	; 4
    59ae:	3e 2e       	mov	r3, r30
    59b0:	2a c0       	rjmp	.+84     	; 0x5a06 <vfprintf+0x10c>
    59b2:	f3 2d       	mov	r31, r3
    59b4:	f8 60       	ori	r31, 0x08	; 8
    59b6:	1d c0       	rjmp	.+58     	; 0x59f2 <vfprintf+0xf8>
    59b8:	37 fc       	sbrc	r3, 7
    59ba:	2d c0       	rjmp	.+90     	; 0x5a16 <vfprintf+0x11c>
    59bc:	20 ed       	ldi	r18, 0xD0	; 208
    59be:	28 0f       	add	r18, r24
    59c0:	2a 30       	cpi	r18, 0x0A	; 10
    59c2:	40 f0       	brcs	.+16     	; 0x59d4 <vfprintf+0xda>
    59c4:	8e 32       	cpi	r24, 0x2E	; 46
    59c6:	b9 f4       	brne	.+46     	; 0x59f6 <vfprintf+0xfc>
    59c8:	36 fc       	sbrc	r3, 6
    59ca:	75 c1       	rjmp	.+746    	; 0x5cb6 <vfprintf+0x3bc>
    59cc:	23 2d       	mov	r18, r3
    59ce:	20 64       	ori	r18, 0x40	; 64
    59d0:	32 2e       	mov	r3, r18
    59d2:	19 c0       	rjmp	.+50     	; 0x5a06 <vfprintf+0x10c>
    59d4:	36 fe       	sbrs	r3, 6
    59d6:	06 c0       	rjmp	.+12     	; 0x59e4 <vfprintf+0xea>
    59d8:	8a e0       	ldi	r24, 0x0A	; 10
    59da:	98 9e       	mul	r9, r24
    59dc:	20 0d       	add	r18, r0
    59de:	11 24       	eor	r1, r1
    59e0:	92 2e       	mov	r9, r18
    59e2:	11 c0       	rjmp	.+34     	; 0x5a06 <vfprintf+0x10c>
    59e4:	ea e0       	ldi	r30, 0x0A	; 10
    59e6:	2e 9e       	mul	r2, r30
    59e8:	20 0d       	add	r18, r0
    59ea:	11 24       	eor	r1, r1
    59ec:	22 2e       	mov	r2, r18
    59ee:	f3 2d       	mov	r31, r3
    59f0:	f0 62       	ori	r31, 0x20	; 32
    59f2:	3f 2e       	mov	r3, r31
    59f4:	08 c0       	rjmp	.+16     	; 0x5a06 <vfprintf+0x10c>
    59f6:	8c 36       	cpi	r24, 0x6C	; 108
    59f8:	21 f4       	brne	.+8      	; 0x5a02 <vfprintf+0x108>
    59fa:	83 2d       	mov	r24, r3
    59fc:	80 68       	ori	r24, 0x80	; 128
    59fe:	38 2e       	mov	r3, r24
    5a00:	02 c0       	rjmp	.+4      	; 0x5a06 <vfprintf+0x10c>
    5a02:	88 36       	cpi	r24, 0x68	; 104
    5a04:	41 f4       	brne	.+16     	; 0x5a16 <vfprintf+0x11c>
    5a06:	f7 01       	movw	r30, r14
    5a08:	93 fd       	sbrc	r25, 3
    5a0a:	85 91       	lpm	r24, Z+
    5a0c:	93 ff       	sbrs	r25, 3
    5a0e:	81 91       	ld	r24, Z+
    5a10:	7f 01       	movw	r14, r30
    5a12:	81 11       	cpse	r24, r1
    5a14:	b3 cf       	rjmp	.-154    	; 0x597c <vfprintf+0x82>
    5a16:	98 2f       	mov	r25, r24
    5a18:	9f 7d       	andi	r25, 0xDF	; 223
    5a1a:	95 54       	subi	r25, 0x45	; 69
    5a1c:	93 30       	cpi	r25, 0x03	; 3
    5a1e:	28 f4       	brcc	.+10     	; 0x5a2a <vfprintf+0x130>
    5a20:	0c 5f       	subi	r16, 0xFC	; 252
    5a22:	1f 4f       	sbci	r17, 0xFF	; 255
    5a24:	9f e3       	ldi	r25, 0x3F	; 63
    5a26:	99 83       	std	Y+1, r25	; 0x01
    5a28:	0d c0       	rjmp	.+26     	; 0x5a44 <vfprintf+0x14a>
    5a2a:	83 36       	cpi	r24, 0x63	; 99
    5a2c:	31 f0       	breq	.+12     	; 0x5a3a <vfprintf+0x140>
    5a2e:	83 37       	cpi	r24, 0x73	; 115
    5a30:	71 f0       	breq	.+28     	; 0x5a4e <vfprintf+0x154>
    5a32:	83 35       	cpi	r24, 0x53	; 83
    5a34:	09 f0       	breq	.+2      	; 0x5a38 <vfprintf+0x13e>
    5a36:	55 c0       	rjmp	.+170    	; 0x5ae2 <vfprintf+0x1e8>
    5a38:	20 c0       	rjmp	.+64     	; 0x5a7a <vfprintf+0x180>
    5a3a:	f8 01       	movw	r30, r16
    5a3c:	80 81       	ld	r24, Z
    5a3e:	89 83       	std	Y+1, r24	; 0x01
    5a40:	0e 5f       	subi	r16, 0xFE	; 254
    5a42:	1f 4f       	sbci	r17, 0xFF	; 255
    5a44:	88 24       	eor	r8, r8
    5a46:	83 94       	inc	r8
    5a48:	91 2c       	mov	r9, r1
    5a4a:	53 01       	movw	r10, r6
    5a4c:	12 c0       	rjmp	.+36     	; 0x5a72 <vfprintf+0x178>
    5a4e:	28 01       	movw	r4, r16
    5a50:	f2 e0       	ldi	r31, 0x02	; 2
    5a52:	4f 0e       	add	r4, r31
    5a54:	51 1c       	adc	r5, r1
    5a56:	f8 01       	movw	r30, r16
    5a58:	a0 80       	ld	r10, Z
    5a5a:	b1 80       	ldd	r11, Z+1	; 0x01
    5a5c:	36 fe       	sbrs	r3, 6
    5a5e:	03 c0       	rjmp	.+6      	; 0x5a66 <vfprintf+0x16c>
    5a60:	69 2d       	mov	r22, r9
    5a62:	70 e0       	ldi	r23, 0x00	; 0
    5a64:	02 c0       	rjmp	.+4      	; 0x5a6a <vfprintf+0x170>
    5a66:	6f ef       	ldi	r22, 0xFF	; 255
    5a68:	7f ef       	ldi	r23, 0xFF	; 255
    5a6a:	c5 01       	movw	r24, r10
    5a6c:	4e d1       	rcall	.+668    	; 0x5d0a <strnlen>
    5a6e:	4c 01       	movw	r8, r24
    5a70:	82 01       	movw	r16, r4
    5a72:	f3 2d       	mov	r31, r3
    5a74:	ff 77       	andi	r31, 0x7F	; 127
    5a76:	3f 2e       	mov	r3, r31
    5a78:	15 c0       	rjmp	.+42     	; 0x5aa4 <vfprintf+0x1aa>
    5a7a:	28 01       	movw	r4, r16
    5a7c:	22 e0       	ldi	r18, 0x02	; 2
    5a7e:	42 0e       	add	r4, r18
    5a80:	51 1c       	adc	r5, r1
    5a82:	f8 01       	movw	r30, r16
    5a84:	a0 80       	ld	r10, Z
    5a86:	b1 80       	ldd	r11, Z+1	; 0x01
    5a88:	36 fe       	sbrs	r3, 6
    5a8a:	03 c0       	rjmp	.+6      	; 0x5a92 <vfprintf+0x198>
    5a8c:	69 2d       	mov	r22, r9
    5a8e:	70 e0       	ldi	r23, 0x00	; 0
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <vfprintf+0x19c>
    5a92:	6f ef       	ldi	r22, 0xFF	; 255
    5a94:	7f ef       	ldi	r23, 0xFF	; 255
    5a96:	c5 01       	movw	r24, r10
    5a98:	2d d1       	rcall	.+602    	; 0x5cf4 <strnlen_P>
    5a9a:	4c 01       	movw	r8, r24
    5a9c:	f3 2d       	mov	r31, r3
    5a9e:	f0 68       	ori	r31, 0x80	; 128
    5aa0:	3f 2e       	mov	r3, r31
    5aa2:	82 01       	movw	r16, r4
    5aa4:	33 fc       	sbrc	r3, 3
    5aa6:	19 c0       	rjmp	.+50     	; 0x5ada <vfprintf+0x1e0>
    5aa8:	82 2d       	mov	r24, r2
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	88 16       	cp	r8, r24
    5aae:	99 06       	cpc	r9, r25
    5ab0:	a0 f4       	brcc	.+40     	; 0x5ada <vfprintf+0x1e0>
    5ab2:	b6 01       	movw	r22, r12
    5ab4:	80 e2       	ldi	r24, 0x20	; 32
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	33 d1       	rcall	.+614    	; 0x5d20 <fputc>
    5aba:	2a 94       	dec	r2
    5abc:	f5 cf       	rjmp	.-22     	; 0x5aa8 <vfprintf+0x1ae>
    5abe:	f5 01       	movw	r30, r10
    5ac0:	37 fc       	sbrc	r3, 7
    5ac2:	85 91       	lpm	r24, Z+
    5ac4:	37 fe       	sbrs	r3, 7
    5ac6:	81 91       	ld	r24, Z+
    5ac8:	5f 01       	movw	r10, r30
    5aca:	b6 01       	movw	r22, r12
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	28 d1       	rcall	.+592    	; 0x5d20 <fputc>
    5ad0:	21 10       	cpse	r2, r1
    5ad2:	2a 94       	dec	r2
    5ad4:	21 e0       	ldi	r18, 0x01	; 1
    5ad6:	82 1a       	sub	r8, r18
    5ad8:	91 08       	sbc	r9, r1
    5ada:	81 14       	cp	r8, r1
    5adc:	91 04       	cpc	r9, r1
    5ade:	79 f7       	brne	.-34     	; 0x5abe <vfprintf+0x1c4>
    5ae0:	e1 c0       	rjmp	.+450    	; 0x5ca4 <vfprintf+0x3aa>
    5ae2:	84 36       	cpi	r24, 0x64	; 100
    5ae4:	11 f0       	breq	.+4      	; 0x5aea <vfprintf+0x1f0>
    5ae6:	89 36       	cpi	r24, 0x69	; 105
    5ae8:	39 f5       	brne	.+78     	; 0x5b38 <vfprintf+0x23e>
    5aea:	f8 01       	movw	r30, r16
    5aec:	37 fe       	sbrs	r3, 7
    5aee:	07 c0       	rjmp	.+14     	; 0x5afe <vfprintf+0x204>
    5af0:	60 81       	ld	r22, Z
    5af2:	71 81       	ldd	r23, Z+1	; 0x01
    5af4:	82 81       	ldd	r24, Z+2	; 0x02
    5af6:	93 81       	ldd	r25, Z+3	; 0x03
    5af8:	0c 5f       	subi	r16, 0xFC	; 252
    5afa:	1f 4f       	sbci	r17, 0xFF	; 255
    5afc:	08 c0       	rjmp	.+16     	; 0x5b0e <vfprintf+0x214>
    5afe:	60 81       	ld	r22, Z
    5b00:	71 81       	ldd	r23, Z+1	; 0x01
    5b02:	07 2e       	mov	r0, r23
    5b04:	00 0c       	add	r0, r0
    5b06:	88 0b       	sbc	r24, r24
    5b08:	99 0b       	sbc	r25, r25
    5b0a:	0e 5f       	subi	r16, 0xFE	; 254
    5b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b0e:	f3 2d       	mov	r31, r3
    5b10:	ff 76       	andi	r31, 0x6F	; 111
    5b12:	3f 2e       	mov	r3, r31
    5b14:	97 ff       	sbrs	r25, 7
    5b16:	09 c0       	rjmp	.+18     	; 0x5b2a <vfprintf+0x230>
    5b18:	90 95       	com	r25
    5b1a:	80 95       	com	r24
    5b1c:	70 95       	com	r23
    5b1e:	61 95       	neg	r22
    5b20:	7f 4f       	sbci	r23, 0xFF	; 255
    5b22:	8f 4f       	sbci	r24, 0xFF	; 255
    5b24:	9f 4f       	sbci	r25, 0xFF	; 255
    5b26:	f0 68       	ori	r31, 0x80	; 128
    5b28:	3f 2e       	mov	r3, r31
    5b2a:	2a e0       	ldi	r18, 0x0A	; 10
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	a3 01       	movw	r20, r6
    5b30:	33 d1       	rcall	.+614    	; 0x5d98 <__ultoa_invert>
    5b32:	88 2e       	mov	r8, r24
    5b34:	86 18       	sub	r8, r6
    5b36:	44 c0       	rjmp	.+136    	; 0x5bc0 <vfprintf+0x2c6>
    5b38:	85 37       	cpi	r24, 0x75	; 117
    5b3a:	31 f4       	brne	.+12     	; 0x5b48 <vfprintf+0x24e>
    5b3c:	23 2d       	mov	r18, r3
    5b3e:	2f 7e       	andi	r18, 0xEF	; 239
    5b40:	b2 2e       	mov	r11, r18
    5b42:	2a e0       	ldi	r18, 0x0A	; 10
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	25 c0       	rjmp	.+74     	; 0x5b92 <vfprintf+0x298>
    5b48:	93 2d       	mov	r25, r3
    5b4a:	99 7f       	andi	r25, 0xF9	; 249
    5b4c:	b9 2e       	mov	r11, r25
    5b4e:	8f 36       	cpi	r24, 0x6F	; 111
    5b50:	c1 f0       	breq	.+48     	; 0x5b82 <vfprintf+0x288>
    5b52:	18 f4       	brcc	.+6      	; 0x5b5a <vfprintf+0x260>
    5b54:	88 35       	cpi	r24, 0x58	; 88
    5b56:	79 f0       	breq	.+30     	; 0x5b76 <vfprintf+0x27c>
    5b58:	ae c0       	rjmp	.+348    	; 0x5cb6 <vfprintf+0x3bc>
    5b5a:	80 37       	cpi	r24, 0x70	; 112
    5b5c:	19 f0       	breq	.+6      	; 0x5b64 <vfprintf+0x26a>
    5b5e:	88 37       	cpi	r24, 0x78	; 120
    5b60:	21 f0       	breq	.+8      	; 0x5b6a <vfprintf+0x270>
    5b62:	a9 c0       	rjmp	.+338    	; 0x5cb6 <vfprintf+0x3bc>
    5b64:	e9 2f       	mov	r30, r25
    5b66:	e0 61       	ori	r30, 0x10	; 16
    5b68:	be 2e       	mov	r11, r30
    5b6a:	b4 fe       	sbrs	r11, 4
    5b6c:	0d c0       	rjmp	.+26     	; 0x5b88 <vfprintf+0x28e>
    5b6e:	fb 2d       	mov	r31, r11
    5b70:	f4 60       	ori	r31, 0x04	; 4
    5b72:	bf 2e       	mov	r11, r31
    5b74:	09 c0       	rjmp	.+18     	; 0x5b88 <vfprintf+0x28e>
    5b76:	34 fe       	sbrs	r3, 4
    5b78:	0a c0       	rjmp	.+20     	; 0x5b8e <vfprintf+0x294>
    5b7a:	29 2f       	mov	r18, r25
    5b7c:	26 60       	ori	r18, 0x06	; 6
    5b7e:	b2 2e       	mov	r11, r18
    5b80:	06 c0       	rjmp	.+12     	; 0x5b8e <vfprintf+0x294>
    5b82:	28 e0       	ldi	r18, 0x08	; 8
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	05 c0       	rjmp	.+10     	; 0x5b92 <vfprintf+0x298>
    5b88:	20 e1       	ldi	r18, 0x10	; 16
    5b8a:	30 e0       	ldi	r19, 0x00	; 0
    5b8c:	02 c0       	rjmp	.+4      	; 0x5b92 <vfprintf+0x298>
    5b8e:	20 e1       	ldi	r18, 0x10	; 16
    5b90:	32 e0       	ldi	r19, 0x02	; 2
    5b92:	f8 01       	movw	r30, r16
    5b94:	b7 fe       	sbrs	r11, 7
    5b96:	07 c0       	rjmp	.+14     	; 0x5ba6 <vfprintf+0x2ac>
    5b98:	60 81       	ld	r22, Z
    5b9a:	71 81       	ldd	r23, Z+1	; 0x01
    5b9c:	82 81       	ldd	r24, Z+2	; 0x02
    5b9e:	93 81       	ldd	r25, Z+3	; 0x03
    5ba0:	0c 5f       	subi	r16, 0xFC	; 252
    5ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ba4:	06 c0       	rjmp	.+12     	; 0x5bb2 <vfprintf+0x2b8>
    5ba6:	60 81       	ld	r22, Z
    5ba8:	71 81       	ldd	r23, Z+1	; 0x01
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	0e 5f       	subi	r16, 0xFE	; 254
    5bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bb2:	a3 01       	movw	r20, r6
    5bb4:	f1 d0       	rcall	.+482    	; 0x5d98 <__ultoa_invert>
    5bb6:	88 2e       	mov	r8, r24
    5bb8:	86 18       	sub	r8, r6
    5bba:	fb 2d       	mov	r31, r11
    5bbc:	ff 77       	andi	r31, 0x7F	; 127
    5bbe:	3f 2e       	mov	r3, r31
    5bc0:	36 fe       	sbrs	r3, 6
    5bc2:	0d c0       	rjmp	.+26     	; 0x5bde <vfprintf+0x2e4>
    5bc4:	23 2d       	mov	r18, r3
    5bc6:	2e 7f       	andi	r18, 0xFE	; 254
    5bc8:	a2 2e       	mov	r10, r18
    5bca:	89 14       	cp	r8, r9
    5bcc:	58 f4       	brcc	.+22     	; 0x5be4 <vfprintf+0x2ea>
    5bce:	34 fe       	sbrs	r3, 4
    5bd0:	0b c0       	rjmp	.+22     	; 0x5be8 <vfprintf+0x2ee>
    5bd2:	32 fc       	sbrc	r3, 2
    5bd4:	09 c0       	rjmp	.+18     	; 0x5be8 <vfprintf+0x2ee>
    5bd6:	83 2d       	mov	r24, r3
    5bd8:	8e 7e       	andi	r24, 0xEE	; 238
    5bda:	a8 2e       	mov	r10, r24
    5bdc:	05 c0       	rjmp	.+10     	; 0x5be8 <vfprintf+0x2ee>
    5bde:	b8 2c       	mov	r11, r8
    5be0:	a3 2c       	mov	r10, r3
    5be2:	03 c0       	rjmp	.+6      	; 0x5bea <vfprintf+0x2f0>
    5be4:	b8 2c       	mov	r11, r8
    5be6:	01 c0       	rjmp	.+2      	; 0x5bea <vfprintf+0x2f0>
    5be8:	b9 2c       	mov	r11, r9
    5bea:	a4 fe       	sbrs	r10, 4
    5bec:	0f c0       	rjmp	.+30     	; 0x5c0c <vfprintf+0x312>
    5bee:	fe 01       	movw	r30, r28
    5bf0:	e8 0d       	add	r30, r8
    5bf2:	f1 1d       	adc	r31, r1
    5bf4:	80 81       	ld	r24, Z
    5bf6:	80 33       	cpi	r24, 0x30	; 48
    5bf8:	21 f4       	brne	.+8      	; 0x5c02 <vfprintf+0x308>
    5bfa:	9a 2d       	mov	r25, r10
    5bfc:	99 7e       	andi	r25, 0xE9	; 233
    5bfe:	a9 2e       	mov	r10, r25
    5c00:	09 c0       	rjmp	.+18     	; 0x5c14 <vfprintf+0x31a>
    5c02:	a2 fe       	sbrs	r10, 2
    5c04:	06 c0       	rjmp	.+12     	; 0x5c12 <vfprintf+0x318>
    5c06:	b3 94       	inc	r11
    5c08:	b3 94       	inc	r11
    5c0a:	04 c0       	rjmp	.+8      	; 0x5c14 <vfprintf+0x31a>
    5c0c:	8a 2d       	mov	r24, r10
    5c0e:	86 78       	andi	r24, 0x86	; 134
    5c10:	09 f0       	breq	.+2      	; 0x5c14 <vfprintf+0x31a>
    5c12:	b3 94       	inc	r11
    5c14:	a3 fc       	sbrc	r10, 3
    5c16:	10 c0       	rjmp	.+32     	; 0x5c38 <vfprintf+0x33e>
    5c18:	a0 fe       	sbrs	r10, 0
    5c1a:	06 c0       	rjmp	.+12     	; 0x5c28 <vfprintf+0x32e>
    5c1c:	b2 14       	cp	r11, r2
    5c1e:	80 f4       	brcc	.+32     	; 0x5c40 <vfprintf+0x346>
    5c20:	28 0c       	add	r2, r8
    5c22:	92 2c       	mov	r9, r2
    5c24:	9b 18       	sub	r9, r11
    5c26:	0d c0       	rjmp	.+26     	; 0x5c42 <vfprintf+0x348>
    5c28:	b2 14       	cp	r11, r2
    5c2a:	58 f4       	brcc	.+22     	; 0x5c42 <vfprintf+0x348>
    5c2c:	b6 01       	movw	r22, r12
    5c2e:	80 e2       	ldi	r24, 0x20	; 32
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	76 d0       	rcall	.+236    	; 0x5d20 <fputc>
    5c34:	b3 94       	inc	r11
    5c36:	f8 cf       	rjmp	.-16     	; 0x5c28 <vfprintf+0x32e>
    5c38:	b2 14       	cp	r11, r2
    5c3a:	18 f4       	brcc	.+6      	; 0x5c42 <vfprintf+0x348>
    5c3c:	2b 18       	sub	r2, r11
    5c3e:	02 c0       	rjmp	.+4      	; 0x5c44 <vfprintf+0x34a>
    5c40:	98 2c       	mov	r9, r8
    5c42:	21 2c       	mov	r2, r1
    5c44:	a4 fe       	sbrs	r10, 4
    5c46:	0f c0       	rjmp	.+30     	; 0x5c66 <vfprintf+0x36c>
    5c48:	b6 01       	movw	r22, r12
    5c4a:	80 e3       	ldi	r24, 0x30	; 48
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	68 d0       	rcall	.+208    	; 0x5d20 <fputc>
    5c50:	a2 fe       	sbrs	r10, 2
    5c52:	16 c0       	rjmp	.+44     	; 0x5c80 <vfprintf+0x386>
    5c54:	a1 fc       	sbrc	r10, 1
    5c56:	03 c0       	rjmp	.+6      	; 0x5c5e <vfprintf+0x364>
    5c58:	88 e7       	ldi	r24, 0x78	; 120
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	02 c0       	rjmp	.+4      	; 0x5c62 <vfprintf+0x368>
    5c5e:	88 e5       	ldi	r24, 0x58	; 88
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	b6 01       	movw	r22, r12
    5c64:	0c c0       	rjmp	.+24     	; 0x5c7e <vfprintf+0x384>
    5c66:	8a 2d       	mov	r24, r10
    5c68:	86 78       	andi	r24, 0x86	; 134
    5c6a:	51 f0       	breq	.+20     	; 0x5c80 <vfprintf+0x386>
    5c6c:	a1 fe       	sbrs	r10, 1
    5c6e:	02 c0       	rjmp	.+4      	; 0x5c74 <vfprintf+0x37a>
    5c70:	8b e2       	ldi	r24, 0x2B	; 43
    5c72:	01 c0       	rjmp	.+2      	; 0x5c76 <vfprintf+0x37c>
    5c74:	80 e2       	ldi	r24, 0x20	; 32
    5c76:	a7 fc       	sbrc	r10, 7
    5c78:	8d e2       	ldi	r24, 0x2D	; 45
    5c7a:	b6 01       	movw	r22, r12
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	50 d0       	rcall	.+160    	; 0x5d20 <fputc>
    5c80:	89 14       	cp	r8, r9
    5c82:	30 f4       	brcc	.+12     	; 0x5c90 <vfprintf+0x396>
    5c84:	b6 01       	movw	r22, r12
    5c86:	80 e3       	ldi	r24, 0x30	; 48
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	4a d0       	rcall	.+148    	; 0x5d20 <fputc>
    5c8c:	9a 94       	dec	r9
    5c8e:	f8 cf       	rjmp	.-16     	; 0x5c80 <vfprintf+0x386>
    5c90:	8a 94       	dec	r8
    5c92:	f3 01       	movw	r30, r6
    5c94:	e8 0d       	add	r30, r8
    5c96:	f1 1d       	adc	r31, r1
    5c98:	80 81       	ld	r24, Z
    5c9a:	b6 01       	movw	r22, r12
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	40 d0       	rcall	.+128    	; 0x5d20 <fputc>
    5ca0:	81 10       	cpse	r8, r1
    5ca2:	f6 cf       	rjmp	.-20     	; 0x5c90 <vfprintf+0x396>
    5ca4:	22 20       	and	r2, r2
    5ca6:	09 f4       	brne	.+2      	; 0x5caa <vfprintf+0x3b0>
    5ca8:	4e ce       	rjmp	.-868    	; 0x5946 <vfprintf+0x4c>
    5caa:	b6 01       	movw	r22, r12
    5cac:	80 e2       	ldi	r24, 0x20	; 32
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	37 d0       	rcall	.+110    	; 0x5d20 <fputc>
    5cb2:	2a 94       	dec	r2
    5cb4:	f7 cf       	rjmp	.-18     	; 0x5ca4 <vfprintf+0x3aa>
    5cb6:	f6 01       	movw	r30, r12
    5cb8:	86 81       	ldd	r24, Z+6	; 0x06
    5cba:	97 81       	ldd	r25, Z+7	; 0x07
    5cbc:	02 c0       	rjmp	.+4      	; 0x5cc2 <vfprintf+0x3c8>
    5cbe:	8f ef       	ldi	r24, 0xFF	; 255
    5cc0:	9f ef       	ldi	r25, 0xFF	; 255
    5cc2:	2b 96       	adiw	r28, 0x0b	; 11
    5cc4:	0f b6       	in	r0, 0x3f	; 63
    5cc6:	f8 94       	cli
    5cc8:	de bf       	out	0x3e, r29	; 62
    5cca:	0f be       	out	0x3f, r0	; 63
    5ccc:	cd bf       	out	0x3d, r28	; 61
    5cce:	df 91       	pop	r29
    5cd0:	cf 91       	pop	r28
    5cd2:	1f 91       	pop	r17
    5cd4:	0f 91       	pop	r16
    5cd6:	ff 90       	pop	r15
    5cd8:	ef 90       	pop	r14
    5cda:	df 90       	pop	r13
    5cdc:	cf 90       	pop	r12
    5cde:	bf 90       	pop	r11
    5ce0:	af 90       	pop	r10
    5ce2:	9f 90       	pop	r9
    5ce4:	8f 90       	pop	r8
    5ce6:	7f 90       	pop	r7
    5ce8:	6f 90       	pop	r6
    5cea:	5f 90       	pop	r5
    5cec:	4f 90       	pop	r4
    5cee:	3f 90       	pop	r3
    5cf0:	2f 90       	pop	r2
    5cf2:	08 95       	ret

00005cf4 <strnlen_P>:
    5cf4:	fc 01       	movw	r30, r24
    5cf6:	05 90       	lpm	r0, Z+
    5cf8:	61 50       	subi	r22, 0x01	; 1
    5cfa:	70 40       	sbci	r23, 0x00	; 0
    5cfc:	01 10       	cpse	r0, r1
    5cfe:	d8 f7       	brcc	.-10     	; 0x5cf6 <strnlen_P+0x2>
    5d00:	80 95       	com	r24
    5d02:	90 95       	com	r25
    5d04:	8e 0f       	add	r24, r30
    5d06:	9f 1f       	adc	r25, r31
    5d08:	08 95       	ret

00005d0a <strnlen>:
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	61 50       	subi	r22, 0x01	; 1
    5d0e:	70 40       	sbci	r23, 0x00	; 0
    5d10:	01 90       	ld	r0, Z+
    5d12:	01 10       	cpse	r0, r1
    5d14:	d8 f7       	brcc	.-10     	; 0x5d0c <strnlen+0x2>
    5d16:	80 95       	com	r24
    5d18:	90 95       	com	r25
    5d1a:	8e 0f       	add	r24, r30
    5d1c:	9f 1f       	adc	r25, r31
    5d1e:	08 95       	ret

00005d20 <fputc>:
    5d20:	0f 93       	push	r16
    5d22:	1f 93       	push	r17
    5d24:	cf 93       	push	r28
    5d26:	df 93       	push	r29
    5d28:	fb 01       	movw	r30, r22
    5d2a:	23 81       	ldd	r18, Z+3	; 0x03
    5d2c:	21 fd       	sbrc	r18, 1
    5d2e:	03 c0       	rjmp	.+6      	; 0x5d36 <fputc+0x16>
    5d30:	8f ef       	ldi	r24, 0xFF	; 255
    5d32:	9f ef       	ldi	r25, 0xFF	; 255
    5d34:	2c c0       	rjmp	.+88     	; 0x5d8e <fputc+0x6e>
    5d36:	22 ff       	sbrs	r18, 2
    5d38:	16 c0       	rjmp	.+44     	; 0x5d66 <fputc+0x46>
    5d3a:	46 81       	ldd	r20, Z+6	; 0x06
    5d3c:	57 81       	ldd	r21, Z+7	; 0x07
    5d3e:	24 81       	ldd	r18, Z+4	; 0x04
    5d40:	35 81       	ldd	r19, Z+5	; 0x05
    5d42:	42 17       	cp	r20, r18
    5d44:	53 07       	cpc	r21, r19
    5d46:	44 f4       	brge	.+16     	; 0x5d58 <fputc+0x38>
    5d48:	a0 81       	ld	r26, Z
    5d4a:	b1 81       	ldd	r27, Z+1	; 0x01
    5d4c:	9d 01       	movw	r18, r26
    5d4e:	2f 5f       	subi	r18, 0xFF	; 255
    5d50:	3f 4f       	sbci	r19, 0xFF	; 255
    5d52:	31 83       	std	Z+1, r19	; 0x01
    5d54:	20 83       	st	Z, r18
    5d56:	8c 93       	st	X, r24
    5d58:	26 81       	ldd	r18, Z+6	; 0x06
    5d5a:	37 81       	ldd	r19, Z+7	; 0x07
    5d5c:	2f 5f       	subi	r18, 0xFF	; 255
    5d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d60:	37 83       	std	Z+7, r19	; 0x07
    5d62:	26 83       	std	Z+6, r18	; 0x06
    5d64:	14 c0       	rjmp	.+40     	; 0x5d8e <fputc+0x6e>
    5d66:	8b 01       	movw	r16, r22
    5d68:	ec 01       	movw	r28, r24
    5d6a:	fb 01       	movw	r30, r22
    5d6c:	00 84       	ldd	r0, Z+8	; 0x08
    5d6e:	f1 85       	ldd	r31, Z+9	; 0x09
    5d70:	e0 2d       	mov	r30, r0
    5d72:	19 95       	eicall
    5d74:	89 2b       	or	r24, r25
    5d76:	e1 f6       	brne	.-72     	; 0x5d30 <fputc+0x10>
    5d78:	d8 01       	movw	r26, r16
    5d7a:	16 96       	adiw	r26, 0x06	; 6
    5d7c:	8d 91       	ld	r24, X+
    5d7e:	9c 91       	ld	r25, X
    5d80:	17 97       	sbiw	r26, 0x07	; 7
    5d82:	01 96       	adiw	r24, 0x01	; 1
    5d84:	17 96       	adiw	r26, 0x07	; 7
    5d86:	9c 93       	st	X, r25
    5d88:	8e 93       	st	-X, r24
    5d8a:	16 97       	sbiw	r26, 0x06	; 6
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	1f 91       	pop	r17
    5d94:	0f 91       	pop	r16
    5d96:	08 95       	ret

00005d98 <__ultoa_invert>:
    5d98:	fa 01       	movw	r30, r20
    5d9a:	aa 27       	eor	r26, r26
    5d9c:	28 30       	cpi	r18, 0x08	; 8
    5d9e:	51 f1       	breq	.+84     	; 0x5df4 <__ultoa_invert+0x5c>
    5da0:	20 31       	cpi	r18, 0x10	; 16
    5da2:	81 f1       	breq	.+96     	; 0x5e04 <__ultoa_invert+0x6c>
    5da4:	e8 94       	clt
    5da6:	6f 93       	push	r22
    5da8:	6e 7f       	andi	r22, 0xFE	; 254
    5daa:	6e 5f       	subi	r22, 0xFE	; 254
    5dac:	7f 4f       	sbci	r23, 0xFF	; 255
    5dae:	8f 4f       	sbci	r24, 0xFF	; 255
    5db0:	9f 4f       	sbci	r25, 0xFF	; 255
    5db2:	af 4f       	sbci	r26, 0xFF	; 255
    5db4:	b1 e0       	ldi	r27, 0x01	; 1
    5db6:	3e d0       	rcall	.+124    	; 0x5e34 <__ultoa_invert+0x9c>
    5db8:	b4 e0       	ldi	r27, 0x04	; 4
    5dba:	3c d0       	rcall	.+120    	; 0x5e34 <__ultoa_invert+0x9c>
    5dbc:	67 0f       	add	r22, r23
    5dbe:	78 1f       	adc	r23, r24
    5dc0:	89 1f       	adc	r24, r25
    5dc2:	9a 1f       	adc	r25, r26
    5dc4:	a1 1d       	adc	r26, r1
    5dc6:	68 0f       	add	r22, r24
    5dc8:	79 1f       	adc	r23, r25
    5dca:	8a 1f       	adc	r24, r26
    5dcc:	91 1d       	adc	r25, r1
    5dce:	a1 1d       	adc	r26, r1
    5dd0:	6a 0f       	add	r22, r26
    5dd2:	71 1d       	adc	r23, r1
    5dd4:	81 1d       	adc	r24, r1
    5dd6:	91 1d       	adc	r25, r1
    5dd8:	a1 1d       	adc	r26, r1
    5dda:	20 d0       	rcall	.+64     	; 0x5e1c <__ultoa_invert+0x84>
    5ddc:	09 f4       	brne	.+2      	; 0x5de0 <__ultoa_invert+0x48>
    5dde:	68 94       	set
    5de0:	3f 91       	pop	r19
    5de2:	2a e0       	ldi	r18, 0x0A	; 10
    5de4:	26 9f       	mul	r18, r22
    5de6:	11 24       	eor	r1, r1
    5de8:	30 19       	sub	r19, r0
    5dea:	30 5d       	subi	r19, 0xD0	; 208
    5dec:	31 93       	st	Z+, r19
    5dee:	de f6       	brtc	.-74     	; 0x5da6 <__ultoa_invert+0xe>
    5df0:	cf 01       	movw	r24, r30
    5df2:	08 95       	ret
    5df4:	46 2f       	mov	r20, r22
    5df6:	47 70       	andi	r20, 0x07	; 7
    5df8:	40 5d       	subi	r20, 0xD0	; 208
    5dfa:	41 93       	st	Z+, r20
    5dfc:	b3 e0       	ldi	r27, 0x03	; 3
    5dfe:	0f d0       	rcall	.+30     	; 0x5e1e <__ultoa_invert+0x86>
    5e00:	c9 f7       	brne	.-14     	; 0x5df4 <__ultoa_invert+0x5c>
    5e02:	f6 cf       	rjmp	.-20     	; 0x5df0 <__ultoa_invert+0x58>
    5e04:	46 2f       	mov	r20, r22
    5e06:	4f 70       	andi	r20, 0x0F	; 15
    5e08:	40 5d       	subi	r20, 0xD0	; 208
    5e0a:	4a 33       	cpi	r20, 0x3A	; 58
    5e0c:	18 f0       	brcs	.+6      	; 0x5e14 <__ultoa_invert+0x7c>
    5e0e:	49 5d       	subi	r20, 0xD9	; 217
    5e10:	31 fd       	sbrc	r19, 1
    5e12:	40 52       	subi	r20, 0x20	; 32
    5e14:	41 93       	st	Z+, r20
    5e16:	02 d0       	rcall	.+4      	; 0x5e1c <__ultoa_invert+0x84>
    5e18:	a9 f7       	brne	.-22     	; 0x5e04 <__ultoa_invert+0x6c>
    5e1a:	ea cf       	rjmp	.-44     	; 0x5df0 <__ultoa_invert+0x58>
    5e1c:	b4 e0       	ldi	r27, 0x04	; 4
    5e1e:	a6 95       	lsr	r26
    5e20:	97 95       	ror	r25
    5e22:	87 95       	ror	r24
    5e24:	77 95       	ror	r23
    5e26:	67 95       	ror	r22
    5e28:	ba 95       	dec	r27
    5e2a:	c9 f7       	brne	.-14     	; 0x5e1e <__ultoa_invert+0x86>
    5e2c:	00 97       	sbiw	r24, 0x00	; 0
    5e2e:	61 05       	cpc	r22, r1
    5e30:	71 05       	cpc	r23, r1
    5e32:	08 95       	ret
    5e34:	9b 01       	movw	r18, r22
    5e36:	ac 01       	movw	r20, r24
    5e38:	0a 2e       	mov	r0, r26
    5e3a:	06 94       	lsr	r0
    5e3c:	57 95       	ror	r21
    5e3e:	47 95       	ror	r20
    5e40:	37 95       	ror	r19
    5e42:	27 95       	ror	r18
    5e44:	ba 95       	dec	r27
    5e46:	c9 f7       	brne	.-14     	; 0x5e3a <__ultoa_invert+0xa2>
    5e48:	62 0f       	add	r22, r18
    5e4a:	73 1f       	adc	r23, r19
    5e4c:	84 1f       	adc	r24, r20
    5e4e:	95 1f       	adc	r25, r21
    5e50:	a0 1d       	adc	r26, r0
    5e52:	08 95       	ret

00005e54 <_exit>:
    5e54:	f8 94       	cli

00005e56 <__stop_program>:
    5e56:	ff cf       	rjmp	.-2      	; 0x5e56 <__stop_program>
